
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6e8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  0801a820  0801a820  0002a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b670  0801b670  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801b670  0801b670  0002b670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b678  0801b678  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b678  0801b678  0002b678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b67c  0801b67c  0002b67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801b680  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001718  20000134  0801b7b4  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000184c  0801b7b4  0003184c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f367  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b21d  00000000  00000000  0008f4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003398  00000000  00000000  0009a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f90  00000000  00000000  0009da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028480  00000000  00000000  000a0a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003df8e  00000000  00000000  000c8e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbcec  00000000  00000000  00106e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d438  00000000  00000000  001d2b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801a808 	.word	0x0801a808

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801a808 	.word	0x0801a808

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	  APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <Sensor_Init+0x20>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 f9ae 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>

	  while(1){
	  I2C_scan();
 8000e60:	f000 f814 	bl	8000e8c <I2C_scan>
	  HAL_Delay(5000);
 8000e64:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e68:	f000 fed5 	bl	8001c16 <HAL_Delay>
	  I2C_scan();
 8000e6c:	e7f8      	b.n	8000e60 <Sensor_Init+0x10>
 8000e6e:	bf00      	nop
 8000e70:	0801a820 	.word	0x0801a820

08000e74 <Sensor_Data>:
//	  platform_read();

	return;
}

int32_t Sensor_Data(void){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
	int data = 45;
 8000e7a:	232d      	movs	r3, #45	; 0x2d
 8000e7c:	607b      	str	r3, [r7, #4]
//        } /*manage here device not found */
//    else{
//    	while (1){APP_LOG(TS_OFF, VLEVEL_M, "ID klopt!!!!!!!\r\n");};
//    }

	return data;
 8000e7e:	687b      	ldr	r3, [r7, #4]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <I2C_scan>:
//  HAL_Delay(1000);
}



void I2C_scan(void){
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af02      	add	r7, sp, #8
	//https://deepbluembedded.com/stm32-i2c-scanner-hal-code-example/
	  uint8_t Buffer[25] = {0};
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	751a      	strb	r2, [r3, #20]
	  uint8_t Space[] = "-";
 8000ea8:	232d      	movs	r3, #45	; 0x2d
 8000eaa:	853b      	strh	r3, [r7, #40]	; 0x28
	  uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <I2C_scan+0xe4>)
 8000eae:	f107 040c 	add.w	r4, r7, #12
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebc:	c403      	stmia	r4!, {r0, r1}
 8000ebe:	8022      	strh	r2, [r4, #0]
	  uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <I2C_scan+0xe8>)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ec6:	c303      	stmia	r3!, {r0, r1}
 8000ec8:	801a      	strh	r2, [r3, #0]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	0c12      	lsrs	r2, r2, #16
 8000ece:	701a      	strb	r2, [r3, #0]
	  uint8_t i = 0, ret;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	  /*-[ I2C Bus Scanning ]-*/
	      APP_LOG(TS_OFF, VLEVEL_M, StartMSG);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f019 f96c 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
	      for(i=1; i<128; i++)
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000eea:	e033      	b.n	8000f54 <I2C_scan+0xc8>
	      {
	          ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 6, 25);
 8000eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	2319      	movs	r3, #25
 8000ef8:	2206      	movs	r2, #6
 8000efa:	481f      	ldr	r0, [pc, #124]	; (8000f78 <I2C_scan+0xec>)
 8000efc:	f003 feed 	bl	8004cda <HAL_I2C_IsDeviceReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	          if (ret != HAL_OK) /* No ACK Received At That Address */
 8000f06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <I2C_scan+0x92>
	          {
	              APP_LOG(TS_OFF, VLEVEL_M, Space);
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2002      	movs	r0, #2
 8000f18:	f019 f950 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 8000f1c:	e00c      	b.n	8000f38 <I2C_scan+0xac>
	          }
	          else if(ret == HAL_OK)
 8000f1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d108      	bne.n	8000f38 <I2C_scan+0xac>
	          {
	              APP_LOG(TS_OFF, VLEVEL_M, Buffer,"\n");
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <I2C_scan+0xf0>)
 8000f2c:	9200      	str	r2, [sp, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2002      	movs	r0, #2
 8000f34:	f019 f942 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
	          }
              APP_LOG(TS_OFF, VLEVEL_M, Buffer,"\n");
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <I2C_scan+0xf0>)
 8000f3e:	9200      	str	r2, [sp, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2002      	movs	r0, #2
 8000f46:	f019 f939 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
	      for(i=1; i<128; i++)
 8000f4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f54:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dac7      	bge.n	8000eec <I2C_scan+0x60>
	      }
	      APP_LOG(TS_OFF, VLEVEL_M, EndMSG);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2002      	movs	r0, #2
 8000f64:	f019 f92a 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
	      /*--[ Scanning Done ]--*/
}
 8000f68:	bf00      	nop
 8000f6a:	3748      	adds	r7, #72	; 0x48
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f70:	0801a8a8 	.word	0x0801a8a8
 8000f74:	0801a8c4 	.word	0x0801a8c4
 8000f78:	20001614 	.word	0x20001614
 8000f7c:	0801a8a4 	.word	0x0801a8a4

08000f80 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_ADC_Init+0x94>)
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <MX_ADC_Init+0x98>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_ADC_Init+0x94>)
 8000fe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fe4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_ADC_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_ADC_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_ADC_Init+0x94>)
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_ADC_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_ADC_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_ADC_Init+0x94>)
 8001012:	2201      	movs	r2, #1
 8001014:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_ADC_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_ADC_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_ADC_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_ADC_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <MX_ADC_Init+0x94>)
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_ADC_Init+0x94>)
 800103c:	2207      	movs	r2, #7
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_ADC_Init+0x94>)
 8001042:	2207      	movs	r2, #7
 8001044:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_ADC_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_ADC_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_ADC_Init+0x94>)
 8001056:	f001 ffb5 	bl	8002fc4 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 faa2 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200015b0 	.word	0x200015b0
 800106c:	40012400 	.word	0x40012400

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_ADC_MspInit+0x24>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d103      	bne.n	800108a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001082:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001086:	f7ff ff7b 	bl	8000f80 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012400 	.word	0x40012400

08001098 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <HAL_ADC_MspDeInit+0x24>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d103      	bne.n	80010b2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80010aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ae:	f7ff ff7f 	bl	8000fb0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012400 	.word	0x40012400

080010c0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <SYS_InitMeasurement+0x14>)
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <SYS_InitMeasurement+0x18>)
 80010c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200015b0 	.word	0x200015b0
 80010d8:	40012400 	.word	0x40012400

080010dc <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010ea:	f000 f871 	bl	80011d0 <SYS_GetBatteryLevel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010f2:	4830      	ldr	r0, [pc, #192]	; (80011b4 <SYS_GetTemperatureLevel+0xd8>)
 80010f4:	f000 f8a0 	bl	8001238 <ADC_ReadChannels>
 80010f8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <SYS_GetTemperatureLevel+0xdc>)
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <SYS_GetTemperatureLevel+0xe0>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d026      	beq.n	8001154 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <SYS_GetTemperatureLevel+0xdc>)
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <SYS_GetTemperatureLevel+0xe0>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d01c      	beq.n	800114c <SYS_GetTemperatureLevel+0x70>
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <SYS_GetTemperatureLevel+0xe4>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	461a      	mov	r2, r3
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <SYS_GetTemperatureLevel+0xe0>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2264      	movs	r2, #100	; 0x64
 800112e:	fb02 f203 	mul.w	r2, r2, r3
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <SYS_GetTemperatureLevel+0xdc>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <SYS_GetTemperatureLevel+0xe0>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	1acb      	subs	r3, r1, r3
 800113e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	331e      	adds	r3, #30
 8001146:	b29b      	uxth	r3, r3
 8001148:	b21b      	sxth	r3, r3
 800114a:	e001      	b.n	8001150 <SYS_GetTemperatureLevel+0x74>
 800114c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001150:	81fb      	strh	r3, [r7, #14]
 8001152:	e01c      	b.n	800118e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	fb02 f203 	mul.w	r2, r2, r3
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <SYS_GetTemperatureLevel+0xe8>)
 800115e:	fba3 1302 	umull	r1, r3, r3, r2
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	0852      	lsrs	r2, r2, #1
 8001166:	4413      	add	r3, r2
 8001168:	0adb      	lsrs	r3, r3, #11
 800116a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800116e:	fb02 f303 	mul.w	r3, r2, r3
 8001172:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001176:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <SYS_GetTemperatureLevel+0xec>)
 800117c:	fb82 1203 	smull	r1, r2, r2, r3
 8001180:	1292      	asrs	r2, r2, #10
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	331e      	adds	r3, #30
 800118a:	b29b      	uxth	r3, r3
 800118c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 800118e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <SYS_GetTemperatureLevel+0xf0>)
 8001196:	2201      	movs	r2, #1
 8001198:	2100      	movs	r1, #0
 800119a:	2001      	movs	r0, #1
 800119c:	f019 f80e 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80011a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 80011a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	b0001000 	.word	0xb0001000
 80011b8:	1fff75c8 	.word	0x1fff75c8
 80011bc:	1fff75a8 	.word	0x1fff75a8
 80011c0:	09ee009f 	.word	0x09ee009f
 80011c4:	00100101 	.word	0x00100101
 80011c8:	68db8bad 	.word	0x68db8bad
 80011cc:	0801a8d0 	.word	0x0801a8d0

080011d0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <SYS_GetBatteryLevel+0x5c>)
 80011e0:	f000 f82a 	bl	8001238 <ADC_ReadChannels>
 80011e4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	80fb      	strh	r3, [r7, #6]
 80011f0:	e016      	b.n	8001220 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <SYS_GetBatteryLevel+0x60>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00b      	beq.n	8001216 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <SYS_GetBatteryLevel+0x60>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001208:	fb03 f202 	mul.w	r2, r3, r2
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	80fb      	strh	r3, [r7, #6]
 8001214:	e004      	b.n	8001220 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <SYS_GetBatteryLevel+0x64>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001220:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	b4002000 	.word	0xb4002000
 8001230:	1fff75aa 	.word	0x1fff75aa
 8001234:	004c08d8 	.word	0x004c08d8

08001238 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001250:	f7ff fec0 	bl	8000fd4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <ADC_ReadChannels+0x88>)
 8001256:	f002 fc9b 	bl	8003b90 <HAL_ADCEx_Calibration_Start>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001260:	f000 f9a2 	bl	80015a8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4619      	mov	r1, r3
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <ADC_ReadChannels+0x88>)
 8001278:	f002 fa02 	bl	8003680 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001282:	f000 f991 	bl	80015a8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <ADC_ReadChannels+0x88>)
 8001288:	f002 f8de 	bl	8003448 <HAL_ADC_Start>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001292:	f000 f989 	bl	80015a8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001296:	f04f 31ff 	mov.w	r1, #4294967295
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <ADC_ReadChannels+0x88>)
 800129c:	f002 f94c 	bl	8003538 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <ADC_ReadChannels+0x88>)
 80012a2:	f002 f917 	bl	80034d4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <ADC_ReadChannels+0x88>)
 80012a8:	f002 f9dd 	bl	8003666 <HAL_ADC_GetValue>
 80012ac:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <ADC_ReadChannels+0x88>)
 80012b0:	f002 f84e 	bl	8003350 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80012b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200015b0 	.word	0x200015b0

080012c4 <LL_AHB1_GRP1_EnableClock>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012f8:	2004      	movs	r0, #4
 80012fa:	f7ff ffe3 	bl	80012c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff ffe0 	bl	80012c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	200b      	movs	r0, #11
 800130a:	f002 fd94 	bl	8003e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800130e:	200b      	movs	r0, #11
 8001310:	f002 fdab 	bl	8003e6a <HAL_NVIC_EnableIRQ>

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <LL_AHB2_GRP1_EnableClock>:
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133c:	68fb      	ldr	r3, [r7, #12]
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <LL_APB1_GRP1_EnableClock>:
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4313      	orrs	r3, r2
 800135e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136c:	68fb      	ldr	r3, [r7, #12]
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_I2C2_Init+0x74>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <MX_I2C2_Init+0x78>)
 8001380:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_I2C2_Init+0x74>)
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <MX_I2C2_Init+0x7c>)
 8001386:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_I2C2_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_I2C2_Init+0x74>)
 8001390:	2201      	movs	r2, #1
 8001392:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_I2C2_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_I2C2_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_I2C2_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_I2C2_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_I2C2_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b2:	480e      	ldr	r0, [pc, #56]	; (80013ec <MX_I2C2_Init+0x74>)
 80013b4:	f003 fc02 	bl	8004bbc <HAL_I2C_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013be:	f000 f8f3 	bl	80015a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c2:	2100      	movs	r1, #0
 80013c4:	4809      	ldr	r0, [pc, #36]	; (80013ec <MX_I2C2_Init+0x74>)
 80013c6:	f003 fdcf 	bl	8004f68 <HAL_I2CEx_ConfigAnalogFilter>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013d0:	f000 f8ea 	bl	80015a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_I2C2_Init+0x74>)
 80013d8:	f003 fe10 	bl	8004ffc <HAL_I2CEx_ConfigDigitalFilter>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f000 f8e1 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20001614 	.word	0x20001614
 80013f0:	40005800 	.word	0x40005800
 80013f4:	20303e5d 	.word	0x20303e5d

080013f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2238      	movs	r2, #56	; 0x38
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f019 f96d 	bl	801a6f8 <memset>
  if(i2cHandle->Instance==I2C2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_I2C_MspInit+0xb0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d13b      	bne.n	80014a0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800142c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4618      	mov	r0, r3
 8001438:	f005 f8b8 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001442:	f000 f8b1 	bl	80015a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff ff66 	bl	8001318 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff ff63 	bl	8001318 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001456:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001458:	2312      	movs	r3, #18
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001464:	2304      	movs	r3, #4
 8001466:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f003 f92d 	bl	80046d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001488:	2304      	movs	r3, #4
 800148a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <HAL_I2C_MspInit+0xb4>)
 8001494:	f003 f91c 	bl	80046d0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001498:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800149c:	f7ff ff54 	bl	8001348 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014a0:	bf00      	nop
 80014a2:	3758      	adds	r7, #88	; 0x58
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40005800 	.word	0x40005800
 80014ac:	48000400 	.word	0x48000400

080014b0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c0:	f023 0218 	bic.w	r2, r3, #24
 80014c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014de:	f001 fb89 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f807 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80014e6:	f008 faf5 	bl	8009ad4 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 80014ea:	f7ff ff45 	bl	8001378 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80014ee:	f008 faf9 	bl	8009ae4 <MX_LoRaWAN_Process>
 80014f2:	e7fc      	b.n	80014ee <main+0x14>

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b09a      	sub	sp, #104	; 0x68
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2248      	movs	r2, #72	; 0x48
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f019 f8f8 	bl	801a6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
 8001518:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800151a:	f003 fdbb 	bl	8005094 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff ffc6 	bl	80014b0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <SystemClock_Config+0xb0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <SystemClock_Config+0xb0>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <SystemClock_Config+0xb0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001540:	2324      	movs	r3, #36	; 0x24
 8001542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001544:	2381      	movs	r3, #129	; 0x81
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001548:	2301      	movs	r3, #1
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800154c:	2300      	movs	r3, #0
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001550:	23b0      	movs	r3, #176	; 0xb0
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001554:	2300      	movs	r3, #0
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	4618      	mov	r0, r3
 800155e:	f004 f8e5 	bl	800572c <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001568:	f000 f81e 	bl	80015a8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800156c:	234f      	movs	r3, #79	; 0x4f
 800156e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	2102      	movs	r1, #2
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fc68 	bl	8005e60 <HAL_RCC_ClockConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001596:	f000 f807 	bl	80015a8 <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3768      	adds	r7, #104	; 0x68
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	58000400 	.word	0x58000400

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>

080015b2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <LL_APB1_GRP1_EnableClock>:
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
	...

08001604 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	222c      	movs	r2, #44	; 0x2c
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f019 f871 	bl	801a6f8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_RTC_Init+0x9c>)
 8001618:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <MX_RTC_Init+0xa0>)
 800161a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_RTC_Init+0x9c>)
 800161e:	221f      	movs	r2, #31
 8001620:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_RTC_Init+0x9c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_RTC_Init+0x9c>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_RTC_Init+0x9c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_RTC_Init+0x9c>)
 8001636:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_RTC_Init+0x9c>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_RTC_Init+0x9c>)
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800164a:	4815      	ldr	r0, [pc, #84]	; (80016a0 <MX_RTC_Init+0x9c>)
 800164c:	f005 f8c8 	bl	80067e0 <HAL_RTC_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001656:	f7ff ffa7 	bl	80015a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_RTC_Init+0x9c>)
 800165c:	f005 fbb6 	bl	8006dcc <HAL_RTCEx_SetSSRU_IT>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001666:	f7ff ff9f 	bl	80015a8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001676:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800167a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800167c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_RTC_Init+0x9c>)
 800168a:	f005 f923 	bl	80068d4 <HAL_RTC_SetAlarm_IT>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001694:	f7ff ff88 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3730      	adds	r7, #48	; 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20001660 	.word	0x20001660
 80016a4:	40002800 	.word	0x40002800

080016a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2238      	movs	r2, #56	; 0x38
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f019 f81d 	bl	801a6f8 <memset>
  if(rtcHandle->Instance==RTC)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <HAL_RTC_MspInit+0x74>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d125      	bne.n	8001714 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 ff67 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016e4:	f7ff ff60 	bl	80015a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e8:	f7ff ff63 	bl	80015b2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016f0:	f7ff ff6f 	bl	80015d2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	2002      	movs	r0, #2
 80016fa:	f002 fb9c 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016fe:	2002      	movs	r0, #2
 8001700:	f002 fbb3 	bl	8003e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	202a      	movs	r0, #42	; 0x2a
 800170a:	f002 fb94 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800170e:	202a      	movs	r0, #42	; 0x2a
 8001710:	f002 fbab 	bl	8003e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001714:	bf00      	nop
 8001716:	3740      	adds	r7, #64	; 0x40
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40002800 	.word	0x40002800

08001720 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001726:	2201      	movs	r2, #1
 8001728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	58000400 	.word	0x58000400

08001738 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001754:	f001 fa6e 	bl	8002c34 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001758:	f7ff ffe2 	bl	8001720 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800175c:	2001      	movs	r0, #1
 800175e:	f003 fd2b 	bl	80051b8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800176a:	f001 fa71 	bl	8002c50 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800176e:	f000 ff8f 	bl	8002690 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}

08001776 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800177a:	f001 fa5b 	bl	8002c34 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800177e:	2101      	movs	r1, #1
 8001780:	2000      	movs	r0, #0
 8001782:	f003 fc95 	bl	80050b0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}

0800178a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800178e:	f001 fa5f 	bl	8002c50 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <HardFault_Handler+0x4>

080017ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <BusFault_Handler+0x4>

080017ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80017f6:	f005 fb25 	bl	8006e44 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001660 	.word	0x20001660

08001804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Channel1_IRQHandler+0x10>)
 800180a:	f002 fdc5 	bl	8004398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200016a4 	.word	0x200016a4

08001818 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART1_IRQHandler+0x10>)
 800181e:	f006 f971 	bl	8007b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20001704 	.word	0x20001704

0800182c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001830:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001834:	f003 f9aa 	bl	8004b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <RTC_Alarm_IRQHandler+0x10>)
 8001842:	f005 f9af 	bl	8006ba4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20001660 	.word	0x20001660

08001850 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001856:	f005 fe5d 	bl	8007514 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001698 	.word	0x20001698

08001864 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4013      	ands	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_SUBGHZ_Init+0x20>)
 800189a:	2208      	movs	r2, #8
 800189c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_SUBGHZ_Init+0x20>)
 80018a0:	f005 fbbc 	bl	800701c <HAL_SUBGHZ_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80018aa:	f7ff fe7d 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20001698 	.word	0x20001698

080018b8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80018c0:	2001      	movs	r0, #1
 80018c2:	f7ff ffcf 	bl	8001864 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2032      	movs	r0, #50	; 0x32
 80018cc:	f002 fab3 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018d0:	2032      	movs	r0, #50	; 0x32
 80018d2:	f002 faca 	bl	8003e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80018f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <LL_FLASH_GetUDN+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	1fff7580 	.word	0x1fff7580

08001918 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <LL_FLASH_GetDeviceID+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	1fff7584 	.word	0x1fff7584

08001930 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <LL_FLASH_GetSTCompanyID+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0a1b      	lsrs	r3, r3, #8
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	1fff7584 	.word	0x1fff7584

08001948 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff ffc6 	bl	80018de <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001952:	f018 f975 	bl	8019c40 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001956:	f000 f997 	bl	8001c88 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 800195a:	f000 f9b7 	bl	8001ccc <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800195e:	f018 fbff 	bl	801a160 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001962:	480b      	ldr	r0, [pc, #44]	; (8001990 <SystemApp_Init+0x48>)
 8001964:	f018 fcac 	bl	801a2c0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001968:	2002      	movs	r0, #2
 800196a:	f018 fcb7 	bl	801a2dc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800196e:	f7ff fba7 	bl	80010c0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001972:	f000 fa75 	bl	8001e60 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001976:	f017 fb43 	bl	8019000 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800197a:	2101      	movs	r1, #1
 800197c:	2001      	movs	r0, #1
 800197e:	f017 fb7f 	bl	8019080 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001982:	2101      	movs	r1, #1
 8001984:	2001      	movs	r0, #1
 8001986:	f017 fb4b 	bl	8019020 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	08001b69 	.word	0x08001b69

08001994 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001998:	f017 fba2 	bl	80190e0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}

080019a0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019aa:	f7ff fc11 	bl	80011d0 <SYS_GetBatteryLevel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d902      	bls.n	80019c2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019bc:	23fe      	movs	r3, #254	; 0xfe
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	e014      	b.n	80019ec <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80019c8:	d202      	bcs.n	80019d0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e00d      	b.n	80019ec <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019d0:	88bb      	ldrh	r3, [r7, #4]
 80019d2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80019d6:	461a      	mov	r2, r3
 80019d8:	4613      	mov	r3, r2
 80019da:	01db      	lsls	r3, r3, #7
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <GetBatteryLevel+0x68>)
 80019e4:	fba3 2302 	umull	r2, r3, r3, r2
 80019e8:	09db      	lsrs	r3, r3, #7
 80019ea:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <GetBatteryLevel+0x6c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	2100      	movs	r1, #0
 80019f6:	2002      	movs	r0, #2
 80019f8:	f018 fbe0 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019fc:	79fb      	ldrb	r3, [r7, #7]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	1b4e81b5 	.word	0x1b4e81b5
 8001a0c:	0801a8dc 	.word	0x0801a8dc

08001a10 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001a1a:	f7ff fb5f 	bl	80010dc <SYS_GetTemperatureLevel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da00      	bge.n	8001a26 <GetTemperatureLevel+0x16>
 8001a24:	33ff      	adds	r3, #255	; 0xff
 8001a26:	121b      	asrs	r3, r3, #8
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b087      	sub	sp, #28
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a42:	f7ff ff5f 	bl	8001904 <LL_FLASH_GetUDN>
 8001a46:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4e:	d138      	bne.n	8001ac2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a50:	f001 f90c 	bl	8002c6c <HAL_GetUIDw0>
 8001a54:	4604      	mov	r4, r0
 8001a56:	f001 f91d 	bl	8002c94 <HAL_GetUIDw2>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4423      	add	r3, r4
 8001a5e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a60:	f001 f90e 	bl	8002c80 <HAL_GetUIDw1>
 8001a64:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	0e1a      	lsrs	r2, r3, #24
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3307      	adds	r3, #7
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	0c1a      	lsrs	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3306      	adds	r3, #6
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	0a1a      	lsrs	r2, r3, #8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3305      	adds	r3, #5
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	0e1a      	lsrs	r2, r3, #24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	0c1a      	lsrs	r2, r3, #16
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	0a1a      	lsrs	r2, r3, #8
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001ac0:	e031      	b.n	8001b26 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3307      	adds	r3, #7
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	0a1a      	lsrs	r2, r3, #8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3306      	adds	r3, #6
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	0c1a      	lsrs	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	0e1a      	lsrs	r2, r3, #24
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001af0:	f7ff ff12 	bl	8001918 <LL_FLASH_GetDeviceID>
 8001af4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3303      	adds	r3, #3
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001b00:	f7ff ff16 	bl	8001930 <LL_FLASH_GetSTCompanyID>
 8001b04:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	0a1a      	lsrs	r2, r3, #8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	701a      	strb	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}

08001b2e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001b2e:	b590      	push	{r4, r7, lr}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001b38:	f7ff fee4 	bl	8001904 <LL_FLASH_GetUDN>
 8001b3c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d10b      	bne.n	8001b5e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b46:	f001 f891 	bl	8002c6c <HAL_GetUIDw0>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	f001 f898 	bl	8002c80 <HAL_GetUIDw1>
 8001b50:	4603      	mov	r3, r0
 8001b52:	405c      	eors	r4, r3
 8001b54:	f001 f89e 	bl	8002c94 <HAL_GetUIDw2>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4063      	eors	r3, r4
 8001b5c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b5e:	687b      	ldr	r3, [r7, #4]

}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	4618      	mov	r0, r3
 8001b78:	f017 fbc2 	bl	8019300 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <TimestampNow+0x3c>)
 8001b86:	2110      	movs	r1, #16
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f81d 	bl	8001bc8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe faf2 	bl	8000178 <strlen>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b9c:	bf00      	nop
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	0801a8e8 	.word	0x0801a8e8

08001ba8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bac:	2101      	movs	r1, #1
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f017 fa36 	bl	8019020 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f017 fa2e 	bl	8019020 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001bc8:	b40c      	push	{r2, r3}
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f017 fd61 	bl	80196a8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bf0:	b002      	add	sp, #8
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001c0c:	f000 f9f0 	bl	8001ff0 <TIMER_IF_GetTimerValue>
 8001c10:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fa65 	bl	80020f0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <LL_AHB2_GRP1_EnableClock>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
	...

08001c60 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c6e:	4905      	ldr	r1, [pc, #20]	; (8001c84 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	58000800 	.word	0x58000800

08001c88 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 f802 	bl	8001c96 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d106      	bne.n	8001cb8 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8001caa:	f000 fffd 	bl	8002ca8 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8001cae:	f001 f807 	bl	8002cc0 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8001cb2:	f001 f811 	bl	8002cd8 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001cb6:	e005      	b.n	8001cc4 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8001cb8:	f000 fffc 	bl	8002cb4 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001cbc:	f001 f806 	bl	8002ccc <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001cc0:	f001 f810 	bl	8002ce4 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff ff9e 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f7ff ff9b 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7ff ff98 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f7ff ff95 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d04:	2301      	movs	r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d10:	f002 fcde 	bl	80046d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d18:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	483a      	ldr	r0, [pc, #232]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001d20:	f002 fcd6 	bl	80046d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001d24:	2308      	movs	r3, #8
 8001d26:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4836      	ldr	r0, [pc, #216]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001d2e:	f002 fccf 	bl	80046d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001d32:	2310      	movs	r3, #16
 8001d34:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4833      	ldr	r0, [pc, #204]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001d3c:	f002 fcc8 	bl	80046d0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2101      	movs	r1, #1
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d48:	f002 fef0 	bl	8004b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d52:	482d      	ldr	r0, [pc, #180]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001d54:	f002 feea 	bl	8004b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2108      	movs	r1, #8
 8001d5c:	482a      	ldr	r0, [pc, #168]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001d5e:	f002 fee5 	bl	8004b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2110      	movs	r1, #16
 8001d66:	4828      	ldr	r0, [pc, #160]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001d68:	f002 fee0 	bl	8004b2c <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8001d78:	23f0      	movs	r3, #240	; 0xf0
 8001d7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001d7c:	230d      	movs	r3, #13
 8001d7e:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff ff54 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8e:	f002 fc9f 	bl	80046d0 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8001d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8001da0:	2306      	movs	r3, #6
 8001da2:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff ff42 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db2:	f002 fc8d 	bl	80046d0 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001dc2:	230d      	movs	r3, #13
 8001dc4:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	f7ff ff31 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001dd2:	f002 fc7d 	bl	80046d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8001dde:	2310      	movs	r3, #16
 8001de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001de2:	230d      	movs	r3, #13
 8001de4:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2002      	movs	r0, #2
 8001de8:	f7ff ff21 	bl	8001c2e <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	; (8001e08 <DBG_ProbesInit+0x13c>)
 8001df2:	f002 fc6d 	bl	80046d0 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001df6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dfa:	f7ff ff31 	bl	8001c60 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	48000400 	.word	0x48000400

08001e0c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <EnvSensors_Read+0x40>)
 8001e16:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <EnvSensors_Read+0x44>)
 8001e1a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <EnvSensors_Read+0x48>)
 8001e1e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <EnvSensors_Read+0x4c>)
 8001e36:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <EnvSensors_Read+0x50>)
 8001e3c:	611a      	str	r2, [r3, #16]

  return 0;
 8001e3e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	42480000 	.word	0x42480000
 8001e50:	41900000 	.word	0x41900000
 8001e54:	447a0000 	.word	0x447a0000
 8001e58:	003e090d 	.word	0x003e090d
 8001e5c:	000503ab 	.word	0x000503ab

08001e60 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e64:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <TIMER_IF_Init+0x5c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f083 0301 	eor.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <TIMER_IF_Init+0x60>)
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001eb0:	f7ff fba8 	bl	8001604 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001eb4:	f000 f856 	bl	8001f64 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <TIMER_IF_Init+0x60>)
 8001ebe:	f004 fe15 	bl	8006aec <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <TIMER_IF_Init+0x60>)
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <TIMER_IF_Init+0x60>)
 8001ecc:	f004 ff4c 	bl	8006d68 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f000 f9cf 	bl	8002274 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001ed6:	f000 f85f 	bl	8001f98 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <TIMER_IF_Init+0x5c>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000150 	.word	0x20000150
 8001ef0:	20001660 	.word	0x20001660

08001ef4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	; 0x38
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	222c      	movs	r2, #44	; 0x2c
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f018 fbf4 	bl	801a6f8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f10:	f000 f828 	bl	8001f64 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <TIMER_IF_StartTimer+0x68>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f30:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <TIMER_IF_StartTimer+0x6c>)
 8001f42:	f004 fcc7 	bl	80068d4 <HAL_RTC_SetAlarm_IT>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f4c:	f7ff fb2c 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3738      	adds	r7, #56	; 0x38
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000154 	.word	0x20000154
 8001f60:	20001660 	.word	0x20001660

08001f64 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <TIMER_IF_StopTimer+0x2c>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <TIMER_IF_StopTimer+0x30>)
 8001f7a:	f004 fdb7 	bl	8006aec <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <TIMER_IF_StopTimer+0x30>)
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40002800 	.word	0x40002800
 8001f94:	20001660 	.word	0x20001660

08001f98 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001f9c:	f000 f98a 	bl	80022b4 <GetTimerTicks>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <TIMER_IF_SetTimerContext+0x18>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fa6:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <TIMER_IF_SetTimerContext+0x18>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000154 	.word	0x20000154

08001fb4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <TIMER_IF_GetTimerContext+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	20000154 	.word	0x20000154

08001fc8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fd2:	f000 f96f 	bl	80022b4 <GetTimerTicks>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000154 	.word	0x20000154

08001ff0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <TIMER_IF_GetTimerValue+0x24>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002002:	f000 f957 	bl	80022b4 <GetTimerTicks>
 8002006:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000150 	.word	0x20000150

08002018 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002022:	2303      	movs	r3, #3
 8002024:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002032:	b5b0      	push	{r4, r5, r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	461a      	mov	r2, r3
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	0d95      	lsrs	r5, r2, #22
 8002048:	0294      	lsls	r4, r2, #10
 800204a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe fd81 	bl	8000b5c <__aeabi_uldivmod>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4613      	mov	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bdb0      	pop	{r4, r5, r7, pc}

0800206c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800206c:	b4b0      	push	{r4, r5, r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	f04f 0500 	mov.w	r5, #0
 800208c:	015d      	lsls	r5, r3, #5
 800208e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002092:	0154      	lsls	r4, r2, #5
 8002094:	4622      	mov	r2, r4
 8002096:	462b      	mov	r3, r5
 8002098:	1a12      	subs	r2, r2, r0
 800209a:	eb63 0301 	sbc.w	r3, r3, r1
 800209e:	f04f 0400 	mov.w	r4, #0
 80020a2:	f04f 0500 	mov.w	r5, #0
 80020a6:	009d      	lsls	r5, r3, #2
 80020a8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80020ac:	0094      	lsls	r4, r2, #2
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	1812      	adds	r2, r2, r0
 80020b4:	eb41 0303 	adc.w	r3, r1, r3
 80020b8:	f04f 0000 	mov.w	r0, #0
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	00d9      	lsls	r1, r3, #3
 80020c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020c6:	00d0      	lsls	r0, r2, #3
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	0a82      	lsrs	r2, r0, #10
 80020da:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80020de:	0a8b      	lsrs	r3, r1, #10
 80020e0:	4613      	mov	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bcb0      	pop	{r4, r5, r7}
 80020ee:	4770      	bx	lr

080020f0 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff9a 	bl	8002032 <TIMER_IF_Convert_ms2Tick>
 80020fe:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002100:	f000 f8d8 	bl	80022b4 <GetTimerTicks>
 8002104:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002106:	e000      	b.n	800210a <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002108:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800210a:	f000 f8d3 	bl	80022b4 <GetTimerTicks>
 800210e:	4602      	mov	r2, r0
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	429a      	cmp	r2, r3
 8002118:	d8f6      	bhi.n	8002108 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800212c:	f017 fed6 	bl	8019edc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002140:	f000 f8a8 	bl	8002294 <TIMER_IF_BkUp_Read_MSBticks>
 8002144:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3301      	adds	r3, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f892 	bl	8002274 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800215c:	b088      	sub	sp, #32
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002166:	f000 f8a5 	bl	80022b4 <GetTimerTicks>
 800216a:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800216c:	f000 f892 	bl	8002294 <TIMER_IF_BkUp_Read_MSBticks>
 8002170:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4618      	mov	r0, r3
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	0003      	movs	r3, r0
 8002184:	2200      	movs	r2, #0
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	4608      	mov	r0, r1
 800218a:	f04f 0100 	mov.w	r1, #0
 800218e:	eb12 0800 	adds.w	r8, r2, r0
 8002192:	eb43 0901 	adc.w	r9, r3, r1
 8002196:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800219a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	0a82      	lsrs	r2, r0, #10
 80021a8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021ac:	0a8b      	lsrs	r3, r1, #10
 80021ae:	4613      	mov	r3, r2
 80021b0:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	ea02 0400 	and.w	r4, r2, r0
 80021c6:	ea03 0501 	and.w	r5, r3, r1
 80021ca:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff4b 	bl	800206c <TIMER_IF_Convert_Tick2ms>
 80021d6:	4603      	mov	r3, r0
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80021de:	69fb      	ldr	r3, [r7, #28]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080021ec <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	2100      	movs	r1, #0
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80021fa:	f004 fe47 	bl	8006e8c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20001660 	.word	0x20001660

0800220c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	2101      	movs	r1, #1
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800221a:	f004 fe37 	bl	8006e8c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20001660 	.word	0x20001660

0800222c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002236:	2100      	movs	r1, #0
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800223a:	f004 fe3f 	bl	8006ebc <HAL_RTCEx_BKUPRead>
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20001660 	.word	0x20001660

08002250 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800225a:	2101      	movs	r1, #1
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800225e:	f004 fe2d 	bl	8006ebc <HAL_RTCEx_BKUPRead>
 8002262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20001660 	.word	0x20001660

08002274 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	2102      	movs	r1, #2
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002282:	f004 fe03 	bl	8006e8c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20001660 	.word	0x20001660

08002294 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800229a:	2102      	movs	r1, #2
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800229e:	f004 fe0d 	bl	8006ebc <HAL_RTCEx_BKUPRead>
 80022a2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022a4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20001660 	.word	0x20001660

080022b4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <GetTimerTicks+0x14>)
 80022ba:	f7ff fdde 	bl	8001e7a <LL_RTC_TIME_GetSubSecond>
 80022be:	4603      	mov	r3, r0
 80022c0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40002800 	.word	0x40002800

080022cc <LL_AHB2_GRP1_EnableClock>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022f0:	68fb      	ldr	r3, [r7, #12]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <LL_APB2_GRP1_EnableClock>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800230a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4313      	orrs	r3, r2
 8002312:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <LL_APB2_GRP1_DisableClock>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	43db      	mvns	r3, r3
 800233e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002342:	4013      	ands	r3, r2
 8002344:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <MX_USART1_UART_Init+0x94>)
 8002358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 800239a:	f005 fa7a 	bl	8007892 <HAL_UART_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023a4:	f7ff f900 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a8:	2100      	movs	r1, #0
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 80023ac:	f007 faa7 	bl	80098fe <HAL_UARTEx_SetTxFifoThreshold>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023b6:	f7ff f8f7 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ba:	2100      	movs	r1, #0
 80023bc:	4808      	ldr	r0, [pc, #32]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 80023be:	f007 fadc 	bl	800997a <HAL_UARTEx_SetRxFifoThreshold>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023c8:	f7ff f8ee 	bl	80015a8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80023cc:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MX_USART1_UART_Init+0x90>)
 80023ce:	f007 fa5b 	bl	8009888 <HAL_UARTEx_EnableFifoMode>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023d8:	f7ff f8e6 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20001704 	.word	0x20001704
 80023e4:	40013800 	.word	0x40013800

080023e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b096      	sub	sp, #88	; 0x58
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2238      	movs	r2, #56	; 0x38
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f018 f975 	bl	801a6f8 <memset>
  if(uartHandle->Instance==USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_UART_MspInit+0xe8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d156      	bne.n	80024c6 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002418:	2301      	movs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800241c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002420:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	4618      	mov	r0, r3
 8002428:	f004 f8c0 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002432:	f7ff f8b9 	bl	80015a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002436:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800243a:	f7ff ff5f 	bl	80022fc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2002      	movs	r0, #2
 8002440:	f7ff ff44 	bl	80022cc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002444:	23c0      	movs	r3, #192	; 0xc0
 8002446:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002454:	2307      	movs	r3, #7
 8002456:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800245c:	4619      	mov	r1, r3
 800245e:	481d      	ldr	r0, [pc, #116]	; (80024d4 <HAL_UART_MspInit+0xec>)
 8002460:	f002 f936 	bl	80046d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_UART_MspInit+0xf4>)
 8002468:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 800246c:	2212      	movs	r2, #18
 800246e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 8002472:	2210      	movs	r2, #16
 8002474:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 8002490:	2200      	movs	r2, #0
 8002492:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 8002496:	2200      	movs	r2, #0
 8002498:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800249a:	480f      	ldr	r0, [pc, #60]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 800249c:	f001 fd02 	bl	8003ea4 <HAL_DMA_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80024a6:	f7ff f87f 	bl	80015a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 80024ae:	679a      	str	r2, [r3, #120]	; 0x78
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <HAL_UART_MspInit+0xf0>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2102      	movs	r1, #2
 80024ba:	2024      	movs	r0, #36	; 0x24
 80024bc:	f001 fcbb 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024c0:	2024      	movs	r0, #36	; 0x24
 80024c2:	f001 fcd2 	bl	8003e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024c6:	bf00      	nop
 80024c8:	3758      	adds	r7, #88	; 0x58
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40013800 	.word	0x40013800
 80024d4:	48000400 	.word	0x48000400
 80024d8:	200016a4 	.word	0x200016a4
 80024dc:	40020008 	.word	0x40020008

080024e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_UART_MspDeInit+0x3c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10f      	bne.n	8002512 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80024f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024f6:	f7ff ff19 	bl	800232c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80024fa:	21c0      	movs	r1, #192	; 0xc0
 80024fc:	4808      	ldr	r0, [pc, #32]	; (8002520 <HAL_UART_MspDeInit+0x40>)
 80024fe:	f002 fa47 	bl	8004990 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fd74 	bl	8003ff4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800250c:	2024      	movs	r0, #36	; 0x24
 800250e:	f001 fcba 	bl	8003e86 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40013800 	.word	0x40013800
 8002520:	48000400 	.word	0x48000400

08002524 <LL_APB2_GRP1_ForceReset>:
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <LL_APB2_GRP1_ReleaseReset>:
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	43db      	mvns	r3, r3
 8002558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255c:	4013      	ands	r3, r2
 800255e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
	...

0800256c <LL_EXTI_EnableIT_0_31>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <LL_EXTI_EnableIT_0_31+0x24>)
 8002576:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800257a:	4905      	ldr	r1, [pc, #20]	; (8002590 <LL_EXTI_EnableIT_0_31+0x24>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	58000800 	.word	0x58000800

08002594 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800259c:	4a07      	ldr	r2, [pc, #28]	; (80025bc <vcom_Init+0x28>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80025a2:	f7fe fea7 	bl	80012f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025a6:	f7ff fed3 	bl	8002350 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80025aa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80025ae:	f7ff ffdd 	bl	800256c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80025b2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000158 	.word	0x20000158

080025c0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80025c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025c8:	f7ff ffac 	bl	8002524 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80025cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025d0:	f7ff ffb9 	bl	8002546 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <vcom_DeInit+0x28>)
 80025d6:	f7ff ff83 	bl	80024e0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80025da:	200f      	movs	r0, #15
 80025dc:	f001 fc53 	bl	8003e86 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80025e0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20001704 	.word	0x20001704

080025ec <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	461a      	mov	r2, r3
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4804      	ldr	r0, [pc, #16]	; (8002610 <vcom_Trace_DMA+0x24>)
 8002600:	f005 f9ee 	bl	80079e0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002604:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20001704 	.word	0x20001704

08002614 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800261c:	4a19      	ldr	r2, [pc, #100]	; (8002684 <vcom_ReceiveInit+0x70>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002622:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002626:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002630:	4815      	ldr	r0, [pc, #84]	; (8002688 <vcom_ReceiveInit+0x74>)
 8002632:	f007 f89c 	bl	800976e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002636:	bf00      	nop
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <vcom_ReceiveInit+0x74>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002646:	d0f7      	beq.n	8002638 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002648:	bf00      	nop
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <vcom_ReceiveInit+0x74>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002658:	d1f7      	bne.n	800264a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <vcom_ReceiveInit+0x74>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <vcom_ReceiveInit+0x74>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002668:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800266a:	4807      	ldr	r0, [pc, #28]	; (8002688 <vcom_ReceiveInit+0x74>)
 800266c:	f007 f8da 	bl	8009824 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002670:	2201      	movs	r2, #1
 8002672:	4906      	ldr	r1, [pc, #24]	; (800268c <vcom_ReceiveInit+0x78>)
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <vcom_ReceiveInit+0x74>)
 8002676:	f005 f95d 	bl	8007934 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800267a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000015c 	.word	0x2000015c
 8002688:	20001704 	.word	0x20001704
 800268c:	20001794 	.word	0x20001794

08002690 <vcom_Resume>:

void vcom_Resume(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002694:	4808      	ldr	r0, [pc, #32]	; (80026b8 <vcom_Resume+0x28>)
 8002696:	f005 f8fc 	bl	8007892 <HAL_UART_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <vcom_Resume+0x14>
  {
    Error_Handler();
 80026a0:	f7fe ff82 	bl	80015a8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <vcom_Resume+0x2c>)
 80026a6:	f001 fbfd 	bl	8003ea4 <HAL_DMA_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <vcom_Resume+0x24>
  {
    Error_Handler();
 80026b0:	f7fe ff7a 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20001704 	.word	0x20001704
 80026bc:	200016a4 	.word	0x200016a4

080026c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_UART_TxCpltCallback+0x18>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2000      	movs	r0, #0
 80026ce:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000158 	.word	0x20000158

080026dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_UART_RxCpltCallback+0x38>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_UART_RxCpltCallback+0x26>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_UART_RxCpltCallback+0x38>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	2101      	movs	r1, #1
 80026fe:	4806      	ldr	r0, [pc, #24]	; (8002718 <HAL_UART_RxCpltCallback+0x3c>)
 8002700:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002702:	2201      	movs	r2, #1
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_UART_RxCpltCallback+0x3c>)
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f005 f914 	bl	8007934 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000015c 	.word	0x2000015c
 8002718:	20001794 	.word	0x20001794

0800271c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800271e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002720:	f7ff fba5 	bl	8001e6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <LoopForever+0x6>)
  ldr r1, =_edata
 8002726:	490d      	ldr	r1, [pc, #52]	; (800275c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <LoopForever+0xe>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800273c:	4c0a      	ldr	r4, [pc, #40]	; (8002768 <LoopForever+0x16>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800274a:	f017 ffb1 	bl	801a6b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274e:	f7fe fec4 	bl	80014da <main>

08002752 <LoopForever>:

LoopForever:
    b LoopForever
 8002752:	e7fe      	b.n	8002752 <LoopForever>
  ldr   r0, =_estack
 8002754:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002760:	0801b680 	.word	0x0801b680
  ldr r2, =_sbss
 8002764:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002768:	2000184c 	.word	0x2000184c

0800276c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC_IRQHandler>

0800276e <LL_AHB2_GRP1_EnableClock>:
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4313      	orrs	r3, r2
 8002784:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <BSP_LED_Init+0x80>)
 80027be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e024      	b.n	8002818 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80027ce:	2002      	movs	r0, #2
 80027d0:	f7ff ffcd 	bl	800276e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <BSP_LED_Init+0x80>)
 80027d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027dc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <BSP_LED_Init+0x84>)
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	f107 020c 	add.w	r2, r7, #12
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 ff69 	bl	80046d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <BSP_LED_Init+0x84>)
 8002802:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4a05      	ldr	r2, [pc, #20]	; (8002820 <BSP_LED_Init+0x80>)
 800280a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800280e:	2200      	movs	r2, #0
 8002810:	4619      	mov	r1, r3
 8002812:	f002 f98b 	bl	8004b2c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	0801b198 	.word	0x0801b198
 8002824:	20000004 	.word	0x20000004

08002828 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <BSP_LED_On+0x40>)
 8002836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800283a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002842:	2300      	movs	r3, #0
 8002844:	e00c      	b.n	8002860 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	4a08      	ldr	r2, [pc, #32]	; (800286c <BSP_LED_On+0x44>)
 800284a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4a05      	ldr	r2, [pc, #20]	; (8002868 <BSP_LED_On+0x40>)
 8002852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002856:	2200      	movs	r2, #0
 8002858:	4619      	mov	r1, r3
 800285a:	f002 f967 	bl	8004b2c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	0801b198 	.word	0x0801b198
 800286c:	20000004 	.word	0x20000004

08002870 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <BSP_LED_Off+0x40>)
 800287e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 800288a:	2300      	movs	r3, #0
 800288c:	e00c      	b.n	80028a8 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <BSP_LED_Off+0x44>)
 8002892:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <BSP_LED_Off+0x40>)
 800289a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800289e:	2201      	movs	r2, #1
 80028a0:	4619      	mov	r1, r3
 80028a2:	f002 f943 	bl	8004b2c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	0801b198 	.word	0x0801b198
 80028b4:	20000004 	.word	0x20000004

080028b8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <BSP_LED_Toggle+0x40>)
 80028c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e00c      	b.n	80028f0 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	4a08      	ldr	r2, [pc, #32]	; (80028fc <BSP_LED_Toggle+0x44>)
 80028da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4905      	ldr	r1, [pc, #20]	; (80028f8 <BSP_LED_Toggle+0x40>)
 80028e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f002 f936 	bl	8004b5a <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0801b198 	.word	0x0801b198
 80028fc:	20000004 	.word	0x20000004

08002900 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	460a      	mov	r2, r1
 800290a:	71fb      	strb	r3, [r7, #7]
 800290c:	4613      	mov	r3, r2
 800290e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4a30      	ldr	r2, [pc, #192]	; (80029e4 <BSP_PB_Init+0xe4>)
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 800292c:	2300      	movs	r3, #0
 800292e:	e055      	b.n	80029dc <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <BSP_PB_Init+0x3c>
 8002936:	2002      	movs	r0, #2
 8002938:	f7ff ff19 	bl	800276e <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <BSP_PB_Init+0xe8>)
 8002940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002944:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002946:	2301      	movs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800294a:	2302      	movs	r3, #2
 800294c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10c      	bne.n	800296e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	4a24      	ldr	r2, [pc, #144]	; (80029ec <BSP_PB_Init+0xec>)
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	f107 020c 	add.w	r2, r7, #12
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f001 feb2 	bl	80046d0 <HAL_GPIO_Init>
 800296c:	e035      	b.n	80029da <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800296e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002972:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <BSP_PB_Init+0xec>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	f107 020c 	add.w	r2, r7, #12
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fea4 	bl	80046d0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <BSP_PB_Init+0xf0>)
 800298e:	441a      	add	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4918      	ldr	r1, [pc, #96]	; (80029f4 <BSP_PB_Init+0xf4>)
 8002994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f001 fe85 	bl	80046aa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <BSP_PB_Init+0xf0>)
 80029a6:	1898      	adds	r0, r3, r2
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4a0e      	ldr	r2, [pc, #56]	; (80029e4 <BSP_PB_Init+0xe4>)
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	461a      	mov	r2, r3
 80029b2:	2100      	movs	r1, #0
 80029b4:	f001 fe60 	bl	8004678 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <BSP_PB_Init+0xf8>)
 80029bc:	56d0      	ldrsb	r0, [r2, r3]
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <BSP_PB_Init+0xfc>)
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	f001 fa34 	bl	8003e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <BSP_PB_Init+0xf8>)
 80029d2:	56d3      	ldrsb	r3, [r2, r3]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 fa48 	bl	8003e6a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000001c 	.word	0x2000001c
 80029e8:	0801b1a0 	.word	0x0801b1a0
 80029ec:	20000010 	.word	0x20000010
 80029f0:	20001798 	.word	0x20001798
 80029f4:	0801b1ac 	.word	0x0801b1ac
 80029f8:	0801b1a8 	.word	0x0801b1a8
 80029fc:	20000028 	.word	0x20000028

08002a00 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff fff1 	bl	8002a00 <BSP_PB_Callback>
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002a36:	2310      	movs	r3, #16
 8002a38:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4e:	f001 fe3f 	bl	80046d0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002a52:	2320      	movs	r3, #32
 8002a54:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5e:	f001 fe37 	bl	80046d0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a62:	2200      	movs	r2, #0
 8002a64:	2120      	movs	r1, #32
 8002a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6a:	f002 f85f 	bl	8004b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2110      	movs	r1, #16
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f002 f859 	bl	8004b2c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d83f      	bhi.n	8002b14 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002ac7 	.word	0x08002ac7
 8002aa4:	08002ae1 	.word	0x08002ae1
 8002aa8:	08002afb 	.word	0x08002afb
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002aac:	2200      	movs	r2, #0
 8002aae:	2110      	movs	r1, #16
 8002ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab4:	f002 f83a 	bl	8004b2c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2120      	movs	r1, #32
 8002abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac0:	f002 f834 	bl	8004b2c <HAL_GPIO_WritePin>
      break;      
 8002ac4:	e027      	b.n	8002b16 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2110      	movs	r1, #16
 8002aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ace:	f002 f82d 	bl	8004b2c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ada:	f002 f827 	bl	8004b2c <HAL_GPIO_WritePin>
      break;
 8002ade:	e01a      	b.n	8002b16 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ae8:	f002 f820 	bl	8004b2c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002aec:	2201      	movs	r2, #1
 8002aee:	2120      	movs	r1, #32
 8002af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af4:	f002 f81a 	bl	8004b2c <HAL_GPIO_WritePin>
      break;
 8002af8:	e00d      	b.n	8002b16 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002afa:	2200      	movs	r2, #0
 8002afc:	2110      	movs	r1, #16
 8002afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b02:	f002 f813 	bl	8004b2c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002b06:	2201      	movs	r2, #1
 8002b08:	2120      	movs	r1, #32
 8002b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0e:	f002 f80d 	bl	8004b2c <HAL_GPIO_WritePin>
      break;
 8002b12:	e000      	b.n	8002b16 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002b14:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002b24:	2302      	movs	r3, #2
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
	...

08002b4c <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6053      	str	r3, [r2, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	e0042000 	.word	0xe0042000

08002b68 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	6053      	str	r3, [r2, #4]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	e0042000 	.word	0xe0042000

08002b84 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	6053      	str	r3, [r2, #4]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	e0042000 	.word	0xe0042000

08002ba0 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a03      	ldr	r2, [pc, #12]	; (8002bb8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002baa:	f023 0302 	bic.w	r3, r3, #2
 8002bae:	6053      	str	r3, [r2, #4]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	e0042000 	.word	0xe0042000

08002bbc <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002bc0:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a03      	ldr	r2, [pc, #12]	; (8002bd4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	6053      	str	r3, [r2, #4]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	e0042000 	.word	0xe0042000

08002bd8 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	6053      	str	r3, [r2, #4]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	e0042000 	.word	0xe0042000

08002bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfe:	2003      	movs	r0, #3
 8002c00:	f001 f90e 	bl	8003e20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c04:	f003 faf0 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <HAL_Init+0x3c>)
 8002c0c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0e:	200f      	movs	r0, #15
 8002c10:	f7fe fff0 	bl	8001bf4 <HAL_InitTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	e001      	b.n	8002c24 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c20:	f7fe fdb9 	bl	8001796 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c24:	79fb      	ldrb	r3, [r7, #7]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <HAL_SuspendTick+0x18>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <HAL_SuspendTick+0x18>)
 8002c3e:	f023 0302 	bic.w	r3, r3, #2
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <HAL_ResumeTick+0x18>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <HAL_ResumeTick+0x18>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	e000e010 	.word	0xe000e010

08002c6c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <HAL_GetUIDw0+0x10>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	1fff7590 	.word	0x1fff7590

08002c80 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002c84:	4b02      	ldr	r3, [pc, #8]	; (8002c90 <HAL_GetUIDw1+0x10>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	1fff7594 	.word	0x1fff7594

08002c94 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <HAL_GetUIDw2+0x10>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	1fff7598 	.word	0x1fff7598

08002ca8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002cac:	f7ff ff4e 	bl	8002b4c <LL_DBGMCU_EnableDBGSleepMode>
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002cb8:	f7ff ff56 	bl	8002b68 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002cc4:	f7ff ff5e 	bl	8002b84 <LL_DBGMCU_EnableDBGStopMode>
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002cd0:	f7ff ff66 	bl	8002ba0 <LL_DBGMCU_DisableDBGStopMode>
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002cdc:	f7ff ff6e 	bl	8002bbc <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002ce8:	f7ff ff76 	bl	8002bd8 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2107      	movs	r1, #7
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	210f      	movs	r1, #15
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	f003 010f 	and.w	r1, r3, #15
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	401a      	ands	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	0219      	lsls	r1, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	400b      	ands	r3, r1
 8002e3a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e62:	f023 0317 	bic.w	r3, r3, #23
 8002e66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e88:	f023 0317 	bic.w	r3, r3, #23
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6093      	str	r3, [r2, #8]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed0:	f023 0317 	bic.w	r3, r3, #23
 8002ed4:	f043 0201 	orr.w	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ef6:	f023 0317 	bic.w	r3, r3, #23
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <LL_ADC_IsEnabled+0x18>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_ADC_IsEnabled+0x1a>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d101      	bne.n	8002f48 <LL_ADC_IsDisableOngoing+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_ADC_IsDisableOngoing+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f64:	f023 0317 	bic.w	r3, r3, #23
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f8a:	f023 0317 	bic.w	r3, r3, #23
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1ae      	b.n	8003344 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f83b 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff44 	bl	8002e9a <LL_ADC_IsInternalRegulatorEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d115      	bne.n	8003044 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff ff18 	bl	8002e52 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003022:	4b9b      	ldr	r3, [pc, #620]	; (8003290 <HAL_ADC_Init+0x2cc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	099b      	lsrs	r3, r3, #6
 8003028:	4a9a      	ldr	r2, [pc, #616]	; (8003294 <HAL_ADC_Init+0x2d0>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	3301      	adds	r3, #1
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003036:	e002      	b.n	800303e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3b01      	subs	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f9      	bne.n	8003038 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff26 	bl	8002e9a <LL_ADC_IsInternalRegulatorEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10d      	bne.n	8003070 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f043 0210 	orr.w	r2, r3, #16
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff93 	bl	8002fa0 <LL_ADC_REG_IsConversionOngoing>
 800307a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 8154 	bne.w	8003332 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8150 	bne.w	8003332 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800309a:	f043 0202 	orr.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff30 	bl	8002f0c <LL_ADC_IsEnabled>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d14f      	bne.n	8003152 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f023 0118 	bic.w	r1, r3, #24
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030d4:	4313      	orrs	r3, r2
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d111      	bne.n	800310a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80030f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80030f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80030fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	4b61      	ldr	r3, [pc, #388]	; (8003298 <HAL_ADC_Init+0x2d4>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	430b      	orrs	r3, r1
 800311c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003126:	d014      	beq.n	8003152 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d00f      	beq.n	8003152 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313a:	d00a      	beq.n	8003152 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800313c:	4b57      	ldr	r3, [pc, #348]	; (800329c <HAL_ADC_Init+0x2d8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800314c:	4953      	ldr	r1, [pc, #332]	; (800329c <HAL_ADC_Init+0x2d8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7e1b      	ldrb	r3, [r3, #24]
 8003156:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	7e5b      	ldrb	r3, [r3, #25]
 800315c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800315e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7e9b      	ldrb	r3, [r3, #26]
 8003164:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003166:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800316c:	2a00      	cmp	r2, #0
 800316e:	d002      	beq.n	8003176 <HAL_ADC_Init+0x1b2>
 8003170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003174:	e000      	b.n	8003178 <HAL_ADC_Init+0x1b4>
 8003176:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003178:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800317e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	da04      	bge.n	8003192 <HAL_ADC_Init+0x1ce>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003190:	e001      	b.n	8003196 <HAL_ADC_Init+0x1d2>
 8003192:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8003196:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800319e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031a0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d114      	bne.n	80031dc <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7e9b      	ldrb	r3, [r3, #26]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e00b      	b.n	80031dc <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80031f0:	4313      	orrs	r3, r2
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003202:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	430b      	orrs	r3, r1
 800320e:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_ADC_Init+0x2dc>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	430b      	orrs	r3, r1
 8003222:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	461a      	mov	r2, r3
 800322e:	2100      	movs	r1, #0
 8003230:	f7ff fd7d 	bl	8002d2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	461a      	mov	r2, r3
 800323e:	4919      	ldr	r1, [pc, #100]	; (80032a4 <HAL_ADC_Init+0x2e0>)
 8003240:	f7ff fd75 	bl	8002d2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d108      	bne.n	800325e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f062 020f 	orn	r2, r2, #15
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
 800325c:	e044      	b.n	80032e8 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003266:	d13f      	bne.n	80032e8 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e00c      	b.n	8003288 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	2b0f      	cmp	r3, #15
 8003280:	d012      	beq.n	80032a8 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3301      	adds	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b07      	cmp	r3, #7
 800328c:	d9ef      	bls.n	800326e <HAL_ADC_Init+0x2aa>
 800328e:	e00c      	b.n	80032aa <HAL_ADC_Init+0x2e6>
 8003290:	20000000 	.word	0x20000000
 8003294:	053e2d63 	.word	0x053e2d63
 8003298:	1ffffc02 	.word	0x1ffffc02
 800329c:	40012708 	.word	0x40012708
 80032a0:	dffffc02 	.word	0xdffffc02
 80032a4:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80032a8:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f062 020f 	orn	r2, r2, #15
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
 80032c0:	e012      	b.n	80032e8 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	f003 031c 	and.w	r3, r3, #28
 80032d4:	f06f 020f 	mvn.w	r2, #15
 80032d8:	fa02 f103 	lsl.w	r1, r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_ADC_Init+0x388>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800330e:	e018      	b.n	8003342 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f023 0312 	bic.w	r3, r3, #18
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003330:	e007      	b.n	8003342 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003342:	7ffb      	ldrb	r3, [r7, #31]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	833fffe7 	.word	0x833fffe7

08003350 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06a      	b.n	8003438 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fabe 	bl	80038f0 <ADC_ConversionStop>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10f      	bne.n	800339e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fb82 	bl	8003a88 <ADC_Disable>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fd6d 	bl	8002e78 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80033ac:	f023 0303 	bic.w	r3, r3, #3
 80033b0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f240 329f 	movw	r2, #927	; 0x39f
 80033ba:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68d9      	ldr	r1, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_ADC_DeInit+0xf0>)
 80033c8:	400b      	ands	r3, r1
 80033ca:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80033da:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0207 	bic.w	r2, r2, #7
 80033ea:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a1a      	ldr	r2, [r3, #32]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80033fa:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_ADC_DeInit+0xf4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_ADC_DeInit+0xf4>)
 8003410:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003414:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fe3e 	bl	8001098 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	833e0200 	.word	0x833e0200
 8003444:	40012708 	.word	0x40012708

08003448 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fda3 	bl	8002fa0 <LL_ADC_REG_IsConversionOngoing>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d132      	bne.n	80034c6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADC_Start+0x26>
 800346a:	2302      	movs	r3, #2
 800346c:	e02e      	b.n	80034cc <HAL_ADC_Start+0x84>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa80 	bl	800397c <ADC_Enable>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d11a      	bne.n	80034bc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	221c      	movs	r2, #28
 80034a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff fd4d 	bl	8002f54 <LL_ADC_REG_StartConversion>
 80034ba:	e006      	b.n	80034ca <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80034c4:	e001      	b.n	80034ca <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_Stop+0x16>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e022      	b.n	8003530 <HAL_ADC_Stop+0x5c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f9fc 	bl	80038f0 <ADC_ConversionStop>
 80034f8:	4603      	mov	r3, r0
 80034fa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d111      	bne.n	8003526 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fac0 	bl	8003a88 <ADC_Disable>
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d102      	bne.n	8003550 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800354a:	2308      	movs	r3, #8
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e010      	b.n	8003572 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e077      	b.n	800365e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800356e:	2304      	movs	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003572:	f7fe fb49 	bl	8001c08 <HAL_GetTick>
 8003576:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003578:	e021      	b.n	80035be <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d01d      	beq.n	80035be <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003582:	f7fe fb41 	bl	8001c08 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d302      	bcc.n	8003598 <HAL_ADC_PollForConversion+0x60>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d112      	bne.n	80035be <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04f      	b.n	800365e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0d6      	beq.n	800357a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fbc4 	bl	8002d6a <LL_ADC_REG_IsTriggerSourceSWStart>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d031      	beq.n	800364c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7e9b      	ldrb	r3, [r3, #26]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d12d      	bne.n	800364c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d126      	bne.n	800364c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fccc 	bl	8002fa0 <LL_ADC_REG_IsConversionOngoing>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d112      	bne.n	8003634 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 020c 	bic.w	r2, r2, #12
 800361c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	f043 0201 	orr.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	659a      	str	r2, [r3, #88]	; 0x58
 8003632:	e00b      	b.n	800364c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7e1b      	ldrb	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	220c      	movs	r2, #12
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
	...

08003680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x28>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e110      	b.n	80038ca <HAL_ADC_ConfigChannel+0x24a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fc73 	bl	8002fa0 <LL_ADC_REG_IsConversionOngoing>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f040 80f7 	bne.w	80038b0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	f000 80b1 	beq.w	800382e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036d4:	d004      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036da:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_ADC_ConfigChannel+0x254>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7ff fb70 	bl	8002dd0 <LL_ADC_REG_SetSequencerChAdd>
 80036f0:	e041      	b.n	8003776 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	210f      	movs	r1, #15
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	401a      	ands	r2, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_ADC_ConfigChannel+0xa0>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	e011      	b.n	8003744 <HAL_ADC_ConfigChannel+0xc4>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003738:	2320      	movs	r3, #32
 800373a:	e003      	b.n	8003744 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	6849      	ldr	r1, [r1, #4]
 8003748:	f001 011f 	and.w	r1, r1, #31
 800374c:	408b      	lsls	r3, r1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	429a      	cmp	r2, r3
 8003762:	d808      	bhi.n	8003776 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	f7ff fb0c 	bl	8002d8e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	461a      	mov	r2, r3
 8003784:	f7ff fb49 	bl	8002e1a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f280 8097 	bge.w	80038c0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003792:	4851      	ldr	r0, [pc, #324]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 8003794:	f7ff fabe 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 8003798:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4f      	ldr	r2, [pc, #316]	; (80038dc <HAL_ADC_ConfigChannel+0x25c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d120      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11b      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037b4:	4619      	mov	r1, r3
 80037b6:	4848      	ldr	r0, [pc, #288]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 80037b8:	f7ff fa9a 	bl	8002cf0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037bc:	4b48      	ldr	r3, [pc, #288]	; (80038e0 <HAL_ADC_ConfigChannel+0x260>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	4a48      	ldr	r2, [pc, #288]	; (80038e4 <HAL_ADC_ConfigChannel+0x264>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037d6:	e002      	b.n	80037de <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3b01      	subs	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f9      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037e4:	e06c      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a3f      	ldr	r2, [pc, #252]	; (80038e8 <HAL_ADC_ConfigChannel+0x268>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10c      	bne.n	800380a <HAL_ADC_ConfigChannel+0x18a>
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d107      	bne.n	800380a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003800:	4619      	mov	r1, r3
 8003802:	4835      	ldr	r0, [pc, #212]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 8003804:	f7ff fa74 	bl	8002cf0 <LL_ADC_SetCommonPathInternalCh>
 8003808:	e05a      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a37      	ldr	r2, [pc, #220]	; (80038ec <HAL_ADC_ConfigChannel+0x26c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d155      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800381a:	2b00      	cmp	r3, #0
 800381c:	d150      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003824:	4619      	mov	r1, r3
 8003826:	482c      	ldr	r0, [pc, #176]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 8003828:	f7ff fa62 	bl	8002cf0 <LL_ADC_SetCommonPathInternalCh>
 800382c:	e048      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003836:	d004      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800383c:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <HAL_ADC_ConfigChannel+0x254>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d107      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7ff fad1 	bl	8002df4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	da32      	bge.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800385a:	481f      	ldr	r0, [pc, #124]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 800385c:	f7ff fa5a 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 8003860:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1d      	ldr	r2, [pc, #116]	; (80038dc <HAL_ADC_ConfigChannel+0x25c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d107      	bne.n	800387c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003872:	4619      	mov	r1, r3
 8003874:	4818      	ldr	r0, [pc, #96]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 8003876:	f7ff fa3b 	bl	8002cf0 <LL_ADC_SetCommonPathInternalCh>
 800387a:	e021      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <HAL_ADC_ConfigChannel+0x268>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d107      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388c:	4619      	mov	r1, r3
 800388e:	4812      	ldr	r0, [pc, #72]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 8003890:	f7ff fa2e 	bl	8002cf0 <LL_ADC_SetCommonPathInternalCh>
 8003894:	e014      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <HAL_ADC_ConfigChannel+0x26c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10f      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80038a6:	4619      	mov	r1, r3
 80038a8:	480b      	ldr	r0, [pc, #44]	; (80038d8 <HAL_ADC_ConfigChannel+0x258>)
 80038aa:	f7ff fa21 	bl	8002cf0 <LL_ADC_SetCommonPathInternalCh>
 80038ae:	e007      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80038c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	80000004 	.word	0x80000004
 80038d8:	40012708 	.word	0x40012708
 80038dc:	b0001000 	.word	0xb0001000
 80038e0:	20000000 	.word	0x20000000
 80038e4:	053e2d63 	.word	0x053e2d63
 80038e8:	b8004000 	.word	0xb8004000
 80038ec:	b4002000 	.word	0xb4002000

080038f0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fb4f 	bl	8002fa0 <LL_ADC_REG_IsConversionOngoing>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d033      	beq.n	8003970 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fb0f 	bl	8002f30 <LL_ADC_IsDisableOngoing>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fb2c 	bl	8002f7a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003922:	f7fe f971 	bl	8001c08 <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003928:	e01b      	b.n	8003962 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800392a:	f7fe f96d 	bl	8001c08 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d914      	bls.n	8003962 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	f043 0201 	orr.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1dc      	bne.n	800392a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fabd 	bl	8002f0c <LL_ADC_IsEnabled>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d169      	bne.n	8003a6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <ADC_Enable+0xfc>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e055      	b.n	8003a6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fa7a 	bl	8002ec0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039cc:	482b      	ldr	r0, [pc, #172]	; (8003a7c <ADC_Enable+0x100>)
 80039ce:	f7ff f9a1 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00f      	beq.n	80039fc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <ADC_Enable+0x104>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <ADC_Enable+0x108>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	3301      	adds	r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039ee:	e002      	b.n	80039f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f9      	bne.n	80039f0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7e5b      	ldrb	r3, [r3, #25]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d033      	beq.n	8003a6c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003a04:	f7fe f900 	bl	8001c08 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a0a:	e028      	b.n	8003a5e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fa7b 	bl	8002f0c <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d104      	bne.n	8003a26 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fa4d 	bl	8002ec0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a26:	f7fe f8ef 	bl	8001c08 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d914      	bls.n	8003a5e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d00d      	beq.n	8003a5e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f043 0210 	orr.w	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	f043 0201 	orr.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e007      	b.n	8003a6e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d1cf      	bne.n	8003a0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	80000017 	.word	0x80000017
 8003a7c:	40012708 	.word	0x40012708
 8003a80:	20000000 	.word	0x20000000
 8003a84:	053e2d63 	.word	0x053e2d63

08003a88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fa4b 	bl	8002f30 <LL_ADC_IsDisableOngoing>
 8003a9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fa33 	bl	8002f0c <LL_ADC_IsEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d047      	beq.n	8003b3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d144      	bne.n	8003b3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0305 	and.w	r3, r3, #5
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10c      	bne.n	8003ada <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fa0e 	bl	8002ee6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ad2:	f7fe f899 	bl	8001c08 <HAL_GetTick>
 8003ad6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad8:	e029      	b.n	8003b2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f043 0210 	orr.w	r2, r3, #16
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e023      	b.n	8003b3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003af6:	f7fe f887 	bl	8001c08 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d914      	bls.n	8003b2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e007      	b.n	8003b3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1dc      	bne.n	8003af6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <LL_ADC_IsEnabled>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <LL_ADC_IsEnabled+0x18>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <LL_ADC_IsEnabled+0x1a>
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_IsCalibrationOnGoing>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7e:	d101      	bne.n	8003b84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_ADCEx_Calibration_Start+0x1a>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e068      	b.n	8003c7c <HAL_ADCEx_Calibration_Start+0xec>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ff68 	bl	8003a88 <ADC_Disable>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ffc0 	bl	8003b46 <LL_ADC_IsEnabled>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d14c      	bne.n	8003c66 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003bd4:	f043 0202 	orr.w	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0203 	bic.w	r2, r2, #3
 8003bf6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c06:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c08:	e014      	b.n	8003c34 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003c16:	d30d      	bcc.n	8003c34 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f023 0312 	bic.w	r3, r3, #18
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e023      	b.n	8003c7c <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff96 	bl	8003b6a <LL_ADC_IsCalibrationOnGoing>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e2      	bne.n	8003c0a <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68d9      	ldr	r1, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f023 0303 	bic.w	r3, r3, #3
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58
 8003c64:	e005      	b.n	8003c72 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cb6:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	60d3      	str	r3, [r2, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000ed00 	.word	0xe000ed00

08003ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	f003 0307 	and.w	r3, r3, #7
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	db0b      	blt.n	8003d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	4906      	ldr	r1, [pc, #24]	; (8003d1c <__NVIC_EnableIRQ+0x34>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2001      	movs	r0, #1
 8003d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e100 	.word	0xe000e100

08003d20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db12      	blt.n	8003d58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	490a      	ldr	r1, [pc, #40]	; (8003d64 <__NVIC_DisableIRQ+0x44>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2001      	movs	r0, #1
 8003d42:	fa00 f202 	lsl.w	r2, r0, r2
 8003d46:	3320      	adds	r3, #32
 8003d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d4c:	f3bf 8f4f 	dsb	sy
}
 8003d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d52:	f3bf 8f6f 	isb	sy
}
 8003d56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	; (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
         );
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff2b 	bl	8003c84 <__NVIC_SetPriorityGrouping>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e44:	f7ff ff42 	bl	8003ccc <__NVIC_GetPriorityGrouping>
 8003e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	6978      	ldr	r0, [r7, #20]
 8003e50:	f7ff ffb4 	bl	8003dbc <NVIC_EncodePriority>
 8003e54:	4602      	mov	r2, r0
 8003e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff83 	bl	8003d68 <__NVIC_SetPriority>
}
 8003e62:	bf00      	nop
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ff35 	bl	8003ce8 <__NVIC_EnableIRQ>
}
 8003e7e:	bf00      	nop
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff43 	bl	8003d20 <__NVIC_DisableIRQ>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e08e      	b.n	8003fd4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_DMA_Init+0x138>)
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d80f      	bhi.n	8003ee2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <HAL_DMA_Init+0x13c>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	4a45      	ldr	r2, [pc, #276]	; (8003fe4 <HAL_DMA_Init+0x140>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	009a      	lsls	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a42      	ldr	r2, [pc, #264]	; (8003fe8 <HAL_DMA_Init+0x144>)
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee0:	e00e      	b.n	8003f00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b40      	ldr	r3, [pc, #256]	; (8003fec <HAL_DMA_Init+0x148>)
 8003eea:	4413      	add	r3, r2
 8003eec:	4a3d      	ldr	r2, [pc, #244]	; (8003fe4 <HAL_DMA_Init+0x140>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	009a      	lsls	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a3c      	ldr	r2, [pc, #240]	; (8003ff0 <HAL_DMA_Init+0x14c>)
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fb24 	bl	80045a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f60:	d102      	bne.n	8003f68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f74:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f7e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <HAL_DMA_Init+0x106>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d80c      	bhi.n	8003faa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb4d 	bl	8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	e008      	b.n	8003fbc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40020407 	.word	0x40020407
 8003fe0:	bffdfff8 	.word	0xbffdfff8
 8003fe4:	cccccccd 	.word	0xcccccccd
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	bffdfbf8 	.word	0xbffdfbf8
 8003ff0:	40020400 	.word	0x40020400

08003ff4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07b      	b.n	80040fe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_DMA_DeInit+0x114>)
 800401e:	429a      	cmp	r2, r3
 8004020:	d80f      	bhi.n	8004042 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	4b38      	ldr	r3, [pc, #224]	; (800410c <HAL_DMA_DeInit+0x118>)
 800402a:	4413      	add	r3, r2
 800402c:	4a38      	ldr	r2, [pc, #224]	; (8004110 <HAL_DMA_DeInit+0x11c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	009a      	lsls	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a35      	ldr	r2, [pc, #212]	; (8004114 <HAL_DMA_DeInit+0x120>)
 800403e:	641a      	str	r2, [r3, #64]	; 0x40
 8004040:	e00e      	b.n	8004060 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <HAL_DMA_DeInit+0x124>)
 800404a:	4413      	add	r3, r2
 800404c:	4a30      	ldr	r2, [pc, #192]	; (8004110 <HAL_DMA_DeInit+0x11c>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	009a      	lsls	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_DMA_DeInit+0x128>)
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f003 021c 	and.w	r2, r3, #28
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f202 	lsl.w	r2, r1, r2
 800407a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fa8f 	bl	80045a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004092:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00f      	beq.n	80040bc <HAL_DMA_DeInit+0xc8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d80b      	bhi.n	80040bc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fac3 	bl	8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040ba:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40020407 	.word	0x40020407
 800410c:	bffdfff8 	.word	0xbffdfff8
 8004110:	cccccccd 	.word	0xcccccccd
 8004114:	40020000 	.word	0x40020000
 8004118:	bffdfbf8 	.word	0xbffdfbf8
 800411c:	40020400 	.word	0x40020400

08004120 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_DMA_Start_IT+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e069      	b.n	8004214 <HAL_DMA_Start_IT+0xf4>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d155      	bne.n	8004200 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f9d3 	bl	8004524 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 020e 	orr.w	r2, r2, #14
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e00f      	b.n	80041b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 020a 	orr.w	r2, r2, #10
 80041b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e008      	b.n	8004212 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e04f      	b.n	80042ce <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d008      	beq.n	800424c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2204      	movs	r2, #4
 800423e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e040      	b.n	80042ce <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020e 	bic.w	r2, r2, #14
 800425a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0201 	bic.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 021c 	and.w	r2, r3, #28
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004298:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00c      	beq.n	80042bc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d005      	beq.n	80042fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	e047      	b.n	800438c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 020e 	bic.w	r2, r2, #14
 800430a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f003 021c 	and.w	r2, r3, #28
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f202 	lsl.w	r2, r1, r2
 800433e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004348:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00c      	beq.n	800436c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800436a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
    }
  }
  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f003 031c 	and.w	r3, r3, #28
 80043b8:	2204      	movs	r2, #4
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d027      	beq.n	8004414 <HAL_DMA_IRQHandler+0x7c>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d107      	bne.n	80043ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	f003 021c 	and.w	r2, r3, #28
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2104      	movs	r1, #4
 80043fa:	fa01 f202 	lsl.w	r2, r1, r2
 80043fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8081 	beq.w	800450c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004412:	e07b      	b.n	800450c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	f003 031c 	and.w	r3, r3, #28
 800441c:	2202      	movs	r2, #2
 800441e:	409a      	lsls	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03d      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x10c>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d038      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 020a 	bic.w	r2, r2, #10
 800444e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HAL_DMA_IRQHandler+0x180>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d909      	bls.n	8004478 <HAL_DMA_IRQHandler+0xe0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	f003 031c 	and.w	r3, r3, #28
 800446c:	4a2b      	ldr	r2, [pc, #172]	; (800451c <HAL_DMA_IRQHandler+0x184>)
 800446e:	2102      	movs	r1, #2
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	6053      	str	r3, [r2, #4]
 8004476:	e008      	b.n	800448a <HAL_DMA_IRQHandler+0xf2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f003 031c 	and.w	r3, r3, #28
 8004480:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_DMA_IRQHandler+0x188>)
 8004482:	2102      	movs	r1, #2
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d038      	beq.n	800450c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80044a2:	e033      	b.n	800450c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	f003 031c 	and.w	r3, r3, #28
 80044ac:	2208      	movs	r2, #8
 80044ae:	409a      	lsls	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02a      	beq.n	800450e <HAL_DMA_IRQHandler+0x176>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d025      	beq.n	800450e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 020e 	bic.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	f003 021c 	and.w	r2, r3, #28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f202 	lsl.w	r2, r1, r2
 80044e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800450c:	bf00      	nop
 800450e:	bf00      	nop
}
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40020080 	.word	0x40020080
 800451c:	40020400 	.word	0x40020400
 8004520:	40020000 	.word	0x40020000

08004524 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800453a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800454c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f003 021c 	and.w	r2, r3, #28
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2101      	movs	r1, #1
 800455c:	fa01 f202 	lsl.w	r2, r1, r2
 8004560:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b10      	cmp	r3, #16
 8004570:	d108      	bne.n	8004584 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004582:	e007      	b.n	8004594 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
	...

080045a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d813      	bhi.n	80045dc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045c0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	3b08      	subs	r3, #8
 80045d0:	4a14      	ldr	r2, [pc, #80]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e011      	b.n	8004600 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	4b10      	ldr	r3, [pc, #64]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80045e6:	4413      	add	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	3b08      	subs	r3, #8
 80045f4:	4a0b      	ldr	r2, [pc, #44]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	3307      	adds	r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004604:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40020407 	.word	0x40020407
 8004624:	cccccccd 	.word	0xcccccccd
 8004628:	4002081c 	.word	0x4002081c
 800462c:	40020880 	.word	0x40020880

08004630 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004640:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004654:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3b01      	subs	r3, #1
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2201      	movs	r2, #1
 8004660:	409a      	lsls	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	1000823f 	.word	0x1000823f
 8004674:	40020940 	.word	0x40020940

08004678 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	460b      	mov	r3, r1
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800468a:	7afb      	ldrb	r3, [r7, #11]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	605a      	str	r2, [r3, #4]
      break;
 8004696:	e002      	b.n	800469e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
      break;
 800469c:	bf00      	nop
  }

  return status;
 800469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e003      	b.n	80046c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046de:	e140      	b.n	8004962 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2101      	movs	r1, #1
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8132 	beq.w	800495c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d005      	beq.n	8004710 <HAL_GPIO_Init+0x40>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d130      	bne.n	8004772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004746:	2201      	movs	r2, #1
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	f003 0201 	and.w	r2, r3, #1
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d017      	beq.n	80047ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	2203      	movs	r2, #3
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d123      	bne.n	8004802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	08da      	lsrs	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3208      	adds	r2, #8
 80047c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	220f      	movs	r2, #15
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	6939      	ldr	r1, [r7, #16]
 80047fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2203      	movs	r2, #3
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4013      	ands	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 0203 	and.w	r2, r3, #3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 808c 	beq.w	800495c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004844:	4a4e      	ldr	r2, [pc, #312]	; (8004980 <HAL_GPIO_Init+0x2b0>)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	3302      	adds	r3, #2
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	2207      	movs	r2, #7
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800486e:	d00d      	beq.n	800488c <HAL_GPIO_Init+0x1bc>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a44      	ldr	r2, [pc, #272]	; (8004984 <HAL_GPIO_Init+0x2b4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <HAL_GPIO_Init+0x1b8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a43      	ldr	r2, [pc, #268]	; (8004988 <HAL_GPIO_Init+0x2b8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_GPIO_Init+0x1b4>
 8004880:	2302      	movs	r3, #2
 8004882:	e004      	b.n	800488e <HAL_GPIO_Init+0x1be>
 8004884:	2307      	movs	r3, #7
 8004886:	e002      	b.n	800488e <HAL_GPIO_Init+0x1be>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_GPIO_Init+0x1be>
 800488c:	2300      	movs	r3, #0
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	f002 0203 	and.w	r2, r2, #3
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	4093      	lsls	r3, r2
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800489e:	4938      	ldr	r1, [pc, #224]	; (8004980 <HAL_GPIO_Init+0x2b0>)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	3302      	adds	r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80048ac:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_GPIO_Init+0x2bc>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80048d2:	4a2e      	ldr	r2, [pc, #184]	; (800498c <HAL_GPIO_Init+0x2bc>)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80048da:	4b2c      	ldr	r3, [pc, #176]	; (800498c <HAL_GPIO_Init+0x2bc>)
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004900:	4a22      	ldr	r2, [pc, #136]	; (800498c <HAL_GPIO_Init+0x2bc>)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004908:	4b20      	ldr	r3, [pc, #128]	; (800498c <HAL_GPIO_Init+0x2bc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43db      	mvns	r3, r3
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800492c:	4a17      	ldr	r2, [pc, #92]	; (800498c <HAL_GPIO_Init+0x2bc>)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004932:	4b16      	ldr	r3, [pc, #88]	; (800498c <HAL_GPIO_Init+0x2bc>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	43db      	mvns	r3, r3
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	4013      	ands	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004956:	4a0d      	ldr	r2, [pc, #52]	; (800498c <HAL_GPIO_Init+0x2bc>)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3301      	adds	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	f47f aeb7 	bne.w	80046e0 <HAL_GPIO_Init+0x10>
  }
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	48000400 	.word	0x48000400
 8004988:	48000800 	.word	0x48000800
 800498c:	58000800 	.word	0x58000800

08004990 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800499e:	e0af      	b.n	8004b00 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80049a0:	2201      	movs	r2, #1
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	4013      	ands	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a2 	beq.w	8004afa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80049b6:	4a59      	ldr	r2, [pc, #356]	; (8004b1c <HAL_GPIO_DeInit+0x18c>)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	2207      	movs	r2, #7
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049de:	d00d      	beq.n	80049fc <HAL_GPIO_DeInit+0x6c>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a4f      	ldr	r2, [pc, #316]	; (8004b20 <HAL_GPIO_DeInit+0x190>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <HAL_GPIO_DeInit+0x68>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <HAL_GPIO_DeInit+0x194>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_GPIO_DeInit+0x64>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e004      	b.n	80049fe <HAL_GPIO_DeInit+0x6e>
 80049f4:	2307      	movs	r3, #7
 80049f6:	e002      	b.n	80049fe <HAL_GPIO_DeInit+0x6e>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <HAL_GPIO_DeInit+0x6e>
 80049fc:	2300      	movs	r3, #0
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	f002 0203 	and.w	r2, r2, #3
 8004a04:	0092      	lsls	r2, r2, #2
 8004a06:	4093      	lsls	r3, r2
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d136      	bne.n	8004a7c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004a0e:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a10:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	4943      	ldr	r1, [pc, #268]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	493f      	ldr	r1, [pc, #252]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	493b      	ldr	r1, [pc, #236]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	4937      	ldr	r1, [pc, #220]	; (8004b28 <HAL_GPIO_DeInit+0x198>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	2207      	movs	r2, #7
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <HAL_GPIO_DeInit+0x18c>)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	43da      	mvns	r2, r3
 8004a6e:	482b      	ldr	r0, [pc, #172]	; (8004b1c <HAL_GPIO_DeInit+0x18c>)
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	400a      	ands	r2, r1
 8004a76:	3302      	adds	r3, #2
 8004a78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	2103      	movs	r1, #3
 8004a86:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	220f      	movs	r2, #15
 8004aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	08d2      	lsrs	r2, r2, #3
 8004ab0:	4019      	ands	r1, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	2103      	movs	r1, #3
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	401a      	ands	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	2103      	movs	r1, #3
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	401a      	ands	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	3301      	adds	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f47f af49 	bne.w	80049a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	48000400 	.word	0x48000400
 8004b24:	48000800 	.word	0x48000800
 8004b28:	58000800 	.word	0x58000800

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b48:	e002      	b.n	8004b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b6c:	887a      	ldrh	r2, [r7, #2]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4013      	ands	r3, r2
 8004b72:	041a      	lsls	r2, r3, #16
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	43d9      	mvns	r1, r3
 8004b78:	887b      	ldrh	r3, [r7, #2]
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	619a      	str	r2, [r3, #24]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f005 f86c 	bl	8009c88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	58000800 	.word	0x58000800

08004bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e081      	b.n	8004cd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc fc08 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	; 0x24
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	e006      	b.n	8004c44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d104      	bne.n	8004c56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b08a      	sub	sp, #40	; 0x28
 8004cde:	af02      	add	r7, sp, #8
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	f040 80f1 	bne.w	8004ede <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0e7      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_I2C_IsDeviceReady+0x44>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0e0      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d107      	bne.n	8004d4c <HAL_I2C_IsDeviceReady+0x72>
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d4a:	e004      	b.n	8004d56 <HAL_I2C_IsDeviceReady+0x7c>
 8004d4c:	897b      	ldrh	r3, [r7, #10]
 8004d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d52:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fc ff54 	bl	8001c08 <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	bf0c      	ite	eq
 8004d86:	2301      	moveq	r3, #1
 8004d88:	2300      	movne	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d8e:	e034      	b.n	8004dfa <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d96:	d01a      	beq.n	8004dce <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fc ff36 	bl	8001c08 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <HAL_I2C_IsDeviceReady+0xd4>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e088      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	bf0c      	ite	eq
 8004df2:	2301      	moveq	r3, #1
 8004df4:	2300      	movne	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <HAL_I2C_IsDeviceReady+0x12c>
 8004e00:	7fbb      	ldrb	r3, [r7, #30]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0c4      	beq.n	8004d90 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d01a      	beq.n	8004e4a <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f862 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e058      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2220      	movs	r2, #32
 8004e34:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e04a      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2120      	movs	r1, #32
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f847 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e03d      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2210      	movs	r2, #16
 8004e6a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2220      	movs	r2, #32
 8004e72:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d118      	bne.n	8004eae <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	2120      	movs	r1, #32
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f826 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e01c      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	f63f af3b 	bhi.w	8004d34 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef8:	e022      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d01e      	beq.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fc fe81 	bl	8001c08 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d113      	bne.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e00f      	b.n	8004f60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d0cd      	beq.n	8004efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d138      	bne.n	8004ff0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e032      	b.n	8004ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b20      	cmp	r3, #32
 8005010:	d139      	bne.n	8005086 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800501c:	2302      	movs	r3, #2
 800501e:	e033      	b.n	8005088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	; 0x24
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800504e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
	...

08005094 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a03      	ldr	r2, [pc, #12]	; (80050ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	6013      	str	r3, [r2, #0]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	58000400 	.word	0x58000400

080050b0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <HAL_PWR_EnterSLEEPMode+0x60>)
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ce:	d10d      	bne.n	80050ec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80050d0:	f000 f83c 	bl	800514c <HAL_PWREx_DisableLowPowerRunMode>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80050da:	e015      	b.n	8005108 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_PWR_EnterSLEEPMode+0x60>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80050e8:	f000 f822 	bl	8005130 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_PWR_EnterSLEEPMode+0x64>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	4a08      	ldr	r2, [pc, #32]	; (8005114 <HAL_PWR_EnterSLEEPMode+0x64>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80050fe:	bf30      	wfi
 8005100:	e002      	b.n	8005108 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005102:	bf40      	sev
    __WFE();
 8005104:	bf20      	wfe
    __WFE();
 8005106:	bf20      	wfe
  }
}
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	58000400 	.word	0x58000400
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800511c:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_PWREx_GetVoltageRange+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	58000400 	.word	0x58000400

08005130 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005134:	4b04      	ldr	r3, [pc, #16]	; (8005148 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a03      	ldr	r2, [pc, #12]	; (8005148 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800513a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800513e:	6013      	str	r3, [r2, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	58000400 	.word	0x58000400

0800514c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005152:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2232      	movs	r2, #50	; 0x32
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0c9b      	lsrs	r3, r3, #18
 8005170:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005172:	e002      	b.n	800517a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3b01      	subs	r3, #1
 8005178:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800517a:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005186:	d102      	bne.n	800518e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f2      	bne.n	8005174 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519a:	d101      	bne.n	80051a0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e000      	b.n	80051a2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr
 80051ac:	58000400 	.word	0x58000400
 80051b0:	20000000 	.word	0x20000000
 80051b4:	431bde83 	.word	0x431bde83

080051b8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80051e4:	bf30      	wfi
 80051e6:	e002      	b.n	80051ee <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80051e8:	bf40      	sev
    __WFE();
 80051ea:	bf20      	wfe
    __WFE();
 80051ec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	4a05      	ldr	r2, [pc, #20]	; (8005208 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	6113      	str	r3, [r2, #16]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	58000400 	.word	0x58000400
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <LL_PWR_IsEnabledBkUpAccess>:
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521c:	d101      	bne.n	8005222 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	58000400 	.word	0x58000400

08005230 <LL_RCC_HSE_EnableTcxo>:
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005242:	6013      	str	r3, [r2, #0]
}
 8005244:	bf00      	nop
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <LL_RCC_HSE_DisableTcxo>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800525e:	6013      	str	r3, [r2, #0]
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	bc80      	pop	{r7}
 8005266:	4770      	bx	lr

08005268 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800527a:	d101      	bne.n	8005280 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <LL_RCC_HSE_Enable>:
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800529c:	6013      	str	r3, [r2, #0]
}
 800529e:	bf00      	nop
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_HSE_Disable>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_HSE_IsReady>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d4:	d101      	bne.n	80052da <LL_RCC_HSE_IsReady+0x18>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <LL_RCC_HSE_IsReady+0x1a>
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_HSI_Enable>:
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80052e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f6:	6013      	str	r3, [r2, #0]
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_HSI_Disable>:
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800530e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005312:	6013      	str	r3, [r2, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <LL_RCC_HSI_IsReady>:
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532e:	d101      	bne.n	8005334 <LL_RCC_HSI_IsReady+0x18>
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <LL_RCC_HSI_IsReady+0x1a>
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr

0800533e <LL_RCC_HSI_SetCalibTrimming>:
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <LL_RCC_LSE_IsReady>:
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d101      	bne.n	800537e <LL_RCC_LSE_IsReady+0x18>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <LL_RCC_LSE_IsReady+0x1a>
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <LL_RCC_LSI_Enable>:
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr

080053a8 <LL_RCC_LSI_Disable>:
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_LSI_IsReady>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d101      	bne.n	80053e0 <LL_RCC_LSI_IsReady+0x18>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <LL_RCC_LSI_IsReady+0x1a>
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <LL_RCC_MSI_Enable>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <LL_RCC_MSI_Disable>:
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	6013      	str	r3, [r2, #0]
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <LL_RCC_MSI_IsReady>:
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d101      	bne.n	8005438 <LL_RCC_MSI_IsReady+0x16>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <LL_RCC_MSI_IsReady+0x18>
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b08      	cmp	r3, #8
 8005452:	d101      	bne.n	8005458 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <LL_RCC_MSI_GetRange>:
{
 8005462:	b480      	push	{r7}
 8005464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800547c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005484:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054aa:	4313      	orrs	r3, r2
 80054ac:	604b      	str	r3, [r1, #4]
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <LL_RCC_SetSysClkSource>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80054c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f023 0203 	bic.w	r2, r3, #3
 80054ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <LL_RCC_GetSysClkSource>:
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 030c 	and.w	r3, r3, #12
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <LL_RCC_SetAHBPrescaler>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4313      	orrs	r3, r2
 800550e:	608b      	str	r3, [r1, #8]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <LL_RCC_SetAHB3Prescaler>:
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	091b      	lsrs	r3, r3, #4
 8005532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <LL_RCC_SetAPB1Prescaler>:
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <LL_RCC_SetAPB2Prescaler>:
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800557e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4313      	orrs	r3, r2
 8005586:	608b      	str	r3, [r1, #8]
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <LL_RCC_GetAHBPrescaler>:
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_GetAHB3Prescaler>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <LL_RCC_GetAPB1Prescaler>:
{
 80055c2:	b480      	push	{r7}
 80055c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <LL_RCC_GetAPB2Prescaler>:
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bc80      	pop	{r7}
 80055ec:	4770      	bx	lr

080055ee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005600:	6013      	str	r3, [r2, #0]
}
 8005602:	bf00      	nop
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800560a:	b480      	push	{r7}
 800560c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800561c:	6013      	str	r3, [r2, #0]
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800562a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005638:	d101      	bne.n	800563e <LL_RCC_PLL_IsReady+0x18>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <LL_RCC_PLL_IsReady+0x1a>
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800566e:	4618      	mov	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0303 	and.w	r3, r3, #3
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80056a2:	b480      	push	{r7}
 80056a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80056a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b4:	d101      	bne.n	80056ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80056d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d8:	d101      	bne.n	80056de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056fa:	d101      	bne.n	8005700 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800570a:	b480      	push	{r7}
 800570c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800571c:	d101      	bne.n	8005722 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e38a      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573e:	f7ff fece 	bl	80054de <LL_RCC_GetSysClkSource>
 8005742:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005744:	f7ff ffa2 	bl	800568c <LL_RCC_PLL_GetMainSource>
 8005748:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80c9 	beq.w	80058ea <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_RCC_OscConfig+0x3e>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	2b0c      	cmp	r3, #12
 8005762:	d17b      	bne.n	800585c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d178      	bne.n	800585c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800576a:	f7ff fe5a 	bl	8005422 <LL_RCC_MSI_IsReady>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_OscConfig+0x54>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e369      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_RCC_OscConfig+0x72>
 8005792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579c:	e006      	b.n	80057ac <HAL_RCC_OscConfig+0x80>
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a6:	091b      	lsrs	r3, r3, #4
 80057a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d222      	bcs.n	80057f6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fd4f 	bl	8006258 <RCC_SetFlashLatencyFromMSIRange>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e347      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ce:	f043 0308 	orr.w	r3, r3, #8
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fe4e 	bl	8005490 <LL_RCC_MSI_SetCalibTrimming>
 80057f4:	e021      	b.n	800583a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005800:	f043 0308 	orr.w	r3, r3, #8
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fe35 	bl	8005490 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fd14 	bl	8006258 <RCC_SetFlashLatencyFromMSIRange>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e30c      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800583a:	f000 fcd5 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 800583e:	4603      	mov	r3, r0
 8005840:	4ab4      	ldr	r2, [pc, #720]	; (8005b14 <HAL_RCC_OscConfig+0x3e8>)
 8005842:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005844:	4bb4      	ldr	r3, [pc, #720]	; (8005b18 <HAL_RCC_OscConfig+0x3ec>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fc f9d3 	bl	8001bf4 <HAL_InitTick>
 800584e:	4603      	mov	r3, r0
 8005850:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005852:	7cfb      	ldrb	r3, [r7, #19]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d047      	beq.n	80058e8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	e2fb      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02c      	beq.n	80058be <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005864:	f7ff fdc1 	bl	80053ea <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005868:	f7fc f9ce 	bl	8001c08 <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005870:	f7fc f9ca 	bl	8001c08 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e2e8      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005882:	f7ff fdce 	bl	8005422 <LL_RCC_MSI_IsReady>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f1      	beq.n	8005870 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005896:	f043 0308 	orr.w	r3, r3, #8
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fdea 	bl	8005490 <LL_RCC_MSI_SetCalibTrimming>
 80058bc:	e015      	b.n	80058ea <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058be:	f7ff fda2 	bl	8005406 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058c2:	f7fc f9a1 	bl	8001c08 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ca:	f7fc f99d 	bl	8001c08 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e2bb      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80058dc:	f7ff fda1 	bl	8005422 <LL_RCC_MSI_IsReady>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f1      	bne.n	80058ca <HAL_RCC_OscConfig+0x19e>
 80058e6:	e000      	b.n	80058ea <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058e8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d05f      	beq.n	80059b6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_OscConfig+0x1dc>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d10d      	bne.n	800591e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d10a      	bne.n	800591e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	f7ff fcdb 	bl	80052c2 <LL_RCC_HSE_IsReady>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d050      	beq.n	80059b4 <HAL_RCC_OscConfig+0x288>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d14c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e29a      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800591e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005930:	4313      	orrs	r3, r2
 8005932:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593c:	d102      	bne.n	8005944 <HAL_RCC_OscConfig+0x218>
 800593e:	f7ff fca4 	bl	800528a <LL_RCC_HSE_Enable>
 8005942:	e00d      	b.n	8005960 <HAL_RCC_OscConfig+0x234>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800594c:	d104      	bne.n	8005958 <HAL_RCC_OscConfig+0x22c>
 800594e:	f7ff fc6f 	bl	8005230 <LL_RCC_HSE_EnableTcxo>
 8005952:	f7ff fc9a 	bl	800528a <LL_RCC_HSE_Enable>
 8005956:	e003      	b.n	8005960 <HAL_RCC_OscConfig+0x234>
 8005958:	f7ff fca5 	bl	80052a6 <LL_RCC_HSE_Disable>
 800595c:	f7ff fc76 	bl	800524c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d012      	beq.n	800598e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fc f94e 	bl	8001c08 <HAL_GetTick>
 800596c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005970:	f7fc f94a 	bl	8001c08 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b64      	cmp	r3, #100	; 0x64
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e268      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005982:	f7ff fc9e 	bl	80052c2 <LL_RCC_HSE_IsReady>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f1      	beq.n	8005970 <HAL_RCC_OscConfig+0x244>
 800598c:	e013      	b.n	80059b6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fc f93b 	bl	8001c08 <HAL_GetTick>
 8005992:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005996:	f7fc f937 	bl	8001c08 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b64      	cmp	r3, #100	; 0x64
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e255      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80059a8:	f7ff fc8b 	bl	80052c2 <LL_RCC_HSE_IsReady>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f1      	bne.n	8005996 <HAL_RCC_OscConfig+0x26a>
 80059b2:	e000      	b.n	80059b6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04b      	beq.n	8005a5a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_OscConfig+0x2a8>
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d113      	bne.n	80059f6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d110      	bne.n	80059f6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059d4:	f7ff fca2 	bl	800531c <LL_RCC_HSI_IsReady>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_RCC_OscConfig+0x2be>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e234      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fca5 	bl	800533e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f4:	e031      	b.n	8005a5a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059fe:	f7ff fc71 	bl	80052e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fc f901 	bl	8001c08 <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a0a:	f7fc f8fd 	bl	8001c08 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e21b      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005a1c:	f7ff fc7e 	bl	800531c <LL_RCC_HSI_IsReady>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f1      	beq.n	8005a0a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fc87 	bl	800533e <LL_RCC_HSI_SetCalibTrimming>
 8005a30:	e013      	b.n	8005a5a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a32:	f7ff fc65 	bl	8005300 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fc f8e7 	bl	8001c08 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fc f8e3 	bl	8001c08 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e201      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a50:	f7ff fc64 	bl	800531c <LL_RCC_HSI_IsReady>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f1      	bne.n	8005a3e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d06e      	beq.n	8005b44 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d056      	beq.n	8005b1c <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8005a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a76:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d031      	beq.n	8005aea <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e1da      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8005aa8:	f7ff fc7e 	bl	80053a8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005aac:	f7fc f8ac 	bl	8001c08 <HAL_GetTick>
 8005ab0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ab4:	f7fc f8a8 	bl	8001c08 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b11      	cmp	r3, #17
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e1c6      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005ac6:	f7ff fc7f 	bl	80053c8 <LL_RCC_LSI_IsReady>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f1      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ad8:	f023 0210 	bic.w	r2, r3, #16
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aea:	f7ff fc4d 	bl	8005388 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fc f88b 	bl	8001c08 <HAL_GetTick>
 8005af2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005af4:	e008      	b.n	8005b08 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af6:	f7fc f887 	bl	8001c08 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b11      	cmp	r3, #17
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e1a5      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005b08:	f7ff fc5e 	bl	80053c8 <LL_RCC_LSI_IsReady>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f1      	beq.n	8005af6 <HAL_RCC_OscConfig+0x3ca>
 8005b12:	e017      	b.n	8005b44 <HAL_RCC_OscConfig+0x418>
 8005b14:	20000000 	.word	0x20000000
 8005b18:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b1c:	f7ff fc44 	bl	80053a8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fc f872 	bl	8001c08 <HAL_GetTick>
 8005b24:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b28:	f7fc f86e 	bl	8001c08 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b11      	cmp	r3, #17
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e18c      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005b3a:	f7ff fc45 	bl	80053c8 <LL_RCC_LSI_IsReady>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f1      	bne.n	8005b28 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80d8 	beq.w	8005d02 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005b52:	f7ff fb5b 	bl	800520c <LL_PWR_IsEnabledBkUpAccess>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d113      	bne.n	8005b84 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b5c:	f7ff fa9a 	bl	8005094 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b60:	f7fc f852 	bl	8001c08 <HAL_GetTick>
 8005b64:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7fc f84e 	bl	8001c08 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e16c      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005b7a:	f7ff fb47 	bl	800520c <LL_PWR_IsEnabledBkUpAccess>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0f1      	beq.n	8005b68 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d07b      	beq.n	8005c84 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b85      	cmp	r3, #133	; 0x85
 8005b92:	d003      	beq.n	8005b9c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b05      	cmp	r3, #5
 8005b9a:	d109      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba8:	f043 0304 	orr.w	r3, r3, #4
 8005bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb0:	f7fc f82a 	bl	8001c08 <HAL_GetTick>
 8005bb4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bcc:	f7fc f81c 	bl	8001c08 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e138      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005be2:	f7ff fbc0 	bl	8005366 <LL_RCC_LSE_IsReady>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0ef      	beq.n	8005bcc <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	2b81      	cmp	r3, #129	; 0x81
 8005bf2:	d003      	beq.n	8005bfc <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b85      	cmp	r3, #133	; 0x85
 8005bfa:	d121      	bne.n	8005c40 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fc f804 	bl	8001c08 <HAL_GetTick>
 8005c00:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c18:	f7fb fff6 	bl	8001c08 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e112      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0ec      	beq.n	8005c18 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005c3e:	e060      	b.n	8005d02 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fb ffe2 	bl	8001c08 <HAL_GetTick>
 8005c44:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fb ffd4 	bl	8001c08 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e0f0      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ec      	bne.n	8005c5c <HAL_RCC_OscConfig+0x530>
 8005c82:	e03e      	b.n	8005d02 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c84:	f7fb ffc0 	bl	8001c08 <HAL_GetTick>
 8005c88:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fb ffb2 	bl	8001c08 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e0ce      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ec      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc6:	f7fb ff9f 	bl	8001c08 <HAL_GetTick>
 8005cca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fb ff91 	bl	8001c08 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e0ad      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005cf8:	f7ff fb35 	bl	8005366 <LL_RCC_LSE_IsReady>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ef      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80a3 	beq.w	8005e52 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2b0c      	cmp	r3, #12
 8005d10:	d076      	beq.n	8005e00 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d14b      	bne.n	8005db2 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1a:	f7ff fc76 	bl	800560a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fb ff73 	bl	8001c08 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d26:	f7fb ff6f 	bl	8001c08 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b0a      	cmp	r3, #10
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e08d      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005d38:	f7ff fc75 	bl	8005626 <LL_RCC_PLL_IsReady>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f1      	bne.n	8005d26 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	4b44      	ldr	r3, [pc, #272]	; (8005e5c <HAL_RCC_OscConfig+0x730>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d54:	4311      	orrs	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d5a:	0212      	lsls	r2, r2, #8
 8005d5c:	4311      	orrs	r1, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d62:	4311      	orrs	r1, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d68:	4311      	orrs	r1, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d78:	f7ff fc39 	bl	80055ee <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fb ff3c 	bl	8001c08 <HAL_GetTick>
 8005d90:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d94:	f7fb ff38 	bl	8001c08 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b0a      	cmp	r3, #10
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e056      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005da6:	f7ff fc3e 	bl	8005626 <LL_RCC_PLL_IsReady>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0f1      	beq.n	8005d94 <HAL_RCC_OscConfig+0x668>
 8005db0:	e04f      	b.n	8005e52 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db2:	f7ff fc2a 	bl	800560a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd8:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fb ff15 	bl	8001c08 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de2:	f7fb ff11 	bl	8001c08 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b0a      	cmp	r3, #10
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e02f      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005df4:	f7ff fc17 	bl	8005626 <LL_RCC_PLL_IsReady>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f1      	bne.n	8005de2 <HAL_RCC_OscConfig+0x6b6>
 8005dfe:	e028      	b.n	8005e52 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e023      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f003 0203 	and.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d115      	bne.n	8005e4e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d10e      	bne.n	8005e4e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d106      	bne.n	8005e4e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	11c1808c 	.word	0x11c1808c

08005e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e10f      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e74:	4b89      	ldr	r3, [pc, #548]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d91b      	bls.n	8005eba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e82:	4b86      	ldr	r3, [pc, #536]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 0207 	bic.w	r2, r3, #7
 8005e8a:	4984      	ldr	r1, [pc, #528]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e92:	f7fb feb9 	bl	8001c08 <HAL_GetTick>
 8005e96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e9a:	f7fb feb5 	bl	8001c08 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e0f3      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eac:	4b7b      	ldr	r3, [pc, #492]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d1ef      	bne.n	8005e9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d016      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fb12 	bl	80054f4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ed0:	f7fb fe9a 	bl	8001c08 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ed8:	f7fb fe96 	bl	8001c08 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0d4      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005eea:	f7ff fbda 	bl	80056a2 <LL_RCC_IsActiveFlag_HPRE>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f1      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fb08 	bl	800551a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f0a:	f7fb fe7d 	bl	8001c08 <HAL_GetTick>
 8005f0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f12:	f7fb fe79 	bl	8001c08 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e0b7      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005f24:	f7ff fbce 	bl	80056c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f1      	beq.n	8005f12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d016      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fb01 	bl	8005546 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f44:	f7fb fe60 	bl	8001c08 <HAL_GetTick>
 8005f48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f4c:	f7fb fe5c 	bl	8001c08 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e09a      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005f5e:	f7ff fbc3 	bl	80056e8 <LL_RCC_IsActiveFlag_PPRE1>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f1      	beq.n	8005f4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff faf6 	bl	800556c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f80:	f7fb fe42 	bl	8001c08 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f88:	f7fb fe3e 	bl	8001c08 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e07c      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f9a:	f7ff fbb6 	bl	800570a <LL_RCC_IsActiveFlag_PPRE2>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0f1      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d043      	beq.n	8006038 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005fb8:	f7ff f983 	bl	80052c2 <LL_RCC_HSE_IsReady>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11e      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e066      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005fce:	f7ff fb2a 	bl	8005626 <LL_RCC_PLL_IsReady>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d113      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e05b      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005fe4:	f7ff fa1d 	bl	8005422 <LL_RCC_MSI_IsReady>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e050      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ff2:	f7ff f993 	bl	800531c <LL_RCC_HSI_IsReady>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e049      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fa57 	bl	80054b8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600a:	f7fb fdfd 	bl	8001c08 <HAL_GetTick>
 800600e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006010:	e00a      	b.n	8006028 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006012:	f7fb fdf9 	bl	8001c08 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e035      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006028:	f7ff fa59 	bl	80054de <LL_RCC_GetSysClkSource>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	429a      	cmp	r2, r3
 8006036:	d1ec      	bne.n	8006012 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006038:	4b18      	ldr	r3, [pc, #96]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d21b      	bcs.n	800607e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006046:	4b15      	ldr	r3, [pc, #84]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 0207 	bic.w	r2, r3, #7
 800604e:	4913      	ldr	r1, [pc, #76]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006056:	f7fb fdd7 	bl	8001c08 <HAL_GetTick>
 800605a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605c:	e008      	b.n	8006070 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800605e:	f7fb fdd3 	bl	8001c08 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e011      	b.n	8006094 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_RCC_ClockConfig+0x23c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d1ef      	bne.n	800605e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800607e:	f000 f8b3 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 8006082:	4603      	mov	r3, r0
 8006084:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8006086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006088:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fb fdb1 	bl	8001bf4 <HAL_InitTick>
 8006092:	4603      	mov	r3, r0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58004000 	.word	0x58004000
 80060a0:	20000000 	.word	0x20000000
 80060a4:	20000034 	.word	0x20000034

080060a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060b6:	f7ff fa12 	bl	80054de <LL_RCC_GetSysClkSource>
 80060ba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060bc:	f7ff fae6 	bl	800568c <LL_RCC_PLL_GetMainSource>
 80060c0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d139      	bne.n	8006142 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d136      	bne.n	8006142 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80060d4:	f7ff f9b5 	bl	8005442 <LL_RCC_MSI_IsEnabledRangeSelect>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d115      	bne.n	800610a <HAL_RCC_GetSysClockFreq+0x62>
 80060de:	f7ff f9b0 	bl	8005442 <LL_RCC_MSI_IsEnabledRangeSelect>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <HAL_RCC_GetSysClockFreq+0x4e>
 80060e8:	f7ff f9bb 	bl	8005462 <LL_RCC_MSI_GetRange>
 80060ec:	4603      	mov	r3, r0
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	e005      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x5a>
 80060f6:	f7ff f9bf 	bl	8005478 <LL_RCC_MSI_GetRangeAfterStandby>
 80060fa:	4603      	mov	r3, r0
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	4a36      	ldr	r2, [pc, #216]	; (80061dc <HAL_RCC_GetSysClockFreq+0x134>)
 8006104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006108:	e014      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x8c>
 800610a:	f7ff f99a 	bl	8005442 <LL_RCC_MSI_IsEnabledRangeSelect>
 800610e:	4603      	mov	r3, r0
 8006110:	2b01      	cmp	r3, #1
 8006112:	d106      	bne.n	8006122 <HAL_RCC_GetSysClockFreq+0x7a>
 8006114:	f7ff f9a5 	bl	8005462 <LL_RCC_MSI_GetRange>
 8006118:	4603      	mov	r3, r0
 800611a:	091b      	lsrs	r3, r3, #4
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	e005      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x86>
 8006122:	f7ff f9a9 	bl	8005478 <LL_RCC_MSI_GetRangeAfterStandby>
 8006126:	4603      	mov	r3, r0
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <HAL_RCC_GetSysClockFreq+0x134>)
 8006130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006134:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d115      	bne.n	8006168 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006140:	e012      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b04      	cmp	r3, #4
 8006146:	d102      	bne.n	800614e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006148:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e00c      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d109      	bne.n	8006168 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006154:	f7ff f888 	bl	8005268 <LL_RCC_HSE_IsEnabledDiv2>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d102      	bne.n	8006164 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e001      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006164:	4b1f      	ldr	r3, [pc, #124]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006166:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006168:	f7ff f9b9 	bl	80054de <LL_RCC_GetSysClkSource>
 800616c:	4603      	mov	r3, r0
 800616e:	2b0c      	cmp	r3, #12
 8006170:	d12f      	bne.n	80061d2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006172:	f7ff fa8b 	bl	800568c <LL_RCC_PLL_GetMainSource>
 8006176:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d003      	beq.n	8006186 <HAL_RCC_GetSysClockFreq+0xde>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b03      	cmp	r3, #3
 8006182:	d003      	beq.n	800618c <HAL_RCC_GetSysClockFreq+0xe4>
 8006184:	e00d      	b.n	80061a2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006186:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006188:	60fb      	str	r3, [r7, #12]
        break;
 800618a:	e00d      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800618c:	f7ff f86c 	bl	8005268 <LL_RCC_HSE_IsEnabledDiv2>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d102      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006196:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006198:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800619a:	e005      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800619e:	60fb      	str	r3, [r7, #12]
        break;
 80061a0:	e002      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	60fb      	str	r3, [r7, #12]
        break;
 80061a6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80061a8:	f7ff fa4e 	bl	8005648 <LL_RCC_PLL_GetN>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	fb03 f402 	mul.w	r4, r3, r2
 80061b4:	f7ff fa5f 	bl	8005676 <LL_RCC_PLL_GetDivider>
 80061b8:	4603      	mov	r3, r0
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	3301      	adds	r3, #1
 80061be:	fbb4 f4f3 	udiv	r4, r4, r3
 80061c2:	f7ff fa4d 	bl	8005660 <LL_RCC_PLL_GetR>
 80061c6:	4603      	mov	r3, r0
 80061c8:	0f5b      	lsrs	r3, r3, #29
 80061ca:	3301      	adds	r3, #1
 80061cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80061d0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd90      	pop	{r4, r7, pc}
 80061dc:	0801b108 	.word	0x0801b108
 80061e0:	00f42400 	.word	0x00f42400
 80061e4:	01e84800 	.word	0x01e84800

080061e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e8:	b598      	push	{r3, r4, r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80061ec:	f7ff ff5c 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 80061f0:	4604      	mov	r4, r0
 80061f2:	f7ff f9ce 	bl	8005592 <LL_RCC_GetAHBPrescaler>
 80061f6:	4603      	mov	r3, r0
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	4a03      	ldr	r2, [pc, #12]	; (800620c <HAL_RCC_GetHCLKFreq+0x24>)
 8006200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006204:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	bd98      	pop	{r3, r4, r7, pc}
 800620c:	0801b0a8 	.word	0x0801b0a8

08006210 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b598      	push	{r3, r4, r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006214:	f7ff ffe8 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 8006218:	4604      	mov	r4, r0
 800621a:	f7ff f9d2 	bl	80055c2 <LL_RCC_GetAPB1Prescaler>
 800621e:	4603      	mov	r3, r0
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	4a03      	ldr	r2, [pc, #12]	; (8006230 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006228:	fa24 f303 	lsr.w	r3, r4, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd98      	pop	{r3, r4, r7, pc}
 8006230:	0801b0e8 	.word	0x0801b0e8

08006234 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006234:	b598      	push	{r3, r4, r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006238:	f7ff ffd6 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 800623c:	4604      	mov	r4, r0
 800623e:	f7ff f9cb 	bl	80055d8 <LL_RCC_GetAPB2Prescaler>
 8006242:	4603      	mov	r3, r0
 8006244:	0adb      	lsrs	r3, r3, #11
 8006246:	4a03      	ldr	r2, [pc, #12]	; (8006254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd98      	pop	{r3, r4, r7, pc}
 8006254:	0801b0e8 	.word	0x0801b0e8

08006258 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	4a10      	ldr	r2, [pc, #64]	; (80062ac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800626e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006270:	f7ff f99a 	bl	80055a8 <LL_RCC_GetAHB3Prescaler>
 8006274:	4603      	mov	r3, r0
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	4a0c      	ldr	r2, [pc, #48]	; (80062b0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	0c9c      	lsrs	r4, r3, #18
 8006294:	f7fe ff40 	bl	8005118 <HAL_PWREx_GetVoltageRange>
 8006298:	4603      	mov	r3, r0
 800629a:	4619      	mov	r1, r3
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f80b 	bl	80062b8 <RCC_SetFlashLatency>
 80062a2:	4603      	mov	r3, r0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd90      	pop	{r4, r7, pc}
 80062ac:	0801b108 	.word	0x0801b108
 80062b0:	0801b0a8 	.word	0x0801b0a8
 80062b4:	431bde83 	.word	0x431bde83

080062b8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80062c2:	4a3c      	ldr	r2, [pc, #240]	; (80063b4 <RCC_SetFlashLatency+0xfc>)
 80062c4:	f107 0320 	add.w	r3, r7, #32
 80062c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062cc:	6018      	str	r0, [r3, #0]
 80062ce:	3304      	adds	r3, #4
 80062d0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80062d2:	4a39      	ldr	r2, [pc, #228]	; (80063b8 <RCC_SetFlashLatency+0x100>)
 80062d4:	f107 0318 	add.w	r3, r7, #24
 80062d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062dc:	6018      	str	r0, [r3, #0]
 80062de:	3304      	adds	r3, #4
 80062e0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80062e2:	4a36      	ldr	r2, [pc, #216]	; (80063bc <RCC_SetFlashLatency+0x104>)
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80062ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80062ee:	2300      	movs	r3, #0
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f8:	d11d      	bne.n	8006336 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	633b      	str	r3, [r7, #48]	; 0x30
 80062fe:	e016      	b.n	800632e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006308:	4413      	add	r3, r2
 800630a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800630e:	461a      	mov	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4293      	cmp	r3, r2
 8006314:	d808      	bhi.n	8006328 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800631e:	4413      	add	r3, r2
 8006320:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006326:	e023      	b.n	8006370 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	3301      	adds	r3, #1
 800632c:	633b      	str	r3, [r7, #48]	; 0x30
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b02      	cmp	r3, #2
 8006332:	d9e5      	bls.n	8006300 <RCC_SetFlashLatency+0x48>
 8006334:	e01c      	b.n	8006370 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006336:	2300      	movs	r3, #0
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633a:	e016      	b.n	800636a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006344:	4413      	add	r3, r2
 8006346:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4293      	cmp	r3, r2
 8006350:	d808      	bhi.n	8006364 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800635a:	4413      	add	r3, r2
 800635c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006362:	e005      	b.n	8006370 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	3301      	adds	r3, #1
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2b02      	cmp	r3, #2
 800636e:	d9e5      	bls.n	800633c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006370:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <RCC_SetFlashLatency+0x108>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 0207 	bic.w	r2, r3, #7
 8006378:	4911      	ldr	r1, [pc, #68]	; (80063c0 <RCC_SetFlashLatency+0x108>)
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006380:	f7fb fc42 	bl	8001c08 <HAL_GetTick>
 8006384:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006386:	e008      	b.n	800639a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006388:	f7fb fc3e 	bl	8001c08 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e007      	b.n	80063aa <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <RCC_SetFlashLatency+0x108>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d1ef      	bne.n	8006388 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3738      	adds	r7, #56	; 0x38
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	0801a8f4 	.word	0x0801a8f4
 80063b8:	0801a8fc 	.word	0x0801a8fc
 80063bc:	0801a904 	.word	0x0801a904
 80063c0:	58004000 	.word	0x58004000

080063c4 <LL_RCC_LSE_IsReady>:
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80063c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d101      	bne.n	80063dc <LL_RCC_LSE_IsReady+0x18>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <LL_RCC_LSE_IsReady+0x1a>
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bc80      	pop	{r7}
 80063e4:	4770      	bx	lr

080063e6 <LL_RCC_SetUSARTClockSource>:
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	0c1b      	lsrs	r3, r3, #16
 80063fa:	43db      	mvns	r3, r3
 80063fc:	401a      	ands	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <LL_RCC_SetI2SClockSource>:
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800641e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800642a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <LL_RCC_SetLPUARTClockSource>:
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <LL_RCC_SetI2CClockSource>:
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006476:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006482:	43db      	mvns	r3, r3
 8006484:	401a      	ands	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800648e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006492:	4313      	orrs	r3, r2
 8006494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <LL_RCC_SetLPTIMClockSource>:
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80064aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <LL_RCC_SetRNGClockSource>:
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80064e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr

080064fe <LL_RCC_SetADCClockSource>:
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <LL_RCC_SetRTCClockSource>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800653c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr

08006552 <LL_RCC_GetRTCClockSource>:
{
 8006552:	b480      	push	{r7}
 8006554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006562:	4618      	mov	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <LL_RCC_ForceBackupDomainReset>:
{
 800656a:	b480      	push	{r7}
 800656c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800657a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <LL_RCC_ReleaseBackupDomainReset>:
{
 800658a:	b480      	push	{r7}
 800658c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800658e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800659a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800659e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
	...

080065ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80065b8:	2300      	movs	r3, #0
 80065ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80065bc:	2300      	movs	r3, #0
 80065be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d058      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80065cc:	f7fe fd62 	bl	8005094 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065d0:	f7fb fb1a 	bl	8001c08 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80065d6:	e009      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065d8:	f7fb fb16 	bl	8001c08 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d902      	bls.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	74fb      	strb	r3, [r7, #19]
        break;
 80065ea:	e006      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80065ec:	4b7b      	ldr	r3, [pc, #492]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f8:	d1ee      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80065fa:	7cfb      	ldrb	r3, [r7, #19]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d13c      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006600:	f7ff ffa7 	bl	8006552 <LL_RCC_GetRTCClockSource>
 8006604:	4602      	mov	r2, r0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660a:	429a      	cmp	r2, r3
 800660c:	d00f      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800661c:	f7ff ffa5 	bl	800656a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006620:	f7ff ffb3 	bl	800658a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d014      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fb fae6 	bl	8001c08 <HAL_GetTick>
 800663c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800663e:	e00b      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006640:	f7fb fae2 	bl	8001c08 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	; 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d902      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	74fb      	strb	r3, [r7, #19]
            break;
 8006656:	e004      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006658:	f7ff feb4 	bl	80063c4 <LL_RCC_LSE_IsReady>
 800665c:	4603      	mov	r3, r0
 800665e:	2b01      	cmp	r3, #1
 8006660:	d1ee      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff ff5b 	bl	8006528 <LL_RCC_SetRTCClockSource>
 8006672:	e004      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	74bb      	strb	r3, [r7, #18]
 8006678:	e001      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	7cfb      	ldrb	r3, [r7, #19]
 800667c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fea9 	bl	80063e6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d004      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fe9e 	bl	80063e6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fec0 	bl	8006440 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fee6 	bl	80064a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fedb 	bl	80064a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d004      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fed0 	bl	80064a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff fea9 	bl	800646a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fe9e 	bl	800646a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fe93 	bl	800646a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b00      	cmp	r3, #0
 800674e:	d011      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fe5e 	bl	8006416 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006762:	d107      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800676e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006772:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fea5 	bl	80064d4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d107      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800679c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d011      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fea3 	bl	80064fe <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c0:	d107      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80067d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	58000400 	.word	0x58000400

080067e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d068      	beq.n	80068c4 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fa ff4e 	bl	80016a8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006814:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006816:	22ca      	movs	r2, #202	; 0xca
 8006818:	625a      	str	r2, [r3, #36]	; 0x24
 800681a:	4b2d      	ldr	r3, [pc, #180]	; (80068d0 <HAL_RTC_Init+0xf0>)
 800681c:	2253      	movs	r2, #83	; 0x53
 800681e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa0f 	bl	8006c44 <RTC_EnterInitMode>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d13f      	bne.n	80068b0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006830:	4b27      	ldr	r3, [pc, #156]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006836:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800683a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006840:	4b23      	ldr	r3, [pc, #140]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6859      	ldr	r1, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	4319      	orrs	r1, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	430b      	orrs	r3, r1
 8006854:	491e      	ldr	r1, [pc, #120]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006856:	4313      	orrs	r3, r2
 8006858:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	491a      	ldr	r1, [pc, #104]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006866:	4313      	orrs	r3, r2
 8006868:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800686a:	4b19      	ldr	r3, [pc, #100]	; (80068d0 <HAL_RTC_Init+0xf0>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	430b      	orrs	r3, r1
 800687c:	4914      	ldr	r1, [pc, #80]	; (80068d0 <HAL_RTC_Init+0xf0>)
 800687e:	4313      	orrs	r3, r2
 8006880:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa12 	bl	8006cac <RTC_ExitInitMode>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10e      	bne.n	80068b0 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <HAL_RTC_Init+0xf0>)
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a19      	ldr	r1, [r3, #32]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	4319      	orrs	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	430b      	orrs	r3, r1
 80068aa:	4909      	ldr	r1, [pc, #36]	; (80068d0 <HAL_RTC_Init+0xf0>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <HAL_RTC_Init+0xf0>)
 80068b2:	22ff      	movs	r2, #255	; 0xff
 80068b4:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d103      	bne.n	80068c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40002800 	.word	0x40002800

080068d4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80068d4:	b590      	push	{r4, r7, lr}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_RTC_SetAlarm_IT+0x1e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e0f3      	b.n	8006ada <HAL_RTC_SetAlarm_IT+0x206>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006902:	4b78      	ldr	r3, [pc, #480]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006912:	d06a      	beq.n	80069ea <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d13a      	bne.n	8006990 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800691a:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f9f5 	bl	8006d28 <RTC_ByteToBcd2>
 800693e:	4603      	mov	r3, r0
 8006940:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f9ee 	bl	8006d28 <RTC_ByteToBcd2>
 800694c:	4603      	mov	r3, r0
 800694e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006950:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	789b      	ldrb	r3, [r3, #2]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f9e6 	bl	8006d28 <RTC_ByteToBcd2>
 800695c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800695e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	78db      	ldrb	r3, [r3, #3]
 8006966:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006968:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f9d8 	bl	8006d28 <RTC_ByteToBcd2>
 8006978:	4603      	mov	r3, r0
 800697a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800697c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006984:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e02c      	b.n	80069ea <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006998:	d00d      	beq.n	80069b6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069a2:	d008      	beq.n	80069b6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80069a4:	4b4f      	ldr	r3, [pc, #316]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069c2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80069c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	78db      	ldrb	r3, [r3, #3]
 80069ce:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80069d0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069d8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80069da:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80069e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069ea:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 80069ec:	22ca      	movs	r2, #202	; 0xca
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24
 80069f0:	4b3c      	ldr	r3, [pc, #240]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 80069f2:	2253      	movs	r2, #83	; 0x53
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fe:	d12c      	bne.n	8006a5a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006a00:	4b38      	ldr	r3, [pc, #224]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4a37      	ldr	r2, [pc, #220]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a0a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a0c:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a18:	d107      	bne.n	8006a2a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	4930      	ldr	r1, [pc, #192]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	644b      	str	r3, [r1, #68]	; 0x44
 8006a28:	e006      	b.n	8006a38 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006a2a:	4a2e      	ldr	r2, [pc, #184]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006a30:	4a2c      	ldr	r2, [pc, #176]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	f043 0201 	orr.w	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006a4c:	4b25      	ldr	r3, [pc, #148]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	4a24      	ldr	r2, [pc, #144]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a52:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006a56:	6193      	str	r3, [r2, #24]
 8006a58:	e02b      	b.n	8006ab2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006a5a:	4b22      	ldr	r3, [pc, #136]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	4a21      	ldr	r2, [pc, #132]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a60:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006a64:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a66:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a68:	2202      	movs	r2, #2
 8006a6a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a72:	d107      	bne.n	8006a84 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4919      	ldr	r1, [pc, #100]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a82:	e006      	b.n	8006a92 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006a84:	4a17      	ldr	r2, [pc, #92]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006a8a:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006a92:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	f043 0202 	orr.w	r2, r3, #2
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	4a0e      	ldr	r2, [pc, #56]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006aac:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006ab0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab8:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ac4:	22ff      	movs	r2, #255	; 0xff
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd90      	pop	{r4, r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40002800 	.word	0x40002800
 8006ae8:	58000800 	.word	0x58000800

08006aec <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_RTC_DeactivateAlarm+0x18>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e048      	b.n	8006b96 <HAL_RTC_DeactivateAlarm+0xaa>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b14:	4b22      	ldr	r3, [pc, #136]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b16:	22ca      	movs	r2, #202	; 0xca
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
 8006b1a:	4b21      	ldr	r3, [pc, #132]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b1c:	2253      	movs	r2, #83	; 0x53
 8006b1e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b26:	d115      	bne.n	8006b54 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006b28:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b32:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006b34:	4b1a      	ldr	r3, [pc, #104]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b3e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	f023 0201 	bic.w	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006b4c:	4b14      	ldr	r3, [pc, #80]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b52:	e014      	b.n	8006b7e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006b54:	4b12      	ldr	r3, [pc, #72]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b5a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006b5e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	f023 0202 	bic.w	r2, r3, #2
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr
 8006ba0:	40002800 	.word	0x40002800

08006ba4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006bae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fb faab 	bl	8002124 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006bda:	2202      	movs	r2, #2
 8006bdc:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f94a 	bl	8006e78 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40002800 	.word	0x40002800

08006bf8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <HAL_RTC_WaitForSynchro+0x48>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a0e      	ldr	r2, [pc, #56]	; (8006c40 <HAL_RTC_WaitForSynchro+0x48>)
 8006c06:	f023 0320 	bic.w	r3, r3, #32
 8006c0a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006c0c:	f7fa fffc 	bl	8001c08 <HAL_GetTick>
 8006c10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006c12:	e009      	b.n	8006c28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c14:	f7fa fff8 	bl	8001c08 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c22:	d901      	bls.n	8006c28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e006      	b.n	8006c36 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_RTC_WaitForSynchro+0x48>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0ef      	beq.n	8006c14 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40002800 	.word	0x40002800

08006c44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006c50:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <RTC_EnterInitMode+0x64>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d120      	bne.n	8006c9e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006c5c:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <RTC_EnterInitMode+0x64>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <RTC_EnterInitMode+0x64>)
 8006c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c66:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006c68:	f7fa ffce 	bl	8001c08 <HAL_GetTick>
 8006c6c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c6e:	e00d      	b.n	8006c8c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c70:	f7fa ffca 	bl	8001c08 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7e:	d905      	bls.n	8006c8c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2203      	movs	r2, #3
 8006c88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <RTC_EnterInitMode+0x64>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <RTC_EnterInitMode+0x5a>
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d1e8      	bne.n	8006c70 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40002800 	.word	0x40002800

08006cac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cc2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006cc4:	4b17      	ldr	r3, [pc, #92]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10c      	bne.n	8006cea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff91 	bl	8006bf8 <HAL_RTC_WaitForSynchro>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01e      	beq.n	8006d1a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2203      	movs	r2, #3
 8006ce0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	73fb      	strb	r3, [r7, #15]
 8006ce8:	e017      	b.n	8006d1a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	4a0d      	ldr	r2, [pc, #52]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006cf0:	f023 0320 	bic.w	r3, r3, #32
 8006cf4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff ff7e 	bl	8006bf8 <HAL_RTC_WaitForSynchro>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2203      	movs	r2, #3
 8006d06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	4a04      	ldr	r2, [pc, #16]	; (8006d24 <RTC_ExitInitMode+0x78>)
 8006d14:	f043 0320 	orr.w	r3, r3, #32
 8006d18:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	40002800 	.word	0x40002800

08006d28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006d3a:	e005      	b.n	8006d48 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	3b0a      	subs	r3, #10
 8006d46:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006d48:	7afb      	ldrb	r3, [r7, #11]
 8006d4a:	2b09      	cmp	r3, #9
 8006d4c:	d8f6      	bhi.n	8006d3c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	b2db      	uxtb	r3, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_RTCEx_EnableBypassShadow+0x16>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e01f      	b.n	8006dbe <HAL_RTCEx_EnableBypassShadow+0x56>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006d90:	22ca      	movs	r2, #202	; 0xca
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006d96:	2253      	movs	r2, #83	; 0x53
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006da0:	f043 0320 	orr.w	r3, r3, #32
 8006da4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006da8:	22ff      	movs	r2, #255	; 0xff
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	40002800 	.word	0x40002800

08006dcc <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e027      	b.n	8006e32 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2202      	movs	r2, #2
 8006dee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006df2:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006df4:	22ca      	movs	r2, #202	; 0xca
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
 8006df8:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006dfa:	2253      	movs	r2, #83	; 0x53
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	; (8006e3c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e08:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e10:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006e1c:	22ff      	movs	r2, #255	; 0xff
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	40002800 	.word	0x40002800
 8006e40:	58000800 	.word	0x58000800

08006e44 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006e5a:	2240      	movs	r2, #64	; 0x40
 8006e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fb f96a 	bl	8002138 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40002800 	.word	0x40002800

08006e78 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
	...

08006e8c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006e9a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	4000b100 	.word	0x4000b100

08006ebc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006ec6:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <HAL_RTCEx_BKUPRead+0x28>)
 8006ec8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	4000b100 	.word	0x4000b100

08006ee8 <LL_PWR_SetRadioBusyTrigger>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ef8:	4904      	ldr	r1, [pc, #16]	; (8006f0c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	608b      	str	r3, [r1, #8]
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	58000400 	.word	0x58000400

08006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1a:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr
 8006f2c:	58000400 	.word	0x58000400

08006f30 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f34:	4b05      	ldr	r3, [pc, #20]	; (8006f4c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3a:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr
 8006f4c:	58000400 	.word	0x58000400

08006f50 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f5a:	619a      	str	r2, [r3, #24]
}
 8006f5c:	bf00      	nop
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr
 8006f64:	58000400 	.word	0x58000400

08006f68 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d101      	bne.n	8006f7c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	58000400 	.word	0x58000400

08006f8c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b04      	cmp	r3, #4
 8006f9a:	d101      	bne.n	8006fa0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	58000400 	.word	0x58000400

08006fb0 <LL_RCC_RF_DisableReset>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <LL_RCC_IsRFUnderReset>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe4:	d101      	bne.n	8006fea <LL_RCC_IsRFUnderReset+0x1a>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e000      	b.n	8006fec <LL_RCC_IsRFUnderReset+0x1c>
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bc80      	pop	{r7}
 8006ff2:	4770      	bx	lr

08006ff4 <LL_EXTI_EnableIT_32_63>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <LL_EXTI_EnableIT_32_63+0x24>)
 8006ffe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007002:	4905      	ldr	r1, [pc, #20]	; (8007018 <LL_EXTI_EnableIT_32_63+0x24>)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	58000800 	.word	0x58000800

0800701c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	73fb      	strb	r3, [r7, #15]
    return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	e04b      	b.n	80070ca <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	799b      	ldrb	r3, [r3, #6]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fa fc36 	bl	80018b8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007052:	f7ff ffad 	bl	8006fb0 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007056:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <HAL_SUBGHZ_Init+0xb8>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	4613      	mov	r3, r2
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	0cdb      	lsrs	r3, r3, #19
 8007064:	2264      	movs	r2, #100	; 0x64
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	609a      	str	r2, [r3, #8]
      break;
 800707c:	e007      	b.n	800708e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	3b01      	subs	r3, #1
 8007082:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007084:	f7ff ffa4 	bl	8006fd0 <LL_RCC_IsRFUnderReset>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1ee      	bne.n	800706c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800708e:	f7ff ff3f 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007092:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007096:	f7ff ffad 	bl	8006ff4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800709a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800709e:	f7ff ff23 	bl	8006ee8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80070a2:	f7ff ff55 	bl	8006f50 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 faad 	bl	8007610 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	719a      	strb	r2, [r3, #6]

  return status;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000000 	.word	0x20000000

080070d8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	461a      	mov	r2, r3
 80070e4:	460b      	mov	r3, r1
 80070e6:	817b      	strh	r3, [r7, #10]
 80070e8:	4613      	mov	r3, r2
 80070ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	799b      	ldrb	r3, [r3, #6]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d14a      	bne.n	800718c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d101      	bne.n	8007102 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80070fe:	2302      	movs	r3, #2
 8007100:	e045      	b.n	800718e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2202      	movs	r2, #2
 800710c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fb4c 	bl	80077ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007114:	f7ff ff0c 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007118:	210d      	movs	r1, #13
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fa98 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007120:	897b      	ldrh	r3, [r7, #10]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	b29b      	uxth	r3, r3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	4619      	mov	r1, r3
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fa90 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007130:	897b      	ldrh	r3, [r7, #10]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	4619      	mov	r1, r3
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fa8a 	bl	8007650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	82bb      	strh	r3, [r7, #20]
 8007140:	e00a      	b.n	8007158 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007142:	8abb      	ldrh	r3, [r7, #20]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4413      	add	r3, r2
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa7f 	bl	8007650 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007152:	8abb      	ldrh	r3, [r7, #20]
 8007154:	3301      	adds	r3, #1
 8007156:	82bb      	strh	r3, [r7, #20]
 8007158:	8aba      	ldrh	r2, [r7, #20]
 800715a:	893b      	ldrh	r3, [r7, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3f0      	bcc.n	8007142 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007160:	f7ff fed6 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fb45 	bl	80077f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
 8007176:	e001      	b.n	800717c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	715a      	strb	r2, [r3, #5]

    return status;
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	e000      	b.n	800718e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b088      	sub	sp, #32
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	461a      	mov	r2, r3
 80071a2:	460b      	mov	r3, r1
 80071a4:	817b      	strh	r3, [r7, #10]
 80071a6:	4613      	mov	r3, r2
 80071a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	799b      	ldrb	r3, [r3, #6]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d14a      	bne.n	800724e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	795b      	ldrb	r3, [r3, #5]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e045      	b.n	8007250 <HAL_SUBGHZ_ReadRegisters+0xba>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 faee 	bl	80077ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80071d0:	f7ff feae 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80071d4:	211d      	movs	r1, #29
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fa3a 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80071dc:	897b      	ldrh	r3, [r7, #10]
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	4619      	mov	r1, r3
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fa32 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80071ec:	897b      	ldrh	r3, [r7, #10]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fa2c 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fa28 	bl	8007650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007200:	2300      	movs	r3, #0
 8007202:	82fb      	strh	r3, [r7, #22]
 8007204:	e009      	b.n	800721a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007206:	69b9      	ldr	r1, [r7, #24]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fa77 	bl	80076fc <SUBGHZSPI_Receive>
      pData++;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	3301      	adds	r3, #1
 8007212:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007214:	8afb      	ldrh	r3, [r7, #22]
 8007216:	3301      	adds	r3, #1
 8007218:	82fb      	strh	r3, [r7, #22]
 800721a:	8afa      	ldrh	r2, [r7, #22]
 800721c:	893b      	ldrh	r3, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	d3f1      	bcc.n	8007206 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007222:	f7ff fe75 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 fae4 	bl	80077f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e001      	b.n	800723e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	715a      	strb	r2, [r3, #5]

    return status;
 800724a:	7ffb      	ldrb	r3, [r7, #31]
 800724c:	e000      	b.n	8007250 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800724e:	2302      	movs	r3, #2
  }
}
 8007250:	4618      	mov	r0, r3
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	461a      	mov	r2, r3
 8007264:	460b      	mov	r3, r1
 8007266:	72fb      	strb	r3, [r7, #11]
 8007268:	4613      	mov	r3, r2
 800726a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	799b      	ldrb	r3, [r3, #6]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b01      	cmp	r3, #1
 8007274:	d14a      	bne.n	800730c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	795b      	ldrb	r3, [r3, #5]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800727e:	2302      	movs	r3, #2
 8007280:	e045      	b.n	800730e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fa8f 	bl	80077ac <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	2b84      	cmp	r3, #132	; 0x84
 8007292:	d002      	beq.n	800729a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	2b94      	cmp	r3, #148	; 0x94
 8007298:	d103      	bne.n	80072a2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	711a      	strb	r2, [r3, #4]
 80072a0:	e002      	b.n	80072a8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072a8:	f7ff fe42 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f9cd 	bl	8007650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	82bb      	strh	r3, [r7, #20]
 80072ba:	e00a      	b.n	80072d2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80072bc:	8abb      	ldrh	r3, [r7, #20]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4619      	mov	r1, r3
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f9c2 	bl	8007650 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072cc:	8abb      	ldrh	r3, [r7, #20]
 80072ce:	3301      	adds	r3, #1
 80072d0:	82bb      	strh	r3, [r7, #20]
 80072d2:	8aba      	ldrh	r2, [r7, #20]
 80072d4:	893b      	ldrh	r3, [r7, #8]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d3f0      	bcc.n	80072bc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072da:	f7ff fe19 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	2b84      	cmp	r3, #132	; 0x84
 80072e2:	d002      	beq.n	80072ea <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fa85 	bl	80077f4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
 80072f6:	e001      	b.n	80072fc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	715a      	strb	r2, [r3, #5]

    return status;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	e000      	b.n	800730e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	461a      	mov	r2, r3
 8007322:	460b      	mov	r3, r1
 8007324:	72fb      	strb	r3, [r7, #11]
 8007326:	4613      	mov	r3, r2
 8007328:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	799b      	ldrb	r3, [r3, #6]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	d13d      	bne.n	80073b4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	795b      	ldrb	r3, [r3, #5]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007340:	2302      	movs	r3, #2
 8007342:	e038      	b.n	80073b6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 fa2e 	bl	80077ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007350:	f7ff fdee 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	4619      	mov	r1, r3
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f979 	bl	8007650 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800735e:	2100      	movs	r1, #0
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f975 	bl	8007650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007366:	2300      	movs	r3, #0
 8007368:	82fb      	strh	r3, [r7, #22]
 800736a:	e009      	b.n	8007380 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800736c:	69b9      	ldr	r1, [r7, #24]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f9c4 	bl	80076fc <SUBGHZSPI_Receive>
      pData++;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	3301      	adds	r3, #1
 8007378:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800737a:	8afb      	ldrh	r3, [r7, #22]
 800737c:	3301      	adds	r3, #1
 800737e:	82fb      	strh	r3, [r7, #22]
 8007380:	8afa      	ldrh	r2, [r7, #22]
 8007382:	893b      	ldrh	r3, [r7, #8]
 8007384:	429a      	cmp	r2, r3
 8007386:	d3f1      	bcc.n	800736c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007388:	f7ff fdc2 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fa31 	bl	80077f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	77fb      	strb	r3, [r7, #31]
 800739e:	e001      	b.n	80073a4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	715a      	strb	r2, [r3, #5]

    return status;
 80073b0:	7ffb      	ldrb	r3, [r7, #31]
 80073b2:	e000      	b.n	80073b6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b086      	sub	sp, #24
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	461a      	mov	r2, r3
 80073ca:	460b      	mov	r3, r1
 80073cc:	72fb      	strb	r3, [r7, #11]
 80073ce:	4613      	mov	r3, r2
 80073d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	799b      	ldrb	r3, [r3, #6]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d13e      	bne.n	800745a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	795b      	ldrb	r3, [r3, #5]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e039      	b.n	800745c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f9dc 	bl	80077ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073f4:	f7ff fd9c 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80073f8:	210e      	movs	r1, #14
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f928 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	4619      	mov	r1, r3
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f923 	bl	8007650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800740a:	2300      	movs	r3, #0
 800740c:	82bb      	strh	r3, [r7, #20]
 800740e:	e00a      	b.n	8007426 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007410:	8abb      	ldrh	r3, [r7, #20]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4619      	mov	r1, r3
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f918 	bl	8007650 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007420:	8abb      	ldrh	r3, [r7, #20]
 8007422:	3301      	adds	r3, #1
 8007424:	82bb      	strh	r3, [r7, #20]
 8007426:	8aba      	ldrh	r2, [r7, #20]
 8007428:	893b      	ldrh	r3, [r7, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	d3f0      	bcc.n	8007410 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800742e:	f7ff fd6f 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f9de 	bl	80077f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
 8007444:	e001      	b.n	800744a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	715a      	strb	r2, [r3, #5]

    return status;
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	e000      	b.n	800745c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	461a      	mov	r2, r3
 8007470:	460b      	mov	r3, r1
 8007472:	72fb      	strb	r3, [r7, #11]
 8007474:	4613      	mov	r3, r2
 8007476:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	799b      	ldrb	r3, [r3, #6]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b01      	cmp	r3, #1
 8007484:	d141      	bne.n	800750a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	795b      	ldrb	r3, [r3, #5]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800748e:	2302      	movs	r3, #2
 8007490:	e03c      	b.n	800750c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f987 	bl	80077ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800749e:	f7ff fd47 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80074a2:	211e      	movs	r1, #30
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f8d3 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	4619      	mov	r1, r3
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f8ce 	bl	8007650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80074b4:	2100      	movs	r1, #0
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f8ca 	bl	8007650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80074bc:	2300      	movs	r3, #0
 80074be:	82fb      	strh	r3, [r7, #22]
 80074c0:	e009      	b.n	80074d6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80074c2:	69b9      	ldr	r1, [r7, #24]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f919 	bl	80076fc <SUBGHZSPI_Receive>
      pData++;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	3301      	adds	r3, #1
 80074ce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80074d0:	8afb      	ldrh	r3, [r7, #22]
 80074d2:	3301      	adds	r3, #1
 80074d4:	82fb      	strh	r3, [r7, #22]
 80074d6:	8afa      	ldrh	r2, [r7, #22]
 80074d8:	893b      	ldrh	r3, [r7, #8]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d3f1      	bcc.n	80074c2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074de:	f7ff fd17 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f986 	bl	80077f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	77fb      	strb	r3, [r7, #31]
 80074f4:	e001      	b.n	80074fa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	715a      	strb	r2, [r3, #5]

    return status;
 8007506:	7ffb      	ldrb	r3, [r7, #31]
 8007508:	e000      	b.n	800750c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800750a:	2302      	movs	r3, #2
  }
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 800751c:	2300      	movs	r3, #0
 800751e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007520:	f107 020c 	add.w	r2, r7, #12
 8007524:	2302      	movs	r3, #2
 8007526:	2112      	movs	r1, #18
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7ff fef4 	bl	8007316 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 800752e:	7b3b      	ldrb	r3, [r7, #12]
 8007530:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007532:	89fb      	ldrh	r3, [r7, #14]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	b21a      	sxth	r2, r3
 8007538:	7b7b      	ldrb	r3, [r7, #13]
 800753a:	b21b      	sxth	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b21b      	sxth	r3, r3
 8007540:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007542:	89fb      	ldrh	r3, [r7, #14]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f011 fb89 	bl	8018c64 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007552:	89fb      	ldrh	r3, [r7, #14]
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f011 fb8e 	bl	8018c80 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007564:	89fb      	ldrh	r3, [r7, #14]
 8007566:	089b      	lsrs	r3, r3, #2
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f011 fbdd 	bl	8018d30 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007576:	89fb      	ldrh	r3, [r7, #14]
 8007578:	08db      	lsrs	r3, r3, #3
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f011 fbe2 	bl	8018d4c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f011 fbe7 	bl	8018d68 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800759a:	89fb      	ldrh	r3, [r7, #14]
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f011 fbb4 	bl	8018d14 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	099b      	lsrs	r3, r3, #6
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f011 fb6f 	bl	8018c9c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80075be:	89fb      	ldrh	r3, [r7, #14]
 80075c0:	09db      	lsrs	r3, r3, #7
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00e      	beq.n	80075e8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d004      	beq.n	80075e0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80075d6:	2101      	movs	r1, #1
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f011 fb6d 	bl	8018cb8 <HAL_SUBGHZ_CADStatusCallback>
 80075de:	e003      	b.n	80075e8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f011 fb68 	bl	8018cb8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80075e8:	89fb      	ldrh	r3, [r7, #14]
 80075ea:	0a5b      	lsrs	r3, r3, #9
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f011 fb7d 	bl	8018cf4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80075fa:	f107 020c 	add.w	r2, r7, #12
 80075fe:	2302      	movs	r3, #2
 8007600:	2102      	movs	r1, #2
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff fe28 	bl	8007258 <HAL_SUBGHZ_ExecSetCmd>
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007618:	4b0c      	ldr	r3, [pc, #48]	; (800764c <SUBGHZSPI_Init+0x3c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a0b      	ldr	r2, [pc, #44]	; (800764c <SUBGHZSPI_Init+0x3c>)
 800761e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007622:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <SUBGHZSPI_Init+0x3c>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800762c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <SUBGHZSPI_Init+0x3c>)
 8007630:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007634:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <SUBGHZSPI_Init+0x3c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a04      	ldr	r2, [pc, #16]	; (800764c <SUBGHZSPI_Init+0x3c>)
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	6013      	str	r3, [r2, #0]
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr
 800764c:	58010000 	.word	0x58010000

08007650 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007660:	4b23      	ldr	r3, [pc, #140]	; (80076f0 <SUBGHZSPI_Transmit+0xa0>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	0cdb      	lsrs	r3, r3, #19
 800766e:	2264      	movs	r2, #100	; 0x64
 8007670:	fb02 f303 	mul.w	r3, r2, r3
 8007674:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	609a      	str	r2, [r3, #8]
      break;
 8007686:	e008      	b.n	800769a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3b01      	subs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <SUBGHZSPI_Transmit+0xa4>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b02      	cmp	r3, #2
 8007698:	d1ed      	bne.n	8007676 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800769a:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <SUBGHZSPI_Transmit+0xa8>)
 800769c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80076a4:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <SUBGHZSPI_Transmit+0xa0>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	0cdb      	lsrs	r3, r3, #19
 80076b2:	2264      	movs	r2, #100	; 0x64
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d105      	bne.n	80076cc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	609a      	str	r2, [r3, #8]
      break;
 80076ca:	e008      	b.n	80076de <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <SUBGHZSPI_Transmit+0xa4>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d1ed      	bne.n	80076ba <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80076de:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <SUBGHZSPI_Transmit+0xa4>)
 80076e0:	68db      	ldr	r3, [r3, #12]

  return status;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000000 	.word	0x20000000
 80076f4:	58010000 	.word	0x58010000
 80076f8:	5801000c 	.word	0x5801000c

080076fc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800770a:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <SUBGHZSPI_Receive+0xa4>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	0cdb      	lsrs	r3, r3, #19
 8007718:	2264      	movs	r2, #100	; 0x64
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d105      	bne.n	8007732 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	609a      	str	r2, [r3, #8]
      break;
 8007730:	e008      	b.n	8007744 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b01      	subs	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007738:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <SUBGHZSPI_Receive+0xa8>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b02      	cmp	r3, #2
 8007742:	d1ed      	bne.n	8007720 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007744:	4b18      	ldr	r3, [pc, #96]	; (80077a8 <SUBGHZSPI_Receive+0xac>)
 8007746:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	22ff      	movs	r2, #255	; 0xff
 800774c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800774e:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <SUBGHZSPI_Receive+0xa4>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	0cdb      	lsrs	r3, r3, #19
 800775c:	2264      	movs	r2, #100	; 0x64
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	609a      	str	r2, [r3, #8]
      break;
 8007774:	e008      	b.n	8007788 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3b01      	subs	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <SUBGHZSPI_Receive+0xa8>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b01      	cmp	r3, #1
 8007786:	d1ed      	bne.n	8007764 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <SUBGHZSPI_Receive+0xa8>)
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	701a      	strb	r2, [r3, #0]

  return status;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
}
 8007794:	4618      	mov	r0, r3
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000000 	.word	0x20000000
 80077a4:	58010000 	.word	0x58010000
 80077a8:	5801000c 	.word	0x5801000c

080077ac <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	791b      	ldrb	r3, [r3, #4]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d111      	bne.n	80077e0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80077bc:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <SUBGHZ_CheckDeviceReady+0x44>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	4413      	add	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	0c1b      	lsrs	r3, r3, #16
 80077ca:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077cc:	f7ff fbb0 	bl	8006f30 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f9      	bne.n	80077d0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077dc:	f7ff fb98 	bl	8006f10 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f807 	bl	80077f4 <SUBGHZ_WaitOnBusy>
 80077e6:	4603      	mov	r3, r0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000000 	.word	0x20000000

080077f4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007800:	4b12      	ldr	r3, [pc, #72]	; (800784c <SUBGHZ_WaitOnBusy+0x58>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	0d1b      	lsrs	r3, r3, #20
 800780e:	2264      	movs	r2, #100	; 0x64
 8007810:	fb02 f303 	mul.w	r3, r2, r3
 8007814:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007816:	f7ff fbb9 	bl	8006f8c <LL_PWR_IsActiveFlag_RFBUSYMS>
 800781a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	609a      	str	r2, [r3, #8]
      break;
 800782c:	e009      	b.n	8007842 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3b01      	subs	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007834:	f7ff fb98 	bl	8006f68 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	4013      	ands	r3, r2
 800783e:	2b01      	cmp	r3, #1
 8007840:	d0e9      	beq.n	8007816 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000000 	.word	0x20000000

08007850 <LL_RCC_GetUSARTClockSource>:
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	401a      	ands	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	041b      	lsls	r3, r3, #16
 8007868:	4313      	orrs	r3, r2
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr

08007874 <LL_RCC_GetLPUARTClockSource>:
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800787c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4013      	ands	r3, r2
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr

08007892 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e042      	b.n	800792a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fa fd96 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2224      	movs	r2, #36	; 0x24
 80078c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc4b 	bl	8008170 <UART_SetConfig>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e022      	b.n	800792a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fe8f 	bl	8008610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0201 	orr.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 ff15 	bl	8008752 <UART_CheckIdleState>
 8007928:	4603      	mov	r3, r0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007948:	2b20      	cmp	r3, #32
 800794a:	d142      	bne.n	80079d2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_UART_Receive_IT+0x24>
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e03b      	b.n	80079d4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_UART_Receive_IT+0x36>
 8007966:	2302      	movs	r3, #2
 8007968:	e034      	b.n	80079d4 <HAL_UART_Receive_IT+0xa0>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a17      	ldr	r2, [pc, #92]	; (80079dc <HAL_UART_Receive_IT+0xa8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01f      	beq.n	80079c2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d018      	beq.n	80079c2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	623b      	str	r3, [r7, #32]
 80079b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	69f9      	ldr	r1, [r7, #28]
 80079b4:	6a3a      	ldr	r2, [r7, #32]
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	461a      	mov	r2, r3
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 ffd5 	bl	8008978 <UART_Start_Receive_IT>
 80079ce:	4603      	mov	r3, r0
 80079d0:	e000      	b.n	80079d4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3728      	adds	r7, #40	; 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40008000 	.word	0x40008000

080079e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	; 0x28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d17a      	bne.n	8007aee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <HAL_UART_Transmit_DMA+0x24>
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e073      	b.n	8007af0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_UART_Transmit_DMA+0x36>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e06c      	b.n	8007af0 <HAL_UART_Transmit_DMA+0x110>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	88fa      	ldrh	r2, [r7, #6]
 8007a30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2221      	movs	r2, #33	; 0x21
 8007a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d02c      	beq.n	8007aa6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a50:	4a29      	ldr	r2, [pc, #164]	; (8007af8 <HAL_UART_Transmit_DMA+0x118>)
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a58:	4a28      	ldr	r2, [pc, #160]	; (8007afc <HAL_UART_Transmit_DMA+0x11c>)
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a60:	4a27      	ldr	r2, [pc, #156]	; (8007b00 <HAL_UART_Transmit_DMA+0x120>)
 8007a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a68:	2200      	movs	r2, #0
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a74:	4619      	mov	r1, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3328      	adds	r3, #40	; 0x28
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	f7fc fb4e 	bl	8004120 <HAL_DMA_Start_IT>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e024      	b.n	8007af0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2240      	movs	r2, #64	; 0x40
 8007aac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3308      	adds	r3, #8
 8007abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3308      	adds	r3, #8
 8007ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad6:	623a      	str	r2, [r7, #32]
 8007ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	69f9      	ldr	r1, [r7, #28]
 8007adc:	6a3a      	ldr	r2, [r7, #32]
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e000      	b.n	8007af0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3728      	adds	r7, #40	; 0x28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	08008cc7 	.word	0x08008cc7
 8007afc:	08008d61 	.word	0x08008d61
 8007b00:	08008d7d 	.word	0x08008d7d

08007b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b0ba      	sub	sp, #232	; 0xe8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b32:	4013      	ands	r3, r2
 8007b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11b      	bne.n	8007b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d015      	beq.n	8007b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d105      	bne.n	8007b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 82d6 	beq.w	800811a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
      }
      return;
 8007b76:	e2d0      	b.n	800811a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 811f 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b86:	4b8b      	ldr	r3, [pc, #556]	; (8007db4 <HAL_UART_IRQHandler+0x2b0>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b92:	4b89      	ldr	r3, [pc, #548]	; (8007db8 <HAL_UART_IRQHandler+0x2b4>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 8112 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d011      	beq.n	8007bcc <HAL_UART_IRQHandler+0xc8>
 8007ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc2:	f043 0201 	orr.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d011      	beq.n	8007bfc <HAL_UART_IRQHandler+0xf8>
 8007bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2202      	movs	r2, #2
 8007bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf2:	f043 0204 	orr.w	r2, r3, #4
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d011      	beq.n	8007c2c <HAL_UART_IRQHandler+0x128>
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c22:	f043 0202 	orr.w	r2, r3, #2
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c48:	4b5a      	ldr	r3, [pc, #360]	; (8007db4 <HAL_UART_IRQHandler+0x2b0>)
 8007c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2208      	movs	r2, #8
 8007c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5e:	f043 0208 	orr.w	r2, r3, #8
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d012      	beq.n	8007c9a <HAL_UART_IRQHandler+0x196>
 8007c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00c      	beq.n	8007c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c90:	f043 0220 	orr.w	r2, r3, #32
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 823c 	beq.w	800811e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d013      	beq.n	8007cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb6:	f003 0320 	and.w	r3, r3, #32
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d005      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d04f      	beq.n	8007d9e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 ff7c 	bl	8008bfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0e:	2b40      	cmp	r3, #64	; 0x40
 8007d10:	d141      	bne.n	8007d96 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3308      	adds	r3, #8
 8007d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3308      	adds	r3, #8
 8007d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1d9      	bne.n	8007d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d013      	beq.n	8007d8e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d6a:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <HAL_UART_IRQHandler+0x2b8>)
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fc fab0 	bl	80042d8 <HAL_DMA_Abort_IT>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d017      	beq.n	8007dae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8c:	e00f      	b.n	8007dae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9d9 	bl	8008146 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d94:	e00b      	b.n	8007dae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9d5 	bl	8008146 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d9c:	e007      	b.n	8007dae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f9d1 	bl	8008146 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007dac:	e1b7      	b.n	800811e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dae:	bf00      	nop
    return;
 8007db0:	e1b5      	b.n	800811e <HAL_UART_IRQHandler+0x61a>
 8007db2:	bf00      	nop
 8007db4:	10000001 	.word	0x10000001
 8007db8:	04000120 	.word	0x04000120
 8007dbc:	08008dfd 	.word	0x08008dfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f040 814a 	bne.w	800805e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 8143 	beq.w	800805e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 813c 	beq.w	800805e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2210      	movs	r2, #16
 8007dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b40      	cmp	r3, #64	; 0x40
 8007dfa:	f040 80b5 	bne.w	8007f68 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007e0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8187 	beq.w	8008122 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	f080 817f 	bcs.w	8008122 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 8086 	bne.w	8007f4c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1da      	bne.n	8007e40 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e9c:	f023 0301 	bic.w	r3, r3, #1
 8007ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e1      	bne.n	8007e8a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e3      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f1c:	f023 0310 	bic.w	r3, r3, #16
 8007f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e4      	bne.n	8007f0c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fc f968 	bl	800421c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f8f9 	bl	8008158 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f66:	e0dc      	b.n	8008122 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80ce 	beq.w	8008126 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80c9 	beq.w	8008126 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e4      	bne.n	8007f94 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3308      	adds	r3, #8
 8007fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e1      	bne.n	8007fca <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60fb      	str	r3, [r7, #12]
   return(result);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0310 	bic.w	r3, r3, #16
 800802e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800803c:	61fb      	str	r3, [r7, #28]
 800803e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	69b9      	ldr	r1, [r7, #24]
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	617b      	str	r3, [r7, #20]
   return(result);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e4      	bne.n	800801a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f87e 	bl	8008158 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800805c:	e063      	b.n	8008126 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00e      	beq.n	8008088 <HAL_UART_IRQHandler+0x584>
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800807e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fb59 	bl	8009738 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008086:	e051      	b.n	800812c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008090:	2b00      	cmp	r3, #0
 8008092:	d014      	beq.n	80080be <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d03a      	beq.n	800812a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3
    }
    return;
 80080bc:	e035      	b.n	800812a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d009      	beq.n	80080de <HAL_UART_IRQHandler+0x5da>
 80080ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fea6 	bl	8008e28 <UART_EndTransmit_IT>
    return;
 80080dc:	e026      	b.n	800812c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <HAL_UART_IRQHandler+0x5fa>
 80080ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 fb30 	bl	800975c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080fc:	e016      	b.n	800812c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d010      	beq.n	800812c <HAL_UART_IRQHandler+0x628>
 800810a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810e:	2b00      	cmp	r3, #0
 8008110:	da0c      	bge.n	800812c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fb19 	bl	800974a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008118:	e008      	b.n	800812c <HAL_UART_IRQHandler+0x628>
      return;
 800811a:	bf00      	nop
 800811c:	e006      	b.n	800812c <HAL_UART_IRQHandler+0x628>
    return;
 800811e:	bf00      	nop
 8008120:	e004      	b.n	800812c <HAL_UART_IRQHandler+0x628>
      return;
 8008122:	bf00      	nop
 8008124:	e002      	b.n	800812c <HAL_UART_IRQHandler+0x628>
      return;
 8008126:	bf00      	nop
 8008128:	e000      	b.n	800812c <HAL_UART_IRQHandler+0x628>
    return;
 800812a:	bf00      	nop
  }
}
 800812c:	37e8      	adds	r7, #232	; 0xe8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop

08008134 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800813c:	bf00      	nop
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
	...

08008170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008170:	b5b0      	push	{r4, r5, r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	4313      	orrs	r3, r2
 8008192:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	4bab      	ldr	r3, [pc, #684]	; (8008448 <UART_SetConfig+0x2d8>)
 800819c:	4013      	ands	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4aa0      	ldr	r2, [pc, #640]	; (800844c <UART_SetConfig+0x2dc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80081e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	69f9      	ldr	r1, [r7, #28]
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	f023 010f 	bic.w	r1, r3, #15
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a91      	ldr	r2, [pc, #580]	; (8008450 <UART_SetConfig+0x2e0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d122      	bne.n	8008256 <UART_SetConfig+0xe6>
 8008210:	2003      	movs	r0, #3
 8008212:	f7ff fb1d 	bl	8007850 <LL_RCC_GetUSARTClockSource>
 8008216:	4603      	mov	r3, r0
 8008218:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800821c:	2b03      	cmp	r3, #3
 800821e:	d817      	bhi.n	8008250 <UART_SetConfig+0xe0>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0xb8>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	08008239 	.word	0x08008239
 800822c:	08008245 	.word	0x08008245
 8008230:	0800823f 	.word	0x0800823f
 8008234:	0800824b 	.word	0x0800824b
 8008238:	2301      	movs	r3, #1
 800823a:	76fb      	strb	r3, [r7, #27]
 800823c:	e072      	b.n	8008324 <UART_SetConfig+0x1b4>
 800823e:	2302      	movs	r3, #2
 8008240:	76fb      	strb	r3, [r7, #27]
 8008242:	e06f      	b.n	8008324 <UART_SetConfig+0x1b4>
 8008244:	2304      	movs	r3, #4
 8008246:	76fb      	strb	r3, [r7, #27]
 8008248:	e06c      	b.n	8008324 <UART_SetConfig+0x1b4>
 800824a:	2308      	movs	r3, #8
 800824c:	76fb      	strb	r3, [r7, #27]
 800824e:	e069      	b.n	8008324 <UART_SetConfig+0x1b4>
 8008250:	2310      	movs	r3, #16
 8008252:	76fb      	strb	r3, [r7, #27]
 8008254:	e066      	b.n	8008324 <UART_SetConfig+0x1b4>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a7e      	ldr	r2, [pc, #504]	; (8008454 <UART_SetConfig+0x2e4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d134      	bne.n	80082ca <UART_SetConfig+0x15a>
 8008260:	200c      	movs	r0, #12
 8008262:	f7ff faf5 	bl	8007850 <LL_RCC_GetUSARTClockSource>
 8008266:	4603      	mov	r3, r0
 8008268:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800826c:	2b0c      	cmp	r3, #12
 800826e:	d829      	bhi.n	80082c4 <UART_SetConfig+0x154>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0x108>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	080082ad 	.word	0x080082ad
 800827c:	080082c5 	.word	0x080082c5
 8008280:	080082c5 	.word	0x080082c5
 8008284:	080082c5 	.word	0x080082c5
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082c5 	.word	0x080082c5
 8008290:	080082c5 	.word	0x080082c5
 8008294:	080082c5 	.word	0x080082c5
 8008298:	080082b3 	.word	0x080082b3
 800829c:	080082c5 	.word	0x080082c5
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082c5 	.word	0x080082c5
 80082a8:	080082bf 	.word	0x080082bf
 80082ac:	2300      	movs	r3, #0
 80082ae:	76fb      	strb	r3, [r7, #27]
 80082b0:	e038      	b.n	8008324 <UART_SetConfig+0x1b4>
 80082b2:	2302      	movs	r3, #2
 80082b4:	76fb      	strb	r3, [r7, #27]
 80082b6:	e035      	b.n	8008324 <UART_SetConfig+0x1b4>
 80082b8:	2304      	movs	r3, #4
 80082ba:	76fb      	strb	r3, [r7, #27]
 80082bc:	e032      	b.n	8008324 <UART_SetConfig+0x1b4>
 80082be:	2308      	movs	r3, #8
 80082c0:	76fb      	strb	r3, [r7, #27]
 80082c2:	e02f      	b.n	8008324 <UART_SetConfig+0x1b4>
 80082c4:	2310      	movs	r3, #16
 80082c6:	76fb      	strb	r3, [r7, #27]
 80082c8:	e02c      	b.n	8008324 <UART_SetConfig+0x1b4>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a5f      	ldr	r2, [pc, #380]	; (800844c <UART_SetConfig+0x2dc>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d125      	bne.n	8008320 <UART_SetConfig+0x1b0>
 80082d4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80082d8:	f7ff facc 	bl	8007874 <LL_RCC_GetLPUARTClockSource>
 80082dc:	4603      	mov	r3, r0
 80082de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082e2:	d017      	beq.n	8008314 <UART_SetConfig+0x1a4>
 80082e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082e8:	d817      	bhi.n	800831a <UART_SetConfig+0x1aa>
 80082ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ee:	d00b      	beq.n	8008308 <UART_SetConfig+0x198>
 80082f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f4:	d811      	bhi.n	800831a <UART_SetConfig+0x1aa>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <UART_SetConfig+0x192>
 80082fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fe:	d006      	beq.n	800830e <UART_SetConfig+0x19e>
 8008300:	e00b      	b.n	800831a <UART_SetConfig+0x1aa>
 8008302:	2300      	movs	r3, #0
 8008304:	76fb      	strb	r3, [r7, #27]
 8008306:	e00d      	b.n	8008324 <UART_SetConfig+0x1b4>
 8008308:	2302      	movs	r3, #2
 800830a:	76fb      	strb	r3, [r7, #27]
 800830c:	e00a      	b.n	8008324 <UART_SetConfig+0x1b4>
 800830e:	2304      	movs	r3, #4
 8008310:	76fb      	strb	r3, [r7, #27]
 8008312:	e007      	b.n	8008324 <UART_SetConfig+0x1b4>
 8008314:	2308      	movs	r3, #8
 8008316:	76fb      	strb	r3, [r7, #27]
 8008318:	e004      	b.n	8008324 <UART_SetConfig+0x1b4>
 800831a:	2310      	movs	r3, #16
 800831c:	76fb      	strb	r3, [r7, #27]
 800831e:	e001      	b.n	8008324 <UART_SetConfig+0x1b4>
 8008320:	2310      	movs	r3, #16
 8008322:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a48      	ldr	r2, [pc, #288]	; (800844c <UART_SetConfig+0x2dc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	f040 8098 	bne.w	8008460 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008330:	7efb      	ldrb	r3, [r7, #27]
 8008332:	2b08      	cmp	r3, #8
 8008334:	d823      	bhi.n	800837e <UART_SetConfig+0x20e>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x1cc>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008361 	.word	0x08008361
 8008340:	0800837f 	.word	0x0800837f
 8008344:	08008369 	.word	0x08008369
 8008348:	0800837f 	.word	0x0800837f
 800834c:	0800836f 	.word	0x0800836f
 8008350:	0800837f 	.word	0x0800837f
 8008354:	0800837f 	.word	0x0800837f
 8008358:	0800837f 	.word	0x0800837f
 800835c:	08008377 	.word	0x08008377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008360:	f7fd ff56 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8008364:	6178      	str	r0, [r7, #20]
        break;
 8008366:	e00f      	b.n	8008388 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008368:	4b3b      	ldr	r3, [pc, #236]	; (8008458 <UART_SetConfig+0x2e8>)
 800836a:	617b      	str	r3, [r7, #20]
        break;
 800836c:	e00c      	b.n	8008388 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800836e:	f7fd fe9b 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8008372:	6178      	str	r0, [r7, #20]
        break;
 8008374:	e008      	b.n	8008388 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837a:	617b      	str	r3, [r7, #20]
        break;
 800837c:	e004      	b.n	8008388 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	76bb      	strb	r3, [r7, #26]
        break;
 8008386:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8128 	beq.w	80085e0 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	4a31      	ldr	r2, [pc, #196]	; (800845c <UART_SetConfig+0x2ec>)
 8008396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800839a:	461a      	mov	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	fbb3 f3f2 	udiv	r3, r3, r2
 80083a2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	4613      	mov	r3, r2
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	4413      	add	r3, r2
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d305      	bcc.n	80083c0 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d902      	bls.n	80083c6 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	76bb      	strb	r3, [r7, #26]
 80083c4:	e10c      	b.n	80085e0 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	4a22      	ldr	r2, [pc, #136]	; (800845c <UART_SetConfig+0x2ec>)
 80083d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	f7f8 fbbd 	bl	8000b5c <__aeabi_uldivmod>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4610      	mov	r0, r2
 80083e8:	4619      	mov	r1, r3
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	020b      	lsls	r3, r1, #8
 80083f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083f8:	0202      	lsls	r2, r0, #8
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	6849      	ldr	r1, [r1, #4]
 80083fe:	0849      	lsrs	r1, r1, #1
 8008400:	4608      	mov	r0, r1
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	1814      	adds	r4, r2, r0
 8008408:	eb43 0501 	adc.w	r5, r3, r1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	461a      	mov	r2, r3
 8008412:	f04f 0300 	mov.w	r3, #0
 8008416:	4620      	mov	r0, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7f8 fb9f 	bl	8000b5c <__aeabi_uldivmod>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4613      	mov	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800842c:	d308      	bcc.n	8008440 <UART_SetConfig+0x2d0>
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008434:	d204      	bcs.n	8008440 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	60da      	str	r2, [r3, #12]
 800843e:	e0cf      	b.n	80085e0 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	76bb      	strb	r3, [r7, #26]
 8008444:	e0cc      	b.n	80085e0 <UART_SetConfig+0x470>
 8008446:	bf00      	nop
 8008448:	cfff69f3 	.word	0xcfff69f3
 800844c:	40008000 	.word	0x40008000
 8008450:	40013800 	.word	0x40013800
 8008454:	40004400 	.word	0x40004400
 8008458:	00f42400 	.word	0x00f42400
 800845c:	0801b1b8 	.word	0x0801b1b8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008468:	d165      	bne.n	8008536 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800846a:	7efb      	ldrb	r3, [r7, #27]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d828      	bhi.n	80084c2 <UART_SetConfig+0x352>
 8008470:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <UART_SetConfig+0x308>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	0800849d 	.word	0x0800849d
 800847c:	080084a5 	.word	0x080084a5
 8008480:	080084ad 	.word	0x080084ad
 8008484:	080084c3 	.word	0x080084c3
 8008488:	080084b3 	.word	0x080084b3
 800848c:	080084c3 	.word	0x080084c3
 8008490:	080084c3 	.word	0x080084c3
 8008494:	080084c3 	.word	0x080084c3
 8008498:	080084bb 	.word	0x080084bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800849c:	f7fd feb8 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 80084a0:	6178      	str	r0, [r7, #20]
        break;
 80084a2:	e013      	b.n	80084cc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a4:	f7fd fec6 	bl	8006234 <HAL_RCC_GetPCLK2Freq>
 80084a8:	6178      	str	r0, [r7, #20]
        break;
 80084aa:	e00f      	b.n	80084cc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084ac:	4b56      	ldr	r3, [pc, #344]	; (8008608 <UART_SetConfig+0x498>)
 80084ae:	617b      	str	r3, [r7, #20]
        break;
 80084b0:	e00c      	b.n	80084cc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b2:	f7fd fdf9 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 80084b6:	6178      	str	r0, [r7, #20]
        break;
 80084b8:	e008      	b.n	80084cc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084be:	617b      	str	r3, [r7, #20]
        break;
 80084c0:	e004      	b.n	80084cc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	76bb      	strb	r3, [r7, #26]
        break;
 80084ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 8086 	beq.w	80085e0 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	4a4c      	ldr	r2, [pc, #304]	; (800860c <UART_SetConfig+0x49c>)
 80084da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084de:	461a      	mov	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084e6:	005a      	lsls	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	085b      	lsrs	r3, r3, #1
 80084ee:	441a      	add	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2b0f      	cmp	r3, #15
 8008500:	d916      	bls.n	8008530 <UART_SetConfig+0x3c0>
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008508:	d212      	bcs.n	8008530 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	b29b      	uxth	r3, r3
 800850e:	f023 030f 	bic.w	r3, r3, #15
 8008512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	b29b      	uxth	r3, r3
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	b29a      	uxth	r2, r3
 8008520:	89fb      	ldrh	r3, [r7, #14]
 8008522:	4313      	orrs	r3, r2
 8008524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	89fa      	ldrh	r2, [r7, #14]
 800852c:	60da      	str	r2, [r3, #12]
 800852e:	e057      	b.n	80085e0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	76bb      	strb	r3, [r7, #26]
 8008534:	e054      	b.n	80085e0 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008536:	7efb      	ldrb	r3, [r7, #27]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d828      	bhi.n	800858e <UART_SetConfig+0x41e>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <UART_SetConfig+0x3d4>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008569 	.word	0x08008569
 8008548:	08008571 	.word	0x08008571
 800854c:	08008579 	.word	0x08008579
 8008550:	0800858f 	.word	0x0800858f
 8008554:	0800857f 	.word	0x0800857f
 8008558:	0800858f 	.word	0x0800858f
 800855c:	0800858f 	.word	0x0800858f
 8008560:	0800858f 	.word	0x0800858f
 8008564:	08008587 	.word	0x08008587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008568:	f7fd fe52 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 800856c:	6178      	str	r0, [r7, #20]
        break;
 800856e:	e013      	b.n	8008598 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008570:	f7fd fe60 	bl	8006234 <HAL_RCC_GetPCLK2Freq>
 8008574:	6178      	str	r0, [r7, #20]
        break;
 8008576:	e00f      	b.n	8008598 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008578:	4b23      	ldr	r3, [pc, #140]	; (8008608 <UART_SetConfig+0x498>)
 800857a:	617b      	str	r3, [r7, #20]
        break;
 800857c:	e00c      	b.n	8008598 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857e:	f7fd fd93 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8008582:	6178      	str	r0, [r7, #20]
        break;
 8008584:	e008      	b.n	8008598 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858a:	617b      	str	r3, [r7, #20]
        break;
 800858c:	e004      	b.n	8008598 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	76bb      	strb	r3, [r7, #26]
        break;
 8008596:	bf00      	nop
    }

    if (pclk != 0U)
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d020      	beq.n	80085e0 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	4a1a      	ldr	r2, [pc, #104]	; (800860c <UART_SetConfig+0x49c>)
 80085a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085a8:	461a      	mov	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	085b      	lsrs	r3, r3, #1
 80085b6:	441a      	add	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b0f      	cmp	r3, #15
 80085c8:	d908      	bls.n	80085dc <UART_SetConfig+0x46c>
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d0:	d204      	bcs.n	80085dc <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e001      	b.n	80085e0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80085fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bdb0      	pop	{r4, r5, r7, pc}
 8008606:	bf00      	nop
 8008608:	00f42400 	.word	0x00f42400
 800860c:	0801b1b8 	.word	0x0801b1b8

08008610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00a      	beq.n	800867e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01a      	beq.n	8008726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800870e:	d10a      	bne.n	8008726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	605a      	str	r2, [r3, #4]
  }
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr

08008752 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af02      	add	r7, sp, #8
 8008758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008762:	f7f9 fa51 	bl	8001c08 <HAL_GetTick>
 8008766:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b08      	cmp	r3, #8
 8008774:	d10e      	bne.n	8008794 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f82f 	bl	80087e8 <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e025      	b.n	80087e0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d10e      	bne.n	80087c0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f819 	bl	80087e8 <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e00f      	b.n	80087e0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b09c      	sub	sp, #112	; 0x70
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	4613      	mov	r3, r2
 80087f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f8:	e0a9      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	f000 80a5 	beq.w	800894e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008804:	f7f9 fa00 	bl	8001c08 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008810:	429a      	cmp	r2, r3
 8008812:	d302      	bcc.n	800881a <UART_WaitOnFlagUntilTimeout+0x32>
 8008814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008816:	2b00      	cmp	r3, #0
 8008818:	d140      	bne.n	800889c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800882e:	667b      	str	r3, [r7, #100]	; 0x64
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008838:	65fb      	str	r3, [r7, #92]	; 0x5c
 800883a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800883e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e6      	bne.n	800881a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3308      	adds	r3, #8
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	663b      	str	r3, [r7, #96]	; 0x60
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3308      	adds	r3, #8
 800886a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800886c:	64ba      	str	r2, [r7, #72]	; 0x48
 800886e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e5      	bne.n	800884c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e069      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0304 	and.w	r3, r3, #4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d051      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088b8:	d149      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
 80088e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	613b      	str	r3, [r7, #16]
   return(result);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	66bb      	str	r3, [r7, #104]	; 0x68
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008916:	623a      	str	r2, [r7, #32]
 8008918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	69f9      	ldr	r1, [r7, #28]
 800891c:	6a3a      	ldr	r2, [r7, #32]
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	61bb      	str	r3, [r7, #24]
   return(result);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e010      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	429a      	cmp	r2, r3
 800895c:	bf0c      	ite	eq
 800895e:	2301      	moveq	r3, #1
 8008960:	2300      	movne	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	429a      	cmp	r2, r3
 800896a:	f43f af46 	beq.w	80087fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3770      	adds	r7, #112	; 0x70
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008978:	b480      	push	{r7}
 800897a:	b09d      	sub	sp, #116	; 0x74
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089aa:	d10e      	bne.n	80089ca <UART_Start_Receive_IT+0x52>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <UART_Start_Receive_IT+0x48>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089be:	e02d      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	22ff      	movs	r2, #255	; 0xff
 80089c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089c8:	e028      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <UART_Start_Receive_IT+0x76>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <UART_Start_Receive_IT+0x6c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	22ff      	movs	r2, #255	; 0xff
 80089de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089e2:	e01b      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	227f      	movs	r2, #127	; 0x7f
 80089e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089ec:	e016      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089f6:	d10d      	bne.n	8008a14 <UART_Start_Receive_IT+0x9c>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <UART_Start_Receive_IT+0x92>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	227f      	movs	r2, #127	; 0x7f
 8008a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a08:	e008      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	223f      	movs	r2, #63	; 0x3f
 8008a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a12:	e003      	b.n	8008a1c <UART_Start_Receive_IT+0xa4>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2222      	movs	r2, #34	; 0x22
 8008a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3308      	adds	r3, #8
 8008a32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a4c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008a4e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e5      	bne.n	8008a2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a68:	d14d      	bne.n	8008b06 <UART_Start_Receive_IT+0x18e>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a70:	88fa      	ldrh	r2, [r7, #6]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d347      	bcc.n	8008b06 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a7e:	d107      	bne.n	8008a90 <UART_Start_Receive_IT+0x118>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d103      	bne.n	8008a90 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4a38      	ldr	r2, [pc, #224]	; (8008b6c <UART_Start_Receive_IT+0x1f4>)
 8008a8c:	671a      	str	r2, [r3, #112]	; 0x70
 8008a8e:	e002      	b.n	8008a96 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4a37      	ldr	r2, [pc, #220]	; (8008b70 <UART_Start_Receive_IT+0x1f8>)
 8008a94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008abe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ac4:	e841 2300 	strex	r3, r2, [r1]
 8008ac8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e6      	bne.n	8008a9e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ae6:	667b      	str	r3, [r7, #100]	; 0x64
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3308      	adds	r3, #8
 8008aee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008af0:	637a      	str	r2, [r7, #52]	; 0x34
 8008af2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e5      	bne.n	8008ad0 <UART_Start_Receive_IT+0x158>
 8008b04:	e02c      	b.n	8008b60 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b0e:	d107      	bne.n	8008b20 <UART_Start_Receive_IT+0x1a8>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d103      	bne.n	8008b20 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a16      	ldr	r2, [pc, #88]	; (8008b74 <UART_Start_Receive_IT+0x1fc>)
 8008b1c:	671a      	str	r2, [r3, #112]	; 0x70
 8008b1e:	e002      	b.n	8008b26 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a15      	ldr	r2, [pc, #84]	; (8008b78 <UART_Start_Receive_IT+0x200>)
 8008b24:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b42:	663b      	str	r3, [r7, #96]	; 0x60
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b4c:	623b      	str	r3, [r7, #32]
 8008b4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	69f9      	ldr	r1, [r7, #28]
 8008b52:	6a3a      	ldr	r2, [r7, #32]
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e6      	bne.n	8008b2e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3774      	adds	r7, #116	; 0x74
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bc80      	pop	{r7}
 8008b6a:	4770      	bx	lr
 8008b6c:	08009439 	.word	0x08009439
 8008b70:	08009141 	.word	0x08009141
 8008b74:	08008fdf 	.word	0x08008fdf
 8008b78:	08008e7f 	.word	0x08008e7f

08008b7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b08f      	sub	sp, #60	; 0x3c
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b98:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	61ba      	str	r2, [r7, #24]
 8008bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6979      	ldr	r1, [r7, #20]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	613b      	str	r3, [r7, #16]
   return(result);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008bf2:	bf00      	nop
 8008bf4:	373c      	adds	r7, #60	; 0x3c
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr

08008bfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b095      	sub	sp, #84	; 0x54
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c22:	643b      	str	r3, [r7, #64]	; 0x40
 8008c24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e6      	bne.n	8008c04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	e853 3f00 	ldrex	r3, [r3]
 8008c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c4c:	f023 0301 	bic.w	r3, r3, #1
 8008c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3308      	adds	r3, #8
 8008c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e3      	bne.n	8008c36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d118      	bne.n	8008ca8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f023 0310 	bic.w	r3, r3, #16
 8008c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c94:	61bb      	str	r3, [r7, #24]
 8008c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6979      	ldr	r1, [r7, #20]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e6      	bne.n	8008c76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008cbc:	bf00      	nop
 8008cbe:	3754      	adds	r7, #84	; 0x54
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr

08008cc6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b090      	sub	sp, #64	; 0x40
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d137      	bne.n	8008d52 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3308      	adds	r3, #8
 8008cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	e853 3f00 	ldrex	r3, [r3]
 8008cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3308      	adds	r3, #8
 8008d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d0a:	633a      	str	r2, [r7, #48]	; 0x30
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e5      	bne.n	8008cea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	617b      	str	r3, [r7, #20]
   return(result);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e6      	bne.n	8008d1e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d50:	e002      	b.n	8008d58 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d54:	f7f9 fcb4 	bl	80026c0 <HAL_UART_TxCpltCallback>
}
 8008d58:	bf00      	nop
 8008d5a:	3740      	adds	r7, #64	; 0x40
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff f9e0 	bl	8008134 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da4:	2b80      	cmp	r3, #128	; 0x80
 8008da6:	d109      	bne.n	8008dbc <UART_DMAError+0x40>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b21      	cmp	r3, #33	; 0x21
 8008dac:	d106      	bne.n	8008dbc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008db6:	6978      	ldr	r0, [r7, #20]
 8008db8:	f7ff fee0 	bl	8008b7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc6:	2b40      	cmp	r3, #64	; 0x40
 8008dc8:	d109      	bne.n	8008dde <UART_DMAError+0x62>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b22      	cmp	r3, #34	; 0x22
 8008dce:	d106      	bne.n	8008dde <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008dd8:	6978      	ldr	r0, [r7, #20]
 8008dda:	f7ff ff0f 	bl	8008bfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de4:	f043 0210 	orr.w	r2, r3, #16
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dee:	6978      	ldr	r0, [r7, #20]
 8008df0:	f7ff f9a9 	bl	8008146 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df4:	bf00      	nop
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f7ff f993 	bl	8008146 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e20:	bf00      	nop
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	61bb      	str	r3, [r7, #24]
 8008e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	6979      	ldr	r1, [r7, #20]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e6      	bne.n	8008e30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7f9 fc25 	bl	80026c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e76:	bf00      	nop
 8008e78:	3720      	adds	r7, #32
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b096      	sub	sp, #88	; 0x58
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	2b22      	cmp	r3, #34	; 0x22
 8008e98:	f040 8095 	bne.w	8008fc6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ea6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008eaa:	b2d9      	uxtb	r1, r3
 8008eac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb6:	400a      	ands	r2, r1
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d178      	bne.n	8008fd6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f02:	647b      	str	r3, [r7, #68]	; 0x44
 8008f04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f0a:	e841 2300 	strex	r3, r2, [r1]
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e6      	bne.n	8008ee4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	623b      	str	r3, [r7, #32]
   return(result);
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	f023 0301 	bic.w	r3, r3, #1
 8008f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f36:	633a      	str	r2, [r7, #48]	; 0x30
 8008f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d12e      	bne.n	8008fbe <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0310 	bic.w	r3, r3, #16
 8008f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	69b9      	ldr	r1, [r7, #24]
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	617b      	str	r3, [r7, #20]
   return(result);
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e6      	bne.n	8008f66 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f003 0310 	and.w	r3, r3, #16
 8008fa2:	2b10      	cmp	r3, #16
 8008fa4:	d103      	bne.n	8008fae <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2210      	movs	r2, #16
 8008fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff f8ce 	bl	8008158 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fbc:	e00b      	b.n	8008fd6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7f9 fb8c 	bl	80026dc <HAL_UART_RxCpltCallback>
}
 8008fc4:	e007      	b.n	8008fd6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699a      	ldr	r2, [r3, #24]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 0208 	orr.w	r2, r2, #8
 8008fd4:	619a      	str	r2, [r3, #24]
}
 8008fd6:	bf00      	nop
 8008fd8:	3758      	adds	r7, #88	; 0x58
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b096      	sub	sp, #88	; 0x58
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff6:	2b22      	cmp	r3, #34	; 0x22
 8008ff8:	f040 8095 	bne.w	8009126 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800900c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009010:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009014:	4013      	ands	r3, r2
 8009016:	b29a      	uxth	r2, r3
 8009018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009020:	1c9a      	adds	r2, r3, #2
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800902c:	b29b      	uxth	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d178      	bne.n	8009136 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009062:	643b      	str	r3, [r7, #64]	; 0x40
 8009064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e6      	bne.n	8009044 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	61fb      	str	r3, [r7, #28]
   return(result);
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	64bb      	str	r3, [r7, #72]	; 0x48
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3308      	adds	r3, #8
 8009094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800909c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e5      	bne.n	8009076 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d12e      	bne.n	800911e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f023 0310 	bic.w	r3, r3, #16
 80090da:	647b      	str	r3, [r7, #68]	; 0x44
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090e4:	61bb      	str	r3, [r7, #24]
 80090e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	613b      	str	r3, [r7, #16]
   return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	69db      	ldr	r3, [r3, #28]
 80090fe:	f003 0310 	and.w	r3, r3, #16
 8009102:	2b10      	cmp	r3, #16
 8009104:	d103      	bne.n	800910e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2210      	movs	r2, #16
 800910c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7ff f81e 	bl	8008158 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800911c:	e00b      	b.n	8009136 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7f9 fadc 	bl	80026dc <HAL_UART_RxCpltCallback>
}
 8009124:	e007      	b.n	8009136 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699a      	ldr	r2, [r3, #24]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0208 	orr.w	r2, r2, #8
 8009134:	619a      	str	r2, [r3, #24]
}
 8009136:	bf00      	nop
 8009138:	3758      	adds	r7, #88	; 0x58
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b0a6      	sub	sp, #152	; 0x98
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800914e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	2b22      	cmp	r3, #34	; 0x22
 8009178:	f040 814f 	bne.w	800941a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009182:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	e0f6      	b.n	8009376 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009192:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009196:	b2d9      	uxtb	r1, r3
 8009198:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	400a      	ands	r2, r1
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	1c5a      	adds	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d053      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
 80091e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2201      	movs	r2, #1
 80091f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009200:	f043 0201 	orr.w	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800920a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d011      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2202      	movs	r2, #2
 8009228:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009230:	f043 0204 	orr.w	r2, r3, #4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800923a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2204      	movs	r2, #4
 8009258:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7fe ff66 	bl	8008146 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d173      	bne.n	8009376 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800929c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800929e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092b2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e4      	bne.n	800928e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3308      	adds	r3, #8
 80092ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3308      	adds	r3, #8
 80092e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092e8:	657a      	str	r2, [r7, #84]	; 0x54
 80092ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092f0:	e841 2300 	strex	r3, r2, [r1]
 80092f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1e3      	bne.n	80092c4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930e:	2b01      	cmp	r3, #1
 8009310:	d12e      	bne.n	8009370 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	f023 0310 	bic.w	r3, r3, #16
 800932c:	67bb      	str	r3, [r7, #120]	; 0x78
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009336:	643b      	str	r3, [r7, #64]	; 0x40
 8009338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800933c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	f003 0310 	and.w	r3, r3, #16
 8009354:	2b10      	cmp	r3, #16
 8009356:	d103      	bne.n	8009360 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2210      	movs	r2, #16
 800935e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7fe fef5 	bl	8008158 <HAL_UARTEx_RxEventCallback>
 800936e:	e002      	b.n	8009376 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7f9 f9b3 	bl	80026dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009376:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800937a:	2b00      	cmp	r3, #0
 800937c:	d006      	beq.n	800938c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800937e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	f47f aefe 	bne.w	8009188 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009392:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009396:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800939a:	2b00      	cmp	r3, #0
 800939c:	d045      	beq.n	800942a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d23e      	bcs.n	800942a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093c2:	673b      	str	r3, [r7, #112]	; 0x70
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e5      	bne.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a14      	ldr	r2, [pc, #80]	; (8009434 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80093e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	f043 0320 	orr.w	r3, r3, #32
 80093fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6979      	ldr	r1, [r7, #20]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	613b      	str	r3, [r7, #16]
   return(result);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e6      	bne.n	80093e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009418:	e007      	b.n	800942a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f042 0208 	orr.w	r2, r2, #8
 8009428:	619a      	str	r2, [r3, #24]
}
 800942a:	bf00      	nop
 800942c:	3798      	adds	r7, #152	; 0x98
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	08008e7f 	.word	0x08008e7f

08009438 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b0a8      	sub	sp, #160	; 0xa0
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009446:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946e:	2b22      	cmp	r3, #34	; 0x22
 8009470:	f040 8153 	bne.w	800971a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800947a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800947e:	e0fa      	b.n	8009676 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009492:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009496:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800949a:	4013      	ands	r3, r2
 800949c:	b29a      	uxth	r2, r3
 800949e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a8:	1c9a      	adds	r2, r3, #2
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	3b01      	subs	r3, #1
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d053      	beq.n	800957e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d011      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0xce>
 80094e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2201      	movs	r2, #1
 80094f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fc:	f043 0201 	orr.w	r2, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d011      	beq.n	8009536 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009516:	f003 0301 	and.w	r3, r3, #1
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2202      	movs	r2, #2
 8009524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800952c:	f043 0204 	orr.w	r2, r3, #4
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009536:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d011      	beq.n	8009566 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2204      	movs	r2, #4
 8009554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800955c:	f043 0202 	orr.w	r2, r3, #2
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d006      	beq.n	800957e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7fe fde8 	bl	8008146 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d175      	bne.n	8009676 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009592:	e853 3f00 	ldrex	r3, [r3]
 8009596:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800959a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800959e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095ae:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e4      	bne.n	800958a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095d6:	f023 0301 	bic.w	r3, r3, #1
 80095da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3308      	adds	r3, #8
 80095e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80095ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e1      	bne.n	80095c0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2220      	movs	r2, #32
 8009600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800960e:	2b01      	cmp	r3, #1
 8009610:	d12e      	bne.n	8009670 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	e853 3f00 	ldrex	r3, [r3]
 8009624:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	f023 0310 	bic.w	r3, r3, #16
 800962c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009636:	647b      	str	r3, [r7, #68]	; 0x44
 8009638:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800963c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e6      	bne.n	8009618 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	2b10      	cmp	r3, #16
 8009656:	d103      	bne.n	8009660 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2210      	movs	r2, #16
 800965e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fe fd75 	bl	8008158 <HAL_UARTEx_RxEventCallback>
 800966e:	e002      	b.n	8009676 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7f9 f833 	bl	80026dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009676:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800967a:	2b00      	cmp	r3, #0
 800967c:	d006      	beq.n	800968c <UART_RxISR_16BIT_FIFOEN+0x254>
 800967e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b00      	cmp	r3, #0
 8009688:	f47f aefa 	bne.w	8009480 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009692:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009696:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800969a:	2b00      	cmp	r3, #0
 800969c:	d045      	beq.n	800972a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096a4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d23e      	bcs.n	800972a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3308      	adds	r3, #8
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	623b      	str	r3, [r7, #32]
   return(result);
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096c2:	677b      	str	r3, [r7, #116]	; 0x74
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3308      	adds	r3, #8
 80096ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80096cc:	633a      	str	r2, [r7, #48]	; 0x30
 80096ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d4:	e841 2300 	strex	r3, r2, [r1]
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e5      	bne.n	80096ac <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a14      	ldr	r2, [pc, #80]	; (8009734 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80096e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f043 0320 	orr.w	r3, r3, #32
 80096fa:	673b      	str	r3, [r7, #112]	; 0x70
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009704:	61fb      	str	r3, [r7, #28]
 8009706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	69b9      	ldr	r1, [r7, #24]
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	617b      	str	r3, [r7, #20]
   return(result);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009718:	e007      	b.n	800972a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0208 	orr.w	r2, r2, #8
 8009728:	619a      	str	r2, [r3, #24]
}
 800972a:	bf00      	nop
 800972c:	37a0      	adds	r7, #160	; 0xa0
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08008fdf 	.word	0x08008fdf

08009738 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr

0800974a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800974a:	b480      	push	{r7}
 800974c:	b083      	sub	sp, #12
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009752:	bf00      	nop
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	bc80      	pop	{r7}
 800975a:	4770      	bx	lr

0800975c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	bc80      	pop	{r7}
 800976c:	4770      	bx	lr

0800976e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b088      	sub	sp, #32
 8009772:	af02      	add	r7, sp, #8
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	1d3b      	adds	r3, r7, #4
 8009778:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800978a:	2302      	movs	r3, #2
 800978c:	e046      	b.n	800981c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2224      	movs	r2, #36	; 0x24
 800979a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0201 	bic.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80097c8:	1d3b      	adds	r3, r7, #4
 80097ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 f911 	bl	80099f6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097e4:	f7f8 fa10 	bl	8001c08 <HAL_GetTick>
 80097e8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7fe fff5 	bl	80087e8 <UART_WaitOnFlagUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	75fb      	strb	r3, [r7, #23]
 8009808:	e003      	b.n	8009812 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800981a:	7dfb      	ldrb	r3, [r7, #23]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b089      	sub	sp, #36	; 0x24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_UARTEx_EnableStopMode+0x16>
 8009836:	2302      	movs	r3, #2
 8009838:	e021      	b.n	800987e <HAL_UARTEx_EnableStopMode+0x5a>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f043 0302 	orr.w	r3, r3, #2
 8009856:	61fb      	str	r3, [r7, #28]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	461a      	mov	r2, r3
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	613b      	str	r3, [r7, #16]
   return(result);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e6      	bne.n	8009842 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3724      	adds	r7, #36	; 0x24
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_UARTEx_EnableFifoMode+0x16>
 800989a:	2302      	movs	r3, #2
 800989c:	e02b      	b.n	80098f6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2224      	movs	r2, #36	; 0x24
 80098aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80098d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f8ac 	bl	8009a3c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009912:	2302      	movs	r3, #2
 8009914:	e02d      	b.n	8009972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2224      	movs	r2, #36	; 0x24
 8009922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0201 	bic.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f872 	bl	8009a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800998e:	2302      	movs	r3, #2
 8009990:	e02d      	b.n	80099ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	; 0x24
 800999e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f834 	bl	8009a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	1d3b      	adds	r3, r7, #4
 8009a00:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f023 0210 	bic.w	r2, r3, #16
 8009a0e:	893b      	ldrh	r3, [r7, #8]
 8009a10:	4619      	mov	r1, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009a24:	7abb      	ldrb	r3, [r7, #10]
 8009a26:	061a      	lsls	r2, r3, #24
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	605a      	str	r2, [r3, #4]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
	...

08009a3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d108      	bne.n	8009a5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a5c:	e031      	b.n	8009ac2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a5e:	2308      	movs	r3, #8
 8009a60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a62:	2308      	movs	r3, #8
 8009a64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	0e5b      	lsrs	r3, r3, #25
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	0f5b      	lsrs	r3, r3, #29
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	7b3a      	ldrb	r2, [r7, #12]
 8009a8a:	4910      	ldr	r1, [pc, #64]	; (8009acc <UARTEx_SetNbDataToProcess+0x90>)
 8009a8c:	5c8a      	ldrb	r2, [r1, r2]
 8009a8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a92:	7b3a      	ldrb	r2, [r7, #12]
 8009a94:	490e      	ldr	r1, [pc, #56]	; (8009ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8009a96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	7b7a      	ldrb	r2, [r7, #13]
 8009aa8:	4908      	ldr	r1, [pc, #32]	; (8009acc <UARTEx_SetNbDataToProcess+0x90>)
 8009aaa:	5c8a      	ldrb	r2, [r1, r2]
 8009aac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ab0:	7b7a      	ldrb	r2, [r7, #13]
 8009ab2:	4907      	ldr	r1, [pc, #28]	; (8009ad0 <UARTEx_SetNbDataToProcess+0x94>)
 8009ab4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ab6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009ac2:	bf00      	nop
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bc80      	pop	{r7}
 8009aca:	4770      	bx	lr
 8009acc:	0801b1d0 	.word	0x0801b1d0
 8009ad0:	0801b1d8 	.word	0x0801b1d8

08009ad4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009ad8:	f7f7 ff36 	bl	8001948 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009adc:	f000 f80a 	bl	8009af4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009ae0:	bf00      	nop
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	f00f ff32 	bl	8019954 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009af0:	bf00      	nop
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 8009afa:	2000      	movs	r0, #0
 8009afc:	f7f8 fe50 	bl	80027a0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8009b00:	2001      	movs	r0, #1
 8009b02:	f7f8 fe4d 	bl	80027a0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009b06:	2002      	movs	r0, #2
 8009b08:	f7f8 fe4a 	bl	80027a0 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f7f8 fef6 	bl	8002900 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8009b14:	2300      	movs	r3, #0
 8009b16:	9302      	str	r3, [sp, #8]
 8009b18:	2301      	movs	r3, #1
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	4b46      	ldr	r3, [pc, #280]	; (8009c3c <LoRaWAN_Init+0x148>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	2100      	movs	r1, #0
 8009b26:	2002      	movs	r0, #2
 8009b28:	f010 fb48 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9302      	str	r3, [sp, #8]
 8009b30:	2303      	movs	r3, #3
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	2302      	movs	r3, #2
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4b41      	ldr	r3, [pc, #260]	; (8009c40 <LoRaWAN_Init+0x14c>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	2002      	movs	r0, #2
 8009b40:	f010 fb3c 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8009b44:	2300      	movs	r3, #0
 8009b46:	9302      	str	r3, [sp, #8]
 8009b48:	2301      	movs	r3, #1
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4b3c      	ldr	r3, [pc, #240]	; (8009c44 <LoRaWAN_Init+0x150>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	2002      	movs	r0, #2
 8009b58:	f010 fb30 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	4b39      	ldr	r3, [pc, #228]	; (8009c48 <LoRaWAN_Init+0x154>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	f04f 31ff 	mov.w	r1, #4294967295
 8009b68:	4838      	ldr	r0, [pc, #224]	; (8009c4c <LoRaWAN_Init+0x158>)
 8009b6a:	f010 f879 	bl	8019c60 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9300      	str	r3, [sp, #0]
 8009b72:	4b37      	ldr	r3, [pc, #220]	; (8009c50 <LoRaWAN_Init+0x15c>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	f04f 31ff 	mov.w	r1, #4294967295
 8009b7a:	4836      	ldr	r0, [pc, #216]	; (8009c54 <LoRaWAN_Init+0x160>)
 8009b7c:	f010 f870 	bl	8019c60 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009b80:	2300      	movs	r3, #0
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	4b34      	ldr	r3, [pc, #208]	; (8009c58 <LoRaWAN_Init+0x164>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	f04f 31ff 	mov.w	r1, #4294967295
 8009b8c:	4833      	ldr	r0, [pc, #204]	; (8009c5c <LoRaWAN_Init+0x168>)
 8009b8e:	f010 f867 	bl	8019c60 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8009b92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009b96:	482d      	ldr	r0, [pc, #180]	; (8009c4c <LoRaWAN_Init+0x158>)
 8009b98:	f010 f976 	bl	8019e88 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8009b9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009ba0:	482c      	ldr	r0, [pc, #176]	; (8009c54 <LoRaWAN_Init+0x160>)
 8009ba2:	f010 f971 	bl	8019e88 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8009ba6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009baa:	482c      	ldr	r0, [pc, #176]	; (8009c5c <LoRaWAN_Init+0x168>)
 8009bac:	f010 f96c 	bl	8019e88 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 8009bb0:	4a2b      	ldr	r2, [pc, #172]	; (8009c60 <LoRaWAN_Init+0x16c>)
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	2004      	movs	r0, #4
 8009bb6:	f00f ffb1 	bl	8019b1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
 8009bba:	4a2a      	ldr	r2, [pc, #168]	; (8009c64 <LoRaWAN_Init+0x170>)
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	2008      	movs	r0, #8
 8009bc0:	f00f ffac 	bl	8019b1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	2004      	movs	r0, #4
 8009bc8:	f00f ffca 	bl	8019b60 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009bcc:	4a26      	ldr	r2, [pc, #152]	; (8009c68 <LoRaWAN_Init+0x174>)
 8009bce:	2100      	movs	r1, #0
 8009bd0:	2001      	movs	r0, #1
 8009bd2:	f00f ffa3 	bl	8019b1c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009bd6:	4a25      	ldr	r2, [pc, #148]	; (8009c6c <LoRaWAN_Init+0x178>)
 8009bd8:	2100      	movs	r1, #0
 8009bda:	2002      	movs	r0, #2
 8009bdc:	f00f ff9e 	bl	8019b1c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009be0:	f000 fb1e 	bl	800a220 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8009be4:	4822      	ldr	r0, [pc, #136]	; (8009c70 <LoRaWAN_Init+0x17c>)
 8009be6:	f001 ff95 	bl	800bb14 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009bea:	4822      	ldr	r0, [pc, #136]	; (8009c74 <LoRaWAN_Init+0x180>)
 8009bec:	f001 ffde 	bl	800bbac <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009bf0:	481a      	ldr	r0, [pc, #104]	; (8009c5c <LoRaWAN_Init+0x168>)
 8009bf2:	f010 f86b 	bl	8019ccc <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8009bf6:	4b20      	ldr	r3, [pc, #128]	; (8009c78 <LoRaWAN_Init+0x184>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f002 f90c 	bl	800be18 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009c00:	4b1e      	ldr	r3, [pc, #120]	; (8009c7c <LoRaWAN_Init+0x188>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d111      	bne.n	8009c2c <LoRaWAN_Init+0x138>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009c08:	2300      	movs	r3, #0
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	4b1c      	ldr	r3, [pc, #112]	; (8009c80 <LoRaWAN_Init+0x18c>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f04f 31ff 	mov.w	r1, #4294967295
 8009c14:	481b      	ldr	r0, [pc, #108]	; (8009c84 <LoRaWAN_Init+0x190>)
 8009c16:	f010 f823 	bl	8019c60 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8009c1a:	f247 5130 	movw	r1, #30000	; 0x7530
 8009c1e:	4819      	ldr	r0, [pc, #100]	; (8009c84 <LoRaWAN_Init+0x190>)
 8009c20:	f010 f932 	bl	8019e88 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009c24:	4817      	ldr	r0, [pc, #92]	; (8009c84 <LoRaWAN_Init+0x190>)
 8009c26:	f010 f851 	bl	8019ccc <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009c2a:	e003      	b.n	8009c34 <LoRaWAN_Init+0x140>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f7f8 fe66 	bl	8002900 <BSP_PB_Init>
}
 8009c34:	bf00      	nop
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0801a910 	.word	0x0801a910
 8009c40:	0801a930 	.word	0x0801a930
 8009c44:	0801a950 	.word	0x0801a950
 8009c48:	0800a091 	.word	0x0800a091
 8009c4c:	20000270 	.word	0x20000270
 8009c50:	0800a0a7 	.word	0x0800a0a7
 8009c54:	20000288 	.word	0x20000288
 8009c58:	0800a0bd 	.word	0x0800a0bd
 8009c5c:	200002a0 	.word	0x200002a0
 8009c60:	08000e51 	.word	0x08000e51
 8009c64:	08000e75 	.word	0x08000e75
 8009c68:	0800be05 	.word	0x0800be05
 8009c6c:	08009e01 	.word	0x08009e01
 8009c70:	2000003c 	.word	0x2000003c
 8009c74:	20000070 	.word	0x20000070
 8009c78:	20000038 	.word	0x20000038
 8009c7c:	20000160 	.word	0x20000160
 8009c80:	0800a06d 	.word	0x0800a06d
 8009c84:	20000164 	.word	0x20000164

08009c88 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c98:	d007      	beq.n	8009caa <HAL_GPIO_EXTI_Callback+0x22>
 8009c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9e:	dc09      	bgt.n	8009cb4 <HAL_GPIO_EXTI_Callback+0x2c>
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d009      	beq.n	8009cb8 <HAL_GPIO_EXTI_Callback+0x30>
 8009ca4:	2b40      	cmp	r3, #64	; 0x40
 8009ca6:	d009      	beq.n	8009cbc <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 8009ca8:	e004      	b.n	8009cb4 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009caa:	2100      	movs	r1, #0
 8009cac:	2002      	movs	r0, #2
 8009cae:	f00f ff57 	bl	8019b60 <UTIL_SEQ_SetTask>
      break;
 8009cb2:	e004      	b.n	8009cbe <HAL_GPIO_EXTI_Callback+0x36>
      break;
 8009cb4:	bf00      	nop
 8009cb6:	e002      	b.n	8009cbe <HAL_GPIO_EXTI_Callback+0x36>
      break;
 8009cb8:	bf00      	nop
 8009cba:	e000      	b.n	8009cbe <HAL_GPIO_EXTI_Callback+0x36>
      break;
 8009cbc:	bf00      	nop
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
	...

08009cc8 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009cc8:	b5b0      	push	{r4, r5, r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af06      	add	r7, sp, #24
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <OnRxData+0x16>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d078      	beq.n	8009dd0 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 8009cde:	2000      	movs	r0, #0
 8009ce0:	f7f8 fda2 	bl	8002828 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 8009ce4:	483f      	ldr	r0, [pc, #252]	; (8009de4 <OnRxData+0x11c>)
 8009ce6:	f00f fff1 	bl	8019ccc <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8009cea:	4b3f      	ldr	r3, [pc, #252]	; (8009de8 <OnRxData+0x120>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	2100      	movs	r1, #0
 8009cf0:	2002      	movs	r0, #2
 8009cf2:	f010 fa63 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4a3a      	ldr	r2, [pc, #232]	; (8009dec <OnRxData+0x124>)
 8009d04:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	7809      	ldrb	r1, [r1, #0]
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8009d14:	460c      	mov	r4, r1
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8009d1c:	460d      	mov	r5, r1
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	f991 1004 	ldrsb.w	r1, [r1, #4]
 8009d24:	9105      	str	r1, [sp, #20]
 8009d26:	9504      	str	r5, [sp, #16]
 8009d28:	9403      	str	r4, [sp, #12]
 8009d2a:	9002      	str	r0, [sp, #8]
 8009d2c:	9201      	str	r2, [sp, #4]
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	4b2f      	ldr	r3, [pc, #188]	; (8009df0 <OnRxData+0x128>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	2100      	movs	r1, #0
 8009d36:	2003      	movs	r0, #3
 8009d38:	f010 fa40 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d021      	beq.n	8009d88 <OnRxData+0xc0>
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d145      	bne.n	8009dd4 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d117      	bne.n	8009d80 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d00e      	beq.n	8009d78 <OnRxData+0xb0>
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	dc12      	bgt.n	8009d84 <OnRxData+0xbc>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <OnRxData+0xa0>
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d004      	beq.n	8009d70 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8009d66:	e00d      	b.n	8009d84 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f002 f9b7 	bl	800c0dc <LmHandlerRequestClass>
              break;
 8009d6e:	e00a      	b.n	8009d86 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8009d70:	2001      	movs	r0, #1
 8009d72:	f002 f9b3 	bl	800c0dc <LmHandlerRequestClass>
              break;
 8009d76:	e006      	b.n	8009d86 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8009d78:	2002      	movs	r0, #2
 8009d7a:	f002 f9af 	bl	800c0dc <LmHandlerRequestClass>
              break;
 8009d7e:	e002      	b.n	8009d86 <OnRxData+0xbe>
          }
        }
 8009d80:	bf00      	nop
 8009d82:	e02a      	b.n	8009dda <OnRxData+0x112>
              break;
 8009d84:	bf00      	nop
        break;
 8009d86:	e028      	b.n	8009dda <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d123      	bne.n	8009dd8 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	4b15      	ldr	r3, [pc, #84]	; (8009df4 <OnRxData+0x12c>)
 8009d9e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8009da0:	4b14      	ldr	r3, [pc, #80]	; (8009df4 <OnRxData+0x12c>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8009da8:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <OnRxData+0x130>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	2003      	movs	r0, #3
 8009db0:	f010 fa04 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 8009db4:	2002      	movs	r0, #2
 8009db6:	f7f8 fd5b 	bl	8002870 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 8009dba:	e00d      	b.n	8009dd8 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009dbc:	4b0f      	ldr	r3, [pc, #60]	; (8009dfc <OnRxData+0x134>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	2003      	movs	r0, #3
 8009dc4:	f010 f9fa 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8009dc8:	2002      	movs	r0, #2
 8009dca:	f7f8 fd2d 	bl	8002828 <BSP_LED_On>
        break;
 8009dce:	e003      	b.n	8009dd8 <OnRxData+0x110>

      default:

        break;
    }
  }
 8009dd0:	bf00      	nop
 8009dd2:	e002      	b.n	8009dda <OnRxData+0x112>
        break;
 8009dd4:	bf00      	nop
 8009dd6:	e000      	b.n	8009dda <OnRxData+0x112>
        break;
 8009dd8:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bdb0      	pop	{r4, r5, r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20000288 	.word	0x20000288
 8009de8:	0801a970 	.word	0x0801a970
 8009dec:	20000088 	.word	0x20000088
 8009df0:	0801a9a4 	.word	0x0801a9a4
 8009df4:	2000026e 	.word	0x2000026e
 8009df8:	0801a9ec 	.word	0x0801a9ec
 8009dfc:	0801a9f8 	.word	0x0801a9f8

08009e00 <SendTxData>:

static void SendTxData(void)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b091      	sub	sp, #68	; 0x44
 8009e04:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009e26:	f107 0308 	add.w	r3, r7, #8
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7f7 ffee 	bl	8001e0c <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8009e30:	f7f7 f954 	bl	80010dc <SYS_GetTemperatureLevel>
 8009e34:	4603      	mov	r3, r0
 8009e36:	121b      	asrs	r3, r3, #8
 8009e38:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	4983      	ldr	r1, [pc, #524]	; (800a04c <SendTxData+0x24c>)
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7f6 fd1c 	bl	800087c <__aeabi_fmul>
 8009e44:	4603      	mov	r3, r0
 8009e46:	4982      	ldr	r1, [pc, #520]	; (800a050 <SendTxData+0x250>)
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7f6 fdcb 	bl	80009e4 <__aeabi_fdiv>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7f6 fe63 	bl	8000b1c <__aeabi_f2uiz>
 8009e56:	4603      	mov	r3, r0
 8009e58:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009e5a:	4b7e      	ldr	r3, [pc, #504]	; (800a054 <SendTxData+0x254>)
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	497b      	ldr	r1, [pc, #492]	; (800a050 <SendTxData+0x250>)
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f6 fd09 	bl	800087c <__aeabi_fmul>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f6 fe55 	bl	8000b1c <__aeabi_f2uiz>
 8009e72:	4603      	mov	r3, r0
 8009e74:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 8009e76:	4b77      	ldr	r3, [pc, #476]	; (800a054 <SendTxData+0x254>)
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	1c59      	adds	r1, r3, #1
 8009e7e:	6379      	str	r1, [r7, #52]	; 0x34
 8009e80:	4413      	add	r3, r2
 8009e82:	4a75      	ldr	r2, [pc, #468]	; (800a058 <SendTxData+0x258>)
 8009e84:	7812      	ldrb	r2, [r2, #0]
 8009e86:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009e88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009e8a:	0a1b      	lsrs	r3, r3, #8
 8009e8c:	b298      	uxth	r0, r3
 8009e8e:	4b71      	ldr	r3, [pc, #452]	; (800a054 <SendTxData+0x254>)
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e94:	1c59      	adds	r1, r3, #1
 8009e96:	6379      	str	r1, [r7, #52]	; 0x34
 8009e98:	4413      	add	r3, r2
 8009e9a:	b2c2      	uxtb	r2, r0
 8009e9c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009e9e:	4b6d      	ldr	r3, [pc, #436]	; (800a054 <SendTxData+0x254>)
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	6379      	str	r1, [r7, #52]	; 0x34
 8009ea8:	4413      	add	r3, r2
 8009eaa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009eb0:	4b68      	ldr	r3, [pc, #416]	; (800a054 <SendTxData+0x254>)
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	1c59      	adds	r1, r3, #1
 8009eb8:	6379      	str	r1, [r7, #52]	; 0x34
 8009eba:	4413      	add	r3, r2
 8009ebc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009ebe:	b2d2      	uxtb	r2, r2
 8009ec0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009ec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ec4:	0a1b      	lsrs	r3, r3, #8
 8009ec6:	b298      	uxth	r0, r3
 8009ec8:	4b62      	ldr	r3, [pc, #392]	; (800a054 <SendTxData+0x254>)
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6379      	str	r1, [r7, #52]	; 0x34
 8009ed2:	4413      	add	r3, r2
 8009ed4:	b2c2      	uxtb	r2, r0
 8009ed6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009ed8:	4b5e      	ldr	r3, [pc, #376]	; (800a054 <SendTxData+0x254>)
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ede:	1c59      	adds	r1, r3, #1
 8009ee0:	6379      	str	r1, [r7, #52]	; 0x34
 8009ee2:	4413      	add	r3, r2
 8009ee4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009eea:	4b5c      	ldr	r3, [pc, #368]	; (800a05c <SendTxData+0x25c>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b08      	cmp	r3, #8
 8009ef0:	d007      	beq.n	8009f02 <SendTxData+0x102>
 8009ef2:	4b5a      	ldr	r3, [pc, #360]	; (800a05c <SendTxData+0x25c>)
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d003      	beq.n	8009f02 <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009efa:	4b58      	ldr	r3, [pc, #352]	; (800a05c <SendTxData+0x25c>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d120      	bne.n	8009f44 <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 8009f02:	4b54      	ldr	r3, [pc, #336]	; (800a054 <SendTxData+0x254>)
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	6379      	str	r1, [r7, #52]	; 0x34
 8009f0c:	4413      	add	r3, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009f12:	4b50      	ldr	r3, [pc, #320]	; (800a054 <SendTxData+0x254>)
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f18:	1c59      	adds	r1, r3, #1
 8009f1a:	6379      	str	r1, [r7, #52]	; 0x34
 8009f1c:	4413      	add	r3, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009f22:	4b4c      	ldr	r3, [pc, #304]	; (800a054 <SendTxData+0x254>)
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f28:	1c59      	adds	r1, r3, #1
 8009f2a:	6379      	str	r1, [r7, #52]	; 0x34
 8009f2c:	4413      	add	r3, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009f32:	4b48      	ldr	r3, [pc, #288]	; (800a054 <SendTxData+0x254>)
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f38:	1c59      	adds	r1, r3, #1
 8009f3a:	6379      	str	r1, [r7, #52]	; 0x34
 8009f3c:	4413      	add	r3, r2
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	e05b      	b.n	8009ffc <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009f4c:	4b41      	ldr	r3, [pc, #260]	; (800a054 <SendTxData+0x254>)
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f52:	1c59      	adds	r1, r3, #1
 8009f54:	6379      	str	r1, [r7, #52]	; 0x34
 8009f56:	18d4      	adds	r4, r2, r3
 8009f58:	f7f7 fd22 	bl	80019a0 <GetBatteryLevel>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	1418      	asrs	r0, r3, #16
 8009f64:	4b3b      	ldr	r3, [pc, #236]	; (800a054 <SendTxData+0x254>)
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	6379      	str	r1, [r7, #52]	; 0x34
 8009f6e:	4413      	add	r3, r2
 8009f70:	b2c2      	uxtb	r2, r0
 8009f72:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	1218      	asrs	r0, r3, #8
 8009f78:	4b36      	ldr	r3, [pc, #216]	; (800a054 <SendTxData+0x254>)
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	6379      	str	r1, [r7, #52]	; 0x34
 8009f82:	4413      	add	r3, r2
 8009f84:	b2c2      	uxtb	r2, r0
 8009f86:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8009f88:	4b32      	ldr	r3, [pc, #200]	; (800a054 <SendTxData+0x254>)
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8e:	1c59      	adds	r1, r3, #1
 8009f90:	6379      	str	r1, [r7, #52]	; 0x34
 8009f92:	4413      	add	r3, r2
 8009f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	1418      	asrs	r0, r3, #16
 8009f9e:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <SendTxData+0x254>)
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa4:	1c59      	adds	r1, r3, #1
 8009fa6:	6379      	str	r1, [r7, #52]	; 0x34
 8009fa8:	4413      	add	r3, r2
 8009faa:	b2c2      	uxtb	r2, r0
 8009fac:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	1218      	asrs	r0, r3, #8
 8009fb2:	4b28      	ldr	r3, [pc, #160]	; (800a054 <SendTxData+0x254>)
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	1c59      	adds	r1, r3, #1
 8009fba:	6379      	str	r1, [r7, #52]	; 0x34
 8009fbc:	4413      	add	r3, r2
 8009fbe:	b2c2      	uxtb	r2, r0
 8009fc0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8009fc2:	4b24      	ldr	r3, [pc, #144]	; (800a054 <SendTxData+0x254>)
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc8:	1c59      	adds	r1, r3, #1
 8009fca:	6379      	str	r1, [r7, #52]	; 0x34
 8009fcc:	4413      	add	r3, r2
 8009fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8009fd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fd6:	0a1b      	lsrs	r3, r3, #8
 8009fd8:	b298      	uxth	r0, r3
 8009fda:	4b1e      	ldr	r3, [pc, #120]	; (800a054 <SendTxData+0x254>)
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	1c59      	adds	r1, r3, #1
 8009fe2:	6379      	str	r1, [r7, #52]	; 0x34
 8009fe4:	4413      	add	r3, r2
 8009fe6:	b2c2      	uxtb	r2, r0
 8009fe8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8009fea:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <SendTxData+0x254>)
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff0:	1c59      	adds	r1, r3, #1
 8009ff2:	6379      	str	r1, [r7, #52]	; 0x34
 8009ff4:	4413      	add	r3, r2
 8009ff6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009ff8:	b2d2      	uxtb	r2, r2
 8009ffa:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 8009ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	4b14      	ldr	r3, [pc, #80]	; (800a054 <SendTxData+0x254>)
 800a002:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a004:	1d3a      	adds	r2, r7, #4
 800a006:	2300      	movs	r3, #0
 800a008:	2100      	movs	r1, #0
 800a00a:	4812      	ldr	r0, [pc, #72]	; (800a054 <SendTxData+0x254>)
 800a00c:	f001 ff7a 	bl	800bf04 <LmHandlerSend>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <SendTxData+0x260>)
 800a018:	2201      	movs	r2, #1
 800a01a:	2100      	movs	r1, #0
 800a01c:	2001      	movs	r0, #1
 800a01e:	f010 f8cd 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a022:	e00e      	b.n	800a042 <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00b      	beq.n	800a042 <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a0d      	ldr	r2, [pc, #52]	; (800a064 <SendTxData+0x264>)
 800a02e:	fba2 2303 	umull	r2, r3, r2, r3
 800a032:	099b      	lsrs	r3, r3, #6
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <SendTxData+0x268>)
 800a038:	2201      	movs	r2, #1
 800a03a:	2100      	movs	r1, #0
 800a03c:	2001      	movs	r0, #1
 800a03e:	f010 f8bd 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800a042:	bf00      	nop
 800a044:	373c      	adds	r7, #60	; 0x3c
 800a046:	46bd      	mov	sp, r7
 800a048:	bd90      	pop	{r4, r7, pc}
 800a04a:	bf00      	nop
 800a04c:	42c80000 	.word	0x42c80000
 800a050:	41200000 	.word	0x41200000
 800a054:	20000080 	.word	0x20000080
 800a058:	2000026e 	.word	0x2000026e
 800a05c:	20000070 	.word	0x20000070
 800a060:	0801aa04 	.word	0x0801aa04
 800a064:	10624dd3 	.word	0x10624dd3
 800a068:	0801aa14 	.word	0x0801aa14

0800a06c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a074:	2100      	movs	r1, #0
 800a076:	2002      	movs	r0, #2
 800a078:	f00f fd72 	bl	8019b60 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a07c:	4803      	ldr	r0, [pc, #12]	; (800a08c <OnTxTimerEvent+0x20>)
 800a07e:	f00f fe25 	bl	8019ccc <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000164 	.word	0x20000164

0800a090 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a098:	2001      	movs	r0, #1
 800a09a:	f7f8 fbe9 	bl	8002870 <BSP_LED_Off>
}
 800a09e:	bf00      	nop
 800a0a0:	3708      	adds	r7, #8
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f7f8 fbde 	bl	8002870 <BSP_LED_Off>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a0c4:	2002      	movs	r0, #2
 800a0c6:	f7f8 fbf7 	bl	80028b8 <BSP_LED_Toggle>
}
 800a0ca:	bf00      	nop
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d044      	beq.n	800a16c <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d040      	beq.n	800a16c <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	f7f8 fb9c 	bl	8002828 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a0f0:	4820      	ldr	r0, [pc, #128]	; (800a174 <OnTxData+0xa0>)
 800a0f2:	f00f fdeb 	bl	8019ccc <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a0f6:	4b20      	ldr	r3, [pc, #128]	; (800a178 <OnTxData+0xa4>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	2002      	movs	r0, #2
 800a0fe:	f010 f85d 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	7b12      	ldrb	r2, [r2, #12]
 800a10a:	4611      	mov	r1, r2
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a112:	4610      	mov	r0, r2
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a11a:	9203      	str	r2, [sp, #12]
 800a11c:	9002      	str	r0, [sp, #8]
 800a11e:	9101      	str	r1, [sp, #4]
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	4b16      	ldr	r3, [pc, #88]	; (800a17c <OnTxData+0xa8>)
 800a124:	2200      	movs	r2, #0
 800a126:	2100      	movs	r1, #0
 800a128:	2003      	movs	r0, #3
 800a12a:	f010 f847 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a12e:	4b14      	ldr	r3, [pc, #80]	; (800a180 <OnTxData+0xac>)
 800a130:	2200      	movs	r2, #0
 800a132:	2100      	movs	r1, #0
 800a134:	2003      	movs	r0, #3
 800a136:	f010 f841 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	789b      	ldrb	r3, [r3, #2]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d10e      	bne.n	800a160 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	78db      	ldrb	r3, [r3, #3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <OnTxData+0x7a>
 800a14a:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <OnTxData+0xb0>)
 800a14c:	e000      	b.n	800a150 <OnTxData+0x7c>
 800a14e:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <OnTxData+0xb4>)
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <OnTxData+0xb8>)
 800a154:	2200      	movs	r2, #0
 800a156:	2100      	movs	r1, #0
 800a158:	2003      	movs	r0, #3
 800a15a:	f010 f82f 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a15e:	e005      	b.n	800a16c <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a160:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <OnTxData+0xbc>)
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	2003      	movs	r0, #3
 800a168:	f010 f828 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20000270 	.word	0x20000270
 800a178:	0801aa34 	.word	0x0801aa34
 800a17c:	0801aa68 	.word	0x0801aa68
 800a180:	0801aa9c 	.word	0x0801aa9c
 800a184:	0801aaac 	.word	0x0801aaac
 800a188:	0801aab0 	.word	0x0801aab0
 800a18c:	0801aab8 	.word	0x0801aab8
 800a190:	0801aacc 	.word	0x0801aacc

0800a194 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d028      	beq.n	800a1f4 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d11d      	bne.n	800a1e8 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a1ac:	4813      	ldr	r0, [pc, #76]	; (800a1fc <OnJoinRequest+0x68>)
 800a1ae:	f00f fdfb 	bl	8019da8 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a1b2:	2002      	movs	r0, #2
 800a1b4:	f7f8 fb5c 	bl	8002870 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a1b8:	4b11      	ldr	r3, [pc, #68]	; (800a200 <OnJoinRequest+0x6c>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	2002      	movs	r0, #2
 800a1c0:	f00f fffc 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	789b      	ldrb	r3, [r3, #2]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d106      	bne.n	800a1da <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a1cc:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <OnJoinRequest+0x70>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2002      	movs	r0, #2
 800a1d4:	f00f fff2 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a1d8:	e00c      	b.n	800a1f4 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a1da:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <OnJoinRequest+0x74>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2100      	movs	r1, #0
 800a1e0:	2002      	movs	r0, #2
 800a1e2:	f00f ffeb 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800a1e6:	e005      	b.n	800a1f4 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a1e8:	4b08      	ldr	r3, [pc, #32]	; (800a20c <OnJoinRequest+0x78>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	2002      	movs	r0, #2
 800a1f0:	f00f ffe4 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	200002a0 	.word	0x200002a0
 800a200:	0801aadc 	.word	0x0801aadc
 800a204:	0801aaf4 	.word	0x0801aaf4
 800a208:	0801ab14 	.word	0x0801ab14
 800a20c:	0801ab34 	.word	0x0801ab34

0800a210 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a214:	2100      	movs	r1, #0
 800a216:	2001      	movs	r0, #1
 800a218:	f00f fca2 	bl	8019b60 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a21c:	bf00      	nop
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a224:	4b15      	ldr	r3, [pc, #84]	; (800a27c <LoraInfo_Init+0x5c>)
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a22a:	4b14      	ldr	r3, [pc, #80]	; (800a27c <LoraInfo_Init+0x5c>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a230:	4b12      	ldr	r3, [pc, #72]	; (800a27c <LoraInfo_Init+0x5c>)
 800a232:	2200      	movs	r2, #0
 800a234:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <LoraInfo_Init+0x5c>)
 800a238:	2200      	movs	r2, #0
 800a23a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <LoraInfo_Init+0x5c>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f043 0320 	orr.w	r3, r3, #32
 800a244:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <LoraInfo_Init+0x5c>)
 800a246:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <LoraInfo_Init+0x5c>)
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d10c      	bne.n	800a26a <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a250:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <LoraInfo_Init+0x60>)
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	2000      	movs	r0, #0
 800a258:	f00f ffb0 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a25c:	bf00      	nop
 800a25e:	f00f ff9b 	bl	801a198 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a262:	4603      	mov	r3, r0
 800a264:	2b01      	cmp	r3, #1
 800a266:	d1fa      	bne.n	800a25e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a268:	e7fe      	b.n	800a268 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <LoraInfo_Init+0x5c>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <LoraInfo_Init+0x5c>)
 800a272:	2203      	movs	r2, #3
 800a274:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a276:	bf00      	nop
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200002b8 	.word	0x200002b8
 800a280:	0801ab8c 	.word	0x0801ab8c

0800a284 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a284:	b480      	push	{r7}
 800a286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <LoraInfo_GetPtr+0x10>)
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	200002b8 	.word	0x200002b8

0800a298 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a29c:	f7f8 fbc1 	bl	8002a22 <BSP_RADIO_Init>
 800a2a0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a2b0:	79fb      	ldrb	r3, [r7, #7]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7f8 fbe6 	bl	8002a84 <BSP_RADIO_ConfigRFSwitch>
 800a2b8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a2c6:	f7f8 fc2b 	bl	8002b20 <BSP_RADIO_GetTxConfig>
 800a2ca:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a2d4:	f7f8 fc2b 	bl	8002b2e <BSP_RADIO_IsTCXO>
 800a2d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a2e2:	f7f8 fc2b 	bl	8002b3c <BSP_RADIO_IsDCDC>
 800a2e6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	33f1      	adds	r3, #241	; 0xf1
 800a2f8:	2210      	movs	r2, #16
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f00b fd57 	bl	8015db0 <memset1>
    ctx->M_n = 0;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	22f0      	movs	r2, #240	; 0xf0
 800a30e:	2100      	movs	r1, #0
 800a310:	4618      	mov	r0, r3
 800a312:	f00b fd4d 	bl	8015db0 <memset1>
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	461a      	mov	r2, r3
 800a32c:	2110      	movs	r1, #16
 800a32e:	6838      	ldr	r0, [r7, #0]
 800a330:	f000 fe60 	bl	800aff4 <lorawan_aes_set_key>
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08c      	sub	sp, #48	; 0x30
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 80a1 	beq.w	800a496 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a35a:	f1c3 0310 	rsb	r3, r3, #16
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	4293      	cmp	r3, r2
 800a362:	bf28      	it	cs
 800a364:	4613      	movcs	r3, r2
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a374:	4413      	add	r3, r2
 800a376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a378:	b292      	uxth	r2, r2
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f00b fcdc 	bl	8015d3a <memcpy1>
        ctx->M_n += mlen;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38a:	441a      	add	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a398:	2b0f      	cmp	r3, #15
 800a39a:	f240 808d 	bls.w	800a4b8 <AES_CMAC_Update+0x17c>
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	f000 8088 	beq.w	800a4b8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3ac:	e015      	b.n	800a3da <AES_CMAC_Update+0x9e>
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	4413      	add	r3, r2
 800a3b4:	33f1      	adds	r3, #241	; 0xf1
 800a3b6:	781a      	ldrb	r2, [r3, #0]
 800a3b8:	68f9      	ldr	r1, [r7, #12]
 800a3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3bc:	440b      	add	r3, r1
 800a3be:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	4053      	eors	r3, r2
 800a3c6:	b2d9      	uxtb	r1, r3
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	4413      	add	r3, r2
 800a3ce:	33f1      	adds	r3, #241	; 0xf1
 800a3d0:	460a      	mov	r2, r1
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	2b0f      	cmp	r3, #15
 800a3de:	dde6      	ble.n	800a3ae <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a3e6:	f107 0314 	add.w	r3, r7, #20
 800a3ea:	2210      	movs	r2, #16
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f00b fca4 	bl	8015d3a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	f107 0114 	add.w	r1, r7, #20
 800a3f8:	f107 0314 	add.w	r3, r7, #20
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 fed7 	bl	800b1b0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	33f1      	adds	r3, #241	; 0xf1
 800a406:	f107 0114 	add.w	r1, r7, #20
 800a40a:	2210      	movs	r2, #16
 800a40c:	4618      	mov	r0, r3
 800a40e:	f00b fc94 	bl	8015d3a <memcpy1>

        data += mlen;
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	4413      	add	r3, r2
 800a418:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a422:	e038      	b.n	800a496 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a424:	2300      	movs	r3, #0
 800a426:	62bb      	str	r3, [r7, #40]	; 0x28
 800a428:	e013      	b.n	800a452 <AES_CMAC_Update+0x116>
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	4413      	add	r3, r2
 800a430:	33f1      	adds	r3, #241	; 0xf1
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	68b9      	ldr	r1, [r7, #8]
 800a438:	440b      	add	r3, r1
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	4053      	eors	r3, r2
 800a43e:	b2d9      	uxtb	r1, r3
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	4413      	add	r3, r2
 800a446:	33f1      	adds	r3, #241	; 0xf1
 800a448:	460a      	mov	r2, r1
 800a44a:	701a      	strb	r2, [r3, #0]
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	3301      	adds	r3, #1
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b0f      	cmp	r3, #15
 800a456:	dde8      	ble.n	800a42a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a45e:	f107 0314 	add.w	r3, r7, #20
 800a462:	2210      	movs	r2, #16
 800a464:	4618      	mov	r0, r3
 800a466:	f00b fc68 	bl	8015d3a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	f107 0114 	add.w	r1, r7, #20
 800a470:	f107 0314 	add.w	r3, r7, #20
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fe9b 	bl	800b1b0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	33f1      	adds	r3, #241	; 0xf1
 800a47e:	f107 0114 	add.w	r1, r7, #20
 800a482:	2210      	movs	r2, #16
 800a484:	4618      	mov	r0, r3
 800a486:	f00b fc58 	bl	8015d3a <memcpy1>

        data += 16;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	3310      	adds	r3, #16
 800a48e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	3b10      	subs	r3, #16
 800a494:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b10      	cmp	r3, #16
 800a49a:	d8c3      	bhi.n	800a424 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	b292      	uxth	r2, r2
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f00b fc46 	bl	8015d3a <memcpy1>
    ctx->M_n = len;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a4b6:	e000      	b.n	800a4ba <AES_CMAC_Update+0x17e>
            return;
 800a4b8:	bf00      	nop
}
 800a4ba:	3730      	adds	r7, #48	; 0x30
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b092      	sub	sp, #72	; 0x48
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a4ca:	f107 031c 	add.w	r3, r7, #28
 800a4ce:	2210      	movs	r2, #16
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f00b fc6c 	bl	8015db0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	f107 011c 	add.w	r1, r7, #28
 800a4de:	f107 031c 	add.w	r3, r7, #28
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fe64 	bl	800b1b0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a4e8:	7f3b      	ldrb	r3, [r7, #28]
 800a4ea:	b25b      	sxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	da31      	bge.n	800a554 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4f4:	e01c      	b.n	800a530 <AES_CMAC_Final+0x70>
 800a4f6:	f107 021c 	add.w	r2, r7, #28
 800a4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fc:	4413      	add	r3, r2
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	b25a      	sxtb	r2, r3
 800a504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a506:	3301      	adds	r3, #1
 800a508:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a50c:	440b      	add	r3, r1
 800a50e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a512:	09db      	lsrs	r3, r3, #7
 800a514:	b2db      	uxtb	r3, r3
 800a516:	b25b      	sxtb	r3, r3
 800a518:	4313      	orrs	r3, r2
 800a51a:	b25b      	sxtb	r3, r3
 800a51c:	b2d9      	uxtb	r1, r3
 800a51e:	f107 021c 	add.w	r2, r7, #28
 800a522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a524:	4413      	add	r3, r2
 800a526:	460a      	mov	r2, r1
 800a528:	701a      	strb	r2, [r3, #0]
 800a52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a52c:	3301      	adds	r3, #1
 800a52e:	647b      	str	r3, [r7, #68]	; 0x44
 800a530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a532:	2b0e      	cmp	r3, #14
 800a534:	dddf      	ble.n	800a4f6 <AES_CMAC_Final+0x36>
 800a536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a53a:	005b      	lsls	r3, r3, #1
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800a542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a546:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a54a:	43db      	mvns	r3, r3
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a552:	e028      	b.n	800a5a6 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800a554:	2300      	movs	r3, #0
 800a556:	643b      	str	r3, [r7, #64]	; 0x40
 800a558:	e01c      	b.n	800a594 <AES_CMAC_Final+0xd4>
 800a55a:	f107 021c 	add.w	r2, r7, #28
 800a55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a560:	4413      	add	r3, r2
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	b25a      	sxtb	r2, r3
 800a568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56a:	3301      	adds	r3, #1
 800a56c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a570:	440b      	add	r3, r1
 800a572:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a576:	09db      	lsrs	r3, r3, #7
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	b2d9      	uxtb	r1, r3
 800a582:	f107 021c 	add.w	r2, r7, #28
 800a586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a588:	4413      	add	r3, r2
 800a58a:	460a      	mov	r2, r1
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a590:	3301      	adds	r3, #1
 800a592:	643b      	str	r3, [r7, #64]	; 0x40
 800a594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a596:	2b0e      	cmp	r3, #14
 800a598:	dddf      	ble.n	800a55a <AES_CMAC_Final+0x9a>
 800a59a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d11d      	bne.n	800a5ec <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b4:	e016      	b.n	800a5e4 <AES_CMAC_Final+0x124>
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	f107 011c 	add.w	r1, r7, #28
 800a5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c8:	440b      	add	r3, r1
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4053      	eors	r3, r2
 800a5ce:	b2d9      	uxtb	r1, r3
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a5da:	460a      	mov	r2, r1
 800a5dc:	701a      	strb	r2, [r3, #0]
 800a5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e6:	2b0f      	cmp	r3, #15
 800a5e8:	dde5      	ble.n	800a5b6 <AES_CMAC_Final+0xf6>
 800a5ea:	e098      	b.n	800a71e <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a5ec:	7f3b      	ldrb	r3, [r7, #28]
 800a5ee:	b25b      	sxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	da31      	bge.n	800a658 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5f8:	e01c      	b.n	800a634 <AES_CMAC_Final+0x174>
 800a5fa:	f107 021c 	add.w	r2, r7, #28
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	4413      	add	r3, r2
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	b25a      	sxtb	r2, r3
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	3301      	adds	r3, #1
 800a60c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a610:	440b      	add	r3, r1
 800a612:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a616:	09db      	lsrs	r3, r3, #7
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	b25b      	sxtb	r3, r3
 800a61c:	4313      	orrs	r3, r2
 800a61e:	b25b      	sxtb	r3, r3
 800a620:	b2d9      	uxtb	r1, r3
 800a622:	f107 021c 	add.w	r2, r7, #28
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	4413      	add	r3, r2
 800a62a:	460a      	mov	r2, r1
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	3301      	adds	r3, #1
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	2b0e      	cmp	r3, #14
 800a638:	dddf      	ble.n	800a5fa <AES_CMAC_Final+0x13a>
 800a63a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	b2db      	uxtb	r3, r3
 800a642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800a646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a64a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a64e:	43db      	mvns	r3, r3
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a656:	e028      	b.n	800a6aa <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800a658:	2300      	movs	r3, #0
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
 800a65c:	e01c      	b.n	800a698 <AES_CMAC_Final+0x1d8>
 800a65e:	f107 021c 	add.w	r2, r7, #28
 800a662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a664:	4413      	add	r3, r2
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	b25a      	sxtb	r2, r3
 800a66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66e:	3301      	adds	r3, #1
 800a670:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a674:	440b      	add	r3, r1
 800a676:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a67a:	09db      	lsrs	r3, r3, #7
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	b25b      	sxtb	r3, r3
 800a680:	4313      	orrs	r3, r2
 800a682:	b25b      	sxtb	r3, r3
 800a684:	b2d9      	uxtb	r1, r3
 800a686:	f107 021c 	add.w	r2, r7, #28
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	4413      	add	r3, r2
 800a68e:	460a      	mov	r2, r1
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a694:	3301      	adds	r3, #1
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	2b0e      	cmp	r3, #14
 800a69c:	dddf      	ble.n	800a65e <AES_CMAC_Final+0x19e>
 800a69e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	2280      	movs	r2, #128	; 0x80
 800a6b6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800a6ba:	e007      	b.n	800a6cc <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a6e0:	2b0f      	cmp	r3, #15
 800a6e2:	d9eb      	bls.n	800a6bc <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	633b      	str	r3, [r7, #48]	; 0x30
 800a6e8:	e016      	b.n	800a718 <AES_CMAC_Final+0x258>
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a6f4:	781a      	ldrb	r2, [r3, #0]
 800a6f6:	f107 011c 	add.w	r1, r7, #28
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	440b      	add	r3, r1
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	4053      	eors	r3, r2
 800a702:	b2d9      	uxtb	r1, r3
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a708:	4413      	add	r3, r2
 800a70a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a70e:	460a      	mov	r2, r1
 800a710:	701a      	strb	r2, [r3, #0]
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	3301      	adds	r3, #1
 800a716:	633b      	str	r3, [r7, #48]	; 0x30
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	2b0f      	cmp	r3, #15
 800a71c:	dde5      	ble.n	800a6ea <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800a71e:	2300      	movs	r3, #0
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a722:	e015      	b.n	800a750 <AES_CMAC_Final+0x290>
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a728:	4413      	add	r3, r2
 800a72a:	33f1      	adds	r3, #241	; 0xf1
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	440b      	add	r3, r1
 800a734:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	4053      	eors	r3, r2
 800a73c:	b2d9      	uxtb	r1, r3
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a742:	4413      	add	r3, r2
 800a744:	33f1      	adds	r3, #241	; 0xf1
 800a746:	460a      	mov	r2, r1
 800a748:	701a      	strb	r2, [r3, #0]
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	3301      	adds	r3, #1
 800a74e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a752:	2b0f      	cmp	r3, #15
 800a754:	dde6      	ble.n	800a724 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a75c:	f107 030c 	add.w	r3, r7, #12
 800a760:	2210      	movs	r2, #16
 800a762:	4618      	mov	r0, r3
 800a764:	f00b fae9 	bl	8015d3a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	f107 030c 	add.w	r3, r7, #12
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fd1d 	bl	800b1b0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a776:	f107 031c 	add.w	r3, r7, #28
 800a77a:	2210      	movs	r2, #16
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f00b fb16 	bl	8015db0 <memset1>
}
 800a784:	bf00      	nop
 800a786:	3748      	adds	r7, #72	; 0x48
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781a      	ldrb	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	7852      	ldrb	r2, [r2, #1]
 800a7a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3302      	adds	r3, #2
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	7892      	ldrb	r2, [r2, #2]
 800a7b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3303      	adds	r3, #3
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	78d2      	ldrb	r2, [r2, #3]
 800a7ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	7912      	ldrb	r2, [r2, #4]
 800a7c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3305      	adds	r3, #5
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	7952      	ldrb	r2, [r2, #5]
 800a7ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3306      	adds	r3, #6
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	7992      	ldrb	r2, [r2, #6]
 800a7d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	79d2      	ldrb	r2, [r2, #7]
 800a7e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	7a12      	ldrb	r2, [r2, #8]
 800a7ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3309      	adds	r3, #9
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	7a52      	ldrb	r2, [r2, #9]
 800a7f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	330a      	adds	r3, #10
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	7a92      	ldrb	r2, [r2, #10]
 800a800:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	330b      	adds	r3, #11
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	7ad2      	ldrb	r2, [r2, #11]
 800a80a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	330c      	adds	r3, #12
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	7b12      	ldrb	r2, [r2, #12]
 800a814:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	330d      	adds	r3, #13
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	7b52      	ldrb	r2, [r2, #13]
 800a81e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	330e      	adds	r3, #14
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	7b92      	ldrb	r2, [r2, #14]
 800a828:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	330f      	adds	r3, #15
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	7bd2      	ldrb	r2, [r2, #15]
 800a832:	701a      	strb	r2, [r3, #0]
#endif
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	bc80      	pop	{r7}
 800a83c:	4770      	bx	lr

0800a83e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	4613      	mov	r3, r2
 800a84a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a84c:	e007      	b.n	800a85e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	1c53      	adds	r3, r2, #1
 800a852:	60bb      	str	r3, [r7, #8]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	1c59      	adds	r1, r3, #1
 800a858:	60f9      	str	r1, [r7, #12]
 800a85a:	7812      	ldrb	r2, [r2, #0]
 800a85c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	1e5a      	subs	r2, r3, #1
 800a862:	71fa      	strb	r2, [r7, #7]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1f2      	bne.n	800a84e <copy_block_nn+0x10>
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	bc80      	pop	{r7}
 800a872:	4770      	bx	lr

0800a874 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	781a      	ldrb	r2, [r3, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	4053      	eors	r3, r2
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3301      	adds	r3, #1
 800a892:	7819      	ldrb	r1, [r3, #0]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	3301      	adds	r3, #1
 800a898:	781a      	ldrb	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3301      	adds	r3, #1
 800a89e:	404a      	eors	r2, r1
 800a8a0:	b2d2      	uxtb	r2, r2
 800a8a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3302      	adds	r3, #2
 800a8a8:	7819      	ldrb	r1, [r3, #0]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	3302      	adds	r3, #2
 800a8ae:	781a      	ldrb	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	404a      	eors	r2, r1
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3303      	adds	r3, #3
 800a8be:	7819      	ldrb	r1, [r3, #0]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	3303      	adds	r3, #3
 800a8c4:	781a      	ldrb	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3303      	adds	r3, #3
 800a8ca:	404a      	eors	r2, r1
 800a8cc:	b2d2      	uxtb	r2, r2
 800a8ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	7819      	ldrb	r1, [r3, #0]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	781a      	ldrb	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	404a      	eors	r2, r1
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3305      	adds	r3, #5
 800a8ea:	7819      	ldrb	r1, [r3, #0]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	3305      	adds	r3, #5
 800a8f0:	781a      	ldrb	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3305      	adds	r3, #5
 800a8f6:	404a      	eors	r2, r1
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3306      	adds	r3, #6
 800a900:	7819      	ldrb	r1, [r3, #0]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	3306      	adds	r3, #6
 800a906:	781a      	ldrb	r2, [r3, #0]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3306      	adds	r3, #6
 800a90c:	404a      	eors	r2, r1
 800a90e:	b2d2      	uxtb	r2, r2
 800a910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3307      	adds	r3, #7
 800a916:	7819      	ldrb	r1, [r3, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	3307      	adds	r3, #7
 800a91c:	781a      	ldrb	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3307      	adds	r3, #7
 800a922:	404a      	eors	r2, r1
 800a924:	b2d2      	uxtb	r2, r2
 800a926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3308      	adds	r3, #8
 800a92c:	7819      	ldrb	r1, [r3, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	3308      	adds	r3, #8
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3308      	adds	r3, #8
 800a938:	404a      	eors	r2, r1
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3309      	adds	r3, #9
 800a942:	7819      	ldrb	r1, [r3, #0]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	3309      	adds	r3, #9
 800a948:	781a      	ldrb	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3309      	adds	r3, #9
 800a94e:	404a      	eors	r2, r1
 800a950:	b2d2      	uxtb	r2, r2
 800a952:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	330a      	adds	r3, #10
 800a958:	7819      	ldrb	r1, [r3, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	330a      	adds	r3, #10
 800a95e:	781a      	ldrb	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	330a      	adds	r3, #10
 800a964:	404a      	eors	r2, r1
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	330b      	adds	r3, #11
 800a96e:	7819      	ldrb	r1, [r3, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	330b      	adds	r3, #11
 800a974:	781a      	ldrb	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	330b      	adds	r3, #11
 800a97a:	404a      	eors	r2, r1
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	330c      	adds	r3, #12
 800a984:	7819      	ldrb	r1, [r3, #0]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	330c      	adds	r3, #12
 800a98a:	781a      	ldrb	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	330c      	adds	r3, #12
 800a990:	404a      	eors	r2, r1
 800a992:	b2d2      	uxtb	r2, r2
 800a994:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	330d      	adds	r3, #13
 800a99a:	7819      	ldrb	r1, [r3, #0]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	330d      	adds	r3, #13
 800a9a0:	781a      	ldrb	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	330d      	adds	r3, #13
 800a9a6:	404a      	eors	r2, r1
 800a9a8:	b2d2      	uxtb	r2, r2
 800a9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	330e      	adds	r3, #14
 800a9b0:	7819      	ldrb	r1, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	330e      	adds	r3, #14
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	330e      	adds	r3, #14
 800a9bc:	404a      	eors	r2, r1
 800a9be:	b2d2      	uxtb	r2, r2
 800a9c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	330f      	adds	r3, #15
 800a9c6:	7819      	ldrb	r1, [r3, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	330f      	adds	r3, #15
 800a9cc:	781a      	ldrb	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	330f      	adds	r3, #15
 800a9d2:	404a      	eors	r2, r1
 800a9d4:	b2d2      	uxtb	r2, r2
 800a9d6:	701a      	strb	r2, [r3, #0]
#endif
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr

0800a9e2 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	4053      	eors	r3, r2
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	3301      	adds	r3, #1
 800aa02:	7819      	ldrb	r1, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3301      	adds	r3, #1
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	404a      	eors	r2, r1
 800aa10:	b2d2      	uxtb	r2, r2
 800aa12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	3302      	adds	r3, #2
 800aa18:	7819      	ldrb	r1, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3302      	adds	r3, #2
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3302      	adds	r3, #2
 800aa24:	404a      	eors	r2, r1
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	3303      	adds	r3, #3
 800aa2e:	7819      	ldrb	r1, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3303      	adds	r3, #3
 800aa34:	781a      	ldrb	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3303      	adds	r3, #3
 800aa3a:	404a      	eors	r2, r1
 800aa3c:	b2d2      	uxtb	r2, r2
 800aa3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	3304      	adds	r3, #4
 800aa44:	7819      	ldrb	r1, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	404a      	eors	r2, r1
 800aa52:	b2d2      	uxtb	r2, r2
 800aa54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	3305      	adds	r3, #5
 800aa5a:	7819      	ldrb	r1, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3305      	adds	r3, #5
 800aa60:	781a      	ldrb	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3305      	adds	r3, #5
 800aa66:	404a      	eors	r2, r1
 800aa68:	b2d2      	uxtb	r2, r2
 800aa6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	3306      	adds	r3, #6
 800aa70:	7819      	ldrb	r1, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3306      	adds	r3, #6
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3306      	adds	r3, #6
 800aa7c:	404a      	eors	r2, r1
 800aa7e:	b2d2      	uxtb	r2, r2
 800aa80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	3307      	adds	r3, #7
 800aa86:	7819      	ldrb	r1, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3307      	adds	r3, #7
 800aa8c:	781a      	ldrb	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3307      	adds	r3, #7
 800aa92:	404a      	eors	r2, r1
 800aa94:	b2d2      	uxtb	r2, r2
 800aa96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	3308      	adds	r3, #8
 800aa9c:	7819      	ldrb	r1, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	781a      	ldrb	r2, [r3, #0]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	404a      	eors	r2, r1
 800aaaa:	b2d2      	uxtb	r2, r2
 800aaac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	3309      	adds	r3, #9
 800aab2:	7819      	ldrb	r1, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3309      	adds	r3, #9
 800aab8:	781a      	ldrb	r2, [r3, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3309      	adds	r3, #9
 800aabe:	404a      	eors	r2, r1
 800aac0:	b2d2      	uxtb	r2, r2
 800aac2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	330a      	adds	r3, #10
 800aac8:	7819      	ldrb	r1, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	330a      	adds	r3, #10
 800aace:	781a      	ldrb	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	330a      	adds	r3, #10
 800aad4:	404a      	eors	r2, r1
 800aad6:	b2d2      	uxtb	r2, r2
 800aad8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	330b      	adds	r3, #11
 800aade:	7819      	ldrb	r1, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	330b      	adds	r3, #11
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	330b      	adds	r3, #11
 800aaea:	404a      	eors	r2, r1
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	330c      	adds	r3, #12
 800aaf4:	7819      	ldrb	r1, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	330c      	adds	r3, #12
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	330c      	adds	r3, #12
 800ab00:	404a      	eors	r2, r1
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	330d      	adds	r3, #13
 800ab0a:	7819      	ldrb	r1, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	330d      	adds	r3, #13
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	330d      	adds	r3, #13
 800ab16:	404a      	eors	r2, r1
 800ab18:	b2d2      	uxtb	r2, r2
 800ab1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	330e      	adds	r3, #14
 800ab20:	7819      	ldrb	r1, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	330e      	adds	r3, #14
 800ab26:	781a      	ldrb	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	330e      	adds	r3, #14
 800ab2c:	404a      	eors	r2, r1
 800ab2e:	b2d2      	uxtb	r2, r2
 800ab30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	330f      	adds	r3, #15
 800ab36:	7819      	ldrb	r1, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	330f      	adds	r3, #15
 800ab3c:	781a      	ldrb	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	330f      	adds	r3, #15
 800ab42:	404a      	eors	r2, r1
 800ab44:	b2d2      	uxtb	r2, r2
 800ab46:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ab48:	bf00      	nop
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bc80      	pop	{r7}
 800ab50:	4770      	bx	lr

0800ab52 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fe88 	bl	800a874 <xor_block>
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4b48      	ldr	r3, [pc, #288]	; (800ac9c <shift_sub_rows+0x130>)
 800ab7c:	5c9a      	ldrb	r2, [r3, r2]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	701a      	strb	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3304      	adds	r3, #4
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4a43      	ldr	r2, [pc, #268]	; (800ac9c <shift_sub_rows+0x130>)
 800ab90:	5c52      	ldrb	r2, [r2, r1]
 800ab92:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3308      	adds	r3, #8
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	4a3e      	ldr	r2, [pc, #248]	; (800ac9c <shift_sub_rows+0x130>)
 800aba2:	5c52      	ldrb	r2, [r2, r1]
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	330c      	adds	r3, #12
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	4619      	mov	r1, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	330c      	adds	r3, #12
 800abb2:	4a3a      	ldr	r2, [pc, #232]	; (800ac9c <shift_sub_rows+0x130>)
 800abb4:	5c52      	ldrb	r2, [r2, r1]
 800abb6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	785b      	ldrb	r3, [r3, #1]
 800abbc:	73fb      	strb	r3, [r7, #15]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3305      	adds	r3, #5
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	4619      	mov	r1, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3301      	adds	r3, #1
 800abca:	4a34      	ldr	r2, [pc, #208]	; (800ac9c <shift_sub_rows+0x130>)
 800abcc:	5c52      	ldrb	r2, [r2, r1]
 800abce:	701a      	strb	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3309      	adds	r3, #9
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	4619      	mov	r1, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3305      	adds	r3, #5
 800abdc:	4a2f      	ldr	r2, [pc, #188]	; (800ac9c <shift_sub_rows+0x130>)
 800abde:	5c52      	ldrb	r2, [r2, r1]
 800abe0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	330d      	adds	r3, #13
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	4619      	mov	r1, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3309      	adds	r3, #9
 800abee:	4a2b      	ldr	r2, [pc, #172]	; (800ac9c <shift_sub_rows+0x130>)
 800abf0:	5c52      	ldrb	r2, [r2, r1]
 800abf2:	701a      	strb	r2, [r3, #0]
 800abf4:	7bfa      	ldrb	r2, [r7, #15]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	330d      	adds	r3, #13
 800abfa:	4928      	ldr	r1, [pc, #160]	; (800ac9c <shift_sub_rows+0x130>)
 800abfc:	5c8a      	ldrb	r2, [r1, r2]
 800abfe:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	789b      	ldrb	r3, [r3, #2]
 800ac04:	73fb      	strb	r3, [r7, #15]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	330a      	adds	r3, #10
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	3302      	adds	r3, #2
 800ac12:	4a22      	ldr	r2, [pc, #136]	; (800ac9c <shift_sub_rows+0x130>)
 800ac14:	5c52      	ldrb	r2, [r2, r1]
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	7bfa      	ldrb	r2, [r7, #15]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	330a      	adds	r3, #10
 800ac1e:	491f      	ldr	r1, [pc, #124]	; (800ac9c <shift_sub_rows+0x130>)
 800ac20:	5c8a      	ldrb	r2, [r1, r2]
 800ac22:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	799b      	ldrb	r3, [r3, #6]
 800ac28:	73fb      	strb	r3, [r7, #15]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	330e      	adds	r3, #14
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	4619      	mov	r1, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3306      	adds	r3, #6
 800ac36:	4a19      	ldr	r2, [pc, #100]	; (800ac9c <shift_sub_rows+0x130>)
 800ac38:	5c52      	ldrb	r2, [r2, r1]
 800ac3a:	701a      	strb	r2, [r3, #0]
 800ac3c:	7bfa      	ldrb	r2, [r7, #15]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	330e      	adds	r3, #14
 800ac42:	4916      	ldr	r1, [pc, #88]	; (800ac9c <shift_sub_rows+0x130>)
 800ac44:	5c8a      	ldrb	r2, [r1, r2]
 800ac46:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7bdb      	ldrb	r3, [r3, #15]
 800ac4c:	73fb      	strb	r3, [r7, #15]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	330b      	adds	r3, #11
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	4619      	mov	r1, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	330f      	adds	r3, #15
 800ac5a:	4a10      	ldr	r2, [pc, #64]	; (800ac9c <shift_sub_rows+0x130>)
 800ac5c:	5c52      	ldrb	r2, [r2, r1]
 800ac5e:	701a      	strb	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3307      	adds	r3, #7
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	330b      	adds	r3, #11
 800ac6c:	4a0b      	ldr	r2, [pc, #44]	; (800ac9c <shift_sub_rows+0x130>)
 800ac6e:	5c52      	ldrb	r2, [r2, r1]
 800ac70:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3303      	adds	r3, #3
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	4a07      	ldr	r2, [pc, #28]	; (800ac9c <shift_sub_rows+0x130>)
 800ac80:	5c52      	ldrb	r2, [r2, r1]
 800ac82:	701a      	strb	r2, [r3, #0]
 800ac84:	7bfa      	ldrb	r2, [r7, #15]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3303      	adds	r3, #3
 800ac8a:	4904      	ldr	r1, [pc, #16]	; (800ac9c <shift_sub_rows+0x130>)
 800ac8c:	5c8a      	ldrb	r2, [r1, r2]
 800ac8e:	701a      	strb	r2, [r3, #0]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	0801b1e0 	.word	0x0801b1e0

0800aca0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800aca8:	f107 0308 	add.w	r3, r7, #8
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fd6c 	bl	800a78c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800acb4:	7a3b      	ldrb	r3, [r7, #8]
 800acb6:	461a      	mov	r2, r3
 800acb8:	4b9a      	ldr	r3, [pc, #616]	; (800af24 <mix_sub_columns+0x284>)
 800acba:	5c9a      	ldrb	r2, [r3, r2]
 800acbc:	7b7b      	ldrb	r3, [r7, #13]
 800acbe:	4619      	mov	r1, r3
 800acc0:	4b99      	ldr	r3, [pc, #612]	; (800af28 <mix_sub_columns+0x288>)
 800acc2:	5c5b      	ldrb	r3, [r3, r1]
 800acc4:	4053      	eors	r3, r2
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	7cbb      	ldrb	r3, [r7, #18]
 800acca:	4619      	mov	r1, r3
 800accc:	4b97      	ldr	r3, [pc, #604]	; (800af2c <mix_sub_columns+0x28c>)
 800acce:	5c5b      	ldrb	r3, [r3, r1]
 800acd0:	4053      	eors	r3, r2
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	4619      	mov	r1, r3
 800acd8:	4b94      	ldr	r3, [pc, #592]	; (800af2c <mix_sub_columns+0x28c>)
 800acda:	5c5b      	ldrb	r3, [r3, r1]
 800acdc:	4053      	eors	r3, r2
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ace4:	7a3b      	ldrb	r3, [r7, #8]
 800ace6:	461a      	mov	r2, r3
 800ace8:	4b90      	ldr	r3, [pc, #576]	; (800af2c <mix_sub_columns+0x28c>)
 800acea:	5c9a      	ldrb	r2, [r3, r2]
 800acec:	7b7b      	ldrb	r3, [r7, #13]
 800acee:	4619      	mov	r1, r3
 800acf0:	4b8c      	ldr	r3, [pc, #560]	; (800af24 <mix_sub_columns+0x284>)
 800acf2:	5c5b      	ldrb	r3, [r3, r1]
 800acf4:	4053      	eors	r3, r2
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	7cbb      	ldrb	r3, [r7, #18]
 800acfa:	4619      	mov	r1, r3
 800acfc:	4b8a      	ldr	r3, [pc, #552]	; (800af28 <mix_sub_columns+0x288>)
 800acfe:	5c5b      	ldrb	r3, [r3, r1]
 800ad00:	4053      	eors	r3, r2
 800ad02:	b2d9      	uxtb	r1, r3
 800ad04:	7dfb      	ldrb	r3, [r7, #23]
 800ad06:	461a      	mov	r2, r3
 800ad08:	4b88      	ldr	r3, [pc, #544]	; (800af2c <mix_sub_columns+0x28c>)
 800ad0a:	5c9a      	ldrb	r2, [r3, r2]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	404a      	eors	r2, r1
 800ad12:	b2d2      	uxtb	r2, r2
 800ad14:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ad16:	7a3b      	ldrb	r3, [r7, #8]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4b84      	ldr	r3, [pc, #528]	; (800af2c <mix_sub_columns+0x28c>)
 800ad1c:	5c9a      	ldrb	r2, [r3, r2]
 800ad1e:	7b7b      	ldrb	r3, [r7, #13]
 800ad20:	4619      	mov	r1, r3
 800ad22:	4b82      	ldr	r3, [pc, #520]	; (800af2c <mix_sub_columns+0x28c>)
 800ad24:	5c5b      	ldrb	r3, [r3, r1]
 800ad26:	4053      	eors	r3, r2
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	7cbb      	ldrb	r3, [r7, #18]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4b7d      	ldr	r3, [pc, #500]	; (800af24 <mix_sub_columns+0x284>)
 800ad30:	5c5b      	ldrb	r3, [r3, r1]
 800ad32:	4053      	eors	r3, r2
 800ad34:	b2d9      	uxtb	r1, r3
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4b7b      	ldr	r3, [pc, #492]	; (800af28 <mix_sub_columns+0x288>)
 800ad3c:	5c9a      	ldrb	r2, [r3, r2]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3302      	adds	r3, #2
 800ad42:	404a      	eors	r2, r1
 800ad44:	b2d2      	uxtb	r2, r2
 800ad46:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ad48:	7a3b      	ldrb	r3, [r7, #8]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4b76      	ldr	r3, [pc, #472]	; (800af28 <mix_sub_columns+0x288>)
 800ad4e:	5c9a      	ldrb	r2, [r3, r2]
 800ad50:	7b7b      	ldrb	r3, [r7, #13]
 800ad52:	4619      	mov	r1, r3
 800ad54:	4b75      	ldr	r3, [pc, #468]	; (800af2c <mix_sub_columns+0x28c>)
 800ad56:	5c5b      	ldrb	r3, [r3, r1]
 800ad58:	4053      	eors	r3, r2
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	7cbb      	ldrb	r3, [r7, #18]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4b72      	ldr	r3, [pc, #456]	; (800af2c <mix_sub_columns+0x28c>)
 800ad62:	5c5b      	ldrb	r3, [r3, r1]
 800ad64:	4053      	eors	r3, r2
 800ad66:	b2d9      	uxtb	r1, r3
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	4b6d      	ldr	r3, [pc, #436]	; (800af24 <mix_sub_columns+0x284>)
 800ad6e:	5c9a      	ldrb	r2, [r3, r2]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3303      	adds	r3, #3
 800ad74:	404a      	eors	r2, r1
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ad7a:	7b3b      	ldrb	r3, [r7, #12]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b69      	ldr	r3, [pc, #420]	; (800af24 <mix_sub_columns+0x284>)
 800ad80:	5c9a      	ldrb	r2, [r3, r2]
 800ad82:	7c7b      	ldrb	r3, [r7, #17]
 800ad84:	4619      	mov	r1, r3
 800ad86:	4b68      	ldr	r3, [pc, #416]	; (800af28 <mix_sub_columns+0x288>)
 800ad88:	5c5b      	ldrb	r3, [r3, r1]
 800ad8a:	4053      	eors	r3, r2
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	7dbb      	ldrb	r3, [r7, #22]
 800ad90:	4619      	mov	r1, r3
 800ad92:	4b66      	ldr	r3, [pc, #408]	; (800af2c <mix_sub_columns+0x28c>)
 800ad94:	5c5b      	ldrb	r3, [r3, r1]
 800ad96:	4053      	eors	r3, r2
 800ad98:	b2d9      	uxtb	r1, r3
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4b63      	ldr	r3, [pc, #396]	; (800af2c <mix_sub_columns+0x28c>)
 800ada0:	5c9a      	ldrb	r2, [r3, r2]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3304      	adds	r3, #4
 800ada6:	404a      	eors	r2, r1
 800ada8:	b2d2      	uxtb	r2, r2
 800adaa:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800adac:	7b3b      	ldrb	r3, [r7, #12]
 800adae:	461a      	mov	r2, r3
 800adb0:	4b5e      	ldr	r3, [pc, #376]	; (800af2c <mix_sub_columns+0x28c>)
 800adb2:	5c9a      	ldrb	r2, [r3, r2]
 800adb4:	7c7b      	ldrb	r3, [r7, #17]
 800adb6:	4619      	mov	r1, r3
 800adb8:	4b5a      	ldr	r3, [pc, #360]	; (800af24 <mix_sub_columns+0x284>)
 800adba:	5c5b      	ldrb	r3, [r3, r1]
 800adbc:	4053      	eors	r3, r2
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	7dbb      	ldrb	r3, [r7, #22]
 800adc2:	4619      	mov	r1, r3
 800adc4:	4b58      	ldr	r3, [pc, #352]	; (800af28 <mix_sub_columns+0x288>)
 800adc6:	5c5b      	ldrb	r3, [r3, r1]
 800adc8:	4053      	eors	r3, r2
 800adca:	b2d9      	uxtb	r1, r3
 800adcc:	7afb      	ldrb	r3, [r7, #11]
 800adce:	461a      	mov	r2, r3
 800add0:	4b56      	ldr	r3, [pc, #344]	; (800af2c <mix_sub_columns+0x28c>)
 800add2:	5c9a      	ldrb	r2, [r3, r2]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3305      	adds	r3, #5
 800add8:	404a      	eors	r2, r1
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800adde:	7b3b      	ldrb	r3, [r7, #12]
 800ade0:	461a      	mov	r2, r3
 800ade2:	4b52      	ldr	r3, [pc, #328]	; (800af2c <mix_sub_columns+0x28c>)
 800ade4:	5c9a      	ldrb	r2, [r3, r2]
 800ade6:	7c7b      	ldrb	r3, [r7, #17]
 800ade8:	4619      	mov	r1, r3
 800adea:	4b50      	ldr	r3, [pc, #320]	; (800af2c <mix_sub_columns+0x28c>)
 800adec:	5c5b      	ldrb	r3, [r3, r1]
 800adee:	4053      	eors	r3, r2
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	7dbb      	ldrb	r3, [r7, #22]
 800adf4:	4619      	mov	r1, r3
 800adf6:	4b4b      	ldr	r3, [pc, #300]	; (800af24 <mix_sub_columns+0x284>)
 800adf8:	5c5b      	ldrb	r3, [r3, r1]
 800adfa:	4053      	eors	r3, r2
 800adfc:	b2d9      	uxtb	r1, r3
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	461a      	mov	r2, r3
 800ae02:	4b49      	ldr	r3, [pc, #292]	; (800af28 <mix_sub_columns+0x288>)
 800ae04:	5c9a      	ldrb	r2, [r3, r2]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3306      	adds	r3, #6
 800ae0a:	404a      	eors	r2, r1
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ae10:	7b3b      	ldrb	r3, [r7, #12]
 800ae12:	461a      	mov	r2, r3
 800ae14:	4b44      	ldr	r3, [pc, #272]	; (800af28 <mix_sub_columns+0x288>)
 800ae16:	5c9a      	ldrb	r2, [r3, r2]
 800ae18:	7c7b      	ldrb	r3, [r7, #17]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4b43      	ldr	r3, [pc, #268]	; (800af2c <mix_sub_columns+0x28c>)
 800ae1e:	5c5b      	ldrb	r3, [r3, r1]
 800ae20:	4053      	eors	r3, r2
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	7dbb      	ldrb	r3, [r7, #22]
 800ae26:	4619      	mov	r1, r3
 800ae28:	4b40      	ldr	r3, [pc, #256]	; (800af2c <mix_sub_columns+0x28c>)
 800ae2a:	5c5b      	ldrb	r3, [r3, r1]
 800ae2c:	4053      	eors	r3, r2
 800ae2e:	b2d9      	uxtb	r1, r3
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	461a      	mov	r2, r3
 800ae34:	4b3b      	ldr	r3, [pc, #236]	; (800af24 <mix_sub_columns+0x284>)
 800ae36:	5c9a      	ldrb	r2, [r3, r2]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3307      	adds	r3, #7
 800ae3c:	404a      	eors	r2, r1
 800ae3e:	b2d2      	uxtb	r2, r2
 800ae40:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ae42:	7c3b      	ldrb	r3, [r7, #16]
 800ae44:	461a      	mov	r2, r3
 800ae46:	4b37      	ldr	r3, [pc, #220]	; (800af24 <mix_sub_columns+0x284>)
 800ae48:	5c9a      	ldrb	r2, [r3, r2]
 800ae4a:	7d7b      	ldrb	r3, [r7, #21]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4b36      	ldr	r3, [pc, #216]	; (800af28 <mix_sub_columns+0x288>)
 800ae50:	5c5b      	ldrb	r3, [r3, r1]
 800ae52:	4053      	eors	r3, r2
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	7abb      	ldrb	r3, [r7, #10]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	4b34      	ldr	r3, [pc, #208]	; (800af2c <mix_sub_columns+0x28c>)
 800ae5c:	5c5b      	ldrb	r3, [r3, r1]
 800ae5e:	4053      	eors	r3, r2
 800ae60:	b2d9      	uxtb	r1, r3
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	461a      	mov	r2, r3
 800ae66:	4b31      	ldr	r3, [pc, #196]	; (800af2c <mix_sub_columns+0x28c>)
 800ae68:	5c9a      	ldrb	r2, [r3, r2]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	404a      	eors	r2, r1
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ae74:	7c3b      	ldrb	r3, [r7, #16]
 800ae76:	461a      	mov	r2, r3
 800ae78:	4b2c      	ldr	r3, [pc, #176]	; (800af2c <mix_sub_columns+0x28c>)
 800ae7a:	5c9a      	ldrb	r2, [r3, r2]
 800ae7c:	7d7b      	ldrb	r3, [r7, #21]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4b28      	ldr	r3, [pc, #160]	; (800af24 <mix_sub_columns+0x284>)
 800ae82:	5c5b      	ldrb	r3, [r3, r1]
 800ae84:	4053      	eors	r3, r2
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	7abb      	ldrb	r3, [r7, #10]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4b26      	ldr	r3, [pc, #152]	; (800af28 <mix_sub_columns+0x288>)
 800ae8e:	5c5b      	ldrb	r3, [r3, r1]
 800ae90:	4053      	eors	r3, r2
 800ae92:	b2d9      	uxtb	r1, r3
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	461a      	mov	r2, r3
 800ae98:	4b24      	ldr	r3, [pc, #144]	; (800af2c <mix_sub_columns+0x28c>)
 800ae9a:	5c9a      	ldrb	r2, [r3, r2]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3309      	adds	r3, #9
 800aea0:	404a      	eors	r2, r1
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800aea6:	7c3b      	ldrb	r3, [r7, #16]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4b20      	ldr	r3, [pc, #128]	; (800af2c <mix_sub_columns+0x28c>)
 800aeac:	5c9a      	ldrb	r2, [r3, r2]
 800aeae:	7d7b      	ldrb	r3, [r7, #21]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4b1e      	ldr	r3, [pc, #120]	; (800af2c <mix_sub_columns+0x28c>)
 800aeb4:	5c5b      	ldrb	r3, [r3, r1]
 800aeb6:	4053      	eors	r3, r2
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	7abb      	ldrb	r3, [r7, #10]
 800aebc:	4619      	mov	r1, r3
 800aebe:	4b19      	ldr	r3, [pc, #100]	; (800af24 <mix_sub_columns+0x284>)
 800aec0:	5c5b      	ldrb	r3, [r3, r1]
 800aec2:	4053      	eors	r3, r2
 800aec4:	b2d9      	uxtb	r1, r3
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b17      	ldr	r3, [pc, #92]	; (800af28 <mix_sub_columns+0x288>)
 800aecc:	5c9a      	ldrb	r2, [r3, r2]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	330a      	adds	r3, #10
 800aed2:	404a      	eors	r2, r1
 800aed4:	b2d2      	uxtb	r2, r2
 800aed6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800aed8:	7c3b      	ldrb	r3, [r7, #16]
 800aeda:	461a      	mov	r2, r3
 800aedc:	4b12      	ldr	r3, [pc, #72]	; (800af28 <mix_sub_columns+0x288>)
 800aede:	5c9a      	ldrb	r2, [r3, r2]
 800aee0:	7d7b      	ldrb	r3, [r7, #21]
 800aee2:	4619      	mov	r1, r3
 800aee4:	4b11      	ldr	r3, [pc, #68]	; (800af2c <mix_sub_columns+0x28c>)
 800aee6:	5c5b      	ldrb	r3, [r3, r1]
 800aee8:	4053      	eors	r3, r2
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	7abb      	ldrb	r3, [r7, #10]
 800aeee:	4619      	mov	r1, r3
 800aef0:	4b0e      	ldr	r3, [pc, #56]	; (800af2c <mix_sub_columns+0x28c>)
 800aef2:	5c5b      	ldrb	r3, [r3, r1]
 800aef4:	4053      	eors	r3, r2
 800aef6:	b2d9      	uxtb	r1, r3
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	461a      	mov	r2, r3
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <mix_sub_columns+0x284>)
 800aefe:	5c9a      	ldrb	r2, [r3, r2]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	330b      	adds	r3, #11
 800af04:	404a      	eors	r2, r1
 800af06:	b2d2      	uxtb	r2, r2
 800af08:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800af0a:	7d3b      	ldrb	r3, [r7, #20]
 800af0c:	461a      	mov	r2, r3
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <mix_sub_columns+0x284>)
 800af10:	5c9a      	ldrb	r2, [r3, r2]
 800af12:	7a7b      	ldrb	r3, [r7, #9]
 800af14:	4619      	mov	r1, r3
 800af16:	4b04      	ldr	r3, [pc, #16]	; (800af28 <mix_sub_columns+0x288>)
 800af18:	5c5b      	ldrb	r3, [r3, r1]
 800af1a:	4053      	eors	r3, r2
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	4619      	mov	r1, r3
 800af22:	e005      	b.n	800af30 <mix_sub_columns+0x290>
 800af24:	0801b2e0 	.word	0x0801b2e0
 800af28:	0801b3e0 	.word	0x0801b3e0
 800af2c:	0801b1e0 	.word	0x0801b1e0
 800af30:	4b2d      	ldr	r3, [pc, #180]	; (800afe8 <mix_sub_columns+0x348>)
 800af32:	5c5b      	ldrb	r3, [r3, r1]
 800af34:	4053      	eors	r3, r2
 800af36:	b2d9      	uxtb	r1, r3
 800af38:	7cfb      	ldrb	r3, [r7, #19]
 800af3a:	461a      	mov	r2, r3
 800af3c:	4b2a      	ldr	r3, [pc, #168]	; (800afe8 <mix_sub_columns+0x348>)
 800af3e:	5c9a      	ldrb	r2, [r3, r2]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	330c      	adds	r3, #12
 800af44:	404a      	eors	r2, r1
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800af4a:	7d3b      	ldrb	r3, [r7, #20]
 800af4c:	461a      	mov	r2, r3
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <mix_sub_columns+0x348>)
 800af50:	5c9a      	ldrb	r2, [r3, r2]
 800af52:	7a7b      	ldrb	r3, [r7, #9]
 800af54:	4619      	mov	r1, r3
 800af56:	4b25      	ldr	r3, [pc, #148]	; (800afec <mix_sub_columns+0x34c>)
 800af58:	5c5b      	ldrb	r3, [r3, r1]
 800af5a:	4053      	eors	r3, r2
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	4619      	mov	r1, r3
 800af62:	4b23      	ldr	r3, [pc, #140]	; (800aff0 <mix_sub_columns+0x350>)
 800af64:	5c5b      	ldrb	r3, [r3, r1]
 800af66:	4053      	eors	r3, r2
 800af68:	b2d9      	uxtb	r1, r3
 800af6a:	7cfb      	ldrb	r3, [r7, #19]
 800af6c:	461a      	mov	r2, r3
 800af6e:	4b1e      	ldr	r3, [pc, #120]	; (800afe8 <mix_sub_columns+0x348>)
 800af70:	5c9a      	ldrb	r2, [r3, r2]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	330d      	adds	r3, #13
 800af76:	404a      	eors	r2, r1
 800af78:	b2d2      	uxtb	r2, r2
 800af7a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800af7c:	7d3b      	ldrb	r3, [r7, #20]
 800af7e:	461a      	mov	r2, r3
 800af80:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <mix_sub_columns+0x348>)
 800af82:	5c9a      	ldrb	r2, [r3, r2]
 800af84:	7a7b      	ldrb	r3, [r7, #9]
 800af86:	4619      	mov	r1, r3
 800af88:	4b17      	ldr	r3, [pc, #92]	; (800afe8 <mix_sub_columns+0x348>)
 800af8a:	5c5b      	ldrb	r3, [r3, r1]
 800af8c:	4053      	eors	r3, r2
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	4619      	mov	r1, r3
 800af94:	4b15      	ldr	r3, [pc, #84]	; (800afec <mix_sub_columns+0x34c>)
 800af96:	5c5b      	ldrb	r3, [r3, r1]
 800af98:	4053      	eors	r3, r2
 800af9a:	b2d9      	uxtb	r1, r3
 800af9c:	7cfb      	ldrb	r3, [r7, #19]
 800af9e:	461a      	mov	r2, r3
 800afa0:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <mix_sub_columns+0x350>)
 800afa2:	5c9a      	ldrb	r2, [r3, r2]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	330e      	adds	r3, #14
 800afa8:	404a      	eors	r2, r1
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800afae:	7d3b      	ldrb	r3, [r7, #20]
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <mix_sub_columns+0x350>)
 800afb4:	5c9a      	ldrb	r2, [r3, r2]
 800afb6:	7a7b      	ldrb	r3, [r7, #9]
 800afb8:	4619      	mov	r1, r3
 800afba:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <mix_sub_columns+0x348>)
 800afbc:	5c5b      	ldrb	r3, [r3, r1]
 800afbe:	4053      	eors	r3, r2
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
 800afc4:	4619      	mov	r1, r3
 800afc6:	4b08      	ldr	r3, [pc, #32]	; (800afe8 <mix_sub_columns+0x348>)
 800afc8:	5c5b      	ldrb	r3, [r3, r1]
 800afca:	4053      	eors	r3, r2
 800afcc:	b2d9      	uxtb	r1, r3
 800afce:	7cfb      	ldrb	r3, [r7, #19]
 800afd0:	461a      	mov	r2, r3
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <mix_sub_columns+0x34c>)
 800afd4:	5c9a      	ldrb	r2, [r3, r2]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	330f      	adds	r3, #15
 800afda:	404a      	eors	r2, r1
 800afdc:	b2d2      	uxtb	r2, r2
 800afde:	701a      	strb	r2, [r3, #0]
  }
 800afe0:	bf00      	nop
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	0801b1e0 	.word	0x0801b1e0
 800afec:	0801b2e0 	.word	0x0801b2e0
 800aff0:	0801b3e0 	.word	0x0801b3e0

0800aff4 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	460b      	mov	r3, r1
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	3b10      	subs	r3, #16
 800b006:	2b10      	cmp	r3, #16
 800b008:	bf8c      	ite	hi
 800b00a:	2201      	movhi	r2, #1
 800b00c:	2200      	movls	r2, #0
 800b00e:	b2d2      	uxtb	r2, r2
 800b010:	2a00      	cmp	r2, #0
 800b012:	d10d      	bne.n	800b030 <lorawan_aes_set_key+0x3c>
 800b014:	2201      	movs	r2, #1
 800b016:	fa02 f303 	lsl.w	r3, r2, r3
 800b01a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b01e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	bf14      	ite	ne
 800b026:	2301      	movne	r3, #1
 800b028:	2300      	moveq	r3, #0
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d105      	bne.n	800b03c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b038:	23ff      	movs	r3, #255	; 0xff
 800b03a:	e0b2      	b.n	800b1a2 <lorawan_aes_set_key+0x1ae>
        break;
 800b03c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7afa      	ldrb	r2, [r7, #11]
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fbfa 	bl	800a83e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b04a:	7afb      	ldrb	r3, [r7, #11]
 800b04c:	331c      	adds	r3, #28
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b054:	7c7b      	ldrb	r3, [r7, #17]
 800b056:	091b      	lsrs	r3, r3, #4
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	3b01      	subs	r3, #1
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b064:	7afb      	ldrb	r3, [r7, #11]
 800b066:	75fb      	strb	r3, [r7, #23]
 800b068:	2301      	movs	r3, #1
 800b06a:	75bb      	strb	r3, [r7, #22]
 800b06c:	e093      	b.n	800b196 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
 800b070:	3b04      	subs	r3, #4
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	5cd3      	ldrb	r3, [r2, r3]
 800b076:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	3b03      	subs	r3, #3
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	5cd3      	ldrb	r3, [r2, r3]
 800b080:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	3b02      	subs	r3, #2
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	5cd3      	ldrb	r3, [r2, r3]
 800b08a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	3b01      	subs	r3, #1
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	5cd3      	ldrb	r3, [r2, r3]
 800b094:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	7afa      	ldrb	r2, [r7, #11]
 800b09a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b09e:	fb02 f201 	mul.w	r2, r2, r1
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d127      	bne.n	800b0fa <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b0aa:	7d7b      	ldrb	r3, [r7, #21]
 800b0ac:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b0ae:	7d3b      	ldrb	r3, [r7, #20]
 800b0b0:	4a3e      	ldr	r2, [pc, #248]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b0b2:	5cd2      	ldrb	r2, [r2, r3]
 800b0b4:	7dbb      	ldrb	r3, [r7, #22]
 800b0b6:	4053      	eors	r3, r2
 800b0b8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b0ba:	7cfb      	ldrb	r3, [r7, #19]
 800b0bc:	4a3b      	ldr	r2, [pc, #236]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b0be:	5cd3      	ldrb	r3, [r2, r3]
 800b0c0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b0c2:	7cbb      	ldrb	r3, [r7, #18]
 800b0c4:	4a39      	ldr	r2, [pc, #228]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b0c6:	5cd3      	ldrb	r3, [r2, r3]
 800b0c8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b0ca:	7c3b      	ldrb	r3, [r7, #16]
 800b0cc:	4a37      	ldr	r2, [pc, #220]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b0ce:	5cd3      	ldrb	r3, [r2, r3]
 800b0d0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b0d2:	7dbb      	ldrb	r3, [r7, #22]
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	b25a      	sxtb	r2, r3
 800b0d8:	7dbb      	ldrb	r3, [r7, #22]
 800b0da:	09db      	lsrs	r3, r3, #7
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	0049      	lsls	r1, r1, #1
 800b0e2:	440b      	add	r3, r1
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	00c8      	lsls	r0, r1, #3
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	440b      	add	r3, r1
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	4053      	eors	r3, r2
 800b0f4:	b25b      	sxtb	r3, r3
 800b0f6:	75bb      	strb	r3, [r7, #22]
 800b0f8:	e01c      	b.n	800b134 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	2b18      	cmp	r3, #24
 800b0fe:	d919      	bls.n	800b134 <lorawan_aes_set_key+0x140>
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	7afa      	ldrb	r2, [r7, #11]
 800b104:	fbb3 f1f2 	udiv	r1, r3, r2
 800b108:	fb02 f201 	mul.w	r2, r2, r1
 800b10c:	1a9b      	subs	r3, r3, r2
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b10      	cmp	r3, #16
 800b112:	d10f      	bne.n	800b134 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b114:	7d7b      	ldrb	r3, [r7, #21]
 800b116:	4a25      	ldr	r2, [pc, #148]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b118:	5cd3      	ldrb	r3, [r2, r3]
 800b11a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b11c:	7d3b      	ldrb	r3, [r7, #20]
 800b11e:	4a23      	ldr	r2, [pc, #140]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b120:	5cd3      	ldrb	r3, [r2, r3]
 800b122:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b124:	7cfb      	ldrb	r3, [r7, #19]
 800b126:	4a21      	ldr	r2, [pc, #132]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b128:	5cd3      	ldrb	r3, [r2, r3]
 800b12a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b12c:	7cbb      	ldrb	r3, [r7, #18]
 800b12e:	4a1f      	ldr	r2, [pc, #124]	; (800b1ac <lorawan_aes_set_key+0x1b8>)
 800b130:	5cd3      	ldrb	r3, [r2, r3]
 800b132:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b134:	7dfa      	ldrb	r2, [r7, #23]
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b13c:	7c3b      	ldrb	r3, [r7, #16]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	5cd1      	ldrb	r1, [r2, r3]
 800b142:	7dfb      	ldrb	r3, [r7, #23]
 800b144:	7d7a      	ldrb	r2, [r7, #21]
 800b146:	404a      	eors	r2, r1
 800b148:	b2d1      	uxtb	r1, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b14e:	7c3b      	ldrb	r3, [r7, #16]
 800b150:	3301      	adds	r3, #1
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	5cd1      	ldrb	r1, [r2, r3]
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	3301      	adds	r3, #1
 800b15a:	7d3a      	ldrb	r2, [r7, #20]
 800b15c:	404a      	eors	r2, r1
 800b15e:	b2d1      	uxtb	r1, r2
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b164:	7c3b      	ldrb	r3, [r7, #16]
 800b166:	3302      	adds	r3, #2
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	5cd1      	ldrb	r1, [r2, r3]
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	3302      	adds	r3, #2
 800b170:	7cfa      	ldrb	r2, [r7, #19]
 800b172:	404a      	eors	r2, r1
 800b174:	b2d1      	uxtb	r1, r2
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b17a:	7c3b      	ldrb	r3, [r7, #16]
 800b17c:	3303      	adds	r3, #3
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	5cd1      	ldrb	r1, [r2, r3]
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	3303      	adds	r3, #3
 800b186:	7cba      	ldrb	r2, [r7, #18]
 800b188:	404a      	eors	r2, r1
 800b18a:	b2d1      	uxtb	r1, r2
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	3304      	adds	r3, #4
 800b194:	75fb      	strb	r3, [r7, #23]
 800b196:	7dfa      	ldrb	r2, [r7, #23]
 800b198:	7c7b      	ldrb	r3, [r7, #17]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	f4ff af67 	bcc.w	800b06e <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	0801b1e0 	.word	0x0801b1e0

0800b1b0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08a      	sub	sp, #40	; 0x28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d038      	beq.n	800b238 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	f107 0314 	add.w	r3, r7, #20
 800b1cc:	68f9      	ldr	r1, [r7, #12]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fc07 	bl	800a9e2 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1da:	e014      	b.n	800b206 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b1dc:	f107 0314 	add.w	r3, r7, #20
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff fd5d 	bl	800aca0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1ec:	0112      	lsls	r2, r2, #4
 800b1ee:	441a      	add	r2, r3
 800b1f0:	f107 0314 	add.w	r3, r7, #20
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fcab 	bl	800ab52 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b200:	3301      	adds	r3, #1
 800b202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b20c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b210:	429a      	cmp	r2, r3
 800b212:	d3e3      	bcc.n	800b1dc <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b214:	f107 0314 	add.w	r3, r7, #20
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fca7 	bl	800ab6c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b224:	0112      	lsls	r2, r2, #4
 800b226:	441a      	add	r2, r3
 800b228:	f107 0314 	add.w	r3, r7, #20
 800b22c:	4619      	mov	r1, r3
 800b22e:	68b8      	ldr	r0, [r7, #8]
 800b230:	f7ff fbd7 	bl	800a9e2 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b234:	2300      	movs	r3, #0
 800b236:	e000      	b.n	800b23a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b238:	23ff      	movs	r3, #255	; 0xff
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3728      	adds	r7, #40	; 0x28
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
	...

0800b244 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b246:	b09d      	sub	sp, #116	; 0x74
 800b248:	af10      	add	r7, sp, #64	; 0x40
 800b24a:	4603      	mov	r3, r0
 800b24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b250:	2306      	movs	r3, #6
 800b252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b25a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b25e:	4611      	mov	r1, r2
 800b260:	4618      	mov	r0, r3
 800b262:	f000 fa05 	bl	800b670 <SecureElementGetKeyByID>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b26c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b270:	2b00      	cmp	r3, #0
 800b272:	f040 80b0 	bne.w	800b3d6 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b27e:	4b58      	ldr	r3, [pc, #352]	; (800b3e0 <PrintKey+0x19c>)
 800b280:	2200      	movs	r2, #0
 800b282:	2100      	movs	r1, #0
 800b284:	2002      	movs	r0, #2
 800b286:	f00e ff99 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b28a:	e056      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b290:	2b01      	cmp	r3, #1
 800b292:	d106      	bne.n	800b2a2 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b294:	4b53      	ldr	r3, [pc, #332]	; (800b3e4 <PrintKey+0x1a0>)
 800b296:	2200      	movs	r2, #0
 800b298:	2100      	movs	r1, #0
 800b29a:	2002      	movs	r0, #2
 800b29c:	f00e ff8e 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b2a0:	e04b      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d106      	bne.n	800b2b8 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b2aa:	4b4f      	ldr	r3, [pc, #316]	; (800b3e8 <PrintKey+0x1a4>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	2002      	movs	r0, #2
 800b2b2:	f00e ff83 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b2b6:	e040      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d106      	bne.n	800b2ce <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b2c0:	4b4a      	ldr	r3, [pc, #296]	; (800b3ec <PrintKey+0x1a8>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	2002      	movs	r0, #2
 800b2c8:	f00e ff78 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b2cc:	e035      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	d106      	bne.n	800b2e4 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b2d6:	4b46      	ldr	r3, [pc, #280]	; (800b3f0 <PrintKey+0x1ac>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2100      	movs	r1, #0
 800b2dc:	2002      	movs	r0, #2
 800b2de:	f00e ff6d 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b2e2:	e02a      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e8:	2b7f      	cmp	r3, #127	; 0x7f
 800b2ea:	d106      	bne.n	800b2fa <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b2ec:	4b41      	ldr	r3, [pc, #260]	; (800b3f4 <PrintKey+0x1b0>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	2002      	movs	r0, #2
 800b2f4:	f00e ff62 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b2f8:	e01f      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b2fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2fe:	2b80      	cmp	r3, #128	; 0x80
 800b300:	d106      	bne.n	800b310 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b302:	4b3d      	ldr	r3, [pc, #244]	; (800b3f8 <PrintKey+0x1b4>)
 800b304:	2200      	movs	r2, #0
 800b306:	2100      	movs	r1, #0
 800b308:	2002      	movs	r0, #2
 800b30a:	f00e ff57 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b30e:	e014      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b314:	2b81      	cmp	r3, #129	; 0x81
 800b316:	d106      	bne.n	800b326 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b318:	4b38      	ldr	r3, [pc, #224]	; (800b3fc <PrintKey+0x1b8>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	2100      	movs	r1, #0
 800b31e:	2002      	movs	r0, #2
 800b320:	f00e ff4c 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 800b324:	e009      	b.n	800b33a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b32a:	2b82      	cmp	r3, #130	; 0x82
 800b32c:	d105      	bne.n	800b33a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b32e:	4b34      	ldr	r3, [pc, #208]	; (800b400 <PrintKey+0x1bc>)
 800b330:	2200      	movs	r2, #0
 800b332:	2100      	movs	r1, #0
 800b334:	2002      	movs	r0, #2
 800b336:	f00e ff41 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	4618      	mov	r0, r3
 800b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b342:	789b      	ldrb	r3, [r3, #2]
 800b344:	461c      	mov	r4, r3
 800b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b348:	78db      	ldrb	r3, [r3, #3]
 800b34a:	461d      	mov	r5, r3
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	791b      	ldrb	r3, [r3, #4]
 800b350:	461e      	mov	r6, r3
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	795b      	ldrb	r3, [r3, #5]
 800b356:	623b      	str	r3, [r7, #32]
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	799b      	ldrb	r3, [r3, #6]
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	79db      	ldrb	r3, [r3, #7]
 800b362:	61bb      	str	r3, [r7, #24]
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	7a1b      	ldrb	r3, [r3, #8]
 800b368:	617b      	str	r3, [r7, #20]
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	7a5b      	ldrb	r3, [r3, #9]
 800b36e:	613b      	str	r3, [r7, #16]
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	7a9b      	ldrb	r3, [r3, #10]
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b378:	7adb      	ldrb	r3, [r3, #11]
 800b37a:	60bb      	str	r3, [r7, #8]
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	7b1b      	ldrb	r3, [r3, #12]
 800b380:	607b      	str	r3, [r7, #4]
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	7b5b      	ldrb	r3, [r3, #13]
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	7b9b      	ldrb	r3, [r3, #14]
 800b38c:	4619      	mov	r1, r3
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	7bdb      	ldrb	r3, [r3, #15]
 800b392:	461a      	mov	r2, r3
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	7c1b      	ldrb	r3, [r3, #16]
 800b398:	930f      	str	r3, [sp, #60]	; 0x3c
 800b39a:	920e      	str	r2, [sp, #56]	; 0x38
 800b39c:	910d      	str	r1, [sp, #52]	; 0x34
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	920c      	str	r2, [sp, #48]	; 0x30
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	9208      	str	r2, [sp, #32]
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	9207      	str	r2, [sp, #28]
 800b3b6:	69ba      	ldr	r2, [r7, #24]
 800b3b8:	9206      	str	r2, [sp, #24]
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	9205      	str	r2, [sp, #20]
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	9603      	str	r6, [sp, #12]
 800b3c4:	9502      	str	r5, [sp, #8]
 800b3c6:	9401      	str	r4, [sp, #4]
 800b3c8:	9000      	str	r0, [sp, #0]
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <PrintKey+0x1c0>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	2002      	movs	r0, #2
 800b3d2:	f00e fef3 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800b3d6:	bf00      	nop
 800b3d8:	3734      	adds	r7, #52	; 0x34
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	0801abdc 	.word	0x0801abdc
 800b3e4:	0801abf4 	.word	0x0801abf4
 800b3e8:	0801ac0c 	.word	0x0801ac0c
 800b3ec:	0801ac24 	.word	0x0801ac24
 800b3f0:	0801ac3c 	.word	0x0801ac3c
 800b3f4:	0801ac54 	.word	0x0801ac54
 800b3f8:	0801ac6c 	.word	0x0801ac6c
 800b3fc:	0801ac84 	.word	0x0801ac84
 800b400:	0801ac9c 	.word	0x0801ac9c
 800b404:	0801acb4 	.word	0x0801acb4

0800b408 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	6039      	str	r1, [r7, #0]
 800b412:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b414:	2300      	movs	r3, #0
 800b416:	73fb      	strb	r3, [r7, #15]
 800b418:	e01a      	b.n	800b450 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b41a:	4b12      	ldr	r3, [pc, #72]	; (800b464 <GetKeyByID+0x5c>)
 800b41c:	6819      	ldr	r1, [r3, #0]
 800b41e:	7bfa      	ldrb	r2, [r7, #15]
 800b420:	4613      	mov	r3, r2
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	4413      	add	r3, r2
 800b426:	440b      	add	r3, r1
 800b428:	3310      	adds	r3, #16
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	79fa      	ldrb	r2, [r7, #7]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d10b      	bne.n	800b44a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b432:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <GetKeyByID+0x5c>)
 800b434:	6819      	ldr	r1, [r3, #0]
 800b436:	7bfa      	ldrb	r2, [r7, #15]
 800b438:	4613      	mov	r3, r2
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	4413      	add	r3, r2
 800b43e:	3310      	adds	r3, #16
 800b440:	18ca      	adds	r2, r1, r3
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b446:	2300      	movs	r3, #0
 800b448:	e006      	b.n	800b458 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	3301      	adds	r3, #1
 800b44e:	73fb      	strb	r3, [r7, #15]
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	2b09      	cmp	r3, #9
 800b454:	d9e1      	bls.n	800b41a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b456:	2303      	movs	r3, #3
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	200002c8 	.word	0x200002c8

0800b468 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b468:	b590      	push	{r4, r7, lr}
 800b46a:	b0d1      	sub	sp, #324	; 0x144
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	f107 040c 	add.w	r4, r7, #12
 800b472:	6020      	str	r0, [r4, #0]
 800b474:	f107 0008 	add.w	r0, r7, #8
 800b478:	6001      	str	r1, [r0, #0]
 800b47a:	4619      	mov	r1, r3
 800b47c:	1dbb      	adds	r3, r7, #6
 800b47e:	801a      	strh	r2, [r3, #0]
 800b480:	1d7b      	adds	r3, r7, #5
 800b482:	460a      	mov	r2, r1
 800b484:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b486:	f107 0308 	add.w	r3, r7, #8
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d003      	beq.n	800b498 <ComputeCmac+0x30>
 800b490:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b498:	2302      	movs	r3, #2
 800b49a:	e04e      	b.n	800b53a <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe ff23 	bl	800a2ec <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b4a6:	f107 0210 	add.w	r2, r7, #16
 800b4aa:	1d7b      	adds	r3, r7, #5
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff ffa9 	bl	800b408 <GetKeyByID>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b4bc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d138      	bne.n	800b536 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b4c4:	f107 0310 	add.w	r3, r7, #16
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe ff23 	bl	800a31e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b4d8:	f107 030c 	add.w	r3, r7, #12
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b4e2:	f107 030c 	add.w	r3, r7, #12
 800b4e6:	f107 0014 	add.w	r0, r7, #20
 800b4ea:	2210      	movs	r2, #16
 800b4ec:	6819      	ldr	r1, [r3, #0]
 800b4ee:	f7fe ff25 	bl	800a33c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b4f2:	1dbb      	adds	r3, r7, #6
 800b4f4:	881a      	ldrh	r2, [r3, #0]
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	f107 0014 	add.w	r0, r7, #20
 800b4fe:	6819      	ldr	r1, [r3, #0]
 800b500:	f7fe ff1c 	bl	800a33c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b504:	f107 0214 	add.w	r2, r7, #20
 800b508:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe ffd6 	bl	800a4c0 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b514:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800b518:	061a      	lsls	r2, r3, #24
 800b51a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800b51e:	041b      	lsls	r3, r3, #16
 800b520:	431a      	orrs	r2, r3
 800b522:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b52a:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b52e:	431a      	orrs	r2, r3
 800b530:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b534:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b536:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b540:	46bd      	mov	sp, r7
 800b542:	bd90      	pop	{r4, r7, pc}

0800b544 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b544:	b5b0      	push	{r4, r5, r7, lr}
 800b546:	b0b2      	sub	sp, #200	; 0xc8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	22c0      	movs	r2, #192	; 0xc0
 800b554:	2100      	movs	r1, #0
 800b556:	4618      	mov	r0, r3
 800b558:	f00f f8ce 	bl	801a6f8 <memset>
 800b55c:	4a3b      	ldr	r2, [pc, #236]	; (800b64c <SecureElementInit+0x108>)
 800b55e:	f107 0308 	add.w	r3, r7, #8
 800b562:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b566:	e883 0003 	stmia.w	r3, {r0, r1}
 800b56a:	4a39      	ldr	r2, [pc, #228]	; (800b650 <SecureElementInit+0x10c>)
 800b56c:	f107 0310 	add.w	r3, r7, #16
 800b570:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b574:	e883 0003 	stmia.w	r3, {r0, r1}
 800b578:	4b36      	ldr	r3, [pc, #216]	; (800b654 <SecureElementInit+0x110>)
 800b57a:	f107 0419 	add.w	r4, r7, #25
 800b57e:	461d      	mov	r5, r3
 800b580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b582:	6020      	str	r0, [r4, #0]
 800b584:	6061      	str	r1, [r4, #4]
 800b586:	60a2      	str	r2, [r4, #8]
 800b588:	60e3      	str	r3, [r4, #12]
 800b58a:	2301      	movs	r3, #1
 800b58c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800b590:	4b31      	ldr	r3, [pc, #196]	; (800b658 <SecureElementInit+0x114>)
 800b592:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800b596:	461d      	mov	r5, r3
 800b598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b59a:	6020      	str	r0, [r4, #0]
 800b59c:	6061      	str	r1, [r4, #4]
 800b59e:	60a2      	str	r2, [r4, #8]
 800b5a0:	60e3      	str	r3, [r4, #12]
 800b5a2:	2302      	movs	r3, #2
 800b5a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800b5a8:	4b2c      	ldr	r3, [pc, #176]	; (800b65c <SecureElementInit+0x118>)
 800b5aa:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800b5ae:	461d      	mov	r5, r3
 800b5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5b2:	6020      	str	r0, [r4, #0]
 800b5b4:	6061      	str	r1, [r4, #4]
 800b5b6:	60a2      	str	r2, [r4, #8]
 800b5b8:	60e3      	str	r3, [r4, #12]
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b5c0:	4b27      	ldr	r3, [pc, #156]	; (800b660 <SecureElementInit+0x11c>)
 800b5c2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800b5c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5cc:	2304      	movs	r3, #4
 800b5ce:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800b5d2:	237f      	movs	r3, #127	; 0x7f
 800b5d4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800b5d8:	2380      	movs	r3, #128	; 0x80
 800b5da:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800b5de:	2381      	movs	r3, #129	; 0x81
 800b5e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b5e4:	2382      	movs	r3, #130	; 0x82
 800b5e6:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800b5ea:	2383      	movs	r3, #131	; 0x83
 800b5ec:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	e023      	b.n	800b642 <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b5fa:	4a1a      	ldr	r2, [pc, #104]	; (800b664 <SecureElementInit+0x120>)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b600:	4b18      	ldr	r3, [pc, #96]	; (800b664 <SecureElementInit+0x120>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f107 0108 	add.w	r1, r7, #8
 800b608:	22c0      	movs	r2, #192	; 0xc0
 800b60a:	4618      	mov	r0, r3
 800b60c:	f00a fb95 	bl	8015d3a <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800b610:	4b15      	ldr	r3, [pc, #84]	; (800b668 <SecureElementInit+0x124>)
 800b612:	2200      	movs	r2, #0
 800b614:	2100      	movs	r1, #0
 800b616:	2002      	movs	r0, #2
 800b618:	f00e fdd0 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800b61c:	2000      	movs	r0, #0
 800b61e:	f7ff fe11 	bl	800b244 <PrintKey>
    PrintKey(NWK_KEY);
 800b622:	2001      	movs	r0, #1
 800b624:	f7ff fe0e 	bl	800b244 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800b628:	4b10      	ldr	r3, [pc, #64]	; (800b66c <SecureElementInit+0x128>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	2100      	movs	r1, #0
 800b62e:	2002      	movs	r0, #2
 800b630:	f00e fdc4 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800b634:	2003      	movs	r0, #3
 800b636:	f7ff fe05 	bl	800b244 <PrintKey>
    PrintKey(NWK_S_KEY);
 800b63a:	2002      	movs	r0, #2
 800b63c:	f7ff fe02 	bl	800b244 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	37c8      	adds	r7, #200	; 0xc8
 800b646:	46bd      	mov	sp, r7
 800b648:	bdb0      	pop	{r4, r5, r7, pc}
 800b64a:	bf00      	nop
 800b64c:	0801ad38 	.word	0x0801ad38
 800b650:	0801ad40 	.word	0x0801ad40
 800b654:	0801ad48 	.word	0x0801ad48
 800b658:	0801ad58 	.word	0x0801ad58
 800b65c:	0801ad68 	.word	0x0801ad68
 800b660:	0801ad78 	.word	0x0801ad78
 800b664:	200002c8 	.word	0x200002c8
 800b668:	0801ad08 	.word	0x0801ad08
 800b66c:	0801ad20 	.word	0x0801ad20

0800b670 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	6039      	str	r1, [r7, #0]
 800b67a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b67c:	2300      	movs	r3, #0
 800b67e:	73fb      	strb	r3, [r7, #15]
 800b680:	e01a      	b.n	800b6b8 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <SecureElementGetKeyByID+0x5c>)
 800b684:	6819      	ldr	r1, [r3, #0]
 800b686:	7bfa      	ldrb	r2, [r7, #15]
 800b688:	4613      	mov	r3, r2
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	4413      	add	r3, r2
 800b68e:	440b      	add	r3, r1
 800b690:	3310      	adds	r3, #16
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	79fa      	ldrb	r2, [r7, #7]
 800b696:	429a      	cmp	r2, r3
 800b698:	d10b      	bne.n	800b6b2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800b69a:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <SecureElementGetKeyByID+0x5c>)
 800b69c:	6819      	ldr	r1, [r3, #0]
 800b69e:	7bfa      	ldrb	r2, [r7, #15]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	011b      	lsls	r3, r3, #4
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3310      	adds	r3, #16
 800b6a8:	18ca      	adds	r2, r1, r3
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e006      	b.n	800b6c0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	73fb      	strb	r3, [r7, #15]
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d9e1      	bls.n	800b682 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b6be:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bc80      	pop	{r7}
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	200002c8 	.word	0x200002c8

0800b6d0 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	6039      	str	r1, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e04c      	b.n	800b780 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	77fb      	strb	r3, [r7, #31]
 800b6ea:	e045      	b.n	800b778 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b6ec:	4b26      	ldr	r3, [pc, #152]	; (800b788 <SecureElementSetKey+0xb8>)
 800b6ee:	6819      	ldr	r1, [r3, #0]
 800b6f0:	7ffa      	ldrb	r2, [r7, #31]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	4413      	add	r3, r2
 800b6f8:	440b      	add	r3, r1
 800b6fa:	3310      	adds	r3, #16
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	79fa      	ldrb	r2, [r7, #7]
 800b700:	429a      	cmp	r2, r3
 800b702:	d136      	bne.n	800b772 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	2b80      	cmp	r3, #128	; 0x80
 800b708:	d123      	bne.n	800b752 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800b70a:	2306      	movs	r3, #6
 800b70c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	f107 0310 	add.w	r3, r7, #16
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	605a      	str	r2, [r3, #4]
 800b71c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	227f      	movs	r2, #127	; 0x7f
 800b724:	2110      	movs	r1, #16
 800b726:	6838      	ldr	r0, [r7, #0]
 800b728:	f000 f87d 	bl	800b826 <SecureElementAesEncrypt>
 800b72c:	4603      	mov	r3, r0
 800b72e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b730:	4b15      	ldr	r3, [pc, #84]	; (800b788 <SecureElementSetKey+0xb8>)
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	7ffa      	ldrb	r2, [r7, #31]
 800b736:	4613      	mov	r3, r2
 800b738:	011b      	lsls	r3, r3, #4
 800b73a:	4413      	add	r3, r2
 800b73c:	3310      	adds	r3, #16
 800b73e:	440b      	add	r3, r1
 800b740:	3301      	adds	r3, #1
 800b742:	f107 010c 	add.w	r1, r7, #12
 800b746:	2210      	movs	r2, #16
 800b748:	4618      	mov	r0, r3
 800b74a:	f00a faf6 	bl	8015d3a <memcpy1>
                return retval;
 800b74e:	7fbb      	ldrb	r3, [r7, #30]
 800b750:	e016      	b.n	800b780 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b752:	4b0d      	ldr	r3, [pc, #52]	; (800b788 <SecureElementSetKey+0xb8>)
 800b754:	6819      	ldr	r1, [r3, #0]
 800b756:	7ffa      	ldrb	r2, [r7, #31]
 800b758:	4613      	mov	r3, r2
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	4413      	add	r3, r2
 800b75e:	3310      	adds	r3, #16
 800b760:	440b      	add	r3, r1
 800b762:	3301      	adds	r3, #1
 800b764:	2210      	movs	r2, #16
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	4618      	mov	r0, r3
 800b76a:	f00a fae6 	bl	8015d3a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b76e:	2300      	movs	r3, #0
 800b770:	e006      	b.n	800b780 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b772:	7ffb      	ldrb	r3, [r7, #31]
 800b774:	3301      	adds	r3, #1
 800b776:	77fb      	strb	r3, [r7, #31]
 800b778:	7ffb      	ldrb	r3, [r7, #31]
 800b77a:	2b09      	cmp	r3, #9
 800b77c:	d9b6      	bls.n	800b6ec <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b77e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b780:	4618      	mov	r0, r3
 800b782:	3720      	adds	r7, #32
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	200002c8 	.word	0x200002c8

0800b78c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af02      	add	r7, sp, #8
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4611      	mov	r1, r2
 800b798:	461a      	mov	r2, r3
 800b79a:	460b      	mov	r3, r1
 800b79c:	80fb      	strh	r3, [r7, #6]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b7a2:	797b      	ldrb	r3, [r7, #5]
 800b7a4:	2b7e      	cmp	r3, #126	; 0x7e
 800b7a6:	d901      	bls.n	800b7ac <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e009      	b.n	800b7c0 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b7ac:	7979      	ldrb	r1, [r7, #5]
 800b7ae:	88fa      	ldrh	r2, [r7, #6]
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff fe55 	bl	800b468 <ComputeCmac>
 800b7be:	4603      	mov	r3, r0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	607a      	str	r2, [r7, #4]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	817b      	strh	r3, [r7, #10]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e01b      	b.n	800b81e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b7e6:	2306      	movs	r3, #6
 800b7e8:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b7ee:	7a79      	ldrb	r1, [r7, #9]
 800b7f0:	897a      	ldrh	r2, [r7, #10]
 800b7f2:	f107 0310 	add.w	r3, r7, #16
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	68f9      	ldr	r1, [r7, #12]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f7ff fe33 	bl	800b468 <ComputeCmac>
 800b802:	4603      	mov	r3, r0
 800b804:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b806:	7dfb      	ldrb	r3, [r7, #23]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	e006      	b.n	800b81e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d001      	beq.n	800b81c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b818:	2301      	movs	r3, #1
 800b81a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3718      	adds	r7, #24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b0c2      	sub	sp, #264	; 0x108
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	4608      	mov	r0, r1
 800b830:	4611      	mov	r1, r2
 800b832:	1d3a      	adds	r2, r7, #4
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	4603      	mov	r3, r0
 800b838:	817b      	strh	r3, [r7, #10]
 800b83a:	460b      	mov	r3, r1
 800b83c:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d003      	beq.n	800b84c <SecureElementAesEncrypt+0x26>
 800b844:	1d3b      	adds	r3, r7, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b84c:	2302      	movs	r3, #2
 800b84e:	e043      	b.n	800b8d8 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b850:	897b      	ldrh	r3, [r7, #10]
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	b29b      	uxth	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b85c:	2305      	movs	r3, #5
 800b85e:	e03b      	b.n	800b8d8 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b860:	f107 0314 	add.w	r3, r7, #20
 800b864:	22f0      	movs	r2, #240	; 0xf0
 800b866:	2100      	movs	r1, #0
 800b868:	4618      	mov	r0, r3
 800b86a:	f00a faa1 	bl	8015db0 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b86e:	f107 0210 	add.w	r2, r7, #16
 800b872:	7a7b      	ldrb	r3, [r7, #9]
 800b874:	4611      	mov	r1, r2
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff fdc6 	bl	800b408 <GetKeyByID>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b882:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800b886:	2b00      	cmp	r3, #0
 800b888:	d124      	bne.n	800b8d4 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3301      	adds	r3, #1
 800b88e:	f107 0214 	add.w	r2, r7, #20
 800b892:	2110      	movs	r1, #16
 800b894:	4618      	mov	r0, r3
 800b896:	f7ff fbad 	bl	800aff4 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800b8a0:	e015      	b.n	800b8ce <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800b8a2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	18d0      	adds	r0, r2, r3
 800b8aa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b8ae:	1d3a      	adds	r2, r7, #4
 800b8b0:	6812      	ldr	r2, [r2, #0]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f107 0214 	add.w	r2, r7, #20
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f7ff fc79 	bl	800b1b0 <lorawan_aes_encrypt>
            block = block + 16;
 800b8be:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b8c2:	3310      	adds	r3, #16
 800b8c4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800b8c8:	897b      	ldrh	r3, [r7, #10]
 800b8ca:	3b10      	subs	r3, #16
 800b8cc:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800b8ce:	897b      	ldrh	r3, [r7, #10]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e6      	bne.n	800b8a2 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b8d4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	70fb      	strb	r3, [r7, #3]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e02e      	b.n	800b95a <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b900:	78bb      	ldrb	r3, [r7, #2]
 800b902:	2b7f      	cmp	r3, #127	; 0x7f
 800b904:	d104      	bne.n	800b910 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	2b04      	cmp	r3, #4
 800b90a:	d001      	beq.n	800b910 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e024      	b.n	800b95a <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800b910:	2300      	movs	r3, #0
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	f107 0310 	add.w	r3, r7, #16
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	605a      	str	r2, [r3, #4]
 800b91e:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b920:	f107 030c 	add.w	r3, r7, #12
 800b924:	78fa      	ldrb	r2, [r7, #3]
 800b926:	2110      	movs	r1, #16
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff ff7c 	bl	800b826 <SecureElementAesEncrypt>
 800b92e:	4603      	mov	r3, r0
 800b930:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b932:	7ffb      	ldrb	r3, [r7, #31]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b938:	7ffb      	ldrb	r3, [r7, #31]
 800b93a:	e00e      	b.n	800b95a <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800b93c:	f107 020c 	add.w	r2, r7, #12
 800b940:	78bb      	ldrb	r3, [r7, #2]
 800b942:	4611      	mov	r1, r2
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff fec3 	bl	800b6d0 <SecureElementSetKey>
 800b94a:	4603      	mov	r3, r0
 800b94c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b94e:	7ffb      	ldrb	r3, [r7, #31]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b954:	7ffb      	ldrb	r3, [r7, #31]
 800b956:	e000      	b.n	800b95a <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b958:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3720      	adds	r7, #32
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b086      	sub	sp, #24
 800b966:	af00      	add	r7, sp, #0
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607b      	str	r3, [r7, #4]
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]
 800b970:	4613      	mov	r3, r2
 800b972:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <SecureElementProcessJoinAccept+0x24>
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <SecureElementProcessJoinAccept+0x24>
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b986:	2302      	movs	r3, #2
 800b988:	e064      	b.n	800ba54 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b98a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b98e:	2b21      	cmp	r3, #33	; 0x21
 800b990:	d901      	bls.n	800b996 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b992:	2305      	movs	r3, #5
 800b994:	e05e      	b.n	800ba54 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b996:	2301      	movs	r3, #1
 800b998:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b99a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	6879      	ldr	r1, [r7, #4]
 800b9a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9a6:	f00a f9c8 	bl	8015d3a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	1c58      	adds	r0, r3, #1
 800b9ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	b299      	uxth	r1, r3
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	7dfa      	ldrb	r2, [r7, #23]
 800b9be:	f7ff ff32 	bl	800b826 <SecureElementAesEncrypt>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b9c8:	2307      	movs	r3, #7
 800b9ca:	e043      	b.n	800ba54 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	330b      	adds	r3, #11
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	09db      	lsrs	r3, r3, #7
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b9de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9e2:	3b04      	subs	r3, #4
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	4413      	add	r3, r2
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b9ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9f0:	3b03      	subs	r3, #3
 800b9f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f4:	4413      	add	r3, r2
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800ba00:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba04:	3b02      	subs	r3, #2
 800ba06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba08:	4413      	add	r3, r2
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800ba14:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1c:	4413      	add	r3, r2
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	061b      	lsls	r3, r3, #24
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10e      	bne.n	800ba4e <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ba30:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b04      	subs	r3, #4
 800ba38:	b299      	uxth	r1, r3
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba40:	f7ff fec2 	bl	800b7c8 <SecureElementVerifyAesCmac>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e002      	b.n	800ba54 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ba4e:	2304      	movs	r3, #4
 800ba50:	e000      	b.n	800ba54 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3718      	adds	r7, #24
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ba6a:	2302      	movs	r3, #2
 800ba6c:	e006      	b.n	800ba7c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <SecureElementRandomNumber+0x28>)
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	4798      	blx	r3
 800ba74:	4602      	mov	r2, r0
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	0801b528 	.word	0x0801b528

0800ba88 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ba96:	2302      	movs	r3, #2
 800ba98:	e007      	b.n	800baaa <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800ba9a:	4b06      	ldr	r3, [pc, #24]	; (800bab4 <SecureElementSetDevEui+0x2c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2208      	movs	r2, #8
 800baa0:	6879      	ldr	r1, [r7, #4]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f00a f949 	bl	8015d3a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	200002c8 	.word	0x200002c8

0800bab8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800babc:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <SecureElementGetDevEui+0x10>)
 800babe:	681b      	ldr	r3, [r3, #0]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bc80      	pop	{r7}
 800bac6:	4770      	bx	lr
 800bac8:	200002c8 	.word	0x200002c8

0800bacc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bada:	2302      	movs	r3, #2
 800badc:	e008      	b.n	800baf0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800bade:	4b06      	ldr	r3, [pc, #24]	; (800baf8 <SecureElementSetJoinEui+0x2c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3308      	adds	r3, #8
 800bae4:	2208      	movs	r2, #8
 800bae6:	6879      	ldr	r1, [r7, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	f00a f926 	bl	8015d3a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	200002c8 	.word	0x200002c8

0800bafc <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800bb00:	4b03      	ldr	r3, [pc, #12]	; (800bb10 <SecureElementGetJoinEui+0x14>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3308      	adds	r3, #8
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bc80      	pop	{r7}
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	200002c8 	.word	0x200002c8

0800bb14 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800bb1c:	4a1a      	ldr	r2, [pc, #104]	; (800bb88 <LmHandlerInit+0x74>)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bb22:	4b1a      	ldr	r3, [pc, #104]	; (800bb8c <LmHandlerInit+0x78>)
 800bb24:	4a1a      	ldr	r2, [pc, #104]	; (800bb90 <LmHandlerInit+0x7c>)
 800bb26:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bb28:	4b18      	ldr	r3, [pc, #96]	; (800bb8c <LmHandlerInit+0x78>)
 800bb2a:	4a1a      	ldr	r2, [pc, #104]	; (800bb94 <LmHandlerInit+0x80>)
 800bb2c:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bb2e:	4b17      	ldr	r3, [pc, #92]	; (800bb8c <LmHandlerInit+0x78>)
 800bb30:	4a19      	ldr	r2, [pc, #100]	; (800bb98 <LmHandlerInit+0x84>)
 800bb32:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bb34:	4b15      	ldr	r3, [pc, #84]	; (800bb8c <LmHandlerInit+0x78>)
 800bb36:	4a19      	ldr	r2, [pc, #100]	; (800bb9c <LmHandlerInit+0x88>)
 800bb38:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bb3a:	4b13      	ldr	r3, [pc, #76]	; (800bb88 <LmHandlerInit+0x74>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4a17      	ldr	r2, [pc, #92]	; (800bba0 <LmHandlerInit+0x8c>)
 800bb42:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bb44:	4b10      	ldr	r3, [pc, #64]	; (800bb88 <LmHandlerInit+0x74>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	4a15      	ldr	r2, [pc, #84]	; (800bba0 <LmHandlerInit+0x8c>)
 800bb4c:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bb4e:	4b0e      	ldr	r3, [pc, #56]	; (800bb88 <LmHandlerInit+0x74>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	4a12      	ldr	r2, [pc, #72]	; (800bba0 <LmHandlerInit+0x8c>)
 800bb56:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bb58:	4b11      	ldr	r3, [pc, #68]	; (800bba0 <LmHandlerInit+0x8c>)
 800bb5a:	4a12      	ldr	r2, [pc, #72]	; (800bba4 <LmHandlerInit+0x90>)
 800bb5c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bb5e:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <LmHandlerInit+0x74>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	4a0e      	ldr	r2, [pc, #56]	; (800bba0 <LmHandlerInit+0x8c>)
 800bb66:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800bb68:	490f      	ldr	r1, [pc, #60]	; (800bba8 <LmHandlerInit+0x94>)
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	f000 fcfe 	bl	800c56c <LmHandlerPackageRegister>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800bb76:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7a:	e000      	b.n	800bb7e <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	200002f0 	.word	0x200002f0
 800bb8c:	200002f4 	.word	0x200002f4
 800bb90:	0800c2c1 	.word	0x0800c2c1
 800bb94:	0800c329 	.word	0x0800c329
 800bb98:	0800c409 	.word	0x0800c409
 800bb9c:	0800c4cd 	.word	0x0800c4cd
 800bba0:	20000304 	.word	0x20000304
 800bba4:	0800c7dd 	.word	0x0800c7dd
 800bba8:	200000b8 	.word	0x200000b8

0800bbac <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbae:	b099      	sub	sp, #100	; 0x64
 800bbb0:	af08      	add	r7, sp, #32
 800bbb2:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800bbb8:	2210      	movs	r2, #16
 800bbba:	6879      	ldr	r1, [r7, #4]
 800bbbc:	4882      	ldr	r0, [pc, #520]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bbbe:	f00d fac5 	bl	801914c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800bbc2:	f7fe fb5f 	bl	800a284 <LoraInfo_GetPtr>
 800bbc6:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800bbc8:	4b7f      	ldr	r3, [pc, #508]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4093      	lsls	r3, r2
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00c      	beq.n	800bbf8 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800bbde:	4b7a      	ldr	r3, [pc, #488]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4979      	ldr	r1, [pc, #484]	; (800bdcc <LmHandlerConfigure+0x220>)
 800bbe6:	487a      	ldr	r0, [pc, #488]	; (800bdd0 <LmHandlerConfigure+0x224>)
 800bbe8:	f004 fb1a 	bl	8010220 <LoRaMacInitialization>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800bbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf6:	e0e2      	b.n	800bdbe <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800bbf8:	4b76      	ldr	r3, [pc, #472]	; (800bdd4 <LmHandlerConfigure+0x228>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f00e fadc 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800bc04:	e7fe      	b.n	800bc04 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800bc06:	f000 fdfa 	bl	800c7fe <NvmDataMgmtRestore>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800bc0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800bc14:	4b70      	ldr	r3, [pc, #448]	; (800bdd8 <LmHandlerConfigure+0x22c>)
 800bc16:	2201      	movs	r2, #1
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	e002      	b.n	800bc22 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800bc1c:	4b6e      	ldr	r3, [pc, #440]	; (800bdd8 <LmHandlerConfigure+0x22c>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800bc22:	2302      	movs	r3, #2
 800bc24:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bc26:	f107 0314 	add.w	r3, r7, #20
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f004 fe42 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2208      	movs	r2, #8
 800bc34:	4619      	mov	r1, r3
 800bc36:	4869      	ldr	r0, [pc, #420]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc38:	f00a f87f 	bl	8015d3a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800bc40:	f107 0314 	add.w	r3, r7, #20
 800bc44:	4618      	mov	r0, r3
 800bc46:	f004 fe35 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	2208      	movs	r2, #8
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4863      	ldr	r0, [pc, #396]	; (800bde0 <LmHandlerConfigure+0x234>)
 800bc52:	f00a f872 	bl	8015d3a <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800bc56:	4b63      	ldr	r3, [pc, #396]	; (800bde4 <LmHandlerConfigure+0x238>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	4798      	blx	r3
 800bc5e:	4603      	mov	r3, r0
 800bc60:	4a5e      	ldr	r2, [pc, #376]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc62:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800bc64:	2306      	movs	r3, #6
 800bc66:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800bc68:	4b5c      	ldr	r3, [pc, #368]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800bc6e:	f107 0314 	add.w	r3, r7, #20
 800bc72:	4618      	mov	r0, r3
 800bc74:	f004 ff7c 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bc78:	4b58      	ldr	r3, [pc, #352]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4b57      	ldr	r3, [pc, #348]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc80:	785b      	ldrb	r3, [r3, #1]
 800bc82:	4619      	mov	r1, r3
 800bc84:	4b55      	ldr	r3, [pc, #340]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc86:	789b      	ldrb	r3, [r3, #2]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	4b54      	ldr	r3, [pc, #336]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc8c:	78db      	ldrb	r3, [r3, #3]
 800bc8e:	461c      	mov	r4, r3
 800bc90:	4b52      	ldr	r3, [pc, #328]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc92:	791b      	ldrb	r3, [r3, #4]
 800bc94:	461d      	mov	r5, r3
 800bc96:	4b51      	ldr	r3, [pc, #324]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc98:	795b      	ldrb	r3, [r3, #5]
 800bc9a:	461e      	mov	r6, r3
 800bc9c:	4b4f      	ldr	r3, [pc, #316]	; (800bddc <LmHandlerConfigure+0x230>)
 800bc9e:	799b      	ldrb	r3, [r3, #6]
 800bca0:	603b      	str	r3, [r7, #0]
 800bca2:	4b4e      	ldr	r3, [pc, #312]	; (800bddc <LmHandlerConfigure+0x230>)
 800bca4:	79db      	ldrb	r3, [r3, #7]
 800bca6:	9307      	str	r3, [sp, #28]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	9306      	str	r3, [sp, #24]
 800bcac:	9605      	str	r6, [sp, #20]
 800bcae:	9504      	str	r5, [sp, #16]
 800bcb0:	9403      	str	r4, [sp, #12]
 800bcb2:	9002      	str	r0, [sp, #8]
 800bcb4:	9101      	str	r1, [sp, #4]
 800bcb6:	9200      	str	r2, [sp, #0]
 800bcb8:	4b4b      	ldr	r3, [pc, #300]	; (800bde8 <LmHandlerConfigure+0x23c>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	2002      	movs	r0, #2
 800bcc0:	f00e fa7c 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bcc4:	4b45      	ldr	r3, [pc, #276]	; (800bddc <LmHandlerConfigure+0x230>)
 800bcc6:	7a1b      	ldrb	r3, [r3, #8]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4b44      	ldr	r3, [pc, #272]	; (800bddc <LmHandlerConfigure+0x230>)
 800bccc:	7a5b      	ldrb	r3, [r3, #9]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4b42      	ldr	r3, [pc, #264]	; (800bddc <LmHandlerConfigure+0x230>)
 800bcd2:	7a9b      	ldrb	r3, [r3, #10]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	4b41      	ldr	r3, [pc, #260]	; (800bddc <LmHandlerConfigure+0x230>)
 800bcd8:	7adb      	ldrb	r3, [r3, #11]
 800bcda:	461c      	mov	r4, r3
 800bcdc:	4b3f      	ldr	r3, [pc, #252]	; (800bddc <LmHandlerConfigure+0x230>)
 800bcde:	7b1b      	ldrb	r3, [r3, #12]
 800bce0:	461d      	mov	r5, r3
 800bce2:	4b3e      	ldr	r3, [pc, #248]	; (800bddc <LmHandlerConfigure+0x230>)
 800bce4:	7b5b      	ldrb	r3, [r3, #13]
 800bce6:	461e      	mov	r6, r3
 800bce8:	4b3c      	ldr	r3, [pc, #240]	; (800bddc <LmHandlerConfigure+0x230>)
 800bcea:	7b9b      	ldrb	r3, [r3, #14]
 800bcec:	603b      	str	r3, [r7, #0]
 800bcee:	4b3b      	ldr	r3, [pc, #236]	; (800bddc <LmHandlerConfigure+0x230>)
 800bcf0:	7bdb      	ldrb	r3, [r3, #15]
 800bcf2:	9307      	str	r3, [sp, #28]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	9306      	str	r3, [sp, #24]
 800bcf8:	9605      	str	r6, [sp, #20]
 800bcfa:	9504      	str	r5, [sp, #16]
 800bcfc:	9403      	str	r4, [sp, #12]
 800bcfe:	9002      	str	r0, [sp, #8]
 800bd00:	9101      	str	r1, [sp, #4]
 800bd02:	9200      	str	r2, [sp, #0]
 800bd04:	4b39      	ldr	r3, [pc, #228]	; (800bdec <LmHandlerConfigure+0x240>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	2100      	movs	r1, #0
 800bd0a:	2002      	movs	r0, #2
 800bd0c:	f00e fa56 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800bd10:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <LmHandlerConfigure+0x244>)
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	461a      	mov	r2, r3
 800bd16:	4b37      	ldr	r3, [pc, #220]	; (800bdf4 <LmHandlerConfigure+0x248>)
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	4b36      	ldr	r3, [pc, #216]	; (800bdf8 <LmHandlerConfigure+0x24c>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	4618      	mov	r0, r3
 800bd22:	4b36      	ldr	r3, [pc, #216]	; (800bdfc <LmHandlerConfigure+0x250>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	9303      	str	r3, [sp, #12]
 800bd28:	9002      	str	r0, [sp, #8]
 800bd2a:	9101      	str	r1, [sp, #4]
 800bd2c:	9200      	str	r2, [sp, #0]
 800bd2e:	4b34      	ldr	r3, [pc, #208]	; (800be00 <LmHandlerConfigure+0x254>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	2100      	movs	r1, #0
 800bd34:	2002      	movs	r0, #2
 800bd36:	f00e fa41 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800bd3a:	230f      	movs	r3, #15
 800bd3c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800bd42:	f107 0314 	add.w	r3, r7, #20
 800bd46:	4618      	mov	r0, r3
 800bd48:	f004 ff12 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800bd4c:	2305      	movs	r3, #5
 800bd4e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800bd50:	2300      	movs	r3, #0
 800bd52:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800bd54:	f107 0314 	add.w	r3, r7, #20
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f004 ff09 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800bd5e:	2310      	movs	r3, #16
 800bd60:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800bd62:	2300      	movs	r3, #0
 800bd64:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bd66:	f107 0314 	add.w	r3, r7, #20
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f004 ff00 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800bd70:	2304      	movs	r3, #4
 800bd72:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800bd74:	4b14      	ldr	r3, [pc, #80]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bd76:	789b      	ldrb	r3, [r3, #2]
 800bd78:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800bd7a:	f107 0314 	add.w	r3, r7, #20
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f004 fef6 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800bd84:	230f      	movs	r3, #15
 800bd86:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800bd88:	4b0f      	ldr	r3, [pc, #60]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	f107 020c 	add.w	r2, r7, #12
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f007 fcc6 	bl	8013724 <RegionGetPhyParam>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bf14      	ite	ne
 800bda2:	2301      	movne	r3, #1
 800bda4:	2300      	moveq	r3, #0
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	4b07      	ldr	r3, [pc, #28]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bdaa:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800bdac:	2014      	movs	r0, #20
 800bdae:	f000 fa6f 	bl	800c290 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800bdb2:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <LmHandlerConfigure+0x21c>)
 800bdb4:	795b      	ldrb	r3, [r3, #5]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f005 fc4e 	bl	8011658 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3744      	adds	r7, #68	; 0x44
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	200002e0 	.word	0x200002e0
 800bdcc:	20000304 	.word	0x20000304
 800bdd0:	200002f4 	.word	0x200002f4
 800bdd4:	0801ad88 	.word	0x0801ad88
 800bdd8:	20000422 	.word	0x20000422
 800bddc:	200000a0 	.word	0x200000a0
 800bde0:	200000a8 	.word	0x200000a8
 800bde4:	200002f0 	.word	0x200002f0
 800bde8:	0801add4 	.word	0x0801add4
 800bdec:	0801ae10 	.word	0x0801ae10
 800bdf0:	200000b7 	.word	0x200000b7
 800bdf4:	200000b6 	.word	0x200000b6
 800bdf8:	200000b5 	.word	0x200000b5
 800bdfc:	200000b4 	.word	0x200000b4
 800be00:	0801ae4c 	.word	0x0801ae4c

0800be04 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800be08:	f002 f9b8 	bl	800e17c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800be0c:	f000 fc9a 	bl	800c744 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800be10:	f000 fcee 	bl	800c7f0 <NvmDataMgmtStore>
}
 800be14:	bf00      	nop
 800be16:	bd80      	pop	{r7, pc}

0800be18 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b090      	sub	sp, #64	; 0x40
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	2b02      	cmp	r3, #2
 800be26:	d111      	bne.n	800be4c <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800be28:	4b23      	ldr	r3, [pc, #140]	; (800beb8 <LmHandlerJoin+0xa0>)
 800be2a:	2202      	movs	r2, #2
 800be2c:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800be2e:	f004 fcab 	bl	8010788 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800be32:	2301      	movs	r3, #1
 800be34:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800be36:	4b21      	ldr	r3, [pc, #132]	; (800bebc <LmHandlerJoin+0xa4>)
 800be38:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800be40:	f107 0308 	add.w	r3, r7, #8
 800be44:	4618      	mov	r0, r3
 800be46:	f005 f9d1 	bl	80111ec <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800be4a:	e030      	b.n	800beae <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800be4c:	4b1a      	ldr	r3, [pc, #104]	; (800beb8 <LmHandlerJoin+0xa0>)
 800be4e:	2201      	movs	r2, #1
 800be50:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800be52:	4b1a      	ldr	r3, [pc, #104]	; (800bebc <LmHandlerJoin+0xa4>)
 800be54:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800be58:	4b17      	ldr	r3, [pc, #92]	; (800beb8 <LmHandlerJoin+0xa0>)
 800be5a:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800be5c:	4b16      	ldr	r3, [pc, #88]	; (800beb8 <LmHandlerJoin+0xa0>)
 800be5e:	2200      	movs	r2, #0
 800be60:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800be62:	4b17      	ldr	r3, [pc, #92]	; (800bec0 <LmHandlerJoin+0xa8>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	f083 0301 	eor.w	r3, r3, #1
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d008      	beq.n	800be82 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800be70:	2327      	movs	r3, #39	; 0x27
 800be72:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800be74:	4b13      	ldr	r3, [pc, #76]	; (800bec4 <LmHandlerJoin+0xac>)
 800be76:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800be78:	f107 031c 	add.w	r3, r7, #28
 800be7c:	4618      	mov	r0, r3
 800be7e:	f004 fe77 	bl	8010b70 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800be82:	f004 fc81 	bl	8010788 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800be86:	2301      	movs	r3, #1
 800be88:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800be8a:	2301      	movs	r3, #1
 800be8c:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800be90:	f107 031c 	add.w	r3, r7, #28
 800be94:	4618      	mov	r0, r3
 800be96:	f004 fe6b 	bl	8010b70 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800be9a:	4b0b      	ldr	r3, [pc, #44]	; (800bec8 <LmHandlerJoin+0xb0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	4805      	ldr	r0, [pc, #20]	; (800beb8 <LmHandlerJoin+0xa0>)
 800bea2:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800bea4:	4b05      	ldr	r3, [pc, #20]	; (800bebc <LmHandlerJoin+0xa4>)
 800bea6:	785b      	ldrb	r3, [r3, #1]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 f917 	bl	800c0dc <LmHandlerRequestClass>
}
 800beae:	bf00      	nop
 800beb0:	3740      	adds	r7, #64	; 0x40
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	200000c4 	.word	0x200000c4
 800bebc:	200002e0 	.word	0x200002e0
 800bec0:	20000422 	.word	0x20000422
 800bec4:	01000300 	.word	0x01000300
 800bec8:	200002f0 	.word	0x200002f0

0800becc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08a      	sub	sp, #40	; 0x28
 800bed0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bed2:	2301      	movs	r3, #1
 800bed4:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800bed6:	463b      	mov	r3, r7
 800bed8:	4618      	mov	r0, r3
 800beda:	f004 fceb 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
 800bede:	4603      	mov	r3, r0
 800bee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800bee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d106      	bne.n	800befa <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800beec:	793b      	ldrb	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800bef2:	2300      	movs	r3, #0
 800bef4:	e002      	b.n	800befc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800befa:	2300      	movs	r3, #0
    }
}
 800befc:	4618      	mov	r0, r3
 800befe:	3728      	adds	r7, #40	; 0x28
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08c      	sub	sp, #48	; 0x30
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	460b      	mov	r3, r1
 800bf12:	72fb      	strb	r3, [r7, #11]
 800bf14:	4613      	mov	r3, r2
 800bf16:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800bf18:	23ff      	movs	r3, #255	; 0xff
 800bf1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800bf1e:	f001 fe97 	bl	800dc50 <LoRaMacIsBusy>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d002      	beq.n	800bf2e <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bf28:	f06f 0301 	mvn.w	r3, #1
 800bf2c:	e0b4      	b.n	800c098 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800bf2e:	f7ff ffcd 	bl	800becc <LmHandlerJoinStatus>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d007      	beq.n	800bf48 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800bf38:	4b59      	ldr	r3, [pc, #356]	; (800c0a0 <LmHandlerSend+0x19c>)
 800bf3a:	789b      	ldrb	r3, [r3, #2]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff ff6b 	bl	800be18 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bf42:	f06f 0302 	mvn.w	r3, #2
 800bf46:	e0a7      	b.n	800c098 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800bf48:	4b56      	ldr	r3, [pc, #344]	; (800c0a4 <LmHandlerSend+0x1a0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68db      	ldr	r3, [r3, #12]
 800bf4e:	4798      	blx	r3
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00d      	beq.n	800bf72 <LmHandlerSend+0x6e>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	781a      	ldrb	r2, [r3, #0]
 800bf5a:	4b52      	ldr	r3, [pc, #328]	; (800c0a4 <LmHandlerSend+0x1a0>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d006      	beq.n	800bf72 <LmHandlerSend+0x6e>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800bf6c:	f06f 0303 	mvn.w	r3, #3
 800bf70:	e092      	b.n	800c098 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800bf72:	4b4d      	ldr	r3, [pc, #308]	; (800c0a8 <LmHandlerSend+0x1a4>)
 800bf74:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800bf78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	785b      	ldrb	r3, [r3, #1]
 800bf80:	f107 0214 	add.w	r2, r7, #20
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f004 fc0c 	bl	80107a4 <LoRaMacQueryTxPossible>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d009      	beq.n	800bfa6 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800bf92:	4b46      	ldr	r3, [pc, #280]	; (800c0ac <LmHandlerSend+0x1a8>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bfa4:	e017      	b.n	800bfd6 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800bfa6:	4a41      	ldr	r2, [pc, #260]	; (800c0ac <LmHandlerSend+0x1a8>)
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	785b      	ldrb	r3, [r3, #1]
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800bfc0:	7afb      	ldrb	r3, [r7, #11]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	763b      	strb	r3, [r7, #24]
 800bfca:	e004      	b.n	800bfd6 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800bfd6:	4b35      	ldr	r3, [pc, #212]	; (800c0ac <LmHandlerSend+0x1a8>)
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfe0:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800bfe4:	4b30      	ldr	r3, [pc, #192]	; (800c0a8 <LmHandlerSend+0x1a4>)
 800bfe6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800bfea:	4b30      	ldr	r3, [pc, #192]	; (800c0ac <LmHandlerSend+0x1a8>)
 800bfec:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800bfee:	7aba      	ldrb	r2, [r7, #10]
 800bff0:	f107 0318 	add.w	r3, r7, #24
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f005 fa38 	bl	801146c <LoRaMacMcpsRequest>
 800bffc:	4603      	mov	r3, r0
 800bffe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c00e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c012:	2b11      	cmp	r3, #17
 800c014:	d83a      	bhi.n	800c08c <LmHandlerSend+0x188>
 800c016:	a201      	add	r2, pc, #4	; (adr r2, 800c01c <LmHandlerSend+0x118>)
 800c018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01c:	0800c065 	.word	0x0800c065
 800c020:	0800c06d 	.word	0x0800c06d
 800c024:	0800c08d 	.word	0x0800c08d
 800c028:	0800c08d 	.word	0x0800c08d
 800c02c:	0800c08d 	.word	0x0800c08d
 800c030:	0800c08d 	.word	0x0800c08d
 800c034:	0800c08d 	.word	0x0800c08d
 800c038:	0800c075 	.word	0x0800c075
 800c03c:	0800c08d 	.word	0x0800c08d
 800c040:	0800c08d 	.word	0x0800c08d
 800c044:	0800c08d 	.word	0x0800c08d
 800c048:	0800c085 	.word	0x0800c085
 800c04c:	0800c08d 	.word	0x0800c08d
 800c050:	0800c08d 	.word	0x0800c08d
 800c054:	0800c06d 	.word	0x0800c06d
 800c058:	0800c06d 	.word	0x0800c06d
 800c05c:	0800c06d 	.word	0x0800c06d
 800c060:	0800c07d 	.word	0x0800c07d
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c064:	2300      	movs	r3, #0
 800c066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c06a:	e013      	b.n	800c094 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c06c:	23fe      	movs	r3, #254	; 0xfe
 800c06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c072:	e00f      	b.n	800c094 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c074:	23fd      	movs	r3, #253	; 0xfd
 800c076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c07a:	e00b      	b.n	800c094 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c07c:	23fb      	movs	r3, #251	; 0xfb
 800c07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c082:	e007      	b.n	800c094 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c084:	23fa      	movs	r3, #250	; 0xfa
 800c086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c08a:	e003      	b.n	800c094 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c08c:	23ff      	movs	r3, #255	; 0xff
 800c08e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c092:	bf00      	nop
    }

    return lmhStatus;
 800c094:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3730      	adds	r7, #48	; 0x30
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	200000c4 	.word	0x200000c4
 800c0a4:	200002cc 	.word	0x200002cc
 800c0a8:	200002e0 	.word	0x200002e0
 800c0ac:	20000318 	.word	0x20000318

0800c0b0 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c0b6:	230a      	movs	r3, #10
 800c0b8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f005 f895 	bl	80111ec <LoRaMacMlmeRequest>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e001      	b.n	800c0d4 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b08c      	sub	sp, #48	; 0x30
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c0ec:	f001 fdb0 	bl	800dc50 <LoRaMacIsBusy>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d002      	beq.n	800c0fc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c0f6:	f06f 0301 	mvn.w	r3, #1
 800c0fa:	e07b      	b.n	800c1f4 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c0fc:	f7ff fee6 	bl	800becc <LmHandlerJoinStatus>
 800c100:	4603      	mov	r3, r0
 800c102:	2b01      	cmp	r3, #1
 800c104:	d002      	beq.n	800c10c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c106:	f06f 0302 	mvn.w	r3, #2
 800c10a:	e073      	b.n	800c1f4 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c10c:	2300      	movs	r3, #0
 800c10e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4618      	mov	r0, r3
 800c116:	f004 fbcd 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c120:	f04f 33ff 	mov.w	r3, #4294967295
 800c124:	e066      	b.n	800c1f4 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c126:	7b3b      	ldrb	r3, [r7, #12]
 800c128:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c12c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c130:	79fb      	ldrb	r3, [r7, #7]
 800c132:	429a      	cmp	r2, r3
 800c134:	d055      	beq.n	800c1e2 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d02c      	beq.n	800c196 <LmHandlerRequestClass+0xba>
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	dc52      	bgt.n	800c1e6 <LmHandlerRequestClass+0x10a>
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <LmHandlerRequestClass+0x6e>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d022      	beq.n	800c18e <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c148:	e04d      	b.n	800c1e6 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c14a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d04b      	beq.n	800c1ea <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c156:	f107 0308 	add.w	r3, r7, #8
 800c15a:	4618      	mov	r0, r3
 800c15c:	f004 fd08 	bl	8010b70 <LoRaMacMibSetRequestConfirm>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10f      	bne.n	800c186 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c166:	79fb      	ldrb	r3, [r7, #7]
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fb1f 	bl	800c7ac <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c16e:	4b23      	ldr	r3, [pc, #140]	; (800c1fc <LmHandlerRequestClass+0x120>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c174:	2b00      	cmp	r3, #0
 800c176:	d038      	beq.n	800c1ea <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c178:	4b20      	ldr	r3, [pc, #128]	; (800c1fc <LmHandlerRequestClass+0x120>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17e:	79fa      	ldrb	r2, [r7, #7]
 800c180:	4610      	mov	r0, r2
 800c182:	4798      	blx	r3
            break;
 800c184:	e031      	b.n	800c1ea <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c186:	23ff      	movs	r3, #255	; 0xff
 800c188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c18c:	e02d      	b.n	800c1ea <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c18e:	23ff      	movs	r3, #255	; 0xff
 800c190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c194:	e02c      	b.n	800c1f0 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c196:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c19e:	23ff      	movs	r3, #255	; 0xff
 800c1a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c1a4:	e023      	b.n	800c1ee <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c1aa:	f107 0308 	add.w	r3, r7, #8
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f004 fcde 	bl	8010b70 <LoRaMacMibSetRequestConfirm>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10f      	bne.n	800c1da <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 faf5 	bl	800c7ac <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c1c2:	4b0e      	ldr	r3, [pc, #56]	; (800c1fc <LmHandlerRequestClass+0x120>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d010      	beq.n	800c1ee <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <LmHandlerRequestClass+0x120>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d2:	79fa      	ldrb	r2, [r7, #7]
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
            break;
 800c1d8:	e009      	b.n	800c1ee <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c1da:	23ff      	movs	r3, #255	; 0xff
 800c1dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c1e0:	e005      	b.n	800c1ee <LmHandlerRequestClass+0x112>
        }
    }
 800c1e2:	bf00      	nop
 800c1e4:	e004      	b.n	800c1f0 <LmHandlerRequestClass+0x114>
            break;
 800c1e6:	bf00      	nop
 800c1e8:	e002      	b.n	800c1f0 <LmHandlerRequestClass+0x114>
            break;
 800c1ea:	bf00      	nop
 800c1ec:	e000      	b.n	800c1f0 <LmHandlerRequestClass+0x114>
            break;
 800c1ee:	bf00      	nop
    return errorStatus;
 800c1f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3730      	adds	r7, #48	; 0x30
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	200002f0 	.word	0x200002f0

0800c200 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	; 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d102      	bne.n	800c214 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c20e:	f04f 33ff 	mov.w	r3, #4294967295
 800c212:	e010      	b.n	800c236 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c214:	2300      	movs	r3, #0
 800c216:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c218:	f107 030c 	add.w	r3, r7, #12
 800c21c:	4618      	mov	r0, r3
 800c21e:	f004 fb49 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c228:	f04f 33ff 	mov.w	r3, #4294967295
 800c22c:	e003      	b.n	800c236 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c22e:	7c3a      	ldrb	r2, [r7, #16]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3730      	adds	r7, #48	; 0x30
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08c      	sub	sp, #48	; 0x30
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c24e:	f04f 33ff 	mov.w	r3, #4294967295
 800c252:	e016      	b.n	800c282 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c254:	231f      	movs	r3, #31
 800c256:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c258:	f107 030c 	add.w	r3, r7, #12
 800c25c:	4618      	mov	r0, r3
 800c25e:	f004 fb29 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c268:	f04f 33ff 	mov.w	r3, #4294967295
 800c26c:	e009      	b.n	800c282 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c26e:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f993 2000 	ldrsb.w	r2, [r3]
 800c27c:	4b03      	ldr	r3, [pc, #12]	; (800c28c <LmHandlerGetTxDatarate+0x4c>)
 800c27e:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3730      	adds	r7, #48	; 0x30
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	200002e0 	.word	0x200002e0

0800c290 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08c      	sub	sp, #48	; 0x30
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c298:	2322      	movs	r3, #34	; 0x22
 800c29a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c2a0:	f107 030c 	add.w	r3, r7, #12
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f004 fc63 	bl	8010b70 <LoRaMacMibSetRequestConfirm>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b4:	e000      	b.n	800c2b8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3730      	adds	r7, #48	; 0x30
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c2c8:	4b15      	ldr	r3, [pc, #84]	; (800c320 <McpsConfirm+0x60>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	785a      	ldrb	r2, [r3, #1]
 800c2d2:	4b13      	ldr	r3, [pc, #76]	; (800c320 <McpsConfirm+0x60>)
 800c2d4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	789b      	ldrb	r3, [r3, #2]
 800c2da:	b25a      	sxtb	r2, r3
 800c2dc:	4b10      	ldr	r3, [pc, #64]	; (800c320 <McpsConfirm+0x60>)
 800c2de:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	4a0e      	ldr	r2, [pc, #56]	; (800c320 <McpsConfirm+0x60>)
 800c2e6:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c2ee:	4b0c      	ldr	r3, [pc, #48]	; (800c320 <McpsConfirm+0x60>)
 800c2f0:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	4b09      	ldr	r3, [pc, #36]	; (800c320 <McpsConfirm+0x60>)
 800c2fa:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	791b      	ldrb	r3, [r3, #4]
 800c300:	461a      	mov	r2, r3
 800c302:	4b07      	ldr	r3, [pc, #28]	; (800c320 <McpsConfirm+0x60>)
 800c304:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c306:	4b07      	ldr	r3, [pc, #28]	; (800c324 <McpsConfirm+0x64>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	4804      	ldr	r0, [pc, #16]	; (800c320 <McpsConfirm+0x60>)
 800c30e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	2000      	movs	r0, #0
 800c314:	f000 f99a 	bl	800c64c <LmHandlerPackagesNotify>
}
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000318 	.word	0x20000318
 800c324:	200002f0 	.word	0x200002f0

0800c328 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c332:	2300      	movs	r3, #0
 800c334:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c336:	4b32      	ldr	r3, [pc, #200]	; (800c400 <McpsIndication+0xd8>)
 800c338:	2201      	movs	r2, #1
 800c33a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	785a      	ldrb	r2, [r3, #1]
 800c340:	4b2f      	ldr	r3, [pc, #188]	; (800c400 <McpsIndication+0xd8>)
 800c342:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c344:	4b2e      	ldr	r3, [pc, #184]	; (800c400 <McpsIndication+0xd8>)
 800c346:	785b      	ldrb	r3, [r3, #1]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d154      	bne.n	800c3f6 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	791b      	ldrb	r3, [r3, #4]
 800c350:	b25a      	sxtb	r2, r3
 800c352:	4b2b      	ldr	r3, [pc, #172]	; (800c400 <McpsIndication+0xd8>)
 800c354:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c35c:	b25a      	sxtb	r2, r3
 800c35e:	4b28      	ldr	r3, [pc, #160]	; (800c400 <McpsIndication+0xd8>)
 800c360:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c368:	4b25      	ldr	r3, [pc, #148]	; (800c400 <McpsIndication+0xd8>)
 800c36a:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	78db      	ldrb	r3, [r3, #3]
 800c370:	b25a      	sxtb	r2, r3
 800c372:	4b23      	ldr	r3, [pc, #140]	; (800c400 <McpsIndication+0xd8>)
 800c374:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	4a21      	ldr	r2, [pc, #132]	; (800c400 <McpsIndication+0xd8>)
 800c37c:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	78db      	ldrb	r3, [r3, #3]
 800c382:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7b1b      	ldrb	r3, [r3, #12]
 800c388:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800c390:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <McpsIndication+0xdc>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c396:	f107 0218 	add.w	r2, r7, #24
 800c39a:	4919      	ldr	r1, [pc, #100]	; (800c400 <McpsIndication+0xd8>)
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c3a0:	4b18      	ldr	r3, [pc, #96]	; (800c404 <McpsIndication+0xdc>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d007      	beq.n	800c3ba <McpsIndication+0x92>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7e1b      	ldrb	r3, [r3, #24]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d003      	beq.n	800c3ba <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c3b2:	4b14      	ldr	r3, [pc, #80]	; (800c404 <McpsIndication+0xdc>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b8:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c3ba:	6879      	ldr	r1, [r7, #4]
 800c3bc:	2001      	movs	r0, #1
 800c3be:	f000 f945 	bl	800c64c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800c3c2:	f107 0317 	add.w	r3, r7, #23
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff ff1a 	bl	800c200 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	795b      	ldrb	r3, [r3, #5]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d111      	bne.n	800c3f8 <McpsIndication+0xd0>
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10e      	bne.n	800c3f8 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800c3da:	2300      	movs	r3, #0
 800c3dc:	733b      	strb	r3, [r7, #12]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	737b      	strb	r3, [r7, #13]
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800c3e6:	f107 000c 	add.w	r0, r7, #12
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	f7ff fd88 	bl	800bf04 <LmHandlerSend>
 800c3f4:	e000      	b.n	800c3f8 <McpsIndication+0xd0>
        return;
 800c3f6:	bf00      	nop
    }
}
 800c3f8:	3720      	adds	r7, #32
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	200000c8 	.word	0x200000c8
 800c404:	200002f0 	.word	0x200002f0

0800c408 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08c      	sub	sp, #48	; 0x30
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c410:	4b28      	ldr	r3, [pc, #160]	; (800c4b4 <MlmeConfirm+0xac>)
 800c412:	2200      	movs	r2, #0
 800c414:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	785a      	ldrb	r2, [r3, #1]
 800c41a:	4b26      	ldr	r3, [pc, #152]	; (800c4b4 <MlmeConfirm+0xac>)
 800c41c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c41e:	4b26      	ldr	r3, [pc, #152]	; (800c4b8 <MlmeConfirm+0xb0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6a1b      	ldr	r3, [r3, #32]
 800c424:	4823      	ldr	r0, [pc, #140]	; (800c4b4 <MlmeConfirm+0xac>)
 800c426:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c428:	6879      	ldr	r1, [r7, #4]
 800c42a:	2002      	movs	r0, #2
 800c42c:	f000 f90e 	bl	800c64c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b0a      	cmp	r3, #10
 800c436:	d035      	beq.n	800c4a4 <MlmeConfirm+0x9c>
 800c438:	2b0a      	cmp	r3, #10
 800c43a:	dc35      	bgt.n	800c4a8 <MlmeConfirm+0xa0>
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d002      	beq.n	800c446 <MlmeConfirm+0x3e>
 800c440:	2b04      	cmp	r3, #4
 800c442:	d023      	beq.n	800c48c <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800c444:	e030      	b.n	800c4a8 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800c446:	2306      	movs	r3, #6
 800c448:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c44a:	f107 030c 	add.w	r3, r7, #12
 800c44e:	4618      	mov	r0, r3
 800c450:	f004 fa30 	bl	80108b4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	4a19      	ldr	r2, [pc, #100]	; (800c4bc <MlmeConfirm+0xb4>)
 800c458:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c45a:	4819      	ldr	r0, [pc, #100]	; (800c4c0 <MlmeConfirm+0xb8>)
 800c45c:	f7ff fef0 	bl	800c240 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	785b      	ldrb	r3, [r3, #1]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d108      	bne.n	800c47a <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c468:	4b15      	ldr	r3, [pc, #84]	; (800c4c0 <MlmeConfirm+0xb8>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c46e:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <MlmeConfirm+0xbc>)
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff fe32 	bl	800c0dc <LmHandlerRequestClass>
 800c478:	e002      	b.n	800c480 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c47a:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <MlmeConfirm+0xb8>)
 800c47c:	22ff      	movs	r2, #255	; 0xff
 800c47e:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c480:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <MlmeConfirm+0xb0>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	69db      	ldr	r3, [r3, #28]
 800c486:	480e      	ldr	r0, [pc, #56]	; (800c4c0 <MlmeConfirm+0xb8>)
 800c488:	4798      	blx	r3
        break;
 800c48a:	e00e      	b.n	800c4aa <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800c48c:	4b0e      	ldr	r3, [pc, #56]	; (800c4c8 <MlmeConfirm+0xc0>)
 800c48e:	2201      	movs	r2, #1
 800c490:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7a1a      	ldrb	r2, [r3, #8]
 800c496:	4b0c      	ldr	r3, [pc, #48]	; (800c4c8 <MlmeConfirm+0xc0>)
 800c498:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7a5a      	ldrb	r2, [r3, #9]
 800c49e:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <MlmeConfirm+0xc0>)
 800c4a0:	73da      	strb	r2, [r3, #15]
        break;
 800c4a2:	e002      	b.n	800c4aa <MlmeConfirm+0xa2>
        break;
 800c4a4:	bf00      	nop
 800c4a6:	e000      	b.n	800c4aa <MlmeConfirm+0xa2>
        break;
 800c4a8:	bf00      	nop
    }
}
 800c4aa:	bf00      	nop
 800c4ac:	3730      	adds	r7, #48	; 0x30
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000318 	.word	0x20000318
 800c4b8:	200002f0 	.word	0x200002f0
 800c4bc:	200000a0 	.word	0x200000a0
 800c4c0:	200000c4 	.word	0x200000c4
 800c4c4:	200002e0 	.word	0x200002e0
 800c4c8:	200000c8 	.word	0x200000c8

0800c4cc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c4d6:	4b22      	ldr	r3, [pc, #136]	; (800c560 <MlmeIndication+0x94>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	785a      	ldrb	r2, [r3, #1]
 800c4e0:	4b1f      	ldr	r3, [pc, #124]	; (800c560 <MlmeIndication+0x94>)
 800c4e2:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4ea:	b25a      	sxtb	r2, r3
 800c4ec:	4b1c      	ldr	r3, [pc, #112]	; (800c560 <MlmeIndication+0x94>)
 800c4ee:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c4f6:	4b1a      	ldr	r3, [pc, #104]	; (800c560 <MlmeIndication+0x94>)
 800c4f8:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	78db      	ldrb	r3, [r3, #3]
 800c4fe:	b25a      	sxtb	r2, r3
 800c500:	4b17      	ldr	r3, [pc, #92]	; (800c560 <MlmeIndication+0x94>)
 800c502:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800c504:	4b16      	ldr	r3, [pc, #88]	; (800c560 <MlmeIndication+0x94>)
 800c506:	785b      	ldrb	r3, [r3, #1]
 800c508:	2b0e      	cmp	r3, #14
 800c50a:	d005      	beq.n	800c518 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c50c:	4b15      	ldr	r3, [pc, #84]	; (800c564 <MlmeIndication+0x98>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c512:	4913      	ldr	r1, [pc, #76]	; (800c560 <MlmeIndication+0x94>)
 800c514:	2000      	movs	r0, #0
 800c516:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b07      	cmp	r3, #7
 800c51e:	d117      	bne.n	800c550 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800c520:	2300      	movs	r3, #0
 800c522:	723b      	strb	r3, [r7, #8]
 800c524:	2300      	movs	r3, #0
 800c526:	727b      	strb	r3, [r7, #9]
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800c52c:	4b0e      	ldr	r3, [pc, #56]	; (800c568 <MlmeIndication+0x9c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	4798      	blx	r3
 800c534:	4603      	mov	r3, r0
 800c536:	f083 0301 	eor.w	r3, r3, #1
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d009      	beq.n	800c554 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800c540:	f107 0008 	add.w	r0, r7, #8
 800c544:	2301      	movs	r3, #1
 800c546:	2200      	movs	r2, #0
 800c548:	2100      	movs	r1, #0
 800c54a:	f7ff fcdb 	bl	800bf04 <LmHandlerSend>
            }
        }
        break;
 800c54e:	e001      	b.n	800c554 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800c550:	bf00      	nop
 800c552:	e000      	b.n	800c556 <MlmeIndication+0x8a>
        break;
 800c554:	bf00      	nop
    }
}
 800c556:	bf00      	nop
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	200000c8 	.word	0x200000c8
 800c564:	200002f0 	.word	0x200002f0
 800c568:	200002cc 	.word	0x200002cc

0800c56c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	4603      	mov	r3, r0
 800c574:	6039      	str	r1, [r7, #0]
 800c576:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d103      	bne.n	800c58a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800c582:	f000 f943 	bl	800c80c <LmhpCompliancePackageFactory>
 800c586:	60f8      	str	r0, [r7, #12]
            break;
 800c588:	e000      	b.n	800c58c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800c58a:	bf00      	nop
        }
    }
    if( package != NULL )
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d02b      	beq.n	800c5ea <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	4918      	ldr	r1, [pc, #96]	; (800c5f8 <LmHandlerPackageRegister+0x8c>)
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c59c:	79fb      	ldrb	r3, [r7, #7]
 800c59e:	4a16      	ldr	r2, [pc, #88]	; (800c5f8 <LmHandlerPackageRegister+0x8c>)
 800c5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5a4:	4a15      	ldr	r2, [pc, #84]	; (800c5fc <LmHandlerPackageRegister+0x90>)
 800c5a6:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800c5a8:	79fb      	ldrb	r3, [r7, #7]
 800c5aa:	4a13      	ldr	r2, [pc, #76]	; (800c5f8 <LmHandlerPackageRegister+0x8c>)
 800c5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5b0:	4a13      	ldr	r2, [pc, #76]	; (800c600 <LmHandlerPackageRegister+0x94>)
 800c5b2:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <LmHandlerPackageRegister+0x8c>)
 800c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5bc:	4a11      	ldr	r2, [pc, #68]	; (800c604 <LmHandlerPackageRegister+0x98>)
 800c5be:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c5c0:	4b11      	ldr	r3, [pc, #68]	; (800c608 <LmHandlerPackageRegister+0x9c>)
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	490c      	ldr	r1, [pc, #48]	; (800c5f8 <LmHandlerPackageRegister+0x8c>)
 800c5c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c5cc:	6912      	ldr	r2, [r2, #16]
 800c5ce:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c5d0:	79fb      	ldrb	r3, [r7, #7]
 800c5d2:	4a09      	ldr	r2, [pc, #36]	; (800c5f8 <LmHandlerPackageRegister+0x8c>)
 800c5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4a0c      	ldr	r2, [pc, #48]	; (800c60c <LmHandlerPackageRegister+0xa0>)
 800c5dc:	6851      	ldr	r1, [r2, #4]
 800c5de:	4a0b      	ldr	r2, [pc, #44]	; (800c60c <LmHandlerPackageRegister+0xa0>)
 800c5e0:	7852      	ldrb	r2, [r2, #1]
 800c5e2:	6838      	ldr	r0, [r7, #0]
 800c5e4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e001      	b.n	800c5ee <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c5ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	200002cc 	.word	0x200002cc
 800c5fc:	0800be19 	.word	0x0800be19
 800c600:	0800bf05 	.word	0x0800bf05
 800c604:	0800c0b1 	.word	0x0800c0b1
 800c608:	200002f0 	.word	0x200002f0
 800c60c:	200000d8 	.word	0x200000d8

0800c610 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	4603      	mov	r3, r0
 800c618:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800c61a:	79fb      	ldrb	r3, [r7, #7]
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d80e      	bhi.n	800c63e <LmHandlerPackageIsInitialized+0x2e>
 800c620:	79fb      	ldrb	r3, [r7, #7]
 800c622:	4a09      	ldr	r2, [pc, #36]	; (800c648 <LmHandlerPackageIsInitialized+0x38>)
 800c624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d007      	beq.n	800c63e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c62e:	79fb      	ldrb	r3, [r7, #7]
 800c630:	4a05      	ldr	r2, [pc, #20]	; (800c648 <LmHandlerPackageIsInitialized+0x38>)
 800c632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	4798      	blx	r3
 800c63a:	4603      	mov	r3, r0
 800c63c:	e000      	b.n	800c640 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c63e:	2300      	movs	r3, #0
    }
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	200002cc 	.word	0x200002cc

0800c64c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	4603      	mov	r3, r0
 800c654:	6039      	str	r1, [r7, #0]
 800c656:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]
 800c65c:	e067      	b.n	800c72e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800c65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c662:	4a37      	ldr	r2, [pc, #220]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d051      	beq.n	800c710 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d03d      	beq.n	800c6ee <LmHandlerPackagesNotify+0xa2>
 800c672:	2b02      	cmp	r3, #2
 800c674:	dc4e      	bgt.n	800c714 <LmHandlerPackagesNotify+0xc8>
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <LmHandlerPackagesNotify+0x34>
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d011      	beq.n	800c6a2 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800c67e:	e049      	b.n	800c714 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c684:	4a2e      	ldr	r2, [pc, #184]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c68a:	699b      	ldr	r3, [r3, #24]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d043      	beq.n	800c718 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800c690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c694:	4a2a      	ldr	r2, [pc, #168]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	6838      	ldr	r0, [r7, #0]
 800c69e:	4798      	blx	r3
                    break;
 800c6a0:	e03a      	b.n	800c718 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a6:	4a26      	ldr	r2, [pc, #152]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d034      	beq.n	800c71c <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800c6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6b6:	4a22      	ldr	r2, [pc, #136]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6bc:	781a      	ldrb	r2, [r3, #0]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d00a      	beq.n	800c6dc <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800c6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d126      	bne.n	800c71c <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800c6ce:	4b1c      	ldr	r3, [pc, #112]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	4798      	blx	r3
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d01f      	beq.n	800c71c <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800c6dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6e0:	4a17      	ldr	r2, [pc, #92]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	6838      	ldr	r0, [r7, #0]
 800c6ea:	4798      	blx	r3
                    break;
 800c6ec:	e016      	b.n	800c71c <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6f2:	4a13      	ldr	r2, [pc, #76]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d010      	beq.n	800c720 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800c6fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c702:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <LmHandlerPackagesNotify+0xf4>)
 800c704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	6838      	ldr	r0, [r7, #0]
 800c70c:	4798      	blx	r3
                    break;
 800c70e:	e007      	b.n	800c720 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800c710:	bf00      	nop
 800c712:	e006      	b.n	800c722 <LmHandlerPackagesNotify+0xd6>
                    break;
 800c714:	bf00      	nop
 800c716:	e004      	b.n	800c722 <LmHandlerPackagesNotify+0xd6>
                    break;
 800c718:	bf00      	nop
 800c71a:	e002      	b.n	800c722 <LmHandlerPackagesNotify+0xd6>
                    break;
 800c71c:	bf00      	nop
 800c71e:	e000      	b.n	800c722 <LmHandlerPackagesNotify+0xd6>
                    break;
 800c720:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c726:	b2db      	uxtb	r3, r3
 800c728:	3301      	adds	r3, #1
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	73fb      	strb	r3, [r7, #15]
 800c72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c732:	2b04      	cmp	r3, #4
 800c734:	dd93      	ble.n	800c65e <LmHandlerPackagesNotify+0x12>
    }
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	200002cc 	.word	0x200002cc

0800c744 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c74a:	2300      	movs	r3, #0
 800c74c:	71fb      	strb	r3, [r7, #7]
 800c74e:	e022      	b.n	800c796 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c754:	4a14      	ldr	r2, [pc, #80]	; (800c7a8 <LmHandlerPackagesProcess+0x64>)
 800c756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d015      	beq.n	800c78a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c762:	4a11      	ldr	r2, [pc, #68]	; (800c7a8 <LmHandlerPackagesProcess+0x64>)
 800c764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c768:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00d      	beq.n	800c78a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff ff4d 	bl	800c610 <LmHandlerPackageIsInitialized>
 800c776:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d006      	beq.n	800c78a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800c77c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c780:	4a09      	ldr	r2, [pc, #36]	; (800c7a8 <LmHandlerPackagesProcess+0x64>)
 800c782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c78a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	3301      	adds	r3, #1
 800c792:	b2db      	uxtb	r3, r3
 800c794:	71fb      	strb	r3, [r7, #7]
 800c796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c79a:	2b04      	cmp	r3, #4
 800c79c:	ddd8      	ble.n	800c750 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	200002cc 	.word	0x200002cc

0800c7ac <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af02      	add	r7, sp, #8
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	4a06      	ldr	r2, [pc, #24]	; (800c7d4 <DisplayClassUpdate+0x28>)
 800c7ba:	5cd3      	ldrb	r3, [r2, r3]
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	4b06      	ldr	r3, [pc, #24]	; (800c7d8 <DisplayClassUpdate+0x2c>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	2002      	movs	r0, #2
 800c7c6:	f00d fcf9 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	0801ae90 	.word	0x0801ae90
 800c7d8:	0801ae74 	.word	0x0801ae74

0800c7dc <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bc80      	pop	{r7}
 800c7ee:	4770      	bx	lr

0800c7f0 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800c7f4:	2300      	movs	r3, #0
#endif
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bc80      	pop	{r7}
 800c7fc:	4770      	bx	lr

0800c7fe <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800c7fe:	b480      	push	{r7}
 800c800:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	46bd      	mov	sp, r7
 800c808:	bc80      	pop	{r7}
 800c80a:	4770      	bx	lr

0800c80c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c810:	4b02      	ldr	r3, [pc, #8]	; (800c81c <LmhpCompliancePackageFactory+0x10>)
}
 800c812:	4618      	mov	r0, r3
 800c814:	46bd      	mov	sp, r7
 800c816:	bc80      	pop	{r7}
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	200000e0 	.word	0x200000e0

0800c820 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	4613      	mov	r3, r2
 800c82c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00f      	beq.n	800c854 <LmhpComplianceInit+0x34>
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00c      	beq.n	800c854 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800c83a:	4a0c      	ldr	r2, [pc, #48]	; (800c86c <LmhpComplianceInit+0x4c>)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c840:	4a0b      	ldr	r2, [pc, #44]	; (800c870 <LmhpComplianceInit+0x50>)
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c846:	4a0a      	ldr	r2, [pc, #40]	; (800c870 <LmhpComplianceInit+0x50>)
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c84c:	4b08      	ldr	r3, [pc, #32]	; (800c870 <LmhpComplianceInit+0x50>)
 800c84e:	2201      	movs	r2, #1
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	e006      	b.n	800c862 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <LmhpComplianceInit+0x4c>)
 800c856:	2200      	movs	r2, #0
 800c858:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c85a:	4b05      	ldr	r3, [pc, #20]	; (800c870 <LmhpComplianceInit+0x50>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	701a      	strb	r2, [r3, #0]
    }
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	bc80      	pop	{r7}
 800c86a:	4770      	bx	lr
 800c86c:	20000450 	.word	0x20000450
 800c870:	2000043c 	.word	0x2000043c

0800c874 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c874:	b480      	push	{r7}
 800c876:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c878:	4b02      	ldr	r3, [pc, #8]	; (800c884 <LmhpComplianceIsInitialized+0x10>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	46bd      	mov	sp, r7
 800c880:	bc80      	pop	{r7}
 800c882:	4770      	bx	lr
 800c884:	2000043c 	.word	0x2000043c

0800c888 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c888:	b480      	push	{r7}
 800c88a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c88c:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <LmhpComplianceIsRunning+0x24>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f083 0301 	eor.w	r3, r3, #1
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c89a:	2300      	movs	r3, #0
 800c89c:	e001      	b.n	800c8a2 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c89e:	4b03      	ldr	r3, [pc, #12]	; (800c8ac <LmhpComplianceIsRunning+0x24>)
 800c8a0:	785b      	ldrb	r3, [r3, #1]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bc80      	pop	{r7}
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	2000043c 	.word	0x2000043c

0800c8b0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800c8b8:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	f083 0301 	eor.w	r3, r3, #1
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d112      	bne.n	800c8ec <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c8c6:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c8c8:	785b      	ldrb	r3, [r3, #1]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00f      	beq.n	800c8ee <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d10b      	bne.n	800c8ee <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c8de:	4b06      	ldr	r3, [pc, #24]	; (800c8f8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c8e0:	899b      	ldrh	r3, [r3, #12]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c8e8:	819a      	strh	r2, [r3, #12]
 800c8ea:	e000      	b.n	800c8ee <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c8ec:	bf00      	nop
    }
}
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bc80      	pop	{r7}
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	2000043c 	.word	0x2000043c

0800c8fc <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c904:	4b12      	ldr	r3, [pc, #72]	; (800c950 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	f083 0301 	eor.w	r3, r3, #1
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d116      	bne.n	800c940 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c912:	4b0f      	ldr	r3, [pc, #60]	; (800c950 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c914:	785b      	ldrb	r3, [r3, #1]
 800c916:	f083 0301 	eor.w	r3, r3, #1
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d111      	bne.n	800c944 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b04      	cmp	r3, #4
 800c926:	d10e      	bne.n	800c946 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c928:	4b09      	ldr	r3, [pc, #36]	; (800c950 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7a1a      	ldrb	r2, [r3, #8]
 800c932:	4b07      	ldr	r3, [pc, #28]	; (800c950 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c934:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	7a5a      	ldrb	r2, [r3, #9]
 800c93a:	4b05      	ldr	r3, [pc, #20]	; (800c950 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c93c:	741a      	strb	r2, [r3, #16]
 800c93e:	e002      	b.n	800c946 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c940:	bf00      	nop
 800c942:	e000      	b.n	800c946 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c944:	bf00      	nop
    }
}
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	bc80      	pop	{r7}
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	2000043c 	.word	0x2000043c

0800c954 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c954:	b590      	push	{r4, r7, lr}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c95a:	4b33      	ldr	r3, [pc, #204]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	f083 0301 	eor.w	r3, r3, #1
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c968:	f04f 33ff 	mov.w	r3, #4294967295
 800c96c:	e058      	b.n	800ca20 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800c96e:	4b2e      	ldr	r3, [pc, #184]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	f083 0301 	eor.w	r3, r3, #1
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e04f      	b.n	800ca20 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c980:	4b29      	ldr	r3, [pc, #164]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c982:	7b9b      	ldrb	r3, [r3, #14]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d019      	beq.n	800c9bc <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c988:	4b27      	ldr	r3, [pc, #156]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c98e:	4b26      	ldr	r3, [pc, #152]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c990:	2203      	movs	r2, #3
 800c992:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c994:	4b24      	ldr	r3, [pc, #144]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	2205      	movs	r2, #5
 800c99a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c99c:	4b22      	ldr	r3, [pc, #136]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	4a21      	ldr	r2, [pc, #132]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9a4:	7bd2      	ldrb	r2, [r2, #15]
 800c9a6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c9a8:	4b1f      	ldr	r3, [pc, #124]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	3302      	adds	r3, #2
 800c9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9b0:	7c12      	ldrb	r2, [r2, #16]
 800c9b2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c9b4:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	709a      	strb	r2, [r3, #2]
 800c9ba:	e01c      	b.n	800c9f6 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9be:	789b      	ldrb	r3, [r3, #2]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d005      	beq.n	800c9d0 <LmhpComplianceTxProcess+0x7c>
 800c9c4:	2b04      	cmp	r3, #4
 800c9c6:	d116      	bne.n	800c9f6 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800c9c8:	4b17      	ldr	r3, [pc, #92]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	709a      	strb	r2, [r3, #2]
            break;
 800c9ce:	e012      	b.n	800c9f6 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800c9d0:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c9d6:	4b14      	ldr	r3, [pc, #80]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9d8:	899b      	ldrh	r3, [r3, #12]
 800c9da:	0a1b      	lsrs	r3, r3, #8
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	4b12      	ldr	r3, [pc, #72]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9e0:	689b      	ldr	r3, [r3, #8]
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c9e6:	4b10      	ldr	r3, [pc, #64]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9e8:	899a      	ldrh	r2, [r3, #12]
 800c9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	b2d2      	uxtb	r2, r2
 800c9f2:	701a      	strb	r2, [r3, #0]
            break;
 800c9f4:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c9f6:	23e0      	movs	r3, #224	; 0xe0
 800c9f8:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c9fa:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800c9fc:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c9fe:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800ca00:	4b09      	ldr	r3, [pc, #36]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800ca02:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800ca04:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800ca06:	4809      	ldr	r0, [pc, #36]	; (800ca2c <LmhpComplianceTxProcess+0xd8>)
 800ca08:	f00d f960 	bl	8019ccc <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800ca0c:	4b08      	ldr	r3, [pc, #32]	; (800ca30 <LmhpComplianceTxProcess+0xdc>)
 800ca0e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <LmhpComplianceTxProcess+0xd4>)
 800ca12:	78db      	ldrb	r3, [r3, #3]
 800ca14:	4619      	mov	r1, r3
 800ca16:	4638      	mov	r0, r7
 800ca18:	2301      	movs	r3, #1
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	47a0      	blx	r4
 800ca1e:	4603      	mov	r3, r0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd90      	pop	{r4, r7, pc}
 800ca28:	2000043c 	.word	0x2000043c
 800ca2c:	20000424 	.word	0x20000424
 800ca30:	200000e0 	.word	0x200000e0

0800ca34 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b0a2      	sub	sp, #136	; 0x88
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ca3c:	4bae      	ldr	r3, [pc, #696]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	f083 0301 	eor.w	r3, r3, #1
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f040 81c0 	bne.w	800cdcc <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7b5b      	ldrb	r3, [r3, #13]
 800ca50:	f083 0301 	eor.w	r3, r3, #1
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	f040 81ba 	bne.w	800cdd0 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800ca5c:	4ba6      	ldr	r3, [pc, #664]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800ca5e:	785b      	ldrb	r3, [r3, #1]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00c      	beq.n	800ca7e <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	7b9b      	ldrb	r3, [r3, #14]
 800ca68:	f083 0301 	eor.w	r3, r3, #1
 800ca6c:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800ca72:	4ba1      	ldr	r3, [pc, #644]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800ca74:	899b      	ldrh	r3, [r3, #12]
 800ca76:	3301      	adds	r3, #1
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	4b9f      	ldr	r3, [pc, #636]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800ca7c:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	78db      	ldrb	r3, [r3, #3]
 800ca82:	2be0      	cmp	r3, #224	; 0xe0
 800ca84:	f040 81a6 	bne.w	800cdd4 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ca88:	4b9b      	ldr	r3, [pc, #620]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	f083 0301 	eor.w	r3, r3, #1
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d060      	beq.n	800cb58 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	7b1b      	ldrb	r3, [r3, #12]
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	f040 819f 	bne.w	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	f040 8199 	bne.w	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	3301      	adds	r3, #1
 800cab2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	f040 8192 	bne.w	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	3302      	adds	r3, #2
 800cac0:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	f040 818b 	bne.w	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	3303      	adds	r3, #3
 800cace:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	f040 8184 	bne.w	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800cad6:	4b88      	ldr	r3, [pc, #544]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cad8:	2200      	movs	r2, #0
 800cada:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800cadc:	4b86      	ldr	r3, [pc, #536]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cade:	22e0      	movs	r2, #224	; 0xe0
 800cae0:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800cae2:	4b85      	ldr	r3, [pc, #532]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cae4:	2202      	movs	r2, #2
 800cae6:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800cae8:	4b83      	ldr	r3, [pc, #524]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800caea:	2200      	movs	r2, #0
 800caec:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800caee:	4b82      	ldr	r3, [pc, #520]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800caf4:	4b80      	ldr	r3, [pc, #512]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800cafa:	4b7f      	ldr	r3, [pc, #508]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800cb00:	4b7d      	ldr	r3, [pc, #500]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800cb06:	4b7c      	ldr	r3, [pc, #496]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cb08:	2201      	movs	r2, #1
 800cb0a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800cb10:	2301      	movs	r3, #1
 800cb12:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cb14:	f107 0308 	add.w	r3, r7, #8
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f004 f829 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800cb1e:	2000      	movs	r0, #0
 800cb20:	f004 fd9a 	bl	8011658 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800cb24:	4b75      	ldr	r3, [pc, #468]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d003      	beq.n	800cb36 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800cb2e:	4b73      	ldr	r3, [pc, #460]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800cb36:	2300      	movs	r3, #0
 800cb38:	9300      	str	r3, [sp, #0]
 800cb3a:	4b71      	ldr	r3, [pc, #452]	; (800cd00 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f04f 31ff 	mov.w	r1, #4294967295
 800cb42:	4870      	ldr	r0, [pc, #448]	; (800cd04 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800cb44:	f00d f88c 	bl	8019c60 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800cb48:	f241 3188 	movw	r1, #5000	; 0x1388
 800cb4c:	486d      	ldr	r0, [pc, #436]	; (800cd04 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800cb4e:	f00d f99b 	bl	8019e88 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800cb52:	f7ff feff 	bl	800c954 <LmhpComplianceTxProcess>
 800cb56:	e142      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	781a      	ldrb	r2, [r3, #0]
 800cb5e:	4b66      	ldr	r3, [pc, #408]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cb60:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800cb62:	4b65      	ldr	r3, [pc, #404]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cb64:	789b      	ldrb	r3, [r3, #2]
 800cb66:	2b0a      	cmp	r3, #10
 800cb68:	f200 8136 	bhi.w	800cdd8 <LmhpComplianceOnMcpsIndication+0x3a4>
 800cb6c:	a201      	add	r2, pc, #4	; (adr r2, 800cb74 <LmhpComplianceOnMcpsIndication+0x140>)
 800cb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb72:	bf00      	nop
 800cb74:	0800cba1 	.word	0x0800cba1
 800cb78:	0800cbeb 	.word	0x0800cbeb
 800cb7c:	0800cbf3 	.word	0x0800cbf3
 800cb80:	0800cc01 	.word	0x0800cc01
 800cb84:	0800cc0f 	.word	0x0800cc0f
 800cb88:	0800cc67 	.word	0x0800cc67
 800cb8c:	0800cc79 	.word	0x0800cc79
 800cb90:	0800ccc9 	.word	0x0800ccc9
 800cb94:	0800cd85 	.word	0x0800cd85
 800cb98:	0800cd97 	.word	0x0800cd97
 800cb9c:	0800cdb1 	.word	0x0800cdb1
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800cba0:	4858      	ldr	r0, [pc, #352]	; (800cd04 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800cba2:	f00d f901 	bl	8019da8 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800cba6:	4b54      	ldr	r3, [pc, #336]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800cbac:	4b52      	ldr	r3, [pc, #328]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800cbb2:	2304      	movs	r3, #4
 800cbb4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800cbb6:	4b51      	ldr	r3, [pc, #324]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800cbbe:	f107 0308 	add.w	r3, r7, #8
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f003 ffd4 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cbc8:	4b4c      	ldr	r3, [pc, #304]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f004 fd42 	bl	8011658 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800cbd4:	4b49      	ldr	r3, [pc, #292]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 80fe 	beq.w	800cddc <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800cbe0:	4b46      	ldr	r3, [pc, #280]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	4798      	blx	r3
                }
            }
            break;
 800cbe8:	e0f8      	b.n	800cddc <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800cbea:	4b43      	ldr	r3, [pc, #268]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cbec:	2202      	movs	r2, #2
 800cbee:	719a      	strb	r2, [r3, #6]
            break;
 800cbf0:	e0f5      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800cbf2:	4b41      	ldr	r3, [pc, #260]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800cbf8:	4b3f      	ldr	r3, [pc, #252]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	709a      	strb	r2, [r3, #2]
            break;
 800cbfe:	e0ee      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800cc00:	4b3d      	ldr	r3, [pc, #244]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800cc06:	4b3c      	ldr	r3, [pc, #240]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc08:	2201      	movs	r2, #1
 800cc0a:	709a      	strb	r2, [r3, #2]
            break;
 800cc0c:	e0e7      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	7b1a      	ldrb	r2, [r3, #12]
 800cc12:	4b39      	ldr	r3, [pc, #228]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc14:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800cc16:	4b38      	ldr	r3, [pc, #224]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	2204      	movs	r2, #4
 800cc1c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cc1e:	2301      	movs	r3, #1
 800cc20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800cc24:	e012      	b.n	800cc4c <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	689a      	ldr	r2, [r3, #8]
 800cc2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cc2e:	4413      	add	r3, r2
 800cc30:	781a      	ldrb	r2, [r3, #0]
 800cc32:	4b31      	ldr	r3, [pc, #196]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc34:	6899      	ldr	r1, [r3, #8]
 800cc36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cc3a:	440b      	add	r3, r1
 800cc3c:	3201      	adds	r2, #1
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cc42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cc46:	3301      	adds	r3, #1
 800cc48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800cc4c:	4b2a      	ldr	r3, [pc, #168]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc4e:	795a      	ldrb	r2, [r3, #5]
 800cc50:	4b29      	ldr	r3, [pc, #164]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc52:	799b      	ldrb	r3, [r3, #6]
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bf28      	it	cs
 800cc58:	4613      	movcs	r3, r2
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d3e0      	bcc.n	800cc26 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800cc64:	e0bb      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800cc66:	2304      	movs	r3, #4
 800cc68:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800cc6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cc70:	4618      	mov	r0, r3
 800cc72:	f004 fabb 	bl	80111ec <LoRaMacMlmeRequest>
            }
            break;
 800cc76:	e0b2      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800cc78:	4822      	ldr	r0, [pc, #136]	; (800cd04 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800cc7a:	f00d f895 	bl	8019da8 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800cc7e:	4b1e      	ldr	r3, [pc, #120]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800cc84:	4b1c      	ldr	r3, [pc, #112]	; (800ccf8 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800cc86:	2200      	movs	r2, #0
 800cc88:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800cc8a:	2304      	movs	r3, #4
 800cc8c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800cc8e:	4b1b      	ldr	r3, [pc, #108]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800cc96:	f107 0308 	add.w	r3, r7, #8
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f003 ff68 	bl	8010b70 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cca0:	4b16      	ldr	r3, [pc, #88]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	785b      	ldrb	r3, [r3, #1]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f004 fcd6 	bl	8011658 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800ccac:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800ccb6:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <LmhpComplianceOnMcpsIndication+0x2c8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800ccbe:	4b12      	ldr	r3, [pc, #72]	; (800cd08 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc2:	2002      	movs	r0, #2
 800ccc4:	4798      	blx	r3
            }
            break;
 800ccc6:	e08a      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	7b1b      	ldrb	r3, [r3, #12]
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	d11d      	bne.n	800cd0c <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800ccd0:	2305      	movs	r3, #5
 800ccd2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	021b      	lsls	r3, r3, #8
 800cce0:	b21a      	sxth	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	3302      	adds	r3, #2
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	b21b      	sxth	r3, r3
 800ccec:	4313      	orrs	r3, r2
 800ccee:	b21b      	sxth	r3, r3
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800ccf6:	e03c      	b.n	800cd72 <LmhpComplianceOnMcpsIndication+0x33e>
 800ccf8:	2000043c 	.word	0x2000043c
 800ccfc:	20000450 	.word	0x20000450
 800cd00:	0800cdf5 	.word	0x0800cdf5
 800cd04:	20000424 	.word	0x20000424
 800cd08:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	7b1b      	ldrb	r3, [r3, #12]
 800cd10:	2b07      	cmp	r3, #7
 800cd12:	d12e      	bne.n	800cd72 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800cd14:	2306      	movs	r3, #6
 800cd16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	021b      	lsls	r3, r3, #8
 800cd24:	b21a      	sxth	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	3302      	adds	r3, #2
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	b21b      	sxth	r3, r3
 800cd30:	4313      	orrs	r3, r2
 800cd32:	b21b      	sxth	r3, r3
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	3303      	adds	r3, #3
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	041a      	lsls	r2, r3, #16
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	021b      	lsls	r3, r3, #8
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	6892      	ldr	r2, [r2, #8]
 800cd54:	3205      	adds	r2, #5
 800cd56:	7812      	ldrb	r2, [r2, #0]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	2364      	movs	r3, #100	; 0x64
 800cd5e:	fb03 f302 	mul.w	r3, r3, r2
 800cd62:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	3306      	adds	r3, #6
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	b25b      	sxtb	r3, r3
 800cd6e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800cd72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cd76:	4618      	mov	r0, r3
 800cd78:	f004 fa38 	bl	80111ec <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800cd7c:	4b19      	ldr	r3, [pc, #100]	; (800cde4 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800cd7e:	2201      	movs	r2, #1
 800cd80:	709a      	strb	r2, [r3, #2]
            }
            break;
 800cd82:	e02c      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800cd84:	230a      	movs	r3, #10
 800cd86:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800cd8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f004 fa2c 	bl	80111ec <LoRaMacMlmeRequest>
            }
            break;
 800cd94:	e023      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800cd96:	2300      	movs	r3, #0
 800cd98:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800cda4:	f107 0308 	add.w	r3, r7, #8
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f003 fee1 	bl	8010b70 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800cdae:	e016      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800cdb0:	230d      	movs	r3, #13
 800cdb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	785b      	ldrb	r3, [r3, #1]
 800cdbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800cdc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f004 fa11 	bl	80111ec <LoRaMacMlmeRequest>
            }
            break;
 800cdca:	e008      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800cdcc:	bf00      	nop
 800cdce:	e006      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800cdd0:	bf00      	nop
 800cdd2:	e004      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800cdd4:	bf00      	nop
 800cdd6:	e002      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800cddc:	bf00      	nop
        }
    }
}
 800cdde:	3780      	adds	r7, #128	; 0x80
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	2000043c 	.word	0x2000043c

0800cde8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800cde8:	b480      	push	{r7}
 800cdea:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800cdec:	bf00      	nop
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bc80      	pop	{r7}
 800cdf2:	4770      	bx	lr

0800cdf4 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800cdfc:	f7ff fdaa 	bl	800c954 <LmhpComplianceTxProcess>
}
 800ce00:	bf00      	nop
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800ce08:	b590      	push	{r4, r7, lr}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ce0e:	f00d f8e5 	bl	8019fdc <UTIL_TIMER_GetCurrentTime>
 800ce12:	4603      	mov	r3, r0
 800ce14:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <OnRadioTxDone+0x68>)
 800ce16:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ce18:	4c16      	ldr	r4, [pc, #88]	; (800ce74 <OnRadioTxDone+0x6c>)
 800ce1a:	463b      	mov	r3, r7
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f00c fa6f 	bl	8019300 <SysTimeGet>
 800ce22:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800ce26:	463a      	mov	r2, r7
 800ce28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce2c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800ce30:	4a11      	ldr	r2, [pc, #68]	; (800ce78 <OnRadioTxDone+0x70>)
 800ce32:	7813      	ldrb	r3, [r2, #0]
 800ce34:	f043 0310 	orr.w	r3, r3, #16
 800ce38:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <OnRadioTxDone+0x6c>)
 800ce3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00a      	beq.n	800ce5a <OnRadioTxDone+0x52>
 800ce44:	4b0b      	ldr	r3, [pc, #44]	; (800ce74 <OnRadioTxDone+0x6c>)
 800ce46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d004      	beq.n	800ce5a <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ce50:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <OnRadioTxDone+0x6c>)
 800ce52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ce5a:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <OnRadioTxDone+0x74>)
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	2100      	movs	r1, #0
 800ce60:	2002      	movs	r0, #2
 800ce62:	f00d f9ab 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd90      	pop	{r4, r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	200017b0 	.word	0x200017b0
 800ce74:	20000454 	.word	0x20000454
 800ce78:	20000ca8 	.word	0x20000ca8
 800ce7c:	0801ae94 	.word	0x0801ae94

0800ce80 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	4603      	mov	r3, r0
 800ce90:	817b      	strh	r3, [r7, #10]
 800ce92:	460b      	mov	r3, r1
 800ce94:	813b      	strh	r3, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ce9a:	f00d f89f 	bl	8019fdc <UTIL_TIMER_GetCurrentTime>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	4a16      	ldr	r2, [pc, #88]	; (800cefc <OnRadioRxDone+0x7c>)
 800cea2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800cea4:	4a15      	ldr	r2, [pc, #84]	; (800cefc <OnRadioRxDone+0x7c>)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800ceaa:	4a14      	ldr	r2, [pc, #80]	; (800cefc <OnRadioRxDone+0x7c>)
 800ceac:	897b      	ldrh	r3, [r7, #10]
 800ceae:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800ceb0:	4a12      	ldr	r2, [pc, #72]	; (800cefc <OnRadioRxDone+0x7c>)
 800ceb2:	893b      	ldrh	r3, [r7, #8]
 800ceb4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800ceb6:	4a11      	ldr	r2, [pc, #68]	; (800cefc <OnRadioRxDone+0x7c>)
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800cebc:	4a10      	ldr	r2, [pc, #64]	; (800cf00 <OnRadioRxDone+0x80>)
 800cebe:	7813      	ldrb	r3, [r2, #0]
 800cec0:	f043 0308 	orr.w	r3, r3, #8
 800cec4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cec6:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <OnRadioRxDone+0x84>)
 800cec8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00a      	beq.n	800cee6 <OnRadioRxDone+0x66>
 800ced0:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <OnRadioRxDone+0x84>)
 800ced2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d004      	beq.n	800cee6 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cedc:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <OnRadioRxDone+0x84>)
 800cede:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800cee6:	4b08      	ldr	r3, [pc, #32]	; (800cf08 <OnRadioRxDone+0x88>)
 800cee8:	2201      	movs	r2, #1
 800ceea:	2100      	movs	r1, #0
 800ceec:	2002      	movs	r0, #2
 800ceee:	f00d f965 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	200017b4 	.word	0x200017b4
 800cf00:	20000ca8 	.word	0x20000ca8
 800cf04:	20000454 	.word	0x20000454
 800cf08:	0801aea4 	.word	0x0801aea4

0800cf0c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800cf10:	4a0e      	ldr	r2, [pc, #56]	; (800cf4c <OnRadioTxTimeout+0x40>)
 800cf12:	7813      	ldrb	r3, [r2, #0]
 800cf14:	f043 0304 	orr.w	r3, r3, #4
 800cf18:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cf1a:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <OnRadioTxTimeout+0x44>)
 800cf1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00a      	beq.n	800cf3a <OnRadioTxTimeout+0x2e>
 800cf24:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <OnRadioTxTimeout+0x44>)
 800cf26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cf30:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <OnRadioTxTimeout+0x44>)
 800cf32:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800cf3a:	4b06      	ldr	r3, [pc, #24]	; (800cf54 <OnRadioTxTimeout+0x48>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	2100      	movs	r1, #0
 800cf40:	2002      	movs	r0, #2
 800cf42:	f00d f93b 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800cf46:	bf00      	nop
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20000ca8 	.word	0x20000ca8
 800cf50:	20000454 	.word	0x20000454
 800cf54:	0801aeb4 	.word	0x0801aeb4

0800cf58 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800cf5c:	4a0b      	ldr	r2, [pc, #44]	; (800cf8c <OnRadioRxError+0x34>)
 800cf5e:	7813      	ldrb	r3, [r2, #0]
 800cf60:	f043 0302 	orr.w	r3, r3, #2
 800cf64:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cf66:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <OnRadioRxError+0x38>)
 800cf68:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00a      	beq.n	800cf86 <OnRadioRxError+0x2e>
 800cf70:	4b07      	ldr	r3, [pc, #28]	; (800cf90 <OnRadioRxError+0x38>)
 800cf72:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cf7c:	4b04      	ldr	r3, [pc, #16]	; (800cf90 <OnRadioRxError+0x38>)
 800cf7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	4798      	blx	r3
    }
}
 800cf86:	bf00      	nop
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000ca8 	.word	0x20000ca8
 800cf90:	20000454 	.word	0x20000454

0800cf94 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800cf98:	4a0e      	ldr	r2, [pc, #56]	; (800cfd4 <OnRadioRxTimeout+0x40>)
 800cf9a:	7813      	ldrb	r3, [r2, #0]
 800cf9c:	f043 0301 	orr.w	r3, r3, #1
 800cfa0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <OnRadioRxTimeout+0x44>)
 800cfa4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00a      	beq.n	800cfc2 <OnRadioRxTimeout+0x2e>
 800cfac:	4b0a      	ldr	r3, [pc, #40]	; (800cfd8 <OnRadioRxTimeout+0x44>)
 800cfae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d004      	beq.n	800cfc2 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <OnRadioRxTimeout+0x44>)
 800cfba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <OnRadioRxTimeout+0x48>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	2002      	movs	r0, #2
 800cfca:	f00d f8f7 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 800cfce:	bf00      	nop
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20000ca8 	.word	0x20000ca8
 800cfd8:	20000454 	.word	0x20000454
 800cfdc:	0801aec4 	.word	0x0801aec4

0800cfe0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800cfe4:	4b08      	ldr	r3, [pc, #32]	; (800d008 <UpdateRxSlotIdleState+0x28>)
 800cfe6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d004      	beq.n	800cff8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800cfee:	4b07      	ldr	r3, [pc, #28]	; (800d00c <UpdateRxSlotIdleState+0x2c>)
 800cff0:	2206      	movs	r2, #6
 800cff2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800cff6:	e003      	b.n	800d000 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cff8:	4b04      	ldr	r3, [pc, #16]	; (800d00c <UpdateRxSlotIdleState+0x2c>)
 800cffa:	2202      	movs	r2, #2
 800cffc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d000:	bf00      	nop
 800d002:	46bd      	mov	sp, r7
 800d004:	bc80      	pop	{r7}
 800d006:	4770      	bx	lr
 800d008:	2000095c 	.word	0x2000095c
 800d00c:	20000454 	.word	0x20000454

0800d010 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b08e      	sub	sp, #56	; 0x38
 800d014:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d016:	4b44      	ldr	r3, [pc, #272]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d018:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d002      	beq.n	800d026 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d020:	4b42      	ldr	r3, [pc, #264]	; (800d12c <ProcessRadioTxDone+0x11c>)
 800d022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d024:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d026:	4b42      	ldr	r3, [pc, #264]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d028:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d02c:	4619      	mov	r1, r3
 800d02e:	4841      	ldr	r0, [pc, #260]	; (800d134 <ProcessRadioTxDone+0x124>)
 800d030:	f00c ff2a 	bl	8019e88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d034:	483f      	ldr	r0, [pc, #252]	; (800d134 <ProcessRadioTxDone+0x124>)
 800d036:	f00c fe49 	bl	8019ccc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d03a:	4b3d      	ldr	r3, [pc, #244]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d03c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d040:	4619      	mov	r1, r3
 800d042:	483d      	ldr	r0, [pc, #244]	; (800d138 <ProcessRadioTxDone+0x128>)
 800d044:	f00c ff20 	bl	8019e88 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d048:	483b      	ldr	r0, [pc, #236]	; (800d138 <ProcessRadioTxDone+0x128>)
 800d04a:	f00c fe3f 	bl	8019ccc <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d04e:	4b36      	ldr	r3, [pc, #216]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d050:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d054:	2b02      	cmp	r3, #2
 800d056:	d004      	beq.n	800d062 <ProcessRadioTxDone+0x52>
 800d058:	4b35      	ldr	r3, [pc, #212]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d05a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d019      	beq.n	800d096 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d062:	2316      	movs	r3, #22
 800d064:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d068:	4b2f      	ldr	r3, [pc, #188]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d06a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d06e:	f107 0220 	add.w	r2, r7, #32
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f006 fb55 	bl	8013724 <RegionGetPhyParam>
 800d07a:	4603      	mov	r3, r0
 800d07c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d07e:	4b2c      	ldr	r3, [pc, #176]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d080:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	4413      	add	r3, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	482c      	ldr	r0, [pc, #176]	; (800d13c <ProcessRadioTxDone+0x12c>)
 800d08c:	f00c fefc 	bl	8019e88 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d090:	482a      	ldr	r0, [pc, #168]	; (800d13c <ProcessRadioTxDone+0x12c>)
 800d092:	f00c fe1b 	bl	8019ccc <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d096:	4b2a      	ldr	r3, [pc, #168]	; (800d140 <ProcessRadioTxDone+0x130>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a23      	ldr	r2, [pc, #140]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d09e:	4b24      	ldr	r3, [pc, #144]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d0a0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d0a4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d0a6:	4b26      	ldr	r3, [pc, #152]	; (800d140 <ProcessRadioTxDone+0x130>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d0ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f00c f95d 	bl	8019370 <SysTimeGetMcuTime>
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d0ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d0be:	9200      	str	r2, [sp, #0]
 800d0c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d0c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d0c8:	ca06      	ldmia	r2, {r1, r2}
 800d0ca:	f00c f8b2 	bl	8019232 <SysTimeSub>
 800d0ce:	f107 0314 	add.w	r3, r7, #20
 800d0d2:	463a      	mov	r2, r7
 800d0d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0d8:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d0dc:	4b14      	ldr	r3, [pc, #80]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d0de:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d0e2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d0e8:	4b0f      	ldr	r3, [pc, #60]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d0ea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d0f6:	4b0c      	ldr	r3, [pc, #48]	; (800d128 <ProcessRadioTxDone+0x118>)
 800d0f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d0fc:	f107 0208 	add.w	r2, r7, #8
 800d100:	4611      	mov	r1, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f006 fb27 	bl	8013756 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d108:	4b09      	ldr	r3, [pc, #36]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d10a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d10e:	f083 0301 	eor.w	r3, r3, #1
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d118:	4b05      	ldr	r3, [pc, #20]	; (800d130 <ProcessRadioTxDone+0x120>)
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d120:	bf00      	nop
 800d122:	3730      	adds	r7, #48	; 0x30
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	2000095c 	.word	0x2000095c
 800d12c:	0801b528 	.word	0x0801b528
 800d130:	20000454 	.word	0x20000454
 800d134:	200007d4 	.word	0x200007d4
 800d138:	200007ec 	.word	0x200007ec
 800d13c:	2000084c 	.word	0x2000084c
 800d140:	200017b0 	.word	0x200017b0

0800d144 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d148:	4b10      	ldr	r3, [pc, #64]	; (800d18c <PrepareRxDoneAbort+0x48>)
 800d14a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d152:	4a0e      	ldr	r2, [pc, #56]	; (800d18c <PrepareRxDoneAbort+0x48>)
 800d154:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d158:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <PrepareRxDoneAbort+0x48>)
 800d15a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d162:	2000      	movs	r0, #0
 800d164:	f001 f8f8 	bl	800e358 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d168:	4a08      	ldr	r2, [pc, #32]	; (800d18c <PrepareRxDoneAbort+0x48>)
 800d16a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d16e:	f043 0302 	orr.w	r3, r3, #2
 800d172:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d176:	4a05      	ldr	r2, [pc, #20]	; (800d18c <PrepareRxDoneAbort+0x48>)
 800d178:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d17c:	f043 0320 	orr.w	r3, r3, #32
 800d180:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d184:	f7ff ff2c 	bl	800cfe0 <UpdateRxSlotIdleState>
}
 800d188:	bf00      	nop
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	20000454 	.word	0x20000454

0800d190 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d190:	b5b0      	push	{r4, r5, r7, lr}
 800d192:	b0a6      	sub	sp, #152	; 0x98
 800d194:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d196:	2313      	movs	r3, #19
 800d198:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d19c:	4bb9      	ldr	r3, [pc, #740]	; (800d484 <ProcessRadioRxDone+0x2f4>)
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d1a2:	4bb8      	ldr	r3, [pc, #736]	; (800d484 <ProcessRadioRxDone+0x2f4>)
 800d1a4:	891b      	ldrh	r3, [r3, #8]
 800d1a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d1aa:	4bb6      	ldr	r3, [pc, #728]	; (800d484 <ProcessRadioRxDone+0x2f4>)
 800d1ac:	895b      	ldrh	r3, [r3, #10]
 800d1ae:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d1b2:	4bb4      	ldr	r3, [pc, #720]	; (800d484 <ProcessRadioRxDone+0x2f4>)
 800d1b4:	7b1b      	ldrb	r3, [r3, #12]
 800d1b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d1c4:	4bb0      	ldr	r3, [pc, #704]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d1c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d1ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d1da:	4bac      	ldr	r3, [pc, #688]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d1e2:	4aaa      	ldr	r2, [pc, #680]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d1e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d1e8:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d1ec:	4aa7      	ldr	r2, [pc, #668]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d1ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d1f2:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d1f6:	4ba5      	ldr	r3, [pc, #660]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d1f8:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d1fc:	4ba3      	ldr	r3, [pc, #652]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d1fe:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d202:	4ba2      	ldr	r3, [pc, #648]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d204:	2200      	movs	r2, #0
 800d206:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d20a:	4ba0      	ldr	r3, [pc, #640]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d212:	4b9e      	ldr	r3, [pc, #632]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d214:	2200      	movs	r2, #0
 800d216:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d21a:	4b9c      	ldr	r3, [pc, #624]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d222:	4b9a      	ldr	r3, [pc, #616]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d224:	2200      	movs	r2, #0
 800d226:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d22a:	4b98      	ldr	r3, [pc, #608]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d232:	4b96      	ldr	r3, [pc, #600]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d234:	2200      	movs	r2, #0
 800d236:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d23a:	4b94      	ldr	r3, [pc, #592]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d242:	4b92      	ldr	r3, [pc, #584]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d244:	2200      	movs	r2, #0
 800d246:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d24a:	4b90      	ldr	r3, [pc, #576]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d252:	4b8e      	ldr	r3, [pc, #568]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d25a:	4b8d      	ldr	r3, [pc, #564]	; (800d490 <ProcessRadioRxDone+0x300>)
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d260:	488c      	ldr	r0, [pc, #560]	; (800d494 <ProcessRadioRxDone+0x304>)
 800d262:	f00c fda1 	bl	8019da8 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d266:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d26a:	4619      	mov	r1, r3
 800d26c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d26e:	f004 fb28 	bl	80118c2 <LoRaMacClassBRxBeacon>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00a      	beq.n	800d28e <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d278:	4a84      	ldr	r2, [pc, #528]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d27a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d27e:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d282:	4a82      	ldr	r2, [pc, #520]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d284:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d288:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d28c:	e3bf      	b.n	800da0e <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d28e:	4b7e      	ldr	r3, [pc, #504]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d290:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d294:	2b01      	cmp	r3, #1
 800d296:	d11e      	bne.n	800d2d6 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d298:	f004 fb26 	bl	80118e8 <LoRaMacClassBIsPingExpected>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	f004 fad7 	bl	8011856 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	f004 faf8 	bl	801189e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d2ae:	4b77      	ldr	r3, [pc, #476]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d2b0:	2204      	movs	r2, #4
 800d2b2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d2b6:	e00e      	b.n	800d2d6 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d2b8:	f004 fb1d 	bl	80118f6 <LoRaMacClassBIsMulticastExpected>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d009      	beq.n	800d2d6 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f004 fad1 	bl	801186a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f004 faf1 	bl	80118b0 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d2ce:	4b6f      	ldr	r3, [pc, #444]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d2d0:	2205      	movs	r2, #5
 800d2d2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d2d6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d2e4:	4413      	add	r3, r2
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d2ec:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d2f0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	2b06      	cmp	r3, #6
 800d2fa:	f200 8362 	bhi.w	800d9c2 <ProcessRadioRxDone+0x832>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <ProcessRadioRxDone+0x174>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d321 	.word	0x0800d321
 800d308:	0800d9c3 	.word	0x0800d9c3
 800d30c:	0800d4a1 	.word	0x0800d4a1
 800d310:	0800d9c3 	.word	0x0800d9c3
 800d314:	0800d499 	.word	0x0800d499
 800d318:	0800d9c3 	.word	0x0800d9c3
 800d31c:	0800d969 	.word	0x0800d969
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d320:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d324:	2b10      	cmp	r3, #16
 800d326:	d806      	bhi.n	800d336 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d328:	4b58      	ldr	r3, [pc, #352]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d32a:	2201      	movs	r2, #1
 800d32c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d330:	f7ff ff08 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d334:	e36b      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800d336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d338:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800d33a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d342:	4b51      	ldr	r3, [pc, #324]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d344:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d006      	beq.n	800d35a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d34c:	4b4f      	ldr	r3, [pc, #316]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d354:	f7ff fef6 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d358:	e359      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800d35a:	f7fe fbcf 	bl	800bafc <SecureElementGetJoinEui>
 800d35e:	4601      	mov	r1, r0
 800d360:	f107 0308 	add.w	r3, r7, #8
 800d364:	461a      	mov	r2, r3
 800d366:	20ff      	movs	r0, #255	; 0xff
 800d368:	f005 fc60 	bl	8012c2c <LoRaMacCryptoHandleJoinAccept>
 800d36c:	4603      	mov	r3, r0
 800d36e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800d372:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d376:	2b00      	cmp	r3, #0
 800d378:	d172      	bne.n	800d460 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d37a:	7c7b      	ldrb	r3, [r7, #17]
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b42      	ldr	r3, [pc, #264]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d380:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d384:	4b40      	ldr	r3, [pc, #256]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d386:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d38a:	7cbb      	ldrb	r3, [r7, #18]
 800d38c:	021b      	lsls	r3, r3, #8
 800d38e:	4313      	orrs	r3, r2
 800d390:	4a3d      	ldr	r2, [pc, #244]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d392:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d396:	4b3c      	ldr	r3, [pc, #240]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d398:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d39c:	7cfb      	ldrb	r3, [r7, #19]
 800d39e:	041b      	lsls	r3, r3, #16
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	4a39      	ldr	r2, [pc, #228]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3a4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	4a37      	ldr	r2, [pc, #220]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3ac:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d3b0:	7e3b      	ldrb	r3, [r7, #24]
 800d3b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	4b33      	ldr	r3, [pc, #204]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d3c0:	7e3b      	ldrb	r3, [r7, #24]
 800d3c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	4b2f      	ldr	r3, [pc, #188]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d3d0:	7e3b      	ldrb	r3, [r7, #24]
 800d3d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4b2b      	ldr	r3, [pc, #172]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d3e0:	7e7b      	ldrb	r3, [r7, #25]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	4b28      	ldr	r3, [pc, #160]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3e6:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d3e8:	4b27      	ldr	r3, [pc, #156]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d3f0:	4b25      	ldr	r3, [pc, #148]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d3f6:	4b24      	ldr	r3, [pc, #144]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d3fe:	fb02 f303 	mul.w	r3, r2, r3
 800d402:	4a21      	ldr	r2, [pc, #132]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d404:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d406:	4b20      	ldr	r3, [pc, #128]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800d40e:	4a1e      	ldr	r2, [pc, #120]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d410:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d412:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d414:	2200      	movs	r2, #0
 800d416:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d41a:	f107 0308 	add.w	r3, r7, #8
 800d41e:	3312      	adds	r3, #18
 800d420:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d422:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d426:	b2db      	uxtb	r3, r3
 800d428:	3b11      	subs	r3, #17
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d430:	4b15      	ldr	r3, [pc, #84]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d436:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d43a:	4611      	mov	r1, r2
 800d43c:	4618      	mov	r0, r3
 800d43e:	f006 f9c4 	bl	80137ca <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d442:	4b11      	ldr	r3, [pc, #68]	; (800d488 <ProcessRadioRxDone+0x2f8>)
 800d444:	2202      	movs	r2, #2
 800d446:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d44a:	2001      	movs	r0, #1
 800d44c:	f004 ff18 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00e      	beq.n	800d474 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800d456:	2101      	movs	r1, #1
 800d458:	2000      	movs	r0, #0
 800d45a:	f004 fe85 	bl	8012168 <LoRaMacConfirmQueueSetStatus>
 800d45e:	e009      	b.n	800d474 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d460:	2001      	movs	r0, #1
 800d462:	f004 ff0d 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d003      	beq.n	800d474 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d46c:	2101      	movs	r1, #1
 800d46e:	2007      	movs	r0, #7
 800d470:	f004 fe7a 	bl	8012168 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800d474:	4a05      	ldr	r2, [pc, #20]	; (800d48c <ProcessRadioRxDone+0x2fc>)
 800d476:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d47a:	f043 0308 	orr.w	r3, r3, #8
 800d47e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800d482:	e2a5      	b.n	800d9d0 <ProcessRadioRxDone+0x840>
 800d484:	200017b4 	.word	0x200017b4
 800d488:	2000095c 	.word	0x2000095c
 800d48c:	20000454 	.word	0x20000454
 800d490:	0801b528 	.word	0x0801b528
 800d494:	200007ec 	.word	0x200007ec
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d498:	4bae      	ldr	r3, [pc, #696]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d4a0:	4bad      	ldr	r3, [pc, #692]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d4a2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800d4a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d4aa:	4baa      	ldr	r3, [pc, #680]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d4ac:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d4b6:	230d      	movs	r3, #13
 800d4b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d4bc:	4ba6      	ldr	r3, [pc, #664]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d4be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d4c6:	230e      	movs	r3, #14
 800d4c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d4cc:	4ba2      	ldr	r3, [pc, #648]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d4ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f006 f923 	bl	8013724 <RegionGetPhyParam>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d4e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d4e6:	3b0d      	subs	r3, #13
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	b21b      	sxth	r3, r3
 800d4ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d4f0:	b21a      	sxth	r2, r3
 800d4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4f4:	b21b      	sxth	r3, r3
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	dc03      	bgt.n	800d502 <ProcessRadioRxDone+0x372>
 800d4fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d4fe:	2b0b      	cmp	r3, #11
 800d500:	d806      	bhi.n	800d510 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d502:	4b94      	ldr	r3, [pc, #592]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d504:	2201      	movs	r2, #1
 800d506:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d50a:	f7ff fe1b 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d50e:	e27e      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800d510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d512:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800d514:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d51e:	4b8f      	ldr	r3, [pc, #572]	; (800d75c <ProcessRadioRxDone+0x5cc>)
 800d520:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d522:	23ff      	movs	r3, #255	; 0xff
 800d524:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d52c:	4618      	mov	r0, r3
 800d52e:	f005 fe7c 	bl	801322a <LoRaMacParserData>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d006      	beq.n	800d546 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d538:	4b86      	ldr	r3, [pc, #536]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d540:	f7ff fe00 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d544:	e263      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	4a82      	ldr	r2, [pc, #520]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d54a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d54e:	1cba      	adds	r2, r7, #2
 800d550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d554:	4611      	mov	r1, r2
 800d556:	4618      	mov	r0, r3
 800d558:	f002 fcde 	bl	800ff18 <DetermineFrameType>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d006      	beq.n	800d570 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d562:	4b7c      	ldr	r3, [pc, #496]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d564:	2201      	movs	r2, #1
 800d566:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d56a:	f7ff fdeb 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d56e:	e24e      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d57a:	2300      	movs	r3, #0
 800d57c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d580:	e049      	b.n	800d616 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d582:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d586:	4a74      	ldr	r2, [pc, #464]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d588:	212c      	movs	r1, #44	; 0x2c
 800d58a:	fb01 f303 	mul.w	r3, r1, r3
 800d58e:	4413      	add	r3, r2
 800d590:	33d4      	adds	r3, #212	; 0xd4
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	429a      	cmp	r2, r3
 800d598:	d138      	bne.n	800d60c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d59a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d59e:	4a6e      	ldr	r2, [pc, #440]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d5a0:	212c      	movs	r1, #44	; 0x2c
 800d5a2:	fb01 f303 	mul.w	r3, r1, r3
 800d5a6:	4413      	add	r3, r2
 800d5a8:	33d2      	adds	r3, #210	; 0xd2
 800d5aa:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d02d      	beq.n	800d60c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d5b6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d5ba:	4a67      	ldr	r2, [pc, #412]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d5bc:	212c      	movs	r1, #44	; 0x2c
 800d5be:	fb01 f303 	mul.w	r3, r1, r3
 800d5c2:	4413      	add	r3, r2
 800d5c4:	33d3      	adds	r3, #211	; 0xd3
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d5cc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d5d0:	4a61      	ldr	r2, [pc, #388]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d5d2:	212c      	movs	r1, #44	; 0x2c
 800d5d4:	fb01 f303 	mul.w	r3, r1, r3
 800d5d8:	4413      	add	r3, r2
 800d5da:	33f0      	adds	r3, #240	; 0xf0
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d5e2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d5e6:	4a5c      	ldr	r2, [pc, #368]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d5e8:	212c      	movs	r1, #44	; 0x2c
 800d5ea:	fb01 f303 	mul.w	r3, r1, r3
 800d5ee:	4413      	add	r3, r2
 800d5f0:	33d4      	adds	r3, #212	; 0xd4
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d5f8:	4b57      	ldr	r3, [pc, #348]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d5fa:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d10e      	bne.n	800d620 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d602:	4b54      	ldr	r3, [pc, #336]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d604:	2203      	movs	r2, #3
 800d606:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800d60a:	e009      	b.n	800d620 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d60c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d610:	3301      	adds	r3, #1
 800d612:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800d616:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d0b1      	beq.n	800d582 <ProcessRadioRxDone+0x3f2>
 800d61e:	e000      	b.n	800d622 <ProcessRadioRxDone+0x492>
                    break;
 800d620:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d622:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d626:	2b01      	cmp	r3, #1
 800d628:	d117      	bne.n	800d65a <ProcessRadioRxDone+0x4ca>
 800d62a:	78bb      	ldrb	r3, [r7, #2]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d10d      	bne.n	800d64c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d630:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d106      	bne.n	800d64c <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800d63e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d646:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d006      	beq.n	800d65a <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d64c:	4b41      	ldr	r3, [pc, #260]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d654:	f7ff fd76 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d658:	e1d9      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d65a:	2315      	movs	r3, #21
 800d65c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d660:	4b3d      	ldr	r3, [pc, #244]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d666:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f006 f859 	bl	8013724 <RegionGetPhyParam>
 800d672:	4603      	mov	r3, r0
 800d674:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d676:	78b9      	ldrb	r1, [r7, #2]
 800d678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	4d36      	ldr	r5, [pc, #216]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d67e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d682:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800d686:	1d3a      	adds	r2, r7, #4
 800d688:	9202      	str	r2, [sp, #8]
 800d68a:	1cfa      	adds	r2, r7, #3
 800d68c:	9201      	str	r2, [sp, #4]
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800d694:	4622      	mov	r2, r4
 800d696:	f000 fe95 	bl	800e3c4 <GetFCntDown>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d6a0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d031      	beq.n	800d70c <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d6a8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d6ac:	2b07      	cmp	r3, #7
 800d6ae:	d119      	bne.n	800d6e4 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d6b0:	4b28      	ldr	r3, [pc, #160]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d6b2:	2208      	movs	r2, #8
 800d6b4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800d6b8:	4b27      	ldr	r3, [pc, #156]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d6ba:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d11d      	bne.n	800d6fe <ProcessRadioRxDone+0x56e>
 800d6c2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d6c6:	f023 031f 	bic.w	r3, r3, #31
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	2ba0      	cmp	r3, #160	; 0xa0
 800d6ce:	d116      	bne.n	800d6fe <ProcessRadioRxDone+0x56e>
 800d6d0:	4b21      	ldr	r3, [pc, #132]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d6d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d111      	bne.n	800d6fe <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800d6da:	4b1f      	ldr	r3, [pc, #124]	; (800d758 <ProcessRadioRxDone+0x5c8>)
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800d6e2:	e00c      	b.n	800d6fe <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800d6e4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d104      	bne.n	800d6f6 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800d6ec:	4b19      	ldr	r3, [pc, #100]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d6ee:	220a      	movs	r2, #10
 800d6f0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d6f4:	e003      	b.n	800d6fe <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d6f6:	4b17      	ldr	r3, [pc, #92]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4a14      	ldr	r2, [pc, #80]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d702:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800d706:	f7ff fd1d 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d70a:	e180      	b.n	800da0e <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d70c:	78fa      	ldrb	r2, [r7, #3]
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800d714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	460b      	mov	r3, r1
 800d71c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d720:	f005 fbd0 	bl	8012ec4 <LoRaMacCryptoUnsecureMessage>
 800d724:	4603      	mov	r3, r0
 800d726:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d72a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d016      	beq.n	800d760 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d732:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d736:	2b02      	cmp	r3, #2
 800d738:	d104      	bne.n	800d744 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d73a:	4b06      	ldr	r3, [pc, #24]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d73c:	220b      	movs	r2, #11
 800d73e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800d742:	e003      	b.n	800d74c <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d744:	4b03      	ldr	r3, [pc, #12]	; (800d754 <ProcessRadioRxDone+0x5c4>)
 800d746:	220c      	movs	r2, #12
 800d748:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800d74c:	f7ff fcfa 	bl	800d144 <PrepareRxDoneAbort>
                return;
 800d750:	e15d      	b.n	800da0e <ProcessRadioRxDone+0x87e>
 800d752:	bf00      	nop
 800d754:	20000454 	.word	0x20000454
 800d758:	2000095c 	.word	0x2000095c
 800d75c:	2000068c 	.word	0x2000068c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d760:	4bac      	ldr	r3, [pc, #688]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d762:	2200      	movs	r2, #0
 800d764:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800d768:	4aaa      	ldr	r2, [pc, #680]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d76a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d76e:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800d772:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d776:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	461a      	mov	r2, r3
 800d77e:	4ba5      	ldr	r3, [pc, #660]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d780:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800d784:	4ba3      	ldr	r3, [pc, #652]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d786:	2200      	movs	r2, #0
 800d788:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800d78c:	4ba1      	ldr	r3, [pc, #644]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a9f      	ldr	r2, [pc, #636]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d798:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d79c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d7a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	bf14      	ite	ne
 800d7aa:	2301      	movne	r3, #1
 800d7ac:	2300      	moveq	r3, #0
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	4b98      	ldr	r3, [pc, #608]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d7b2:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d7b6:	4b97      	ldr	r3, [pc, #604]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d7be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d7c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	bf14      	ite	ne
 800d7cc:	2301      	movne	r3, #1
 800d7ce:	2300      	moveq	r3, #0
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	4b90      	ldr	r3, [pc, #576]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d7d4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d7d8:	4b8e      	ldr	r3, [pc, #568]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d7da:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d004      	beq.n	800d7ec <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d7e2:	4b8c      	ldr	r3, [pc, #560]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d7e4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d102      	bne.n	800d7f2 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d7ec:	4b8a      	ldr	r3, [pc, #552]	; (800da18 <ProcessRadioRxDone+0x888>)
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d7f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d104      	bne.n	800d804 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d7fa:	4b86      	ldr	r3, [pc, #536]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d802:	e01f      	b.n	800d844 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d804:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d808:	f023 031f 	bic.w	r3, r3, #31
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2ba0      	cmp	r3, #160	; 0xa0
 800d810:	d110      	bne.n	800d834 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d812:	4b81      	ldr	r3, [pc, #516]	; (800da18 <ProcessRadioRxDone+0x888>)
 800d814:	2201      	movs	r2, #1
 800d816:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d81a:	4b7f      	ldr	r3, [pc, #508]	; (800da18 <ProcessRadioRxDone+0x888>)
 800d81c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800d820:	2b00      	cmp	r3, #0
 800d822:	d102      	bne.n	800d82a <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d826:	4a7c      	ldr	r2, [pc, #496]	; (800da18 <ProcessRadioRxDone+0x888>)
 800d828:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d82a:	4b7a      	ldr	r3, [pc, #488]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d82c:	2201      	movs	r2, #1
 800d82e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d832:	e007      	b.n	800d844 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d834:	4b78      	ldr	r3, [pc, #480]	; (800da18 <ProcessRadioRxDone+0x888>)
 800d836:	2200      	movs	r2, #0
 800d838:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d83c:	4b75      	ldr	r3, [pc, #468]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d844:	4b73      	ldr	r3, [pc, #460]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d846:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d84a:	4a72      	ldr	r2, [pc, #456]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d84c:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800d850:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800d854:	4618      	mov	r0, r3
 800d856:	f001 ff0d 	bl	800f674 <RemoveMacCommands>

            switch( fType )
 800d85a:	78bb      	ldrb	r3, [r7, #2]
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d874      	bhi.n	800d94a <ProcessRadioRxDone+0x7ba>
 800d860:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <ProcessRadioRxDone+0x6d8>)
 800d862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d866:	bf00      	nop
 800d868:	0800d879 	.word	0x0800d879
 800d86c:	0800d8c9 	.word	0x0800d8c9
 800d870:	0800d8ff 	.word	0x0800d8ff
 800d874:	0800d925 	.word	0x0800d925
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d878:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d87c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d880:	b2db      	uxtb	r3, r3
 800d882:	461c      	mov	r4, r3
 800d884:	4b63      	ldr	r3, [pc, #396]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d886:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d88a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d88e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d892:	f102 0010 	add.w	r0, r2, #16
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	460b      	mov	r3, r1
 800d89a:	4622      	mov	r2, r4
 800d89c:	2100      	movs	r1, #0
 800d89e:	f000 ff03 	bl	800e6a8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d8a2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d8a6:	4b5b      	ldr	r3, [pc, #364]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d8a8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d8ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8ae:	4a59      	ldr	r2, [pc, #356]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d8b0:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d8b4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d8b8:	4b56      	ldr	r3, [pc, #344]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d8ba:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d8be:	4b55      	ldr	r3, [pc, #340]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d8c6:	e047      	b.n	800d958 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d8c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d8cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	461c      	mov	r4, r3
 800d8d4:	4b4f      	ldr	r3, [pc, #316]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d8d6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d8da:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d8de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d8e2:	f102 0010 	add.w	r0, r2, #16
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	f000 fedb 	bl	800e6a8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d8f2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d8f6:	4b47      	ldr	r3, [pc, #284]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d8f8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d8fc:	e02c      	b.n	800d958 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d8fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d900:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d904:	4b43      	ldr	r3, [pc, #268]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d906:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d90a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	460b      	mov	r3, r1
 800d912:	2100      	movs	r1, #0
 800d914:	f000 fec8 	bl	800e6a8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d918:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d91c:	4b3d      	ldr	r3, [pc, #244]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d91e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d922:	e019      	b.n	800d958 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d924:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d928:	4b3a      	ldr	r3, [pc, #232]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d92a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d930:	4a38      	ldr	r2, [pc, #224]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d932:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d936:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d93a:	4b36      	ldr	r3, [pc, #216]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d93c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d940:	4b34      	ldr	r3, [pc, #208]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d942:	2201      	movs	r2, #1
 800d944:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d948:	e006      	b.n	800d958 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d94a:	4b32      	ldr	r3, [pc, #200]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d94c:	2201      	movs	r2, #1
 800d94e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800d952:	f7ff fbf7 	bl	800d144 <PrepareRxDoneAbort>
                    break;
 800d956:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d958:	4a2e      	ldr	r2, [pc, #184]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d95a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d95e:	f043 0302 	orr.w	r3, r3, #2
 800d962:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800d966:	e033      	b.n	800d9d0 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d968:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d96c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d96e:	18d1      	adds	r1, r2, r3
 800d970:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d974:	b29b      	uxth	r3, r3
 800d976:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	4826      	ldr	r0, [pc, #152]	; (800da1c <ProcessRadioRxDone+0x88c>)
 800d982:	f008 f9da 	bl	8015d3a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d986:	4b23      	ldr	r3, [pc, #140]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d988:	2203      	movs	r2, #3
 800d98a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d98e:	4b21      	ldr	r3, [pc, #132]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d990:	2200      	movs	r2, #0
 800d992:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d996:	4b1f      	ldr	r3, [pc, #124]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d998:	4a20      	ldr	r2, [pc, #128]	; (800da1c <ProcessRadioRxDone+0x88c>)
 800d99a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d99e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	4b19      	ldr	r3, [pc, #100]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d9ae:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d9b2:	4a18      	ldr	r2, [pc, #96]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d9b4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d9b8:	f043 0302 	orr.w	r3, r3, #2
 800d9bc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800d9c0:	e006      	b.n	800d9d0 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d9c2:	4b14      	ldr	r3, [pc, #80]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800d9ca:	f7ff fbbb 	bl	800d144 <PrepareRxDoneAbort>
            break;
 800d9ce:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d9d0:	4b10      	ldr	r3, [pc, #64]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d9d2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d008      	beq.n	800d9ec <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d9da:	4b0e      	ldr	r3, [pc, #56]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d9dc:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f000 fcb7 	bl	800e358 <OnAckTimeoutTimerEvent>
 800d9ea:	e007      	b.n	800d9fc <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d9ec:	4b0a      	ldr	r3, [pc, #40]	; (800da18 <ProcessRadioRxDone+0x888>)
 800d9ee:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d102      	bne.n	800d9fc <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	f000 fcae 	bl	800e358 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d9fc:	4a05      	ldr	r2, [pc, #20]	; (800da14 <ProcessRadioRxDone+0x884>)
 800d9fe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800da02:	f043 0320 	orr.w	r3, r3, #32
 800da06:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800da0a:	f7ff fae9 	bl	800cfe0 <UpdateRxSlotIdleState>
}
 800da0e:	3788      	adds	r7, #136	; 0x88
 800da10:	46bd      	mov	sp, r7
 800da12:	bdb0      	pop	{r4, r5, r7, pc}
 800da14:	20000454 	.word	0x20000454
 800da18:	2000095c 	.word	0x2000095c
 800da1c:	2000068c 	.word	0x2000068c

0800da20 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da24:	4b11      	ldr	r3, [pc, #68]	; (800da6c <ProcessRadioTxTimeout+0x4c>)
 800da26:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800da2a:	2b02      	cmp	r3, #2
 800da2c:	d002      	beq.n	800da34 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800da2e:	4b10      	ldr	r3, [pc, #64]	; (800da70 <ProcessRadioTxTimeout+0x50>)
 800da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da32:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800da34:	f7ff fad4 	bl	800cfe0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800da38:	4b0e      	ldr	r3, [pc, #56]	; (800da74 <ProcessRadioTxTimeout+0x54>)
 800da3a:	2202      	movs	r2, #2
 800da3c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800da40:	2002      	movs	r0, #2
 800da42:	f004 fbe9 	bl	8012218 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800da46:	4b0b      	ldr	r3, [pc, #44]	; (800da74 <ProcessRadioTxTimeout+0x54>)
 800da48:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800da50:	4b08      	ldr	r3, [pc, #32]	; (800da74 <ProcessRadioTxTimeout+0x54>)
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800da58:	4a06      	ldr	r2, [pc, #24]	; (800da74 <ProcessRadioTxTimeout+0x54>)
 800da5a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800da5e:	f043 0320 	orr.w	r3, r3, #32
 800da62:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800da66:	bf00      	nop
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	2000095c 	.word	0x2000095c
 800da70:	0801b528 	.word	0x0801b528
 800da74:	20000454 	.word	0x20000454

0800da78 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	460a      	mov	r2, r1
 800da82:	71fb      	strb	r3, [r7, #7]
 800da84:	4613      	mov	r3, r2
 800da86:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800da88:	2300      	movs	r3, #0
 800da8a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da8c:	4b40      	ldr	r3, [pc, #256]	; (800db90 <HandleRadioRxErrorTimeout+0x118>)
 800da8e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800da92:	2b02      	cmp	r3, #2
 800da94:	d002      	beq.n	800da9c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800da96:	4b3f      	ldr	r3, [pc, #252]	; (800db94 <HandleRadioRxErrorTimeout+0x11c>)
 800da98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800da9c:	f003 ff1d 	bl	80118da <LoRaMacClassBIsBeaconExpected>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d007      	beq.n	800dab6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800daa6:	2002      	movs	r0, #2
 800daa8:	f003 fecb 	bl	8011842 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800daac:	2000      	movs	r0, #0
 800daae:	f003 feed 	bl	801188c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800dab2:	2301      	movs	r3, #1
 800dab4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dab6:	4b36      	ldr	r3, [pc, #216]	; (800db90 <HandleRadioRxErrorTimeout+0x118>)
 800dab8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d119      	bne.n	800daf4 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dac0:	f003 ff12 	bl	80118e8 <LoRaMacClassBIsPingExpected>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d007      	beq.n	800dada <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800daca:	2000      	movs	r0, #0
 800dacc:	f003 fec3 	bl	8011856 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dad0:	2000      	movs	r0, #0
 800dad2:	f003 fee4 	bl	801189e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800dad6:	2301      	movs	r3, #1
 800dad8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dada:	f003 ff0c 	bl	80118f6 <LoRaMacClassBIsMulticastExpected>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d007      	beq.n	800daf4 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dae4:	2000      	movs	r0, #0
 800dae6:	f003 fec0 	bl	801186a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800daea:	2000      	movs	r0, #0
 800daec:	f003 fee0 	bl	80118b0 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800daf0:	2301      	movs	r3, #1
 800daf2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800daf4:	7bfb      	ldrb	r3, [r7, #15]
 800daf6:	f083 0301 	eor.w	r3, r3, #1
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d040      	beq.n	800db82 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800db00:	4b25      	ldr	r3, [pc, #148]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db02:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800db06:	2b00      	cmp	r3, #0
 800db08:	d122      	bne.n	800db50 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800db0a:	4b23      	ldr	r3, [pc, #140]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db0c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800db14:	4a20      	ldr	r2, [pc, #128]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db16:	79fb      	ldrb	r3, [r7, #7]
 800db18:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	4618      	mov	r0, r3
 800db20:	f004 fb7a 	bl	8012218 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800db24:	4b1a      	ldr	r3, [pc, #104]	; (800db90 <HandleRadioRxErrorTimeout+0x118>)
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	4618      	mov	r0, r3
 800db2a:	f00c fa69 	bl	801a000 <UTIL_TIMER_GetElapsedTime>
 800db2e:	4602      	mov	r2, r0
 800db30:	4b19      	ldr	r3, [pc, #100]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db32:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800db36:	429a      	cmp	r2, r3
 800db38:	d323      	bcc.n	800db82 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800db3a:	4818      	ldr	r0, [pc, #96]	; (800db9c <HandleRadioRxErrorTimeout+0x124>)
 800db3c:	f00c f934 	bl	8019da8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800db40:	4a15      	ldr	r2, [pc, #84]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db42:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db46:	f043 0320 	orr.w	r3, r3, #32
 800db4a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800db4e:	e018      	b.n	800db82 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800db50:	4b11      	ldr	r3, [pc, #68]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db52:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800db56:	2b00      	cmp	r3, #0
 800db58:	d003      	beq.n	800db62 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800db5a:	4a0f      	ldr	r2, [pc, #60]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db5c:	79bb      	ldrb	r3, [r7, #6]
 800db5e:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800db62:	79bb      	ldrb	r3, [r7, #6]
 800db64:	4618      	mov	r0, r3
 800db66:	f004 fb57 	bl	8012218 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800db6a:	4b09      	ldr	r3, [pc, #36]	; (800db90 <HandleRadioRxErrorTimeout+0x118>)
 800db6c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800db70:	2b02      	cmp	r3, #2
 800db72:	d006      	beq.n	800db82 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800db74:	4a08      	ldr	r2, [pc, #32]	; (800db98 <HandleRadioRxErrorTimeout+0x120>)
 800db76:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db7a:	f043 0320 	orr.w	r3, r3, #32
 800db7e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800db82:	f7ff fa2d 	bl	800cfe0 <UpdateRxSlotIdleState>
}
 800db86:	bf00      	nop
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	2000095c 	.word	0x2000095c
 800db94:	0801b528 	.word	0x0801b528
 800db98:	20000454 	.word	0x20000454
 800db9c:	200007ec 	.word	0x200007ec

0800dba0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800dba4:	2106      	movs	r1, #6
 800dba6:	2005      	movs	r0, #5
 800dba8:	f7ff ff66 	bl	800da78 <HandleRadioRxErrorTimeout>
}
 800dbac:	bf00      	nop
 800dbae:	bd80      	pop	{r7, pc}

0800dbb0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800dbb4:	2104      	movs	r1, #4
 800dbb6:	2003      	movs	r0, #3
 800dbb8:	f7ff ff5e 	bl	800da78 <HandleRadioRxErrorTimeout>
}
 800dbbc:	bf00      	nop
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbc6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbca:	607b      	str	r3, [r7, #4]
  return(result);
 800dbcc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800dbce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbd0:	b672      	cpsid	i
}
 800dbd2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800dbd4:	4b1d      	ldr	r3, [pc, #116]	; (800dc4c <LoRaMacHandleIrqEvents+0x8c>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800dbda:	4b1c      	ldr	r3, [pc, #112]	; (800dc4c <LoRaMacHandleIrqEvents+0x8c>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	f383 8810 	msr	PRIMASK, r3
}
 800dbea:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d027      	beq.n	800dc42 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800dbf2:	783b      	ldrb	r3, [r7, #0]
 800dbf4:	f003 0310 	and.w	r3, r3, #16
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800dbfe:	f7ff fa07 	bl	800d010 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800dc02:	783b      	ldrb	r3, [r7, #0]
 800dc04:	f003 0308 	and.w	r3, r3, #8
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800dc0e:	f7ff fabf 	bl	800d190 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800dc12:	783b      	ldrb	r3, [r7, #0]
 800dc14:	f003 0304 	and.w	r3, r3, #4
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800dc1e:	f7ff feff 	bl	800da20 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800dc22:	783b      	ldrb	r3, [r7, #0]
 800dc24:	f003 0302 	and.w	r3, r3, #2
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800dc2e:	f7ff ffb7 	bl	800dba0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800dc32:	783b      	ldrb	r3, [r7, #0]
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800dc3e:	f7ff ffb7 	bl	800dbb0 <ProcessRadioRxTimeout>
        }
    }
}
 800dc42:	bf00      	nop
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	20000ca8 	.word	0x20000ca8

0800dc50 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800dc50:	b480      	push	{r7}
 800dc52:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dc54:	4b08      	ldr	r3, [pc, #32]	; (800dc78 <LoRaMacIsBusy+0x28>)
 800dc56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800dc5e:	4b06      	ldr	r3, [pc, #24]	; (800dc78 <LoRaMacIsBusy+0x28>)
 800dc60:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <LoRaMacIsBusy+0x1c>
    {
        return false;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	e000      	b.n	800dc6e <LoRaMacIsBusy+0x1e>
    }
    return true;
 800dc6c:	2301      	movs	r3, #1
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bc80      	pop	{r7}
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	20000454 	.word	0x20000454

0800dc7c <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800dc86:	4a04      	ldr	r2, [pc, #16]	; (800dc98 <LoRaMacEnableRequests+0x1c>)
 800dc88:	79fb      	ldrb	r3, [r7, #7]
 800dc8a:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800dc8e:	bf00      	nop
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bc80      	pop	{r7}
 800dc96:	4770      	bx	lr
 800dc98:	20000454 	.word	0x20000454

0800dc9c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800dca2:	4b2c      	ldr	r3, [pc, #176]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dca4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800dca8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800dcaa:	4b2a      	ldr	r3, [pc, #168]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dcac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d14a      	bne.n	800dd4a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dcb4:	4b27      	ldr	r3, [pc, #156]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dcb6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800dcba:	f003 0301 	and.w	r3, r3, #1
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d006      	beq.n	800dcd2 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800dcc4:	4a23      	ldr	r2, [pc, #140]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dcc6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dcca:	f36f 0300 	bfc	r3, #0, #1
 800dcce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dcd2:	4b20      	ldr	r3, [pc, #128]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dcd4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d006      	beq.n	800dcf0 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800dce2:	4a1c      	ldr	r2, [pc, #112]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dce4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dce8:	f36f 0382 	bfc	r3, #2, #1
 800dcec:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	f7ff ffc3 	bl	800dc7c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800dcf6:	793b      	ldrb	r3, [r7, #4]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d005      	beq.n	800dd0e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800dd02:	4b14      	ldr	r3, [pc, #80]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dd04:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4813      	ldr	r0, [pc, #76]	; (800dd58 <LoRaMacHandleRequestEvents+0xbc>)
 800dd0c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800dd0e:	793b      	ldrb	r3, [r7, #4]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00e      	beq.n	800dd38 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800dd1a:	4810      	ldr	r0, [pc, #64]	; (800dd5c <LoRaMacHandleRequestEvents+0xc0>)
 800dd1c:	f004 faca 	bl	80122b4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800dd20:	f004 fb14 	bl	801234c <LoRaMacConfirmQueueGetCnt>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d006      	beq.n	800dd38 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800dd2a:	4a0a      	ldr	r2, [pc, #40]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dd2c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dd30:	f043 0304 	orr.w	r3, r3, #4
 800dd34:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800dd38:	f003 fdfb 	bl	8011932 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800dd3c:	4a05      	ldr	r2, [pc, #20]	; (800dd54 <LoRaMacHandleRequestEvents+0xb8>)
 800dd3e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dd42:	f36f 1345 	bfc	r3, #5, #1
 800dd46:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800dd4a:	bf00      	nop
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	20000454 	.word	0x20000454
 800dd58:	2000088c 	.word	0x2000088c
 800dd5c:	200008a0 	.word	0x200008a0

0800dd60 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800dd66:	4b0a      	ldr	r3, [pc, #40]	; (800dd90 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800dd68:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10a      	bne.n	800dd86 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800dd70:	2300      	movs	r3, #0
 800dd72:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800dd74:	1dfb      	adds	r3, r7, #7
 800dd76:	4618      	mov	r0, r3
 800dd78:	f004 f882 	bl	8011e80 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800dd7c:	79fb      	ldrb	r3, [r7, #7]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800dd82:	f000 fc81 	bl	800e688 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800dd86:	bf00      	nop
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	20000454 	.word	0x20000454

0800dd94 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800dd9a:	4b25      	ldr	r3, [pc, #148]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800dd9c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800dda0:	f003 0308 	and.w	r3, r3, #8
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00d      	beq.n	800ddc6 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ddaa:	4a21      	ldr	r2, [pc, #132]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800ddac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ddb0:	f36f 03c3 	bfc	r3, #3, #1
 800ddb4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ddb8:	4b1d      	ldr	r3, [pc, #116]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800ddba:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	491c      	ldr	r1, [pc, #112]	; (800de34 <LoRaMacHandleIndicationEvents+0xa0>)
 800ddc2:	481d      	ldr	r0, [pc, #116]	; (800de38 <LoRaMacHandleIndicationEvents+0xa4>)
 800ddc4:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800ddc6:	4b1a      	ldr	r3, [pc, #104]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800ddc8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ddcc:	f003 0310 	and.w	r3, r3, #16
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d012      	beq.n	800ddfc <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800ddd6:	2307      	movs	r3, #7
 800ddd8:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800ddde:	4b14      	ldr	r3, [pc, #80]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800dde0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	1d3a      	adds	r2, r7, #4
 800dde8:	4912      	ldr	r1, [pc, #72]	; (800de34 <LoRaMacHandleIndicationEvents+0xa0>)
 800ddea:	4610      	mov	r0, r2
 800ddec:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800ddee:	4a10      	ldr	r2, [pc, #64]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800ddf0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ddf4:	f36f 1304 	bfc	r3, #4, #1
 800ddf8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ddfc:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800ddfe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800de02:	f003 0302 	and.w	r3, r3, #2
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00d      	beq.n	800de28 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800de0c:	4a08      	ldr	r2, [pc, #32]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800de0e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800de12:	f36f 0341 	bfc	r3, #1, #1
 800de16:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800de1a:	4b05      	ldr	r3, [pc, #20]	; (800de30 <LoRaMacHandleIndicationEvents+0x9c>)
 800de1c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	4904      	ldr	r1, [pc, #16]	; (800de34 <LoRaMacHandleIndicationEvents+0xa0>)
 800de24:	4805      	ldr	r0, [pc, #20]	; (800de3c <LoRaMacHandleIndicationEvents+0xa8>)
 800de26:	4798      	blx	r3
    }
}
 800de28:	bf00      	nop
 800de2a:	3720      	adds	r7, #32
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	20000454 	.word	0x20000454
 800de34:	200008d0 	.word	0x200008d0
 800de38:	200008b4 	.word	0x200008b4
 800de3c:	20000870 	.word	0x20000870

0800de40 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800de46:	4b32      	ldr	r3, [pc, #200]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800de48:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d058      	beq.n	800df08 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800de56:	2300      	movs	r3, #0
 800de58:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800de5a:	2300      	movs	r3, #0
 800de5c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800de5e:	4b2c      	ldr	r3, [pc, #176]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800de60:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800de64:	2b00      	cmp	r3, #0
 800de66:	d004      	beq.n	800de72 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800de68:	4b29      	ldr	r3, [pc, #164]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800de6a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800de6e:	2b03      	cmp	r3, #3
 800de70:	d104      	bne.n	800de7c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800de72:	f002 f89f 	bl	800ffb4 <CheckRetransUnconfirmedUplink>
 800de76:	4603      	mov	r3, r0
 800de78:	71fb      	strb	r3, [r7, #7]
 800de7a:	e020      	b.n	800debe <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800de7c:	4b24      	ldr	r3, [pc, #144]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800de7e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800de82:	2b01      	cmp	r3, #1
 800de84:	d11b      	bne.n	800debe <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800de86:	4b22      	ldr	r3, [pc, #136]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800de88:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d014      	beq.n	800deba <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800de90:	f002 f8bc 	bl	801000c <CheckRetransConfirmedUplink>
 800de94:	4603      	mov	r3, r0
 800de96:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800de98:	4b1e      	ldr	r3, [pc, #120]	; (800df14 <LoRaMacHandleMcpsRequest+0xd4>)
 800de9a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d10d      	bne.n	800debe <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	f083 0301 	eor.w	r3, r3, #1
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800deae:	f002 f929 	bl	8010104 <AckTimeoutRetriesProcess>
 800deb2:	e004      	b.n	800debe <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800deb4:	f002 f964 	bl	8010180 <AckTimeoutRetriesFinalize>
 800deb8:	e001      	b.n	800debe <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800deba:	2301      	movs	r3, #1
 800debc:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800debe:	79fb      	ldrb	r3, [r7, #7]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00d      	beq.n	800dee0 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800dec4:	4814      	ldr	r0, [pc, #80]	; (800df18 <LoRaMacHandleMcpsRequest+0xd8>)
 800dec6:	f00b ff6f 	bl	8019da8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800deca:	4b11      	ldr	r3, [pc, #68]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800decc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ded0:	f023 0320 	bic.w	r3, r3, #32
 800ded4:	4a0e      	ldr	r2, [pc, #56]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800ded6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800deda:	f002 f8b9 	bl	8010050 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800dede:	e013      	b.n	800df08 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800dee0:	79bb      	ldrb	r3, [r7, #6]
 800dee2:	f083 0301 	eor.w	r3, r3, #1
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00d      	beq.n	800df08 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800deec:	4a08      	ldr	r2, [pc, #32]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800deee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800def2:	f36f 1345 	bfc	r3, #5, #1
 800def6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800defa:	4b05      	ldr	r3, [pc, #20]	; (800df10 <LoRaMacHandleMcpsRequest+0xd0>)
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800df02:	2000      	movs	r0, #0
 800df04:	f000 f97e 	bl	800e204 <OnTxDelayedTimerEvent>
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	20000454 	.word	0x20000454
 800df14:	2000095c 	.word	0x2000095c
 800df18:	200007bc 	.word	0x200007bc

0800df1c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800df20:	4b1b      	ldr	r3, [pc, #108]	; (800df90 <LoRaMacHandleMlmeRequest+0x74>)
 800df22:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800df26:	f003 0304 	and.w	r3, r3, #4
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d02c      	beq.n	800df8a <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800df30:	2001      	movs	r0, #1
 800df32:	f004 f9a5 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d012      	beq.n	800df62 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800df3c:	2001      	movs	r0, #1
 800df3e:	f004 f941 	bl	80121c4 <LoRaMacConfirmQueueGetStatus>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d103      	bne.n	800df50 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800df48:	4b11      	ldr	r3, [pc, #68]	; (800df90 <LoRaMacHandleMlmeRequest+0x74>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df50:	4b0f      	ldr	r3, [pc, #60]	; (800df90 <LoRaMacHandleMlmeRequest+0x74>)
 800df52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800df56:	f023 0302 	bic.w	r3, r3, #2
 800df5a:	4a0d      	ldr	r2, [pc, #52]	; (800df90 <LoRaMacHandleMlmeRequest+0x74>)
 800df5c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800df60:	e013      	b.n	800df8a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800df62:	2005      	movs	r0, #5
 800df64:	f004 f98c 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d105      	bne.n	800df7a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800df6e:	2006      	movs	r0, #6
 800df70:	f004 f986 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800df74:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800df76:	2b00      	cmp	r3, #0
 800df78:	d007      	beq.n	800df8a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df7a:	4b05      	ldr	r3, [pc, #20]	; (800df90 <LoRaMacHandleMlmeRequest+0x74>)
 800df7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800df80:	f023 0302 	bic.w	r3, r3, #2
 800df84:	4a02      	ldr	r2, [pc, #8]	; (800df90 <LoRaMacHandleMlmeRequest+0x74>)
 800df86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800df8a:	bf00      	nop
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	20000454 	.word	0x20000454

0800df94 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800df98:	200c      	movs	r0, #12
 800df9a:	f004 f971 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d019      	beq.n	800dfd8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800dfa4:	4b0e      	ldr	r3, [pc, #56]	; (800dfe0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfa6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800dfaa:	f003 0301 	and.w	r3, r3, #1
 800dfae:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d111      	bne.n	800dfd8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dfb4:	4b0a      	ldr	r3, [pc, #40]	; (800dfe0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfb6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800dfba:	f003 0304 	and.w	r3, r3, #4
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d009      	beq.n	800dfd8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dfc4:	4b06      	ldr	r3, [pc, #24]	; (800dfe0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dfca:	f023 0302 	bic.w	r3, r3, #2
 800dfce:	4a04      	ldr	r2, [pc, #16]	; (800dfe0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dfd0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	20000454 	.word	0x20000454

0800dfe4 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800dfe8:	4b0d      	ldr	r3, [pc, #52]	; (800e020 <LoRaMacCheckForRxAbort+0x3c>)
 800dfea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dfee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00f      	beq.n	800e016 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800dff6:	4b0a      	ldr	r3, [pc, #40]	; (800e020 <LoRaMacCheckForRxAbort+0x3c>)
 800dff8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e000:	4a07      	ldr	r2, [pc, #28]	; (800e020 <LoRaMacCheckForRxAbort+0x3c>)
 800e002:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e006:	4b06      	ldr	r3, [pc, #24]	; (800e020 <LoRaMacCheckForRxAbort+0x3c>)
 800e008:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e00c:	f023 0302 	bic.w	r3, r3, #2
 800e010:	4a03      	ldr	r2, [pc, #12]	; (800e020 <LoRaMacCheckForRxAbort+0x3c>)
 800e012:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e016:	bf00      	nop
 800e018:	46bd      	mov	sp, r7
 800e01a:	bc80      	pop	{r7}
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	20000454 	.word	0x20000454

0800e024 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e02c:	2300      	movs	r3, #0
 800e02e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e030:	2300      	movs	r3, #0
 800e032:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e034:	4b50      	ldr	r3, [pc, #320]	; (800e178 <LoRaMacHandleNvm+0x154>)
 800e036:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f040 8097 	bne.w	800e16e <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2124      	movs	r1, #36	; 0x24
 800e044:	4618      	mov	r0, r3
 800e046:	f007 fecd 	bl	8015de4 <Crc32>
 800e04a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	429a      	cmp	r2, r3
 800e054:	d006      	beq.n	800e064 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e05c:	89fb      	ldrh	r3, [r7, #14]
 800e05e:	f043 0301 	orr.w	r3, r3, #1
 800e062:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3328      	adds	r3, #40	; 0x28
 800e068:	2114      	movs	r1, #20
 800e06a:	4618      	mov	r0, r3
 800e06c:	f007 feba 	bl	8015de4 <Crc32>
 800e070:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d006      	beq.n	800e08a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e082:	89fb      	ldrh	r3, [r7, #14]
 800e084:	f043 0302 	orr.w	r3, r3, #2
 800e088:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3340      	adds	r3, #64	; 0x40
 800e08e:	21d4      	movs	r1, #212	; 0xd4
 800e090:	4618      	mov	r0, r3
 800e092:	f007 fea7 	bl	8015de4 <Crc32>
 800e096:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d007      	beq.n	800e0b4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e0ac:	89fb      	ldrh	r3, [r7, #14]
 800e0ae:	f043 0304 	orr.w	r3, r3, #4
 800e0b2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e0ba:	21bc      	movs	r1, #188	; 0xbc
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f007 fe91 	bl	8015de4 <Crc32>
 800e0c2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d007      	beq.n	800e0e0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e0d8:	89fb      	ldrh	r3, [r7, #14]
 800e0da:	f043 0308 	orr.w	r3, r3, #8
 800e0de:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e0e6:	2190      	movs	r1, #144	; 0x90
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f007 fe7b 	bl	8015de4 <Crc32>
 800e0ee:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d007      	beq.n	800e10c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e104:	89fb      	ldrh	r3, [r7, #14]
 800e106:	f043 0310 	orr.w	r3, r3, #16
 800e10a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e112:	21c4      	movs	r1, #196	; 0xc4
 800e114:	4618      	mov	r0, r3
 800e116:	f007 fe65 	bl	8015de4 <Crc32>
 800e11a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	429a      	cmp	r2, r3
 800e126:	d007      	beq.n	800e138 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	68ba      	ldr	r2, [r7, #8]
 800e12c:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e130:	89fb      	ldrh	r3, [r7, #14]
 800e132:	f043 0320 	orr.w	r3, r3, #32
 800e136:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e13e:	2114      	movs	r1, #20
 800e140:	4618      	mov	r0, r3
 800e142:	f007 fe4f 	bl	8015de4 <Crc32>
 800e146:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	429a      	cmp	r2, r3
 800e152:	d007      	beq.n	800e164 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e162:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e164:	89fb      	ldrh	r3, [r7, #14]
 800e166:	4618      	mov	r0, r3
 800e168:	f001 ffae 	bl	80100c8 <CallNvmDataChangeCallback>
 800e16c:	e000      	b.n	800e170 <LoRaMacHandleNvm+0x14c>
        return;
 800e16e:	bf00      	nop
}
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20000454 	.word	0x20000454

0800e17c <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e182:	2300      	movs	r3, #0
 800e184:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e186:	f7ff fd1b 	bl	800dbc0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e18a:	f003 fc36 	bl	80119fa <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e18e:	4b1b      	ldr	r3, [pc, #108]	; (800e1fc <LoRaMacProcess+0x80>)
 800e190:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e194:	f003 0320 	and.w	r3, r3, #32
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d021      	beq.n	800e1e2 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e19e:	2000      	movs	r0, #0
 800e1a0:	f7ff fd6c 	bl	800dc7c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e1a4:	f7ff ff1e 	bl	800dfe4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e1a8:	f002 f81e 	bl	80101e8 <IsRequestPending>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d006      	beq.n	800e1c0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e1b2:	f7ff feef 	bl	800df94 <LoRaMacCheckForBeaconAcquisition>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d103      	bne.n	800e1ce <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e1c6:	f7ff fea9 	bl	800df1c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e1ca:	f7ff fe39 	bl	800de40 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e1ce:	f7ff fd65 	bl	800dc9c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e1d2:	f7ff fdc5 	bl	800dd60 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e1d6:	480a      	ldr	r0, [pc, #40]	; (800e200 <LoRaMacProcess+0x84>)
 800e1d8:	f7ff ff24 	bl	800e024 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e1dc:	2001      	movs	r0, #1
 800e1de:	f7ff fd4d 	bl	800dc7c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e1e2:	f7ff fdd7 	bl	800dd94 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e1e6:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <LoRaMacProcess+0x80>)
 800e1e8:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d101      	bne.n	800e1f4 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e1f0:	f001 fb7c 	bl	800f8ec <OpenContinuousRxCWindow>
    }
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	20000454 	.word	0x20000454
 800e200:	2000095c 	.word	0x2000095c

0800e204 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e20c:	4817      	ldr	r0, [pc, #92]	; (800e26c <OnTxDelayedTimerEvent+0x68>)
 800e20e:	f00b fdcb 	bl	8019da8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e212:	4b17      	ldr	r3, [pc, #92]	; (800e270 <OnTxDelayedTimerEvent+0x6c>)
 800e214:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e218:	f023 0320 	bic.w	r3, r3, #32
 800e21c:	4a14      	ldr	r2, [pc, #80]	; (800e270 <OnTxDelayedTimerEvent+0x6c>)
 800e21e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e222:	2001      	movs	r0, #1
 800e224:	f001 f8fc 	bl	800f420 <ScheduleTx>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d018      	beq.n	800e260 <OnTxDelayedTimerEvent+0x5c>
 800e22e:	2b0b      	cmp	r3, #11
 800e230:	d016      	beq.n	800e260 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e232:	4b10      	ldr	r3, [pc, #64]	; (800e274 <OnTxDelayedTimerEvent+0x70>)
 800e234:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	4b0d      	ldr	r3, [pc, #52]	; (800e270 <OnTxDelayedTimerEvent+0x6c>)
 800e23c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e240:	4b0b      	ldr	r3, [pc, #44]	; (800e270 <OnTxDelayedTimerEvent+0x6c>)
 800e242:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e246:	4b0a      	ldr	r3, [pc, #40]	; (800e270 <OnTxDelayedTimerEvent+0x6c>)
 800e248:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e24c:	4b08      	ldr	r3, [pc, #32]	; (800e270 <OnTxDelayedTimerEvent+0x6c>)
 800e24e:	2209      	movs	r2, #9
 800e250:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e254:	2009      	movs	r0, #9
 800e256:	f003 ffdf 	bl	8012218 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e25a:	f001 fef9 	bl	8010050 <StopRetransmission>
            break;
 800e25e:	e000      	b.n	800e262 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e260:	bf00      	nop
        }
    }
}
 800e262:	bf00      	nop
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	200007bc 	.word	0x200007bc
 800e270:	20000454 	.word	0x20000454
 800e274:	2000095c 	.word	0x2000095c

0800e278 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e280:	4b14      	ldr	r3, [pc, #80]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e282:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e286:	4b13      	ldr	r3, [pc, #76]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e288:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e28c:	4b12      	ldr	r3, [pc, #72]	; (800e2d8 <OnRxWindow1TimerEvent+0x60>)
 800e28e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e292:	b25a      	sxtb	r2, r3
 800e294:	4b0f      	ldr	r3, [pc, #60]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e296:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e29a:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <OnRxWindow1TimerEvent+0x60>)
 800e29c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e2a0:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e2a2:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e2a6:	4b0c      	ldr	r3, [pc, #48]	; (800e2d8 <OnRxWindow1TimerEvent+0x60>)
 800e2a8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e2ae:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e2b2:	4b08      	ldr	r3, [pc, #32]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e2ba:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <OnRxWindow1TimerEvent+0x5c>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e2c2:	4906      	ldr	r1, [pc, #24]	; (800e2dc <OnRxWindow1TimerEvent+0x64>)
 800e2c4:	4806      	ldr	r0, [pc, #24]	; (800e2e0 <OnRxWindow1TimerEvent+0x68>)
 800e2c6:	f001 fae3 	bl	800f890 <RxWindowSetup>
}
 800e2ca:	bf00      	nop
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	20000454 	.word	0x20000454
 800e2d8:	2000095c 	.word	0x2000095c
 800e2dc:	2000080c 	.word	0x2000080c
 800e2e0:	200007d4 	.word	0x200007d4

0800e2e4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e2ec:	4b16      	ldr	r3, [pc, #88]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e2ee:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d023      	beq.n	800e33e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e2f6:	4b14      	ldr	r3, [pc, #80]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e2f8:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e2fc:	4b12      	ldr	r3, [pc, #72]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e2fe:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e302:	4b12      	ldr	r3, [pc, #72]	; (800e34c <OnRxWindow2TimerEvent+0x68>)
 800e304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e306:	4a10      	ldr	r2, [pc, #64]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e308:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e30c:	4b0f      	ldr	r3, [pc, #60]	; (800e34c <OnRxWindow2TimerEvent+0x68>)
 800e30e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e312:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e314:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e318:	4b0c      	ldr	r3, [pc, #48]	; (800e34c <OnRxWindow2TimerEvent+0x68>)
 800e31a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e31e:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e320:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e324:	4b08      	ldr	r3, [pc, #32]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e326:	2200      	movs	r2, #0
 800e328:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e32c:	4b06      	ldr	r3, [pc, #24]	; (800e348 <OnRxWindow2TimerEvent+0x64>)
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e334:	4906      	ldr	r1, [pc, #24]	; (800e350 <OnRxWindow2TimerEvent+0x6c>)
 800e336:	4807      	ldr	r0, [pc, #28]	; (800e354 <OnRxWindow2TimerEvent+0x70>)
 800e338:	f001 faaa 	bl	800f890 <RxWindowSetup>
 800e33c:	e000      	b.n	800e340 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e33e:	bf00      	nop
}
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000454 	.word	0x20000454
 800e34c:	2000095c 	.word	0x2000095c
 800e350:	20000820 	.word	0x20000820
 800e354:	200007ec 	.word	0x200007ec

0800e358 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e360:	4815      	ldr	r0, [pc, #84]	; (800e3b8 <OnAckTimeoutTimerEvent+0x60>)
 800e362:	f00b fd21 	bl	8019da8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e366:	4b15      	ldr	r3, [pc, #84]	; (800e3bc <OnAckTimeoutTimerEvent+0x64>)
 800e368:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d003      	beq.n	800e378 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e370:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <OnAckTimeoutTimerEvent+0x64>)
 800e372:	2201      	movs	r2, #1
 800e374:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e378:	4b11      	ldr	r3, [pc, #68]	; (800e3c0 <OnAckTimeoutTimerEvent+0x68>)
 800e37a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d106      	bne.n	800e390 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e382:	4a0e      	ldr	r2, [pc, #56]	; (800e3bc <OnAckTimeoutTimerEvent+0x64>)
 800e384:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e388:	f043 0320 	orr.w	r3, r3, #32
 800e38c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e390:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <OnAckTimeoutTimerEvent+0x64>)
 800e392:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00a      	beq.n	800e3b0 <OnAckTimeoutTimerEvent+0x58>
 800e39a:	4b08      	ldr	r3, [pc, #32]	; (800e3bc <OnAckTimeoutTimerEvent+0x64>)
 800e39c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d004      	beq.n	800e3b0 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e3a6:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <OnAckTimeoutTimerEvent+0x64>)
 800e3a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	4798      	blx	r3
    }
}
 800e3b0:	bf00      	nop
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	2000084c 	.word	0x2000084c
 800e3bc:	20000454 	.word	0x20000454
 800e3c0:	2000095c 	.word	0x2000095c

0800e3c4 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60ba      	str	r2, [r7, #8]
 800e3cc:	607b      	str	r3, [r7, #4]
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73fb      	strb	r3, [r7, #15]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d005      	beq.n	800e3e8 <GetFCntDown+0x24>
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <GetFCntDown+0x24>
 800e3e2:	6a3b      	ldr	r3, [r7, #32]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e3e8:	230a      	movs	r3, #10
 800e3ea:	e029      	b.n	800e440 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d016      	beq.n	800e420 <GetFCntDown+0x5c>
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d118      	bne.n	800e428 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e3f6:	79bb      	ldrb	r3, [r7, #6]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d10d      	bne.n	800e418 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d002      	beq.n	800e408 <GetFCntDown+0x44>
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	2b03      	cmp	r3, #3
 800e406:	d103      	bne.n	800e410 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	2202      	movs	r2, #2
 800e40c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e40e:	e00d      	b.n	800e42c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	2201      	movs	r2, #1
 800e414:	701a      	strb	r2, [r3, #0]
            break;
 800e416:	e009      	b.n	800e42c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2203      	movs	r2, #3
 800e41c:	701a      	strb	r2, [r3, #0]
            break;
 800e41e:	e005      	b.n	800e42c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	2204      	movs	r2, #4
 800e424:	701a      	strb	r2, [r3, #0]
            break;
 800e426:	e001      	b.n	800e42c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e428:	2305      	movs	r3, #5
 800e42a:	e009      	b.n	800e440 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	7818      	ldrb	r0, [r3, #0]
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	89db      	ldrh	r3, [r3, #14]
 800e434:	461a      	mov	r2, r3
 800e436:	8b39      	ldrh	r1, [r7, #24]
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	f004 faf1 	bl	8012a20 <LoRaMacCryptoGetFCntDown>
 800e43e:	4603      	mov	r3, r0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e448:	b5b0      	push	{r4, r5, r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e452:	2303      	movs	r3, #3
 800e454:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e456:	4b61      	ldr	r3, [pc, #388]	; (800e5dc <SwitchClass+0x194>)
 800e458:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	f000 80a5 	beq.w	800e5ac <SwitchClass+0x164>
 800e462:	2b02      	cmp	r3, #2
 800e464:	f300 80b4 	bgt.w	800e5d0 <SwitchClass+0x188>
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d003      	beq.n	800e474 <SwitchClass+0x2c>
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	f000 808f 	beq.w	800e590 <SwitchClass+0x148>
 800e472:	e0ad      	b.n	800e5d0 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d107      	bne.n	800e48a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e47a:	4b58      	ldr	r3, [pc, #352]	; (800e5dc <SwitchClass+0x194>)
 800e47c:	4a57      	ldr	r2, [pc, #348]	; (800e5dc <SwitchClass+0x194>)
 800e47e:	336c      	adds	r3, #108	; 0x6c
 800e480:	3264      	adds	r2, #100	; 0x64
 800e482:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e486:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800e48a:	79fb      	ldrb	r3, [r7, #7]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d10c      	bne.n	800e4aa <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	4618      	mov	r0, r3
 800e494:	f003 fa53 	bl	801193e <LoRaMacClassBSwitchClass>
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d103      	bne.n	800e4aa <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e4a2:	4a4e      	ldr	r2, [pc, #312]	; (800e5dc <SwitchClass+0x194>)
 800e4a4:	79fb      	ldrb	r3, [r7, #7]
 800e4a6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	f040 808a 	bne.w	800e5c6 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e4b2:	4a4a      	ldr	r2, [pc, #296]	; (800e5dc <SwitchClass+0x194>)
 800e4b4:	79fb      	ldrb	r3, [r7, #7]
 800e4b6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e4ba:	4a49      	ldr	r2, [pc, #292]	; (800e5e0 <SwitchClass+0x198>)
 800e4bc:	4b48      	ldr	r3, [pc, #288]	; (800e5e0 <SwitchClass+0x198>)
 800e4be:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800e4c2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800e4c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e4ce:	4b44      	ldr	r3, [pc, #272]	; (800e5e0 <SwitchClass+0x198>)
 800e4d0:	2202      	movs	r2, #2
 800e4d2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	73bb      	strb	r3, [r7, #14]
 800e4da:	e049      	b.n	800e570 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800e4dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4e0:	4a3e      	ldr	r2, [pc, #248]	; (800e5dc <SwitchClass+0x194>)
 800e4e2:	212c      	movs	r1, #44	; 0x2c
 800e4e4:	fb01 f303 	mul.w	r3, r1, r3
 800e4e8:	4413      	add	r3, r2
 800e4ea:	33d2      	adds	r3, #210	; 0xd2
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d038      	beq.n	800e564 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800e4f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4f6:	4a39      	ldr	r2, [pc, #228]	; (800e5dc <SwitchClass+0x194>)
 800e4f8:	212c      	movs	r1, #44	; 0x2c
 800e4fa:	fb01 f303 	mul.w	r3, r1, r3
 800e4fe:	4413      	add	r3, r2
 800e500:	33e8      	adds	r3, #232	; 0xe8
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a35      	ldr	r2, [pc, #212]	; (800e5dc <SwitchClass+0x194>)
 800e506:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800e508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e50c:	4a33      	ldr	r2, [pc, #204]	; (800e5dc <SwitchClass+0x194>)
 800e50e:	212c      	movs	r1, #44	; 0x2c
 800e510:	fb01 f303 	mul.w	r3, r1, r3
 800e514:	4413      	add	r3, r2
 800e516:	33ec      	adds	r3, #236	; 0xec
 800e518:	f993 3000 	ldrsb.w	r3, [r3]
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	4b2f      	ldr	r3, [pc, #188]	; (800e5dc <SwitchClass+0x194>)
 800e520:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e524:	4b2e      	ldr	r3, [pc, #184]	; (800e5e0 <SwitchClass+0x198>)
 800e526:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e52a:	4b2d      	ldr	r3, [pc, #180]	; (800e5e0 <SwitchClass+0x198>)
 800e52c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e530:	4b2a      	ldr	r3, [pc, #168]	; (800e5dc <SwitchClass+0x194>)
 800e532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e534:	4a2a      	ldr	r2, [pc, #168]	; (800e5e0 <SwitchClass+0x198>)
 800e536:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e53a:	4b28      	ldr	r3, [pc, #160]	; (800e5dc <SwitchClass+0x194>)
 800e53c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e540:	4b27      	ldr	r3, [pc, #156]	; (800e5e0 <SwitchClass+0x198>)
 800e542:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e546:	4b25      	ldr	r3, [pc, #148]	; (800e5dc <SwitchClass+0x194>)
 800e548:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e54c:	4b24      	ldr	r3, [pc, #144]	; (800e5e0 <SwitchClass+0x198>)
 800e54e:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e552:	4b23      	ldr	r3, [pc, #140]	; (800e5e0 <SwitchClass+0x198>)
 800e554:	2203      	movs	r2, #3
 800e556:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e55a:	4b21      	ldr	r3, [pc, #132]	; (800e5e0 <SwitchClass+0x198>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800e562:	e009      	b.n	800e578 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e568:	b2db      	uxtb	r3, r3
 800e56a:	3301      	adds	r3, #1
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	73bb      	strb	r3, [r7, #14]
 800e570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e574:	2b00      	cmp	r3, #0
 800e576:	ddb1      	ble.n	800e4dc <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800e578:	4b19      	ldr	r3, [pc, #100]	; (800e5e0 <SwitchClass+0x198>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800e580:	4b18      	ldr	r3, [pc, #96]	; (800e5e4 <SwitchClass+0x19c>)
 800e582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e584:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800e586:	f001 f9b1 	bl	800f8ec <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e58e:	e01a      	b.n	800e5c6 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e590:	79fb      	ldrb	r3, [r7, #7]
 800e592:	4618      	mov	r0, r3
 800e594:	f003 f9d3 	bl	801193e <LoRaMacClassBSwitchClass>
 800e598:	4603      	mov	r3, r0
 800e59a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800e59c:	7bfb      	ldrb	r3, [r7, #15]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d113      	bne.n	800e5ca <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e5a2:	4a0e      	ldr	r2, [pc, #56]	; (800e5dc <SwitchClass+0x194>)
 800e5a4:	79fb      	ldrb	r3, [r7, #7]
 800e5a6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800e5aa:	e00e      	b.n	800e5ca <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800e5ac:	79fb      	ldrb	r3, [r7, #7]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10d      	bne.n	800e5ce <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e5b2:	4a0a      	ldr	r2, [pc, #40]	; (800e5dc <SwitchClass+0x194>)
 800e5b4:	79fb      	ldrb	r3, [r7, #7]
 800e5b6:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800e5ba:	4b0a      	ldr	r3, [pc, #40]	; (800e5e4 <SwitchClass+0x19c>)
 800e5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5be:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e5c4:	e003      	b.n	800e5ce <SwitchClass+0x186>
            break;
 800e5c6:	bf00      	nop
 800e5c8:	e002      	b.n	800e5d0 <SwitchClass+0x188>
            break;
 800e5ca:	bf00      	nop
 800e5cc:	e000      	b.n	800e5d0 <SwitchClass+0x188>
            break;
 800e5ce:	bf00      	nop
        }
    }

    return status;
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	2000095c 	.word	0x2000095c
 800e5e0:	20000454 	.word	0x20000454
 800e5e4:	0801b528 	.word	0x0801b528

0800e5e8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e5f2:	4b10      	ldr	r3, [pc, #64]	; (800e634 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e5f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e5f8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e5fe:	230d      	movs	r3, #13
 800e600:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e602:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e604:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e60c:	230e      	movs	r3, #14
 800e60e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e610:	4b08      	ldr	r3, [pc, #32]	; (800e634 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e616:	f107 0210 	add.w	r2, r7, #16
 800e61a:	4611      	mov	r1, r2
 800e61c:	4618      	mov	r0, r3
 800e61e:	f005 f881 	bl	8013724 <RegionGetPhyParam>
 800e622:	4603      	mov	r3, r0
 800e624:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	b2db      	uxtb	r3, r3
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3718      	adds	r7, #24
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	2000095c 	.word	0x2000095c

0800e638 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	4603      	mov	r3, r0
 800e640:	71fb      	strb	r3, [r7, #7]
 800e642:	460b      	mov	r3, r1
 800e644:	71bb      	strb	r3, [r7, #6]
 800e646:	4613      	mov	r3, r2
 800e648:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e652:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff ffc6 	bl	800e5e8 <GetMaxAppPayloadWithoutFOptsLength>
 800e65c:	4603      	mov	r3, r0
 800e65e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800e660:	79fb      	ldrb	r3, [r7, #7]
 800e662:	b29a      	uxth	r2, r3
 800e664:	797b      	ldrb	r3, [r7, #5]
 800e666:	b29b      	uxth	r3, r3
 800e668:	4413      	add	r3, r2
 800e66a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e66c:	89ba      	ldrh	r2, [r7, #12]
 800e66e:	89fb      	ldrh	r3, [r7, #14]
 800e670:	429a      	cmp	r2, r3
 800e672:	d804      	bhi.n	800e67e <ValidatePayloadLength+0x46>
 800e674:	89bb      	ldrh	r3, [r7, #12]
 800e676:	2bff      	cmp	r3, #255	; 0xff
 800e678:	d801      	bhi.n	800e67e <ValidatePayloadLength+0x46>
    {
        return true;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e000      	b.n	800e680 <ValidatePayloadLength+0x48>
    }
    return false;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800e688:	b480      	push	{r7}
 800e68a:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800e68c:	4a05      	ldr	r2, [pc, #20]	; (800e6a4 <SetMlmeScheduleUplinkIndication+0x1c>)
 800e68e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e692:	f043 0310 	orr.w	r3, r3, #16
 800e696:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e69a:	bf00      	nop
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bc80      	pop	{r7}
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	20000454 	.word	0x20000454

0800e6a8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800e6a8:	b590      	push	{r4, r7, lr}
 800e6aa:	b0a5      	sub	sp, #148	; 0x94
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	70fb      	strb	r3, [r7, #3]
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	70bb      	strb	r3, [r7, #2]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800e6d4:	f000 bc73 	b.w	800efbe <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	4413      	add	r3, r2
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f003 fbf5 	bl	8011ed0 <LoRaMacCommandsGetCmdSize>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	78fb      	ldrb	r3, [r7, #3]
 800e6ec:	441a      	add	r2, r3
 800e6ee:	78bb      	ldrb	r3, [r7, #2]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	f300 846a 	bgt.w	800efca <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800e6f6:	78fb      	ldrb	r3, [r7, #3]
 800e6f8:	1c5a      	adds	r2, r3, #1
 800e6fa:	70fa      	strb	r2, [r7, #3]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	3b02      	subs	r3, #2
 800e706:	2b11      	cmp	r3, #17
 800e708:	f200 8461 	bhi.w	800efce <ProcessMacCommands+0x926>
 800e70c:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <ProcessMacCommands+0x6c>)
 800e70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e712:	bf00      	nop
 800e714:	0800e75d 	.word	0x0800e75d
 800e718:	0800e79f 	.word	0x0800e79f
 800e71c:	0800e8bb 	.word	0x0800e8bb
 800e720:	0800e8f9 	.word	0x0800e8f9
 800e724:	0800e9e9 	.word	0x0800e9e9
 800e728:	0800ea45 	.word	0x0800ea45
 800e72c:	0800eb01 	.word	0x0800eb01
 800e730:	0800eb5b 	.word	0x0800eb5b
 800e734:	0800ec3f 	.word	0x0800ec3f
 800e738:	0800efcf 	.word	0x0800efcf
 800e73c:	0800efcf 	.word	0x0800efcf
 800e740:	0800ece9 	.word	0x0800ece9
 800e744:	0800efcf 	.word	0x0800efcf
 800e748:	0800efcf 	.word	0x0800efcf
 800e74c:	0800edff 	.word	0x0800edff
 800e750:	0800ee33 	.word	0x0800ee33
 800e754:	0800eec3 	.word	0x0800eec3
 800e758:	0800ef39 	.word	0x0800ef39
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e75c:	2004      	movs	r0, #4
 800e75e:	f003 fd8f 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	f000 842a 	beq.w	800efbe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e76a:	2104      	movs	r1, #4
 800e76c:	2000      	movs	r0, #0
 800e76e:	f003 fcfb 	bl	8012168 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e772:	78fb      	ldrb	r3, [r7, #3]
 800e774:	1c5a      	adds	r2, r3, #1
 800e776:	70fa      	strb	r2, [r7, #3]
 800e778:	461a      	mov	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	781a      	ldrb	r2, [r3, #0]
 800e780:	4bad      	ldr	r3, [pc, #692]	; (800ea38 <ProcessMacCommands+0x390>)
 800e782:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e786:	78fb      	ldrb	r3, [r7, #3]
 800e788:	1c5a      	adds	r2, r3, #1
 800e78a:	70fa      	strb	r2, [r7, #3]
 800e78c:	461a      	mov	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4413      	add	r3, r2
 800e792:	781a      	ldrb	r2, [r3, #0]
 800e794:	4ba8      	ldr	r3, [pc, #672]	; (800ea38 <ProcessMacCommands+0x390>)
 800e796:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800e79a:	f000 bc10 	b.w	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800e7b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e7ba:	f083 0301 	eor.w	r3, r3, #1
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d078      	beq.n	800e8b6 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e7ca:	78fb      	ldrb	r3, [r7, #3]
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e7d4:	78ba      	ldrb	r2, [r7, #2]
 800e7d6:	78fb      	ldrb	r3, [r7, #3]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	3301      	adds	r3, #1
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e7e4:	4b95      	ldr	r3, [pc, #596]	; (800ea3c <ProcessMacCommands+0x394>)
 800e7e6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800e7ea:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e7ee:	4b93      	ldr	r3, [pc, #588]	; (800ea3c <ProcessMacCommands+0x394>)
 800e7f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e7f4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e7f8:	4b90      	ldr	r3, [pc, #576]	; (800ea3c <ProcessMacCommands+0x394>)
 800e7fa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e7fe:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e802:	4b8e      	ldr	r3, [pc, #568]	; (800ea3c <ProcessMacCommands+0x394>)
 800e804:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e808:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e80c:	4b8b      	ldr	r3, [pc, #556]	; (800ea3c <ProcessMacCommands+0x394>)
 800e80e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e812:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e816:	4b89      	ldr	r3, [pc, #548]	; (800ea3c <ProcessMacCommands+0x394>)
 800e818:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e81c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e81e:	4b87      	ldr	r3, [pc, #540]	; (800ea3c <ProcessMacCommands+0x394>)
 800e820:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e824:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800e828:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800e82c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e830:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	4623      	mov	r3, r4
 800e83e:	f005 f82f 	bl	80138a0 <RegionLinkAdrReq>
 800e842:	4603      	mov	r3, r0
 800e844:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e848:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e84c:	f003 0307 	and.w	r3, r3, #7
 800e850:	2b07      	cmp	r3, #7
 800e852:	d10e      	bne.n	800e872 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e854:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800e858:	4b78      	ldr	r3, [pc, #480]	; (800ea3c <ProcessMacCommands+0x394>)
 800e85a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e85e:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800e862:	4b76      	ldr	r3, [pc, #472]	; (800ea3c <ProcessMacCommands+0x394>)
 800e864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e868:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800e86c:	4b73      	ldr	r3, [pc, #460]	; (800ea3c <ProcessMacCommands+0x394>)
 800e86e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e872:	2300      	movs	r3, #0
 800e874:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e878:	e00b      	b.n	800e892 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e87a:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800e87e:	2201      	movs	r2, #1
 800e880:	4619      	mov	r1, r3
 800e882:	2003      	movs	r0, #3
 800e884:	f003 f9d4 	bl	8011c30 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e888:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800e88c:	3301      	adds	r3, #1
 800e88e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e892:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e896:	4a6a      	ldr	r2, [pc, #424]	; (800ea40 <ProcessMacCommands+0x398>)
 800e898:	fba2 2303 	umull	r2, r3, r2, r3
 800e89c:	089b      	lsrs	r3, r3, #2
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d3e8      	bcc.n	800e87a <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e8a8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800e8b6:	bf00      	nop
 800e8b8:	e381      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e8ba:	78fb      	ldrb	r3, [r7, #3]
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	70fa      	strb	r2, [r7, #3]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	f003 030f 	and.w	r3, r3, #15
 800e8cc:	b2da      	uxtb	r2, r3
 800e8ce:	4b5b      	ldr	r3, [pc, #364]	; (800ea3c <ProcessMacCommands+0x394>)
 800e8d0:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e8d4:	4b59      	ldr	r3, [pc, #356]	; (800ea3c <ProcessMacCommands+0x394>)
 800e8d6:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800e8da:	461a      	mov	r2, r3
 800e8dc:	2301      	movs	r3, #1
 800e8de:	4093      	lsls	r3, r2
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	4b56      	ldr	r3, [pc, #344]	; (800ea3c <ProcessMacCommands+0x394>)
 800e8e4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e8e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	2004      	movs	r0, #4
 800e8f2:	f003 f99d 	bl	8011c30 <LoRaMacCommandsAddCmd>
                break;
 800e8f6:	e362      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e8f8:	2307      	movs	r3, #7
 800e8fa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e8fe:	78fb      	ldrb	r3, [r7, #3]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	4413      	add	r3, r2
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	091b      	lsrs	r3, r3, #4
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	b25b      	sxtb	r3, r3
 800e90c:	f003 0307 	and.w	r3, r3, #7
 800e910:	b25b      	sxtb	r3, r3
 800e912:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e916:	78fb      	ldrb	r3, [r7, #3]
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	4413      	add	r3, r2
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	b25b      	sxtb	r3, r3
 800e920:	f003 030f 	and.w	r3, r3, #15
 800e924:	b25b      	sxtb	r3, r3
 800e926:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800e92a:	78fb      	ldrb	r3, [r7, #3]
 800e92c:	3301      	adds	r3, #1
 800e92e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e930:	78fb      	ldrb	r3, [r7, #3]
 800e932:	1c5a      	adds	r2, r3, #1
 800e934:	70fa      	strb	r2, [r7, #3]
 800e936:	461a      	mov	r2, r3
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4413      	add	r3, r2
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e940:	78fb      	ldrb	r3, [r7, #3]
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	70fa      	strb	r2, [r7, #3]
 800e946:	461a      	mov	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	4413      	add	r3, r2
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	021a      	lsls	r2, r3, #8
 800e950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e952:	4313      	orrs	r3, r2
 800e954:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e956:	78fb      	ldrb	r3, [r7, #3]
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	70fa      	strb	r2, [r7, #3]
 800e95c:	461a      	mov	r2, r3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4413      	add	r3, r2
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	041a      	lsls	r2, r3, #16
 800e966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e968:	4313      	orrs	r3, r2
 800e96a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800e96c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e96e:	2264      	movs	r2, #100	; 0x64
 800e970:	fb02 f303 	mul.w	r3, r2, r3
 800e974:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e976:	4b31      	ldr	r3, [pc, #196]	; (800ea3c <ProcessMacCommands+0x394>)
 800e978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e97c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e980:	4611      	mov	r1, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f004 ffa6 	bl	80138d4 <RegionRxParamSetupReq>
 800e988:	4603      	mov	r3, r0
 800e98a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e98e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e992:	f003 0307 	and.w	r3, r3, #7
 800e996:	2b07      	cmp	r3, #7
 800e998:	d117      	bne.n	800e9ca <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e99a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	4b26      	ldr	r3, [pc, #152]	; (800ea3c <ProcessMacCommands+0x394>)
 800e9a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e9a6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	4b23      	ldr	r3, [pc, #140]	; (800ea3c <ProcessMacCommands+0x394>)
 800e9ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b4:	4a21      	ldr	r2, [pc, #132]	; (800ea3c <ProcessMacCommands+0x394>)
 800e9b6:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ba:	4a20      	ldr	r2, [pc, #128]	; (800ea3c <ProcessMacCommands+0x394>)
 800e9bc:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e9be:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	4b1d      	ldr	r3, [pc, #116]	; (800ea3c <ProcessMacCommands+0x394>)
 800e9c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800e9ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e9ce:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e9d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	4619      	mov	r1, r3
 800e9da:	2005      	movs	r0, #5
 800e9dc:	f003 f928 	bl	8011c30 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800e9e0:	f7ff fe52 	bl	800e688 <SetMlmeScheduleUplinkIndication>
                break;
 800e9e4:	bf00      	nop
 800e9e6:	e2ea      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e9e8:	23ff      	movs	r3, #255	; 0xff
 800e9ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e9ee:	4b12      	ldr	r3, [pc, #72]	; (800ea38 <ProcessMacCommands+0x390>)
 800e9f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00d      	beq.n	800ea14 <ProcessMacCommands+0x36c>
 800e9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ea38 <ProcessMacCommands+0x390>)
 800e9fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d007      	beq.n	800ea14 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800ea04:	4b0c      	ldr	r3, [pc, #48]	; (800ea38 <ProcessMacCommands+0x390>)
 800ea06:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4798      	blx	r3
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800ea14:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800ea18:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ea1c:	787b      	ldrb	r3, [r7, #1]
 800ea1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ea28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ea2c:	2202      	movs	r2, #2
 800ea2e:	4619      	mov	r1, r3
 800ea30:	2006      	movs	r0, #6
 800ea32:	f003 f8fd 	bl	8011c30 <LoRaMacCommandsAddCmd>
                break;
 800ea36:	e2c2      	b.n	800efbe <ProcessMacCommands+0x916>
 800ea38:	20000454 	.word	0x20000454
 800ea3c:	2000095c 	.word	0x2000095c
 800ea40:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800ea44:	2303      	movs	r3, #3
 800ea46:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800ea4a:	78fb      	ldrb	r3, [r7, #3]
 800ea4c:	1c5a      	adds	r2, r3, #1
 800ea4e:	70fa      	strb	r2, [r7, #3]
 800ea50:	461a      	mov	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	4413      	add	r3, r2
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	b25b      	sxtb	r3, r3
 800ea5a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800ea5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ea62:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800ea64:	78fb      	ldrb	r3, [r7, #3]
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	70fa      	strb	r2, [r7, #3]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4413      	add	r3, r2
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	1c5a      	adds	r2, r3, #1
 800ea78:	70fa      	strb	r2, [r7, #3]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4413      	add	r3, r2
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	021a      	lsls	r2, r3, #8
 800ea84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea86:	4313      	orrs	r3, r2
 800ea88:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ea8a:	78fb      	ldrb	r3, [r7, #3]
 800ea8c:	1c5a      	adds	r2, r3, #1
 800ea8e:	70fa      	strb	r2, [r7, #3]
 800ea90:	461a      	mov	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4413      	add	r3, r2
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	041a      	lsls	r2, r3, #16
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa2:	2264      	movs	r2, #100	; 0x64
 800eaa4:	fb02 f303 	mul.w	r3, r2, r3
 800eaa8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800eaae:	78fb      	ldrb	r3, [r7, #3]
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	70fa      	strb	r2, [r7, #3]
 800eab4:	461a      	mov	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4413      	add	r3, r2
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	b25b      	sxtb	r3, r3
 800eabe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800eac2:	4b87      	ldr	r3, [pc, #540]	; (800ece0 <ProcessMacCommands+0x638>)
 800eac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eac8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800eacc:	4611      	mov	r1, r2
 800eace:	4618      	mov	r0, r3
 800ead0:	f004 ff13 	bl	80138fa <RegionNewChannelReq>
 800ead4:	4603      	mov	r3, r0
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800eadc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800eae0:	b25b      	sxtb	r3, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	db0a      	blt.n	800eafc <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800eae6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800eaea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800eaee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	2007      	movs	r0, #7
 800eaf8:	f003 f89a 	bl	8011c30 <LoRaMacCommandsAddCmd>
                }
                break;
 800eafc:	bf00      	nop
 800eafe:	e25e      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800eb00:	78fb      	ldrb	r3, [r7, #3]
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	70fa      	strb	r2, [r7, #3]
 800eb06:	461a      	mov	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	f003 030f 	and.w	r3, r3, #15
 800eb12:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800eb16:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d104      	bne.n	800eb28 <ProcessMacCommands+0x480>
                {
                    delay++;
 800eb1e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800eb22:	3301      	adds	r3, #1
 800eb24:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800eb28:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800eb2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb30:	fb02 f303 	mul.w	r3, r2, r3
 800eb34:	461a      	mov	r2, r3
 800eb36:	4b6a      	ldr	r3, [pc, #424]	; (800ece0 <ProcessMacCommands+0x638>)
 800eb38:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eb3a:	4b69      	ldr	r3, [pc, #420]	; (800ece0 <ProcessMacCommands+0x638>)
 800eb3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb3e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800eb42:	4a67      	ldr	r2, [pc, #412]	; (800ece0 <ProcessMacCommands+0x638>)
 800eb44:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800eb46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	2008      	movs	r0, #8
 800eb50:	f003 f86e 	bl	8011c30 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800eb54:	f7ff fd98 	bl	800e688 <SetMlmeScheduleUplinkIndication>
                break;
 800eb58:	e231      	b.n	800efbe <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800eb5a:	78fb      	ldrb	r3, [r7, #3]
 800eb5c:	1c5a      	adds	r2, r3, #1
 800eb5e:	70fa      	strb	r2, [r7, #3]
 800eb60:	461a      	mov	r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4413      	add	r3, r2
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800eb72:	2300      	movs	r3, #0
 800eb74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800eb78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800eb7c:	f003 0320 	and.w	r3, r3, #32
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800eb84:	2301      	movs	r3, #1
 800eb86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800eb8a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800eb8e:	f003 0310 	and.w	r3, r3, #16
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d002      	beq.n	800eb9c <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800eb96:	2301      	movs	r3, #1
 800eb98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800eb9c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800eba0:	f003 030f 	and.w	r3, r3, #15
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800ebaa:	4b4d      	ldr	r3, [pc, #308]	; (800ece0 <ProcessMacCommands+0x638>)
 800ebac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebb0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f004 feb2 	bl	8013920 <RegionTxParamSetupReq>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc2:	d03a      	beq.n	800ec3a <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800ebc4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800ebc8:	4b45      	ldr	r3, [pc, #276]	; (800ece0 <ProcessMacCommands+0x638>)
 800ebca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800ebce:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ebd2:	4b43      	ldr	r3, [pc, #268]	; (800ece0 <ProcessMacCommands+0x638>)
 800ebd4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800ebd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ebdc:	461a      	mov	r2, r3
 800ebde:	4b41      	ldr	r3, [pc, #260]	; (800ece4 <ProcessMacCommands+0x63c>)
 800ebe0:	5c9b      	ldrb	r3, [r3, r2]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7f1 fdf2 	bl	80007cc <__aeabi_ui2f>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	4a3d      	ldr	r2, [pc, #244]	; (800ece0 <ProcessMacCommands+0x638>)
 800ebec:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ebee:	2302      	movs	r3, #2
 800ebf0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ebf4:	4b3a      	ldr	r3, [pc, #232]	; (800ece0 <ProcessMacCommands+0x638>)
 800ebf6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ebfa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebfe:	4b38      	ldr	r3, [pc, #224]	; (800ece0 <ProcessMacCommands+0x638>)
 800ec00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec04:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ec08:	4611      	mov	r1, r2
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f004 fd8a 	bl	8013724 <RegionGetPhyParam>
 800ec10:	4603      	mov	r3, r0
 800ec12:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	b25a      	sxtb	r2, r3
 800ec18:	4b31      	ldr	r3, [pc, #196]	; (800ece0 <ProcessMacCommands+0x638>)
 800ec1a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	bfb8      	it	lt
 800ec22:	4613      	movlt	r3, r2
 800ec24:	b25a      	sxtb	r2, r3
 800ec26:	4b2e      	ldr	r3, [pc, #184]	; (800ece0 <ProcessMacCommands+0x638>)
 800ec28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ec2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ec30:	2200      	movs	r2, #0
 800ec32:	4619      	mov	r1, r3
 800ec34:	2009      	movs	r0, #9
 800ec36:	f002 fffb 	bl	8011c30 <LoRaMacCommandsAddCmd>
                }
                break;
 800ec3a:	bf00      	nop
 800ec3c:	e1bf      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800ec44:	78fb      	ldrb	r3, [r7, #3]
 800ec46:	1c5a      	adds	r2, r3, #1
 800ec48:	70fa      	strb	r2, [r7, #3]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4413      	add	r3, r2
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800ec56:	78fb      	ldrb	r3, [r7, #3]
 800ec58:	1c5a      	adds	r2, r3, #1
 800ec5a:	70fa      	strb	r2, [r7, #3]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4413      	add	r3, r2
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ec66:	78fb      	ldrb	r3, [r7, #3]
 800ec68:	1c5a      	adds	r2, r3, #1
 800ec6a:	70fa      	strb	r2, [r7, #3]
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4413      	add	r3, r2
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	021a      	lsls	r2, r3, #8
 800ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ec7c:	78fb      	ldrb	r3, [r7, #3]
 800ec7e:	1c5a      	adds	r2, r3, #1
 800ec80:	70fa      	strb	r2, [r7, #3]
 800ec82:	461a      	mov	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4413      	add	r3, r2
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	041a      	lsls	r2, r3, #16
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec94:	2264      	movs	r2, #100	; 0x64
 800ec96:	fb02 f303 	mul.w	r3, r2, r3
 800ec9a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800ec9c:	4b10      	ldr	r3, [pc, #64]	; (800ece0 <ProcessMacCommands+0x638>)
 800ec9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eca2:	f107 0220 	add.w	r2, r7, #32
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f004 fe4c 	bl	8013946 <RegionDlChannelReq>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800ecb6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ecba:	b25b      	sxtb	r3, r3
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	db0c      	blt.n	800ecda <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800ecc0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ecc4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ecc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eccc:	2201      	movs	r2, #1
 800ecce:	4619      	mov	r1, r3
 800ecd0:	200a      	movs	r0, #10
 800ecd2:	f002 ffad 	bl	8011c30 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800ecd6:	f7ff fcd7 	bl	800e688 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800ecda:	bf00      	nop
 800ecdc:	e16f      	b.n	800efbe <ProcessMacCommands+0x916>
 800ecde:	bf00      	nop
 800ece0:	2000095c 	.word	0x2000095c
 800ece4:	0801b4e0 	.word	0x0801b4e0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800ece8:	200a      	movs	r0, #10
 800ecea:	f003 fac9 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f000 8164 	beq.w	800efbe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800ecf6:	210a      	movs	r1, #10
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	f003 fa35 	bl	8012168 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800ecfe:	f107 0318 	add.w	r3, r7, #24
 800ed02:	2200      	movs	r2, #0
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ed08:	f107 0310 	add.w	r3, r7, #16
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ed12:	f107 0308 	add.w	r3, r7, #8
 800ed16:	2200      	movs	r2, #0
 800ed18:	601a      	str	r2, [r3, #0]
 800ed1a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ed1c:	78fb      	ldrb	r3, [r7, #3]
 800ed1e:	1c5a      	adds	r2, r3, #1
 800ed20:	70fa      	strb	r2, [r7, #3]
 800ed22:	461a      	mov	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4413      	add	r3, r2
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ed2c:	78fb      	ldrb	r3, [r7, #3]
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	70fa      	strb	r2, [r7, #3]
 800ed32:	461a      	mov	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4413      	add	r3, r2
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	021a      	lsls	r2, r3, #8
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ed42:	78fb      	ldrb	r3, [r7, #3]
 800ed44:	1c5a      	adds	r2, r3, #1
 800ed46:	70fa      	strb	r2, [r7, #3]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	041a      	lsls	r2, r3, #16
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ed58:	78fb      	ldrb	r3, [r7, #3]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	70fa      	strb	r2, [r7, #3]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4413      	add	r3, r2
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	061a      	lsls	r2, r3, #24
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ed6e:	78fb      	ldrb	r3, [r7, #3]
 800ed70:	1c5a      	adds	r2, r3, #1
 800ed72:	70fa      	strb	r2, [r7, #3]
 800ed74:	461a      	mov	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4413      	add	r3, r2
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	b21b      	sxth	r3, r3
 800ed7e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ed80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ed84:	461a      	mov	r2, r3
 800ed86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed8a:	fb03 f302 	mul.w	r3, r3, r2
 800ed8e:	121b      	asrs	r3, r3, #8
 800ed90:	b21b      	sxth	r3, r3
 800ed92:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800ed94:	f107 0310 	add.w	r3, r7, #16
 800ed98:	f107 0218 	add.w	r2, r7, #24
 800ed9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eda0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800eda4:	693a      	ldr	r2, [r7, #16]
 800eda6:	4b8c      	ldr	r3, [pc, #560]	; (800efd8 <ProcessMacCommands+0x930>)
 800eda8:	4413      	add	r3, r2
 800edaa:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800edac:	f107 0308 	add.w	r3, r7, #8
 800edb0:	4618      	mov	r0, r3
 800edb2:	f00a faa5 	bl	8019300 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800edb6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800edba:	4b88      	ldr	r3, [pc, #544]	; (800efdc <ProcessMacCommands+0x934>)
 800edbc:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800edc0:	9200      	str	r2, [sp, #0]
 800edc2:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800edc6:	f107 0210 	add.w	r2, r7, #16
 800edca:	ca06      	ldmia	r2, {r1, r2}
 800edcc:	f00a fa31 	bl	8019232 <SysTimeSub>
 800edd0:	f107 0010 	add.w	r0, r7, #16
 800edd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edda:	f107 0208 	add.w	r2, r7, #8
 800edde:	ca06      	ldmia	r2, {r1, r2}
 800ede0:	f00a f9ee 	bl	80191c0 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800ede4:	f107 0310 	add.w	r3, r7, #16
 800ede8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800edec:	f00a fa5a 	bl	80192a4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800edf0:	f002 fde3 	bl	80119ba <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800edf4:	4b79      	ldr	r3, [pc, #484]	; (800efdc <ProcessMacCommands+0x934>)
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800edfc:	e0df      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800edfe:	200d      	movs	r0, #13
 800ee00:	f003 fa3e 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	f000 80d9 	beq.w	800efbe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ee0c:	210d      	movs	r1, #13
 800ee0e:	2000      	movs	r0, #0
 800ee10:	f003 f9aa 	bl	8012168 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ee14:	4b71      	ldr	r3, [pc, #452]	; (800efdc <ProcessMacCommands+0x934>)
 800ee16:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	f000 80cf 	beq.w	800efbe <ProcessMacCommands+0x916>
 800ee20:	4b6e      	ldr	r3, [pc, #440]	; (800efdc <ProcessMacCommands+0x934>)
 800ee22:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ee26:	2b05      	cmp	r3, #5
 800ee28:	f000 80c9 	beq.w	800efbe <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800ee2c:	f002 fda6 	bl	801197c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800ee30:	e0c5      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ee32:	2303      	movs	r3, #3
 800ee34:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ee3c:	78fb      	ldrb	r3, [r7, #3]
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	70fa      	strb	r2, [r7, #3]
 800ee42:	461a      	mov	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4413      	add	r3, r2
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	70fa      	strb	r2, [r7, #3]
 800ee52:	461a      	mov	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4413      	add	r3, r2
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	021b      	lsls	r3, r3, #8
 800ee5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ee62:	78fb      	ldrb	r3, [r7, #3]
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	70fa      	strb	r2, [r7, #3]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	041b      	lsls	r3, r3, #16
 800ee72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ee74:	4313      	orrs	r3, r2
 800ee76:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800ee78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee7a:	2264      	movs	r2, #100	; 0x64
 800ee7c:	fb02 f303 	mul.w	r3, r2, r3
 800ee80:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800ee82:	78fb      	ldrb	r3, [r7, #3]
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	70fa      	strb	r2, [r7, #3]
 800ee88:	461a      	mov	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	f003 030f 	and.w	r3, r3, #15
 800ee94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ee98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ee9c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f002 fd72 	bl	8011988 <LoRaMacClassBPingSlotChannelReq>
 800eea4:	4603      	mov	r3, r0
 800eea6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800eeaa:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800eeae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800eeb2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	4619      	mov	r1, r3
 800eeba:	2011      	movs	r0, #17
 800eebc:	f002 feb8 	bl	8011c30 <LoRaMacCommandsAddCmd>
                break;
 800eec0:	e07d      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800eec2:	200e      	movs	r0, #14
 800eec4:	f003 f9dc 	bl	8012280 <LoRaMacConfirmQueueIsCmdActive>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d077      	beq.n	800efbe <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800eece:	210e      	movs	r1, #14
 800eed0:	2000      	movs	r0, #0
 800eed2:	f003 f949 	bl	8012168 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800eedc:	2300      	movs	r3, #0
 800eede:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800eee2:	78fb      	ldrb	r3, [r7, #3]
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	70fa      	strb	r2, [r7, #3]
 800eee8:	461a      	mov	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4413      	add	r3, r2
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800eef4:	78fb      	ldrb	r3, [r7, #3]
 800eef6:	1c5a      	adds	r2, r3, #1
 800eef8:	70fa      	strb	r2, [r7, #3]
 800eefa:	461a      	mov	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4413      	add	r3, r2
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	b21a      	sxth	r2, r3
 800ef06:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	b21b      	sxth	r3, r3
 800ef0e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ef12:	78fb      	ldrb	r3, [r7, #3]
 800ef14:	1c5a      	adds	r2, r3, #1
 800ef16:	70fa      	strb	r2, [r7, #3]
 800ef18:	461a      	mov	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ef24:	4b2e      	ldr	r3, [pc, #184]	; (800efe0 <ProcessMacCommands+0x938>)
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800ef2c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800ef30:	4618      	mov	r0, r3
 800ef32:	f002 fd35 	bl	80119a0 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ef36:	e042      	b.n	800efbe <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ef3e:	78fb      	ldrb	r3, [r7, #3]
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	70fa      	strb	r2, [r7, #3]
 800ef44:	461a      	mov	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4413      	add	r3, r2
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ef50:	78fb      	ldrb	r3, [r7, #3]
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	70fa      	strb	r2, [r7, #3]
 800ef56:	461a      	mov	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	021b      	lsls	r3, r3, #8
 800ef60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ef64:	4313      	orrs	r3, r2
 800ef66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ef6a:	78fb      	ldrb	r3, [r7, #3]
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	70fa      	strb	r2, [r7, #3]
 800ef70:	461a      	mov	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4413      	add	r3, r2
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	041b      	lsls	r3, r3, #16
 800ef7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800ef84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ef88:	2264      	movs	r2, #100	; 0x64
 800ef8a:	fb02 f303 	mul.w	r3, r2, r3
 800ef8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800ef92:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ef96:	f002 fd16 	bl	80119c6 <LoRaMacClassBBeaconFreqReq>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d003      	beq.n	800efa8 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800efa0:	2301      	movs	r3, #1
 800efa2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800efa6:	e002      	b.n	800efae <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800efae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800efb2:	2201      	movs	r2, #1
 800efb4:	4619      	mov	r1, r3
 800efb6:	2013      	movs	r0, #19
 800efb8:	f002 fe3a 	bl	8011c30 <LoRaMacCommandsAddCmd>
                }
                break;
 800efbc:	bf00      	nop
    while( macIndex < commandsSize )
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	78bb      	ldrb	r3, [r7, #2]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	f4ff ab88 	bcc.w	800e6d8 <ProcessMacCommands+0x30>
 800efc8:	e002      	b.n	800efd0 <ProcessMacCommands+0x928>
            return;
 800efca:	bf00      	nop
 800efcc:	e000      	b.n	800efd0 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800efce:	bf00      	nop
        }
    }
}
 800efd0:	378c      	adds	r7, #140	; 0x8c
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd90      	pop	{r4, r7, pc}
 800efd6:	bf00      	nop
 800efd8:	12d53d80 	.word	0x12d53d80
 800efdc:	20000454 	.word	0x20000454
 800efe0:	200017b4 	.word	0x200017b4

0800efe4 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08e      	sub	sp, #56	; 0x38
 800efe8:	af02      	add	r7, sp, #8
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	607a      	str	r2, [r7, #4]
 800efee:	461a      	mov	r2, r3
 800eff0:	460b      	mov	r3, r1
 800eff2:	72fb      	strb	r3, [r7, #11]
 800eff4:	4613      	mov	r3, r2
 800eff6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eff8:	2303      	movs	r3, #3
 800effa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800effe:	4b65      	ldr	r3, [pc, #404]	; (800f194 <Send+0x1b0>)
 800f000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f004:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f008:	4b62      	ldr	r3, [pc, #392]	; (800f194 <Send+0x1b0>)
 800f00a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f00e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f012:	4b60      	ldr	r3, [pc, #384]	; (800f194 <Send+0x1b0>)
 800f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f016:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f018:	4b5e      	ldr	r3, [pc, #376]	; (800f194 <Send+0x1b0>)
 800f01a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f022:	2307      	movs	r3, #7
 800f024:	e0b1      	b.n	800f18a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f026:	4b5b      	ldr	r3, [pc, #364]	; (800f194 <Send+0x1b0>)
 800f028:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d102      	bne.n	800f036 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f030:	4b58      	ldr	r3, [pc, #352]	; (800f194 <Send+0x1b0>)
 800f032:	2200      	movs	r2, #0
 800f034:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f03c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f040:	f36f 0303 	bfc	r3, #0, #4
 800f044:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f048:	4b52      	ldr	r3, [pc, #328]	; (800f194 <Send+0x1b0>)
 800f04a:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f04e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f052:	f362 13c7 	bfi	r3, r2, #7, #1
 800f056:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f05a:	4b4e      	ldr	r3, [pc, #312]	; (800f194 <Send+0x1b0>)
 800f05c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f060:	2b01      	cmp	r3, #1
 800f062:	d106      	bne.n	800f072 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f064:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f068:	f043 0310 	orr.w	r3, r3, #16
 800f06c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f070:	e005      	b.n	800f07e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f072:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f076:	f36f 1304 	bfc	r3, #4, #1
 800f07a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f07e:	4b45      	ldr	r3, [pc, #276]	; (800f194 <Send+0x1b0>)
 800f080:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f084:	2b00      	cmp	r3, #0
 800f086:	d005      	beq.n	800f094 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f088:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f08c:	f043 0320 	orr.w	r3, r3, #32
 800f090:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f094:	4b3f      	ldr	r3, [pc, #252]	; (800f194 <Send+0x1b0>)
 800f096:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f09a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f09c:	2301      	movs	r3, #1
 800f09e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f0a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f0a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	bf14      	ite	ne
 800f0ae:	2301      	movne	r3, #1
 800f0b0:	2300      	moveq	r3, #0
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f0b6:	4b37      	ldr	r3, [pc, #220]	; (800f194 <Send+0x1b0>)
 800f0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ba:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f0bc:	4b36      	ldr	r3, [pc, #216]	; (800f198 <Send+0x1b4>)
 800f0be:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f0c2:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f0c4:	4b34      	ldr	r3, [pc, #208]	; (800f198 <Send+0x1b4>)
 800f0c6:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f0ca:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f0cc:	4b31      	ldr	r3, [pc, #196]	; (800f194 <Send+0x1b0>)
 800f0ce:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f0d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f0d6:	4b2f      	ldr	r3, [pc, #188]	; (800f194 <Send+0x1b0>)
 800f0d8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f0dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f0e0:	4b2c      	ldr	r3, [pc, #176]	; (800f194 <Send+0x1b0>)
 800f0e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f0e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f0ea:	4b2a      	ldr	r3, [pc, #168]	; (800f194 <Send+0x1b0>)
 800f0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f0f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0f8:	f107 0014 	add.w	r0, r7, #20
 800f0fc:	4a27      	ldr	r2, [pc, #156]	; (800f19c <Send+0x1b8>)
 800f0fe:	4928      	ldr	r1, [pc, #160]	; (800f1a0 <Send+0x1bc>)
 800f100:	f002 fb7c 	bl	80117fc <LoRaMacAdrCalcNext>
 800f104:	4603      	mov	r3, r0
 800f106:	461a      	mov	r2, r3
 800f108:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f10c:	f362 1386 	bfi	r3, r2, #6, #1
 800f110:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f114:	7afa      	ldrb	r2, [r7, #11]
 800f116:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f11a:	893b      	ldrh	r3, [r7, #8]
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f000 fc21 	bl	800f968 <PrepareFrame>
 800f126:	4603      	mov	r3, r0
 800f128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f12c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f130:	2b00      	cmp	r3, #0
 800f132:	d003      	beq.n	800f13c <Send+0x158>
 800f134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f138:	2b0a      	cmp	r3, #10
 800f13a:	d107      	bne.n	800f14c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f13c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f140:	4618      	mov	r0, r3
 800f142:	f000 f96d 	bl	800f420 <ScheduleTx>
 800f146:	4603      	mov	r3, r0
 800f148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f14c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00a      	beq.n	800f16a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f154:	4a0f      	ldr	r2, [pc, #60]	; (800f194 <Send+0x1b0>)
 800f156:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f15a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f15e:	4a0d      	ldr	r2, [pc, #52]	; (800f194 <Send+0x1b0>)
 800f160:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f164:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f168:	e00d      	b.n	800f186 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f16a:	4b0a      	ldr	r3, [pc, #40]	; (800f194 <Send+0x1b0>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f174:	4a07      	ldr	r2, [pc, #28]	; (800f194 <Send+0x1b0>)
 800f176:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f178:	f002 fdd2 	bl	8011d20 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f182:	2313      	movs	r3, #19
 800f184:	e001      	b.n	800f18a <Send+0x1a6>
        }
    }
    return status;
 800f186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3730      	adds	r7, #48	; 0x30
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	2000095c 	.word	0x2000095c
 800f198:	20000454 	.word	0x20000454
 800f19c:	20000994 	.word	0x20000994
 800f1a0:	20000995 	.word	0x20000995

0800f1a4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	2bff      	cmp	r3, #255	; 0xff
 800f1be:	d129      	bne.n	800f214 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	f7ff f941 	bl	800e448 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f1c6:	4b1a      	ldr	r3, [pc, #104]	; (800f230 <SendReJoinReq+0x8c>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f1ce:	4b18      	ldr	r3, [pc, #96]	; (800f230 <SendReJoinReq+0x8c>)
 800f1d0:	4a18      	ldr	r2, [pc, #96]	; (800f234 <SendReJoinReq+0x90>)
 800f1d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f1d6:	4b16      	ldr	r3, [pc, #88]	; (800f230 <SendReJoinReq+0x8c>)
 800f1d8:	22ff      	movs	r2, #255	; 0xff
 800f1da:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f1de:	7b3b      	ldrb	r3, [r7, #12]
 800f1e0:	f36f 1347 	bfc	r3, #5, #3
 800f1e4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f1e6:	7b3a      	ldrb	r2, [r7, #12]
 800f1e8:	4b11      	ldr	r3, [pc, #68]	; (800f230 <SendReJoinReq+0x8c>)
 800f1ea:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f1ee:	f7fc fc85 	bl	800bafc <SecureElementGetJoinEui>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2208      	movs	r2, #8
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	480f      	ldr	r0, [pc, #60]	; (800f238 <SendReJoinReq+0x94>)
 800f1fa:	f006 fd9e 	bl	8015d3a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f1fe:	f7fc fc5b 	bl	800bab8 <SecureElementGetDevEui>
 800f202:	4603      	mov	r3, r0
 800f204:	2208      	movs	r2, #8
 800f206:	4619      	mov	r1, r3
 800f208:	480c      	ldr	r0, [pc, #48]	; (800f23c <SendReJoinReq+0x98>)
 800f20a:	f006 fd96 	bl	8015d3a <memcpy1>

            allowDelayedTx = false;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]

            break;
 800f212:	e002      	b.n	800f21a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f214:	2302      	movs	r3, #2
 800f216:	73bb      	strb	r3, [r7, #14]
            break;
 800f218:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f21a:	7bfb      	ldrb	r3, [r7, #15]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 f8ff 	bl	800f420 <ScheduleTx>
 800f222:	4603      	mov	r3, r0
 800f224:	73bb      	strb	r3, [r7, #14]
    return status;
 800f226:	7bbb      	ldrb	r3, [r7, #14]
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3710      	adds	r7, #16
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	20000454 	.word	0x20000454
 800f234:	20000456 	.word	0x20000456
 800f238:	20000562 	.word	0x20000562
 800f23c:	2000056a 	.word	0x2000056a

0800f240 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f244:	f002 fb49 	bl	80118da <LoRaMacClassBIsBeaconExpected>
 800f248:	4603      	mov	r3, r0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d001      	beq.n	800f252 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f24e:	230e      	movs	r3, #14
 800f250:	e013      	b.n	800f27a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f252:	4b0b      	ldr	r3, [pc, #44]	; (800f280 <CheckForClassBCollision+0x40>)
 800f254:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d10d      	bne.n	800f278 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f25c:	f002 fb44 	bl	80118e8 <LoRaMacClassBIsPingExpected>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f266:	230f      	movs	r3, #15
 800f268:	e007      	b.n	800f27a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f26a:	f002 fb44 	bl	80118f6 <LoRaMacClassBIsMulticastExpected>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f274:	230f      	movs	r3, #15
 800f276:	e000      	b.n	800f27a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	2000095c 	.word	0x2000095c

0800f284 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f284:	b590      	push	{r4, r7, lr}
 800f286:	b083      	sub	sp, #12
 800f288:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f28a:	4b2d      	ldr	r3, [pc, #180]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f28c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f290:	4b2b      	ldr	r3, [pc, #172]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f292:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f296:	4b2a      	ldr	r3, [pc, #168]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f298:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f29c:	4b28      	ldr	r3, [pc, #160]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f29e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f2a2:	4b27      	ldr	r3, [pc, #156]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f2a8:	b25b      	sxtb	r3, r3
 800f2aa:	f004 fba3 	bl	80139f4 <RegionApplyDrOffset>
 800f2ae:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2b0:	b259      	sxtb	r1, r3
 800f2b2:	4b23      	ldr	r3, [pc, #140]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f2b8:	4b21      	ldr	r3, [pc, #132]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2bc:	4821      	ldr	r0, [pc, #132]	; (800f344 <ComputeRxWindowParameters+0xc0>)
 800f2be:	9000      	str	r0, [sp, #0]
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f004 faa7 	bl	8013814 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2c6:	4b1e      	ldr	r3, [pc, #120]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2c8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f2cc:	4b1c      	ldr	r3, [pc, #112]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2ce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2d2:	b259      	sxtb	r1, r3
 800f2d4:	4b1a      	ldr	r3, [pc, #104]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f2da:	4b19      	ldr	r3, [pc, #100]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2de:	4c1a      	ldr	r4, [pc, #104]	; (800f348 <ComputeRxWindowParameters+0xc4>)
 800f2e0:	9400      	str	r4, [sp, #0]
 800f2e2:	f004 fa97 	bl	8013814 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f2e6:	4b16      	ldr	r3, [pc, #88]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ea:	4a18      	ldr	r2, [pc, #96]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f2ec:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f2f0:	4413      	add	r3, r2
 800f2f2:	4a16      	ldr	r2, [pc, #88]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f2f4:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f2f8:	4b11      	ldr	r3, [pc, #68]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2fc:	4a13      	ldr	r2, [pc, #76]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f2fe:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f302:	4413      	add	r3, r2
 800f304:	4a11      	ldr	r2, [pc, #68]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f306:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f30a:	4b0d      	ldr	r3, [pc, #52]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f30c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f310:	2b00      	cmp	r3, #0
 800f312:	d111      	bne.n	800f338 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f314:	4b0a      	ldr	r3, [pc, #40]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f318:	4a0c      	ldr	r2, [pc, #48]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f31a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f31e:	4413      	add	r3, r2
 800f320:	4a0a      	ldr	r2, [pc, #40]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f322:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f326:	4b06      	ldr	r3, [pc, #24]	; (800f340 <ComputeRxWindowParameters+0xbc>)
 800f328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f32a:	4a08      	ldr	r2, [pc, #32]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f32c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f330:	4413      	add	r3, r2
 800f332:	4a06      	ldr	r2, [pc, #24]	; (800f34c <ComputeRxWindowParameters+0xc8>)
 800f334:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800f338:	bf00      	nop
 800f33a:	3704      	adds	r7, #4
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd90      	pop	{r4, r7, pc}
 800f340:	2000095c 	.word	0x2000095c
 800f344:	2000080c 	.word	0x2000080c
 800f348:	20000820 	.word	0x20000820
 800f34c:	20000454 	.word	0x20000454

0800f350 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f35a:	4b13      	ldr	r3, [pc, #76]	; (800f3a8 <VerifyTxFrame+0x58>)
 800f35c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01b      	beq.n	800f39c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f364:	1d3b      	adds	r3, r7, #4
 800f366:	4618      	mov	r0, r3
 800f368:	f002 fd20 	bl	8011dac <LoRaMacCommandsGetSizeSerializedCmds>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f372:	2313      	movs	r3, #19
 800f374:	e013      	b.n	800f39e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f376:	4b0d      	ldr	r3, [pc, #52]	; (800f3ac <VerifyTxFrame+0x5c>)
 800f378:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f37c:	4a0a      	ldr	r2, [pc, #40]	; (800f3a8 <VerifyTxFrame+0x58>)
 800f37e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	b2d2      	uxtb	r2, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff f956 	bl	800e638 <ValidatePayloadLength>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f083 0301 	eor.w	r3, r3, #1
 800f392:	b2db      	uxtb	r3, r3
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f398:	2308      	movs	r3, #8
 800f39a:	e000      	b.n	800f39e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	2000095c 	.word	0x2000095c
 800f3ac:	20000454 	.word	0x20000454

0800f3b0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f3b6:	4b18      	ldr	r3, [pc, #96]	; (800f418 <SerializeTxFrame+0x68>)
 800f3b8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <SerializeTxFrame+0x16>
 800f3c0:	2b04      	cmp	r3, #4
 800f3c2:	d011      	beq.n	800f3e8 <SerializeTxFrame+0x38>
 800f3c4:	e021      	b.n	800f40a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f3c6:	4815      	ldr	r0, [pc, #84]	; (800f41c <SerializeTxFrame+0x6c>)
 800f3c8:	f004 f823 	bl	8013412 <LoRaMacSerializerJoinRequest>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f3d0:	79fb      	ldrb	r3, [r7, #7]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d001      	beq.n	800f3da <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f3d6:	2311      	movs	r3, #17
 800f3d8:	e01a      	b.n	800f410 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f3da:	4b0f      	ldr	r3, [pc, #60]	; (800f418 <SerializeTxFrame+0x68>)
 800f3dc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	4b0d      	ldr	r3, [pc, #52]	; (800f418 <SerializeTxFrame+0x68>)
 800f3e4:	801a      	strh	r2, [r3, #0]
            break;
 800f3e6:	e012      	b.n	800f40e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f3e8:	480c      	ldr	r0, [pc, #48]	; (800f41c <SerializeTxFrame+0x6c>)
 800f3ea:	f004 f894 	bl	8013516 <LoRaMacSerializerData>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f3f2:	79fb      	ldrb	r3, [r7, #7]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f3f8:	2311      	movs	r3, #17
 800f3fa:	e009      	b.n	800f410 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f3fc:	4b06      	ldr	r3, [pc, #24]	; (800f418 <SerializeTxFrame+0x68>)
 800f3fe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f402:	b29a      	uxth	r2, r3
 800f404:	4b04      	ldr	r3, [pc, #16]	; (800f418 <SerializeTxFrame+0x68>)
 800f406:	801a      	strh	r2, [r3, #0]
            break;
 800f408:	e001      	b.n	800f40e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f40a:	2303      	movs	r3, #3
 800f40c:	e000      	b.n	800f410 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	20000454 	.word	0x20000454
 800f41c:	2000055c 	.word	0x2000055c

0800f420 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b090      	sub	sp, #64	; 0x40
 800f424:	af02      	add	r7, sp, #8
 800f426:	4603      	mov	r3, r0
 800f428:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f42a:	2303      	movs	r3, #3
 800f42c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800f430:	f7ff ff06 	bl	800f240 <CheckForClassBCollision>
 800f434:	4603      	mov	r3, r0
 800f436:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f43a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d002      	beq.n	800f448 <ScheduleTx+0x28>
    {
        return status;
 800f442:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f446:	e08f      	b.n	800f568 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800f448:	f000 f8fa 	bl	800f640 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f44c:	f7ff ffb0 	bl	800f3b0 <SerializeTxFrame>
 800f450:	4603      	mov	r3, r0
 800f452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <ScheduleTx+0x44>
    {
        return status;
 800f45e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f462:	e081      	b.n	800f568 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f464:	4b42      	ldr	r3, [pc, #264]	; (800f570 <ScheduleTx+0x150>)
 800f466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f468:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f46a:	4b41      	ldr	r3, [pc, #260]	; (800f570 <ScheduleTx+0x150>)
 800f46c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f470:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f472:	4b3f      	ldr	r3, [pc, #252]	; (800f570 <ScheduleTx+0x150>)
 800f474:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800f478:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f47a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f47e:	4618      	mov	r0, r3
 800f480:	f009 ff76 	bl	8019370 <SysTimeGetMcuTime>
 800f484:	4638      	mov	r0, r7
 800f486:	4b3a      	ldr	r3, [pc, #232]	; (800f570 <ScheduleTx+0x150>)
 800f488:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800f48c:	9200      	str	r2, [sp, #0]
 800f48e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800f492:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f496:	ca06      	ldmia	r2, {r1, r2}
 800f498:	f009 fecb 	bl	8019232 <SysTimeSub>
 800f49c:	f107 0320 	add.w	r3, r7, #32
 800f4a0:	463a      	mov	r2, r7
 800f4a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4a6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f4aa:	4b31      	ldr	r3, [pc, #196]	; (800f570 <ScheduleTx+0x150>)
 800f4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ae:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f4ba:	4b2e      	ldr	r3, [pc, #184]	; (800f574 <ScheduleTx+0x154>)
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f4c0:	4b2b      	ldr	r3, [pc, #172]	; (800f570 <ScheduleTx+0x150>)
 800f4c2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d104      	bne.n	800f4d4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f4d4:	4b26      	ldr	r3, [pc, #152]	; (800f570 <ScheduleTx+0x150>)
 800f4d6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f4da:	f107 0114 	add.w	r1, r7, #20
 800f4de:	4b26      	ldr	r3, [pc, #152]	; (800f578 <ScheduleTx+0x158>)
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	4b26      	ldr	r3, [pc, #152]	; (800f57c <ScheduleTx+0x15c>)
 800f4e4:	4a26      	ldr	r2, [pc, #152]	; (800f580 <ScheduleTx+0x160>)
 800f4e6:	f004 fa5b 	bl	80139a0 <RegionNextChannel>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800f4f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d022      	beq.n	800f53e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800f4f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4fc:	2b0b      	cmp	r3, #11
 800f4fe:	d11b      	bne.n	800f538 <ScheduleTx+0x118>
 800f500:	7bfb      	ldrb	r3, [r7, #15]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d018      	beq.n	800f538 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f506:	4b1b      	ldr	r3, [pc, #108]	; (800f574 <ScheduleTx+0x154>)
 800f508:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d011      	beq.n	800f534 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f510:	4b18      	ldr	r3, [pc, #96]	; (800f574 <ScheduleTx+0x154>)
 800f512:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f516:	f043 0320 	orr.w	r3, r3, #32
 800f51a:	4a16      	ldr	r2, [pc, #88]	; (800f574 <ScheduleTx+0x154>)
 800f51c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f520:	4b14      	ldr	r3, [pc, #80]	; (800f574 <ScheduleTx+0x154>)
 800f522:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800f526:	4619      	mov	r1, r3
 800f528:	4816      	ldr	r0, [pc, #88]	; (800f584 <ScheduleTx+0x164>)
 800f52a:	f00a fcad 	bl	8019e88 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800f52e:	4815      	ldr	r0, [pc, #84]	; (800f584 <ScheduleTx+0x164>)
 800f530:	f00a fbcc 	bl	8019ccc <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	e017      	b.n	800f568 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f53c:	e014      	b.n	800f568 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800f53e:	f7ff fea1 	bl	800f284 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800f542:	f7ff ff05 	bl	800f350 <VerifyTxFrame>
 800f546:	4603      	mov	r3, r0
 800f548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800f54c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <ScheduleTx+0x13a>
    {
        return status;
 800f554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f558:	e006      	b.n	800f568 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800f55a:	4b06      	ldr	r3, [pc, #24]	; (800f574 <ScheduleTx+0x154>)
 800f55c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f560:	4618      	mov	r0, r3
 800f562:	f000 fb1d 	bl	800fba0 <SendFrameOnChannel>
 800f566:	4603      	mov	r3, r0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3738      	adds	r7, #56	; 0x38
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	2000095c 	.word	0x2000095c
 800f574:	20000454 	.word	0x20000454
 800f578:	2000098c 	.word	0x2000098c
 800f57c:	200008d8 	.word	0x200008d8
 800f580:	20000869 	.word	0x20000869
 800f584:	200007bc 	.word	0x200007bc

0800f588 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	460a      	mov	r2, r1
 800f592:	71fb      	strb	r3, [r7, #7]
 800f594:	4613      	mov	r3, r2
 800f596:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f598:	2313      	movs	r3, #19
 800f59a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800f5a0:	4b25      	ldr	r3, [pc, #148]	; (800f638 <SecureFrame+0xb0>)
 800f5a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d002      	beq.n	800f5b0 <SecureFrame+0x28>
 800f5aa:	2b04      	cmp	r3, #4
 800f5ac:	d011      	beq.n	800f5d2 <SecureFrame+0x4a>
 800f5ae:	e03b      	b.n	800f628 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f5b0:	4822      	ldr	r0, [pc, #136]	; (800f63c <SecureFrame+0xb4>)
 800f5b2:	f003 faf7 	bl	8012ba4 <LoRaMacCryptoPrepareJoinRequest>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f5ba:	7bfb      	ldrb	r3, [r7, #15]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f5c0:	2311      	movs	r3, #17
 800f5c2:	e034      	b.n	800f62e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f5c4:	4b1c      	ldr	r3, [pc, #112]	; (800f638 <SecureFrame+0xb0>)
 800f5c6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	4b1a      	ldr	r3, [pc, #104]	; (800f638 <SecureFrame+0xb0>)
 800f5ce:	801a      	strh	r2, [r3, #0]
            break;
 800f5d0:	e02c      	b.n	800f62c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f5d2:	f107 0308 	add.w	r3, r7, #8
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f003 fa0a 	bl	80129f0 <LoRaMacCryptoGetFCntUp>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d001      	beq.n	800f5e6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f5e2:	2312      	movs	r3, #18
 800f5e4:	e023      	b.n	800f62e <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800f5e6:	4b14      	ldr	r3, [pc, #80]	; (800f638 <SecureFrame+0xb0>)
 800f5e8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d104      	bne.n	800f5fa <SecureFrame+0x72>
 800f5f0:	4b11      	ldr	r3, [pc, #68]	; (800f638 <SecureFrame+0xb0>)
 800f5f2:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d902      	bls.n	800f600 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f600:	68b8      	ldr	r0, [r7, #8]
 800f602:	79ba      	ldrb	r2, [r7, #6]
 800f604:	79f9      	ldrb	r1, [r7, #7]
 800f606:	4b0d      	ldr	r3, [pc, #52]	; (800f63c <SecureFrame+0xb4>)
 800f608:	f003 fbe4 	bl	8012dd4 <LoRaMacCryptoSecureMessage>
 800f60c:	4603      	mov	r3, r0
 800f60e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f610:	7bfb      	ldrb	r3, [r7, #15]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f616:	2311      	movs	r3, #17
 800f618:	e009      	b.n	800f62e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f61a:	4b07      	ldr	r3, [pc, #28]	; (800f638 <SecureFrame+0xb0>)
 800f61c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800f620:	b29a      	uxth	r2, r3
 800f622:	4b05      	ldr	r3, [pc, #20]	; (800f638 <SecureFrame+0xb0>)
 800f624:	801a      	strh	r2, [r3, #0]
            break;
 800f626:	e001      	b.n	800f62c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f628:	2303      	movs	r3, #3
 800f62a:	e000      	b.n	800f62e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	20000454 	.word	0x20000454
 800f63c:	2000055c 	.word	0x2000055c

0800f640 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800f640:	b480      	push	{r7}
 800f642:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800f644:	4b09      	ldr	r3, [pc, #36]	; (800f66c <CalculateBackOff+0x2c>)
 800f646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10a      	bne.n	800f662 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800f64c:	4b07      	ldr	r3, [pc, #28]	; (800f66c <CalculateBackOff+0x2c>)
 800f64e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800f652:	3b01      	subs	r3, #1
 800f654:	4a06      	ldr	r2, [pc, #24]	; (800f670 <CalculateBackOff+0x30>)
 800f656:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800f65a:	fb02 f303 	mul.w	r3, r2, r3
 800f65e:	4a03      	ldr	r2, [pc, #12]	; (800f66c <CalculateBackOff+0x2c>)
 800f660:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800f662:	bf00      	nop
 800f664:	46bd      	mov	sp, r7
 800f666:	bc80      	pop	{r7}
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	2000095c 	.word	0x2000095c
 800f670:	20000454 	.word	0x20000454

0800f674 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	4603      	mov	r3, r0
 800f67c:	7139      	strb	r1, [r7, #4]
 800f67e:	71fb      	strb	r3, [r7, #7]
 800f680:	4613      	mov	r3, r2
 800f682:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d002      	beq.n	800f690 <RemoveMacCommands+0x1c>
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d10d      	bne.n	800f6ac <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800f690:	79bb      	ldrb	r3, [r7, #6]
 800f692:	2b01      	cmp	r3, #1
 800f694:	d108      	bne.n	800f6a8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800f696:	793b      	ldrb	r3, [r7, #4]
 800f698:	f003 0320 	and.w	r3, r3, #32
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d004      	beq.n	800f6ac <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800f6a2:	f002 fb61 	bl	8011d68 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800f6a6:	e001      	b.n	800f6ac <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800f6a8:	f002 fb5e 	bl	8011d68 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800f6ac:	bf00      	nop
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800f6b4:	b5b0      	push	{r4, r5, r7, lr}
 800f6b6:	b08e      	sub	sp, #56	; 0x38
 800f6b8:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f6ba:	4b68      	ldr	r3, [pc, #416]	; (800f85c <ResetMacParameters+0x1a8>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f6c2:	4b66      	ldr	r3, [pc, #408]	; (800f85c <ResetMacParameters+0x1a8>)
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800f6c8:	4b65      	ldr	r3, [pc, #404]	; (800f860 <ResetMacParameters+0x1ac>)
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800f6d0:	4b63      	ldr	r3, [pc, #396]	; (800f860 <ResetMacParameters+0x1ac>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f6d8:	4b61      	ldr	r3, [pc, #388]	; (800f860 <ResetMacParameters+0x1ac>)
 800f6da:	2201      	movs	r2, #1
 800f6dc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800f6e0:	4b5f      	ldr	r3, [pc, #380]	; (800f860 <ResetMacParameters+0x1ac>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800f6e8:	4b5c      	ldr	r3, [pc, #368]	; (800f85c <ResetMacParameters+0x1a8>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f6f0:	4b5a      	ldr	r3, [pc, #360]	; (800f85c <ResetMacParameters+0x1a8>)
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f6f8:	4b58      	ldr	r3, [pc, #352]	; (800f85c <ResetMacParameters+0x1a8>)
 800f6fa:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800f6fe:	4b57      	ldr	r3, [pc, #348]	; (800f85c <ResetMacParameters+0x1a8>)
 800f700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f704:	4b55      	ldr	r3, [pc, #340]	; (800f85c <ResetMacParameters+0x1a8>)
 800f706:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800f70a:	4b54      	ldr	r3, [pc, #336]	; (800f85c <ResetMacParameters+0x1a8>)
 800f70c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f710:	4b52      	ldr	r3, [pc, #328]	; (800f85c <ResetMacParameters+0x1a8>)
 800f712:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800f716:	4b51      	ldr	r3, [pc, #324]	; (800f85c <ResetMacParameters+0x1a8>)
 800f718:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f71c:	4b4f      	ldr	r3, [pc, #316]	; (800f85c <ResetMacParameters+0x1a8>)
 800f71e:	4a4f      	ldr	r2, [pc, #316]	; (800f85c <ResetMacParameters+0x1a8>)
 800f720:	3364      	adds	r3, #100	; 0x64
 800f722:	32a4      	adds	r2, #164	; 0xa4
 800f724:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f728:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f72c:	4b4b      	ldr	r3, [pc, #300]	; (800f85c <ResetMacParameters+0x1a8>)
 800f72e:	4a4b      	ldr	r2, [pc, #300]	; (800f85c <ResetMacParameters+0x1a8>)
 800f730:	336c      	adds	r3, #108	; 0x6c
 800f732:	32ac      	adds	r2, #172	; 0xac
 800f734:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f738:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f73c:	4b47      	ldr	r3, [pc, #284]	; (800f85c <ResetMacParameters+0x1a8>)
 800f73e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800f742:	4b46      	ldr	r3, [pc, #280]	; (800f85c <ResetMacParameters+0x1a8>)
 800f744:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f748:	4b44      	ldr	r3, [pc, #272]	; (800f85c <ResetMacParameters+0x1a8>)
 800f74a:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800f74e:	4b43      	ldr	r3, [pc, #268]	; (800f85c <ResetMacParameters+0x1a8>)
 800f750:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f754:	4b41      	ldr	r3, [pc, #260]	; (800f85c <ResetMacParameters+0x1a8>)
 800f756:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f75a:	4a40      	ldr	r2, [pc, #256]	; (800f85c <ResetMacParameters+0x1a8>)
 800f75c:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f75e:	4b3f      	ldr	r3, [pc, #252]	; (800f85c <ResetMacParameters+0x1a8>)
 800f760:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f764:	4a3d      	ldr	r2, [pc, #244]	; (800f85c <ResetMacParameters+0x1a8>)
 800f766:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800f768:	4b3d      	ldr	r3, [pc, #244]	; (800f860 <ResetMacParameters+0x1ac>)
 800f76a:	2200      	movs	r2, #0
 800f76c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800f770:	4b3a      	ldr	r3, [pc, #232]	; (800f85c <ResetMacParameters+0x1a8>)
 800f772:	2200      	movs	r2, #0
 800f774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f778:	2301      	movs	r3, #1
 800f77a:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f77c:	4b39      	ldr	r3, [pc, #228]	; (800f864 <ResetMacParameters+0x1b0>)
 800f77e:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f780:	4b39      	ldr	r3, [pc, #228]	; (800f868 <ResetMacParameters+0x1b4>)
 800f782:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f784:	4b35      	ldr	r3, [pc, #212]	; (800f85c <ResetMacParameters+0x1a8>)
 800f786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f78a:	1d3a      	adds	r2, r7, #4
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f003 fff2 	bl	8013778 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800f794:	4b32      	ldr	r3, [pc, #200]	; (800f860 <ResetMacParameters+0x1ac>)
 800f796:	2200      	movs	r2, #0
 800f798:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f79c:	4b30      	ldr	r3, [pc, #192]	; (800f860 <ResetMacParameters+0x1ac>)
 800f79e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f7a2:	4b2f      	ldr	r3, [pc, #188]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7a4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f7a8:	4b2c      	ldr	r3, [pc, #176]	; (800f85c <ResetMacParameters+0x1a8>)
 800f7aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7ac:	4a2c      	ldr	r2, [pc, #176]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7ae:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f7b2:	4b2a      	ldr	r3, [pc, #168]	; (800f85c <ResetMacParameters+0x1a8>)
 800f7b4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f7b8:	4b29      	ldr	r3, [pc, #164]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7ba:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f7be:	4b27      	ldr	r3, [pc, #156]	; (800f85c <ResetMacParameters+0x1a8>)
 800f7c0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f7c4:	4b26      	ldr	r3, [pc, #152]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7c6:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f7ca:	4b25      	ldr	r3, [pc, #148]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f7d2:	4b23      	ldr	r3, [pc, #140]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f7da:	4a21      	ldr	r2, [pc, #132]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7dc:	4b20      	ldr	r3, [pc, #128]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7de:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800f7e2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800f7e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7ea:	682b      	ldr	r3, [r5, #0]
 800f7ec:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f7ee:	4b1c      	ldr	r3, [pc, #112]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f7f6:	4b1a      	ldr	r3, [pc, #104]	; (800f860 <ResetMacParameters+0x1ac>)
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f7fe:	2300      	movs	r3, #0
 800f800:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800f802:	2300      	movs	r3, #0
 800f804:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800f806:	4b16      	ldr	r3, [pc, #88]	; (800f860 <ResetMacParameters+0x1ac>)
 800f808:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d009      	beq.n	800f824 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f810:	4b13      	ldr	r3, [pc, #76]	; (800f860 <ResetMacParameters+0x1ac>)
 800f812:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f81a:	4b11      	ldr	r3, [pc, #68]	; (800f860 <ResetMacParameters+0x1ac>)
 800f81c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f824:	4b11      	ldr	r3, [pc, #68]	; (800f86c <ResetMacParameters+0x1b8>)
 800f826:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f828:	4b11      	ldr	r3, [pc, #68]	; (800f870 <ResetMacParameters+0x1bc>)
 800f82a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f82c:	4b11      	ldr	r3, [pc, #68]	; (800f874 <ResetMacParameters+0x1c0>)
 800f82e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f830:	4b11      	ldr	r3, [pc, #68]	; (800f878 <ResetMacParameters+0x1c4>)
 800f832:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f834:	4b11      	ldr	r3, [pc, #68]	; (800f87c <ResetMacParameters+0x1c8>)
 800f836:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f838:	4b11      	ldr	r3, [pc, #68]	; (800f880 <ResetMacParameters+0x1cc>)
 800f83a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f83c:	4b11      	ldr	r3, [pc, #68]	; (800f884 <ResetMacParameters+0x1d0>)
 800f83e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f840:	4b11      	ldr	r3, [pc, #68]	; (800f888 <ResetMacParameters+0x1d4>)
 800f842:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f844:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f848:	f107 0310 	add.w	r3, r7, #16
 800f84c:	4a0f      	ldr	r2, [pc, #60]	; (800f88c <ResetMacParameters+0x1d8>)
 800f84e:	4618      	mov	r0, r3
 800f850:	f001 ffec 	bl	801182c <LoRaMacClassBInit>
}
 800f854:	bf00      	nop
 800f856:	3738      	adds	r7, #56	; 0x38
 800f858:	46bd      	mov	sp, r7
 800f85a:	bdb0      	pop	{r4, r5, r7, pc}
 800f85c:	2000095c 	.word	0x2000095c
 800f860:	20000454 	.word	0x20000454
 800f864:	20000b34 	.word	0x20000b34
 800f868:	20000bc8 	.word	0x20000bc8
 800f86c:	200008b4 	.word	0x200008b4
 800f870:	20000870 	.word	0x20000870
 800f874:	200008a0 	.word	0x200008a0
 800f878:	200008d5 	.word	0x200008d5
 800f87c:	20000a28 	.word	0x20000a28
 800f880:	2000099c 	.word	0x2000099c
 800f884:	200009a0 	.word	0x200009a0
 800f888:	20000a2c 	.word	0x20000a2c
 800f88c:	20000c90 	.word	0x20000c90

0800f890 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f00a fa84 	bl	8019da8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f8a0:	4b0e      	ldr	r3, [pc, #56]	; (800f8dc <RxWindowSetup+0x4c>)
 800f8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f8a6:	4b0e      	ldr	r3, [pc, #56]	; (800f8e0 <RxWindowSetup+0x50>)
 800f8a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8ac:	4a0d      	ldr	r2, [pc, #52]	; (800f8e4 <RxWindowSetup+0x54>)
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f003 ffc9 	bl	8013848 <RegionRxConfig>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00a      	beq.n	800f8d2 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f8bc:	4b07      	ldr	r3, [pc, #28]	; (800f8dc <RxWindowSetup+0x4c>)
 800f8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c0:	4a07      	ldr	r2, [pc, #28]	; (800f8e0 <RxWindowSetup+0x50>)
 800f8c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f8c4:	4610      	mov	r0, r2
 800f8c6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	7cda      	ldrb	r2, [r3, #19]
 800f8cc:	4b06      	ldr	r3, [pc, #24]	; (800f8e8 <RxWindowSetup+0x58>)
 800f8ce:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800f8d2:	bf00      	nop
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	0801b528 	.word	0x0801b528
 800f8e0:	2000095c 	.word	0x2000095c
 800f8e4:	20000874 	.word	0x20000874
 800f8e8:	20000454 	.word	0x20000454

0800f8ec <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f8ec:	b590      	push	{r4, r7, lr}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8f2:	4b18      	ldr	r3, [pc, #96]	; (800f954 <OpenContinuousRxCWindow+0x68>)
 800f8f4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f8f8:	4b16      	ldr	r3, [pc, #88]	; (800f954 <OpenContinuousRxCWindow+0x68>)
 800f8fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8fe:	b259      	sxtb	r1, r3
 800f900:	4b14      	ldr	r3, [pc, #80]	; (800f954 <OpenContinuousRxCWindow+0x68>)
 800f902:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f906:	4b13      	ldr	r3, [pc, #76]	; (800f954 <OpenContinuousRxCWindow+0x68>)
 800f908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f90a:	4c13      	ldr	r4, [pc, #76]	; (800f958 <OpenContinuousRxCWindow+0x6c>)
 800f90c:	9400      	str	r4, [sp, #0]
 800f90e:	f003 ff81 	bl	8013814 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f912:	4b12      	ldr	r3, [pc, #72]	; (800f95c <OpenContinuousRxCWindow+0x70>)
 800f914:	2202      	movs	r2, #2
 800f916:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f91a:	4b10      	ldr	r3, [pc, #64]	; (800f95c <OpenContinuousRxCWindow+0x70>)
 800f91c:	2201      	movs	r2, #1
 800f91e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f922:	4b0c      	ldr	r3, [pc, #48]	; (800f954 <OpenContinuousRxCWindow+0x68>)
 800f924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f928:	4a0d      	ldr	r2, [pc, #52]	; (800f960 <OpenContinuousRxCWindow+0x74>)
 800f92a:	490b      	ldr	r1, [pc, #44]	; (800f958 <OpenContinuousRxCWindow+0x6c>)
 800f92c:	4618      	mov	r0, r3
 800f92e:	f003 ff8b 	bl	8013848 <RegionRxConfig>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d009      	beq.n	800f94c <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <OpenContinuousRxCWindow+0x78>)
 800f93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f93c:	2000      	movs	r0, #0
 800f93e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f940:	4b06      	ldr	r3, [pc, #24]	; (800f95c <OpenContinuousRxCWindow+0x70>)
 800f942:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800f946:	4b05      	ldr	r3, [pc, #20]	; (800f95c <OpenContinuousRxCWindow+0x70>)
 800f948:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800f94c:	bf00      	nop
 800f94e:	3704      	adds	r7, #4
 800f950:	46bd      	mov	sp, r7
 800f952:	bd90      	pop	{r4, r7, pc}
 800f954:	2000095c 	.word	0x2000095c
 800f958:	20000834 	.word	0x20000834
 800f95c:	20000454 	.word	0x20000454
 800f960:	20000874 	.word	0x20000874
 800f964:	0801b528 	.word	0x0801b528

0800f968 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	603b      	str	r3, [r7, #0]
 800f974:	4613      	mov	r3, r2
 800f976:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f978:	4b82      	ldr	r3, [pc, #520]	; (800fb84 <PrepareFrame+0x21c>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f97e:	4b81      	ldr	r3, [pc, #516]	; (800fb84 <PrepareFrame+0x21c>)
 800f980:	2200      	movs	r2, #0
 800f982:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800f986:	2300      	movs	r3, #0
 800f988:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f98a:	2300      	movs	r3, #0
 800f98c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f98e:	2300      	movs	r3, #0
 800f990:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d101      	bne.n	800f99c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f99c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f99e:	461a      	mov	r2, r3
 800f9a0:	6839      	ldr	r1, [r7, #0]
 800f9a2:	4879      	ldr	r0, [pc, #484]	; (800fb88 <PrepareFrame+0x220>)
 800f9a4:	f006 f9c9 	bl	8015d3a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f9a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f9aa:	b2da      	uxtb	r2, r3
 800f9ac:	4b75      	ldr	r3, [pc, #468]	; (800fb84 <PrepareFrame+0x21c>)
 800f9ae:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	781a      	ldrb	r2, [r3, #0]
 800f9b6:	4b73      	ldr	r3, [pc, #460]	; (800fb84 <PrepareFrame+0x21c>)
 800f9b8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b07      	cmp	r3, #7
 800f9c6:	f000 80b9 	beq.w	800fb3c <PrepareFrame+0x1d4>
 800f9ca:	2b07      	cmp	r3, #7
 800f9cc:	f300 80d0 	bgt.w	800fb70 <PrepareFrame+0x208>
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d006      	beq.n	800f9e2 <PrepareFrame+0x7a>
 800f9d4:	2b04      	cmp	r3, #4
 800f9d6:	f040 80cb 	bne.w	800fb70 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f9da:	4b6a      	ldr	r3, [pc, #424]	; (800fb84 <PrepareFrame+0x21c>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f9e2:	4b68      	ldr	r3, [pc, #416]	; (800fb84 <PrepareFrame+0x21c>)
 800f9e4:	2204      	movs	r2, #4
 800f9e6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f9ea:	4b66      	ldr	r3, [pc, #408]	; (800fb84 <PrepareFrame+0x21c>)
 800f9ec:	4a67      	ldr	r2, [pc, #412]	; (800fb8c <PrepareFrame+0x224>)
 800f9ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f9f2:	4b64      	ldr	r3, [pc, #400]	; (800fb84 <PrepareFrame+0x21c>)
 800f9f4:	22ff      	movs	r2, #255	; 0xff
 800f9f6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	781a      	ldrb	r2, [r3, #0]
 800f9fe:	4b61      	ldr	r3, [pc, #388]	; (800fb84 <PrepareFrame+0x21c>)
 800fa00:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800fa04:	4a5f      	ldr	r2, [pc, #380]	; (800fb84 <PrepareFrame+0x21c>)
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800fa0c:	4b60      	ldr	r3, [pc, #384]	; (800fb90 <PrepareFrame+0x228>)
 800fa0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800fa12:	4a5c      	ldr	r2, [pc, #368]	; (800fb84 <PrepareFrame+0x21c>)
 800fa14:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	781a      	ldrb	r2, [r3, #0]
 800fa1c:	4b59      	ldr	r3, [pc, #356]	; (800fb84 <PrepareFrame+0x21c>)
 800fa1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800fa22:	4b58      	ldr	r3, [pc, #352]	; (800fb84 <PrepareFrame+0x21c>)
 800fa24:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800fa28:	4b56      	ldr	r3, [pc, #344]	; (800fb84 <PrepareFrame+0x21c>)
 800fa2a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800fa2e:	4b55      	ldr	r3, [pc, #340]	; (800fb84 <PrepareFrame+0x21c>)
 800fa30:	4a55      	ldr	r2, [pc, #340]	; (800fb88 <PrepareFrame+0x220>)
 800fa32:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fa36:	f107 0318 	add.w	r3, r7, #24
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f002 ffd8 	bl	80129f0 <LoRaMacCryptoGetFCntUp>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d001      	beq.n	800fa4a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fa46:	2312      	movs	r3, #18
 800fa48:	e098      	b.n	800fb7c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	4b4d      	ldr	r3, [pc, #308]	; (800fb84 <PrepareFrame+0x21c>)
 800fa50:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800fa54:	4b4b      	ldr	r3, [pc, #300]	; (800fb84 <PrepareFrame+0x21c>)
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800fa5c:	4b49      	ldr	r3, [pc, #292]	; (800fb84 <PrepareFrame+0x21c>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	4a47      	ldr	r2, [pc, #284]	; (800fb84 <PrepareFrame+0x21c>)
 800fa68:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fa6c:	f107 0314 	add.w	r3, r7, #20
 800fa70:	4618      	mov	r0, r3
 800fa72:	f002 f99b 	bl	8011dac <LoRaMacCommandsGetSizeSerializedCmds>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d001      	beq.n	800fa80 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa7c:	2313      	movs	r3, #19
 800fa7e:	e07d      	b.n	800fb7c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d076      	beq.n	800fb74 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800fa86:	4b42      	ldr	r3, [pc, #264]	; (800fb90 <PrepareFrame+0x228>)
 800fa88:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fe fdab 	bl	800e5e8 <GetMaxAppPayloadWithoutFOptsLength>
 800fa92:	4603      	mov	r3, r0
 800fa94:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fa96:	4b3b      	ldr	r3, [pc, #236]	; (800fb84 <PrepareFrame+0x21c>)
 800fa98:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d01d      	beq.n	800fadc <PrepareFrame+0x174>
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2b0f      	cmp	r3, #15
 800faa4:	d81a      	bhi.n	800fadc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800faa6:	f107 0314 	add.w	r3, r7, #20
 800faaa:	4a3a      	ldr	r2, [pc, #232]	; (800fb94 <PrepareFrame+0x22c>)
 800faac:	4619      	mov	r1, r3
 800faae:	200f      	movs	r0, #15
 800fab0:	f002 f992 	bl	8011dd8 <LoRaMacCommandsSerializeCmds>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d001      	beq.n	800fabe <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800faba:	2313      	movs	r3, #19
 800fabc:	e05e      	b.n	800fb7c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f003 030f 	and.w	r3, r3, #15
 800fac4:	b2d9      	uxtb	r1, r3
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	7813      	ldrb	r3, [r2, #0]
 800faca:	f361 0303 	bfi	r3, r1, #0, #4
 800face:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	781a      	ldrb	r2, [r3, #0]
 800fad4:	4b2b      	ldr	r3, [pc, #172]	; (800fb84 <PrepareFrame+0x21c>)
 800fad6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800fada:	e04b      	b.n	800fb74 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fadc:	4b29      	ldr	r3, [pc, #164]	; (800fb84 <PrepareFrame+0x21c>)
 800fade:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d010      	beq.n	800fb08 <PrepareFrame+0x1a0>
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b0f      	cmp	r3, #15
 800faea:	d90d      	bls.n	800fb08 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800faec:	7ffb      	ldrb	r3, [r7, #31]
 800faee:	f107 0114 	add.w	r1, r7, #20
 800faf2:	4a29      	ldr	r2, [pc, #164]	; (800fb98 <PrepareFrame+0x230>)
 800faf4:	4618      	mov	r0, r3
 800faf6:	f002 f96f 	bl	8011dd8 <LoRaMacCommandsSerializeCmds>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb00:	2313      	movs	r3, #19
 800fb02:	e03b      	b.n	800fb7c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800fb04:	230a      	movs	r3, #10
 800fb06:	e039      	b.n	800fb7c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fb08:	7ffb      	ldrb	r3, [r7, #31]
 800fb0a:	f107 0114 	add.w	r1, r7, #20
 800fb0e:	4a22      	ldr	r2, [pc, #136]	; (800fb98 <PrepareFrame+0x230>)
 800fb10:	4618      	mov	r0, r3
 800fb12:	f002 f961 	bl	8011dd8 <LoRaMacCommandsSerializeCmds>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d001      	beq.n	800fb20 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb1c:	2313      	movs	r3, #19
 800fb1e:	e02d      	b.n	800fb7c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800fb20:	4b18      	ldr	r3, [pc, #96]	; (800fb84 <PrepareFrame+0x21c>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800fb28:	4b16      	ldr	r3, [pc, #88]	; (800fb84 <PrepareFrame+0x21c>)
 800fb2a:	4a1b      	ldr	r2, [pc, #108]	; (800fb98 <PrepareFrame+0x230>)
 800fb2c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	b2da      	uxtb	r2, r3
 800fb34:	4b13      	ldr	r3, [pc, #76]	; (800fb84 <PrepareFrame+0x21c>)
 800fb36:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800fb3a:	e01b      	b.n	800fb74 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d01a      	beq.n	800fb78 <PrepareFrame+0x210>
 800fb42:	4b10      	ldr	r3, [pc, #64]	; (800fb84 <PrepareFrame+0x21c>)
 800fb44:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d015      	beq.n	800fb78 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800fb4c:	4813      	ldr	r0, [pc, #76]	; (800fb9c <PrepareFrame+0x234>)
 800fb4e:	4b0d      	ldr	r3, [pc, #52]	; (800fb84 <PrepareFrame+0x21c>)
 800fb50:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	461a      	mov	r2, r3
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	f006 f8ee 	bl	8015d3a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800fb5e:	4b09      	ldr	r3, [pc, #36]	; (800fb84 <PrepareFrame+0x21c>)
 800fb60:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	3301      	adds	r3, #1
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	4b06      	ldr	r3, [pc, #24]	; (800fb84 <PrepareFrame+0x21c>)
 800fb6c:	801a      	strh	r2, [r3, #0]
            }
            break;
 800fb6e:	e003      	b.n	800fb78 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fb70:	2302      	movs	r3, #2
 800fb72:	e003      	b.n	800fb7c <PrepareFrame+0x214>
            break;
 800fb74:	bf00      	nop
 800fb76:	e000      	b.n	800fb7a <PrepareFrame+0x212>
            break;
 800fb78:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3720      	adds	r7, #32
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	20000454 	.word	0x20000454
 800fb88:	2000058c 	.word	0x2000058c
 800fb8c:	20000456 	.word	0x20000456
 800fb90:	2000095c 	.word	0x2000095c
 800fb94:	2000056c 	.word	0x2000056c
 800fb98:	200008dc 	.word	0x200008dc
 800fb9c:	20000457 	.word	0x20000457

0800fba0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	; 0x28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbb8:	4b47      	ldr	r3, [pc, #284]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fbba:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fbbe:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbc0:	4b45      	ldr	r3, [pc, #276]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fbc2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fbc6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fbc8:	4b43      	ldr	r3, [pc, #268]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fbca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbcc:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fbce:	4b42      	ldr	r3, [pc, #264]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbd2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800fbd4:	4b41      	ldr	r3, [pc, #260]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800fbda:	4b3f      	ldr	r3, [pc, #252]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fbdc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fbe0:	f107 020f 	add.w	r2, r7, #15
 800fbe4:	f107 0110 	add.w	r1, r7, #16
 800fbe8:	4b3d      	ldr	r3, [pc, #244]	; (800fce0 <SendFrameOnChannel+0x140>)
 800fbea:	f003 fe42 	bl	8013872 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbee:	4b3b      	ldr	r3, [pc, #236]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbf6:	4b38      	ldr	r3, [pc, #224]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fbf8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	4b37      	ldr	r3, [pc, #220]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc00:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800fc04:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800fc08:	4b34      	ldr	r3, [pc, #208]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc0a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	4a32      	ldr	r2, [pc, #200]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc12:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fc16:	4b31      	ldr	r3, [pc, #196]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc18:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800fc1c:	4a2f      	ldr	r2, [pc, #188]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc1e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fc22:	4b2e      	ldr	r3, [pc, #184]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc24:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800fc28:	4a2c      	ldr	r2, [pc, #176]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc2a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800fc2e:	f001 fe69 	bl	8011904 <LoRaMacClassBIsBeaconModeActive>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00b      	beq.n	800fc50 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800fc38:	4b28      	ldr	r3, [pc, #160]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc3a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f001 fecb 	bl	80119da <LoRaMacClassBIsUplinkCollision>
 800fc44:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d001      	beq.n	800fc50 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800fc4c:	2310      	movs	r3, #16
 800fc4e:	e03e      	b.n	800fcce <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc50:	4b21      	ldr	r3, [pc, #132]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fc52:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d101      	bne.n	800fc5e <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800fc5a:	f001 fec8 	bl	80119ee <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800fc5e:	f001 fe62 	bl	8011926 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800fc62:	4b1d      	ldr	r3, [pc, #116]	; (800fcd8 <SendFrameOnChannel+0x138>)
 800fc64:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	4a1c      	ldr	r2, [pc, #112]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc6c:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800fc70:	4611      	mov	r1, r2
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff fc88 	bl	800f588 <SecureFrame>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800fc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d002      	beq.n	800fc8c <SendFrameOnChannel+0xec>
    {
        return status;
 800fc86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc8a:	e020      	b.n	800fcce <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fc8c:	4b13      	ldr	r3, [pc, #76]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	4a11      	ldr	r2, [pc, #68]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc98:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800fc9c:	4b0f      	ldr	r3, [pc, #60]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fc9e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800fca2:	f083 0301 	eor.w	r3, r3, #1
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d007      	beq.n	800fcbc <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800fcac:	4b0b      	ldr	r3, [pc, #44]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fcae:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fcb8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800fcbc:	4b09      	ldr	r3, [pc, #36]	; (800fce4 <SendFrameOnChannel+0x144>)
 800fcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcc0:	4a06      	ldr	r2, [pc, #24]	; (800fcdc <SendFrameOnChannel+0x13c>)
 800fcc2:	8812      	ldrh	r2, [r2, #0]
 800fcc4:	b2d2      	uxtb	r2, r2
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	4807      	ldr	r0, [pc, #28]	; (800fce8 <SendFrameOnChannel+0x148>)
 800fcca:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3728      	adds	r7, #40	; 0x28
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	2000095c 	.word	0x2000095c
 800fcdc:	20000454 	.word	0x20000454
 800fce0:	2000086c 	.word	0x2000086c
 800fce4:	0801b528 	.word	0x0801b528
 800fce8:	20000456 	.word	0x20000456

0800fcec <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800fcf6:	4b15      	ldr	r3, [pc, #84]	; (800fd4c <SetTxContinuousWave+0x60>)
 800fcf8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fcfc:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcfe:	4b14      	ldr	r3, [pc, #80]	; (800fd50 <SetTxContinuousWave+0x64>)
 800fd00:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fd04:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fd06:	4b12      	ldr	r3, [pc, #72]	; (800fd50 <SetTxContinuousWave+0x64>)
 800fd08:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fd0c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fd0e:	4b10      	ldr	r3, [pc, #64]	; (800fd50 <SetTxContinuousWave+0x64>)
 800fd10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd12:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fd14:	4b0e      	ldr	r3, [pc, #56]	; (800fd50 <SetTxContinuousWave+0x64>)
 800fd16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fd18:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800fd1a:	88fb      	ldrh	r3, [r7, #6]
 800fd1c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800fd1e:	4b0c      	ldr	r3, [pc, #48]	; (800fd50 <SetTxContinuousWave+0x64>)
 800fd20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd24:	f107 0208 	add.w	r2, r7, #8
 800fd28:	4611      	mov	r1, r2
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f003 fe50 	bl	80139d0 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd30:	4b06      	ldr	r3, [pc, #24]	; (800fd4c <SetTxContinuousWave+0x60>)
 800fd32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fd36:	f043 0302 	orr.w	r3, r3, #2
 800fd3a:	4a04      	ldr	r2, [pc, #16]	; (800fd4c <SetTxContinuousWave+0x60>)
 800fd3c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	20000454 	.word	0x20000454
 800fd50:	2000095c 	.word	0x2000095c

0800fd54 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	6039      	str	r1, [r7, #0]
 800fd5e:	80fb      	strh	r3, [r7, #6]
 800fd60:	4613      	mov	r3, r2
 800fd62:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800fd64:	4b09      	ldr	r3, [pc, #36]	; (800fd8c <SetTxContinuousWave1+0x38>)
 800fd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd68:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800fd6c:	88fa      	ldrh	r2, [r7, #6]
 800fd6e:	6838      	ldr	r0, [r7, #0]
 800fd70:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd72:	4b07      	ldr	r3, [pc, #28]	; (800fd90 <SetTxContinuousWave1+0x3c>)
 800fd74:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fd78:	f043 0302 	orr.w	r3, r3, #2
 800fd7c:	4a04      	ldr	r2, [pc, #16]	; (800fd90 <SetTxContinuousWave1+0x3c>)
 800fd7e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3708      	adds	r7, #8
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	0801b528 	.word	0x0801b528
 800fd90:	20000454 	.word	0x20000454

0800fd94 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 800fd94:	b480      	push	{r7}
 800fd96:	af00      	add	r7, sp, #0
    return &Nvm;
 800fd98:	4b02      	ldr	r3, [pc, #8]	; (800fda4 <GetNvmData+0x10>)
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bc80      	pop	{r7}
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	2000095c 	.word	0x2000095c

0800fda8 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d101      	bne.n	800fdbe <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	e09a      	b.n	800fef4 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800fdbe:	4b4f      	ldr	r3, [pc, #316]	; (800fefc <RestoreNvmData+0x154>)
 800fdc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d001      	beq.n	800fdcc <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e093      	b.n	800fef4 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2124      	movs	r1, #36	; 0x24
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f006 f807 	bl	8015de4 <Crc32>
 800fdd6:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fddc:	68fa      	ldr	r2, [r7, #12]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d105      	bne.n	800fdee <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2228      	movs	r2, #40	; 0x28
 800fde6:	4619      	mov	r1, r3
 800fde8:	4845      	ldr	r0, [pc, #276]	; (800ff00 <RestoreNvmData+0x158>)
 800fdea:	f005 ffa6 	bl	8015d3a <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	3328      	adds	r3, #40	; 0x28
 800fdf2:	2114      	movs	r1, #20
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f005 fff5 	bl	8015de4 <Crc32>
 800fdfa:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d106      	bne.n	800fe14 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	3328      	adds	r3, #40	; 0x28
 800fe0a:	2218      	movs	r2, #24
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	483d      	ldr	r0, [pc, #244]	; (800ff04 <RestoreNvmData+0x15c>)
 800fe10:	f005 ff93 	bl	8015d3a <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	3340      	adds	r3, #64	; 0x40
 800fe18:	21d4      	movs	r1, #212	; 0xd4
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f005 ffe2 	bl	8015de4 <Crc32>
 800fe20:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800fe28:	68fa      	ldr	r2, [r7, #12]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d11f      	bne.n	800fe6e <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3340      	adds	r3, #64	; 0x40
 800fe32:	22d8      	movs	r2, #216	; 0xd8
 800fe34:	4619      	mov	r1, r3
 800fe36:	4834      	ldr	r0, [pc, #208]	; (800ff08 <RestoreNvmData+0x160>)
 800fe38:	f005 ff7f 	bl	8015d3a <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fe3c:	4b2f      	ldr	r3, [pc, #188]	; (800fefc <RestoreNvmData+0x154>)
 800fe3e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fe42:	4b2e      	ldr	r3, [pc, #184]	; (800fefc <RestoreNvmData+0x154>)
 800fe44:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fe48:	4b2d      	ldr	r3, [pc, #180]	; (800ff00 <RestoreNvmData+0x158>)
 800fe4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe4c:	4a2b      	ldr	r2, [pc, #172]	; (800fefc <RestoreNvmData+0x154>)
 800fe4e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe52:	4b2b      	ldr	r3, [pc, #172]	; (800ff00 <RestoreNvmData+0x158>)
 800fe54:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fe58:	4b28      	ldr	r3, [pc, #160]	; (800fefc <RestoreNvmData+0x154>)
 800fe5a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe5e:	4b27      	ldr	r3, [pc, #156]	; (800fefc <RestoreNvmData+0x154>)
 800fe60:	2201      	movs	r2, #1
 800fe62:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe66:	4b25      	ldr	r3, [pc, #148]	; (800fefc <RestoreNvmData+0x154>)
 800fe68:	2202      	movs	r2, #2
 800fe6a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fe74:	21bc      	movs	r1, #188	; 0xbc
 800fe76:	4618      	mov	r0, r3
 800fe78:	f005 ffb4 	bl	8015de4 <Crc32>
 800fe7c:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d107      	bne.n	800fe9a <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800fe90:	22c0      	movs	r2, #192	; 0xc0
 800fe92:	4619      	mov	r1, r3
 800fe94:	481d      	ldr	r0, [pc, #116]	; (800ff0c <RestoreNvmData+0x164>)
 800fe96:	f005 ff50 	bl	8015d3a <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800fea0:	2190      	movs	r1, #144	; 0x90
 800fea2:	4618      	mov	r0, r3
 800fea4:	f005 ff9e 	bl	8015de4 <Crc32>
 800fea8:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d107      	bne.n	800fec6 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800febc:	2294      	movs	r2, #148	; 0x94
 800febe:	4619      	mov	r1, r3
 800fec0:	4813      	ldr	r0, [pc, #76]	; (800ff10 <RestoreNvmData+0x168>)
 800fec2:	f005 ff3a 	bl	8015d3a <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800fecc:	2114      	movs	r1, #20
 800fece:	4618      	mov	r0, r3
 800fed0:	f005 ff88 	bl	8015de4 <Crc32>
 800fed4:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	429a      	cmp	r2, r3
 800fee0:	d107      	bne.n	800fef2 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800fee8:	2218      	movs	r2, #24
 800feea:	4619      	mov	r1, r3
 800feec:	4809      	ldr	r0, [pc, #36]	; (800ff14 <RestoreNvmData+0x16c>)
 800feee:	f005 ff24 	bl	8015d3a <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 800fef2:	2300      	movs	r3, #0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	20000454 	.word	0x20000454
 800ff00:	2000095c 	.word	0x2000095c
 800ff04:	20000984 	.word	0x20000984
 800ff08:	2000099c 	.word	0x2000099c
 800ff0c:	20000a74 	.word	0x20000a74
 800ff10:	20000b34 	.word	0x20000b34
 800ff14:	20000c90 	.word	0x20000c90

0800ff18 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d002      	beq.n	800ff2e <DetermineFrameType+0x16>
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ff2e:	2303      	movs	r3, #3
 800ff30:	e03b      	b.n	800ffaa <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	7b1b      	ldrb	r3, [r3, #12]
 800ff36:	f003 030f 	and.w	r3, r3, #15
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d008      	beq.n	800ff52 <DetermineFrameType+0x3a>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	701a      	strb	r2, [r3, #0]
 800ff50:	e02a      	b.n	800ffa8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d103      	bne.n	800ff64 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	701a      	strb	r2, [r3, #0]
 800ff62:	e021      	b.n	800ffa8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7b1b      	ldrb	r3, [r3, #12]
 800ff68:	f003 030f 	and.w	r3, r3, #15
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d108      	bne.n	800ff84 <DetermineFrameType+0x6c>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d103      	bne.n	800ff84 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	2202      	movs	r2, #2
 800ff80:	701a      	strb	r2, [r3, #0]
 800ff82:	e011      	b.n	800ffa8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	7b1b      	ldrb	r3, [r3, #12]
 800ff88:	f003 030f 	and.w	r3, r3, #15
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d108      	bne.n	800ffa4 <DetermineFrameType+0x8c>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d003      	beq.n	800ffa4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	2203      	movs	r2, #3
 800ffa0:	701a      	strb	r2, [r3, #0]
 800ffa2:	e001      	b.n	800ffa8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800ffa4:	2317      	movs	r3, #23
 800ffa6:	e000      	b.n	800ffaa <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bc80      	pop	{r7}
 800ffb2:	4770      	bx	lr

0800ffb4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800ffb8:	4b12      	ldr	r3, [pc, #72]	; (8010004 <CheckRetransUnconfirmedUplink+0x50>)
 800ffba:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800ffbe:	4b12      	ldr	r3, [pc, #72]	; (8010008 <CheckRetransUnconfirmedUplink+0x54>)
 800ffc0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d301      	bcc.n	800ffcc <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	e016      	b.n	800fffa <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ffcc:	4b0d      	ldr	r3, [pc, #52]	; (8010004 <CheckRetransUnconfirmedUplink+0x50>)
 800ffce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800ffd2:	f003 0302 	and.w	r3, r3, #2
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d00d      	beq.n	800fff8 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ffdc:	4b0a      	ldr	r3, [pc, #40]	; (8010008 <CheckRetransUnconfirmedUplink+0x54>)
 800ffde:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d101      	bne.n	800ffea <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e007      	b.n	800fffa <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ffea:	4b06      	ldr	r3, [pc, #24]	; (8010004 <CheckRetransUnconfirmedUplink+0x50>)
 800ffec:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800fff4:	2301      	movs	r3, #1
 800fff6:	e000      	b.n	800fffa <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bc80      	pop	{r7}
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	20000454 	.word	0x20000454
 8010008:	2000095c 	.word	0x2000095c

0801000c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801000c:	b480      	push	{r7}
 801000e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010010:	4b0e      	ldr	r3, [pc, #56]	; (801004c <CheckRetransConfirmedUplink+0x40>)
 8010012:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8010016:	4b0d      	ldr	r3, [pc, #52]	; (801004c <CheckRetransConfirmedUplink+0x40>)
 8010018:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 801001c:	429a      	cmp	r2, r3
 801001e:	d301      	bcc.n	8010024 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8010020:	2301      	movs	r3, #1
 8010022:	e00f      	b.n	8010044 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010024:	4b09      	ldr	r3, [pc, #36]	; (801004c <CheckRetransConfirmedUplink+0x40>)
 8010026:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801002a:	f003 0302 	and.w	r3, r3, #2
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d006      	beq.n	8010042 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010034:	4b05      	ldr	r3, [pc, #20]	; (801004c <CheckRetransConfirmedUplink+0x40>)
 8010036:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801003a:	2b00      	cmp	r3, #0
 801003c:	d001      	beq.n	8010042 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801003e:	2301      	movs	r3, #1
 8010040:	e000      	b.n	8010044 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	46bd      	mov	sp, r7
 8010048:	bc80      	pop	{r7}
 801004a:	4770      	bx	lr
 801004c:	20000454 	.word	0x20000454

08010050 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8010050:	b480      	push	{r7}
 8010052:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010054:	4b1a      	ldr	r3, [pc, #104]	; (80100c0 <StopRetransmission+0x70>)
 8010056:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801005a:	f003 0302 	and.w	r3, r3, #2
 801005e:	b2db      	uxtb	r3, r3
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010064:	4b16      	ldr	r3, [pc, #88]	; (80100c0 <StopRetransmission+0x70>)
 8010066:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00e      	beq.n	801008c <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801006e:	4b14      	ldr	r3, [pc, #80]	; (80100c0 <StopRetransmission+0x70>)
 8010070:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010074:	2b01      	cmp	r3, #1
 8010076:	d009      	beq.n	801008c <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010078:	4b12      	ldr	r3, [pc, #72]	; (80100c4 <StopRetransmission+0x74>)
 801007a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801007e:	2b00      	cmp	r3, #0
 8010080:	d004      	beq.n	801008c <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8010082:	4b10      	ldr	r3, [pc, #64]	; (80100c4 <StopRetransmission+0x74>)
 8010084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010086:	3301      	adds	r3, #1
 8010088:	4a0e      	ldr	r2, [pc, #56]	; (80100c4 <StopRetransmission+0x74>)
 801008a:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801008c:	4b0c      	ldr	r3, [pc, #48]	; (80100c0 <StopRetransmission+0x70>)
 801008e:	2200      	movs	r2, #0
 8010090:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010094:	4b0a      	ldr	r3, [pc, #40]	; (80100c0 <StopRetransmission+0x70>)
 8010096:	2200      	movs	r2, #0
 8010098:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 801009c:	4b08      	ldr	r3, [pc, #32]	; (80100c0 <StopRetransmission+0x70>)
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80100a4:	4b06      	ldr	r3, [pc, #24]	; (80100c0 <StopRetransmission+0x70>)
 80100a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80100aa:	f023 0302 	bic.w	r3, r3, #2
 80100ae:	4a04      	ldr	r2, [pc, #16]	; (80100c0 <StopRetransmission+0x70>)
 80100b0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80100b4:	2301      	movs	r3, #1
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bc80      	pop	{r7}
 80100bc:	4770      	bx	lr
 80100be:	bf00      	nop
 80100c0:	20000454 	.word	0x20000454
 80100c4:	2000095c 	.word	0x2000095c

080100c8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	4603      	mov	r3, r0
 80100d0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80100d2:	4b0b      	ldr	r3, [pc, #44]	; (8010100 <CallNvmDataChangeCallback+0x38>)
 80100d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00c      	beq.n	80100f6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80100dc:	4b08      	ldr	r3, [pc, #32]	; (8010100 <CallNvmDataChangeCallback+0x38>)
 80100de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100e2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d006      	beq.n	80100f6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80100e8:	4b05      	ldr	r3, [pc, #20]	; (8010100 <CallNvmDataChangeCallback+0x38>)
 80100ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	88fa      	ldrh	r2, [r7, #6]
 80100f2:	4610      	mov	r0, r2
 80100f4:	4798      	blx	r3
    }
}
 80100f6:	bf00      	nop
 80100f8:	3708      	adds	r7, #8
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	20000454 	.word	0x20000454

08010104 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801010a:	4b1b      	ldr	r3, [pc, #108]	; (8010178 <AckTimeoutRetriesProcess+0x74>)
 801010c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010110:	4b19      	ldr	r3, [pc, #100]	; (8010178 <AckTimeoutRetriesProcess+0x74>)
 8010112:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010116:	429a      	cmp	r2, r3
 8010118:	d229      	bcs.n	801016e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801011a:	4b17      	ldr	r3, [pc, #92]	; (8010178 <AckTimeoutRetriesProcess+0x74>)
 801011c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010120:	3301      	adds	r3, #1
 8010122:	b2da      	uxtb	r2, r3
 8010124:	4b14      	ldr	r3, [pc, #80]	; (8010178 <AckTimeoutRetriesProcess+0x74>)
 8010126:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801012a:	4b13      	ldr	r3, [pc, #76]	; (8010178 <AckTimeoutRetriesProcess+0x74>)
 801012c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010130:	f003 0301 	and.w	r3, r3, #1
 8010134:	b2db      	uxtb	r3, r3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d019      	beq.n	801016e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801013a:	2322      	movs	r3, #34	; 0x22
 801013c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801013e:	4b0f      	ldr	r3, [pc, #60]	; (801017c <AckTimeoutRetriesProcess+0x78>)
 8010140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010144:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010146:	4b0d      	ldr	r3, [pc, #52]	; (801017c <AckTimeoutRetriesProcess+0x78>)
 8010148:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801014c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801014e:	4b0b      	ldr	r3, [pc, #44]	; (801017c <AckTimeoutRetriesProcess+0x78>)
 8010150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010154:	f107 0208 	add.w	r2, r7, #8
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f003 fae2 	bl	8013724 <RegionGetPhyParam>
 8010160:	4603      	mov	r3, r0
 8010162:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	b25a      	sxtb	r2, r3
 8010168:	4b04      	ldr	r3, [pc, #16]	; (801017c <AckTimeoutRetriesProcess+0x78>)
 801016a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 801016e:	bf00      	nop
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	20000454 	.word	0x20000454
 801017c:	2000095c 	.word	0x2000095c

08010180 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010186:	4b14      	ldr	r3, [pc, #80]	; (80101d8 <AckTimeoutRetriesFinalize+0x58>)
 8010188:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801018c:	f083 0301 	eor.w	r3, r3, #1
 8010190:	b2db      	uxtb	r3, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d015      	beq.n	80101c2 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010196:	2302      	movs	r3, #2
 8010198:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801019a:	4b10      	ldr	r3, [pc, #64]	; (80101dc <AckTimeoutRetriesFinalize+0x5c>)
 801019c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801019e:	4b10      	ldr	r3, [pc, #64]	; (80101e0 <AckTimeoutRetriesFinalize+0x60>)
 80101a0:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80101a2:	4b10      	ldr	r3, [pc, #64]	; (80101e4 <AckTimeoutRetriesFinalize+0x64>)
 80101a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80101a8:	1d3a      	adds	r2, r7, #4
 80101aa:	4611      	mov	r1, r2
 80101ac:	4618      	mov	r0, r3
 80101ae:	f003 fae3 	bl	8013778 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80101b2:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <AckTimeoutRetriesFinalize+0x58>)
 80101b4:	2200      	movs	r2, #0
 80101b6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80101ba:	4b07      	ldr	r3, [pc, #28]	; (80101d8 <AckTimeoutRetriesFinalize+0x58>)
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80101c2:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <AckTimeoutRetriesFinalize+0x58>)
 80101c4:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80101c8:	4b03      	ldr	r3, [pc, #12]	; (80101d8 <AckTimeoutRetriesFinalize+0x58>)
 80101ca:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 80101ce:	bf00      	nop
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20000454 	.word	0x20000454
 80101dc:	20000b34 	.word	0x20000b34
 80101e0:	20000bc8 	.word	0x20000bc8
 80101e4:	2000095c 	.word	0x2000095c

080101e8 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80101e8:	b480      	push	{r7}
 80101ea:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80101ec:	4b0b      	ldr	r3, [pc, #44]	; (801021c <IsRequestPending+0x34>)
 80101ee:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80101f2:	f003 0304 	and.w	r3, r3, #4
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d107      	bne.n	801020c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80101fc:	4b07      	ldr	r3, [pc, #28]	; (801021c <IsRequestPending+0x34>)
 80101fe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010202:	f003 0301 	and.w	r3, r3, #1
 8010206:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <IsRequestPending+0x28>
    {
        return 1;
 801020c:	2301      	movs	r3, #1
 801020e:	e000      	b.n	8010212 <IsRequestPending+0x2a>
    }
    return 0;
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	46bd      	mov	sp, r7
 8010216:	bc80      	pop	{r7}
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	20000454 	.word	0x20000454

08010220 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b08f      	sub	sp, #60	; 0x3c
 8010224:	af02      	add	r7, sp, #8
 8010226:	6178      	str	r0, [r7, #20]
 8010228:	6139      	str	r1, [r7, #16]
 801022a:	4613      	mov	r3, r2
 801022c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d002      	beq.n	801023a <LoRaMacInitialization+0x1a>
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d101      	bne.n	801023e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801023a:	2303      	movs	r3, #3
 801023c:	e275      	b.n	801072a <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d00b      	beq.n	801025e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801024a:	2b00      	cmp	r3, #0
 801024c:	d007      	beq.n	801025e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010252:	2b00      	cmp	r3, #0
 8010254:	d003      	beq.n	801025e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801025a:	2b00      	cmp	r3, #0
 801025c:	d101      	bne.n	8010262 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801025e:	2303      	movs	r3, #3
 8010260:	e263      	b.n	801072a <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010262:	7bfb      	ldrb	r3, [r7, #15]
 8010264:	4618      	mov	r0, r3
 8010266:	f003 fa4d 	bl	8013704 <RegionIsActive>
 801026a:	4603      	mov	r3, r0
 801026c:	f083 0301 	eor.w	r3, r3, #1
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010276:	2309      	movs	r3, #9
 8010278:	e257      	b.n	801072a <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801027a:	6978      	ldr	r0, [r7, #20]
 801027c:	f001 fef6 	bl	801206c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010280:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010284:	2100      	movs	r1, #0
 8010286:	48c7      	ldr	r0, [pc, #796]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010288:	f005 fd92 	bl	8015db0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801028c:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010290:	2100      	movs	r1, #0
 8010292:	48c5      	ldr	r0, [pc, #788]	; (80105a8 <LoRaMacInitialization+0x388>)
 8010294:	f005 fd8c 	bl	8015db0 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010298:	4bc3      	ldr	r3, [pc, #780]	; (80105a8 <LoRaMacInitialization+0x388>)
 801029a:	2201      	movs	r2, #1
 801029c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80102a0:	4bc1      	ldr	r3, [pc, #772]	; (80105a8 <LoRaMacInitialization+0x388>)
 80102a2:	2201      	movs	r2, #1
 80102a4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 80102a8:	4abe      	ldr	r2, [pc, #760]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102aa:	7bfb      	ldrb	r3, [r7, #15]
 80102ac:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80102b0:	4bbc      	ldr	r3, [pc, #752]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80102b8:	4bba      	ldr	r3, [pc, #744]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80102c0:	4bb8      	ldr	r3, [pc, #736]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102c2:	4aba      	ldr	r2, [pc, #744]	; (80105ac <LoRaMacInitialization+0x38c>)
 80102c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80102c8:	230f      	movs	r3, #15
 80102ca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102ce:	4bb5      	ldr	r3, [pc, #724]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f003 fa22 	bl	8013724 <RegionGetPhyParam>
 80102e0:	4603      	mov	r3, r0
 80102e2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	bf14      	ite	ne
 80102ea:	2301      	movne	r3, #1
 80102ec:	2300      	moveq	r3, #0
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	4bac      	ldr	r3, [pc, #688]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102f2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80102f6:	230a      	movs	r3, #10
 80102f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102fc:	4ba9      	ldr	r3, [pc, #676]	; (80105a4 <LoRaMacInitialization+0x384>)
 80102fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010306:	4611      	mov	r1, r2
 8010308:	4618      	mov	r0, r3
 801030a:	f003 fa0b 	bl	8013724 <RegionGetPhyParam>
 801030e:	4603      	mov	r3, r0
 8010310:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010314:	b25a      	sxtb	r2, r3
 8010316:	4ba3      	ldr	r3, [pc, #652]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010318:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 801031c:	2306      	movs	r3, #6
 801031e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010322:	4ba0      	ldr	r3, [pc, #640]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010328:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801032c:	4611      	mov	r1, r2
 801032e:	4618      	mov	r0, r3
 8010330:	f003 f9f8 	bl	8013724 <RegionGetPhyParam>
 8010334:	4603      	mov	r3, r0
 8010336:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	b25a      	sxtb	r2, r3
 801033c:	4b99      	ldr	r3, [pc, #612]	; (80105a4 <LoRaMacInitialization+0x384>)
 801033e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010342:	2310      	movs	r3, #16
 8010344:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010348:	4b96      	ldr	r3, [pc, #600]	; (80105a4 <LoRaMacInitialization+0x384>)
 801034a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801034e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010352:	4611      	mov	r1, r2
 8010354:	4618      	mov	r0, r3
 8010356:	f003 f9e5 	bl	8013724 <RegionGetPhyParam>
 801035a:	4603      	mov	r3, r0
 801035c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010360:	4a90      	ldr	r2, [pc, #576]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010362:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010366:	2311      	movs	r3, #17
 8010368:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801036c:	4b8d      	ldr	r3, [pc, #564]	; (80105a4 <LoRaMacInitialization+0x384>)
 801036e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010376:	4611      	mov	r1, r2
 8010378:	4618      	mov	r0, r3
 801037a:	f003 f9d3 	bl	8013724 <RegionGetPhyParam>
 801037e:	4603      	mov	r3, r0
 8010380:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010384:	4a87      	ldr	r2, [pc, #540]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801038a:	2312      	movs	r3, #18
 801038c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010390:	4b84      	ldr	r3, [pc, #528]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801039a:	4611      	mov	r1, r2
 801039c:	4618      	mov	r0, r3
 801039e:	f003 f9c1 	bl	8013724 <RegionGetPhyParam>
 80103a2:	4603      	mov	r3, r0
 80103a4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a8:	4a7e      	ldr	r2, [pc, #504]	; (80105a4 <LoRaMacInitialization+0x384>)
 80103aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80103ae:	2313      	movs	r3, #19
 80103b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103b4:	4b7b      	ldr	r3, [pc, #492]	; (80105a4 <LoRaMacInitialization+0x384>)
 80103b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80103be:	4611      	mov	r1, r2
 80103c0:	4618      	mov	r0, r3
 80103c2:	f003 f9af 	bl	8013724 <RegionGetPhyParam>
 80103c6:	4603      	mov	r3, r0
 80103c8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80103ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103cc:	4a75      	ldr	r2, [pc, #468]	; (80105a4 <LoRaMacInitialization+0x384>)
 80103ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80103d2:	2314      	movs	r3, #20
 80103d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103d8:	4b72      	ldr	r3, [pc, #456]	; (80105a4 <LoRaMacInitialization+0x384>)
 80103da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80103e2:	4611      	mov	r1, r2
 80103e4:	4618      	mov	r0, r3
 80103e6:	f003 f99d 	bl	8013724 <RegionGetPhyParam>
 80103ea:	4603      	mov	r3, r0
 80103ec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	4a6c      	ldr	r2, [pc, #432]	; (80105a4 <LoRaMacInitialization+0x384>)
 80103f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80103f6:	2317      	movs	r3, #23
 80103f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103fc:	4b69      	ldr	r3, [pc, #420]	; (80105a4 <LoRaMacInitialization+0x384>)
 80103fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010406:	4611      	mov	r1, r2
 8010408:	4618      	mov	r0, r3
 801040a:	f003 f98b 	bl	8013724 <RegionGetPhyParam>
 801040e:	4603      	mov	r3, r0
 8010410:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010414:	b2da      	uxtb	r2, r3
 8010416:	4b63      	ldr	r3, [pc, #396]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010418:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801041c:	2318      	movs	r3, #24
 801041e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010422:	4b60      	ldr	r3, [pc, #384]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010428:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801042c:	4611      	mov	r1, r2
 801042e:	4618      	mov	r0, r3
 8010430:	f003 f978 	bl	8013724 <RegionGetPhyParam>
 8010434:	4603      	mov	r3, r0
 8010436:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	4a5a      	ldr	r2, [pc, #360]	; (80105a4 <LoRaMacInitialization+0x384>)
 801043c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010442:	4a58      	ldr	r2, [pc, #352]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010444:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010448:	2319      	movs	r3, #25
 801044a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801044e:	4b55      	ldr	r3, [pc, #340]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010454:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010458:	4611      	mov	r1, r2
 801045a:	4618      	mov	r0, r3
 801045c:	f003 f962 	bl	8013724 <RegionGetPhyParam>
 8010460:	4603      	mov	r3, r0
 8010462:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010466:	b2da      	uxtb	r2, r3
 8010468:	4b4e      	ldr	r3, [pc, #312]	; (80105a4 <LoRaMacInitialization+0x384>)
 801046a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010470:	b2da      	uxtb	r2, r3
 8010472:	4b4c      	ldr	r3, [pc, #304]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010474:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010478:	231e      	movs	r3, #30
 801047a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801047e:	4b49      	ldr	r3, [pc, #292]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010488:	4611      	mov	r1, r2
 801048a:	4618      	mov	r0, r3
 801048c:	f003 f94a 	bl	8013724 <RegionGetPhyParam>
 8010490:	4603      	mov	r3, r0
 8010492:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	b2da      	uxtb	r2, r3
 8010498:	4b42      	ldr	r3, [pc, #264]	; (80105a4 <LoRaMacInitialization+0x384>)
 801049a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801049e:	231f      	movs	r3, #31
 80104a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104a4:	4b3f      	ldr	r3, [pc, #252]	; (80105a4 <LoRaMacInitialization+0x384>)
 80104a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f003 f937 	bl	8013724 <RegionGetPhyParam>
 80104b6:	4603      	mov	r3, r0
 80104b8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	b2da      	uxtb	r2, r3
 80104be:	4b39      	ldr	r3, [pc, #228]	; (80105a4 <LoRaMacInitialization+0x384>)
 80104c0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80104c4:	2320      	movs	r3, #32
 80104c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104ca:	4b36      	ldr	r3, [pc, #216]	; (80105a4 <LoRaMacInitialization+0x384>)
 80104cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80104d4:	4611      	mov	r1, r2
 80104d6:	4618      	mov	r0, r3
 80104d8:	f003 f924 	bl	8013724 <RegionGetPhyParam>
 80104dc:	4603      	mov	r3, r0
 80104de:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80104e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e2:	4a30      	ldr	r2, [pc, #192]	; (80105a4 <LoRaMacInitialization+0x384>)
 80104e4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80104e8:	2321      	movs	r3, #33	; 0x21
 80104ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104ee:	4b2d      	ldr	r3, [pc, #180]	; (80105a4 <LoRaMacInitialization+0x384>)
 80104f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80104f8:	4611      	mov	r1, r2
 80104fa:	4618      	mov	r0, r3
 80104fc:	f003 f912 	bl	8013724 <RegionGetPhyParam>
 8010500:	4603      	mov	r3, r0
 8010502:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010506:	4a27      	ldr	r2, [pc, #156]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010508:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801050c:	230b      	movs	r3, #11
 801050e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010512:	4b24      	ldr	r3, [pc, #144]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010518:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801051c:	4611      	mov	r1, r2
 801051e:	4618      	mov	r0, r3
 8010520:	f003 f900 	bl	8013724 <RegionGetPhyParam>
 8010524:	4603      	mov	r3, r0
 8010526:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052a:	b29a      	uxth	r2, r3
 801052c:	4b1e      	ldr	r3, [pc, #120]	; (80105a8 <LoRaMacInitialization+0x388>)
 801052e:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010532:	230c      	movs	r3, #12
 8010534:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010538:	4b1a      	ldr	r3, [pc, #104]	; (80105a4 <LoRaMacInitialization+0x384>)
 801053a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801053e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010542:	4611      	mov	r1, r2
 8010544:	4618      	mov	r0, r3
 8010546:	f003 f8ed 	bl	8013724 <RegionGetPhyParam>
 801054a:	4603      	mov	r3, r0
 801054c:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 801054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010550:	b29a      	uxth	r2, r3
 8010552:	4b15      	ldr	r3, [pc, #84]	; (80105a8 <LoRaMacInitialization+0x388>)
 8010554:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010558:	4b12      	ldr	r3, [pc, #72]	; (80105a4 <LoRaMacInitialization+0x384>)
 801055a:	2201      	movs	r2, #1
 801055c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010560:	4b10      	ldr	r3, [pc, #64]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010562:	220a      	movs	r2, #10
 8010564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010568:	4b0e      	ldr	r3, [pc, #56]	; (80105a4 <LoRaMacInitialization+0x384>)
 801056a:	2206      	movs	r2, #6
 801056c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010570:	4b0c      	ldr	r3, [pc, #48]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010576:	4a0b      	ldr	r2, [pc, #44]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010578:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801057a:	4b0a      	ldr	r3, [pc, #40]	; (80105a4 <LoRaMacInitialization+0x384>)
 801057c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010580:	4b08      	ldr	r3, [pc, #32]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010586:	4b07      	ldr	r3, [pc, #28]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801058c:	4a05      	ldr	r2, [pc, #20]	; (80105a4 <LoRaMacInitialization+0x384>)
 801058e:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010590:	4b04      	ldr	r3, [pc, #16]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010596:	4a03      	ldr	r2, [pc, #12]	; (80105a4 <LoRaMacInitialization+0x384>)
 8010598:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801059a:	4b02      	ldr	r3, [pc, #8]	; (80105a4 <LoRaMacInitialization+0x384>)
 801059c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80105a0:	e006      	b.n	80105b0 <LoRaMacInitialization+0x390>
 80105a2:	bf00      	nop
 80105a4:	2000095c 	.word	0x2000095c
 80105a8:	20000454 	.word	0x20000454
 80105ac:	01000300 	.word	0x01000300
 80105b0:	4a60      	ldr	r2, [pc, #384]	; (8010734 <LoRaMacInitialization+0x514>)
 80105b2:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80105b4:	4b5f      	ldr	r3, [pc, #380]	; (8010734 <LoRaMacInitialization+0x514>)
 80105b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80105ba:	4a5e      	ldr	r2, [pc, #376]	; (8010734 <LoRaMacInitialization+0x514>)
 80105bc:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80105be:	4b5d      	ldr	r3, [pc, #372]	; (8010734 <LoRaMacInitialization+0x514>)
 80105c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80105c4:	4a5b      	ldr	r2, [pc, #364]	; (8010734 <LoRaMacInitialization+0x514>)
 80105c6:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80105c8:	4b5a      	ldr	r3, [pc, #360]	; (8010734 <LoRaMacInitialization+0x514>)
 80105ca:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80105ce:	4b59      	ldr	r3, [pc, #356]	; (8010734 <LoRaMacInitialization+0x514>)
 80105d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80105d4:	2300      	movs	r3, #0
 80105d6:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80105da:	4b57      	ldr	r3, [pc, #348]	; (8010738 <LoRaMacInitialization+0x518>)
 80105dc:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80105de:	4b57      	ldr	r3, [pc, #348]	; (801073c <LoRaMacInitialization+0x51c>)
 80105e0:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80105e2:	4b54      	ldr	r3, [pc, #336]	; (8010734 <LoRaMacInitialization+0x514>)
 80105e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105e8:	f107 0218 	add.w	r2, r7, #24
 80105ec:	4611      	mov	r1, r2
 80105ee:	4618      	mov	r0, r3
 80105f0:	f003 f8c2 	bl	8013778 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80105f4:	4a52      	ldr	r2, [pc, #328]	; (8010740 <LoRaMacInitialization+0x520>)
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80105fc:	f7ff f85a 	bl	800f6b4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010600:	4b4c      	ldr	r3, [pc, #304]	; (8010734 <LoRaMacInitialization+0x514>)
 8010602:	2201      	movs	r2, #1
 8010604:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010608:	4a4d      	ldr	r2, [pc, #308]	; (8010740 <LoRaMacInitialization+0x520>)
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010610:	4b4b      	ldr	r3, [pc, #300]	; (8010740 <LoRaMacInitialization+0x520>)
 8010612:	2200      	movs	r2, #0
 8010614:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010618:	4b49      	ldr	r3, [pc, #292]	; (8010740 <LoRaMacInitialization+0x520>)
 801061a:	2201      	movs	r2, #1
 801061c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010620:	4b44      	ldr	r3, [pc, #272]	; (8010734 <LoRaMacInitialization+0x514>)
 8010622:	2200      	movs	r2, #0
 8010624:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010626:	4b43      	ldr	r3, [pc, #268]	; (8010734 <LoRaMacInitialization+0x514>)
 8010628:	2200      	movs	r2, #0
 801062a:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801062c:	2300      	movs	r3, #0
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	4b44      	ldr	r3, [pc, #272]	; (8010744 <LoRaMacInitialization+0x524>)
 8010632:	2200      	movs	r2, #0
 8010634:	f04f 31ff 	mov.w	r1, #4294967295
 8010638:	4843      	ldr	r0, [pc, #268]	; (8010748 <LoRaMacInitialization+0x528>)
 801063a:	f009 fb11 	bl	8019c60 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801063e:	2300      	movs	r3, #0
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	4b42      	ldr	r3, [pc, #264]	; (801074c <LoRaMacInitialization+0x52c>)
 8010644:	2200      	movs	r2, #0
 8010646:	f04f 31ff 	mov.w	r1, #4294967295
 801064a:	4841      	ldr	r0, [pc, #260]	; (8010750 <LoRaMacInitialization+0x530>)
 801064c:	f009 fb08 	bl	8019c60 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010650:	2300      	movs	r3, #0
 8010652:	9300      	str	r3, [sp, #0]
 8010654:	4b3f      	ldr	r3, [pc, #252]	; (8010754 <LoRaMacInitialization+0x534>)
 8010656:	2200      	movs	r2, #0
 8010658:	f04f 31ff 	mov.w	r1, #4294967295
 801065c:	483e      	ldr	r0, [pc, #248]	; (8010758 <LoRaMacInitialization+0x538>)
 801065e:	f009 faff 	bl	8019c60 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010662:	2300      	movs	r3, #0
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	4b3d      	ldr	r3, [pc, #244]	; (801075c <LoRaMacInitialization+0x53c>)
 8010668:	2200      	movs	r2, #0
 801066a:	f04f 31ff 	mov.w	r1, #4294967295
 801066e:	483c      	ldr	r0, [pc, #240]	; (8010760 <LoRaMacInitialization+0x540>)
 8010670:	f009 faf6 	bl	8019c60 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010674:	4c2f      	ldr	r4, [pc, #188]	; (8010734 <LoRaMacInitialization+0x514>)
 8010676:	463b      	mov	r3, r7
 8010678:	4618      	mov	r0, r3
 801067a:	f008 fe79 	bl	8019370 <SysTimeGetMcuTime>
 801067e:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010682:	463a      	mov	r2, r7
 8010684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010688:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801068c:	4b2c      	ldr	r3, [pc, #176]	; (8010740 <LoRaMacInitialization+0x520>)
 801068e:	4a35      	ldr	r2, [pc, #212]	; (8010764 <LoRaMacInitialization+0x544>)
 8010690:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010694:	4b2a      	ldr	r3, [pc, #168]	; (8010740 <LoRaMacInitialization+0x520>)
 8010696:	4a34      	ldr	r2, [pc, #208]	; (8010768 <LoRaMacInitialization+0x548>)
 8010698:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801069c:	4b28      	ldr	r3, [pc, #160]	; (8010740 <LoRaMacInitialization+0x520>)
 801069e:	4a33      	ldr	r2, [pc, #204]	; (801076c <LoRaMacInitialization+0x54c>)
 80106a0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80106a4:	4b26      	ldr	r3, [pc, #152]	; (8010740 <LoRaMacInitialization+0x520>)
 80106a6:	4a32      	ldr	r2, [pc, #200]	; (8010770 <LoRaMacInitialization+0x550>)
 80106a8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80106ac:	4b24      	ldr	r3, [pc, #144]	; (8010740 <LoRaMacInitialization+0x520>)
 80106ae:	4a31      	ldr	r2, [pc, #196]	; (8010774 <LoRaMacInitialization+0x554>)
 80106b0:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80106b4:	4b30      	ldr	r3, [pc, #192]	; (8010778 <LoRaMacInitialization+0x558>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4830      	ldr	r0, [pc, #192]	; (801077c <LoRaMacInitialization+0x55c>)
 80106ba:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	689b      	ldr	r3, [r3, #8]
 80106c0:	4619      	mov	r1, r3
 80106c2:	482f      	ldr	r0, [pc, #188]	; (8010780 <LoRaMacInitialization+0x560>)
 80106c4:	f7fa ff3e 	bl	800b544 <SecureElementInit>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d001      	beq.n	80106d2 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80106ce:	2311      	movs	r3, #17
 80106d0:	e02b      	b.n	801072a <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80106d2:	4818      	ldr	r0, [pc, #96]	; (8010734 <LoRaMacInitialization+0x514>)
 80106d4:	f002 f950 	bl	8012978 <LoRaMacCryptoInit>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80106de:	2311      	movs	r3, #17
 80106e0:	e023      	b.n	801072a <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80106e2:	f001 fa95 	bl	8011c10 <LoRaMacCommandsInit>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d001      	beq.n	80106f0 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106ec:	2313      	movs	r3, #19
 80106ee:	e01c      	b.n	801072a <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80106f0:	4824      	ldr	r0, [pc, #144]	; (8010784 <LoRaMacInitialization+0x564>)
 80106f2:	f002 f9ff 	bl	8012af4 <LoRaMacCryptoSetMulticastReference>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80106fc:	2311      	movs	r3, #17
 80106fe:	e014      	b.n	801072a <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010700:	4b1d      	ldr	r3, [pc, #116]	; (8010778 <LoRaMacInitialization+0x558>)
 8010702:	695b      	ldr	r3, [r3, #20]
 8010704:	4798      	blx	r3
 8010706:	4603      	mov	r3, r0
 8010708:	4618      	mov	r0, r3
 801070a:	f005 faf1 	bl	8015cf0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801070e:	4b1a      	ldr	r3, [pc, #104]	; (8010778 <LoRaMacInitialization+0x558>)
 8010710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010712:	4a08      	ldr	r2, [pc, #32]	; (8010734 <LoRaMacInitialization+0x514>)
 8010714:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010718:	4610      	mov	r0, r2
 801071a:	4798      	blx	r3
    Radio.Sleep( );
 801071c:	4b16      	ldr	r3, [pc, #88]	; (8010778 <LoRaMacInitialization+0x558>)
 801071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010720:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010722:	2001      	movs	r0, #1
 8010724:	f7fd faaa 	bl	800dc7c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3734      	adds	r7, #52	; 0x34
 801072e:	46bd      	mov	sp, r7
 8010730:	bd90      	pop	{r4, r7, pc}
 8010732:	bf00      	nop
 8010734:	2000095c 	.word	0x2000095c
 8010738:	20000b34 	.word	0x20000b34
 801073c:	20000bc8 	.word	0x20000bc8
 8010740:	20000454 	.word	0x20000454
 8010744:	0800e205 	.word	0x0800e205
 8010748:	200007bc 	.word	0x200007bc
 801074c:	0800e279 	.word	0x0800e279
 8010750:	200007d4 	.word	0x200007d4
 8010754:	0800e2e5 	.word	0x0800e2e5
 8010758:	200007ec 	.word	0x200007ec
 801075c:	0800e359 	.word	0x0800e359
 8010760:	2000084c 	.word	0x2000084c
 8010764:	0800ce09 	.word	0x0800ce09
 8010768:	0800ce81 	.word	0x0800ce81
 801076c:	0800cf59 	.word	0x0800cf59
 8010770:	0800cf0d 	.word	0x0800cf0d
 8010774:	0800cf95 	.word	0x0800cf95
 8010778:	0801b528 	.word	0x0801b528
 801077c:	200007a0 	.word	0x200007a0
 8010780:	20000a74 	.word	0x20000a74
 8010784:	20000a2c 	.word	0x20000a2c

08010788 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010788:	b480      	push	{r7}
 801078a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801078c:	4b04      	ldr	r3, [pc, #16]	; (80107a0 <LoRaMacStart+0x18>)
 801078e:	2200      	movs	r2, #0
 8010790:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010794:	2300      	movs	r3, #0
}
 8010796:	4618      	mov	r0, r3
 8010798:	46bd      	mov	sp, r7
 801079a:	bc80      	pop	{r7}
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	20000454 	.word	0x20000454

080107a4 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08a      	sub	sp, #40	; 0x28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	6039      	str	r1, [r7, #0]
 80107ae:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80107b0:	4b3e      	ldr	r3, [pc, #248]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 80107b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80107b6:	4b3d      	ldr	r3, [pc, #244]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 80107b8:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 80107bc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80107be:	4b3b      	ldr	r3, [pc, #236]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 80107c0:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 80107c4:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 80107c6:	2300      	movs	r3, #0
 80107c8:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d101      	bne.n	80107d4 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107d0:	2303      	movs	r3, #3
 80107d2:	e066      	b.n	80108a2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 80107d4:	4b35      	ldr	r3, [pc, #212]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 80107d6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80107da:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 80107dc:	2300      	movs	r3, #0
 80107de:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80107e0:	4b32      	ldr	r3, [pc, #200]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 80107e2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80107e6:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80107e8:	4b30      	ldr	r3, [pc, #192]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 80107ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ec:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80107ee:	4b30      	ldr	r3, [pc, #192]	; (80108b0 <LoRaMacQueryTxPossible+0x10c>)
 80107f0:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80107f4:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80107f6:	4b2e      	ldr	r3, [pc, #184]	; (80108b0 <LoRaMacQueryTxPossible+0x10c>)
 80107f8:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80107fc:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107fe:	4b2b      	ldr	r3, [pc, #172]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 8010800:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010804:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010808:	4b28      	ldr	r3, [pc, #160]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 801080a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801080e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010812:	4b26      	ldr	r3, [pc, #152]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 8010814:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801081c:	4b23      	ldr	r3, [pc, #140]	; (80108ac <LoRaMacQueryTxPossible+0x108>)
 801081e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010826:	f107 0310 	add.w	r3, r7, #16
 801082a:	f107 020e 	add.w	r2, r7, #14
 801082e:	f107 010f 	add.w	r1, r7, #15
 8010832:	f107 0014 	add.w	r0, r7, #20
 8010836:	f000 ffe1 	bl	80117fc <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801083e:	4618      	mov	r0, r3
 8010840:	f7fd fed2 	bl	800e5e8 <GetMaxAppPayloadWithoutFOptsLength>
 8010844:	4603      	mov	r3, r0
 8010846:	461a      	mov	r2, r3
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801084c:	f107 0308 	add.w	r3, r7, #8
 8010850:	4618      	mov	r0, r3
 8010852:	f001 faab 	bl	8011dac <LoRaMacCommandsGetSizeSerializedCmds>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d001      	beq.n	8010860 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801085c:	2313      	movs	r3, #19
 801085e:	e020      	b.n	80108a2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	2b0f      	cmp	r3, #15
 8010864:	d819      	bhi.n	801089a <LoRaMacQueryTxPossible+0xf6>
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	785b      	ldrb	r3, [r3, #1]
 801086a:	461a      	mov	r2, r3
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	429a      	cmp	r2, r3
 8010870:	d313      	bcc.n	801089a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	785a      	ldrb	r2, [r3, #1]
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	b2db      	uxtb	r3, r3
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	b2da      	uxtb	r2, r3
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	785b      	ldrb	r3, [r3, #1]
 8010886:	4619      	mov	r1, r3
 8010888:	79fa      	ldrb	r2, [r7, #7]
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	4413      	add	r3, r2
 801088e:	4299      	cmp	r1, r3
 8010890:	d301      	bcc.n	8010896 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010892:	2300      	movs	r3, #0
 8010894:	e005      	b.n	80108a2 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010896:	2308      	movs	r3, #8
 8010898:	e003      	b.n	80108a2 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	2200      	movs	r2, #0
 801089e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80108a0:	2308      	movs	r3, #8
    }
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3728      	adds	r7, #40	; 0x28
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	2000095c 	.word	0x2000095c
 80108b0:	20000454 	.word	0x20000454

080108b4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80108b4:	b590      	push	{r4, r7, lr}
 80108b6:	b087      	sub	sp, #28
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80108bc:	2300      	movs	r3, #0
 80108be:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d101      	bne.n	80108ca <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108c6:	2303      	movs	r3, #3
 80108c8:	e14b      	b.n	8010b62 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	2b28      	cmp	r3, #40	; 0x28
 80108d0:	f200 8140 	bhi.w	8010b54 <LoRaMacMibGetRequestConfirm+0x2a0>
 80108d4:	a201      	add	r2, pc, #4	; (adr r2, 80108dc <LoRaMacMibGetRequestConfirm+0x28>)
 80108d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108da:	bf00      	nop
 80108dc:	08010981 	.word	0x08010981
 80108e0:	0801098d 	.word	0x0801098d
 80108e4:	08010999 	.word	0x08010999
 80108e8:	080109a5 	.word	0x080109a5
 80108ec:	080109b1 	.word	0x080109b1
 80108f0:	080109bd 	.word	0x080109bd
 80108f4:	080109c9 	.word	0x080109c9
 80108f8:	08010b55 	.word	0x08010b55
 80108fc:	08010b55 	.word	0x08010b55
 8010900:	08010b55 	.word	0x08010b55
 8010904:	08010b55 	.word	0x08010b55
 8010908:	08010b55 	.word	0x08010b55
 801090c:	08010b55 	.word	0x08010b55
 8010910:	08010b55 	.word	0x08010b55
 8010914:	08010b55 	.word	0x08010b55
 8010918:	080109d5 	.word	0x080109d5
 801091c:	080109e1 	.word	0x080109e1
 8010920:	080109ed 	.word	0x080109ed
 8010924:	08010a0f 	.word	0x08010a0f
 8010928:	08010a21 	.word	0x08010a21
 801092c:	08010a33 	.word	0x08010a33
 8010930:	08010a45 	.word	0x08010a45
 8010934:	08010a79 	.word	0x08010a79
 8010938:	08010a57 	.word	0x08010a57
 801093c:	08010a9b 	.word	0x08010a9b
 8010940:	08010aa7 	.word	0x08010aa7
 8010944:	08010ab1 	.word	0x08010ab1
 8010948:	08010abb 	.word	0x08010abb
 801094c:	08010ac5 	.word	0x08010ac5
 8010950:	08010acf 	.word	0x08010acf
 8010954:	08010ad9 	.word	0x08010ad9
 8010958:	08010ae5 	.word	0x08010ae5
 801095c:	08010afd 	.word	0x08010afd
 8010960:	08010af1 	.word	0x08010af1
 8010964:	08010b09 	.word	0x08010b09
 8010968:	08010b13 	.word	0x08010b13
 801096c:	08010b1f 	.word	0x08010b1f
 8010970:	08010b35 	.word	0x08010b35
 8010974:	08010b29 	.word	0x08010b29
 8010978:	08010b55 	.word	0x08010b55
 801097c:	08010b41 	.word	0x08010b41
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010980:	4b7a      	ldr	r3, [pc, #488]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010982:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	711a      	strb	r2, [r3, #4]
            break;
 801098a:	e0e9      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801098c:	4b77      	ldr	r3, [pc, #476]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801098e:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	711a      	strb	r2, [r3, #4]
            break;
 8010996:	e0e3      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8010998:	f7fb f88e 	bl	800bab8 <SecureElementGetDevEui>
 801099c:	4602      	mov	r2, r0
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	605a      	str	r2, [r3, #4]
            break;
 80109a2:	e0dd      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80109a4:	f7fb f8aa 	bl	800bafc <SecureElementGetJoinEui>
 80109a8:	4602      	mov	r2, r0
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	605a      	str	r2, [r3, #4]
            break;
 80109ae:	e0d7      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80109b0:	4b6e      	ldr	r3, [pc, #440]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80109b2:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	711a      	strb	r2, [r3, #4]
            break;
 80109ba:	e0d1      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80109bc:	4b6b      	ldr	r3, [pc, #428]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80109be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	605a      	str	r2, [r3, #4]
            break;
 80109c6:	e0cb      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80109c8:	4b68      	ldr	r3, [pc, #416]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80109ca:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	605a      	str	r2, [r3, #4]
            break;
 80109d2:	e0c5      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80109d4:	4b65      	ldr	r3, [pc, #404]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80109d6:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	711a      	strb	r2, [r3, #4]
            break;
 80109de:	e0bf      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80109e0:	4b62      	ldr	r3, [pc, #392]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80109e2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	711a      	strb	r2, [r3, #4]
            break;
 80109ea:	e0b9      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80109ec:	231d      	movs	r3, #29
 80109ee:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109f0:	4b5e      	ldr	r3, [pc, #376]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80109f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109f6:	f107 0210 	add.w	r2, r7, #16
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f002 fe91 	bl	8013724 <RegionGetPhyParam>
 8010a02:	4603      	mov	r3, r0
 8010a04:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010a06:	68fa      	ldr	r2, [r7, #12]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	605a      	str	r2, [r3, #4]
            break;
 8010a0c:	e0a8      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4a56      	ldr	r2, [pc, #344]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a12:	3304      	adds	r3, #4
 8010a14:	3264      	adds	r2, #100	; 0x64
 8010a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a1a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a1e:	e09f      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	4a52      	ldr	r2, [pc, #328]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a24:	3304      	adds	r3, #4
 8010a26:	32a4      	adds	r2, #164	; 0xa4
 8010a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a2c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a30:	e096      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4a4d      	ldr	r2, [pc, #308]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a36:	3304      	adds	r3, #4
 8010a38:	326c      	adds	r2, #108	; 0x6c
 8010a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a3e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a42:	e08d      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4a49      	ldr	r2, [pc, #292]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a48:	3304      	adds	r3, #4
 8010a4a:	32ac      	adds	r2, #172	; 0xac
 8010a4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a50:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010a54:	e084      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010a56:	231b      	movs	r3, #27
 8010a58:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a5a:	4b44      	ldr	r3, [pc, #272]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a60:	f107 0210 	add.w	r2, r7, #16
 8010a64:	4611      	mov	r1, r2
 8010a66:	4618      	mov	r0, r3
 8010a68:	f002 fe5c 	bl	8013724 <RegionGetPhyParam>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	605a      	str	r2, [r3, #4]
            break;
 8010a76:	e073      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010a78:	231a      	movs	r3, #26
 8010a7a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a7c:	4b3b      	ldr	r3, [pc, #236]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a82:	f107 0210 	add.w	r2, r7, #16
 8010a86:	4611      	mov	r1, r2
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f002 fe4b 	bl	8013724 <RegionGetPhyParam>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010a92:	68fa      	ldr	r2, [r7, #12]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	605a      	str	r2, [r3, #4]
            break;
 8010a98:	e062      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010a9a:	4b34      	ldr	r3, [pc, #208]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010a9c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	711a      	strb	r2, [r3, #4]
            break;
 8010aa4:	e05c      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010aa6:	4b31      	ldr	r3, [pc, #196]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	605a      	str	r2, [r3, #4]
            break;
 8010aae:	e057      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010ab0:	4b2e      	ldr	r3, [pc, #184]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	605a      	str	r2, [r3, #4]
            break;
 8010ab8:	e052      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8010aba:	4b2c      	ldr	r3, [pc, #176]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	605a      	str	r2, [r3, #4]
            break;
 8010ac2:	e04d      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010ac4:	4b29      	ldr	r3, [pc, #164]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ac6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	605a      	str	r2, [r3, #4]
            break;
 8010acc:	e048      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8010ace:	4b27      	ldr	r3, [pc, #156]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ad0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	605a      	str	r2, [r3, #4]
            break;
 8010ad6:	e043      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010ad8:	4b24      	ldr	r3, [pc, #144]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ada:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	711a      	strb	r2, [r3, #4]
            break;
 8010ae2:	e03d      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010ae4:	4b21      	ldr	r3, [pc, #132]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ae6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	711a      	strb	r2, [r3, #4]
            break;
 8010aee:	e037      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010af0:	4b1e      	ldr	r3, [pc, #120]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010af2:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	711a      	strb	r2, [r3, #4]
            break;
 8010afa:	e031      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010afc:	4b1b      	ldr	r3, [pc, #108]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010afe:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	711a      	strb	r2, [r3, #4]
            break;
 8010b06:	e02b      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010b08:	4b18      	ldr	r3, [pc, #96]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	605a      	str	r2, [r3, #4]
            break;
 8010b10:	e026      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010b12:	4b16      	ldr	r3, [pc, #88]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010b14:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	711a      	strb	r2, [r3, #4]
            break;
 8010b1c:	e020      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010b1e:	4b13      	ldr	r3, [pc, #76]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010b20:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	605a      	str	r2, [r3, #4]
            break;
 8010b26:	e01b      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8010b28:	f7ff f934 	bl	800fd94 <GetNvmData>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	605a      	str	r2, [r3, #4]
            break;
 8010b32:	e015      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010b34:	4b0d      	ldr	r3, [pc, #52]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010b36:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	605a      	str	r2, [r3, #4]
            break;
 8010b3e:	e00f      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4a0a      	ldr	r2, [pc, #40]	; (8010b6c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010b44:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8010b48:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010b4a:	687c      	ldr	r4, [r7, #4]
 8010b4c:	f002 ff74 	bl	8013a38 <RegionGetVersion>
 8010b50:	60a0      	str	r0, [r4, #8]
            break;
 8010b52:	e005      	b.n	8010b60 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fefd 	bl	8011954 <LoRaMacClassBMibGetRequestConfirm>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	75fb      	strb	r3, [r7, #23]
            break;
 8010b5e:	bf00      	nop
        }
    }
    return status;
 8010b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	371c      	adds	r7, #28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	2000095c 	.word	0x2000095c

08010b70 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d101      	bne.n	8010b86 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b82:	2303      	movs	r3, #3
 8010b84:	e32b      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010b86:	4bbe      	ldr	r3, [pc, #760]	; (8010e80 <LoRaMacMibSetRequestConfirm+0x310>)
 8010b88:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010b8c:	f003 0302 	and.w	r3, r3, #2
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d001      	beq.n	8010b98 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010b94:	2301      	movs	r3, #1
 8010b96:	e322      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	2b27      	cmp	r3, #39	; 0x27
 8010b9e:	f200 82fc 	bhi.w	801119a <LoRaMacMibSetRequestConfirm+0x62a>
 8010ba2:	a201      	add	r2, pc, #4	; (adr r2, 8010ba8 <LoRaMacMibSetRequestConfirm+0x38>)
 8010ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba8:	08010c49 	.word	0x08010c49
 8010bac:	08010c59 	.word	0x08010c59
 8010bb0:	08010c73 	.word	0x08010c73
 8010bb4:	08010c8b 	.word	0x08010c8b
 8010bb8:	08010ca3 	.word	0x08010ca3
 8010bbc:	08010caf 	.word	0x08010caf
 8010bc0:	08010cbb 	.word	0x08010cbb
 8010bc4:	08010cc7 	.word	0x08010cc7
 8010bc8:	08010ced 	.word	0x08010ced
 8010bcc:	08010d13 	.word	0x08010d13
 8010bd0:	08010d39 	.word	0x08010d39
 8010bd4:	08010d5f 	.word	0x08010d5f
 8010bd8:	08010d85 	.word	0x08010d85
 8010bdc:	08010dab 	.word	0x08010dab
 8010be0:	08010dd1 	.word	0x08010dd1
 8010be4:	08010df7 	.word	0x08010df7
 8010be8:	08010e17 	.word	0x08010e17
 8010bec:	0801119b 	.word	0x0801119b
 8010bf0:	08010e23 	.word	0x08010e23
 8010bf4:	08010e9f 	.word	0x08010e9f
 8010bf8:	08010edf 	.word	0x08010edf
 8010bfc:	08010f41 	.word	0x08010f41
 8010c00:	08010fb1 	.word	0x08010fb1
 8010c04:	08010f81 	.word	0x08010f81
 8010c08:	08010fe1 	.word	0x08010fe1
 8010c0c:	08011003 	.word	0x08011003
 8010c10:	0801100d 	.word	0x0801100d
 8010c14:	08011017 	.word	0x08011017
 8010c18:	08011021 	.word	0x08011021
 8010c1c:	0801102b 	.word	0x0801102b
 8010c20:	08011035 	.word	0x08011035
 8010c24:	08011067 	.word	0x08011067
 8010c28:	080110d3 	.word	0x080110d3
 8010c2c:	080110a1 	.word	0x080110a1
 8010c30:	08011105 	.word	0x08011105
 8010c34:	0801111b 	.word	0x0801111b
 8010c38:	08011133 	.word	0x08011133
 8010c3c:	0801113d 	.word	0x0801113d
 8010c40:	08011149 	.word	0x08011149
 8010c44:	08011171 	.word	0x08011171
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	791b      	ldrb	r3, [r3, #4]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fd fbfb 	bl	800e448 <SwitchClass>
 8010c52:	4603      	mov	r3, r0
 8010c54:	75fb      	strb	r3, [r7, #23]
            break;
 8010c56:	e2c1      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	791b      	ldrb	r3, [r3, #4]
 8010c5c:	2b02      	cmp	r3, #2
 8010c5e:	d005      	beq.n	8010c6c <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	791a      	ldrb	r2, [r3, #4]
 8010c64:	4b87      	ldr	r3, [pc, #540]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010c66:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010c6a:	e2b7      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	75fb      	strb	r3, [r7, #23]
            break;
 8010c70:	e2b4      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fa ff06 	bl	800ba88 <SecureElementSetDevEui>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f000 8291 	beq.w	80111a6 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c84:	2303      	movs	r3, #3
 8010c86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010c88:	e28d      	b.n	80111a6 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fa ff1c 	bl	800bacc <SecureElementSetJoinEui>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f000 8287 	beq.w	80111aa <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c9c:	2303      	movs	r3, #3
 8010c9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010ca0:	e283      	b.n	80111aa <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	791a      	ldrb	r2, [r3, #4]
 8010ca6:	4b77      	ldr	r3, [pc, #476]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010ca8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8010cac:	e296      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	4a74      	ldr	r2, [pc, #464]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010cb4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8010cb8:	e290      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	4a71      	ldr	r2, [pc, #452]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010cc0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8010cc4:	e28a      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00b      	beq.n	8010ce6 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	f001 ff35 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f000 8266 	beq.w	80111ae <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ce2:	2311      	movs	r3, #17
 8010ce4:	e27b      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ce6:	2303      	movs	r3, #3
 8010ce8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010cea:	e260      	b.n	80111ae <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00b      	beq.n	8010d0c <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	f001 ff22 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	f000 8255 	beq.w	80111b2 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d08:	2311      	movs	r3, #17
 8010d0a:	e268      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d0c:	2303      	movs	r3, #3
 8010d0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d10:	e24f      	b.n	80111b2 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d00b      	beq.n	8010d32 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	4619      	mov	r1, r3
 8010d20:	2002      	movs	r0, #2
 8010d22:	f001 ff0f 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	f000 8244 	beq.w	80111b6 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d2e:	2311      	movs	r3, #17
 8010d30:	e255      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d32:	2303      	movs	r3, #3
 8010d34:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d36:	e23e      	b.n	80111b6 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00b      	beq.n	8010d58 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	685b      	ldr	r3, [r3, #4]
 8010d44:	4619      	mov	r1, r3
 8010d46:	2003      	movs	r0, #3
 8010d48:	f001 fefc 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f000 8233 	beq.w	80111ba <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d54:	2311      	movs	r3, #17
 8010d56:	e242      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d58:	2303      	movs	r3, #3
 8010d5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d5c:	e22d      	b.n	80111ba <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00b      	beq.n	8010d7e <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	207f      	movs	r0, #127	; 0x7f
 8010d6e:	f001 fee9 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f000 8222 	beq.w	80111be <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d7a:	2311      	movs	r3, #17
 8010d7c:	e22f      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d7e:	2303      	movs	r3, #3
 8010d80:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010d82:	e21c      	b.n	80111be <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d00b      	beq.n	8010da4 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	4619      	mov	r1, r3
 8010d92:	2080      	movs	r0, #128	; 0x80
 8010d94:	f001 fed6 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	f000 8211 	beq.w	80111c2 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010da0:	2311      	movs	r3, #17
 8010da2:	e21c      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010da4:	2303      	movs	r3, #3
 8010da6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010da8:	e20b      	b.n	80111c2 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00b      	beq.n	8010dca <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	4619      	mov	r1, r3
 8010db8:	2081      	movs	r0, #129	; 0x81
 8010dba:	f001 fec3 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 8200 	beq.w	80111c6 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dc6:	2311      	movs	r3, #17
 8010dc8:	e209      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010dca:	2303      	movs	r3, #3
 8010dcc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010dce:	e1fa      	b.n	80111c6 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d00b      	beq.n	8010df0 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	2082      	movs	r0, #130	; 0x82
 8010de0:	f001 feb0 	bl	8012b44 <LoRaMacCryptoSetKey>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f000 81ef 	beq.w	80111ca <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010dec:	2311      	movs	r3, #17
 8010dee:	e1f6      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010df0:	2303      	movs	r3, #3
 8010df2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010df4:	e1e9      	b.n	80111ca <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	791a      	ldrb	r2, [r3, #4]
 8010dfa:	4b22      	ldr	r3, [pc, #136]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010dfc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010e00:	4b21      	ldr	r3, [pc, #132]	; (8010e88 <LoRaMacMibSetRequestConfirm+0x318>)
 8010e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e04:	4a1f      	ldr	r2, [pc, #124]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010e06:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010e0a:	4610      	mov	r0, r2
 8010e0c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8010e0e:	4b1e      	ldr	r3, [pc, #120]	; (8010e88 <LoRaMacMibSetRequestConfirm+0x318>)
 8010e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e12:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8010e14:	e1e2      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	791a      	ldrb	r2, [r3, #4]
 8010e1a:	4b1a      	ldr	r3, [pc, #104]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8010e20:	e1dc      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	7a1b      	ldrb	r3, [r3, #8]
 8010e26:	b25b      	sxtb	r3, r3
 8010e28:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e2a:	4b16      	ldr	r3, [pc, #88]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010e2c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010e30:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010e32:	4b14      	ldr	r3, [pc, #80]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e38:	f107 0108 	add.w	r1, r7, #8
 8010e3c:	2207      	movs	r2, #7
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f002 fcac 	bl	801379c <RegionVerify>
 8010e44:	4603      	mov	r3, r0
 8010e46:	f083 0301 	eor.w	r3, r3, #1
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e50:	2303      	movs	r3, #3
 8010e52:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8010e54:	e1c2      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8010e5c:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <LoRaMacMibSetRequestConfirm+0x314>)
 8010e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e62:	f107 0108 	add.w	r1, r7, #8
 8010e66:	2200      	movs	r2, #0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f002 fc97 	bl	801379c <RegionVerify>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f083 0301 	eor.w	r3, r3, #1
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d008      	beq.n	8010e8c <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e7a:	2303      	movs	r3, #3
 8010e7c:	75fb      	strb	r3, [r7, #23]
            break;
 8010e7e:	e1ad      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
 8010e80:	20000454 	.word	0x20000454
 8010e84:	2000095c 	.word	0x2000095c
 8010e88:	0801b528 	.word	0x0801b528
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010e8c:	4bb6      	ldr	r3, [pc, #728]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	3364      	adds	r3, #100	; 0x64
 8010e92:	3204      	adds	r2, #4
 8010e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e98:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010e9c:	e19e      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	7a1b      	ldrb	r3, [r3, #8]
 8010ea2:	b25b      	sxtb	r3, r3
 8010ea4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ea6:	4bb0      	ldr	r3, [pc, #704]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010ea8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010eac:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010eae:	4bae      	ldr	r3, [pc, #696]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eb4:	f107 0108 	add.w	r1, r7, #8
 8010eb8:	2207      	movs	r2, #7
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f002 fc6e 	bl	801379c <RegionVerify>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d008      	beq.n	8010ed8 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010ec6:	4ba8      	ldr	r3, [pc, #672]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	33a4      	adds	r3, #164	; 0xa4
 8010ecc:	3204      	adds	r2, #4
 8010ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ed2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010ed6:	e181      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ed8:	2303      	movs	r3, #3
 8010eda:	75fb      	strb	r3, [r7, #23]
            break;
 8010edc:	e17e      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	7a1b      	ldrb	r3, [r3, #8]
 8010ee2:	b25b      	sxtb	r3, r3
 8010ee4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ee6:	4ba0      	ldr	r3, [pc, #640]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010ee8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010eec:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010eee:	4b9e      	ldr	r3, [pc, #632]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ef4:	f107 0108 	add.w	r1, r7, #8
 8010ef8:	2207      	movs	r2, #7
 8010efa:	4618      	mov	r0, r3
 8010efc:	f002 fc4e 	bl	801379c <RegionVerify>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d019      	beq.n	8010f3a <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010f06:	4b98      	ldr	r3, [pc, #608]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	336c      	adds	r3, #108	; 0x6c
 8010f0c:	3204      	adds	r2, #4
 8010f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f12:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010f16:	4b94      	ldr	r3, [pc, #592]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f18:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	f040 8156 	bne.w	80111ce <LoRaMacMibSetRequestConfirm+0x65e>
 8010f22:	4b91      	ldr	r3, [pc, #580]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f24:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f000 8150 	beq.w	80111ce <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8010f2e:	4b8f      	ldr	r3, [pc, #572]	; (801116c <LoRaMacMibSetRequestConfirm+0x5fc>)
 8010f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f32:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8010f34:	f7fe fcda 	bl	800f8ec <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010f38:	e149      	b.n	80111ce <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f3a:	2303      	movs	r3, #3
 8010f3c:	75fb      	strb	r3, [r7, #23]
            break;
 8010f3e:	e146      	b.n	80111ce <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	7a1b      	ldrb	r3, [r3, #8]
 8010f44:	b25b      	sxtb	r3, r3
 8010f46:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010f48:	4b87      	ldr	r3, [pc, #540]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f4a:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010f4e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010f50:	4b85      	ldr	r3, [pc, #532]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f56:	f107 0108 	add.w	r1, r7, #8
 8010f5a:	2207      	movs	r2, #7
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f002 fc1d 	bl	801379c <RegionVerify>
 8010f62:	4603      	mov	r3, r0
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d008      	beq.n	8010f7a <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8010f68:	4b7f      	ldr	r3, [pc, #508]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	33ac      	adds	r3, #172	; 0xac
 8010f6e:	3204      	adds	r2, #4
 8010f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f74:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010f78:	e130      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	75fb      	strb	r3, [r7, #23]
            break;
 8010f7e:	e12d      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8010f86:	2301      	movs	r3, #1
 8010f88:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010f8a:	4b77      	ldr	r3, [pc, #476]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f90:	f107 020c 	add.w	r2, r7, #12
 8010f94:	4611      	mov	r1, r2
 8010f96:	4618      	mov	r0, r3
 8010f98:	f002 fc29 	bl	80137ee <RegionChanMaskSet>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	f083 0301 	eor.w	r3, r3, #1
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 8114 	beq.w	80111d2 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010faa:	2303      	movs	r3, #3
 8010fac:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010fae:	e110      	b.n	80111d2 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010fba:	4b6b      	ldr	r3, [pc, #428]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fc0:	f107 020c 	add.w	r2, r7, #12
 8010fc4:	4611      	mov	r1, r2
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f002 fc11 	bl	80137ee <RegionChanMaskSet>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	f083 0301 	eor.w	r3, r3, #1
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f000 80fe 	beq.w	80111d6 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010fda:	2303      	movs	r3, #3
 8010fdc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010fde:	e0fa      	b.n	80111d6 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	791b      	ldrb	r3, [r3, #4]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d009      	beq.n	8010ffc <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010fec:	2b0f      	cmp	r3, #15
 8010fee:	d805      	bhi.n	8010ffc <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	791a      	ldrb	r2, [r3, #4]
 8010ff4:	4b5c      	ldr	r3, [pc, #368]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010ff6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010ffa:	e0ef      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ffc:	2303      	movs	r3, #3
 8010ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8011000:	e0ec      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	4a58      	ldr	r2, [pc, #352]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011008:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801100a:	e0e7      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	4a55      	ldr	r2, [pc, #340]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011012:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011014:	e0e2      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	4a53      	ldr	r2, [pc, #332]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801101c:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801101e:	e0dd      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	4a50      	ldr	r2, [pc, #320]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011026:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011028:	e0d8      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	4a4e      	ldr	r2, [pc, #312]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011030:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8011032:	e0d3      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801103a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801103c:	4b4a      	ldr	r3, [pc, #296]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801103e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011042:	f107 0108 	add.w	r1, r7, #8
 8011046:	2206      	movs	r2, #6
 8011048:	4618      	mov	r0, r3
 801104a:	f002 fba7 	bl	801379c <RegionVerify>
 801104e:	4603      	mov	r3, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	d005      	beq.n	8011060 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011054:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011058:	4b43      	ldr	r3, [pc, #268]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801105a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801105e:	e0bd      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011060:	2303      	movs	r3, #3
 8011062:	75fb      	strb	r3, [r7, #23]
            break;
 8011064:	e0ba      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801106c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801106e:	4b3e      	ldr	r3, [pc, #248]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011070:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011074:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011076:	4b3c      	ldr	r3, [pc, #240]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011078:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801107c:	f107 0108 	add.w	r1, r7, #8
 8011080:	2205      	movs	r2, #5
 8011082:	4618      	mov	r0, r3
 8011084:	f002 fb8a 	bl	801379c <RegionVerify>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d005      	beq.n	801109a <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801108e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011092:	4b35      	ldr	r3, [pc, #212]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011098:	e0a0      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801109a:	2303      	movs	r3, #3
 801109c:	75fb      	strb	r3, [r7, #23]
            break;
 801109e:	e09d      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80110a6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80110a8:	4b2f      	ldr	r3, [pc, #188]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80110aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110ae:	f107 0108 	add.w	r1, r7, #8
 80110b2:	220a      	movs	r2, #10
 80110b4:	4618      	mov	r0, r3
 80110b6:	f002 fb71 	bl	801379c <RegionVerify>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d005      	beq.n	80110cc <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80110c0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80110c4:	4b28      	ldr	r3, [pc, #160]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80110c6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80110ca:	e087      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110cc:	2303      	movs	r3, #3
 80110ce:	75fb      	strb	r3, [r7, #23]
            break;
 80110d0:	e084      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80110d8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80110da:	4b23      	ldr	r3, [pc, #140]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80110dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110e0:	f107 0108 	add.w	r1, r7, #8
 80110e4:	2209      	movs	r2, #9
 80110e6:	4618      	mov	r0, r3
 80110e8:	f002 fb58 	bl	801379c <RegionVerify>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d005      	beq.n	80110fe <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80110f2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80110f6:	4b1c      	ldr	r3, [pc, #112]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80110f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80110fc:	e06e      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110fe:	2303      	movs	r3, #3
 8011100:	75fb      	strb	r3, [r7, #23]
            break;
 8011102:	e06b      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	4a17      	ldr	r2, [pc, #92]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801110a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 801110e:	4b16      	ldr	r3, [pc, #88]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011114:	4a14      	ldr	r2, [pc, #80]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011116:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011118:	e060      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	791a      	ldrb	r2, [r3, #4]
 801111e:	4b12      	ldr	r3, [pc, #72]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011120:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011124:	4b10      	ldr	r3, [pc, #64]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011126:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801112a:	4b0f      	ldr	r3, [pc, #60]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801112c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011130:	e054      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	4a0c      	ldr	r2, [pc, #48]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011138:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801113a:	e04f      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	4a09      	ldr	r2, [pc, #36]	; (8011168 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011142:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8011146:	e049      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d007      	beq.n	8011160 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	4618      	mov	r0, r3
 8011156:	f7fe fe27 	bl	800fda8 <RestoreNvmData>
 801115a:	4603      	mov	r3, r0
 801115c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801115e:	e03d      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011160:	2303      	movs	r3, #3
 8011162:	75fb      	strb	r3, [r7, #23]
            break;
 8011164:	e03a      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
 8011166:	bf00      	nop
 8011168:	2000095c 	.word	0x2000095c
 801116c:	0801b528 	.word	0x0801b528
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	799b      	ldrb	r3, [r3, #6]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d80d      	bhi.n	8011194 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011178:	4a1b      	ldr	r2, [pc, #108]	; (80111e8 <LoRaMacMibSetRequestConfirm+0x678>)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6858      	ldr	r0, [r3, #4]
 8011186:	f001 fc23 	bl	80129d0 <LoRaMacCryptoSetLrWanVersion>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d024      	beq.n	80111da <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011190:	2311      	movs	r3, #17
 8011192:	e024      	b.n	80111de <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011194:	2303      	movs	r3, #3
 8011196:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011198:	e01f      	b.n	80111da <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 fbe4 	bl	8011968 <LoRaMacMibClassBSetRequestConfirm>
 80111a0:	4603      	mov	r3, r0
 80111a2:	75fb      	strb	r3, [r7, #23]
            break;
 80111a4:	e01a      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111a6:	bf00      	nop
 80111a8:	e018      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111aa:	bf00      	nop
 80111ac:	e016      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111ae:	bf00      	nop
 80111b0:	e014      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111b2:	bf00      	nop
 80111b4:	e012      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111b6:	bf00      	nop
 80111b8:	e010      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111ba:	bf00      	nop
 80111bc:	e00e      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111be:	bf00      	nop
 80111c0:	e00c      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111c2:	bf00      	nop
 80111c4:	e00a      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111c6:	bf00      	nop
 80111c8:	e008      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111ca:	bf00      	nop
 80111cc:	e006      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111ce:	bf00      	nop
 80111d0:	e004      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111d2:	bf00      	nop
 80111d4:	e002      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111d6:	bf00      	nop
 80111d8:	e000      	b.n	80111dc <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80111da:	bf00      	nop
        }
    }
    return status;
 80111dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3718      	adds	r7, #24
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	2000095c 	.word	0x2000095c

080111ec <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80111f4:	2302      	movs	r3, #2
 80111f6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80111f8:	2300      	movs	r3, #0
 80111fa:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011202:	2303      	movs	r3, #3
 8011204:	e127      	b.n	8011456 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011206:	f7fc fd23 	bl	800dc50 <LoRaMacIsBusy>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011210:	2301      	movs	r3, #1
 8011212:	e120      	b.n	8011456 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011214:	f001 f8a6 	bl	8012364 <LoRaMacConfirmQueueIsFull>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 801121e:	2301      	movs	r3, #1
 8011220:	e119      	b.n	8011456 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011222:	f001 f893 	bl	801234c <LoRaMacConfirmQueueGetCnt>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d104      	bne.n	8011236 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801122c:	2214      	movs	r2, #20
 801122e:	2100      	movs	r1, #0
 8011230:	488b      	ldr	r0, [pc, #556]	; (8011460 <LoRaMacMlmeRequest+0x274>)
 8011232:	f004 fdbd 	bl	8015db0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011236:	4b8b      	ldr	r3, [pc, #556]	; (8011464 <LoRaMacMlmeRequest+0x278>)
 8011238:	2201      	movs	r2, #1
 801123a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801123e:	4a89      	ldr	r2, [pc, #548]	; (8011464 <LoRaMacMlmeRequest+0x278>)
 8011240:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011244:	f043 0304 	orr.w	r3, r3, #4
 8011248:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011256:	2300      	movs	r3, #0
 8011258:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	3b01      	subs	r3, #1
 8011260:	2b0d      	cmp	r3, #13
 8011262:	f200 80ce 	bhi.w	8011402 <LoRaMacMlmeRequest+0x216>
 8011266:	a201      	add	r2, pc, #4	; (adr r2, 801126c <LoRaMacMlmeRequest+0x80>)
 8011268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801126c:	080112a5 	.word	0x080112a5
 8011270:	08011403 	.word	0x08011403
 8011274:	08011403 	.word	0x08011403
 8011278:	0801130f 	.word	0x0801130f
 801127c:	0801132d 	.word	0x0801132d
 8011280:	0801133d 	.word	0x0801133d
 8011284:	08011403 	.word	0x08011403
 8011288:	08011403 	.word	0x08011403
 801128c:	08011403 	.word	0x08011403
 8011290:	08011359 	.word	0x08011359
 8011294:	08011403 	.word	0x08011403
 8011298:	080113d7 	.word	0x080113d7
 801129c:	08011377 	.word	0x08011377
 80112a0:	080113b9 	.word	0x080113b9
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80112a4:	4b6f      	ldr	r3, [pc, #444]	; (8011464 <LoRaMacMlmeRequest+0x278>)
 80112a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80112aa:	f003 0320 	and.w	r3, r3, #32
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80112b2:	2301      	movs	r3, #1
 80112b4:	e0cf      	b.n	8011456 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 80112b6:	f7fe f9fd 	bl	800f6b4 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80112ba:	4b6b      	ldr	r3, [pc, #428]	; (8011468 <LoRaMacMlmeRequest+0x27c>)
 80112bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	791b      	ldrb	r3, [r3, #4]
 80112c4:	b25b      	sxtb	r3, r3
 80112c6:	2200      	movs	r2, #0
 80112c8:	4619      	mov	r1, r3
 80112ca:	f002 fb4f 	bl	801396c <RegionAlternateDr>
 80112ce:	4603      	mov	r3, r0
 80112d0:	461a      	mov	r2, r3
 80112d2:	4b65      	ldr	r3, [pc, #404]	; (8011468 <LoRaMacMlmeRequest+0x27c>)
 80112d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80112d8:	2307      	movs	r3, #7
 80112da:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80112dc:	20ff      	movs	r0, #255	; 0xff
 80112de:	f7fd ff61 	bl	800f1a4 <SendReJoinReq>
 80112e2:	4603      	mov	r3, r0
 80112e4:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80112e6:	7dfb      	ldrb	r3, [r7, #23]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	f000 808c 	beq.w	8011406 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80112ee:	4b5e      	ldr	r3, [pc, #376]	; (8011468 <LoRaMacMlmeRequest+0x27c>)
 80112f0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	791b      	ldrb	r3, [r3, #4]
 80112f8:	b25b      	sxtb	r3, r3
 80112fa:	2201      	movs	r2, #1
 80112fc:	4619      	mov	r1, r3
 80112fe:	f002 fb35 	bl	801396c <RegionAlternateDr>
 8011302:	4603      	mov	r3, r0
 8011304:	461a      	mov	r2, r3
 8011306:	4b58      	ldr	r3, [pc, #352]	; (8011468 <LoRaMacMlmeRequest+0x27c>)
 8011308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 801130c:	e07b      	b.n	8011406 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801130e:	2300      	movs	r3, #0
 8011310:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011312:	f107 030c 	add.w	r3, r7, #12
 8011316:	2200      	movs	r2, #0
 8011318:	4619      	mov	r1, r3
 801131a:	2002      	movs	r0, #2
 801131c:	f000 fc88 	bl	8011c30 <LoRaMacCommandsAddCmd>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d071      	beq.n	801140a <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011326:	2313      	movs	r3, #19
 8011328:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801132a:	e06e      	b.n	801140a <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	889b      	ldrh	r3, [r3, #4]
 8011330:	4618      	mov	r0, r3
 8011332:	f7fe fcdb 	bl	800fcec <SetTxContinuousWave>
 8011336:	4603      	mov	r3, r0
 8011338:	75fb      	strb	r3, [r7, #23]
            break;
 801133a:	e06d      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	8898      	ldrh	r0, [r3, #4]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6899      	ldr	r1, [r3, #8]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801134a:	b2db      	uxtb	r3, r3
 801134c:	461a      	mov	r2, r3
 801134e:	f7fe fd01 	bl	800fd54 <SetTxContinuousWave1>
 8011352:	4603      	mov	r3, r0
 8011354:	75fb      	strb	r3, [r7, #23]
            break;
 8011356:	e05f      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801135c:	f107 030c 	add.w	r3, r7, #12
 8011360:	2200      	movs	r2, #0
 8011362:	4619      	mov	r1, r3
 8011364:	200d      	movs	r0, #13
 8011366:	f000 fc63 	bl	8011c30 <LoRaMacCommandsAddCmd>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d04e      	beq.n	801140e <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011370:	2313      	movs	r3, #19
 8011372:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011374:	e04b      	b.n	801140e <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011376:	4b3c      	ldr	r3, [pc, #240]	; (8011468 <LoRaMacMlmeRequest+0x27c>)
 8011378:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801137c:	2b00      	cmp	r3, #0
 801137e:	d148      	bne.n	8011412 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	791b      	ldrb	r3, [r3, #4]
 8011384:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	791b      	ldrb	r3, [r3, #4]
 801138a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801138e:	b2db      	uxtb	r3, r3
 8011390:	4618      	mov	r0, r3
 8011392:	f000 fabe 	bl	8011912 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011396:	7dbb      	ldrb	r3, [r7, #22]
 8011398:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801139a:	2300      	movs	r3, #0
 801139c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801139e:	f107 030c 	add.w	r3, r7, #12
 80113a2:	2201      	movs	r2, #1
 80113a4:	4619      	mov	r1, r3
 80113a6:	2010      	movs	r0, #16
 80113a8:	f000 fc42 	bl	8011c30 <LoRaMacCommandsAddCmd>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d02f      	beq.n	8011412 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113b2:	2313      	movs	r3, #19
 80113b4:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80113b6:	e02c      	b.n	8011412 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80113b8:	2300      	movs	r3, #0
 80113ba:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80113bc:	f107 030c 	add.w	r3, r7, #12
 80113c0:	2200      	movs	r2, #0
 80113c2:	4619      	mov	r1, r3
 80113c4:	2012      	movs	r0, #18
 80113c6:	f000 fc33 	bl	8011c30 <LoRaMacCommandsAddCmd>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d022      	beq.n	8011416 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113d0:	2313      	movs	r3, #19
 80113d2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113d4:	e01f      	b.n	8011416 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80113d6:	2301      	movs	r3, #1
 80113d8:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80113da:	f000 fa50 	bl	801187e <LoRaMacClassBIsAcquisitionInProgress>
 80113de:	4603      	mov	r3, r0
 80113e0:	f083 0301 	eor.w	r3, r3, #1
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d008      	beq.n	80113fc <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80113ea:	2000      	movs	r0, #0
 80113ec:	f000 fa29 	bl	8011842 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80113f0:	2000      	movs	r0, #0
 80113f2:	f000 fa4b 	bl	801188c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80113fa:	e00d      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 80113fc:	2301      	movs	r3, #1
 80113fe:	75fb      	strb	r3, [r7, #23]
            break;
 8011400:	e00a      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011402:	bf00      	nop
 8011404:	e008      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
            break;
 8011406:	bf00      	nop
 8011408:	e006      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
            break;
 801140a:	bf00      	nop
 801140c:	e004      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
            break;
 801140e:	bf00      	nop
 8011410:	e002      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
            break;
 8011412:	bf00      	nop
 8011414:	e000      	b.n	8011418 <LoRaMacMlmeRequest+0x22c>
            break;
 8011416:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011418:	4b12      	ldr	r3, [pc, #72]	; (8011464 <LoRaMacMlmeRequest+0x278>)
 801141a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011422:	7dfb      	ldrb	r3, [r7, #23]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d010      	beq.n	801144a <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011428:	f000 ff90 	bl	801234c <LoRaMacConfirmQueueGetCnt>
 801142c:	4603      	mov	r3, r0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d110      	bne.n	8011454 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011432:	4b0c      	ldr	r3, [pc, #48]	; (8011464 <LoRaMacMlmeRequest+0x278>)
 8011434:	2200      	movs	r2, #0
 8011436:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801143a:	4a0a      	ldr	r2, [pc, #40]	; (8011464 <LoRaMacMlmeRequest+0x278>)
 801143c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011440:	f36f 0382 	bfc	r3, #2, #1
 8011444:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011448:	e004      	b.n	8011454 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801144a:	f107 0310 	add.w	r3, r7, #16
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fe2e 	bl	80120b0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011454:	7dfb      	ldrb	r3, [r7, #23]
}
 8011456:	4618      	mov	r0, r3
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	200008a0 	.word	0x200008a0
 8011464:	20000454 	.word	0x20000454
 8011468:	2000095c 	.word	0x2000095c

0801146c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08c      	sub	sp, #48	; 0x30
 8011470:	af02      	add	r7, sp, #8
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	460b      	mov	r3, r1
 8011476:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011478:	2302      	movs	r3, #2
 801147a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801147e:	2300      	movs	r3, #0
 8011480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011484:	2300      	movs	r3, #0
 8011486:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011488:	2300      	movs	r3, #0
 801148a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 801148c:	2300      	movs	r3, #0
 801148e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d101      	bne.n	801149a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011496:	2303      	movs	r3, #3
 8011498:	e0d4      	b.n	8011644 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 801149a:	f7fc fbd9 	bl	800dc50 <LoRaMacIsBusy>
 801149e:	4603      	mov	r3, r0
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d001      	beq.n	80114a8 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80114a4:	2301      	movs	r3, #1
 80114a6:	e0cd      	b.n	8011644 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80114ac:	2214      	movs	r2, #20
 80114ae:	2100      	movs	r1, #0
 80114b0:	4866      	ldr	r0, [pc, #408]	; (801164c <LoRaMacMcpsRequest+0x1e0>)
 80114b2:	f004 fc7d 	bl	8015db0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114b6:	4b66      	ldr	r3, [pc, #408]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 80114b8:	2201      	movs	r2, #1
 80114ba:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80114be:	4b64      	ldr	r3, [pc, #400]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 80114c0:	2201      	movs	r2, #1
 80114c2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	781b      	ldrb	r3, [r3, #0]
 80114ca:	2b03      	cmp	r3, #3
 80114cc:	d03d      	beq.n	801154a <LoRaMacMcpsRequest+0xde>
 80114ce:	2b03      	cmp	r3, #3
 80114d0:	dc4f      	bgt.n	8011572 <LoRaMacMcpsRequest+0x106>
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d002      	beq.n	80114dc <LoRaMacMcpsRequest+0x70>
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d019      	beq.n	801150e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80114da:	e04a      	b.n	8011572 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80114dc:	2301      	movs	r3, #1
 80114de:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80114e0:	4b5b      	ldr	r3, [pc, #364]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 80114e2:	2201      	movs	r2, #1
 80114e4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80114e8:	7b3b      	ldrb	r3, [r7, #12]
 80114ea:	2202      	movs	r2, #2
 80114ec:	f362 1347 	bfi	r3, r2, #5, #3
 80114f0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	791b      	ldrb	r3, [r3, #4]
 80114f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	899b      	ldrh	r3, [r3, #12]
 8011504:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	7b9b      	ldrb	r3, [r3, #14]
 801150a:	777b      	strb	r3, [r7, #29]
            break;
 801150c:	e032      	b.n	8011574 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801150e:	2301      	movs	r3, #1
 8011510:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	7bdb      	ldrb	r3, [r3, #15]
 8011516:	2b08      	cmp	r3, #8
 8011518:	bf28      	it	cs
 801151a:	2308      	movcs	r3, #8
 801151c:	b2da      	uxtb	r2, r3
 801151e:	4b4c      	ldr	r3, [pc, #304]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 8011520:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011524:	7b3b      	ldrb	r3, [r7, #12]
 8011526:	2204      	movs	r2, #4
 8011528:	f362 1347 	bfi	r3, r2, #5, #3
 801152c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	791b      	ldrb	r3, [r3, #4]
 8011532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	899b      	ldrh	r3, [r3, #12]
 8011540:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	7b9b      	ldrb	r3, [r3, #14]
 8011546:	777b      	strb	r3, [r7, #29]
            break;
 8011548:	e014      	b.n	8011574 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801154a:	2301      	movs	r3, #1
 801154c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801154e:	4b40      	ldr	r3, [pc, #256]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 8011550:	2201      	movs	r2, #1
 8011552:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011556:	7b3b      	ldrb	r3, [r7, #12]
 8011558:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801155c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	891b      	ldrh	r3, [r3, #8]
 8011568:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	7a9b      	ldrb	r3, [r3, #10]
 801156e:	777b      	strb	r3, [r7, #29]
            break;
 8011570:	e000      	b.n	8011574 <LoRaMacMcpsRequest+0x108>
            break;
 8011572:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011574:	2302      	movs	r3, #2
 8011576:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011578:	4b36      	ldr	r3, [pc, #216]	; (8011654 <LoRaMacMcpsRequest+0x1e8>)
 801157a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801157e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011580:	4b34      	ldr	r3, [pc, #208]	; (8011654 <LoRaMacMcpsRequest+0x1e8>)
 8011582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011586:	f107 0214 	add.w	r2, r7, #20
 801158a:	4611      	mov	r1, r2
 801158c:	4618      	mov	r0, r3
 801158e:	f002 f8c9 	bl	8013724 <RegionGetPhyParam>
 8011592:	4603      	mov	r3, r0
 8011594:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	b25b      	sxtb	r3, r3
 801159a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801159e:	4293      	cmp	r3, r2
 80115a0:	bfb8      	it	lt
 80115a2:	4613      	movlt	r3, r2
 80115a4:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80115a6:	7f3b      	ldrb	r3, [r7, #28]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d044      	beq.n	8011636 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80115ac:	4b29      	ldr	r3, [pc, #164]	; (8011654 <LoRaMacMcpsRequest+0x1e8>)
 80115ae:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80115b2:	f083 0301 	eor.w	r3, r3, #1
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d019      	beq.n	80115f0 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80115bc:	7f7b      	ldrb	r3, [r7, #29]
 80115be:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80115c0:	4b24      	ldr	r3, [pc, #144]	; (8011654 <LoRaMacMcpsRequest+0x1e8>)
 80115c2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80115c6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80115c8:	4b22      	ldr	r3, [pc, #136]	; (8011654 <LoRaMacMcpsRequest+0x1e8>)
 80115ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115ce:	f107 0108 	add.w	r1, r7, #8
 80115d2:	2205      	movs	r2, #5
 80115d4:	4618      	mov	r0, r3
 80115d6:	f002 f8e1 	bl	801379c <RegionVerify>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d005      	beq.n	80115ec <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80115e0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80115e4:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <LoRaMacMcpsRequest+0x1e8>)
 80115e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80115ea:	e001      	b.n	80115f0 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80115ec:	2303      	movs	r3, #3
 80115ee:	e029      	b.n	8011644 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80115f0:	8bfa      	ldrh	r2, [r7, #30]
 80115f2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80115f6:	f107 000c 	add.w	r0, r7, #12
 80115fa:	78fb      	ldrb	r3, [r7, #3]
 80115fc:	9300      	str	r3, [sp, #0]
 80115fe:	4613      	mov	r3, r2
 8011600:	6a3a      	ldr	r2, [r7, #32]
 8011602:	f7fd fcef 	bl	800efe4 <Send>
 8011606:	4603      	mov	r3, r0
 8011608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 801160c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011610:	2b00      	cmp	r3, #0
 8011612:	d10c      	bne.n	801162e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	781a      	ldrb	r2, [r3, #0]
 8011618:	4b0d      	ldr	r3, [pc, #52]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 801161a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801161e:	4a0c      	ldr	r2, [pc, #48]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 8011620:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011624:	f043 0301 	orr.w	r3, r3, #1
 8011628:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 801162c:	e003      	b.n	8011636 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801162e:	4b08      	ldr	r3, [pc, #32]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 8011630:	2200      	movs	r2, #0
 8011632:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011636:	4b06      	ldr	r3, [pc, #24]	; (8011650 <LoRaMacMcpsRequest+0x1e4>)
 8011638:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	611a      	str	r2, [r3, #16]

    return status;
 8011640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011644:	4618      	mov	r0, r3
 8011646:	3728      	adds	r7, #40	; 0x28
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	2000088c 	.word	0x2000088c
 8011650:	20000454 	.word	0x20000454
 8011654:	2000095c 	.word	0x2000095c

08011658 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	4603      	mov	r3, r0
 8011660:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011662:	79fb      	ldrb	r3, [r7, #7]
 8011664:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011666:	4b0a      	ldr	r3, [pc, #40]	; (8011690 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801166c:	f107 010c 	add.w	r1, r7, #12
 8011670:	220f      	movs	r2, #15
 8011672:	4618      	mov	r0, r3
 8011674:	f002 f892 	bl	801379c <RegionVerify>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d003      	beq.n	8011686 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801167e:	4a04      	ldr	r2, [pc, #16]	; (8011690 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011680:	79fb      	ldrb	r3, [r7, #7]
 8011682:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011686:	bf00      	nop
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	2000095c 	.word	0x2000095c

08011694 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b08c      	sub	sp, #48	; 0x30
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
 80116a0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80116a2:	2300      	movs	r3, #0
 80116a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	7c1b      	ldrb	r3, [r3, #16]
 80116ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	7c5b      	ldrb	r3, [r3, #17]
 80116b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	689a      	ldr	r2, [r3, #8]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	795b      	ldrb	r3, [r3, #5]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f000 808b 	beq.w	80117e0 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80116ca:	2302      	movs	r3, #2
 80116cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	7c9b      	ldrb	r3, [r3, #18]
 80116d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	7cdb      	ldrb	r3, [r3, #19]
 80116dc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80116e0:	4611      	mov	r1, r2
 80116e2:	4618      	mov	r0, r3
 80116e4:	f002 f81e 	bl	8013724 <RegionGetPhyParam>
 80116e8:	4603      	mov	r3, r0
 80116ea:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80116ec:	6a3b      	ldr	r3, [r7, #32]
 80116ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80116f2:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80116f6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80116fa:	4293      	cmp	r3, r2
 80116fc:	bfb8      	it	lt
 80116fe:	4613      	movlt	r3, r2
 8011700:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011704:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011708:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801170c:	429a      	cmp	r2, r3
 801170e:	d106      	bne.n	801171e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011716:	2300      	movs	r3, #0
 8011718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801171c:	e060      	b.n	80117e0 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	8992      	ldrh	r2, [r2, #12]
 8011726:	4293      	cmp	r3, r2
 8011728:	d303      	bcc.n	8011732 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801172a:	2301      	movs	r3, #1
 801172c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011730:	e002      	b.n	8011738 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011732:	2300      	movs	r3, #0
 8011734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	8992      	ldrh	r2, [r2, #12]
 8011740:	4611      	mov	r1, r2
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	89d2      	ldrh	r2, [r2, #14]
 8011746:	440a      	add	r2, r1
 8011748:	4293      	cmp	r3, r2
 801174a:	d349      	bcc.n	80117e0 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801174c:	2308      	movs	r3, #8
 801174e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	7cdb      	ldrb	r3, [r3, #19]
 8011756:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f001 ffe1 	bl	8013724 <RegionGetPhyParam>
 8011762:	4603      	mov	r3, r0
 8011764:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011766:	6a3b      	ldr	r3, [r7, #32]
 8011768:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	89d2      	ldrh	r2, [r2, #14]
 8011774:	fbb3 f1f2 	udiv	r1, r3, r2
 8011778:	fb02 f201 	mul.w	r2, r2, r1
 801177c:	1a9b      	subs	r3, r3, r2
 801177e:	2b01      	cmp	r3, #1
 8011780:	d12e      	bne.n	80117e0 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011782:	2322      	movs	r3, #34	; 0x22
 8011784:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011788:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801178c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	7c9b      	ldrb	r3, [r3, #18]
 8011794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	7cdb      	ldrb	r3, [r3, #19]
 801179c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80117a0:	4611      	mov	r1, r2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f001 ffbe 	bl	8013724 <RegionGetPhyParam>
 80117a8:	4603      	mov	r3, r0
 80117aa:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80117ac:	6a3b      	ldr	r3, [r7, #32]
 80117ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 80117b2:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80117b6:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d110      	bne.n	80117e0 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80117be:	2300      	movs	r3, #0
 80117c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	791b      	ldrb	r3, [r3, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d009      	beq.n	80117e0 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80117cc:	2302      	movs	r3, #2
 80117ce:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	7cdb      	ldrb	r3, [r3, #19]
 80117d4:	f107 0214 	add.w	r2, r7, #20
 80117d8:	4611      	mov	r1, r2
 80117da:	4618      	mov	r0, r3
 80117dc:	f001 ffcc 	bl	8013778 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80117e6:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80117ee:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80117f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3730      	adds	r7, #48	; 0x30
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	60f8      	str	r0, [r7, #12]
 8011804:	60b9      	str	r1, [r7, #8]
 8011806:	607a      	str	r2, [r7, #4]
 8011808:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	789b      	ldrb	r3, [r3, #2]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d107      	bne.n	8011822 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	68b9      	ldr	r1, [r7, #8]
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7ff ff3b 	bl	8011694 <CalcNextV10X>
 801181e:	4603      	mov	r3, r0
 8011820:	e000      	b.n	8011824 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011822:	2300      	movs	r3, #0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 801182c:	b480      	push	{r7}
 801182e:	b085      	sub	sp, #20
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011838:	bf00      	nop
 801183a:	3714      	adds	r7, #20
 801183c:	46bd      	mov	sp, r7
 801183e:	bc80      	pop	{r7}
 8011840:	4770      	bx	lr

08011842 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011842:	b480      	push	{r7}
 8011844:	b083      	sub	sp, #12
 8011846:	af00      	add	r7, sp, #0
 8011848:	4603      	mov	r3, r0
 801184a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801184c:	bf00      	nop
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	bc80      	pop	{r7}
 8011854:	4770      	bx	lr

08011856 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011856:	b480      	push	{r7}
 8011858:	b083      	sub	sp, #12
 801185a:	af00      	add	r7, sp, #0
 801185c:	4603      	mov	r3, r0
 801185e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011860:	bf00      	nop
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	bc80      	pop	{r7}
 8011868:	4770      	bx	lr

0801186a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801186a:	b480      	push	{r7}
 801186c:	b083      	sub	sp, #12
 801186e:	af00      	add	r7, sp, #0
 8011870:	4603      	mov	r3, r0
 8011872:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011874:	bf00      	nop
 8011876:	370c      	adds	r7, #12
 8011878:	46bd      	mov	sp, r7
 801187a:	bc80      	pop	{r7}
 801187c:	4770      	bx	lr

0801187e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801187e:	b480      	push	{r7}
 8011880:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011882:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011884:	4618      	mov	r0, r3
 8011886:	46bd      	mov	sp, r7
 8011888:	bc80      	pop	{r7}
 801188a:	4770      	bx	lr

0801188c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011894:	bf00      	nop
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	bc80      	pop	{r7}
 801189c:	4770      	bx	lr

0801189e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801189e:	b480      	push	{r7}
 80118a0:	b083      	sub	sp, #12
 80118a2:	af00      	add	r7, sp, #0
 80118a4:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80118a6:	bf00      	nop
 80118a8:	370c      	adds	r7, #12
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bc80      	pop	{r7}
 80118ae:	4770      	bx	lr

080118b0 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80118b8:	bf00      	nop
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	bc80      	pop	{r7}
 80118c0:	4770      	bx	lr

080118c2 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80118c2:	b480      	push	{r7}
 80118c4:	b083      	sub	sp, #12
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	460b      	mov	r3, r1
 80118cc:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80118ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	370c      	adds	r7, #12
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bc80      	pop	{r7}
 80118d8:	4770      	bx	lr

080118da <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80118da:	b480      	push	{r7}
 80118dc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80118de:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bc80      	pop	{r7}
 80118e6:	4770      	bx	lr

080118e8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80118e8:	b480      	push	{r7}
 80118ea:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80118ec:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bc80      	pop	{r7}
 80118f4:	4770      	bx	lr

080118f6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80118f6:	b480      	push	{r7}
 80118f8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80118fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	46bd      	mov	sp, r7
 8011900:	bc80      	pop	{r7}
 8011902:	4770      	bx	lr

08011904 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011904:	b480      	push	{r7}
 8011906:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011908:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801190a:	4618      	mov	r0, r3
 801190c:	46bd      	mov	sp, r7
 801190e:	bc80      	pop	{r7}
 8011910:	4770      	bx	lr

08011912 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011912:	b480      	push	{r7}
 8011914:	b083      	sub	sp, #12
 8011916:	af00      	add	r7, sp, #0
 8011918:	4603      	mov	r3, r0
 801191a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801191c:	bf00      	nop
 801191e:	370c      	adds	r7, #12
 8011920:	46bd      	mov	sp, r7
 8011922:	bc80      	pop	{r7}
 8011924:	4770      	bx	lr

08011926 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011926:	b480      	push	{r7}
 8011928:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801192a:	bf00      	nop
 801192c:	46bd      	mov	sp, r7
 801192e:	bc80      	pop	{r7}
 8011930:	4770      	bx	lr

08011932 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011932:	b480      	push	{r7}
 8011934:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011936:	bf00      	nop
 8011938:	46bd      	mov	sp, r7
 801193a:	bc80      	pop	{r7}
 801193c:	4770      	bx	lr

0801193e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801193e:	b480      	push	{r7}
 8011940:	b083      	sub	sp, #12
 8011942:	af00      	add	r7, sp, #0
 8011944:	4603      	mov	r3, r0
 8011946:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011948:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	bc80      	pop	{r7}
 8011952:	4770      	bx	lr

08011954 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801195c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801195e:	4618      	mov	r0, r3
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	bc80      	pop	{r7}
 8011966:	4770      	bx	lr

08011968 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011970:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	bc80      	pop	{r7}
 801197a:	4770      	bx	lr

0801197c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801197c:	b480      	push	{r7}
 801197e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011980:	bf00      	nop
 8011982:	46bd      	mov	sp, r7
 8011984:	bc80      	pop	{r7}
 8011986:	4770      	bx	lr

08011988 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	4603      	mov	r3, r0
 8011990:	6039      	str	r1, [r7, #0]
 8011992:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011994:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	bc80      	pop	{r7}
 801199e:	4770      	bx	lr

080119a0 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	4603      	mov	r3, r0
 80119a8:	603a      	str	r2, [r7, #0]
 80119aa:	80fb      	strh	r3, [r7, #6]
 80119ac:	460b      	mov	r3, r1
 80119ae:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bc80      	pop	{r7}
 80119b8:	4770      	bx	lr

080119ba <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80119ba:	b480      	push	{r7}
 80119bc:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119be:	bf00      	nop
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bc80      	pop	{r7}
 80119c4:	4770      	bx	lr

080119c6 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80119c6:	b480      	push	{r7}
 80119c8:	b083      	sub	sp, #12
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80119ce:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bc80      	pop	{r7}
 80119d8:	4770      	bx	lr

080119da <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80119da:	b480      	push	{r7}
 80119dc:	b083      	sub	sp, #12
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80119e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	370c      	adds	r7, #12
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bc80      	pop	{r7}
 80119ec:	4770      	bx	lr

080119ee <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80119ee:	b480      	push	{r7}
 80119f0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119f2:	bf00      	nop
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bc80      	pop	{r7}
 80119f8:	4770      	bx	lr

080119fa <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 80119fa:	b480      	push	{r7}
 80119fc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80119fe:	bf00      	nop
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bc80      	pop	{r7}
 8011a04:	4770      	bx	lr

08011a06 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011a06:	b480      	push	{r7}
 8011a08:	b085      	sub	sp, #20
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011a12:	2300      	movs	r3, #0
 8011a14:	81fb      	strh	r3, [r7, #14]
 8011a16:	e00a      	b.n	8011a2e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011a18:	89fb      	ldrh	r3, [r7, #14]
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d001      	beq.n	8011a28 <IsSlotFree+0x22>
        {
            return false;
 8011a24:	2300      	movs	r3, #0
 8011a26:	e006      	b.n	8011a36 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011a28:	89fb      	ldrh	r3, [r7, #14]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	81fb      	strh	r3, [r7, #14]
 8011a2e:	89fb      	ldrh	r3, [r7, #14]
 8011a30:	2b0f      	cmp	r3, #15
 8011a32:	d9f1      	bls.n	8011a18 <IsSlotFree+0x12>
        }
    }
    return true;
 8011a34:	2301      	movs	r3, #1
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bc80      	pop	{r7}
 8011a3e:	4770      	bx	lr

08011a40 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011a46:	2300      	movs	r3, #0
 8011a48:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011a4a:	e007      	b.n	8011a5c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011a4c:	79fb      	ldrb	r3, [r7, #7]
 8011a4e:	3301      	adds	r3, #1
 8011a50:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011a52:	79fb      	ldrb	r3, [r7, #7]
 8011a54:	2b0f      	cmp	r3, #15
 8011a56:	d101      	bne.n	8011a5c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	e012      	b.n	8011a82 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011a5c:	79fb      	ldrb	r3, [r7, #7]
 8011a5e:	011b      	lsls	r3, r3, #4
 8011a60:	3308      	adds	r3, #8
 8011a62:	4a0a      	ldr	r2, [pc, #40]	; (8011a8c <MallocNewMacCommandSlot+0x4c>)
 8011a64:	4413      	add	r3, r2
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7ff ffcd 	bl	8011a06 <IsSlotFree>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	f083 0301 	eor.w	r3, r3, #1
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1e9      	bne.n	8011a4c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8011a78:	79fb      	ldrb	r3, [r7, #7]
 8011a7a:	011b      	lsls	r3, r3, #4
 8011a7c:	3308      	adds	r3, #8
 8011a7e:	4a03      	ldr	r2, [pc, #12]	; (8011a8c <MallocNewMacCommandSlot+0x4c>)
 8011a80:	4413      	add	r3, r2
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3708      	adds	r7, #8
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	20000cac 	.word	0x20000cac

08011a90 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d101      	bne.n	8011aa2 <FreeMacCommandSlot+0x12>
    {
        return false;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e005      	b.n	8011aae <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011aa2:	2210      	movs	r2, #16
 8011aa4:	2100      	movs	r1, #0
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f004 f982 	bl	8015db0 <memset1>

    return true;
 8011aac:	2301      	movs	r3, #1
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	3708      	adds	r7, #8
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}

08011ab6 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b083      	sub	sp, #12
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d101      	bne.n	8011ac8 <LinkedListInit+0x12>
    {
        return false;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	e006      	b.n	8011ad6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2200      	movs	r2, #0
 8011acc:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	605a      	str	r2, [r3, #4]

    return true;
 8011ad4:	2301      	movs	r3, #1
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	370c      	adds	r7, #12
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bc80      	pop	{r7}
 8011ade:	4770      	bx	lr

08011ae0 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d002      	beq.n	8011af6 <LinkedListAdd+0x16>
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d101      	bne.n	8011afa <LinkedListAdd+0x1a>
    {
        return false;
 8011af6:	2300      	movs	r3, #0
 8011af8:	e015      	b.n	8011b26 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d102      	bne.n	8011b08 <LinkedListAdd+0x28>
    {
        list->First = element;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	683a      	ldr	r2, [r7, #0]
 8011b06:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d003      	beq.n	8011b18 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	683a      	ldr	r2, [r7, #0]
 8011b16:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	683a      	ldr	r2, [r7, #0]
 8011b22:	605a      	str	r2, [r3, #4]

    return true;
 8011b24:	2301      	movs	r3, #1
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bc80      	pop	{r7}
 8011b2e:	4770      	bx	lr

08011b30 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d002      	beq.n	8011b46 <LinkedListGetPrevious+0x16>
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d101      	bne.n	8011b4a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8011b46:	2300      	movs	r3, #0
 8011b48:	e016      	b.n	8011b78 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d00c      	beq.n	8011b72 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011b58:	e002      	b.n	8011b60 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d007      	beq.n	8011b76 <LinkedListGetPrevious+0x46>
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	683a      	ldr	r2, [r7, #0]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d1f4      	bne.n	8011b5a <LinkedListGetPrevious+0x2a>
 8011b70:	e001      	b.n	8011b76 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8011b72:	2300      	movs	r3, #0
 8011b74:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8011b76:	68fb      	ldr	r3, [r7, #12]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bc80      	pop	{r7}
 8011b80:	4770      	bx	lr

08011b82 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b084      	sub	sp, #16
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
 8011b8a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d002      	beq.n	8011b98 <LinkedListRemove+0x16>
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d101      	bne.n	8011b9c <LinkedListRemove+0x1a>
    {
        return false;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	e020      	b.n	8011bde <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8011b9c:	6839      	ldr	r1, [r7, #0]
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7ff ffc6 	bl	8011b30 <LinkedListGetPrevious>
 8011ba4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	683a      	ldr	r2, [r7, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d103      	bne.n	8011bb8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	683a      	ldr	r2, [r7, #0]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d102      	bne.n	8011bc8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	601a      	str	r2, [r3, #0]

    return true;
 8011bdc:	2301      	movs	r3, #1
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8011be6:	b480      	push	{r7}
 8011be8:	b083      	sub	sp, #12
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	4603      	mov	r3, r0
 8011bee:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8011bf0:	79fb      	ldrb	r3, [r7, #7]
 8011bf2:	2b05      	cmp	r3, #5
 8011bf4:	d004      	beq.n	8011c00 <IsSticky+0x1a>
 8011bf6:	2b05      	cmp	r3, #5
 8011bf8:	db04      	blt.n	8011c04 <IsSticky+0x1e>
 8011bfa:	3b08      	subs	r3, #8
 8011bfc:	2b02      	cmp	r3, #2
 8011bfe:	d801      	bhi.n	8011c04 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8011c00:	2301      	movs	r3, #1
 8011c02:	e000      	b.n	8011c06 <IsSticky+0x20>
        default:
            return false;
 8011c04:	2300      	movs	r3, #0
    }
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	370c      	adds	r7, #12
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bc80      	pop	{r7}
 8011c0e:	4770      	bx	lr

08011c10 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011c14:	22fc      	movs	r2, #252	; 0xfc
 8011c16:	2100      	movs	r1, #0
 8011c18:	4804      	ldr	r0, [pc, #16]	; (8011c2c <LoRaMacCommandsInit+0x1c>)
 8011c1a:	f004 f8c9 	bl	8015db0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011c1e:	4803      	ldr	r0, [pc, #12]	; (8011c2c <LoRaMacCommandsInit+0x1c>)
 8011c20:	f7ff ff49 	bl	8011ab6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011c24:	2300      	movs	r3, #0
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	20000cac 	.word	0x20000cac

08011c30 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	4603      	mov	r3, r0
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	607a      	str	r2, [r7, #4]
 8011c3c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d101      	bne.n	8011c48 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011c44:	2301      	movs	r3, #1
 8011c46:	e033      	b.n	8011cb0 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8011c48:	f7ff fefa 	bl	8011a40 <MallocNewMacCommandSlot>
 8011c4c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d101      	bne.n	8011c58 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011c54:	2302      	movs	r3, #2
 8011c56:	e02b      	b.n	8011cb0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011c58:	6979      	ldr	r1, [r7, #20]
 8011c5a:	4817      	ldr	r0, [pc, #92]	; (8011cb8 <LoRaMacCommandsAddCmd+0x88>)
 8011c5c:	f7ff ff40 	bl	8011ae0 <LinkedListAdd>
 8011c60:	4603      	mov	r3, r0
 8011c62:	f083 0301 	eor.w	r3, r3, #1
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011c6c:	2305      	movs	r3, #5
 8011c6e:	e01f      	b.n	8011cb0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	7bfa      	ldrb	r2, [r7, #15]
 8011c74:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	3305      	adds	r3, #5
 8011c80:	687a      	ldr	r2, [r7, #4]
 8011c82:	b292      	uxth	r2, r2
 8011c84:	68b9      	ldr	r1, [r7, #8]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f004 f857 	bl	8015d3a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8011c8c:	7bfb      	ldrb	r3, [r7, #15]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ff ffa9 	bl	8011be6 <IsSticky>
 8011c94:	4603      	mov	r3, r0
 8011c96:	461a      	mov	r2, r3
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8011c9c:	4b06      	ldr	r3, [pc, #24]	; (8011cb8 <LoRaMacCommandsAddCmd+0x88>)
 8011c9e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	4a03      	ldr	r2, [pc, #12]	; (8011cb8 <LoRaMacCommandsAddCmd+0x88>)
 8011caa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3718      	adds	r7, #24
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	20000cac 	.word	0x20000cac

08011cbc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d101      	bne.n	8011cce <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e021      	b.n	8011d12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8011cce:	6879      	ldr	r1, [r7, #4]
 8011cd0:	4812      	ldr	r0, [pc, #72]	; (8011d1c <LoRaMacCommandsRemoveCmd+0x60>)
 8011cd2:	f7ff ff56 	bl	8011b82 <LinkedListRemove>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	f083 0301 	eor.w	r3, r3, #1
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d001      	beq.n	8011ce6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011ce2:	2303      	movs	r3, #3
 8011ce4:	e015      	b.n	8011d12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011ce6:	4b0d      	ldr	r3, [pc, #52]	; (8011d1c <LoRaMacCommandsRemoveCmd+0x60>)
 8011ce8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	1ad3      	subs	r3, r2, r3
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	4a09      	ldr	r2, [pc, #36]	; (8011d1c <LoRaMacCommandsRemoveCmd+0x60>)
 8011cf6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f7ff fec8 	bl	8011a90 <FreeMacCommandSlot>
 8011d00:	4603      	mov	r3, r0
 8011d02:	f083 0301 	eor.w	r3, r3, #1
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d001      	beq.n	8011d10 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011d0c:	2305      	movs	r3, #5
 8011d0e:	e000      	b.n	8011d12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011d10:	2300      	movs	r3, #0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	20000cac 	.word	0x20000cac

08011d20 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011d26:	4b0f      	ldr	r3, [pc, #60]	; (8011d64 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011d2c:	e012      	b.n	8011d54 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	7b1b      	ldrb	r3, [r3, #12]
 8011d32:	f083 0301 	eor.w	r3, r3, #1
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d008      	beq.n	8011d4e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f7ff ffba 	bl	8011cbc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	607b      	str	r3, [r7, #4]
 8011d4c:	e002      	b.n	8011d54 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d1e9      	bne.n	8011d2e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011d5a:	2300      	movs	r3, #0
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20000cac 	.word	0x20000cac

08011d68 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011d6e:	4b0e      	ldr	r3, [pc, #56]	; (8011da8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8011d74:	e00f      	b.n	8011d96 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	791b      	ldrb	r3, [r3, #4]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7ff ff30 	bl	8011be6 <IsSticky>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d002      	beq.n	8011d92 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f7ff ff95 	bl	8011cbc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1ec      	bne.n	8011d76 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3708      	adds	r7, #8
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20000cac 	.word	0x20000cac

08011dac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8011dac:	b480      	push	{r7}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d101      	bne.n	8011dbe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e005      	b.n	8011dca <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8011dbe:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8011dc0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8011dc8:	2300      	movs	r3, #0
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	370c      	adds	r7, #12
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bc80      	pop	{r7}
 8011dd2:	4770      	bx	lr
 8011dd4:	20000cac 	.word	0x20000cac

08011dd8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b088      	sub	sp, #32
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011de4:	4b25      	ldr	r3, [pc, #148]	; (8011e7c <LoRaMacCommandsSerializeCmds+0xa4>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8011dea:	2300      	movs	r3, #0
 8011dec:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d002      	beq.n	8011dfa <LoRaMacCommandsSerializeCmds+0x22>
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d126      	bne.n	8011e48 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e039      	b.n	8011e72 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8011dfe:	7efb      	ldrb	r3, [r7, #27]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	1ad2      	subs	r2, r2, r3
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	3301      	adds	r3, #1
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d320      	bcc.n	8011e50 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8011e0e:	7efb      	ldrb	r3, [r7, #27]
 8011e10:	1c5a      	adds	r2, r3, #1
 8011e12:	76fa      	strb	r2, [r7, #27]
 8011e14:	461a      	mov	r2, r3
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	4413      	add	r3, r2
 8011e1a:	69fa      	ldr	r2, [r7, #28]
 8011e1c:	7912      	ldrb	r2, [r2, #4]
 8011e1e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8011e20:	7efb      	ldrb	r3, [r7, #27]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	18d0      	adds	r0, r2, r3
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	1d59      	adds	r1, r3, #5
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	461a      	mov	r2, r3
 8011e32:	f003 ff82 	bl	8015d3a <memcpy1>
            itr += curElement->PayloadSize;
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	689b      	ldr	r3, [r3, #8]
 8011e3a:	b2da      	uxtb	r2, r3
 8011e3c:	7efb      	ldrb	r3, [r7, #27]
 8011e3e:	4413      	add	r3, r2
 8011e40:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d1d7      	bne.n	8011dfe <LoRaMacCommandsSerializeCmds+0x26>
 8011e4e:	e009      	b.n	8011e64 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8011e50:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8011e52:	e007      	b.n	8011e64 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8011e54:	69fb      	ldr	r3, [r7, #28]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8011e5a:	69f8      	ldr	r0, [r7, #28]
 8011e5c:	f7ff ff2e 	bl	8011cbc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d1f4      	bne.n	8011e54 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8011e6a:	68b8      	ldr	r0, [r7, #8]
 8011e6c:	f7ff ff9e 	bl	8011dac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3720      	adds	r7, #32
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20000cac 	.word	0x20000cac

08011e80 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8011e80:	b480      	push	{r7}
 8011e82:	b085      	sub	sp, #20
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e016      	b.n	8011ec0 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8011e92:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8011e9e:	e00b      	b.n	8011eb8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	7b1b      	ldrb	r3, [r3, #12]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	e006      	b.n	8011ec0 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1f0      	bne.n	8011ea0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3714      	adds	r7, #20
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bc80      	pop	{r7}
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	20000cac 	.word	0x20000cac

08011ed0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b085      	sub	sp, #20
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8011ede:	79fb      	ldrb	r3, [r7, #7]
 8011ee0:	3b02      	subs	r3, #2
 8011ee2:	2b11      	cmp	r3, #17
 8011ee4:	d850      	bhi.n	8011f88 <LoRaMacCommandsGetCmdSize+0xb8>
 8011ee6:	a201      	add	r2, pc, #4	; (adr r2, 8011eec <LoRaMacCommandsGetCmdSize+0x1c>)
 8011ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eec:	08011f35 	.word	0x08011f35
 8011ef0:	08011f3b 	.word	0x08011f3b
 8011ef4:	08011f41 	.word	0x08011f41
 8011ef8:	08011f47 	.word	0x08011f47
 8011efc:	08011f4d 	.word	0x08011f4d
 8011f00:	08011f53 	.word	0x08011f53
 8011f04:	08011f59 	.word	0x08011f59
 8011f08:	08011f5f 	.word	0x08011f5f
 8011f0c:	08011f65 	.word	0x08011f65
 8011f10:	08011f89 	.word	0x08011f89
 8011f14:	08011f89 	.word	0x08011f89
 8011f18:	08011f6b 	.word	0x08011f6b
 8011f1c:	08011f89 	.word	0x08011f89
 8011f20:	08011f89 	.word	0x08011f89
 8011f24:	08011f71 	.word	0x08011f71
 8011f28:	08011f77 	.word	0x08011f77
 8011f2c:	08011f7d 	.word	0x08011f7d
 8011f30:	08011f83 	.word	0x08011f83
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8011f34:	2303      	movs	r3, #3
 8011f36:	73fb      	strb	r3, [r7, #15]
            break;
 8011f38:	e027      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8011f3a:	2305      	movs	r3, #5
 8011f3c:	73fb      	strb	r3, [r7, #15]
            break;
 8011f3e:	e024      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8011f40:	2302      	movs	r3, #2
 8011f42:	73fb      	strb	r3, [r7, #15]
            break;
 8011f44:	e021      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8011f46:	2305      	movs	r3, #5
 8011f48:	73fb      	strb	r3, [r7, #15]
            break;
 8011f4a:	e01e      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	73fb      	strb	r3, [r7, #15]
            break;
 8011f50:	e01b      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8011f52:	2306      	movs	r3, #6
 8011f54:	73fb      	strb	r3, [r7, #15]
            break;
 8011f56:	e018      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8011f58:	2302      	movs	r3, #2
 8011f5a:	73fb      	strb	r3, [r7, #15]
            break;
 8011f5c:	e015      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8011f5e:	2302      	movs	r3, #2
 8011f60:	73fb      	strb	r3, [r7, #15]
            break;
 8011f62:	e012      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8011f64:	2305      	movs	r3, #5
 8011f66:	73fb      	strb	r3, [r7, #15]
            break;
 8011f68:	e00f      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8011f6a:	2306      	movs	r3, #6
 8011f6c:	73fb      	strb	r3, [r7, #15]
            break;
 8011f6e:	e00c      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8011f70:	2301      	movs	r3, #1
 8011f72:	73fb      	strb	r3, [r7, #15]
            break;
 8011f74:	e009      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8011f76:	2305      	movs	r3, #5
 8011f78:	73fb      	strb	r3, [r7, #15]
            break;
 8011f7a:	e006      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8011f7c:	2304      	movs	r3, #4
 8011f7e:	73fb      	strb	r3, [r7, #15]
            break;
 8011f80:	e003      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8011f82:	2304      	movs	r3, #4
 8011f84:	73fb      	strb	r3, [r7, #15]
            break;
 8011f86:	e000      	b.n	8011f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8011f88:	bf00      	nop
        }
    }
    return cidSize;
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3714      	adds	r7, #20
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bc80      	pop	{r7}
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop

08011f98 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	4a07      	ldr	r2, [pc, #28]	; (8011fc0 <IncreaseBufferPointer+0x28>)
 8011fa4:	4293      	cmp	r3, r2
 8011fa6:	d102      	bne.n	8011fae <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011fa8:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <IncreaseBufferPointer+0x2c>)
 8011faa:	607b      	str	r3, [r7, #4]
 8011fac:	e002      	b.n	8011fb4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	3304      	adds	r3, #4
 8011fb2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8011fb4:	687b      	ldr	r3, [r7, #4]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	370c      	adds	r7, #12
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bc80      	pop	{r7}
 8011fbe:	4770      	bx	lr
 8011fc0:	20000dc4 	.word	0x20000dc4
 8011fc4:	20000db4 	.word	0x20000db4

08011fc8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	4603      	mov	r3, r0
 8011fd0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d101      	bne.n	8011fdc <IsListEmpty+0x14>
    {
        return true;
 8011fd8:	2301      	movs	r3, #1
 8011fda:	e000      	b.n	8011fde <IsListEmpty+0x16>
    }
    return false;
 8011fdc:	2300      	movs	r3, #0
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	370c      	adds	r7, #12
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bc80      	pop	{r7}
 8011fe6:	4770      	bx	lr

08011fe8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8011ff2:	79fb      	ldrb	r3, [r7, #7]
 8011ff4:	2b04      	cmp	r3, #4
 8011ff6:	d901      	bls.n	8011ffc <IsListFull+0x14>
    {
        return true;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e000      	b.n	8011ffe <IsListFull+0x16>
    }
    return false;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	370c      	adds	r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	bc80      	pop	{r7}
 8012006:	4770      	bx	lr

08012008 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	4603      	mov	r3, r0
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	607a      	str	r2, [r7, #4]
 8012014:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801201a:	4b13      	ldr	r3, [pc, #76]	; (8012068 <GetElement+0x60>)
 801201c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff ffd1 	bl	8011fc8 <IsListEmpty>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d001      	beq.n	8012030 <GetElement+0x28>
    {
        return NULL;
 801202c:	2300      	movs	r3, #0
 801202e:	e017      	b.n	8012060 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012030:	2300      	movs	r3, #0
 8012032:	74fb      	strb	r3, [r7, #19]
 8012034:	e00d      	b.n	8012052 <GetElement+0x4a>
    {
        if( element->Request == request )
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	7bfa      	ldrb	r2, [r7, #15]
 801203c:	429a      	cmp	r2, r3
 801203e:	d101      	bne.n	8012044 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	e00d      	b.n	8012060 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012044:	6978      	ldr	r0, [r7, #20]
 8012046:	f7ff ffa7 	bl	8011f98 <IncreaseBufferPointer>
 801204a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801204c:	7cfb      	ldrb	r3, [r7, #19]
 801204e:	3301      	adds	r3, #1
 8012050:	74fb      	strb	r3, [r7, #19]
 8012052:	4b05      	ldr	r3, [pc, #20]	; (8012068 <GetElement+0x60>)
 8012054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012058:	7cfa      	ldrb	r2, [r7, #19]
 801205a:	429a      	cmp	r2, r3
 801205c:	d3eb      	bcc.n	8012036 <GetElement+0x2e>
    }

    return NULL;
 801205e:	2300      	movs	r3, #0
}
 8012060:	4618      	mov	r0, r3
 8012062:	3718      	adds	r7, #24
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	20000da8 	.word	0x20000da8

0801206c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012074:	4a0c      	ldr	r2, [pc, #48]	; (80120a8 <LoRaMacConfirmQueueInit+0x3c>)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801207a:	4b0b      	ldr	r3, [pc, #44]	; (80120a8 <LoRaMacConfirmQueueInit+0x3c>)
 801207c:	2200      	movs	r2, #0
 801207e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012082:	4b09      	ldr	r3, [pc, #36]	; (80120a8 <LoRaMacConfirmQueueInit+0x3c>)
 8012084:	4a09      	ldr	r2, [pc, #36]	; (80120ac <LoRaMacConfirmQueueInit+0x40>)
 8012086:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012088:	4b07      	ldr	r3, [pc, #28]	; (80120a8 <LoRaMacConfirmQueueInit+0x3c>)
 801208a:	4a08      	ldr	r2, [pc, #32]	; (80120ac <LoRaMacConfirmQueueInit+0x40>)
 801208c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801208e:	2214      	movs	r2, #20
 8012090:	21ff      	movs	r1, #255	; 0xff
 8012092:	4806      	ldr	r0, [pc, #24]	; (80120ac <LoRaMacConfirmQueueInit+0x40>)
 8012094:	f003 fe8c 	bl	8015db0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012098:	4b03      	ldr	r3, [pc, #12]	; (80120a8 <LoRaMacConfirmQueueInit+0x3c>)
 801209a:	2201      	movs	r2, #1
 801209c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80120a0:	bf00      	nop
 80120a2:	3708      	adds	r7, #8
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20000da8 	.word	0x20000da8
 80120ac:	20000db4 	.word	0x20000db4

080120b0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80120b8:	4b19      	ldr	r3, [pc, #100]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 80120ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff ff92 	bl	8011fe8 <IsListFull>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d001      	beq.n	80120ce <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80120ca:	2300      	movs	r3, #0
 80120cc:	e023      	b.n	8012116 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80120ce:	4b14      	ldr	r3, [pc, #80]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 80120d0:	689b      	ldr	r3, [r3, #8]
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	7812      	ldrb	r2, [r2, #0]
 80120d6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80120d8:	4b11      	ldr	r3, [pc, #68]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 80120da:	689b      	ldr	r3, [r3, #8]
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	7852      	ldrb	r2, [r2, #1]
 80120e0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80120e2:	4b0f      	ldr	r3, [pc, #60]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	78d2      	ldrb	r2, [r2, #3]
 80120ea:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80120ec:	4b0c      	ldr	r3, [pc, #48]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	2200      	movs	r2, #0
 80120f2:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80120f4:	4b0a      	ldr	r3, [pc, #40]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 80120f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80120fa:	3301      	adds	r3, #1
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	4b08      	ldr	r3, [pc, #32]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 8012100:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012104:	4b06      	ldr	r3, [pc, #24]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	4618      	mov	r0, r3
 801210a:	f7ff ff45 	bl	8011f98 <IncreaseBufferPointer>
 801210e:	4603      	mov	r3, r0
 8012110:	4a03      	ldr	r2, [pc, #12]	; (8012120 <LoRaMacConfirmQueueAdd+0x70>)
 8012112:	6093      	str	r3, [r2, #8]

    return true;
 8012114:	2301      	movs	r3, #1
}
 8012116:	4618      	mov	r0, r3
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	20000da8 	.word	0x20000da8

08012124 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012128:	4b0e      	ldr	r3, [pc, #56]	; (8012164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801212a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff ff4a 	bl	8011fc8 <IsListEmpty>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801213a:	2300      	movs	r3, #0
 801213c:	e010      	b.n	8012160 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801213e:	4b09      	ldr	r3, [pc, #36]	; (8012164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012144:	3b01      	subs	r3, #1
 8012146:	b2da      	uxtb	r2, r3
 8012148:	4b06      	ldr	r3, [pc, #24]	; (8012164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801214a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801214e:	4b05      	ldr	r3, [pc, #20]	; (8012164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff ff20 	bl	8011f98 <IncreaseBufferPointer>
 8012158:	4603      	mov	r3, r0
 801215a:	4a02      	ldr	r2, [pc, #8]	; (8012164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801215c:	6053      	str	r3, [r2, #4]

    return true;
 801215e:	2301      	movs	r3, #1
}
 8012160:	4618      	mov	r0, r3
 8012162:	bd80      	pop	{r7, pc}
 8012164:	20000da8 	.word	0x20000da8

08012168 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	4603      	mov	r3, r0
 8012170:	460a      	mov	r2, r1
 8012172:	71fb      	strb	r3, [r7, #7]
 8012174:	4613      	mov	r3, r2
 8012176:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012178:	2300      	movs	r3, #0
 801217a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801217c:	4b10      	ldr	r3, [pc, #64]	; (80121c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012182:	4618      	mov	r0, r3
 8012184:	f7ff ff20 	bl	8011fc8 <IsListEmpty>
 8012188:	4603      	mov	r3, r0
 801218a:	f083 0301 	eor.w	r3, r3, #1
 801218e:	b2db      	uxtb	r3, r3
 8012190:	2b00      	cmp	r3, #0
 8012192:	d011      	beq.n	80121b8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012194:	4b0a      	ldr	r3, [pc, #40]	; (80121c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012196:	6859      	ldr	r1, [r3, #4]
 8012198:	4b09      	ldr	r3, [pc, #36]	; (80121c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801219a:	689a      	ldr	r2, [r3, #8]
 801219c:	79bb      	ldrb	r3, [r7, #6]
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ff ff32 	bl	8012008 <GetElement>
 80121a4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d005      	beq.n	80121b8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	79fa      	ldrb	r2, [r7, #7]
 80121b0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2201      	movs	r2, #1
 80121b6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80121b8:	bf00      	nop
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	20000da8 	.word	0x20000da8

080121c4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	4603      	mov	r3, r0
 80121cc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80121ce:	2300      	movs	r3, #0
 80121d0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80121d2:	4b10      	ldr	r3, [pc, #64]	; (8012214 <LoRaMacConfirmQueueGetStatus+0x50>)
 80121d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121d8:	4618      	mov	r0, r3
 80121da:	f7ff fef5 	bl	8011fc8 <IsListEmpty>
 80121de:	4603      	mov	r3, r0
 80121e0:	f083 0301 	eor.w	r3, r3, #1
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d00e      	beq.n	8012208 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80121ea:	4b0a      	ldr	r3, [pc, #40]	; (8012214 <LoRaMacConfirmQueueGetStatus+0x50>)
 80121ec:	6859      	ldr	r1, [r3, #4]
 80121ee:	4b09      	ldr	r3, [pc, #36]	; (8012214 <LoRaMacConfirmQueueGetStatus+0x50>)
 80121f0:	689a      	ldr	r2, [r3, #8]
 80121f2:	79fb      	ldrb	r3, [r7, #7]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7ff ff07 	bl	8012008 <GetElement>
 80121fa:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d002      	beq.n	8012208 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	785b      	ldrb	r3, [r3, #1]
 8012206:	e000      	b.n	801220a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012208:	2301      	movs	r3, #1
}
 801220a:	4618      	mov	r0, r3
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	20000da8 	.word	0x20000da8

08012218 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	4603      	mov	r3, r0
 8012220:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012222:	4b16      	ldr	r3, [pc, #88]	; (801227c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012228:	4a14      	ldr	r2, [pc, #80]	; (801227c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801222a:	79fb      	ldrb	r3, [r7, #7]
 801222c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012230:	4b12      	ldr	r3, [pc, #72]	; (801227c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012236:	4618      	mov	r0, r3
 8012238:	f7ff fec6 	bl	8011fc8 <IsListEmpty>
 801223c:	4603      	mov	r3, r0
 801223e:	f083 0301 	eor.w	r3, r3, #1
 8012242:	b2db      	uxtb	r3, r3
 8012244:	2b00      	cmp	r3, #0
 8012246:	d015      	beq.n	8012274 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	79fa      	ldrb	r2, [r7, #7]
 801224c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	78db      	ldrb	r3, [r3, #3]
 8012252:	f083 0301 	eor.w	r3, r3, #1
 8012256:	b2db      	uxtb	r3, r3
 8012258:	2b00      	cmp	r3, #0
 801225a:	d002      	beq.n	8012262 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2201      	movs	r2, #1
 8012260:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012262:	68f8      	ldr	r0, [r7, #12]
 8012264:	f7ff fe98 	bl	8011f98 <IncreaseBufferPointer>
 8012268:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801226a:	4b04      	ldr	r3, [pc, #16]	; (801227c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801226c:	689b      	ldr	r3, [r3, #8]
 801226e:	68fa      	ldr	r2, [r7, #12]
 8012270:	429a      	cmp	r2, r3
 8012272:	d1e9      	bne.n	8012248 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012274:	bf00      	nop
 8012276:	3710      	adds	r7, #16
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	20000da8 	.word	0x20000da8

08012280 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	4603      	mov	r3, r0
 8012288:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801228a:	4b09      	ldr	r3, [pc, #36]	; (80122b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801228c:	6859      	ldr	r1, [r3, #4]
 801228e:	4b08      	ldr	r3, [pc, #32]	; (80122b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012290:	689a      	ldr	r2, [r3, #8]
 8012292:	79fb      	ldrb	r3, [r7, #7]
 8012294:	4618      	mov	r0, r3
 8012296:	f7ff feb7 	bl	8012008 <GetElement>
 801229a:	4603      	mov	r3, r0
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80122a0:	2301      	movs	r3, #1
 80122a2:	e000      	b.n	80122a6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80122a4:	2300      	movs	r3, #0
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	20000da8 	.word	0x20000da8

080122b4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80122bc:	4b22      	ldr	r3, [pc, #136]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 80122be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122c2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80122c4:	2300      	movs	r3, #0
 80122c6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80122c8:	2300      	movs	r3, #0
 80122ca:	73fb      	strb	r3, [r7, #15]
 80122cc:	e032      	b.n	8012334 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80122ce:	4b1e      	ldr	r3, [pc, #120]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	781a      	ldrb	r2, [r3, #0]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80122d8:	4b1b      	ldr	r3, [pc, #108]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	785a      	ldrb	r2, [r3, #1]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80122e2:	4b19      	ldr	r3, [pc, #100]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	789b      	ldrb	r3, [r3, #2]
 80122e8:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80122ea:	7b7b      	ldrb	r3, [r7, #13]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d005      	beq.n	80122fc <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80122f0:	4b15      	ldr	r3, [pc, #84]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	689b      	ldr	r3, [r3, #8]
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	4798      	blx	r3
 80122fa:	e00b      	b.n	8012314 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80122fc:	4b12      	ldr	r3, [pc, #72]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012304:	4b10      	ldr	r3, [pc, #64]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	785b      	ldrb	r3, [r3, #1]
 801230a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801230c:	4b0e      	ldr	r3, [pc, #56]	; (8012348 <LoRaMacConfirmQueueHandleCb+0x94>)
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	78db      	ldrb	r3, [r3, #3]
 8012312:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012314:	f7ff ff06 	bl	8012124 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012318:	7b7b      	ldrb	r3, [r7, #13]
 801231a:	f083 0301 	eor.w	r3, r3, #1
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b00      	cmp	r3, #0
 8012322:	d004      	beq.n	801232e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012324:	f107 0308 	add.w	r3, r7, #8
 8012328:	4618      	mov	r0, r3
 801232a:	f7ff fec1 	bl	80120b0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801232e:	7bfb      	ldrb	r3, [r7, #15]
 8012330:	3301      	adds	r3, #1
 8012332:	73fb      	strb	r3, [r7, #15]
 8012334:	7bfa      	ldrb	r2, [r7, #15]
 8012336:	7bbb      	ldrb	r3, [r7, #14]
 8012338:	429a      	cmp	r2, r3
 801233a:	d3c8      	bcc.n	80122ce <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 801233c:	bf00      	nop
 801233e:	bf00      	nop
 8012340:	3710      	adds	r7, #16
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20000da8 	.word	0x20000da8

0801234c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801234c:	b480      	push	{r7}
 801234e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012350:	4b03      	ldr	r3, [pc, #12]	; (8012360 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012352:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012356:	4618      	mov	r0, r3
 8012358:	46bd      	mov	sp, r7
 801235a:	bc80      	pop	{r7}
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop
 8012360:	20000da8 	.word	0x20000da8

08012364 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012364:	b580      	push	{r7, lr}
 8012366:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012368:	4b06      	ldr	r3, [pc, #24]	; (8012384 <LoRaMacConfirmQueueIsFull+0x20>)
 801236a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff fe3a 	bl	8011fe8 <IsListFull>
 8012374:	4603      	mov	r3, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d001      	beq.n	801237e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801237a:	2301      	movs	r3, #1
 801237c:	e000      	b.n	8012380 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801237e:	2300      	movs	r3, #0
    }
}
 8012380:	4618      	mov	r0, r3
 8012382:	bd80      	pop	{r7, pc}
 8012384:	20000da8 	.word	0x20000da8

08012388 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b08e      	sub	sp, #56	; 0x38
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	607b      	str	r3, [r7, #4]
 8012392:	460b      	mov	r3, r1
 8012394:	817b      	strh	r3, [r7, #10]
 8012396:	4613      	mov	r3, r2
 8012398:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d101      	bne.n	80123a4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80123a0:	230a      	movs	r3, #10
 80123a2:	e087      	b.n	80124b4 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 80123a4:	2300      	movs	r3, #0
 80123a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80123aa:	2301      	movs	r3, #1
 80123ac:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80123ae:	2300      	movs	r3, #0
 80123b0:	623b      	str	r3, [r7, #32]
 80123b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123b6:	2200      	movs	r2, #0
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	605a      	str	r2, [r3, #4]
 80123bc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80123be:	2300      	movs	r3, #0
 80123c0:	613b      	str	r3, [r7, #16]
 80123c2:	f107 0314 	add.w	r3, r7, #20
 80123c6:	2200      	movs	r2, #0
 80123c8:	601a      	str	r2, [r3, #0]
 80123ca:	605a      	str	r2, [r3, #4]
 80123cc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80123ce:	2301      	movs	r3, #1
 80123d0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80123d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80123d6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	0a1b      	lsrs	r3, r3, #8
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	0c1b      	lsrs	r3, r3, #16
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	0e1b      	lsrs	r3, r3, #24
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80123f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80123fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123fe:	0a1b      	lsrs	r3, r3, #8
 8012400:	b2db      	uxtb	r3, r3
 8012402:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012406:	0c1b      	lsrs	r3, r3, #16
 8012408:	b2db      	uxtb	r3, r3
 801240a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801240c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801240e:	0e1b      	lsrs	r3, r3, #24
 8012410:	b2db      	uxtb	r3, r3
 8012412:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012414:	e049      	b.n	80124aa <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012416:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012418:	b2db      	uxtb	r3, r3
 801241a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801241c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801241e:	3301      	adds	r3, #1
 8012420:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012422:	f107 0320 	add.w	r3, r7, #32
 8012426:	7a7a      	ldrb	r2, [r7, #9]
 8012428:	f107 0010 	add.w	r0, r7, #16
 801242c:	2110      	movs	r1, #16
 801242e:	f7f9 f9fa 	bl	800b826 <SecureElementAesEncrypt>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d001      	beq.n	801243c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012438:	230f      	movs	r3, #15
 801243a:	e03b      	b.n	80124b4 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801243c:	2300      	movs	r3, #0
 801243e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012442:	e01f      	b.n	8012484 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012444:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801244c:	4413      	add	r3, r2
 801244e:	461a      	mov	r2, r3
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	4413      	add	r3, r2
 8012454:	7819      	ldrb	r1, [r3, #0]
 8012456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801245a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801245e:	4413      	add	r3, r2
 8012460:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012464:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801246c:	4403      	add	r3, r0
 801246e:	4618      	mov	r0, r3
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	4403      	add	r3, r0
 8012474:	404a      	eors	r2, r1
 8012476:	b2d2      	uxtb	r2, r2
 8012478:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801247a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801247e:	3301      	adds	r3, #1
 8012480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012488:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801248c:	2a10      	cmp	r2, #16
 801248e:	bfa8      	it	ge
 8012490:	2210      	movge	r2, #16
 8012492:	b212      	sxth	r2, r2
 8012494:	4293      	cmp	r3, r2
 8012496:	dbd5      	blt.n	8012444 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012498:	897b      	ldrh	r3, [r7, #10]
 801249a:	3b10      	subs	r3, #16
 801249c:	b29b      	uxth	r3, r3
 801249e:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80124a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124a4:	3310      	adds	r3, #16
 80124a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80124aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	dcb1      	bgt.n	8012416 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80124b2:	2300      	movs	r3, #0
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3738      	adds	r7, #56	; 0x38
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80124bc:	b490      	push	{r4, r7}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	4604      	mov	r4, r0
 80124c4:	4608      	mov	r0, r1
 80124c6:	4611      	mov	r1, r2
 80124c8:	461a      	mov	r2, r3
 80124ca:	4623      	mov	r3, r4
 80124cc:	80fb      	strh	r3, [r7, #6]
 80124ce:	4603      	mov	r3, r0
 80124d0:	717b      	strb	r3, [r7, #5]
 80124d2:	460b      	mov	r3, r1
 80124d4:	713b      	strb	r3, [r7, #4]
 80124d6:	4613      	mov	r3, r2
 80124d8:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80124da:	69bb      	ldr	r3, [r7, #24]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d101      	bne.n	80124e4 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80124e0:	230a      	movs	r3, #10
 80124e2:	e04e      	b.n	8012582 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	2249      	movs	r2, #73	; 0x49
 80124e8:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	3301      	adds	r3, #1
 80124ee:	2200      	movs	r2, #0
 80124f0:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	3302      	adds	r3, #2
 80124f6:	2200      	movs	r2, #0
 80124f8:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	3303      	adds	r3, #3
 80124fe:	2200      	movs	r2, #0
 8012500:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	3304      	adds	r3, #4
 8012506:	2200      	movs	r2, #0
 8012508:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	3305      	adds	r3, #5
 801250e:	78fa      	ldrb	r2, [r7, #3]
 8012510:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	3306      	adds	r3, #6
 8012516:	693a      	ldr	r2, [r7, #16]
 8012518:	b2d2      	uxtb	r2, r2
 801251a:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	0a1a      	lsrs	r2, r3, #8
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	3307      	adds	r3, #7
 8012524:	b2d2      	uxtb	r2, r2
 8012526:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	0c1a      	lsrs	r2, r3, #16
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	3308      	adds	r3, #8
 8012530:	b2d2      	uxtb	r2, r2
 8012532:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	0e1a      	lsrs	r2, r3, #24
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	3309      	adds	r3, #9
 801253c:	b2d2      	uxtb	r2, r2
 801253e:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	330a      	adds	r3, #10
 8012544:	697a      	ldr	r2, [r7, #20]
 8012546:	b2d2      	uxtb	r2, r2
 8012548:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	0a1a      	lsrs	r2, r3, #8
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	330b      	adds	r3, #11
 8012552:	b2d2      	uxtb	r2, r2
 8012554:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	0c1a      	lsrs	r2, r3, #16
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	330c      	adds	r3, #12
 801255e:	b2d2      	uxtb	r2, r2
 8012560:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	0e1a      	lsrs	r2, r3, #24
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	330d      	adds	r3, #13
 801256a:	b2d2      	uxtb	r2, r2
 801256c:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801256e:	69bb      	ldr	r3, [r7, #24]
 8012570:	330e      	adds	r3, #14
 8012572:	2200      	movs	r2, #0
 8012574:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	330f      	adds	r3, #15
 801257a:	88fa      	ldrh	r2, [r7, #6]
 801257c:	b2d2      	uxtb	r2, r2
 801257e:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012580:	2300      	movs	r3, #0
}
 8012582:	4618      	mov	r0, r3
 8012584:	3708      	adds	r7, #8
 8012586:	46bd      	mov	sp, r7
 8012588:	bc90      	pop	{r4, r7}
 801258a:	4770      	bx	lr

0801258c <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801258c:	b590      	push	{r4, r7, lr}
 801258e:	b08b      	sub	sp, #44	; 0x2c
 8012590:	af04      	add	r7, sp, #16
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	4608      	mov	r0, r1
 8012596:	4611      	mov	r1, r2
 8012598:	461a      	mov	r2, r3
 801259a:	4603      	mov	r3, r0
 801259c:	807b      	strh	r3, [r7, #2]
 801259e:	460b      	mov	r3, r1
 80125a0:	707b      	strb	r3, [r7, #1]
 80125a2:	4613      	mov	r3, r2
 80125a4:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <ComputeCmacB0+0x26>
 80125ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d101      	bne.n	80125b6 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80125b2:	230a      	movs	r3, #10
 80125b4:	e024      	b.n	8012600 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80125b6:	887b      	ldrh	r3, [r7, #2]
 80125b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125bc:	d901      	bls.n	80125c2 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80125be:	230e      	movs	r3, #14
 80125c0:	e01e      	b.n	8012600 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80125c2:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80125c6:	783a      	ldrb	r2, [r7, #0]
 80125c8:	7879      	ldrb	r1, [r7, #1]
 80125ca:	8878      	ldrh	r0, [r7, #2]
 80125cc:	f107 0308 	add.w	r3, r7, #8
 80125d0:	9302      	str	r3, [sp, #8]
 80125d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d4:	9301      	str	r3, [sp, #4]
 80125d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	4623      	mov	r3, r4
 80125dc:	f7ff ff6e 	bl	80124bc <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80125e0:	7879      	ldrb	r1, [r7, #1]
 80125e2:	887a      	ldrh	r2, [r7, #2]
 80125e4:	f107 0008 	add.w	r0, r7, #8
 80125e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	460b      	mov	r3, r1
 80125ee:	6879      	ldr	r1, [r7, #4]
 80125f0:	f7f9 f8cc 	bl	800b78c <SecureElementComputeAesCmac>
 80125f4:	4603      	mov	r3, r0
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80125fa:	230f      	movs	r3, #15
 80125fc:	e000      	b.n	8012600 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80125fe:	2300      	movs	r3, #0
}
 8012600:	4618      	mov	r0, r3
 8012602:	371c      	adds	r7, #28
 8012604:	46bd      	mov	sp, r7
 8012606:	bd90      	pop	{r4, r7, pc}

08012608 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012608:	b590      	push	{r4, r7, lr}
 801260a:	b0cd      	sub	sp, #308	; 0x134
 801260c:	af04      	add	r7, sp, #16
 801260e:	1d3c      	adds	r4, r7, #4
 8012610:	6020      	str	r0, [r4, #0]
 8012612:	460c      	mov	r4, r1
 8012614:	4610      	mov	r0, r2
 8012616:	4619      	mov	r1, r3
 8012618:	1cbb      	adds	r3, r7, #2
 801261a:	4622      	mov	r2, r4
 801261c:	801a      	strh	r2, [r3, #0]
 801261e:	1c7b      	adds	r3, r7, #1
 8012620:	4602      	mov	r2, r0
 8012622:	701a      	strb	r2, [r3, #0]
 8012624:	463b      	mov	r3, r7
 8012626:	460a      	mov	r2, r1
 8012628:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801262a:	1d3b      	adds	r3, r7, #4
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012632:	230a      	movs	r3, #10
 8012634:	e04b      	b.n	80126ce <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012636:	1cbb      	adds	r3, r7, #2
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801263e:	d901      	bls.n	8012644 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012640:	230e      	movs	r3, #14
 8012642:	e044      	b.n	80126ce <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012644:	f107 030c 	add.w	r3, r7, #12
 8012648:	f44f 7288 	mov.w	r2, #272	; 0x110
 801264c:	2100      	movs	r1, #0
 801264e:	4618      	mov	r0, r3
 8012650:	f003 fbae 	bl	8015db0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012654:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012658:	463b      	mov	r3, r7
 801265a:	781a      	ldrb	r2, [r3, #0]
 801265c:	1c7b      	adds	r3, r7, #1
 801265e:	7819      	ldrb	r1, [r3, #0]
 8012660:	1cbb      	adds	r3, r7, #2
 8012662:	8818      	ldrh	r0, [r3, #0]
 8012664:	f107 030c 	add.w	r3, r7, #12
 8012668:	9302      	str	r3, [sp, #8]
 801266a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801266e:	9301      	str	r3, [sp, #4]
 8012670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012674:	9300      	str	r3, [sp, #0]
 8012676:	4623      	mov	r3, r4
 8012678:	f7ff ff20 	bl	80124bc <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801267c:	f107 030c 	add.w	r3, r7, #12
 8012680:	3310      	adds	r3, #16
 8012682:	1cba      	adds	r2, r7, #2
 8012684:	8812      	ldrh	r2, [r2, #0]
 8012686:	1d39      	adds	r1, r7, #4
 8012688:	6809      	ldr	r1, [r1, #0]
 801268a:	4618      	mov	r0, r3
 801268c:	f003 fb55 	bl	8015d3a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012690:	2306      	movs	r3, #6
 8012692:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012696:	1cbb      	adds	r3, r7, #2
 8012698:	881b      	ldrh	r3, [r3, #0]
 801269a:	3310      	adds	r3, #16
 801269c:	b299      	uxth	r1, r3
 801269e:	1c7b      	adds	r3, r7, #1
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	f107 000c 	add.w	r0, r7, #12
 80126a6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80126aa:	f7f9 f88d 	bl	800b7c8 <SecureElementVerifyAesCmac>
 80126ae:	4603      	mov	r3, r0
 80126b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80126b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d101      	bne.n	80126c0 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80126bc:	2300      	movs	r3, #0
 80126be:	e006      	b.n	80126ce <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80126c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d101      	bne.n	80126cc <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80126c8:	2301      	movs	r3, #1
 80126ca:	e000      	b.n	80126ce <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80126cc:	230f      	movs	r3, #15
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd90      	pop	{r4, r7, pc}

080126d8 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	4603      	mov	r3, r0
 80126e0:	6039      	str	r1, [r7, #0]
 80126e2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80126e4:	2300      	movs	r3, #0
 80126e6:	73fb      	strb	r3, [r7, #15]
 80126e8:	e011      	b.n	801270e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80126ea:	7bfb      	ldrb	r3, [r7, #15]
 80126ec:	4a0c      	ldr	r2, [pc, #48]	; (8012720 <GetKeyAddrItem+0x48>)
 80126ee:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80126f2:	79fa      	ldrb	r2, [r7, #7]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d107      	bne.n	8012708 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80126f8:	7bfb      	ldrb	r3, [r7, #15]
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	4a08      	ldr	r2, [pc, #32]	; (8012720 <GetKeyAddrItem+0x48>)
 80126fe:	441a      	add	r2, r3
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012704:	2300      	movs	r3, #0
 8012706:	e006      	b.n	8012716 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012708:	7bfb      	ldrb	r3, [r7, #15]
 801270a:	3301      	adds	r3, #1
 801270c:	73fb      	strb	r3, [r7, #15]
 801270e:	7bfb      	ldrb	r3, [r7, #15]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d9ea      	bls.n	80126ea <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012714:	230c      	movs	r3, #12
}
 8012716:	4618      	mov	r0, r3
 8012718:	3714      	adds	r7, #20
 801271a:	46bd      	mov	sp, r7
 801271c:	bc80      	pop	{r7}
 801271e:	4770      	bx	lr
 8012720:	20000114 	.word	0x20000114

08012724 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b088      	sub	sp, #32
 8012728:	af00      	add	r7, sp, #0
 801272a:	60b9      	str	r1, [r7, #8]
 801272c:	607a      	str	r2, [r7, #4]
 801272e:	461a      	mov	r2, r3
 8012730:	4603      	mov	r3, r0
 8012732:	73fb      	strb	r3, [r7, #15]
 8012734:	4613      	mov	r3, r2
 8012736:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012738:	2300      	movs	r3, #0
 801273a:	613b      	str	r3, [r7, #16]
 801273c:	f107 0314 	add.w	r3, r7, #20
 8012740:	2200      	movs	r2, #0
 8012742:	601a      	str	r2, [r3, #0]
 8012744:	605a      	str	r2, [r3, #4]
 8012746:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012748:	7bfb      	ldrb	r3, [r7, #15]
 801274a:	2b02      	cmp	r3, #2
 801274c:	d002      	beq.n	8012754 <DeriveSessionKey10x+0x30>
 801274e:	2b03      	cmp	r3, #3
 8012750:	d003      	beq.n	801275a <DeriveSessionKey10x+0x36>
 8012752:	e005      	b.n	8012760 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012754:	2301      	movs	r3, #1
 8012756:	743b      	strb	r3, [r7, #16]
            break;
 8012758:	e004      	b.n	8012764 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801275a:	2302      	movs	r3, #2
 801275c:	743b      	strb	r3, [r7, #16]
            break;
 801275e:	e001      	b.n	8012764 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012760:	230b      	movs	r3, #11
 8012762:	e02a      	b.n	80127ba <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	b2db      	uxtb	r3, r3
 8012768:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	0a1b      	lsrs	r3, r3, #8
 801276e:	b2db      	uxtb	r3, r3
 8012770:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	0c1b      	lsrs	r3, r3, #16
 8012776:	b2db      	uxtb	r3, r3
 8012778:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	b2db      	uxtb	r3, r3
 801277e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	0a1b      	lsrs	r3, r3, #8
 8012784:	b2db      	uxtb	r3, r3
 8012786:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	0c1b      	lsrs	r3, r3, #16
 801278c:	b2db      	uxtb	r3, r3
 801278e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012790:	89bb      	ldrh	r3, [r7, #12]
 8012792:	b2db      	uxtb	r3, r3
 8012794:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012796:	89bb      	ldrh	r3, [r7, #12]
 8012798:	0a1b      	lsrs	r3, r3, #8
 801279a:	b29b      	uxth	r3, r3
 801279c:	b2db      	uxtb	r3, r3
 801279e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80127a0:	7bfa      	ldrb	r2, [r7, #15]
 80127a2:	f107 0310 	add.w	r3, r7, #16
 80127a6:	2101      	movs	r1, #1
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f9 f89a 	bl	800b8e2 <SecureElementDeriveAndStoreKey>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d001      	beq.n	80127b8 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80127b4:	230f      	movs	r3, #15
 80127b6:	e000      	b.n	80127ba <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80127b8:	2300      	movs	r3, #0
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3720      	adds	r7, #32
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
	...

080127c4 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	4603      	mov	r3, r0
 80127cc:	6039      	str	r1, [r7, #0]
 80127ce:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80127d6:	230a      	movs	r3, #10
 80127d8:	e03b      	b.n	8012852 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 80127da:	79fb      	ldrb	r3, [r7, #7]
 80127dc:	3b01      	subs	r3, #1
 80127de:	2b03      	cmp	r3, #3
 80127e0:	d834      	bhi.n	801284c <GetLastFcntDown+0x88>
 80127e2:	a201      	add	r2, pc, #4	; (adr r2, 80127e8 <GetLastFcntDown+0x24>)
 80127e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127e8:	080127f9 	.word	0x080127f9
 80127ec:	08012811 	.word	0x08012811
 80127f0:	08012829 	.word	0x08012829
 80127f4:	08012841 	.word	0x08012841
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80127f8:	4b18      	ldr	r3, [pc, #96]	; (801285c <GetLastFcntDown+0x98>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	691a      	ldr	r2, [r3, #16]
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012802:	4b16      	ldr	r3, [pc, #88]	; (801285c <GetLastFcntDown+0x98>)
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	4b15      	ldr	r3, [pc, #84]	; (801285c <GetLastFcntDown+0x98>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	6912      	ldr	r2, [r2, #16]
 801280c:	621a      	str	r2, [r3, #32]
            break;
 801280e:	e01f      	b.n	8012850 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012810:	4b12      	ldr	r3, [pc, #72]	; (801285c <GetLastFcntDown+0x98>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	695a      	ldr	r2, [r3, #20]
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801281a:	4b10      	ldr	r3, [pc, #64]	; (801285c <GetLastFcntDown+0x98>)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	4b0f      	ldr	r3, [pc, #60]	; (801285c <GetLastFcntDown+0x98>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	6952      	ldr	r2, [r2, #20]
 8012824:	621a      	str	r2, [r3, #32]
            break;
 8012826:	e013      	b.n	8012850 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012828:	4b0c      	ldr	r3, [pc, #48]	; (801285c <GetLastFcntDown+0x98>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	699a      	ldr	r2, [r3, #24]
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012832:	4b0a      	ldr	r3, [pc, #40]	; (801285c <GetLastFcntDown+0x98>)
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	4b09      	ldr	r3, [pc, #36]	; (801285c <GetLastFcntDown+0x98>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	6992      	ldr	r2, [r2, #24]
 801283c:	621a      	str	r2, [r3, #32]
            break;
 801283e:	e007      	b.n	8012850 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012840:	4b06      	ldr	r3, [pc, #24]	; (801285c <GetLastFcntDown+0x98>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	69da      	ldr	r2, [r3, #28]
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	601a      	str	r2, [r3, #0]
            break;
 801284a:	e001      	b.n	8012850 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801284c:	2305      	movs	r3, #5
 801284e:	e000      	b.n	8012852 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012850:	2300      	movs	r3, #0
}
 8012852:	4618      	mov	r0, r3
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	bc80      	pop	{r7}
 801285a:	4770      	bx	lr
 801285c:	20000dcc 	.word	0x20000dcc

08012860 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
 8012866:	4603      	mov	r3, r0
 8012868:	6039      	str	r1, [r7, #0]
 801286a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 801286c:	2300      	movs	r3, #0
 801286e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012870:	f107 020c 	add.w	r2, r7, #12
 8012874:	79fb      	ldrb	r3, [r7, #7]
 8012876:	4611      	mov	r1, r2
 8012878:	4618      	mov	r0, r3
 801287a:	f7ff ffa3 	bl	80127c4 <GetLastFcntDown>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d001      	beq.n	8012888 <CheckFCntDown+0x28>
    {
        return false;
 8012884:	2300      	movs	r3, #0
 8012886:	e00a      	b.n	801289e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	683a      	ldr	r2, [r7, #0]
 801288c:	429a      	cmp	r2, r3
 801288e:	d803      	bhi.n	8012898 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012890:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012896:	d101      	bne.n	801289c <CheckFCntDown+0x3c>
    {
        return true;
 8012898:	2301      	movs	r3, #1
 801289a:	e000      	b.n	801289e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801289c:	2300      	movs	r3, #0
    }
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
	...

080128a8 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	4603      	mov	r3, r0
 80128b0:	6039      	str	r1, [r7, #0]
 80128b2:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80128b4:	79fb      	ldrb	r3, [r7, #7]
 80128b6:	3b01      	subs	r3, #1
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	d81f      	bhi.n	80128fc <UpdateFCntDown+0x54>
 80128bc:	a201      	add	r2, pc, #4	; (adr r2, 80128c4 <UpdateFCntDown+0x1c>)
 80128be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128c2:	bf00      	nop
 80128c4:	080128d5 	.word	0x080128d5
 80128c8:	080128df 	.word	0x080128df
 80128cc:	080128e9 	.word	0x080128e9
 80128d0:	080128f3 	.word	0x080128f3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80128d4:	4b0c      	ldr	r3, [pc, #48]	; (8012908 <UpdateFCntDown+0x60>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	683a      	ldr	r2, [r7, #0]
 80128da:	611a      	str	r2, [r3, #16]
            break;
 80128dc:	e00f      	b.n	80128fe <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80128de:	4b0a      	ldr	r3, [pc, #40]	; (8012908 <UpdateFCntDown+0x60>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	683a      	ldr	r2, [r7, #0]
 80128e4:	615a      	str	r2, [r3, #20]
            break;
 80128e6:	e00a      	b.n	80128fe <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80128e8:	4b07      	ldr	r3, [pc, #28]	; (8012908 <UpdateFCntDown+0x60>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	619a      	str	r2, [r3, #24]
            break;
 80128f0:	e005      	b.n	80128fe <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80128f2:	4b05      	ldr	r3, [pc, #20]	; (8012908 <UpdateFCntDown+0x60>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	683a      	ldr	r2, [r7, #0]
 80128f8:	61da      	str	r2, [r3, #28]
            break;
 80128fa:	e000      	b.n	80128fe <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80128fc:	bf00      	nop
    }
}
 80128fe:	bf00      	nop
 8012900:	370c      	adds	r7, #12
 8012902:	46bd      	mov	sp, r7
 8012904:	bc80      	pop	{r7}
 8012906:	4770      	bx	lr
 8012908:	20000dcc 	.word	0x20000dcc

0801290c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801290c:	b480      	push	{r7}
 801290e:	b083      	sub	sp, #12
 8012910:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012912:	4b18      	ldr	r3, [pc, #96]	; (8012974 <ResetFCnts+0x68>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	2200      	movs	r2, #0
 8012918:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801291a:	4b16      	ldr	r3, [pc, #88]	; (8012974 <ResetFCnts+0x68>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f04f 32ff 	mov.w	r2, #4294967295
 8012922:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012924:	4b13      	ldr	r3, [pc, #76]	; (8012974 <ResetFCnts+0x68>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f04f 32ff 	mov.w	r2, #4294967295
 801292c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801292e:	4b11      	ldr	r3, [pc, #68]	; (8012974 <ResetFCnts+0x68>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f04f 32ff 	mov.w	r2, #4294967295
 8012936:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012938:	4b0e      	ldr	r3, [pc, #56]	; (8012974 <ResetFCnts+0x68>)
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	4b0d      	ldr	r3, [pc, #52]	; (8012974 <ResetFCnts+0x68>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	6992      	ldr	r2, [r2, #24]
 8012942:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012944:	2300      	movs	r3, #0
 8012946:	607b      	str	r3, [r7, #4]
 8012948:	e00b      	b.n	8012962 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801294a:	4b0a      	ldr	r3, [pc, #40]	; (8012974 <ResetFCnts+0x68>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3306      	adds	r3, #6
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	4413      	add	r3, r2
 8012956:	f04f 32ff 	mov.w	r2, #4294967295
 801295a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3301      	adds	r3, #1
 8012960:	607b      	str	r3, [r7, #4]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	ddf0      	ble.n	801294a <ResetFCnts+0x3e>
    }
}
 8012968:	bf00      	nop
 801296a:	bf00      	nop
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	bc80      	pop	{r7}
 8012972:	4770      	bx	lr
 8012974:	20000dcc 	.word	0x20000dcc

08012978 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d101      	bne.n	801298a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012986:	2309      	movs	r3, #9
 8012988:	e01c      	b.n	80129c4 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801298a:	4a10      	ldr	r2, [pc, #64]	; (80129cc <LoRaMacCryptoInit+0x54>)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012990:	4b0e      	ldr	r3, [pc, #56]	; (80129cc <LoRaMacCryptoInit+0x54>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	2228      	movs	r2, #40	; 0x28
 8012996:	2100      	movs	r1, #0
 8012998:	4618      	mov	r0, r3
 801299a:	f003 fa09 	bl	8015db0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801299e:	4b0b      	ldr	r3, [pc, #44]	; (80129cc <LoRaMacCryptoInit+0x54>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	2201      	movs	r2, #1
 80129a4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80129a6:	4b09      	ldr	r3, [pc, #36]	; (80129cc <LoRaMacCryptoInit+0x54>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2201      	movs	r2, #1
 80129ac:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80129ae:	4b07      	ldr	r3, [pc, #28]	; (80129cc <LoRaMacCryptoInit+0x54>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2201      	movs	r2, #1
 80129b4:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80129b6:	4b05      	ldr	r3, [pc, #20]	; (80129cc <LoRaMacCryptoInit+0x54>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2200      	movs	r2, #0
 80129bc:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80129be:	f7ff ffa5 	bl	801290c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80129c2:	2300      	movs	r3, #0
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3708      	adds	r7, #8
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	20000dcc 	.word	0x20000dcc

080129d0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80129d8:	4b04      	ldr	r3, [pc, #16]	; (80129ec <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	370c      	adds	r7, #12
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bc80      	pop	{r7}
 80129ea:	4770      	bx	lr
 80129ec:	20000dcc 	.word	0x20000dcc

080129f0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80129fe:	230a      	movs	r3, #10
 8012a00:	e006      	b.n	8012a10 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012a02:	4b06      	ldr	r3, [pc, #24]	; (8012a1c <LoRaMacCryptoGetFCntUp+0x2c>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	1c5a      	adds	r2, r3, #1
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	370c      	adds	r7, #12
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bc80      	pop	{r7}
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	20000dcc 	.word	0x20000dcc

08012a20 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8012a20:	b5b0      	push	{r4, r5, r7, lr}
 8012a22:	b088      	sub	sp, #32
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	60ba      	str	r2, [r7, #8]
 8012a28:	607b      	str	r3, [r7, #4]
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	73fb      	strb	r3, [r7, #15]
 8012a2e:	460b      	mov	r3, r1
 8012a30:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 8012a32:	2300      	movs	r3, #0
 8012a34:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8012a36:	2300      	movs	r3, #0
 8012a38:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012a3a:	2313      	movs	r3, #19
 8012a3c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a44:	230a      	movs	r3, #10
 8012a46:	e04f      	b.n	8012ae8 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012a48:	f107 0214 	add.w	r2, r7, #20
 8012a4c:	7bfb      	ldrb	r3, [r7, #15]
 8012a4e:	4611      	mov	r1, r2
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7ff feb7 	bl	80127c4 <GetLastFcntDown>
 8012a56:	4603      	mov	r3, r0
 8012a58:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012a5a:	7efb      	ldrb	r3, [r7, #27]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d001      	beq.n	8012a64 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8012a60:	7efb      	ldrb	r3, [r7, #27]
 8012a62:	e041      	b.n	8012ae8 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a6a:	d103      	bne.n	8012a74 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	68ba      	ldr	r2, [r7, #8]
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	e01e      	b.n	8012ab2 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	1ad3      	subs	r3, r2, r3
 8012a7c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	dd05      	ble.n	8012a90 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8012a84:	697a      	ldr	r2, [r7, #20]
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	441a      	add	r2, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	601a      	str	r2, [r3, #0]
 8012a8e:	e010      	b.n	8012ab2 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d104      	bne.n	8012aa0 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8012a96:	697a      	ldr	r2, [r7, #20]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8012a9c:	2307      	movs	r3, #7
 8012a9e:	e023      	b.n	8012ae8 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	0c1b      	lsrs	r3, r3, #16
 8012aa4:	041b      	lsls	r3, r3, #16
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012ab2:	4b0f      	ldr	r3, [pc, #60]	; (8012af0 <LoRaMacCryptoGetFCntDown+0xd0>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	789b      	ldrb	r3, [r3, #2]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d114      	bne.n	8012ae6 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f04f 0100 	mov.w	r1, #0
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	461a      	mov	r2, r3
 8012aca:	f04f 0300 	mov.w	r3, #0
 8012ace:	1a84      	subs	r4, r0, r2
 8012ad0:	eb61 0503 	sbc.w	r5, r1, r3
 8012ad4:	89ba      	ldrh	r2, [r7, #12]
 8012ad6:	f04f 0300 	mov.w	r3, #0
 8012ada:	4294      	cmp	r4, r2
 8012adc:	eb75 0303 	sbcs.w	r3, r5, r3
 8012ae0:	db01      	blt.n	8012ae6 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012ae2:	2308      	movs	r3, #8
 8012ae4:	e000      	b.n	8012ae8 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012ae6:	2300      	movs	r3, #0
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3720      	adds	r7, #32
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bdb0      	pop	{r4, r5, r7, pc}
 8012af0:	20000dcc 	.word	0x20000dcc

08012af4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012af4:	b480      	push	{r7}
 8012af6:	b085      	sub	sp, #20
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d101      	bne.n	8012b06 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012b02:	230a      	movs	r3, #10
 8012b04:	e017      	b.n	8012b36 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012b06:	2300      	movs	r3, #0
 8012b08:	60fb      	str	r3, [r7, #12]
 8012b0a:	e010      	b.n	8012b2e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8012b0c:	4b0c      	ldr	r3, [pc, #48]	; (8012b40 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8012b0e:	6819      	ldr	r1, [r3, #0]
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	222c      	movs	r2, #44	; 0x2c
 8012b14:	fb02 f303 	mul.w	r3, r2, r3
 8012b18:	687a      	ldr	r2, [r7, #4]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	68fa      	ldr	r2, [r7, #12]
 8012b1e:	3206      	adds	r2, #6
 8012b20:	0092      	lsls	r2, r2, #2
 8012b22:	440a      	add	r2, r1
 8012b24:	3204      	adds	r2, #4
 8012b26:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	60fb      	str	r3, [r7, #12]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	ddeb      	ble.n	8012b0c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012b34:	2300      	movs	r3, #0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3714      	adds	r7, #20
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bc80      	pop	{r7}
 8012b3e:	4770      	bx	lr
 8012b40:	20000dcc 	.word	0x20000dcc

08012b44 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	6039      	str	r1, [r7, #0]
 8012b4e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8012b50:	79fb      	ldrb	r3, [r7, #7]
 8012b52:	6839      	ldr	r1, [r7, #0]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7f8 fdbb 	bl	800b6d0 <SecureElementSetKey>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b60:	230f      	movs	r3, #15
 8012b62:	e018      	b.n	8012b96 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8012b64:	79fb      	ldrb	r3, [r7, #7]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d114      	bne.n	8012b94 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8012b6a:	4b0d      	ldr	r3, [pc, #52]	; (8012ba0 <LoRaMacCryptoSetKey+0x5c>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	789b      	ldrb	r3, [r3, #2]
 8012b70:	79fa      	ldrb	r2, [r7, #7]
 8012b72:	4611      	mov	r1, r2
 8012b74:	4618      	mov	r0, r3
 8012b76:	f000 fa3f 	bl	8012ff8 <LoRaMacCryptoDeriveMcRootKey>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d001      	beq.n	8012b84 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b80:	230f      	movs	r3, #15
 8012b82:	e008      	b.n	8012b96 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012b84:	2004      	movs	r0, #4
 8012b86:	f000 fa62 	bl	801304e <LoRaMacCryptoDeriveMcKEKey>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b90:	230f      	movs	r3, #15
 8012b92:	e000      	b.n	8012b96 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012b94:	2300      	movs	r3, #0
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3708      	adds	r7, #8
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20000dcc 	.word	0x20000dcc

08012ba4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af02      	add	r7, sp, #8
 8012baa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d101      	bne.n	8012bb6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012bb2:	230a      	movs	r3, #10
 8012bb4:	e033      	b.n	8012c1e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8012bbe:	f107 0308 	add.w	r3, r7, #8
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7f8 ff4a 	bl	800ba5c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012bc8:	68ba      	ldr	r2, [r7, #8]
 8012bca:	4b17      	ldr	r3, [pc, #92]	; (8012c28 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	b292      	uxth	r2, r2
 8012bd0:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8012bd2:	4b15      	ldr	r3, [pc, #84]	; (8012c28 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	889a      	ldrh	r2, [r3, #4]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f000 fc18 	bl	8013412 <LoRaMacSerializerJoinRequest>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d001      	beq.n	8012bec <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012be8:	2311      	movs	r3, #17
 8012bea:	e018      	b.n	8012c1e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6819      	ldr	r1, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	3318      	adds	r3, #24
 8012bf4:	7bfa      	ldrb	r2, [r7, #15]
 8012bf6:	9300      	str	r3, [sp, #0]
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	2213      	movs	r2, #19
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	f7f8 fdc5 	bl	800b78c <SecureElementComputeAesCmac>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d001      	beq.n	8012c0c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012c08:	230f      	movs	r3, #15
 8012c0a:	e008      	b.n	8012c1e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f000 fc00 	bl	8013412 <LoRaMacSerializerJoinRequest>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d001      	beq.n	8012c1c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012c18:	2311      	movs	r3, #17
 8012c1a:	e000      	b.n	8012c1e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012c1c:	2300      	movs	r3, #0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	20000dcc 	.word	0x20000dcc

08012c2c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8012c2c:	b590      	push	{r4, r7, lr}
 8012c2e:	b097      	sub	sp, #92	; 0x5c
 8012c30:	af04      	add	r7, sp, #16
 8012c32:	4603      	mov	r3, r0
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	607a      	str	r2, [r7, #4]
 8012c38:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d002      	beq.n	8012c46 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c46:	230a      	movs	r3, #10
 8012c48:	e0bd      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012c4a:	2313      	movs	r3, #19
 8012c4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8012c50:	2300      	movs	r3, #0
 8012c52:	61bb      	str	r3, [r7, #24]
 8012c54:	f107 031c 	add.w	r3, r7, #28
 8012c58:	221d      	movs	r2, #29
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f007 fd4b 	bl	801a6f8 <memset>
    uint8_t versionMinor         = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8012c66:	4b5a      	ldr	r3, [pc, #360]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	889b      	ldrh	r3, [r3, #4]
 8012c6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681c      	ldr	r4, [r3, #0]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	791b      	ldrb	r3, [r3, #4]
 8012c78:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8012c7c:	7bf8      	ldrb	r0, [r7, #15]
 8012c7e:	f107 0217 	add.w	r2, r7, #23
 8012c82:	9202      	str	r2, [sp, #8]
 8012c84:	f107 0218 	add.w	r2, r7, #24
 8012c88:	9201      	str	r2, [sp, #4]
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	4623      	mov	r3, r4
 8012c8e:	460a      	mov	r2, r1
 8012c90:	68b9      	ldr	r1, [r7, #8]
 8012c92:	f7f8 fe66 	bl	800b962 <SecureElementProcessJoinAccept>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012c9c:	230f      	movs	r3, #15
 8012c9e:	e092      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6818      	ldr	r0, [r3, #0]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	791b      	ldrb	r3, [r3, #4]
 8012ca8:	b29a      	uxth	r2, r3
 8012caa:	f107 0318 	add.w	r3, r7, #24
 8012cae:	4619      	mov	r1, r3
 8012cb0:	f003 f843 	bl	8015d3a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 f9ed 	bl	8013094 <LoRaMacParserJoinAccept>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012cc0:	2310      	movs	r3, #16
 8012cc2:	e080      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	799b      	ldrb	r3, [r3, #6]
 8012cc8:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	79db      	ldrb	r3, [r3, #7]
 8012cce:	021b      	lsls	r3, r3, #8
 8012cd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	7a1b      	ldrb	r3, [r3, #8]
 8012cda:	041b      	lsls	r3, r3, #16
 8012cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cde:	4313      	orrs	r3, r2
 8012ce0:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8012ce2:	4b3b      	ldr	r3, [pc, #236]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d010      	beq.n	8012d10 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8012cee:	4b38      	ldr	r3, [pc, #224]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cf4:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8012cf6:	7dfb      	ldrb	r3, [r7, #23]
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f000 f97c 	bl	8012ff8 <LoRaMacCryptoDeriveMcRootKey>
 8012d00:	4603      	mov	r3, r0
 8012d02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012d06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d005      	beq.n	8012d1a <LoRaMacCryptoHandleJoinAccept+0xee>
 8012d0e:	e001      	b.n	8012d14 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012d10:	2303      	movs	r3, #3
 8012d12:	e058      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8012d14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d18:	e055      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8012d1a:	2004      	movs	r0, #4
 8012d1c:	f000 f997 	bl	801304e <LoRaMacCryptoDeriveMcKEKey>
 8012d20:	4603      	mov	r3, r0
 8012d22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012d26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d002      	beq.n	8012d34 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8012d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d32:	e048      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	7a5b      	ldrb	r3, [r3, #9]
 8012d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	7a9b      	ldrb	r3, [r3, #10]
 8012d3e:	021b      	lsls	r3, r3, #8
 8012d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d42:	4313      	orrs	r3, r2
 8012d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	7adb      	ldrb	r3, [r3, #11]
 8012d4a:	041b      	lsls	r3, r3, #16
 8012d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8012d52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012d5a:	2003      	movs	r0, #3
 8012d5c:	f7ff fce2 	bl	8012724 <DeriveSessionKey10x>
 8012d60:	4603      	mov	r3, r0
 8012d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012d66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d002      	beq.n	8012d74 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8012d6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d72:	e028      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8012d74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012d7c:	2002      	movs	r0, #2
 8012d7e:	f7ff fcd1 	bl	8012724 <DeriveSessionKey10x>
 8012d82:	4603      	mov	r3, r0
 8012d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012d88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8012d90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012d94:	e017      	b.n	8012dc6 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8012d96:	4b0e      	ldr	r3, [pc, #56]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	7dfa      	ldrb	r2, [r7, #23]
 8012d9c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8012d9e:	4b0c      	ldr	r3, [pc, #48]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2200      	movs	r2, #0
 8012da4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012da6:	4b0a      	ldr	r3, [pc, #40]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f04f 32ff 	mov.w	r2, #4294967295
 8012dae:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012db0:	4b07      	ldr	r3, [pc, #28]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f04f 32ff 	mov.w	r2, #4294967295
 8012db8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012dba:	4b05      	ldr	r3, [pc, #20]	; (8012dd0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	374c      	adds	r7, #76	; 0x4c
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd90      	pop	{r4, r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	20000dcc 	.word	0x20000dcc

08012dd4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8012dd4:	b590      	push	{r4, r7, lr}
 8012dd6:	b08b      	sub	sp, #44	; 0x2c
 8012dd8:	af04      	add	r7, sp, #16
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	607b      	str	r3, [r7, #4]
 8012dde:	460b      	mov	r3, r1
 8012de0:	72fb      	strb	r3, [r7, #11]
 8012de2:	4613      	mov	r3, r2
 8012de4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012de6:	2313      	movs	r3, #19
 8012de8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012dea:	2303      	movs	r3, #3
 8012dec:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d101      	bne.n	8012df8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012df4:	230a      	movs	r3, #10
 8012df6:	e05f      	b.n	8012eb8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8012df8:	4b31      	ldr	r3, [pc, #196]	; (8012ec0 <LoRaMacCryptoSecureMessage+0xec>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	68fa      	ldr	r2, [r7, #12]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d201      	bcs.n	8012e08 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012e04:	2306      	movs	r3, #6
 8012e06:	e057      	b.n	8012eb8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d101      	bne.n	8012e16 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012e12:	2302      	movs	r3, #2
 8012e14:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8012e16:	4b2a      	ldr	r3, [pc, #168]	; (8012ec0 <LoRaMacCryptoSecureMessage+0xec>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	68fa      	ldr	r2, [r7, #12]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d916      	bls.n	8012e50 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e2c:	b219      	sxth	r1, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	689c      	ldr	r4, [r3, #8]
 8012e32:	7dfa      	ldrb	r2, [r7, #23]
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	9301      	str	r3, [sp, #4]
 8012e38:	2300      	movs	r3, #0
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	4623      	mov	r3, r4
 8012e3e:	f7ff faa3 	bl	8012388 <PayloadEncrypt>
 8012e42:	4603      	mov	r3, r0
 8012e44:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012e46:	7dbb      	ldrb	r3, [r7, #22]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d001      	beq.n	8012e50 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8012e4c:	7dbb      	ldrb	r3, [r7, #22]
 8012e4e:	e033      	b.n	8012eb8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f000 fb60 	bl	8013516 <LoRaMacSerializerData>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d001      	beq.n	8012e60 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012e5c:	2311      	movs	r3, #17
 8012e5e:	e02b      	b.n	8012eb8 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012e60:	2302      	movs	r3, #2
 8012e62:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6818      	ldr	r0, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	791b      	ldrb	r3, [r3, #4]
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	3b04      	subs	r3, #4
 8012e70:	b299      	uxth	r1, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	322c      	adds	r2, #44	; 0x2c
 8012e7a:	7dfc      	ldrb	r4, [r7, #23]
 8012e7c:	9203      	str	r2, [sp, #12]
 8012e7e:	68fa      	ldr	r2, [r7, #12]
 8012e80:	9202      	str	r2, [sp, #8]
 8012e82:	9301      	str	r3, [sp, #4]
 8012e84:	2300      	movs	r3, #0
 8012e86:	9300      	str	r3, [sp, #0]
 8012e88:	2300      	movs	r3, #0
 8012e8a:	4622      	mov	r2, r4
 8012e8c:	f7ff fb7e 	bl	801258c <ComputeCmacB0>
 8012e90:	4603      	mov	r3, r0
 8012e92:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012e94:	7dbb      	ldrb	r3, [r7, #22]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d001      	beq.n	8012e9e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8012e9a:	7dbb      	ldrb	r3, [r7, #22]
 8012e9c:	e00c      	b.n	8012eb8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f000 fb39 	bl	8013516 <LoRaMacSerializerData>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012eaa:	2311      	movs	r3, #17
 8012eac:	e004      	b.n	8012eb8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8012eae:	4b04      	ldr	r3, [pc, #16]	; (8012ec0 <LoRaMacCryptoSecureMessage+0xec>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	68fa      	ldr	r2, [r7, #12]
 8012eb4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	371c      	adds	r7, #28
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd90      	pop	{r4, r7, pc}
 8012ec0:	20000dcc 	.word	0x20000dcc

08012ec4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8012ec4:	b590      	push	{r4, r7, lr}
 8012ec6:	b08b      	sub	sp, #44	; 0x2c
 8012ec8:	af04      	add	r7, sp, #16
 8012eca:	60b9      	str	r1, [r7, #8]
 8012ecc:	607b      	str	r3, [r7, #4]
 8012ece:	4603      	mov	r3, r0
 8012ed0:	73fb      	strb	r3, [r7, #15]
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012edc:	230a      	movs	r3, #10
 8012ede:	e084      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8012ee0:	7bbb      	ldrb	r3, [r7, #14]
 8012ee2:	6879      	ldr	r1, [r7, #4]
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7ff fcbb 	bl	8012860 <CheckFCntDown>
 8012eea:	4603      	mov	r3, r0
 8012eec:	f083 0301 	eor.w	r3, r3, #1
 8012ef0:	b2db      	uxtb	r3, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d001      	beq.n	8012efa <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012ef6:	2306      	movs	r3, #6
 8012ef8:	e077      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012efa:	2313      	movs	r3, #19
 8012efc:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8012efe:	2303      	movs	r3, #3
 8012f00:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8012f02:	2302      	movs	r3, #2
 8012f04:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f08:	f000 f98f 	bl	801322a <LoRaMacParserData>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d001      	beq.n	8012f16 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012f12:	2310      	movs	r3, #16
 8012f14:	e069      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012f16:	f107 0210 	add.w	r2, r7, #16
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff fbda 	bl	80126d8 <GetKeyAddrItem>
 8012f24:	4603      	mov	r3, r0
 8012f26:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012f28:	7d7b      	ldrb	r3, [r7, #21]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d001      	beq.n	8012f32 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8012f2e:	7d7b      	ldrb	r3, [r7, #21]
 8012f30:	e05b      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	785b      	ldrb	r3, [r3, #1]
 8012f36:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	789b      	ldrb	r3, [r3, #2]
 8012f3c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8012f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f40:	689b      	ldr	r3, [r3, #8]
 8012f42:	68ba      	ldr	r2, [r7, #8]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d001      	beq.n	8012f4c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8012f48:	2302      	movs	r3, #2
 8012f4a:	e04e      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8012f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4e:	7b1b      	ldrb	r3, [r3, #12]
 8012f50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	bf14      	ite	ne
 8012f5a:	2301      	movne	r3, #1
 8012f5c:	2300      	moveq	r3, #0
 8012f5e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012f60:	4b24      	ldr	r3, [pc, #144]	; (8012ff4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	789b      	ldrb	r3, [r3, #2]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d101      	bne.n	8012f6e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8012f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f70:	6818      	ldr	r0, [r3, #0]
 8012f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f74:	791b      	ldrb	r3, [r3, #4]
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	3b04      	subs	r3, #4
 8012f7a:	b299      	uxth	r1, r3
 8012f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f80:	7dbc      	ldrb	r4, [r7, #22]
 8012f82:	7d3a      	ldrb	r2, [r7, #20]
 8012f84:	9303      	str	r3, [sp, #12]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	9302      	str	r3, [sp, #8]
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	9301      	str	r3, [sp, #4]
 8012f8e:	2301      	movs	r3, #1
 8012f90:	9300      	str	r3, [sp, #0]
 8012f92:	4623      	mov	r3, r4
 8012f94:	f7ff fb38 	bl	8012608 <VerifyCmacB0>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012f9c:	7d7b      	ldrb	r3, [r7, #21]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d001      	beq.n	8012fa6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8012fa2:	7d7b      	ldrb	r3, [r7, #21]
 8012fa4:	e021      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8012fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d101      	bne.n	8012fb4 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012fb0:	2302      	movs	r3, #2
 8012fb2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8012fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012fbe:	b219      	sxth	r1, r3
 8012fc0:	7dfa      	ldrb	r2, [r7, #23]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	9301      	str	r3, [sp, #4]
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	9300      	str	r3, [sp, #0]
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	f7ff f9dc 	bl	8012388 <PayloadEncrypt>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012fd4:	7d7b      	ldrb	r3, [r7, #21]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d001      	beq.n	8012fde <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8012fda:	7d7b      	ldrb	r3, [r7, #21]
 8012fdc:	e005      	b.n	8012fea <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8012fde:	7bbb      	ldrb	r3, [r7, #14]
 8012fe0:	6879      	ldr	r1, [r7, #4]
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff fc60 	bl	80128a8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012fe8:	2300      	movs	r3, #0
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	371c      	adds	r7, #28
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd90      	pop	{r4, r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	20000dcc 	.word	0x20000dcc

08012ff8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b086      	sub	sp, #24
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	4603      	mov	r3, r0
 8013000:	460a      	mov	r2, r1
 8013002:	71fb      	strb	r3, [r7, #7]
 8013004:	4613      	mov	r3, r2
 8013006:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013008:	79bb      	ldrb	r3, [r7, #6]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d001      	beq.n	8013012 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801300e:	230b      	movs	r3, #11
 8013010:	e019      	b.n	8013046 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013012:	2300      	movs	r3, #0
 8013014:	60bb      	str	r3, [r7, #8]
 8013016:	f107 030c 	add.w	r3, r7, #12
 801301a:	2200      	movs	r2, #0
 801301c:	601a      	str	r2, [r3, #0]
 801301e:	605a      	str	r2, [r3, #4]
 8013020:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013022:	79fb      	ldrb	r3, [r7, #7]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d101      	bne.n	801302c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013028:	2320      	movs	r3, #32
 801302a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801302c:	79b9      	ldrb	r1, [r7, #6]
 801302e:	f107 0308 	add.w	r3, r7, #8
 8013032:	2204      	movs	r2, #4
 8013034:	4618      	mov	r0, r3
 8013036:	f7f8 fc54 	bl	800b8e2 <SecureElementDeriveAndStoreKey>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d001      	beq.n	8013044 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013040:	230f      	movs	r3, #15
 8013042:	e000      	b.n	8013046 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013044:	2300      	movs	r3, #0
}
 8013046:	4618      	mov	r0, r3
 8013048:	3718      	adds	r7, #24
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b086      	sub	sp, #24
 8013052:	af00      	add	r7, sp, #0
 8013054:	4603      	mov	r3, r0
 8013056:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013058:	79fb      	ldrb	r3, [r7, #7]
 801305a:	2b04      	cmp	r3, #4
 801305c:	d001      	beq.n	8013062 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801305e:	230b      	movs	r3, #11
 8013060:	e014      	b.n	801308c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013062:	2300      	movs	r3, #0
 8013064:	60bb      	str	r3, [r7, #8]
 8013066:	f107 030c 	add.w	r3, r7, #12
 801306a:	2200      	movs	r2, #0
 801306c:	601a      	str	r2, [r3, #0]
 801306e:	605a      	str	r2, [r3, #4]
 8013070:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013072:	79f9      	ldrb	r1, [r7, #7]
 8013074:	f107 0308 	add.w	r3, r7, #8
 8013078:	227f      	movs	r2, #127	; 0x7f
 801307a:	4618      	mov	r0, r3
 801307c:	f7f8 fc31 	bl	800b8e2 <SecureElementDeriveAndStoreKey>
 8013080:	4603      	mov	r3, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	d001      	beq.n	801308a <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013086:	230f      	movs	r3, #15
 8013088:	e000      	b.n	801308c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801308a:	2300      	movs	r3, #0
}
 801308c:	4618      	mov	r0, r3
 801308e:	3718      	adds	r7, #24
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d003      	beq.n	80130aa <LoRaMacParserJoinAccept+0x16>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d101      	bne.n	80130ae <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80130aa:	2302      	movs	r3, #2
 80130ac:	e0b9      	b.n	8013222 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	89fb      	ldrh	r3, [r7, #14]
 80130b8:	1c59      	adds	r1, r3, #1
 80130ba:	81f9      	strh	r1, [r7, #14]
 80130bc:	4413      	add	r3, r2
 80130be:	781a      	ldrb	r2, [r3, #0]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	1d98      	adds	r0, r3, #6
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	89fb      	ldrh	r3, [r7, #14]
 80130ce:	4413      	add	r3, r2
 80130d0:	2203      	movs	r2, #3
 80130d2:	4619      	mov	r1, r3
 80130d4:	f002 fe31 	bl	8015d3a <memcpy1>
    bufItr = bufItr + 3;
 80130d8:	89fb      	ldrh	r3, [r7, #14]
 80130da:	3303      	adds	r3, #3
 80130dc:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f103 0009 	add.w	r0, r3, #9
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681a      	ldr	r2, [r3, #0]
 80130e8:	89fb      	ldrh	r3, [r7, #14]
 80130ea:	4413      	add	r3, r2
 80130ec:	2203      	movs	r2, #3
 80130ee:	4619      	mov	r1, r3
 80130f0:	f002 fe23 	bl	8015d3a <memcpy1>
    bufItr = bufItr + 3;
 80130f4:	89fb      	ldrh	r3, [r7, #14]
 80130f6:	3303      	adds	r3, #3
 80130f8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	89fb      	ldrh	r3, [r7, #14]
 8013100:	1c59      	adds	r1, r3, #1
 8013102:	81f9      	strh	r1, [r7, #14]
 8013104:	4413      	add	r3, r2
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	461a      	mov	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	89fb      	ldrh	r3, [r7, #14]
 8013114:	1c59      	adds	r1, r3, #1
 8013116:	81f9      	strh	r1, [r7, #14]
 8013118:	4413      	add	r3, r2
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	021a      	lsls	r2, r3, #8
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	431a      	orrs	r2, r3
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681a      	ldr	r2, [r3, #0]
 801312c:	89fb      	ldrh	r3, [r7, #14]
 801312e:	1c59      	adds	r1, r3, #1
 8013130:	81f9      	strh	r1, [r7, #14]
 8013132:	4413      	add	r3, r2
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	041a      	lsls	r2, r3, #16
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	431a      	orrs	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	89fb      	ldrh	r3, [r7, #14]
 8013148:	1c59      	adds	r1, r3, #1
 801314a:	81f9      	strh	r1, [r7, #14]
 801314c:	4413      	add	r3, r2
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	061a      	lsls	r2, r3, #24
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	431a      	orrs	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	89fb      	ldrh	r3, [r7, #14]
 8013162:	1c59      	adds	r1, r3, #1
 8013164:	81f9      	strh	r1, [r7, #14]
 8013166:	4413      	add	r3, r2
 8013168:	781a      	ldrb	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681a      	ldr	r2, [r3, #0]
 8013172:	89fb      	ldrh	r3, [r7, #14]
 8013174:	1c59      	adds	r1, r3, #1
 8013176:	81f9      	strh	r1, [r7, #14]
 8013178:	4413      	add	r3, r2
 801317a:	781a      	ldrb	r2, [r3, #0]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	791b      	ldrb	r3, [r3, #4]
 8013184:	1f1a      	subs	r2, r3, #4
 8013186:	89fb      	ldrh	r3, [r7, #14]
 8013188:	1ad3      	subs	r3, r2, r3
 801318a:	2b10      	cmp	r3, #16
 801318c:	d10e      	bne.n	80131ac <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f103 0012 	add.w	r0, r3, #18
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	89fb      	ldrh	r3, [r7, #14]
 801319a:	4413      	add	r3, r2
 801319c:	2210      	movs	r2, #16
 801319e:	4619      	mov	r1, r3
 80131a0:	f002 fdcb 	bl	8015d3a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80131a4:	89fb      	ldrh	r3, [r7, #14]
 80131a6:	3310      	adds	r3, #16
 80131a8:	81fb      	strh	r3, [r7, #14]
 80131aa:	e008      	b.n	80131be <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	791b      	ldrb	r3, [r3, #4]
 80131b0:	1f1a      	subs	r2, r3, #4
 80131b2:	89fb      	ldrh	r3, [r7, #14]
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	dd01      	ble.n	80131be <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80131ba:	2301      	movs	r3, #1
 80131bc:	e031      	b.n	8013222 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	89fb      	ldrh	r3, [r7, #14]
 80131c4:	1c59      	adds	r1, r3, #1
 80131c6:	81f9      	strh	r1, [r7, #14]
 80131c8:	4413      	add	r3, r2
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	461a      	mov	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	89fb      	ldrh	r3, [r7, #14]
 80131d8:	1c59      	adds	r1, r3, #1
 80131da:	81f9      	strh	r1, [r7, #14]
 80131dc:	4413      	add	r3, r2
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	021a      	lsls	r2, r3, #8
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131e6:	431a      	orrs	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	89fb      	ldrh	r3, [r7, #14]
 80131f2:	1c59      	adds	r1, r3, #1
 80131f4:	81f9      	strh	r1, [r7, #14]
 80131f6:	4413      	add	r3, r2
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	041a      	lsls	r2, r3, #16
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013200:	431a      	orrs	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	89fb      	ldrh	r3, [r7, #14]
 801320c:	1c59      	adds	r1, r3, #1
 801320e:	81f9      	strh	r1, [r7, #14]
 8013210:	4413      	add	r3, r2
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	061a      	lsls	r2, r3, #24
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801321a:	431a      	orrs	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	3710      	adds	r7, #16
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}

0801322a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801322a:	b580      	push	{r7, lr}
 801322c:	b084      	sub	sp, #16
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d003      	beq.n	8013240 <LoRaMacParserData+0x16>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d101      	bne.n	8013244 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013240:	2302      	movs	r3, #2
 8013242:	e0e2      	b.n	801340a <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013244:	2300      	movs	r3, #0
 8013246:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	89fb      	ldrh	r3, [r7, #14]
 801324e:	1c59      	adds	r1, r3, #1
 8013250:	81f9      	strh	r1, [r7, #14]
 8013252:	4413      	add	r3, r2
 8013254:	781a      	ldrb	r2, [r3, #0]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	89fb      	ldrh	r3, [r7, #14]
 8013260:	1c59      	adds	r1, r3, #1
 8013262:	81f9      	strh	r1, [r7, #14]
 8013264:	4413      	add	r3, r2
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	461a      	mov	r2, r3
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	89fb      	ldrh	r3, [r7, #14]
 8013274:	1c59      	adds	r1, r3, #1
 8013276:	81f9      	strh	r1, [r7, #14]
 8013278:	4413      	add	r3, r2
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	021a      	lsls	r2, r3, #8
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	431a      	orrs	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	89fb      	ldrh	r3, [r7, #14]
 801328e:	1c59      	adds	r1, r3, #1
 8013290:	81f9      	strh	r1, [r7, #14]
 8013292:	4413      	add	r3, r2
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	041a      	lsls	r2, r3, #16
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	431a      	orrs	r2, r3
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681a      	ldr	r2, [r3, #0]
 80132a6:	89fb      	ldrh	r3, [r7, #14]
 80132a8:	1c59      	adds	r1, r3, #1
 80132aa:	81f9      	strh	r1, [r7, #14]
 80132ac:	4413      	add	r3, r2
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	061a      	lsls	r2, r3, #24
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	689b      	ldr	r3, [r3, #8]
 80132b6:	431a      	orrs	r2, r3
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	89fb      	ldrh	r3, [r7, #14]
 80132c2:	1c59      	adds	r1, r3, #1
 80132c4:	81f9      	strh	r1, [r7, #14]
 80132c6:	4413      	add	r3, r2
 80132c8:	781a      	ldrb	r2, [r3, #0]
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681a      	ldr	r2, [r3, #0]
 80132d2:	89fb      	ldrh	r3, [r7, #14]
 80132d4:	1c59      	adds	r1, r3, #1
 80132d6:	81f9      	strh	r1, [r7, #14]
 80132d8:	4413      	add	r3, r2
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	b29a      	uxth	r2, r3
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681a      	ldr	r2, [r3, #0]
 80132e6:	89fb      	ldrh	r3, [r7, #14]
 80132e8:	1c59      	adds	r1, r3, #1
 80132ea:	81f9      	strh	r1, [r7, #14]
 80132ec:	4413      	add	r3, r2
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	0219      	lsls	r1, r3, #8
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	89db      	ldrh	r3, [r3, #14]
 80132f6:	b21a      	sxth	r2, r3
 80132f8:	b20b      	sxth	r3, r1
 80132fa:	4313      	orrs	r3, r2
 80132fc:	b21b      	sxth	r3, r3
 80132fe:	b29a      	uxth	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f103 0010 	add.w	r0, r3, #16
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	89fb      	ldrh	r3, [r7, #14]
 8013310:	18d1      	adds	r1, r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	7b1b      	ldrb	r3, [r3, #12]
 8013316:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801331a:	b2db      	uxtb	r3, r3
 801331c:	b29b      	uxth	r3, r3
 801331e:	461a      	mov	r2, r3
 8013320:	f002 fd0b 	bl	8015d3a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	7b1b      	ldrb	r3, [r3, #12]
 8013328:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801332c:	b2db      	uxtb	r3, r3
 801332e:	b29a      	uxth	r2, r3
 8013330:	89fb      	ldrh	r3, [r7, #14]
 8013332:	4413      	add	r3, r2
 8013334:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2200      	movs	r2, #0
 801333a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2200      	movs	r2, #0
 8013342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	791b      	ldrb	r3, [r3, #4]
 801334a:	461a      	mov	r2, r3
 801334c:	89fb      	ldrh	r3, [r7, #14]
 801334e:	1ad3      	subs	r3, r2, r3
 8013350:	2b04      	cmp	r3, #4
 8013352:	dd28      	ble.n	80133a6 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681a      	ldr	r2, [r3, #0]
 8013358:	89fb      	ldrh	r3, [r7, #14]
 801335a:	1c59      	adds	r1, r3, #1
 801335c:	81f9      	strh	r1, [r7, #14]
 801335e:	4413      	add	r3, r2
 8013360:	781a      	ldrb	r2, [r3, #0]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	791a      	ldrb	r2, [r3, #4]
 801336c:	89fb      	ldrh	r3, [r7, #14]
 801336e:	b2db      	uxtb	r3, r3
 8013370:	1ad3      	subs	r3, r2, r3
 8013372:	b2db      	uxtb	r3, r3
 8013374:	3b04      	subs	r3, #4
 8013376:	b2da      	uxtb	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	89fb      	ldrh	r3, [r7, #14]
 8013388:	18d1      	adds	r1, r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013390:	b29b      	uxth	r3, r3
 8013392:	461a      	mov	r2, r3
 8013394:	f002 fcd1 	bl	8015d3a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801339e:	b29a      	uxth	r2, r3
 80133a0:	89fb      	ldrh	r3, [r7, #14]
 80133a2:	4413      	add	r3, r2
 80133a4:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	791b      	ldrb	r3, [r3, #4]
 80133ae:	3b04      	subs	r3, #4
 80133b0:	4413      	add	r3, r2
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	461a      	mov	r2, r3
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6819      	ldr	r1, [r3, #0]
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	791b      	ldrb	r3, [r3, #4]
 80133c6:	3b03      	subs	r3, #3
 80133c8:	440b      	add	r3, r1
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	021b      	lsls	r3, r3, #8
 80133ce:	431a      	orrs	r2, r3
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6819      	ldr	r1, [r3, #0]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	791b      	ldrb	r3, [r3, #4]
 80133e0:	3b02      	subs	r3, #2
 80133e2:	440b      	add	r3, r1
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	041b      	lsls	r3, r3, #16
 80133e8:	431a      	orrs	r2, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6819      	ldr	r1, [r3, #0]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	791b      	ldrb	r3, [r3, #4]
 80133fa:	3b01      	subs	r3, #1
 80133fc:	440b      	add	r3, r1
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	061b      	lsls	r3, r3, #24
 8013402:	431a      	orrs	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013408:	2300      	movs	r3, #0
}
 801340a:	4618      	mov	r0, r3
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}

08013412 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013412:	b580      	push	{r7, lr}
 8013414:	b084      	sub	sp, #16
 8013416:	af00      	add	r7, sp, #0
 8013418:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d003      	beq.n	8013428 <LoRaMacSerializerJoinRequest+0x16>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d101      	bne.n	801342c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013428:	2301      	movs	r3, #1
 801342a:	e070      	b.n	801350e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801342c:	2300      	movs	r3, #0
 801342e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	791b      	ldrb	r3, [r3, #4]
 8013434:	2b16      	cmp	r3, #22
 8013436:	d801      	bhi.n	801343c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013438:	2302      	movs	r3, #2
 801343a:	e068      	b.n	801350e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	89fb      	ldrh	r3, [r7, #14]
 8013442:	1c59      	adds	r1, r3, #1
 8013444:	81f9      	strh	r1, [r7, #14]
 8013446:	4413      	add	r3, r2
 8013448:	687a      	ldr	r2, [r7, #4]
 801344a:	7952      	ldrb	r2, [r2, #5]
 801344c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	89fb      	ldrh	r3, [r7, #14]
 8013454:	18d0      	adds	r0, r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	3306      	adds	r3, #6
 801345a:	2208      	movs	r2, #8
 801345c:	4619      	mov	r1, r3
 801345e:	f002 fc87 	bl	8015d70 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013462:	89fb      	ldrh	r3, [r7, #14]
 8013464:	3308      	adds	r3, #8
 8013466:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	89fb      	ldrh	r3, [r7, #14]
 801346e:	18d0      	adds	r0, r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	330e      	adds	r3, #14
 8013474:	2208      	movs	r2, #8
 8013476:	4619      	mov	r1, r3
 8013478:	f002 fc7a 	bl	8015d70 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801347c:	89fb      	ldrh	r3, [r7, #14]
 801347e:	3308      	adds	r3, #8
 8013480:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	8ad9      	ldrh	r1, [r3, #22]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	89fb      	ldrh	r3, [r7, #14]
 801348c:	1c58      	adds	r0, r3, #1
 801348e:	81f8      	strh	r0, [r7, #14]
 8013490:	4413      	add	r3, r2
 8013492:	b2ca      	uxtb	r2, r1
 8013494:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	8adb      	ldrh	r3, [r3, #22]
 801349a:	0a1b      	lsrs	r3, r3, #8
 801349c:	b299      	uxth	r1, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	89fb      	ldrh	r3, [r7, #14]
 80134a4:	1c58      	adds	r0, r3, #1
 80134a6:	81f8      	strh	r0, [r7, #14]
 80134a8:	4413      	add	r3, r2
 80134aa:	b2ca      	uxtb	r2, r1
 80134ac:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6999      	ldr	r1, [r3, #24]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	89fb      	ldrh	r3, [r7, #14]
 80134b8:	1c58      	adds	r0, r3, #1
 80134ba:	81f8      	strh	r0, [r7, #14]
 80134bc:	4413      	add	r3, r2
 80134be:	b2ca      	uxtb	r2, r1
 80134c0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	699b      	ldr	r3, [r3, #24]
 80134c6:	0a19      	lsrs	r1, r3, #8
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	89fb      	ldrh	r3, [r7, #14]
 80134ce:	1c58      	adds	r0, r3, #1
 80134d0:	81f8      	strh	r0, [r7, #14]
 80134d2:	4413      	add	r3, r2
 80134d4:	b2ca      	uxtb	r2, r1
 80134d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	699b      	ldr	r3, [r3, #24]
 80134dc:	0c19      	lsrs	r1, r3, #16
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	89fb      	ldrh	r3, [r7, #14]
 80134e4:	1c58      	adds	r0, r3, #1
 80134e6:	81f8      	strh	r0, [r7, #14]
 80134e8:	4413      	add	r3, r2
 80134ea:	b2ca      	uxtb	r2, r1
 80134ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	699b      	ldr	r3, [r3, #24]
 80134f2:	0e19      	lsrs	r1, r3, #24
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681a      	ldr	r2, [r3, #0]
 80134f8:	89fb      	ldrh	r3, [r7, #14]
 80134fa:	1c58      	adds	r0, r3, #1
 80134fc:	81f8      	strh	r0, [r7, #14]
 80134fe:	4413      	add	r3, r2
 8013500:	b2ca      	uxtb	r2, r1
 8013502:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013504:	89fb      	ldrh	r3, [r7, #14]
 8013506:	b2da      	uxtb	r2, r3
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801350c:	2300      	movs	r3, #0
}
 801350e:	4618      	mov	r0, r3
 8013510:	3710      	adds	r7, #16
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}

08013516 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013516:	b580      	push	{r7, lr}
 8013518:	b084      	sub	sp, #16
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <LoRaMacSerializerData+0x16>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d101      	bne.n	8013530 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801352c:	2301      	movs	r3, #1
 801352e:	e0e5      	b.n	80136fc <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013530:	2300      	movs	r3, #0
 8013532:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013534:	2308      	movs	r3, #8
 8013536:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	7b1b      	ldrb	r3, [r3, #12]
 801353c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013540:	b2db      	uxtb	r3, r3
 8013542:	b29a      	uxth	r2, r3
 8013544:	89bb      	ldrh	r3, [r7, #12]
 8013546:	4413      	add	r3, r2
 8013548:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013550:	2b00      	cmp	r3, #0
 8013552:	d002      	beq.n	801355a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013554:	89bb      	ldrh	r3, [r7, #12]
 8013556:	3301      	adds	r3, #1
 8013558:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013560:	b29a      	uxth	r2, r3
 8013562:	89bb      	ldrh	r3, [r7, #12]
 8013564:	4413      	add	r3, r2
 8013566:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013568:	89bb      	ldrh	r3, [r7, #12]
 801356a:	3304      	adds	r3, #4
 801356c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	791b      	ldrb	r3, [r3, #4]
 8013572:	b29b      	uxth	r3, r3
 8013574:	89ba      	ldrh	r2, [r7, #12]
 8013576:	429a      	cmp	r2, r3
 8013578:	d901      	bls.n	801357e <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801357a:	2302      	movs	r3, #2
 801357c:	e0be      	b.n	80136fc <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	89fb      	ldrh	r3, [r7, #14]
 8013584:	1c59      	adds	r1, r3, #1
 8013586:	81f9      	strh	r1, [r7, #14]
 8013588:	4413      	add	r3, r2
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	7952      	ldrb	r2, [r2, #5]
 801358e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6899      	ldr	r1, [r3, #8]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681a      	ldr	r2, [r3, #0]
 8013598:	89fb      	ldrh	r3, [r7, #14]
 801359a:	1c58      	adds	r0, r3, #1
 801359c:	81f8      	strh	r0, [r7, #14]
 801359e:	4413      	add	r3, r2
 80135a0:	b2ca      	uxtb	r2, r1
 80135a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	689b      	ldr	r3, [r3, #8]
 80135a8:	0a19      	lsrs	r1, r3, #8
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	89fb      	ldrh	r3, [r7, #14]
 80135b0:	1c58      	adds	r0, r3, #1
 80135b2:	81f8      	strh	r0, [r7, #14]
 80135b4:	4413      	add	r3, r2
 80135b6:	b2ca      	uxtb	r2, r1
 80135b8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	0c19      	lsrs	r1, r3, #16
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681a      	ldr	r2, [r3, #0]
 80135c4:	89fb      	ldrh	r3, [r7, #14]
 80135c6:	1c58      	adds	r0, r3, #1
 80135c8:	81f8      	strh	r0, [r7, #14]
 80135ca:	4413      	add	r3, r2
 80135cc:	b2ca      	uxtb	r2, r1
 80135ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	689b      	ldr	r3, [r3, #8]
 80135d4:	0e19      	lsrs	r1, r3, #24
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	89fb      	ldrh	r3, [r7, #14]
 80135dc:	1c58      	adds	r0, r3, #1
 80135de:	81f8      	strh	r0, [r7, #14]
 80135e0:	4413      	add	r3, r2
 80135e2:	b2ca      	uxtb	r2, r1
 80135e4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681a      	ldr	r2, [r3, #0]
 80135ea:	89fb      	ldrh	r3, [r7, #14]
 80135ec:	1c59      	adds	r1, r3, #1
 80135ee:	81f9      	strh	r1, [r7, #14]
 80135f0:	4413      	add	r3, r2
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	7b12      	ldrb	r2, [r2, #12]
 80135f6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	89d9      	ldrh	r1, [r3, #14]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	89fb      	ldrh	r3, [r7, #14]
 8013602:	1c58      	adds	r0, r3, #1
 8013604:	81f8      	strh	r0, [r7, #14]
 8013606:	4413      	add	r3, r2
 8013608:	b2ca      	uxtb	r2, r1
 801360a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	89db      	ldrh	r3, [r3, #14]
 8013610:	0a1b      	lsrs	r3, r3, #8
 8013612:	b299      	uxth	r1, r3
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	89fb      	ldrh	r3, [r7, #14]
 801361a:	1c58      	adds	r0, r3, #1
 801361c:	81f8      	strh	r0, [r7, #14]
 801361e:	4413      	add	r3, r2
 8013620:	b2ca      	uxtb	r2, r1
 8013622:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	89fb      	ldrh	r3, [r7, #14]
 801362a:	18d0      	adds	r0, r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f103 0110 	add.w	r1, r3, #16
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	7b1b      	ldrb	r3, [r3, #12]
 8013636:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801363a:	b2db      	uxtb	r3, r3
 801363c:	b29b      	uxth	r3, r3
 801363e:	461a      	mov	r2, r3
 8013640:	f002 fb7b 	bl	8015d3a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	7b1b      	ldrb	r3, [r3, #12]
 8013648:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801364c:	b2db      	uxtb	r3, r3
 801364e:	b29a      	uxth	r2, r3
 8013650:	89fb      	ldrh	r3, [r7, #14]
 8013652:	4413      	add	r3, r2
 8013654:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801365c:	2b00      	cmp	r3, #0
 801365e:	d009      	beq.n	8013674 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	89fb      	ldrh	r3, [r7, #14]
 8013666:	1c59      	adds	r1, r3, #1
 8013668:	81f9      	strh	r1, [r7, #14]
 801366a:	4413      	add	r3, r2
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013672:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681a      	ldr	r2, [r3, #0]
 8013678:	89fb      	ldrh	r3, [r7, #14]
 801367a:	18d0      	adds	r0, r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013686:	b29b      	uxth	r3, r3
 8013688:	461a      	mov	r2, r3
 801368a:	f002 fb56 	bl	8015d3a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013694:	b29a      	uxth	r2, r3
 8013696:	89fb      	ldrh	r3, [r7, #14]
 8013698:	4413      	add	r3, r2
 801369a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	89fb      	ldrh	r3, [r7, #14]
 80136a6:	1c58      	adds	r0, r3, #1
 80136a8:	81f8      	strh	r0, [r7, #14]
 80136aa:	4413      	add	r3, r2
 80136ac:	b2ca      	uxtb	r2, r1
 80136ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b4:	0a19      	lsrs	r1, r3, #8
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	89fb      	ldrh	r3, [r7, #14]
 80136bc:	1c58      	adds	r0, r3, #1
 80136be:	81f8      	strh	r0, [r7, #14]
 80136c0:	4413      	add	r3, r2
 80136c2:	b2ca      	uxtb	r2, r1
 80136c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ca:	0c19      	lsrs	r1, r3, #16
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	89fb      	ldrh	r3, [r7, #14]
 80136d2:	1c58      	adds	r0, r3, #1
 80136d4:	81f8      	strh	r0, [r7, #14]
 80136d6:	4413      	add	r3, r2
 80136d8:	b2ca      	uxtb	r2, r1
 80136da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136e0:	0e19      	lsrs	r1, r3, #24
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	89fb      	ldrh	r3, [r7, #14]
 80136e8:	1c58      	adds	r0, r3, #1
 80136ea:	81f8      	strh	r0, [r7, #14]
 80136ec:	4413      	add	r3, r2
 80136ee:	b2ca      	uxtb	r2, r1
 80136f0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80136f2:	89fb      	ldrh	r3, [r7, #14]
 80136f4:	b2da      	uxtb	r2, r3
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3710      	adds	r7, #16
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013704:	b480      	push	{r7}
 8013706:	b083      	sub	sp, #12
 8013708:	af00      	add	r7, sp, #0
 801370a:	4603      	mov	r3, r0
 801370c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801370e:	79fb      	ldrb	r3, [r7, #7]
 8013710:	2b05      	cmp	r3, #5
 8013712:	d101      	bne.n	8013718 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013714:	2301      	movs	r3, #1
 8013716:	e000      	b.n	801371a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013718:	2300      	movs	r3, #0
        }
    }
}
 801371a:	4618      	mov	r0, r3
 801371c:	370c      	adds	r7, #12
 801371e:	46bd      	mov	sp, r7
 8013720:	bc80      	pop	{r7}
 8013722:	4770      	bx	lr

08013724 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	4603      	mov	r3, r0
 801372c:	6039      	str	r1, [r7, #0]
 801372e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013730:	2300      	movs	r3, #0
 8013732:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013734:	79fb      	ldrb	r3, [r7, #7]
 8013736:	2b05      	cmp	r3, #5
 8013738:	d105      	bne.n	8013746 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801373a:	6838      	ldr	r0, [r7, #0]
 801373c:	f001 f992 	bl	8014a64 <RegionEU868GetPhyParam>
 8013740:	4603      	mov	r3, r0
 8013742:	60fb      	str	r3, [r7, #12]
 8013744:	e001      	b.n	801374a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	60fb      	str	r3, [r7, #12]
 801374a:	2300      	movs	r3, #0
 801374c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 801374e:	4618      	mov	r0, r3
 8013750:	3710      	adds	r7, #16
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013756:	b580      	push	{r7, lr}
 8013758:	b082      	sub	sp, #8
 801375a:	af00      	add	r7, sp, #0
 801375c:	4603      	mov	r3, r0
 801375e:	6039      	str	r1, [r7, #0]
 8013760:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013762:	79fb      	ldrb	r3, [r7, #7]
 8013764:	2b05      	cmp	r3, #5
 8013766:	d103      	bne.n	8013770 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013768:	6838      	ldr	r0, [r7, #0]
 801376a:	f001 fac5 	bl	8014cf8 <RegionEU868SetBandTxDone>
 801376e:	e000      	b.n	8013772 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013770:	bf00      	nop
        }
    }
}
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	4603      	mov	r3, r0
 8013780:	6039      	str	r1, [r7, #0]
 8013782:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013784:	79fb      	ldrb	r3, [r7, #7]
 8013786:	2b05      	cmp	r3, #5
 8013788:	d103      	bne.n	8013792 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801378a:	6838      	ldr	r0, [r7, #0]
 801378c:	f001 fae0 	bl	8014d50 <RegionEU868InitDefaults>
 8013790:	e000      	b.n	8013794 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013792:	bf00      	nop
        }
    }
}
 8013794:	bf00      	nop
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	4603      	mov	r3, r0
 80137a4:	6039      	str	r1, [r7, #0]
 80137a6:	71fb      	strb	r3, [r7, #7]
 80137a8:	4613      	mov	r3, r2
 80137aa:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	2b05      	cmp	r3, #5
 80137b0:	d106      	bne.n	80137c0 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80137b2:	79bb      	ldrb	r3, [r7, #6]
 80137b4:	4619      	mov	r1, r3
 80137b6:	6838      	ldr	r0, [r7, #0]
 80137b8:	f001 fb66 	bl	8014e88 <RegionEU868Verify>
 80137bc:	4603      	mov	r3, r0
 80137be:	e000      	b.n	80137c2 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80137c0:	2300      	movs	r3, #0
        }
    }
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3708      	adds	r7, #8
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}

080137ca <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80137ca:	b580      	push	{r7, lr}
 80137cc:	b082      	sub	sp, #8
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	4603      	mov	r3, r0
 80137d2:	6039      	str	r1, [r7, #0]
 80137d4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80137d6:	79fb      	ldrb	r3, [r7, #7]
 80137d8:	2b05      	cmp	r3, #5
 80137da:	d103      	bne.n	80137e4 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80137dc:	6838      	ldr	r0, [r7, #0]
 80137de:	f001 fbcf 	bl	8014f80 <RegionEU868ApplyCFList>
 80137e2:	e000      	b.n	80137e6 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80137e4:	bf00      	nop
        }
    }
}
 80137e6:	bf00      	nop
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80137ee:	b580      	push	{r7, lr}
 80137f0:	b082      	sub	sp, #8
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	4603      	mov	r3, r0
 80137f6:	6039      	str	r1, [r7, #0]
 80137f8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80137fa:	79fb      	ldrb	r3, [r7, #7]
 80137fc:	2b05      	cmp	r3, #5
 80137fe:	d104      	bne.n	801380a <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013800:	6838      	ldr	r0, [r7, #0]
 8013802:	f001 fc31 	bl	8015068 <RegionEU868ChanMaskSet>
 8013806:	4603      	mov	r3, r0
 8013808:	e000      	b.n	801380c <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801380a:	2300      	movs	r3, #0
        }
    }
}
 801380c:	4618      	mov	r0, r3
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b082      	sub	sp, #8
 8013818:	af00      	add	r7, sp, #0
 801381a:	603b      	str	r3, [r7, #0]
 801381c:	4603      	mov	r3, r0
 801381e:	71fb      	strb	r3, [r7, #7]
 8013820:	460b      	mov	r3, r1
 8013822:	71bb      	strb	r3, [r7, #6]
 8013824:	4613      	mov	r3, r2
 8013826:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013828:	79fb      	ldrb	r3, [r7, #7]
 801382a:	2b05      	cmp	r3, #5
 801382c:	d107      	bne.n	801383e <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801382e:	7979      	ldrb	r1, [r7, #5]
 8013830:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	683a      	ldr	r2, [r7, #0]
 8013838:	f001 fc40 	bl	80150bc <RegionEU868ComputeRxWindowParameters>
 801383c:	e000      	b.n	8013840 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801383e:	bf00      	nop
        }
    }
}
 8013840:	bf00      	nop
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	4603      	mov	r3, r0
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	607a      	str	r2, [r7, #4]
 8013854:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013856:	7bfb      	ldrb	r3, [r7, #15]
 8013858:	2b05      	cmp	r3, #5
 801385a:	d105      	bne.n	8013868 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801385c:	6879      	ldr	r1, [r7, #4]
 801385e:	68b8      	ldr	r0, [r7, #8]
 8013860:	f001 fc86 	bl	8015170 <RegionEU868RxConfig>
 8013864:	4603      	mov	r3, r0
 8013866:	e000      	b.n	801386a <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013868:	2300      	movs	r3, #0
        }
    }
}
 801386a:	4618      	mov	r0, r3
 801386c:	3710      	adds	r7, #16
 801386e:	46bd      	mov	sp, r7
 8013870:	bd80      	pop	{r7, pc}

08013872 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013872:	b580      	push	{r7, lr}
 8013874:	b084      	sub	sp, #16
 8013876:	af00      	add	r7, sp, #0
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
 801387c:	603b      	str	r3, [r7, #0]
 801387e:	4603      	mov	r3, r0
 8013880:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013882:	7bfb      	ldrb	r3, [r7, #15]
 8013884:	2b05      	cmp	r3, #5
 8013886:	d106      	bne.n	8013896 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013888:	683a      	ldr	r2, [r7, #0]
 801388a:	6879      	ldr	r1, [r7, #4]
 801388c:	68b8      	ldr	r0, [r7, #8]
 801388e:	f001 fd3f 	bl	8015310 <RegionEU868TxConfig>
 8013892:	4603      	mov	r3, r0
 8013894:	e000      	b.n	8013898 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013896:	2300      	movs	r3, #0
        }
    }
}
 8013898:	4618      	mov	r0, r3
 801389a:	3710      	adds	r7, #16
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b086      	sub	sp, #24
 80138a4:	af02      	add	r7, sp, #8
 80138a6:	60b9      	str	r1, [r7, #8]
 80138a8:	607a      	str	r2, [r7, #4]
 80138aa:	603b      	str	r3, [r7, #0]
 80138ac:	4603      	mov	r3, r0
 80138ae:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80138b0:	7bfb      	ldrb	r3, [r7, #15]
 80138b2:	2b05      	cmp	r3, #5
 80138b4:	d109      	bne.n	80138ca <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	9300      	str	r3, [sp, #0]
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	6879      	ldr	r1, [r7, #4]
 80138c0:	68b8      	ldr	r0, [r7, #8]
 80138c2:	f001 fdf5 	bl	80154b0 <RegionEU868LinkAdrReq>
 80138c6:	4603      	mov	r3, r0
 80138c8:	e000      	b.n	80138cc <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80138ca:	2300      	movs	r3, #0
        }
    }
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	6039      	str	r1, [r7, #0]
 80138de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80138e0:	79fb      	ldrb	r3, [r7, #7]
 80138e2:	2b05      	cmp	r3, #5
 80138e4:	d104      	bne.n	80138f0 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80138e6:	6838      	ldr	r0, [r7, #0]
 80138e8:	f001 ff04 	bl	80156f4 <RegionEU868RxParamSetupReq>
 80138ec:	4603      	mov	r3, r0
 80138ee:	e000      	b.n	80138f2 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80138f0:	2300      	movs	r3, #0
        }
    }
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3708      	adds	r7, #8
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}

080138fa <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b082      	sub	sp, #8
 80138fe:	af00      	add	r7, sp, #0
 8013900:	4603      	mov	r3, r0
 8013902:	6039      	str	r1, [r7, #0]
 8013904:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013906:	79fb      	ldrb	r3, [r7, #7]
 8013908:	2b05      	cmp	r3, #5
 801390a:	d104      	bne.n	8013916 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801390c:	6838      	ldr	r0, [r7, #0]
 801390e:	f001 ff2f 	bl	8015770 <RegionEU868NewChannelReq>
 8013912:	4603      	mov	r3, r0
 8013914:	e000      	b.n	8013918 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013916:	2300      	movs	r3, #0
        }
    }
}
 8013918:	4618      	mov	r0, r3
 801391a:	3708      	adds	r7, #8
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
 8013926:	4603      	mov	r3, r0
 8013928:	6039      	str	r1, [r7, #0]
 801392a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801392c:	79fb      	ldrb	r3, [r7, #7]
 801392e:	2b05      	cmp	r3, #5
 8013930:	d104      	bne.n	801393c <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013932:	6838      	ldr	r0, [r7, #0]
 8013934:	f001 ff7a 	bl	801582c <RegionEU868TxParamSetupReq>
 8013938:	4603      	mov	r3, r0
 801393a:	e000      	b.n	801393e <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801393c:	2300      	movs	r3, #0
        }
    }
}
 801393e:	4618      	mov	r0, r3
 8013940:	3708      	adds	r7, #8
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}

08013946 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013946:	b580      	push	{r7, lr}
 8013948:	b082      	sub	sp, #8
 801394a:	af00      	add	r7, sp, #0
 801394c:	4603      	mov	r3, r0
 801394e:	6039      	str	r1, [r7, #0]
 8013950:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013952:	79fb      	ldrb	r3, [r7, #7]
 8013954:	2b05      	cmp	r3, #5
 8013956:	d104      	bne.n	8013962 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013958:	6838      	ldr	r0, [r7, #0]
 801395a:	f001 ff73 	bl	8015844 <RegionEU868DlChannelReq>
 801395e:	4603      	mov	r3, r0
 8013960:	e000      	b.n	8013964 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013962:	2300      	movs	r3, #0
        }
    }
}
 8013964:	4618      	mov	r0, r3
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	4603      	mov	r3, r0
 8013974:	71fb      	strb	r3, [r7, #7]
 8013976:	460b      	mov	r3, r1
 8013978:	71bb      	strb	r3, [r7, #6]
 801397a:	4613      	mov	r3, r2
 801397c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801397e:	79fb      	ldrb	r3, [r7, #7]
 8013980:	2b05      	cmp	r3, #5
 8013982:	d108      	bne.n	8013996 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013984:	797a      	ldrb	r2, [r7, #5]
 8013986:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801398a:	4611      	mov	r1, r2
 801398c:	4618      	mov	r0, r3
 801398e:	f001 ff9d 	bl	80158cc <RegionEU868AlternateDr>
 8013992:	4603      	mov	r3, r0
 8013994:	e000      	b.n	8013998 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8013996:	2300      	movs	r3, #0
        }
    }
}
 8013998:	4618      	mov	r0, r3
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60b9      	str	r1, [r7, #8]
 80139a8:	607a      	str	r2, [r7, #4]
 80139aa:	603b      	str	r3, [r7, #0]
 80139ac:	4603      	mov	r3, r0
 80139ae:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80139b0:	7bfb      	ldrb	r3, [r7, #15]
 80139b2:	2b05      	cmp	r3, #5
 80139b4:	d107      	bne.n	80139c6 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	683a      	ldr	r2, [r7, #0]
 80139ba:	6879      	ldr	r1, [r7, #4]
 80139bc:	68b8      	ldr	r0, [r7, #8]
 80139be:	f001 ff95 	bl	80158ec <RegionEU868NextChannel>
 80139c2:	4603      	mov	r3, r0
 80139c4:	e000      	b.n	80139c8 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80139c6:	2309      	movs	r3, #9
        }
    }
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3710      	adds	r7, #16
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	4603      	mov	r3, r0
 80139d8:	6039      	str	r1, [r7, #0]
 80139da:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80139dc:	79fb      	ldrb	r3, [r7, #7]
 80139de:	2b05      	cmp	r3, #5
 80139e0:	d103      	bne.n	80139ea <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80139e2:	6838      	ldr	r0, [r7, #0]
 80139e4:	f002 f8fa 	bl	8015bdc <RegionEU868SetContinuousWave>
 80139e8:	e000      	b.n	80139ec <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80139ea:	bf00      	nop
        }
    }
}
 80139ec:	bf00      	nop
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80139f4:	b590      	push	{r4, r7, lr}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	4604      	mov	r4, r0
 80139fc:	4608      	mov	r0, r1
 80139fe:	4611      	mov	r1, r2
 8013a00:	461a      	mov	r2, r3
 8013a02:	4623      	mov	r3, r4
 8013a04:	71fb      	strb	r3, [r7, #7]
 8013a06:	4603      	mov	r3, r0
 8013a08:	71bb      	strb	r3, [r7, #6]
 8013a0a:	460b      	mov	r3, r1
 8013a0c:	717b      	strb	r3, [r7, #5]
 8013a0e:	4613      	mov	r3, r2
 8013a10:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013a12:	79fb      	ldrb	r3, [r7, #7]
 8013a14:	2b05      	cmp	r3, #5
 8013a16:	d109      	bne.n	8013a2c <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8013a18:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013a1c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013a20:	79bb      	ldrb	r3, [r7, #6]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f002 f928 	bl	8015c78 <RegionEU868ApplyDrOffset>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	e000      	b.n	8013a2e <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8013a2c:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8013a2e:	4618      	mov	r0, r3
 8013a30:	370c      	adds	r7, #12
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd90      	pop	{r4, r7, pc}
	...

08013a38 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b083      	sub	sp, #12
 8013a3c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8013a3e:	4b04      	ldr	r3, [pc, #16]	; (8013a50 <RegionGetVersion+0x18>)
 8013a40:	607b      	str	r3, [r7, #4]

    return version;
 8013a42:	687b      	ldr	r3, [r7, #4]
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	370c      	adds	r7, #12
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bc80      	pop	{r7}
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop
 8013a50:	01000300 	.word	0x01000300

08013a54 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013a54:	b480      	push	{r7}
 8013a56:	b087      	sub	sp, #28
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	4608      	mov	r0, r1
 8013a5e:	4639      	mov	r1, r7
 8013a60:	e881 000c 	stmia.w	r1, {r2, r3}
 8013a64:	4603      	mov	r3, r0
 8013a66:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8013a6e:	7afb      	ldrb	r3, [r7, #11]
 8013a70:	f083 0301 	eor.w	r3, r3, #1
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d01b      	beq.n	8013ab2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013a7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8013a7e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8013a86:	d202      	bcs.n	8013a8e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8013a88:	2364      	movs	r3, #100	; 0x64
 8013a8a:	82bb      	strh	r3, [r7, #20]
 8013a8c:	e00b      	b.n	8013aa6 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8013a94:	4293      	cmp	r3, r2
 8013a96:	d803      	bhi.n	8013aa0 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8013a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013a9c:	82bb      	strh	r3, [r7, #20]
 8013a9e:	e002      	b.n	8013aa6 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013aa0:	f242 7310 	movw	r3, #10000	; 0x2710
 8013aa4:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013aa6:	8aba      	ldrh	r2, [r7, #20]
 8013aa8:	8afb      	ldrh	r3, [r7, #22]
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	bf38      	it	cc
 8013aae:	4613      	movcc	r3, r2
 8013ab0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8013ab2:	8afb      	ldrh	r3, [r7, #22]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d101      	bne.n	8013abc <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8013ab8:	2301      	movs	r3, #1
 8013aba:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8013abc:	8afb      	ldrh	r3, [r7, #22]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	371c      	adds	r7, #28
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bc80      	pop	{r7}
 8013ac6:	4770      	bx	lr

08013ac8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b08e      	sub	sp, #56	; 0x38
 8013acc:	af02      	add	r7, sp, #8
 8013ace:	60f8      	str	r0, [r7, #12]
 8013ad0:	4608      	mov	r0, r1
 8013ad2:	4639      	mov	r1, r7
 8013ad4:	e881 000c 	stmia.w	r1, {r2, r3}
 8013ad8:	4603      	mov	r3, r0
 8013ada:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	881b      	ldrh	r3, [r3, #0]
 8013ae0:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013ae2:	4b4b      	ldr	r3, [pc, #300]	; (8013c10 <SetMaxTimeCredits+0x148>)
 8013ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013aec:	f005 fc60 	bl	80193b0 <SysTimeToMs>
 8013af0:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8013af2:	f107 0314 	add.w	r3, r7, #20
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013afc:	7af9      	ldrb	r1, [r7, #11]
 8013afe:	463b      	mov	r3, r7
 8013b00:	cb0c      	ldmia	r3, {r2, r3}
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff ffa6 	bl	8013a54 <GetDutyCycle>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8013b0c:	7afb      	ldrb	r3, [r7, #11]
 8013b0e:	f083 0301 	eor.w	r3, r3, #1
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d062      	beq.n	8013bde <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013b18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b1a:	2b64      	cmp	r3, #100	; 0x64
 8013b1c:	d105      	bne.n	8013b2a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013b1e:	4b3c      	ldr	r3, [pc, #240]	; (8013c10 <SetMaxTimeCredits+0x148>)
 8013b20:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b26:	609a      	str	r2, [r3, #8]
 8013b28:	e00b      	b.n	8013b42 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013b2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013b30:	d105      	bne.n	8013b3e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8013b32:	4b38      	ldr	r3, [pc, #224]	; (8013c14 <SetMaxTimeCredits+0x14c>)
 8013b34:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b3a:	609a      	str	r2, [r3, #8]
 8013b3c:	e001      	b.n	8013b42 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8013b3e:	4b36      	ldr	r3, [pc, #216]	; (8013c18 <SetMaxTimeCredits+0x150>)
 8013b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	689a      	ldr	r2, [r3, #8]
 8013b46:	f107 031c 	add.w	r3, r7, #28
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f005 fc57 	bl	8019400 <SysTimeFromMs>
 8013b52:	f107 0014 	add.w	r0, r7, #20
 8013b56:	6a3b      	ldr	r3, [r7, #32]
 8013b58:	9300      	str	r3, [sp, #0]
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	463a      	mov	r2, r7
 8013b5e:	ca06      	ldmia	r2, {r1, r2}
 8013b60:	f005 fb67 	bl	8019232 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013b64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013b68:	f083 0301 	eor.w	r3, r3, #1
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d006      	beq.n	8013b80 <SetMaxTimeCredits+0xb8>
 8013b72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8013b76:	f083 0301 	eor.w	r3, r3, #1
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d108      	bne.n	8013b92 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d103      	bne.n	8013b92 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8013b8a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8013b8c:	4a23      	ldr	r2, [pc, #140]	; (8013c1c <SetMaxTimeCredits+0x154>)
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	d92f      	bls.n	8013bf2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b96:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	4a21      	ldr	r2, [pc, #132]	; (8013c20 <SetMaxTimeCredits+0x158>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d928      	bls.n	8013bf2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013ba6:	3b30      	subs	r3, #48	; 0x30
 8013ba8:	4a1e      	ldr	r2, [pc, #120]	; (8013c24 <SetMaxTimeCredits+0x15c>)
 8013baa:	fba2 2303 	umull	r2, r3, r2, r3
 8013bae:	0c1b      	lsrs	r3, r3, #16
 8013bb0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	4a1c      	ldr	r2, [pc, #112]	; (8013c28 <SetMaxTimeCredits+0x160>)
 8013bb6:	fb02 f303 	mul.w	r3, r2, r3
 8013bba:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8013bc2:	3330      	adds	r3, #48	; 0x30
 8013bc4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8013bca:	f107 0314 	add.w	r3, r7, #20
 8013bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013bd2:	f005 fbed 	bl	80193b0 <SysTimeToMs>
 8013bd6:	4602      	mov	r2, r0
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	609a      	str	r2, [r3, #8]
 8013bdc:	e009      	b.n	8013bf2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8013bde:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013be2:	f083 0301 	eor.w	r3, r3, #1
 8013be6:	b2db      	uxtb	r3, r3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d002      	beq.n	8013bf2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bf0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d102      	bne.n	8013c00 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bfe:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c04:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8013c06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3730      	adds	r7, #48	; 0x30
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	001b7740 	.word	0x001b7740
 8013c14:	0112a880 	.word	0x0112a880
 8013c18:	02932e00 	.word	0x02932e00
 8013c1c:	0001517f 	.word	0x0001517f
 8013c20:	0001ec2f 	.word	0x0001ec2f
 8013c24:	c22e4507 	.word	0xc22e4507
 8013c28:	00015180 	.word	0x00015180

08013c2c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b086      	sub	sp, #24
 8013c30:	af02      	add	r7, sp, #8
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	4608      	mov	r0, r1
 8013c36:	4611      	mov	r1, r2
 8013c38:	461a      	mov	r2, r3
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	70fb      	strb	r3, [r7, #3]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	70bb      	strb	r3, [r7, #2]
 8013c42:	4613      	mov	r3, r2
 8013c44:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8013c46:	78f9      	ldrb	r1, [r7, #3]
 8013c48:	787b      	ldrb	r3, [r7, #1]
 8013c4a:	9301      	str	r3, [sp, #4]
 8013c4c:	78bb      	ldrb	r3, [r7, #2]
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	f107 0318 	add.w	r3, r7, #24
 8013c54:	cb0c      	ldmia	r3, {r2, r3}
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f7ff ff36 	bl	8013ac8 <SetMaxTimeCredits>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8013c60:	78fb      	ldrb	r3, [r7, #3]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d00a      	beq.n	8013c7c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f006 f9c8 	bl	801a000 <UTIL_TIMER_GetElapsedTime>
 8013c70:	4602      	mov	r2, r0
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	441a      	add	r2, r3
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	68da      	ldr	r2, [r3, #12]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	691b      	ldr	r3, [r3, #16]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d903      	bls.n	8013c90 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	691a      	ldr	r2, [r3, #16]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6a3a      	ldr	r2, [r7, #32]
 8013c94:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8013c96:	89fb      	ldrh	r3, [r7, #14]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8013ca0:	b480      	push	{r7}
 8013ca2:	b085      	sub	sp, #20
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	460a      	mov	r2, r1
 8013caa:	80fb      	strh	r3, [r7, #6]
 8013cac:	4613      	mov	r3, r2
 8013cae:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	73bb      	strb	r3, [r7, #14]
 8013cb8:	e011      	b.n	8013cde <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8013cba:	88fa      	ldrh	r2, [r7, #6]
 8013cbc:	7bbb      	ldrb	r3, [r7, #14]
 8013cbe:	2101      	movs	r1, #1
 8013cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8013cc4:	401a      	ands	r2, r3
 8013cc6:	7bbb      	ldrb	r3, [r7, #14]
 8013cc8:	2101      	movs	r1, #1
 8013cca:	fa01 f303 	lsl.w	r3, r1, r3
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d102      	bne.n	8013cd8 <CountChannels+0x38>
        {
            nbActiveBits++;
 8013cd2:	7bfb      	ldrb	r3, [r7, #15]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8013cd8:	7bbb      	ldrb	r3, [r7, #14]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	73bb      	strb	r3, [r7, #14]
 8013cde:	7bba      	ldrb	r2, [r7, #14]
 8013ce0:	797b      	ldrb	r3, [r7, #5]
 8013ce2:	429a      	cmp	r2, r3
 8013ce4:	d3e9      	bcc.n	8013cba <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8013ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3714      	adds	r7, #20
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bc80      	pop	{r7}
 8013cf0:	4770      	bx	lr

08013cf2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8013cf2:	b580      	push	{r7, lr}
 8013cf4:	b084      	sub	sp, #16
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6039      	str	r1, [r7, #0]
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	4603      	mov	r3, r0
 8013d00:	71fb      	strb	r3, [r7, #7]
 8013d02:	460b      	mov	r3, r1
 8013d04:	71bb      	strb	r3, [r7, #6]
 8013d06:	4613      	mov	r3, r2
 8013d08:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8013d0a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8013d0e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013d12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013d16:	4618      	mov	r0, r3
 8013d18:	f000 f85d 	bl	8013dd6 <RegionCommonValueInRange>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d101      	bne.n	8013d26 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8013d22:	2300      	movs	r3, #0
 8013d24:	e053      	b.n	8013dce <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013d26:	2300      	movs	r3, #0
 8013d28:	73fb      	strb	r3, [r7, #15]
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	73bb      	strb	r3, [r7, #14]
 8013d2e:	e049      	b.n	8013dc4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013d30:	2300      	movs	r3, #0
 8013d32:	737b      	strb	r3, [r7, #13]
 8013d34:	e03d      	b.n	8013db2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8013d36:	7bbb      	ldrb	r3, [r7, #14]
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	683a      	ldr	r2, [r7, #0]
 8013d3c:	4413      	add	r3, r2
 8013d3e:	881b      	ldrh	r3, [r3, #0]
 8013d40:	461a      	mov	r2, r3
 8013d42:	7b7b      	ldrb	r3, [r7, #13]
 8013d44:	fa42 f303 	asr.w	r3, r2, r3
 8013d48:	f003 0301 	and.w	r3, r3, #1
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d02d      	beq.n	8013dac <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013d50:	7bfa      	ldrb	r2, [r7, #15]
 8013d52:	7b7b      	ldrb	r3, [r7, #13]
 8013d54:	4413      	add	r3, r2
 8013d56:	461a      	mov	r2, r3
 8013d58:	4613      	mov	r3, r2
 8013d5a:	005b      	lsls	r3, r3, #1
 8013d5c:	4413      	add	r3, r2
 8013d5e:	009b      	lsls	r3, r3, #2
 8013d60:	461a      	mov	r2, r3
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	4413      	add	r3, r2
 8013d66:	7a1b      	ldrb	r3, [r3, #8]
 8013d68:	f343 0303 	sbfx	r3, r3, #0, #4
 8013d6c:	b25b      	sxtb	r3, r3
 8013d6e:	f003 030f 	and.w	r3, r3, #15
 8013d72:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8013d74:	7bfa      	ldrb	r2, [r7, #15]
 8013d76:	7b7b      	ldrb	r3, [r7, #13]
 8013d78:	4413      	add	r3, r2
 8013d7a:	461a      	mov	r2, r3
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	005b      	lsls	r3, r3, #1
 8013d80:	4413      	add	r3, r2
 8013d82:	009b      	lsls	r3, r3, #2
 8013d84:	461a      	mov	r2, r3
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	4413      	add	r3, r2
 8013d8a:	7a1b      	ldrb	r3, [r3, #8]
 8013d8c:	f343 1303 	sbfx	r3, r3, #4, #4
 8013d90:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8013d92:	f003 030f 	and.w	r3, r3, #15
 8013d96:	b25a      	sxtb	r2, r3
 8013d98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f000 f81a 	bl	8013dd6 <RegionCommonValueInRange>
 8013da2:	4603      	mov	r3, r0
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d101      	bne.n	8013dac <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8013da8:	2301      	movs	r3, #1
 8013daa:	e010      	b.n	8013dce <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8013dac:	7b7b      	ldrb	r3, [r7, #13]
 8013dae:	3301      	adds	r3, #1
 8013db0:	737b      	strb	r3, [r7, #13]
 8013db2:	7b7b      	ldrb	r3, [r7, #13]
 8013db4:	2b0f      	cmp	r3, #15
 8013db6:	d9be      	bls.n	8013d36 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013db8:	7bfb      	ldrb	r3, [r7, #15]
 8013dba:	3310      	adds	r3, #16
 8013dbc:	73fb      	strb	r3, [r7, #15]
 8013dbe:	7bbb      	ldrb	r3, [r7, #14]
 8013dc0:	3301      	adds	r3, #1
 8013dc2:	73bb      	strb	r3, [r7, #14]
 8013dc4:	7bfa      	ldrb	r2, [r7, #15]
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d3b1      	bcc.n	8013d30 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8013dcc:	2300      	movs	r3, #0
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8013dd6:	b480      	push	{r7}
 8013dd8:	b083      	sub	sp, #12
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	4603      	mov	r3, r0
 8013dde:	71fb      	strb	r3, [r7, #7]
 8013de0:	460b      	mov	r3, r1
 8013de2:	71bb      	strb	r3, [r7, #6]
 8013de4:	4613      	mov	r3, r2
 8013de6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8013de8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013dec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	db07      	blt.n	8013e04 <RegionCommonValueInRange+0x2e>
 8013df4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013df8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	dc01      	bgt.n	8013e04 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8013e00:	2301      	movs	r3, #1
 8013e02:	e000      	b.n	8013e06 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8013e04:	2300      	movs	r3, #0
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	370c      	adds	r7, #12
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bc80      	pop	{r7}
 8013e0e:	4770      	bx	lr

08013e10 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013e10:	b480      	push	{r7}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	460b      	mov	r3, r1
 8013e1a:	70fb      	strb	r3, [r7, #3]
 8013e1c:	4613      	mov	r3, r2
 8013e1e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8013e20:	78fb      	ldrb	r3, [r7, #3]
 8013e22:	091b      	lsrs	r3, r3, #4
 8013e24:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013e26:	78bb      	ldrb	r3, [r7, #2]
 8013e28:	091b      	lsrs	r3, r3, #4
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	7bfa      	ldrb	r2, [r7, #15]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d803      	bhi.n	8013e3a <RegionCommonChanDisable+0x2a>
 8013e32:	78fa      	ldrb	r2, [r7, #3]
 8013e34:	78bb      	ldrb	r3, [r7, #2]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d301      	bcc.n	8013e3e <RegionCommonChanDisable+0x2e>
    {
        return false;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	e017      	b.n	8013e6e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8013e3e:	7bfb      	ldrb	r3, [r7, #15]
 8013e40:	005b      	lsls	r3, r3, #1
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	4413      	add	r3, r2
 8013e46:	881b      	ldrh	r3, [r3, #0]
 8013e48:	b21a      	sxth	r2, r3
 8013e4a:	78fb      	ldrb	r3, [r7, #3]
 8013e4c:	f003 030f 	and.w	r3, r3, #15
 8013e50:	2101      	movs	r1, #1
 8013e52:	fa01 f303 	lsl.w	r3, r1, r3
 8013e56:	b21b      	sxth	r3, r3
 8013e58:	43db      	mvns	r3, r3
 8013e5a:	b21b      	sxth	r3, r3
 8013e5c:	4013      	ands	r3, r2
 8013e5e:	b219      	sxth	r1, r3
 8013e60:	7bfb      	ldrb	r3, [r7, #15]
 8013e62:	005b      	lsls	r3, r3, #1
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	4413      	add	r3, r2
 8013e68:	b28a      	uxth	r2, r1
 8013e6a:	801a      	strh	r2, [r3, #0]

    return true;
 8013e6c:	2301      	movs	r3, #1
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bc80      	pop	{r7}
 8013e76:	4770      	bx	lr

08013e78 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	460b      	mov	r3, r1
 8013e82:	70fb      	strb	r3, [r7, #3]
 8013e84:	4613      	mov	r3, r2
 8013e86:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8013e92:	2300      	movs	r3, #0
 8013e94:	e018      	b.n	8013ec8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013e96:	78fb      	ldrb	r3, [r7, #3]
 8013e98:	73bb      	strb	r3, [r7, #14]
 8013e9a:	e010      	b.n	8013ebe <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8013e9c:	7bbb      	ldrb	r3, [r7, #14]
 8013e9e:	005b      	lsls	r3, r3, #1
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	4413      	add	r3, r2
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	2110      	movs	r1, #16
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7ff fef9 	bl	8013ca0 <CountChannels>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	7bfb      	ldrb	r3, [r7, #15]
 8013eb4:	4413      	add	r3, r2
 8013eb6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013eb8:	7bbb      	ldrb	r3, [r7, #14]
 8013eba:	3301      	adds	r3, #1
 8013ebc:	73bb      	strb	r3, [r7, #14]
 8013ebe:	7bba      	ldrb	r2, [r7, #14]
 8013ec0:	78bb      	ldrb	r3, [r7, #2]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d3ea      	bcc.n	8013e9c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8013ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3710      	adds	r7, #16
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b087      	sub	sp, #28
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	4613      	mov	r3, r2
 8013edc:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d016      	beq.n	8013f12 <RegionCommonChanMaskCopy+0x42>
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d013      	beq.n	8013f12 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013eea:	2300      	movs	r3, #0
 8013eec:	75fb      	strb	r3, [r7, #23]
 8013eee:	e00c      	b.n	8013f0a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
 8013ef2:	005b      	lsls	r3, r3, #1
 8013ef4:	68ba      	ldr	r2, [r7, #8]
 8013ef6:	441a      	add	r2, r3
 8013ef8:	7dfb      	ldrb	r3, [r7, #23]
 8013efa:	005b      	lsls	r3, r3, #1
 8013efc:	68f9      	ldr	r1, [r7, #12]
 8013efe:	440b      	add	r3, r1
 8013f00:	8812      	ldrh	r2, [r2, #0]
 8013f02:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013f04:	7dfb      	ldrb	r3, [r7, #23]
 8013f06:	3301      	adds	r3, #1
 8013f08:	75fb      	strb	r3, [r7, #23]
 8013f0a:	7dfa      	ldrb	r2, [r7, #23]
 8013f0c:	79fb      	ldrb	r3, [r7, #7]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d3ee      	bcc.n	8013ef0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8013f12:	bf00      	nop
 8013f14:	371c      	adds	r7, #28
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bc80      	pop	{r7}
 8013f1a:	4770      	bx	lr

08013f1c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013f1c:	b082      	sub	sp, #8
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b086      	sub	sp, #24
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	60f8      	str	r0, [r7, #12]
 8013f26:	60b9      	str	r1, [r7, #8]
 8013f28:	627b      	str	r3, [r7, #36]	; 0x24
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013f2e:	79f9      	ldrb	r1, [r7, #7]
 8013f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013f34:	cb0c      	ldmia	r3, {r2, r3}
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f7ff fd8c 	bl	8013a54 <GetDutyCycle>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	68da      	ldr	r2, [r3, #12]
 8013f44:	8afb      	ldrh	r3, [r7, #22]
 8013f46:	68b9      	ldr	r1, [r7, #8]
 8013f48:	fb01 f303 	mul.w	r3, r1, r3
 8013f4c:	429a      	cmp	r2, r3
 8013f4e:	d909      	bls.n	8013f64 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	68da      	ldr	r2, [r3, #12]
 8013f54:	8afb      	ldrh	r3, [r7, #22]
 8013f56:	68b9      	ldr	r1, [r7, #8]
 8013f58:	fb01 f303 	mul.w	r3, r1, r3
 8013f5c:	1ad2      	subs	r2, r2, r3
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8013f62:	e002      	b.n	8013f6a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	60da      	str	r2, [r3, #12]
}
 8013f6a:	bf00      	nop
 8013f6c:	3718      	adds	r7, #24
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013f74:	b002      	add	sp, #8
 8013f76:	4770      	bx	lr

08013f78 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8013f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f7a:	b08f      	sub	sp, #60	; 0x3c
 8013f7c:	af04      	add	r7, sp, #16
 8013f7e:	6039      	str	r1, [r7, #0]
 8013f80:	4611      	mov	r1, r2
 8013f82:	461a      	mov	r2, r3
 8013f84:	4603      	mov	r3, r0
 8013f86:	71fb      	strb	r3, [r7, #7]
 8013f88:	460b      	mov	r3, r1
 8013f8a:	71bb      	strb	r3, [r7, #6]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8013f90:	f04f 33ff 	mov.w	r3, #4294967295
 8013f94:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8013f96:	f006 f821 	bl	8019fdc <UTIL_TIMER_GetCurrentTime>
 8013f9a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8013faa:	2300      	movs	r3, #0
 8013fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013fb0:	e0ba      	b.n	8014128 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8013fb2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	4413      	add	r3, r2
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	189c      	adds	r4, r3, r2
 8013fc4:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8013fc8:	797a      	ldrb	r2, [r7, #5]
 8013fca:	79fd      	ldrb	r5, [r7, #7]
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	9302      	str	r3, [sp, #8]
 8013fd0:	46ec      	mov	ip, sp
 8013fd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013fd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013fda:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013fde:	4633      	mov	r3, r6
 8013fe0:	4629      	mov	r1, r5
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	f7ff fe22 	bl	8013c2c <UpdateTimeCredits>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8013fec:	8afa      	ldrh	r2, [r7, #22]
 8013fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ff0:	fb02 f303 	mul.w	r3, r2, r3
 8013ff4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013ff6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4413      	add	r3, r2
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	461a      	mov	r2, r3
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	4413      	add	r3, r2
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	69ba      	ldr	r2, [r7, #24]
 801400c:	429a      	cmp	r2, r3
 801400e:	d308      	bcc.n	8014022 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014010:	797b      	ldrb	r3, [r7, #5]
 8014012:	f083 0301 	eor.w	r3, r3, #1
 8014016:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014018:	2b00      	cmp	r3, #0
 801401a:	d013      	beq.n	8014044 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801401c:	79fb      	ldrb	r3, [r7, #7]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d010      	beq.n	8014044 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014022:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014026:	4613      	mov	r3, r2
 8014028:	005b      	lsls	r3, r3, #1
 801402a:	4413      	add	r3, r2
 801402c:	00db      	lsls	r3, r3, #3
 801402e:	461a      	mov	r2, r3
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	4413      	add	r3, r2
 8014034:	2201      	movs	r2, #1
 8014036:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801403c:	3301      	adds	r3, #1
 801403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014042:	e06c      	b.n	801411e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014044:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014048:	4613      	mov	r3, r2
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	4413      	add	r3, r2
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	461a      	mov	r2, r3
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	4413      	add	r3, r2
 8014056:	2200      	movs	r2, #0
 8014058:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801405a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801405e:	4613      	mov	r3, r2
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	4413      	add	r3, r2
 8014064:	00db      	lsls	r3, r3, #3
 8014066:	461a      	mov	r2, r3
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	4413      	add	r3, r2
 801406c:	691b      	ldr	r3, [r3, #16]
 801406e:	69ba      	ldr	r2, [r7, #24]
 8014070:	429a      	cmp	r2, r3
 8014072:	d215      	bcs.n	80140a0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014074:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014078:	4613      	mov	r3, r2
 801407a:	005b      	lsls	r3, r3, #1
 801407c:	4413      	add	r3, r2
 801407e:	00db      	lsls	r3, r3, #3
 8014080:	461a      	mov	r2, r3
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	4413      	add	r3, r2
 8014086:	68db      	ldr	r3, [r3, #12]
 8014088:	69ba      	ldr	r2, [r7, #24]
 801408a:	1ad3      	subs	r3, r2, r3
 801408c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801408e:	4293      	cmp	r3, r2
 8014090:	bf28      	it	cs
 8014092:	4613      	movcs	r3, r2
 8014094:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801409a:	3301      	adds	r3, #1
 801409c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	f083 0301 	eor.w	r3, r3, #1
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d038      	beq.n	801411e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80140ac:	2300      	movs	r3, #0
 80140ae:	60fb      	str	r3, [r7, #12]
 80140b0:	2300      	movs	r3, #0
 80140b2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80140b4:	8afb      	ldrh	r3, [r7, #22]
 80140b6:	2b64      	cmp	r3, #100	; 0x64
 80140b8:	d103      	bne.n	80140c2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80140ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80140be:	60fb      	str	r3, [r7, #12]
 80140c0:	e009      	b.n	80140d6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80140c2:	8afb      	ldrh	r3, [r7, #22]
 80140c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80140c8:	d103      	bne.n	80140d2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80140ca:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80140ce:	60fb      	str	r3, [r7, #12]
 80140d0:	e001      	b.n	80140d6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80140d2:	4b1e      	ldr	r3, [pc, #120]	; (801414c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80140d4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80140d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140d8:	4a1c      	ldr	r2, [pc, #112]	; (801414c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80140da:	4293      	cmp	r3, r2
 80140dc:	d90e      	bls.n	80140fc <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140e2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80140e6:	3b30      	subs	r3, #48	; 0x30
 80140e8:	4919      	ldr	r1, [pc, #100]	; (8014150 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80140ea:	fba1 1303 	umull	r1, r3, r1, r3
 80140ee:	0c1b      	lsrs	r3, r3, #16
 80140f0:	3301      	adds	r3, #1
 80140f2:	4918      	ldr	r1, [pc, #96]	; (8014154 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80140f4:	fb01 f303 	mul.w	r3, r1, r3
 80140f8:	4413      	add	r3, r2
 80140fa:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80140fc:	f107 000c 	add.w	r0, r7, #12
 8014100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014106:	f107 020c 	add.w	r2, r7, #12
 801410a:	ca06      	ldmia	r2, {r1, r2}
 801410c:	f005 f891 	bl	8019232 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014110:	f107 030c 	add.w	r3, r7, #12
 8014114:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014118:	f005 f94a 	bl	80193b0 <SysTimeToMs>
 801411c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801411e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014122:	3301      	adds	r3, #1
 8014124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014128:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801412c:	79bb      	ldrb	r3, [r7, #6]
 801412e:	429a      	cmp	r2, r3
 8014130:	f4ff af3f 	bcc.w	8013fb2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014138:	2b00      	cmp	r3, #0
 801413a:	d102      	bne.n	8014142 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801413c:	f04f 33ff 	mov.w	r3, #4294967295
 8014140:	e000      	b.n	8014144 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014144:	4618      	mov	r0, r3
 8014146:	372c      	adds	r7, #44	; 0x2c
 8014148:	46bd      	mov	sp, r7
 801414a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801414c:	0001ec30 	.word	0x0001ec30
 8014150:	c22e4507 	.word	0xc22e4507
 8014154:	00015180 	.word	0x00015180

08014158 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014158:	b480      	push	{r7}
 801415a:	b085      	sub	sp, #20
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014162:	2300      	movs	r3, #0
 8014164:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	2b03      	cmp	r3, #3
 801416c:	d13f      	bne.n	80141ee <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	3301      	adds	r3, #1
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	b25a      	sxtb	r2, r3
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014180:	f003 030f 	and.w	r3, r3, #15
 8014184:	b25a      	sxtb	r2, r3
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014190:	b2db      	uxtb	r3, r3
 8014192:	091b      	lsrs	r3, r3, #4
 8014194:	b2db      	uxtb	r3, r3
 8014196:	b25a      	sxtb	r2, r3
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	3302      	adds	r3, #2
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	b29a      	uxth	r2, r3
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	889b      	ldrh	r3, [r3, #4]
 80141ac:	b21a      	sxth	r2, r3
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	3303      	adds	r3, #3
 80141b2:	781b      	ldrb	r3, [r3, #0]
 80141b4:	021b      	lsls	r3, r3, #8
 80141b6:	b21b      	sxth	r3, r3
 80141b8:	4313      	orrs	r3, r2
 80141ba:	b21b      	sxth	r3, r3
 80141bc:	b29a      	uxth	r2, r3
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	791a      	ldrb	r2, [r3, #4]
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	091b      	lsrs	r3, r3, #4
 80141d0:	b2db      	uxtb	r3, r3
 80141d2:	f003 0307 	and.w	r3, r3, #7
 80141d6:	b2da      	uxtb	r2, r3
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	f003 030f 	and.w	r3, r3, #15
 80141e4:	b2da      	uxtb	r2, r3
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80141ea:	2305      	movs	r3, #5
 80141ec:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80141ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3714      	adds	r7, #20
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bc80      	pop	{r7}
 80141f8:	4770      	bx	lr

080141fa <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80141fa:	b5b0      	push	{r4, r5, r7, lr}
 80141fc:	b088      	sub	sp, #32
 80141fe:	af02      	add	r7, sp, #8
 8014200:	60f8      	str	r0, [r7, #12]
 8014202:	60b9      	str	r1, [r7, #8]
 8014204:	607a      	str	r2, [r7, #4]
 8014206:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	791b      	ldrb	r3, [r3, #4]
 801420c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	799b      	ldrb	r3, [r3, #6]
 8014212:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	79db      	ldrb	r3, [r3, #7]
 8014218:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	7a1b      	ldrb	r3, [r3, #8]
 801421e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	795b      	ldrb	r3, [r3, #5]
 8014224:	f083 0301 	eor.w	r3, r3, #1
 8014228:	b2db      	uxtb	r3, r3
 801422a:	2b00      	cmp	r3, #0
 801422c:	d008      	beq.n	8014240 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	7adb      	ldrb	r3, [r3, #11]
 8014232:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	7a5b      	ldrb	r3, [r3, #9]
 8014238:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	7a9b      	ldrb	r3, [r3, #10]
 801423e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014240:	7dfb      	ldrb	r3, [r7, #23]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d03a      	beq.n	80142bc <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	7b18      	ldrb	r0, [r3, #12]
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	6919      	ldr	r1, [r3, #16]
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801425a:	68fa      	ldr	r2, [r7, #12]
 801425c:	6992      	ldr	r2, [r2, #24]
 801425e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014262:	9201      	str	r2, [sp, #4]
 8014264:	9300      	str	r3, [sp, #0]
 8014266:	462b      	mov	r3, r5
 8014268:	4622      	mov	r2, r4
 801426a:	f7ff fd42 	bl	8013cf2 <RegionCommonChanVerifyDr>
 801426e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014270:	f083 0301 	eor.w	r3, r3, #1
 8014274:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014276:	2b00      	cmp	r3, #0
 8014278:	d003      	beq.n	8014282 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 801427a:	7dfb      	ldrb	r3, [r7, #23]
 801427c:	f023 0302 	bic.w	r3, r3, #2
 8014280:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801428e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014292:	4618      	mov	r0, r3
 8014294:	f7ff fd9f 	bl	8013dd6 <RegionCommonValueInRange>
 8014298:	4603      	mov	r3, r0
 801429a:	2b00      	cmp	r3, #0
 801429c:	d10e      	bne.n	80142bc <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80142a4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	da03      	bge.n	80142b4 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	7f5b      	ldrb	r3, [r3, #29]
 80142b0:	757b      	strb	r3, [r7, #21]
 80142b2:	e003      	b.n	80142bc <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80142b4:	7dfb      	ldrb	r3, [r7, #23]
 80142b6:	f023 0304 	bic.w	r3, r3, #4
 80142ba:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80142bc:	7dfb      	ldrb	r3, [r7, #23]
 80142be:	2b07      	cmp	r3, #7
 80142c0:	d105      	bne.n	80142ce <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 80142c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d101      	bne.n	80142ce <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80142ca:	2301      	movs	r3, #1
 80142cc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	7dba      	ldrb	r2, [r7, #22]
 80142d2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	7d7a      	ldrb	r2, [r7, #21]
 80142d8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80142da:	7d3a      	ldrb	r2, [r7, #20]
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	701a      	strb	r2, [r3, #0]

    return status;
 80142e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80142e2:	4618      	mov	r0, r3
 80142e4:	3718      	adds	r7, #24
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080142ec <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	4603      	mov	r3, r0
 80142f4:	6039      	str	r1, [r7, #0]
 80142f6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80142f8:	79fb      	ldrb	r3, [r7, #7]
 80142fa:	4a06      	ldr	r2, [pc, #24]	; (8014314 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80142fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014300:	461a      	mov	r2, r3
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014308:	4618      	mov	r0, r3
 801430a:	370c      	adds	r7, #12
 801430c:	46bd      	mov	sp, r7
 801430e:	bc80      	pop	{r7}
 8014310:	4770      	bx	lr
 8014312:	bf00      	nop
 8014314:	000f4240 	.word	0x000f4240

08014318 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014322:	79fb      	ldrb	r3, [r7, #7]
 8014324:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014328:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801432c:	4618      	mov	r0, r3
 801432e:	370c      	adds	r7, #12
 8014330:	46bd      	mov	sp, r7
 8014332:	bc80      	pop	{r7}
 8014334:	4770      	bx	lr
	...

08014338 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014338:	b480      	push	{r7}
 801433a:	b085      	sub	sp, #20
 801433c:	af00      	add	r7, sp, #0
 801433e:	60f8      	str	r0, [r7, #12]
 8014340:	607a      	str	r2, [r7, #4]
 8014342:	603b      	str	r3, [r7, #0]
 8014344:	460b      	mov	r3, r1
 8014346:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014348:	7afa      	ldrb	r2, [r7, #11]
 801434a:	7afb      	ldrb	r3, [r7, #11]
 801434c:	3b04      	subs	r3, #4
 801434e:	4619      	mov	r1, r3
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	fb03 f101 	mul.w	r1, r3, r1
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801435c:	fb00 f303 	mul.w	r3, r0, r3
 8014360:	440b      	add	r3, r1
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	2b00      	cmp	r3, #0
 8014366:	d013      	beq.n	8014390 <RegionCommonComputeRxWindowParameters+0x58>
 8014368:	7afb      	ldrb	r3, [r7, #11]
 801436a:	3b04      	subs	r3, #4
 801436c:	4619      	mov	r1, r3
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	fb03 f101 	mul.w	r1, r3, r1
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801437a:	fb00 f303 	mul.w	r3, r0, r3
 801437e:	440b      	add	r3, r1
 8014380:	0059      	lsls	r1, r3, #1
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	440b      	add	r3, r1
 8014386:	1e59      	subs	r1, r3, #1
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	fbb1 f3f3 	udiv	r3, r1, r3
 801438e:	e00f      	b.n	80143b0 <RegionCommonComputeRxWindowParameters+0x78>
 8014390:	7afb      	ldrb	r3, [r7, #11]
 8014392:	3b04      	subs	r3, #4
 8014394:	4619      	mov	r1, r3
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	fb03 f101 	mul.w	r1, r3, r1
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80143a2:	fb00 f303 	mul.w	r3, r0, r3
 80143a6:	440b      	add	r3, r1
 80143a8:	0059      	lsls	r1, r3, #1
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80143b0:	429a      	cmp	r2, r3
 80143b2:	bf38      	it	cc
 80143b4:	461a      	movcc	r2, r3
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	4619      	mov	r1, r3
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	68fa      	ldr	r2, [r7, #12]
 80143c6:	fb02 f303 	mul.w	r3, r2, r3
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d007      	beq.n	80143de <RegionCommonComputeRxWindowParameters+0xa6>
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	fb02 f303 	mul.w	r3, r2, r3
 80143d8:	3301      	adds	r3, #1
 80143da:	085b      	lsrs	r3, r3, #1
 80143dc:	e005      	b.n	80143ea <RegionCommonComputeRxWindowParameters+0xb2>
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	68fa      	ldr	r2, [r7, #12]
 80143e4:	fb02 f303 	mul.w	r3, r2, r3
 80143e8:	085b      	lsrs	r3, r3, #1
 80143ea:	1acb      	subs	r3, r1, r3
 80143ec:	683a      	ldr	r2, [r7, #0]
 80143ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80143f2:	fb01 f202 	mul.w	r2, r1, r2
 80143f6:	1a9b      	subs	r3, r3, r2
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	dd27      	ble.n	801444c <RegionCommonComputeRxWindowParameters+0x114>
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4619      	mov	r1, r3
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	fb02 f303 	mul.w	r3, r2, r3
 801440c:	2b00      	cmp	r3, #0
 801440e:	d007      	beq.n	8014420 <RegionCommonComputeRxWindowParameters+0xe8>
 8014410:	69bb      	ldr	r3, [r7, #24]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	68fa      	ldr	r2, [r7, #12]
 8014416:	fb02 f303 	mul.w	r3, r2, r3
 801441a:	3301      	adds	r3, #1
 801441c:	085b      	lsrs	r3, r3, #1
 801441e:	e005      	b.n	801442c <RegionCommonComputeRxWindowParameters+0xf4>
 8014420:	69bb      	ldr	r3, [r7, #24]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	68fa      	ldr	r2, [r7, #12]
 8014426:	fb02 f303 	mul.w	r3, r2, r3
 801442a:	085b      	lsrs	r3, r3, #1
 801442c:	1acb      	subs	r3, r1, r3
 801442e:	683a      	ldr	r2, [r7, #0]
 8014430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014434:	fb01 f202 	mul.w	r2, r1, r2
 8014438:	1a9b      	subs	r3, r3, r2
 801443a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801443e:	4a19      	ldr	r2, [pc, #100]	; (80144a4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014440:	fb82 1203 	smull	r1, r2, r2, r3
 8014444:	1192      	asrs	r2, r2, #6
 8014446:	17db      	asrs	r3, r3, #31
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	e024      	b.n	8014496 <RegionCommonComputeRxWindowParameters+0x15e>
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	4619      	mov	r1, r3
 8014452:	69bb      	ldr	r3, [r7, #24]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	fb02 f303 	mul.w	r3, r2, r3
 801445c:	2b00      	cmp	r3, #0
 801445e:	d007      	beq.n	8014470 <RegionCommonComputeRxWindowParameters+0x138>
 8014460:	69bb      	ldr	r3, [r7, #24]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	68fa      	ldr	r2, [r7, #12]
 8014466:	fb02 f303 	mul.w	r3, r2, r3
 801446a:	3301      	adds	r3, #1
 801446c:	085b      	lsrs	r3, r3, #1
 801446e:	e005      	b.n	801447c <RegionCommonComputeRxWindowParameters+0x144>
 8014470:	69bb      	ldr	r3, [r7, #24]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	fb02 f303 	mul.w	r3, r2, r3
 801447a:	085b      	lsrs	r3, r3, #1
 801447c:	1acb      	subs	r3, r1, r3
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014484:	fb01 f202 	mul.w	r2, r1, r2
 8014488:	1a9b      	subs	r3, r3, r2
 801448a:	4a06      	ldr	r2, [pc, #24]	; (80144a4 <RegionCommonComputeRxWindowParameters+0x16c>)
 801448c:	fb82 1203 	smull	r1, r2, r2, r3
 8014490:	1192      	asrs	r2, r2, #6
 8014492:	17db      	asrs	r3, r3, #31
 8014494:	1ad3      	subs	r3, r2, r3
 8014496:	69fa      	ldr	r2, [r7, #28]
 8014498:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801449a:	bf00      	nop
 801449c:	3714      	adds	r7, #20
 801449e:	46bd      	mov	sp, r7
 80144a0:	bc80      	pop	{r7}
 80144a2:	4770      	bx	lr
 80144a4:	10624dd3 	.word	0x10624dd3

080144a8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b086      	sub	sp, #24
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	4603      	mov	r3, r0
 80144b0:	60b9      	str	r1, [r7, #8]
 80144b2:	607a      	str	r2, [r7, #4]
 80144b4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80144ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ec f983 	bl	80007cc <__aeabi_ui2f>
 80144c6:	4603      	mov	r3, r0
 80144c8:	4619      	mov	r1, r3
 80144ca:	68b8      	ldr	r0, [r7, #8]
 80144cc:	f7ec f8cc 	bl	8000668 <__aeabi_fsub>
 80144d0:	4603      	mov	r3, r0
 80144d2:	6879      	ldr	r1, [r7, #4]
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7ec f8c7 	bl	8000668 <__aeabi_fsub>
 80144da:	4603      	mov	r3, r0
 80144dc:	4618      	mov	r0, r3
 80144de:	f7eb ffb7 	bl	8000450 <__aeabi_f2d>
 80144e2:	4602      	mov	r2, r0
 80144e4:	460b      	mov	r3, r1
 80144e6:	4610      	mov	r0, r2
 80144e8:	4619      	mov	r1, r3
 80144ea:	f006 f90d 	bl	801a708 <floor>
 80144ee:	4602      	mov	r2, r0
 80144f0:	460b      	mov	r3, r1
 80144f2:	4610      	mov	r0, r2
 80144f4:	4619      	mov	r1, r3
 80144f6:	f7ec f88b 	bl	8000610 <__aeabi_d2iz>
 80144fa:	4603      	mov	r3, r0
 80144fc:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80144fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014502:	4618      	mov	r0, r3
 8014504:	3718      	adds	r7, #24
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}

0801450a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801450a:	b590      	push	{r4, r7, lr}
 801450c:	b087      	sub	sp, #28
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	60b9      	str	r1, [r7, #8]
 8014514:	607a      	str	r2, [r7, #4]
 8014516:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014518:	2300      	movs	r3, #0
 801451a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801451c:	2300      	movs	r3, #0
 801451e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014520:	2300      	movs	r3, #0
 8014522:	757b      	strb	r3, [r7, #21]
 8014524:	2300      	movs	r3, #0
 8014526:	753b      	strb	r3, [r7, #20]
 8014528:	e09c      	b.n	8014664 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801452a:	2300      	movs	r3, #0
 801452c:	74fb      	strb	r3, [r7, #19]
 801452e:	e08f      	b.n	8014650 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	685a      	ldr	r2, [r3, #4]
 8014534:	7d3b      	ldrb	r3, [r7, #20]
 8014536:	005b      	lsls	r3, r3, #1
 8014538:	4413      	add	r3, r2
 801453a:	881b      	ldrh	r3, [r3, #0]
 801453c:	461a      	mov	r2, r3
 801453e:	7cfb      	ldrb	r3, [r7, #19]
 8014540:	fa42 f303 	asr.w	r3, r2, r3
 8014544:	f003 0301 	and.w	r3, r3, #1
 8014548:	2b00      	cmp	r3, #0
 801454a:	d07e      	beq.n	801464a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	689a      	ldr	r2, [r3, #8]
 8014550:	7d79      	ldrb	r1, [r7, #21]
 8014552:	7cfb      	ldrb	r3, [r7, #19]
 8014554:	440b      	add	r3, r1
 8014556:	4619      	mov	r1, r3
 8014558:	460b      	mov	r3, r1
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	440b      	add	r3, r1
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	4413      	add	r3, r2
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d06b      	beq.n	8014640 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	f083 0301 	eor.w	r3, r3, #1
 8014570:	b2db      	uxtb	r3, r3
 8014572:	2b00      	cmp	r3, #0
 8014574:	d011      	beq.n	801459a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801457a:	2b00      	cmp	r3, #0
 801457c:	d00d      	beq.n	801459a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	695a      	ldr	r2, [r3, #20]
 8014582:	7d3b      	ldrb	r3, [r7, #20]
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	4413      	add	r3, r2
 8014588:	881b      	ldrh	r3, [r3, #0]
 801458a:	461a      	mov	r2, r3
 801458c:	7cfb      	ldrb	r3, [r7, #19]
 801458e:	fa42 f303 	asr.w	r3, r2, r3
 8014592:	f003 0301 	and.w	r3, r3, #1
 8014596:	2b00      	cmp	r3, #0
 8014598:	d054      	beq.n	8014644 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	785b      	ldrb	r3, [r3, #1]
 801459e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	689a      	ldr	r2, [r3, #8]
 80145a4:	7d79      	ldrb	r1, [r7, #21]
 80145a6:	7cfb      	ldrb	r3, [r7, #19]
 80145a8:	440b      	add	r3, r1
 80145aa:	4619      	mov	r1, r3
 80145ac:	460b      	mov	r3, r1
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	440b      	add	r3, r1
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4413      	add	r3, r2
 80145b6:	7a1b      	ldrb	r3, [r3, #8]
 80145b8:	f343 0303 	sbfx	r3, r3, #0, #4
 80145bc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80145be:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	689a      	ldr	r2, [r3, #8]
 80145c4:	7d79      	ldrb	r1, [r7, #21]
 80145c6:	7cfb      	ldrb	r3, [r7, #19]
 80145c8:	440b      	add	r3, r1
 80145ca:	4619      	mov	r1, r3
 80145cc:	460b      	mov	r3, r1
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	440b      	add	r3, r1
 80145d2:	009b      	lsls	r3, r3, #2
 80145d4:	4413      	add	r3, r2
 80145d6:	7a1b      	ldrb	r3, [r3, #8]
 80145d8:	f343 1303 	sbfx	r3, r3, #4, #4
 80145dc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80145de:	461a      	mov	r2, r3
 80145e0:	4621      	mov	r1, r4
 80145e2:	f7ff fbf8 	bl	8013dd6 <RegionCommonValueInRange>
 80145e6:	4603      	mov	r3, r0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d02d      	beq.n	8014648 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	68da      	ldr	r2, [r3, #12]
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	6899      	ldr	r1, [r3, #8]
 80145f4:	7d78      	ldrb	r0, [r7, #21]
 80145f6:	7cfb      	ldrb	r3, [r7, #19]
 80145f8:	4403      	add	r3, r0
 80145fa:	4618      	mov	r0, r3
 80145fc:	4603      	mov	r3, r0
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4403      	add	r3, r0
 8014602:	009b      	lsls	r3, r3, #2
 8014604:	440b      	add	r3, r1
 8014606:	7a5b      	ldrb	r3, [r3, #9]
 8014608:	4619      	mov	r1, r3
 801460a:	460b      	mov	r3, r1
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	440b      	add	r3, r1
 8014610:	00db      	lsls	r3, r3, #3
 8014612:	4413      	add	r3, r2
 8014614:	7d1b      	ldrb	r3, [r3, #20]
 8014616:	f083 0301 	eor.w	r3, r3, #1
 801461a:	b2db      	uxtb	r3, r3
 801461c:	2b00      	cmp	r3, #0
 801461e:	d003      	beq.n	8014628 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014620:	7dbb      	ldrb	r3, [r7, #22]
 8014622:	3301      	adds	r3, #1
 8014624:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014626:	e010      	b.n	801464a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014628:	7dfb      	ldrb	r3, [r7, #23]
 801462a:	1c5a      	adds	r2, r3, #1
 801462c:	75fa      	strb	r2, [r7, #23]
 801462e:	461a      	mov	r2, r3
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	4413      	add	r3, r2
 8014634:	7d79      	ldrb	r1, [r7, #21]
 8014636:	7cfa      	ldrb	r2, [r7, #19]
 8014638:	440a      	add	r2, r1
 801463a:	b2d2      	uxtb	r2, r2
 801463c:	701a      	strb	r2, [r3, #0]
 801463e:	e004      	b.n	801464a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014640:	bf00      	nop
 8014642:	e002      	b.n	801464a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014644:	bf00      	nop
 8014646:	e000      	b.n	801464a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014648:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801464a:	7cfb      	ldrb	r3, [r7, #19]
 801464c:	3301      	adds	r3, #1
 801464e:	74fb      	strb	r3, [r7, #19]
 8014650:	7cfb      	ldrb	r3, [r7, #19]
 8014652:	2b0f      	cmp	r3, #15
 8014654:	f67f af6c 	bls.w	8014530 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014658:	7d7b      	ldrb	r3, [r7, #21]
 801465a:	3310      	adds	r3, #16
 801465c:	757b      	strb	r3, [r7, #21]
 801465e:	7d3b      	ldrb	r3, [r7, #20]
 8014660:	3301      	adds	r3, #1
 8014662:	753b      	strb	r3, [r7, #20]
 8014664:	7d7b      	ldrb	r3, [r7, #21]
 8014666:	b29a      	uxth	r2, r3
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	8a1b      	ldrh	r3, [r3, #16]
 801466c:	429a      	cmp	r2, r3
 801466e:	f4ff af5c 	bcc.w	801452a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	7dfa      	ldrb	r2, [r7, #23]
 8014676:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	7dba      	ldrb	r2, [r7, #22]
 801467c:	701a      	strb	r2, [r3, #0]
}
 801467e:	bf00      	nop
 8014680:	371c      	adds	r7, #28
 8014682:	46bd      	mov	sp, r7
 8014684:	bd90      	pop	{r4, r7, pc}

08014686 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014688:	b08b      	sub	sp, #44	; 0x2c
 801468a:	af04      	add	r7, sp, #16
 801468c:	60f8      	str	r0, [r7, #12]
 801468e:	60b9      	str	r1, [r7, #8]
 8014690:	607a      	str	r2, [r7, #4]
 8014692:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	4618      	mov	r0, r3
 801469a:	f005 fcb1 	bl	801a000 <UTIL_TIMER_GetElapsedTime>
 801469e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	697b      	ldr	r3, [r7, #20]
 80146a6:	1ad2      	subs	r2, r2, r3
 80146a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146aa:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80146ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ae:	2201      	movs	r2, #1
 80146b0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	2200      	movs	r2, #0
 80146b6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d004      	beq.n	80146ca <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80146c4:	697a      	ldr	r2, [r7, #20]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d32b      	bcc.n	8014722 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	2200      	movs	r2, #0
 80146ce:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	69db      	ldr	r3, [r3, #28]
 80146d4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80146da:	68dd      	ldr	r5, [r3, #12]
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	7a5e      	ldrb	r6, [r3, #9]
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f893 c008 	ldrb.w	ip, [r3, #8]
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	7d1b      	ldrb	r3, [r3, #20]
 80146ea:	68fa      	ldr	r2, [r7, #12]
 80146ec:	6992      	ldr	r2, [r2, #24]
 80146ee:	9203      	str	r2, [sp, #12]
 80146f0:	68fa      	ldr	r2, [r7, #12]
 80146f2:	f10d 0e04 	add.w	lr, sp, #4
 80146f6:	320c      	adds	r2, #12
 80146f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146fc:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014700:	9300      	str	r3, [sp, #0]
 8014702:	4663      	mov	r3, ip
 8014704:	4632      	mov	r2, r6
 8014706:	4629      	mov	r1, r5
 8014708:	4620      	mov	r0, r4
 801470a:	f7ff fc35 	bl	8013f78 <RegionCommonUpdateBandTimeOff>
 801470e:	4602      	mov	r2, r0
 8014710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014712:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	69d8      	ldr	r0, [r3, #28]
 8014718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471a:	683a      	ldr	r2, [r7, #0]
 801471c:	6879      	ldr	r1, [r7, #4]
 801471e:	f7ff fef4 	bl	801450a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d004      	beq.n	8014734 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801472a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801472c:	2200      	movs	r2, #0
 801472e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	e006      	b.n	8014742 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d001      	beq.n	8014740 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801473c:	230b      	movs	r3, #11
 801473e:	e000      	b.n	8014742 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014740:	230c      	movs	r3, #12
    }
}
 8014742:	4618      	mov	r0, r3
 8014744:	371c      	adds	r7, #28
 8014746:	46bd      	mov	sp, r7
 8014748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801474a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801474a:	b5b0      	push	{r4, r5, r7, lr}
 801474c:	b086      	sub	sp, #24
 801474e:	af02      	add	r7, sp, #8
 8014750:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	781b      	ldrb	r3, [r3, #0]
 8014756:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f993 2000 	ldrsb.w	r2, [r3]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014764:	429a      	cmp	r2, r3
 8014766:	d103      	bne.n	8014770 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801476e:	e026      	b.n	80147be <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014770:	7bfb      	ldrb	r3, [r7, #15]
 8014772:	3b01      	subs	r3, #1
 8014774:	b2db      	uxtb	r3, r3
 8014776:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801477e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014782:	429a      	cmp	r2, r3
 8014784:	d019      	beq.n	80147ba <RegionCommonGetNextLowerTxDr+0x70>
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	78d8      	ldrb	r0, [r3, #3]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6859      	ldr	r1, [r3, #4]
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	6892      	ldr	r2, [r2, #8]
 801479e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80147a2:	9201      	str	r2, [sp, #4]
 80147a4:	9300      	str	r3, [sp, #0]
 80147a6:	462b      	mov	r3, r5
 80147a8:	4622      	mov	r2, r4
 80147aa:	f7ff faa2 	bl	8013cf2 <RegionCommonChanVerifyDr>
 80147ae:	4603      	mov	r3, r0
 80147b0:	f083 0301 	eor.w	r3, r3, #1
 80147b4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1da      	bne.n	8014770 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80147ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3710      	adds	r7, #16
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bdb0      	pop	{r4, r5, r7, pc}

080147c6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80147c6:	b480      	push	{r7}
 80147c8:	b083      	sub	sp, #12
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	4603      	mov	r3, r0
 80147ce:	460a      	mov	r2, r1
 80147d0:	71fb      	strb	r3, [r7, #7]
 80147d2:	4613      	mov	r3, r2
 80147d4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80147d6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80147da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147de:	4293      	cmp	r3, r2
 80147e0:	bfb8      	it	lt
 80147e2:	4613      	movlt	r3, r2
 80147e4:	b25b      	sxtb	r3, r3
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	370c      	adds	r7, #12
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bc80      	pop	{r7}
 80147ee:	4770      	bx	lr

080147f0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	009b      	lsls	r3, r3, #2
 80147fe:	683a      	ldr	r2, [r7, #0]
 8014800:	4413      	add	r3, r2
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a07      	ldr	r2, [pc, #28]	; (8014824 <RegionCommonGetBandwidth+0x34>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d004      	beq.n	8014814 <RegionCommonGetBandwidth+0x24>
 801480a:	4a07      	ldr	r2, [pc, #28]	; (8014828 <RegionCommonGetBandwidth+0x38>)
 801480c:	4293      	cmp	r3, r2
 801480e:	d003      	beq.n	8014818 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014810:	2300      	movs	r3, #0
 8014812:	e002      	b.n	801481a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014814:	2301      	movs	r3, #1
 8014816:	e000      	b.n	801481a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014818:	2302      	movs	r3, #2
    }
}
 801481a:	4618      	mov	r0, r3
 801481c:	370c      	adds	r7, #12
 801481e:	46bd      	mov	sp, r7
 8014820:	bc80      	pop	{r7}
 8014822:	4770      	bx	lr
 8014824:	0003d090 	.word	0x0003d090
 8014828:	0007a120 	.word	0x0007a120

0801482c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801482c:	b5b0      	push	{r4, r5, r7, lr}
 801482e:	b08c      	sub	sp, #48	; 0x30
 8014830:	af04      	add	r7, sp, #16
 8014832:	4603      	mov	r3, r0
 8014834:	6039      	str	r1, [r7, #0]
 8014836:	71fb      	strb	r3, [r7, #7]
 8014838:	4613      	mov	r3, r2
 801483a:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801483c:	4b17      	ldr	r3, [pc, #92]	; (801489c <RegionCommonRxConfigPrint+0x70>)
 801483e:	f107 0408 	add.w	r4, r7, #8
 8014842:	461d      	mov	r5, r3
 8014844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014848:	e895 0003 	ldmia.w	r5, {r0, r1}
 801484c:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014850:	79fb      	ldrb	r3, [r7, #7]
 8014852:	2b05      	cmp	r3, #5
 8014854:	d813      	bhi.n	801487e <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014856:	79fb      	ldrb	r3, [r7, #7]
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	f107 0220 	add.w	r2, r7, #32
 801485e:	4413      	add	r3, r2
 8014860:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014864:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014868:	9202      	str	r2, [sp, #8]
 801486a:	683a      	ldr	r2, [r7, #0]
 801486c:	9201      	str	r2, [sp, #4]
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	4b0b      	ldr	r3, [pc, #44]	; (80148a0 <RegionCommonRxConfigPrint+0x74>)
 8014872:	2201      	movs	r2, #1
 8014874:	2100      	movs	r1, #0
 8014876:	2002      	movs	r0, #2
 8014878:	f005 fca0 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801487c:	e00a      	b.n	8014894 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801487e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014882:	9301      	str	r3, [sp, #4]
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	4b06      	ldr	r3, [pc, #24]	; (80148a4 <RegionCommonRxConfigPrint+0x78>)
 801488a:	2201      	movs	r2, #1
 801488c:	2100      	movs	r1, #0
 801488e:	2002      	movs	r0, #2
 8014890:	f005 fc94 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 8014894:	bf00      	nop
 8014896:	3720      	adds	r7, #32
 8014898:	46bd      	mov	sp, r7
 801489a:	bdb0      	pop	{r4, r5, r7, pc}
 801489c:	0801af50 	.word	0x0801af50
 80148a0:	0801af14 	.word	0x0801af14
 80148a4:	0801af34 	.word	0x0801af34

080148a8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af02      	add	r7, sp, #8
 80148ae:	6078      	str	r0, [r7, #4]
 80148b0:	460b      	mov	r3, r1
 80148b2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80148b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80148b8:	9301      	str	r3, [sp, #4]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4b05      	ldr	r3, [pc, #20]	; (80148d4 <RegionCommonTxConfigPrint+0x2c>)
 80148c0:	2201      	movs	r2, #1
 80148c2:	2100      	movs	r1, #0
 80148c4:	2002      	movs	r0, #2
 80148c6:	f005 fc79 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
}
 80148ca:	bf00      	nop
 80148cc:	3708      	adds	r7, #8
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	0801af68 	.word	0x0801af68

080148d8 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80148e2:	4b2d      	ldr	r3, [pc, #180]	; (8014998 <VerifyRfFreq+0xc0>)
 80148e4:	6a1b      	ldr	r3, [r3, #32]
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	4798      	blx	r3
 80148ea:	4603      	mov	r3, r0
 80148ec:	f083 0301 	eor.w	r3, r3, #1
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d001      	beq.n	80148fa <VerifyRfFreq+0x22>
    {
        return false;
 80148f6:	2300      	movs	r3, #0
 80148f8:	e04a      	b.n	8014990 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4a27      	ldr	r2, [pc, #156]	; (801499c <VerifyRfFreq+0xc4>)
 80148fe:	4293      	cmp	r3, r2
 8014900:	d307      	bcc.n	8014912 <VerifyRfFreq+0x3a>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	4a26      	ldr	r2, [pc, #152]	; (80149a0 <VerifyRfFreq+0xc8>)
 8014906:	4293      	cmp	r3, r2
 8014908:	d803      	bhi.n	8014912 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	2202      	movs	r2, #2
 801490e:	701a      	strb	r2, [r3, #0]
 8014910:	e03d      	b.n	801498e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4a22      	ldr	r2, [pc, #136]	; (80149a0 <VerifyRfFreq+0xc8>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d907      	bls.n	801492a <VerifyRfFreq+0x52>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4a21      	ldr	r2, [pc, #132]	; (80149a4 <VerifyRfFreq+0xcc>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d803      	bhi.n	801492a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	2200      	movs	r2, #0
 8014926:	701a      	strb	r2, [r3, #0]
 8014928:	e031      	b.n	801498e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4a1d      	ldr	r2, [pc, #116]	; (80149a4 <VerifyRfFreq+0xcc>)
 801492e:	4293      	cmp	r3, r2
 8014930:	d907      	bls.n	8014942 <VerifyRfFreq+0x6a>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4a1c      	ldr	r2, [pc, #112]	; (80149a8 <VerifyRfFreq+0xd0>)
 8014936:	4293      	cmp	r3, r2
 8014938:	d803      	bhi.n	8014942 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	2201      	movs	r2, #1
 801493e:	701a      	strb	r2, [r3, #0]
 8014940:	e025      	b.n	801498e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4a19      	ldr	r2, [pc, #100]	; (80149ac <VerifyRfFreq+0xd4>)
 8014946:	4293      	cmp	r3, r2
 8014948:	d907      	bls.n	801495a <VerifyRfFreq+0x82>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	4a18      	ldr	r2, [pc, #96]	; (80149b0 <VerifyRfFreq+0xd8>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d803      	bhi.n	801495a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	2205      	movs	r2, #5
 8014956:	701a      	strb	r2, [r3, #0]
 8014958:	e019      	b.n	801498e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	4a15      	ldr	r2, [pc, #84]	; (80149b4 <VerifyRfFreq+0xdc>)
 801495e:	4293      	cmp	r3, r2
 8014960:	d907      	bls.n	8014972 <VerifyRfFreq+0x9a>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	4a14      	ldr	r2, [pc, #80]	; (80149b8 <VerifyRfFreq+0xe0>)
 8014966:	4293      	cmp	r3, r2
 8014968:	d803      	bhi.n	8014972 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	2203      	movs	r2, #3
 801496e:	701a      	strb	r2, [r3, #0]
 8014970:	e00d      	b.n	801498e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	4a11      	ldr	r2, [pc, #68]	; (80149bc <VerifyRfFreq+0xe4>)
 8014976:	4293      	cmp	r3, r2
 8014978:	d307      	bcc.n	801498a <VerifyRfFreq+0xb2>
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	4a10      	ldr	r2, [pc, #64]	; (80149c0 <VerifyRfFreq+0xe8>)
 801497e:	4293      	cmp	r3, r2
 8014980:	d803      	bhi.n	801498a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	2204      	movs	r2, #4
 8014986:	701a      	strb	r2, [r3, #0]
 8014988:	e001      	b.n	801498e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801498a:	2300      	movs	r3, #0
 801498c:	e000      	b.n	8014990 <VerifyRfFreq+0xb8>
    }
    return true;
 801498e:	2301      	movs	r3, #1
}
 8014990:	4618      	mov	r0, r3
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	0801b528 	.word	0x0801b528
 801499c:	337055c0 	.word	0x337055c0
 80149a0:	338eda3f 	.word	0x338eda3f
 80149a4:	33bca100 	.word	0x33bca100
 80149a8:	33c5c8c0 	.word	0x33c5c8c0
 80149ac:	33c74f5f 	.word	0x33c74f5f
 80149b0:	33cef080 	.word	0x33cef080
 80149b4:	33d1fdbf 	.word	0x33d1fdbf
 80149b8:	33d5ce50 	.word	0x33d5ce50
 80149bc:	33d691a0 	.word	0x33d691a0
 80149c0:	33db2580 	.word	0x33db2580

080149c4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80149c4:	b590      	push	{r4, r7, lr}
 80149c6:	b08b      	sub	sp, #44	; 0x2c
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	4603      	mov	r3, r0
 80149cc:	460a      	mov	r2, r1
 80149ce:	71fb      	strb	r3, [r7, #7]
 80149d0:	4613      	mov	r3, r2
 80149d2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80149d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149d8:	4a1f      	ldr	r2, [pc, #124]	; (8014a58 <GetTimeOnAir+0x94>)
 80149da:	5cd3      	ldrb	r3, [r2, r3]
 80149dc:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80149de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149e2:	491e      	ldr	r1, [pc, #120]	; (8014a5c <GetTimeOnAir+0x98>)
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7ff ff03 	bl	80147f0 <RegionCommonGetBandwidth>
 80149ea:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80149ec:	2300      	movs	r3, #0
 80149ee:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80149f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149f4:	2b07      	cmp	r3, #7
 80149f6:	d118      	bne.n	8014a2a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80149f8:	4b19      	ldr	r3, [pc, #100]	; (8014a60 <GetTimeOnAir+0x9c>)
 80149fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80149fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a04:	fb02 f303 	mul.w	r3, r2, r3
 8014a08:	4619      	mov	r1, r3
 8014a0a:	88bb      	ldrh	r3, [r7, #4]
 8014a0c:	b2db      	uxtb	r3, r3
 8014a0e:	2201      	movs	r2, #1
 8014a10:	9203      	str	r2, [sp, #12]
 8014a12:	9302      	str	r3, [sp, #8]
 8014a14:	2300      	movs	r3, #0
 8014a16:	9301      	str	r3, [sp, #4]
 8014a18:	2305      	movs	r3, #5
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	460a      	mov	r2, r1
 8014a20:	68f9      	ldr	r1, [r7, #12]
 8014a22:	2000      	movs	r0, #0
 8014a24:	47a0      	blx	r4
 8014a26:	6178      	str	r0, [r7, #20]
 8014a28:	e011      	b.n	8014a4e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014a2a:	4b0d      	ldr	r3, [pc, #52]	; (8014a60 <GetTimeOnAir+0x9c>)
 8014a2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014a2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014a32:	88bb      	ldrh	r3, [r7, #4]
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	2101      	movs	r1, #1
 8014a38:	9103      	str	r1, [sp, #12]
 8014a3a:	9302      	str	r3, [sp, #8]
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	9301      	str	r3, [sp, #4]
 8014a40:	2308      	movs	r3, #8
 8014a42:	9300      	str	r3, [sp, #0]
 8014a44:	2301      	movs	r3, #1
 8014a46:	68f9      	ldr	r1, [r7, #12]
 8014a48:	2001      	movs	r0, #1
 8014a4a:	47a0      	blx	r4
 8014a4c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014a4e:	697b      	ldr	r3, [r7, #20]
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	371c      	adds	r7, #28
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd90      	pop	{r4, r7, pc}
 8014a58:	0801b4f0 	.word	0x0801b4f0
 8014a5c:	0801b4f8 	.word	0x0801b4f8
 8014a60:	0801b528 	.word	0x0801b528

08014a64 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b088      	sub	sp, #32
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	3b01      	subs	r3, #1
 8014a76:	2b38      	cmp	r3, #56	; 0x38
 8014a78:	f200 8125 	bhi.w	8014cc6 <RegionEU868GetPhyParam+0x262>
 8014a7c:	a201      	add	r2, pc, #4	; (adr r2, 8014a84 <RegionEU868GetPhyParam+0x20>)
 8014a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a82:	bf00      	nop
 8014a84:	08014b69 	.word	0x08014b69
 8014a88:	08014b6f 	.word	0x08014b6f
 8014a8c:	08014cc7 	.word	0x08014cc7
 8014a90:	08014cc7 	.word	0x08014cc7
 8014a94:	08014cc7 	.word	0x08014cc7
 8014a98:	08014b75 	.word	0x08014b75
 8014a9c:	08014cc7 	.word	0x08014cc7
 8014aa0:	08014bad 	.word	0x08014bad
 8014aa4:	08014cc7 	.word	0x08014cc7
 8014aa8:	08014bb3 	.word	0x08014bb3
 8014aac:	08014bb9 	.word	0x08014bb9
 8014ab0:	08014bbf 	.word	0x08014bbf
 8014ab4:	08014bc5 	.word	0x08014bc5
 8014ab8:	08014bd5 	.word	0x08014bd5
 8014abc:	08014be5 	.word	0x08014be5
 8014ac0:	08014beb 	.word	0x08014beb
 8014ac4:	08014bf3 	.word	0x08014bf3
 8014ac8:	08014bfb 	.word	0x08014bfb
 8014acc:	08014c03 	.word	0x08014c03
 8014ad0:	08014c0b 	.word	0x08014c0b
 8014ad4:	08014c13 	.word	0x08014c13
 8014ad8:	08014c1b 	.word	0x08014c1b
 8014adc:	08014c2f 	.word	0x08014c2f
 8014ae0:	08014c35 	.word	0x08014c35
 8014ae4:	08014c3b 	.word	0x08014c3b
 8014ae8:	08014c41 	.word	0x08014c41
 8014aec:	08014c4b 	.word	0x08014c4b
 8014af0:	08014c55 	.word	0x08014c55
 8014af4:	08014c5b 	.word	0x08014c5b
 8014af8:	08014c63 	.word	0x08014c63
 8014afc:	08014c69 	.word	0x08014c69
 8014b00:	08014c6f 	.word	0x08014c6f
 8014b04:	08014c77 	.word	0x08014c77
 8014b08:	08014b7b 	.word	0x08014b7b
 8014b0c:	08014cc7 	.word	0x08014cc7
 8014b10:	08014cc7 	.word	0x08014cc7
 8014b14:	08014cc7 	.word	0x08014cc7
 8014b18:	08014cc7 	.word	0x08014cc7
 8014b1c:	08014cc7 	.word	0x08014cc7
 8014b20:	08014cc7 	.word	0x08014cc7
 8014b24:	08014cc7 	.word	0x08014cc7
 8014b28:	08014cc7 	.word	0x08014cc7
 8014b2c:	08014cc7 	.word	0x08014cc7
 8014b30:	08014cc7 	.word	0x08014cc7
 8014b34:	08014cc7 	.word	0x08014cc7
 8014b38:	08014cc7 	.word	0x08014cc7
 8014b3c:	08014cc7 	.word	0x08014cc7
 8014b40:	08014c7d 	.word	0x08014c7d
 8014b44:	08014c83 	.word	0x08014c83
 8014b48:	08014c91 	.word	0x08014c91
 8014b4c:	08014cc7 	.word	0x08014cc7
 8014b50:	08014cc7 	.word	0x08014cc7
 8014b54:	08014c97 	.word	0x08014c97
 8014b58:	08014c9d 	.word	0x08014c9d
 8014b5c:	08014cc7 	.word	0x08014cc7
 8014b60:	08014ca3 	.word	0x08014ca3
 8014b64:	08014cb3 	.word	0x08014cb3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	61bb      	str	r3, [r7, #24]
            break;
 8014b6c:	e0ac      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	61bb      	str	r3, [r7, #24]
            break;
 8014b72:	e0a9      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8014b74:	2300      	movs	r3, #0
 8014b76:	61bb      	str	r3, [r7, #24]
            break;
 8014b78:	e0a6      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014b80:	733b      	strb	r3, [r7, #12]
 8014b82:	2307      	movs	r3, #7
 8014b84:	737b      	strb	r3, [r7, #13]
 8014b86:	2300      	movs	r3, #0
 8014b88:	73bb      	strb	r3, [r7, #14]
 8014b8a:	2310      	movs	r3, #16
 8014b8c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8014b8e:	4b52      	ldr	r3, [pc, #328]	; (8014cd8 <RegionEU868GetPhyParam+0x274>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014b94:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014b96:	4b50      	ldr	r3, [pc, #320]	; (8014cd8 <RegionEU868GetPhyParam+0x274>)
 8014b98:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014b9a:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014b9c:	f107 030c 	add.w	r3, r7, #12
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7ff fdd2 	bl	801474a <RegionCommonGetNextLowerTxDr>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	61bb      	str	r3, [r7, #24]
            break;
 8014baa:	e08d      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8014bac:	2300      	movs	r3, #0
 8014bae:	61bb      	str	r3, [r7, #24]
            break;
 8014bb0:	e08a      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	61bb      	str	r3, [r7, #24]
            break;
 8014bb6:	e087      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014bb8:	2340      	movs	r3, #64	; 0x40
 8014bba:	61bb      	str	r3, [r7, #24]
            break;
 8014bbc:	e084      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014bbe:	2320      	movs	r3, #32
 8014bc0:	61bb      	str	r3, [r7, #24]
            break;
 8014bc2:	e081      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014bca:	461a      	mov	r2, r3
 8014bcc:	4b43      	ldr	r3, [pc, #268]	; (8014cdc <RegionEU868GetPhyParam+0x278>)
 8014bce:	5c9b      	ldrb	r3, [r3, r2]
 8014bd0:	61bb      	str	r3, [r7, #24]
            break;
 8014bd2:	e079      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014bda:	461a      	mov	r2, r3
 8014bdc:	4b40      	ldr	r3, [pc, #256]	; (8014ce0 <RegionEU868GetPhyParam+0x27c>)
 8014bde:	5c9b      	ldrb	r3, [r3, r2]
 8014be0:	61bb      	str	r3, [r7, #24]
            break;
 8014be2:	e071      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8014be4:	2301      	movs	r3, #1
 8014be6:	61bb      	str	r3, [r7, #24]
            break;
 8014be8:	e06e      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8014bea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8014bee:	61bb      	str	r3, [r7, #24]
            break;
 8014bf0:	e06a      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014bf6:	61bb      	str	r3, [r7, #24]
            break;
 8014bf8:	e066      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014bfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8014bfe:	61bb      	str	r3, [r7, #24]
            break;
 8014c00:	e062      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8014c06:	61bb      	str	r3, [r7, #24]
            break;
 8014c08:	e05e      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014c0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8014c0e:	61bb      	str	r3, [r7, #24]
            break;
 8014c10:	e05a      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8014c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014c16:	61bb      	str	r3, [r7, #24]
            break;
 8014c18:	e056      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8014c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014c1e:	4831      	ldr	r0, [pc, #196]	; (8014ce4 <RegionEU868GetPhyParam+0x280>)
 8014c20:	f001 f874 	bl	8015d0c <randr>
 8014c24:	4603      	mov	r3, r0
 8014c26:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8014c2a:	61bb      	str	r3, [r7, #24]
            break;
 8014c2c:	e04c      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014c2e:	2300      	movs	r3, #0
 8014c30:	61bb      	str	r3, [r7, #24]
            break;
 8014c32:	e049      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8014c34:	4b2c      	ldr	r3, [pc, #176]	; (8014ce8 <RegionEU868GetPhyParam+0x284>)
 8014c36:	61bb      	str	r3, [r7, #24]
            break;
 8014c38:	e046      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8014c3a:	2300      	movs	r3, #0
 8014c3c:	61bb      	str	r3, [r7, #24]
            break;
 8014c3e:	e043      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014c40:	4b25      	ldr	r3, [pc, #148]	; (8014cd8 <RegionEU868GetPhyParam+0x274>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	33c0      	adds	r3, #192	; 0xc0
 8014c46:	61bb      	str	r3, [r7, #24]
            break;
 8014c48:	e03e      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8014c4a:	4b23      	ldr	r3, [pc, #140]	; (8014cd8 <RegionEU868GetPhyParam+0x274>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	33c2      	adds	r3, #194	; 0xc2
 8014c50:	61bb      	str	r3, [r7, #24]
            break;
 8014c52:	e039      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8014c54:	2310      	movs	r3, #16
 8014c56:	61bb      	str	r3, [r7, #24]
            break;
 8014c58:	e036      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014c5a:	4b1f      	ldr	r3, [pc, #124]	; (8014cd8 <RegionEU868GetPhyParam+0x274>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	61bb      	str	r3, [r7, #24]
            break;
 8014c60:	e032      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8014c62:	2300      	movs	r3, #0
 8014c64:	61bb      	str	r3, [r7, #24]
            break;
 8014c66:	e02f      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	61bb      	str	r3, [r7, #24]
            break;
 8014c6c:	e02c      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8014c6e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8014c72:	61bb      	str	r3, [r7, #24]
            break;
 8014c74:	e028      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8014c76:	4b1d      	ldr	r3, [pc, #116]	; (8014cec <RegionEU868GetPhyParam+0x288>)
 8014c78:	61bb      	str	r3, [r7, #24]
            break;
 8014c7a:	e025      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8014c7c:	4b1a      	ldr	r3, [pc, #104]	; (8014ce8 <RegionEU868GetPhyParam+0x284>)
 8014c7e:	61bb      	str	r3, [r7, #24]
            break;
 8014c80:	e022      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8014c82:	2311      	movs	r3, #17
 8014c84:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8014c86:	2302      	movs	r3, #2
 8014c88:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	76bb      	strb	r3, [r7, #26]
            break;
 8014c8e:	e01b      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8014c90:	2303      	movs	r3, #3
 8014c92:	61bb      	str	r3, [r7, #24]
            break;
 8014c94:	e018      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8014c96:	4b14      	ldr	r3, [pc, #80]	; (8014ce8 <RegionEU868GetPhyParam+0x284>)
 8014c98:	61bb      	str	r3, [r7, #24]
            break;
 8014c9a:	e015      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8014c9c:	2303      	movs	r3, #3
 8014c9e:	61bb      	str	r3, [r7, #24]
            break;
 8014ca0:	e012      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ca8:	461a      	mov	r2, r3
 8014caa:	4b11      	ldr	r3, [pc, #68]	; (8014cf0 <RegionEU868GetPhyParam+0x28c>)
 8014cac:	5c9b      	ldrb	r3, [r3, r2]
 8014cae:	61bb      	str	r3, [r7, #24]
            break;
 8014cb0:	e00a      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014cb8:	490e      	ldr	r1, [pc, #56]	; (8014cf4 <RegionEU868GetPhyParam+0x290>)
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7ff fd98 	bl	80147f0 <RegionCommonGetBandwidth>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	61bb      	str	r3, [r7, #24]
            break;
 8014cc4:	e000      	b.n	8014cc8 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 8014cc6:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	61fb      	str	r3, [r7, #28]
 8014ccc:	2300      	movs	r3, #0
 8014cce:	69fb      	ldr	r3, [r7, #28]
}
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3720      	adds	r7, #32
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	20000dd4 	.word	0x20000dd4
 8014cdc:	0801b518 	.word	0x0801b518
 8014ce0:	0801b520 	.word	0x0801b520
 8014ce4:	fffffc18 	.word	0xfffffc18
 8014ce8:	33d3e608 	.word	0x33d3e608
 8014cec:	4009999a 	.word	0x4009999a
 8014cf0:	0801b4f0 	.word	0x0801b4f0
 8014cf4:	0801b4f8 	.word	0x0801b4f8

08014cf8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014cf8:	b590      	push	{r4, r7, lr}
 8014cfa:	b085      	sub	sp, #20
 8014cfc:	af02      	add	r7, sp, #8
 8014cfe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014d00:	4b11      	ldr	r3, [pc, #68]	; (8014d48 <RegionEU868SetBandTxDone+0x50>)
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	4b11      	ldr	r3, [pc, #68]	; (8014d4c <RegionEU868SetBandTxDone+0x54>)
 8014d06:	6819      	ldr	r1, [r3, #0]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	4603      	mov	r3, r0
 8014d10:	005b      	lsls	r3, r3, #1
 8014d12:	4403      	add	r3, r0
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	440b      	add	r3, r1
 8014d18:	3309      	adds	r3, #9
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	460b      	mov	r3, r1
 8014d20:	005b      	lsls	r3, r3, #1
 8014d22:	440b      	add	r3, r1
 8014d24:	00db      	lsls	r3, r3, #3
 8014d26:	18d0      	adds	r0, r2, r3
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6899      	ldr	r1, [r3, #8]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	785c      	ldrb	r4, [r3, #1]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	691a      	ldr	r2, [r3, #16]
 8014d34:	9200      	str	r2, [sp, #0]
 8014d36:	68db      	ldr	r3, [r3, #12]
 8014d38:	4622      	mov	r2, r4
 8014d3a:	f7ff f8ef 	bl	8013f1c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8014d3e:	bf00      	nop
 8014d40:	370c      	adds	r7, #12
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd90      	pop	{r4, r7, pc}
 8014d46:	bf00      	nop
 8014d48:	20000dd0 	.word	0x20000dd0
 8014d4c:	20000dd4 	.word	0x20000dd4

08014d50 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b0b0      	sub	sp, #192	; 0xc0
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8014d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014d5c:	2290      	movs	r2, #144	; 0x90
 8014d5e:	2100      	movs	r1, #0
 8014d60:	4618      	mov	r0, r3
 8014d62:	f005 fcc9 	bl	801a6f8 <memset>
 8014d66:	2364      	movs	r3, #100	; 0x64
 8014d68:	863b      	strh	r3, [r7, #48]	; 0x30
 8014d6a:	2364      	movs	r3, #100	; 0x64
 8014d6c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8014d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014d74:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8014d78:	230a      	movs	r3, #10
 8014d7a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8014d7e:	2364      	movs	r3, #100	; 0x64
 8014d80:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8014d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014d88:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	7a1b      	ldrb	r3, [r3, #8]
 8014d90:	2b02      	cmp	r3, #2
 8014d92:	d05c      	beq.n	8014e4e <RegionEU868InitDefaults+0xfe>
 8014d94:	2b02      	cmp	r3, #2
 8014d96:	dc69      	bgt.n	8014e6c <RegionEU868InitDefaults+0x11c>
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d002      	beq.n	8014da2 <RegionEU868InitDefaults+0x52>
 8014d9c:	2b01      	cmp	r3, #1
 8014d9e:	d03e      	beq.n	8014e1e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8014da0:	e064      	b.n	8014e6c <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d061      	beq.n	8014e6e <RegionEU868InitDefaults+0x11e>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d05d      	beq.n	8014e6e <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a2f      	ldr	r2, [pc, #188]	; (8014e74 <RegionEU868InitDefaults+0x124>)
 8014db8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	4a2e      	ldr	r2, [pc, #184]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014dc0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8014dc2:	4b2c      	ldr	r3, [pc, #176]	; (8014e74 <RegionEU868InitDefaults+0x124>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014dcc:	2290      	movs	r2, #144	; 0x90
 8014dce:	4619      	mov	r1, r3
 8014dd0:	f000 ffb3 	bl	8015d3a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8014dd4:	4b28      	ldr	r3, [pc, #160]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4a28      	ldr	r2, [pc, #160]	; (8014e7c <RegionEU868InitDefaults+0x12c>)
 8014dda:	ca07      	ldmia	r2, {r0, r1, r2}
 8014ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8014de0:	4b25      	ldr	r3, [pc, #148]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	4a26      	ldr	r2, [pc, #152]	; (8014e80 <RegionEU868InitDefaults+0x130>)
 8014de6:	330c      	adds	r3, #12
 8014de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8014dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8014dee:	4b22      	ldr	r3, [pc, #136]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	4a24      	ldr	r2, [pc, #144]	; (8014e84 <RegionEU868InitDefaults+0x134>)
 8014df4:	3318      	adds	r3, #24
 8014df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014df8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8014dfc:	4b1e      	ldr	r3, [pc, #120]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2207      	movs	r2, #7
 8014e02:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014e06:	4b1c      	ldr	r3, [pc, #112]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8014e0e:	4b1a      	ldr	r3, [pc, #104]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	33c2      	adds	r3, #194	; 0xc2
 8014e14:	2201      	movs	r2, #1
 8014e16:	4619      	mov	r1, r3
 8014e18:	f7ff f85a 	bl	8013ed0 <RegionCommonChanMaskCopy>
 8014e1c:	e027      	b.n	8014e6e <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014e1e:	4b16      	ldr	r3, [pc, #88]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2200      	movs	r2, #0
 8014e24:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014e26:	4b14      	ldr	r3, [pc, #80]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8014e2e:	4b12      	ldr	r3, [pc, #72]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	2200      	movs	r2, #0
 8014e34:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014e36:	4b10      	ldr	r3, [pc, #64]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8014e3e:	4b0e      	ldr	r3, [pc, #56]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	33c2      	adds	r3, #194	; 0xc2
 8014e44:	2201      	movs	r2, #1
 8014e46:	4619      	mov	r1, r3
 8014e48:	f7ff f842 	bl	8013ed0 <RegionCommonChanMaskCopy>
            break;
 8014e4c:	e00f      	b.n	8014e6e <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014e4e:	4b0a      	ldr	r3, [pc, #40]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8014e56:	4b08      	ldr	r3, [pc, #32]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8014e5e:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <RegionEU868InitDefaults+0x128>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	430a      	orrs	r2, r1
 8014e64:	b292      	uxth	r2, r2
 8014e66:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8014e6a:	e000      	b.n	8014e6e <RegionEU868InitDefaults+0x11e>
            break;
 8014e6c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8014e6e:	37c0      	adds	r7, #192	; 0xc0
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	20000dd0 	.word	0x20000dd0
 8014e78:	20000dd4 	.word	0x20000dd4
 8014e7c:	0801af84 	.word	0x0801af84
 8014e80:	0801af90 	.word	0x0801af90
 8014e84:	0801af9c 	.word	0x0801af9c

08014e88 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b084      	sub	sp, #16
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	460b      	mov	r3, r1
 8014e92:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8014e94:	78fb      	ldrb	r3, [r7, #3]
 8014e96:	2b0f      	cmp	r3, #15
 8014e98:	d86c      	bhi.n	8014f74 <RegionEU868Verify+0xec>
 8014e9a:	a201      	add	r2, pc, #4	; (adr r2, 8014ea0 <RegionEU868Verify+0x18>)
 8014e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ea0:	08014ee1 	.word	0x08014ee1
 8014ea4:	08014f75 	.word	0x08014f75
 8014ea8:	08014f75 	.word	0x08014f75
 8014eac:	08014f75 	.word	0x08014f75
 8014eb0:	08014f75 	.word	0x08014f75
 8014eb4:	08014ef9 	.word	0x08014ef9
 8014eb8:	08014f17 	.word	0x08014f17
 8014ebc:	08014f35 	.word	0x08014f35
 8014ec0:	08014f75 	.word	0x08014f75
 8014ec4:	08014f53 	.word	0x08014f53
 8014ec8:	08014f53 	.word	0x08014f53
 8014ecc:	08014f75 	.word	0x08014f75
 8014ed0:	08014f75 	.word	0x08014f75
 8014ed4:	08014f75 	.word	0x08014f75
 8014ed8:	08014f75 	.word	0x08014f75
 8014edc:	08014f71 	.word	0x08014f71
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	f107 020f 	add.w	r2, r7, #15
 8014eec:	4611      	mov	r1, r2
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7ff fcf2 	bl	80148d8 <VerifyRfFreq>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	e03e      	b.n	8014f76 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f993 3000 	ldrsb.w	r3, [r3]
 8014efe:	2207      	movs	r2, #7
 8014f00:	2100      	movs	r1, #0
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fe ff67 	bl	8013dd6 <RegionCommonValueInRange>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	bf14      	ite	ne
 8014f0e:	2301      	movne	r3, #1
 8014f10:	2300      	moveq	r3, #0
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	e02f      	b.n	8014f76 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f993 3000 	ldrsb.w	r3, [r3]
 8014f1c:	2205      	movs	r2, #5
 8014f1e:	2100      	movs	r1, #0
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7fe ff58 	bl	8013dd6 <RegionCommonValueInRange>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	bf14      	ite	ne
 8014f2c:	2301      	movne	r3, #1
 8014f2e:	2300      	moveq	r3, #0
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	e020      	b.n	8014f76 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f993 3000 	ldrsb.w	r3, [r3]
 8014f3a:	2207      	movs	r2, #7
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7fe ff49 	bl	8013dd6 <RegionCommonValueInRange>
 8014f44:	4603      	mov	r3, r0
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	bf14      	ite	ne
 8014f4a:	2301      	movne	r3, #1
 8014f4c:	2300      	moveq	r3, #0
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	e011      	b.n	8014f76 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f993 3000 	ldrsb.w	r3, [r3]
 8014f58:	2207      	movs	r2, #7
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7fe ff3a 	bl	8013dd6 <RegionCommonValueInRange>
 8014f62:	4603      	mov	r3, r0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	bf14      	ite	ne
 8014f68:	2301      	movne	r3, #1
 8014f6a:	2300      	moveq	r3, #0
 8014f6c:	b2db      	uxtb	r3, r3
 8014f6e:	e002      	b.n	8014f76 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8014f70:	2301      	movs	r3, #1
 8014f72:	e000      	b.n	8014f76 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8014f74:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3710      	adds	r7, #16
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop

08014f80 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b08a      	sub	sp, #40	; 0x28
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014f88:	2350      	movs	r3, #80	; 0x50
 8014f8a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	791b      	ldrb	r3, [r3, #4]
 8014f92:	2b10      	cmp	r3, #16
 8014f94:	d162      	bne.n	801505c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	330f      	adds	r3, #15
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d15e      	bne.n	8015060 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fa8:	2303      	movs	r3, #3
 8014faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014fae:	e050      	b.n	8015052 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8014fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014fb4:	2b07      	cmp	r3, #7
 8014fb6:	d824      	bhi.n	8015002 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681a      	ldr	r2, [r3, #0]
 8014fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fc0:	4413      	add	r3, r2
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014fc6:	69ba      	ldr	r2, [r7, #24]
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6819      	ldr	r1, [r3, #0]
 8014fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	440b      	add	r3, r1
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	021b      	lsls	r3, r3, #8
 8014fd8:	4313      	orrs	r3, r2
 8014fda:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014fdc:	69ba      	ldr	r2, [r7, #24]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6819      	ldr	r1, [r3, #0]
 8014fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fe6:	3302      	adds	r3, #2
 8014fe8:	440b      	add	r3, r1
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	041b      	lsls	r3, r3, #16
 8014fee:	4313      	orrs	r3, r2
 8014ff0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	2264      	movs	r2, #100	; 0x64
 8014ff6:	fb02 f303 	mul.w	r3, r2, r3
 8014ffa:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	61fb      	str	r3, [r7, #28]
 8015000:	e006      	b.n	8015010 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015002:	2300      	movs	r3, #0
 8015004:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015006:	2300      	movs	r3, #0
 8015008:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801500c:	2300      	movs	r3, #0
 801500e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d00b      	beq.n	801502e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015016:	f107 0318 	add.w	r3, r7, #24
 801501a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801501c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015020:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015022:	f107 0310 	add.w	r3, r7, #16
 8015026:	4618      	mov	r0, r3
 8015028:	f000 fd0e 	bl	8015a48 <RegionEU868ChannelAdd>
 801502c:	e007      	b.n	801503e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801502e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015032:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015034:	f107 030c 	add.w	r3, r7, #12
 8015038:	4618      	mov	r0, r3
 801503a:	f000 fda7 	bl	8015b8c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801503e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015042:	3303      	adds	r3, #3
 8015044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801504c:	3301      	adds	r3, #1
 801504e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015052:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015056:	2b0f      	cmp	r3, #15
 8015058:	d9aa      	bls.n	8014fb0 <RegionEU868ApplyCFList+0x30>
 801505a:	e002      	b.n	8015062 <RegionEU868ApplyCFList+0xe2>
        return;
 801505c:	bf00      	nop
 801505e:	e000      	b.n	8015062 <RegionEU868ApplyCFList+0xe2>
        return;
 8015060:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015062:	3728      	adds	r7, #40	; 0x28
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}

08015068 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	791b      	ldrb	r3, [r3, #4]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d002      	beq.n	801507e <RegionEU868ChanMaskSet+0x16>
 8015078:	2b01      	cmp	r3, #1
 801507a:	d00b      	beq.n	8015094 <RegionEU868ChanMaskSet+0x2c>
 801507c:	e015      	b.n	80150aa <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801507e:	4b0e      	ldr	r3, [pc, #56]	; (80150b8 <RegionEU868ChanMaskSet+0x50>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	2201      	movs	r2, #1
 801508c:	4619      	mov	r1, r3
 801508e:	f7fe ff1f 	bl	8013ed0 <RegionCommonChanMaskCopy>
            break;
 8015092:	e00c      	b.n	80150ae <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015094:	4b08      	ldr	r3, [pc, #32]	; (80150b8 <RegionEU868ChanMaskSet+0x50>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2201      	movs	r2, #1
 80150a2:	4619      	mov	r1, r3
 80150a4:	f7fe ff14 	bl	8013ed0 <RegionCommonChanMaskCopy>
            break;
 80150a8:	e001      	b.n	80150ae <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80150aa:	2300      	movs	r3, #0
 80150ac:	e000      	b.n	80150b0 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80150ae:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3708      	adds	r7, #8
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20000dd4 	.word	0x20000dd4

080150bc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b088      	sub	sp, #32
 80150c0:	af02      	add	r7, sp, #8
 80150c2:	60ba      	str	r2, [r7, #8]
 80150c4:	607b      	str	r3, [r7, #4]
 80150c6:	4603      	mov	r3, r0
 80150c8:	73fb      	strb	r3, [r7, #15]
 80150ca:	460b      	mov	r3, r1
 80150cc:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80150ce:	2300      	movs	r3, #0
 80150d0:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80150d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150d6:	2b07      	cmp	r3, #7
 80150d8:	bfa8      	it	ge
 80150da:	2307      	movge	r3, #7
 80150dc:	b25a      	sxtb	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150e8:	491e      	ldr	r1, [pc, #120]	; (8015164 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7ff fb80 	bl	80147f0 <RegionCommonGetBandwidth>
 80150f0:	4603      	mov	r3, r0
 80150f2:	b2da      	uxtb	r2, r3
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80150fe:	2b07      	cmp	r3, #7
 8015100:	d10a      	bne.n	8015118 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015108:	461a      	mov	r2, r3
 801510a:	4b17      	ldr	r3, [pc, #92]	; (8015168 <RegionEU868ComputeRxWindowParameters+0xac>)
 801510c:	5c9b      	ldrb	r3, [r3, r2]
 801510e:	4618      	mov	r0, r3
 8015110:	f7ff f902 	bl	8014318 <RegionCommonComputeSymbolTimeFsk>
 8015114:	6178      	str	r0, [r7, #20]
 8015116:	e011      	b.n	801513c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801511e:	461a      	mov	r2, r3
 8015120:	4b11      	ldr	r3, [pc, #68]	; (8015168 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015122:	5c9a      	ldrb	r2, [r3, r2]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801512a:	4619      	mov	r1, r3
 801512c:	4b0d      	ldr	r3, [pc, #52]	; (8015164 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801512e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015132:	4619      	mov	r1, r3
 8015134:	4610      	mov	r0, r2
 8015136:	f7ff f8d9 	bl	80142ec <RegionCommonComputeSymbolTimeLoRa>
 801513a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801513c:	4b0b      	ldr	r3, [pc, #44]	; (801516c <RegionEU868ComputeRxWindowParameters+0xb0>)
 801513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015140:	4798      	blx	r3
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	3308      	adds	r3, #8
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	320c      	adds	r2, #12
 801514a:	7bb9      	ldrb	r1, [r7, #14]
 801514c:	9201      	str	r2, [sp, #4]
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	4603      	mov	r3, r0
 8015152:	68ba      	ldr	r2, [r7, #8]
 8015154:	6978      	ldr	r0, [r7, #20]
 8015156:	f7ff f8ef 	bl	8014338 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801515a:	bf00      	nop
 801515c:	3718      	adds	r7, #24
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	0801b4f8 	.word	0x0801b4f8
 8015168:	0801b4f0 	.word	0x0801b4f0
 801516c:	0801b528 	.word	0x0801b528

08015170 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015170:	b5b0      	push	{r4, r5, r7, lr}
 8015172:	b090      	sub	sp, #64	; 0x40
 8015174:	af0a      	add	r7, sp, #40	; 0x28
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	785b      	ldrb	r3, [r3, #1]
 801517e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015180:	2300      	movs	r3, #0
 8015182:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015184:	2300      	movs	r3, #0
 8015186:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801518e:	4b5a      	ldr	r3, [pc, #360]	; (80152f8 <RegionEU868RxConfig+0x188>)
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	4798      	blx	r3
 8015194:	4603      	mov	r3, r0
 8015196:	2b00      	cmp	r3, #0
 8015198:	d001      	beq.n	801519e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801519a:	2300      	movs	r3, #0
 801519c:	e0a8      	b.n	80152f0 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	7cdb      	ldrb	r3, [r3, #19]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d126      	bne.n	80151f4 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80151a6:	4b55      	ldr	r3, [pc, #340]	; (80152fc <RegionEU868RxConfig+0x18c>)
 80151a8:	681a      	ldr	r2, [r3, #0]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	4619      	mov	r1, r3
 80151b0:	460b      	mov	r3, r1
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	440b      	add	r3, r1
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	4413      	add	r3, r2
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80151be:	4b4f      	ldr	r3, [pc, #316]	; (80152fc <RegionEU868RxConfig+0x18c>)
 80151c0:	681a      	ldr	r2, [r3, #0]
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	4619      	mov	r1, r3
 80151c8:	460b      	mov	r3, r1
 80151ca:	005b      	lsls	r3, r3, #1
 80151cc:	440b      	add	r3, r1
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	4413      	add	r3, r2
 80151d2:	3304      	adds	r3, #4
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00c      	beq.n	80151f4 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80151da:	4b48      	ldr	r3, [pc, #288]	; (80152fc <RegionEU868RxConfig+0x18c>)
 80151dc:	681a      	ldr	r2, [r3, #0]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	4619      	mov	r1, r3
 80151e4:	460b      	mov	r3, r1
 80151e6:	005b      	lsls	r3, r3, #1
 80151e8:	440b      	add	r3, r1
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	4413      	add	r3, r2
 80151ee:	3304      	adds	r3, #4
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80151f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151f8:	4a41      	ldr	r2, [pc, #260]	; (8015300 <RegionEU868RxConfig+0x190>)
 80151fa:	5cd3      	ldrb	r3, [r2, r3]
 80151fc:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80151fe:	4b3e      	ldr	r3, [pc, #248]	; (80152f8 <RegionEU868RxConfig+0x188>)
 8015200:	68db      	ldr	r3, [r3, #12]
 8015202:	6938      	ldr	r0, [r7, #16]
 8015204:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801520a:	2b07      	cmp	r3, #7
 801520c:	d128      	bne.n	8015260 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801520e:	2300      	movs	r3, #0
 8015210:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015212:	4b39      	ldr	r3, [pc, #228]	; (80152f8 <RegionEU868RxConfig+0x188>)
 8015214:	699c      	ldr	r4, [r3, #24]
 8015216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801521a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801521e:	fb02 f303 	mul.w	r3, r2, r3
 8015222:	4619      	mov	r1, r3
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	b29b      	uxth	r3, r3
 801522a:	687a      	ldr	r2, [r7, #4]
 801522c:	7c92      	ldrb	r2, [r2, #18]
 801522e:	7df8      	ldrb	r0, [r7, #23]
 8015230:	9209      	str	r2, [sp, #36]	; 0x24
 8015232:	2200      	movs	r2, #0
 8015234:	9208      	str	r2, [sp, #32]
 8015236:	2200      	movs	r2, #0
 8015238:	9207      	str	r2, [sp, #28]
 801523a:	2200      	movs	r2, #0
 801523c:	9206      	str	r2, [sp, #24]
 801523e:	2201      	movs	r2, #1
 8015240:	9205      	str	r2, [sp, #20]
 8015242:	2200      	movs	r2, #0
 8015244:	9204      	str	r2, [sp, #16]
 8015246:	2200      	movs	r2, #0
 8015248:	9203      	str	r2, [sp, #12]
 801524a:	9302      	str	r3, [sp, #8]
 801524c:	2305      	movs	r3, #5
 801524e:	9301      	str	r3, [sp, #4]
 8015250:	4b2c      	ldr	r3, [pc, #176]	; (8015304 <RegionEU868RxConfig+0x194>)
 8015252:	9300      	str	r3, [sp, #0]
 8015254:	2300      	movs	r3, #0
 8015256:	460a      	mov	r2, r1
 8015258:	f24c 3150 	movw	r1, #50000	; 0xc350
 801525c:	47a0      	blx	r4
 801525e:	e024      	b.n	80152aa <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015260:	2301      	movs	r3, #1
 8015262:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015264:	4b24      	ldr	r3, [pc, #144]	; (80152f8 <RegionEU868RxConfig+0x188>)
 8015266:	699c      	ldr	r4, [r3, #24]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	789b      	ldrb	r3, [r3, #2]
 801526c:	461d      	mov	r5, r3
 801526e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	689b      	ldr	r3, [r3, #8]
 8015276:	b29b      	uxth	r3, r3
 8015278:	687a      	ldr	r2, [r7, #4]
 801527a:	7c92      	ldrb	r2, [r2, #18]
 801527c:	7df8      	ldrb	r0, [r7, #23]
 801527e:	9209      	str	r2, [sp, #36]	; 0x24
 8015280:	2201      	movs	r2, #1
 8015282:	9208      	str	r2, [sp, #32]
 8015284:	2200      	movs	r2, #0
 8015286:	9207      	str	r2, [sp, #28]
 8015288:	2200      	movs	r2, #0
 801528a:	9206      	str	r2, [sp, #24]
 801528c:	2200      	movs	r2, #0
 801528e:	9205      	str	r2, [sp, #20]
 8015290:	2200      	movs	r2, #0
 8015292:	9204      	str	r2, [sp, #16]
 8015294:	2200      	movs	r2, #0
 8015296:	9203      	str	r2, [sp, #12]
 8015298:	9302      	str	r3, [sp, #8]
 801529a:	2308      	movs	r3, #8
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	2300      	movs	r3, #0
 80152a0:	9300      	str	r3, [sp, #0]
 80152a2:	2301      	movs	r3, #1
 80152a4:	460a      	mov	r2, r1
 80152a6:	4629      	mov	r1, r5
 80152a8:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	7c5b      	ldrb	r3, [r3, #17]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d005      	beq.n	80152be <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80152b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152b6:	4a14      	ldr	r2, [pc, #80]	; (8015308 <RegionEU868RxConfig+0x198>)
 80152b8:	5cd3      	ldrb	r3, [r2, r3]
 80152ba:	75bb      	strb	r3, [r7, #22]
 80152bc:	e004      	b.n	80152c8 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80152be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152c2:	4a12      	ldr	r2, [pc, #72]	; (801530c <RegionEU868RxConfig+0x19c>)
 80152c4:	5cd3      	ldrb	r3, [r2, r3]
 80152c6:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80152c8:	4b0b      	ldr	r3, [pc, #44]	; (80152f8 <RegionEU868RxConfig+0x188>)
 80152ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152cc:	7dba      	ldrb	r2, [r7, #22]
 80152ce:	320d      	adds	r2, #13
 80152d0:	b2d1      	uxtb	r1, r2
 80152d2:	7dfa      	ldrb	r2, [r7, #23]
 80152d4:	4610      	mov	r0, r2
 80152d6:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	7cdb      	ldrb	r3, [r3, #19]
 80152dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80152e0:	6939      	ldr	r1, [r7, #16]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7ff faa2 	bl	801482c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	7bfa      	ldrb	r2, [r7, #15]
 80152ec:	701a      	strb	r2, [r3, #0]
    return true;
 80152ee:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3718      	adds	r7, #24
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bdb0      	pop	{r4, r5, r7, pc}
 80152f8:	0801b528 	.word	0x0801b528
 80152fc:	20000dd4 	.word	0x20000dd4
 8015300:	0801b4f0 	.word	0x0801b4f0
 8015304:	00014585 	.word	0x00014585
 8015308:	0801b520 	.word	0x0801b520
 801530c:	0801b518 	.word	0x0801b518

08015310 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015310:	b590      	push	{r4, r7, lr}
 8015312:	b093      	sub	sp, #76	; 0x4c
 8015314:	af0a      	add	r7, sp, #40	; 0x28
 8015316:	60f8      	str	r0, [r7, #12]
 8015318:	60b9      	str	r1, [r7, #8]
 801531a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015322:	461a      	mov	r2, r3
 8015324:	4b5d      	ldr	r3, [pc, #372]	; (801549c <RegionEU868TxConfig+0x18c>)
 8015326:	5c9b      	ldrb	r3, [r3, r2]
 8015328:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015330:	4b5b      	ldr	r3, [pc, #364]	; (80154a0 <RegionEU868TxConfig+0x190>)
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	4b5b      	ldr	r3, [pc, #364]	; (80154a4 <RegionEU868TxConfig+0x194>)
 8015336:	6819      	ldr	r1, [r3, #0]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	781b      	ldrb	r3, [r3, #0]
 801533c:	461c      	mov	r4, r3
 801533e:	4623      	mov	r3, r4
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4423      	add	r3, r4
 8015344:	009b      	lsls	r3, r3, #2
 8015346:	440b      	add	r3, r1
 8015348:	3309      	adds	r3, #9
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	4619      	mov	r1, r3
 801534e:	460b      	mov	r3, r1
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	440b      	add	r3, r1
 8015354:	00db      	lsls	r3, r3, #3
 8015356:	4413      	add	r3, r2
 8015358:	3302      	adds	r3, #2
 801535a:	f993 3000 	ldrsb.w	r3, [r3]
 801535e:	4619      	mov	r1, r3
 8015360:	f7ff fa31 	bl	80147c6 <RegionCommonLimitTxPower>
 8015364:	4603      	mov	r3, r0
 8015366:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801536e:	494e      	ldr	r1, [pc, #312]	; (80154a8 <RegionEU868TxConfig+0x198>)
 8015370:	4618      	mov	r0, r3
 8015372:	f7ff fa3d 	bl	80147f0 <RegionCommonGetBandwidth>
 8015376:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015378:	2300      	movs	r3, #0
 801537a:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	6859      	ldr	r1, [r3, #4]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	689a      	ldr	r2, [r3, #8]
 8015384:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015388:	4618      	mov	r0, r3
 801538a:	f7ff f88d 	bl	80144a8 <RegionCommonComputeTxPower>
 801538e:	4603      	mov	r3, r0
 8015390:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015392:	4b46      	ldr	r3, [pc, #280]	; (80154ac <RegionEU868TxConfig+0x19c>)
 8015394:	68da      	ldr	r2, [r3, #12]
 8015396:	4b43      	ldr	r3, [pc, #268]	; (80154a4 <RegionEU868TxConfig+0x194>)
 8015398:	6819      	ldr	r1, [r3, #0]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	4618      	mov	r0, r3
 80153a0:	4603      	mov	r3, r0
 80153a2:	005b      	lsls	r3, r3, #1
 80153a4:	4403      	add	r3, r0
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	440b      	add	r3, r1
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4618      	mov	r0, r3
 80153ae:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153b6:	2b07      	cmp	r3, #7
 80153b8:	d124      	bne.n	8015404 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80153ba:	2300      	movs	r3, #0
 80153bc:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80153be:	4b3b      	ldr	r3, [pc, #236]	; (80154ac <RegionEU868TxConfig+0x19c>)
 80153c0:	69dc      	ldr	r4, [r3, #28]
 80153c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80153c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80153ca:	fb02 f303 	mul.w	r3, r2, r3
 80153ce:	461a      	mov	r2, r3
 80153d0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80153d4:	7ff8      	ldrb	r0, [r7, #31]
 80153d6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80153da:	9308      	str	r3, [sp, #32]
 80153dc:	2300      	movs	r3, #0
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	2300      	movs	r3, #0
 80153e2:	9306      	str	r3, [sp, #24]
 80153e4:	2300      	movs	r3, #0
 80153e6:	9305      	str	r3, [sp, #20]
 80153e8:	2301      	movs	r3, #1
 80153ea:	9304      	str	r3, [sp, #16]
 80153ec:	2300      	movs	r3, #0
 80153ee:	9303      	str	r3, [sp, #12]
 80153f0:	2305      	movs	r3, #5
 80153f2:	9302      	str	r3, [sp, #8]
 80153f4:	2300      	movs	r3, #0
 80153f6:	9301      	str	r3, [sp, #4]
 80153f8:	9200      	str	r2, [sp, #0]
 80153fa:	69bb      	ldr	r3, [r7, #24]
 80153fc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015400:	47a0      	blx	r4
 8015402:	e01d      	b.n	8015440 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015404:	2301      	movs	r3, #1
 8015406:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015408:	4b28      	ldr	r3, [pc, #160]	; (80154ac <RegionEU868TxConfig+0x19c>)
 801540a:	69dc      	ldr	r4, [r3, #28]
 801540c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015410:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015414:	7ff8      	ldrb	r0, [r7, #31]
 8015416:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801541a:	9208      	str	r2, [sp, #32]
 801541c:	2200      	movs	r2, #0
 801541e:	9207      	str	r2, [sp, #28]
 8015420:	2200      	movs	r2, #0
 8015422:	9206      	str	r2, [sp, #24]
 8015424:	2200      	movs	r2, #0
 8015426:	9205      	str	r2, [sp, #20]
 8015428:	2201      	movs	r2, #1
 801542a:	9204      	str	r2, [sp, #16]
 801542c:	2200      	movs	r2, #0
 801542e:	9203      	str	r2, [sp, #12]
 8015430:	2208      	movs	r2, #8
 8015432:	9202      	str	r2, [sp, #8]
 8015434:	2201      	movs	r2, #1
 8015436:	9201      	str	r2, [sp, #4]
 8015438:	9300      	str	r3, [sp, #0]
 801543a:	69bb      	ldr	r3, [r7, #24]
 801543c:	2200      	movs	r2, #0
 801543e:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015440:	4b18      	ldr	r3, [pc, #96]	; (80154a4 <RegionEU868TxConfig+0x194>)
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	4619      	mov	r1, r3
 801544a:	460b      	mov	r3, r1
 801544c:	005b      	lsls	r3, r3, #1
 801544e:	440b      	add	r3, r1
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	4413      	add	r3, r2
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7ff fa22 	bl	80148a8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	899b      	ldrh	r3, [r3, #12]
 801546e:	4619      	mov	r1, r3
 8015470:	4610      	mov	r0, r2
 8015472:	f7ff faa7 	bl	80149c4 <GetTimeOnAir>
 8015476:	4602      	mov	r2, r0
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801547c:	4b0b      	ldr	r3, [pc, #44]	; (80154ac <RegionEU868TxConfig+0x19c>)
 801547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	8992      	ldrh	r2, [r2, #12]
 8015484:	b2d1      	uxtb	r1, r2
 8015486:	7ffa      	ldrb	r2, [r7, #31]
 8015488:	4610      	mov	r0, r2
 801548a:	4798      	blx	r3

    *txPower = txPowerLimited;
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	7f7a      	ldrb	r2, [r7, #29]
 8015490:	701a      	strb	r2, [r3, #0]
    return true;
 8015492:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015494:	4618      	mov	r0, r3
 8015496:	3724      	adds	r7, #36	; 0x24
 8015498:	46bd      	mov	sp, r7
 801549a:	bd90      	pop	{r4, r7, pc}
 801549c:	0801b4f0 	.word	0x0801b4f0
 80154a0:	20000dd0 	.word	0x20000dd0
 80154a4:	20000dd4 	.word	0x20000dd4
 80154a8:	0801b4f8 	.word	0x0801b4f8
 80154ac:	0801b528 	.word	0x0801b528

080154b0 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80154b0:	b590      	push	{r4, r7, lr}
 80154b2:	b093      	sub	sp, #76	; 0x4c
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80154be:	2307      	movs	r3, #7
 80154c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80154c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80154c8:	2200      	movs	r2, #0
 80154ca:	601a      	str	r2, [r3, #0]
 80154cc:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80154ce:	2300      	movs	r3, #0
 80154d0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80154d4:	2300      	movs	r3, #0
 80154d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80154da:	2300      	movs	r3, #0
 80154dc:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80154de:	e085      	b.n	80155ec <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	685a      	ldr	r2, [r3, #4]
 80154e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80154e8:	4413      	add	r3, r2
 80154ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80154ee:	4611      	mov	r1, r2
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fe fe31 	bl	8014158 <RegionCommonParseLinkAdrReq>
 80154f6:	4603      	mov	r3, r0
 80154f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80154fc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015500:	2b00      	cmp	r3, #0
 8015502:	d07b      	beq.n	80155fc <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015504:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015508:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801550c:	4413      	add	r3, r2
 801550e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015512:	2307      	movs	r3, #7
 8015514:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801551c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801551e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015522:	2b00      	cmp	r3, #0
 8015524:	d109      	bne.n	801553a <RegionEU868LinkAdrReq+0x8a>
 8015526:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015528:	2b00      	cmp	r3, #0
 801552a:	d106      	bne.n	801553a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801552c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015530:	f023 0301 	bic.w	r3, r3, #1
 8015534:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015538:	e058      	b.n	80155ec <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801553a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801553e:	2b00      	cmp	r3, #0
 8015540:	d003      	beq.n	801554a <RegionEU868LinkAdrReq+0x9a>
 8015542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015546:	2b05      	cmp	r3, #5
 8015548:	d903      	bls.n	8015552 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801554a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801554e:	2b06      	cmp	r3, #6
 8015550:	d906      	bls.n	8015560 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015552:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015556:	f023 0301 	bic.w	r3, r3, #1
 801555a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801555e:	e045      	b.n	80155ec <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015560:	2300      	movs	r3, #0
 8015562:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015566:	e03d      	b.n	80155e4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015568:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801556c:	2b06      	cmp	r3, #6
 801556e:	d118      	bne.n	80155a2 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015570:	4b5f      	ldr	r3, [pc, #380]	; (80156f0 <RegionEU868LinkAdrReq+0x240>)
 8015572:	6819      	ldr	r1, [r3, #0]
 8015574:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015578:	4613      	mov	r3, r2
 801557a:	005b      	lsls	r3, r3, #1
 801557c:	4413      	add	r3, r2
 801557e:	009b      	lsls	r3, r3, #2
 8015580:	440b      	add	r3, r1
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d028      	beq.n	80155da <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015588:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801558c:	2201      	movs	r2, #1
 801558e:	fa02 f303 	lsl.w	r3, r2, r3
 8015592:	b21a      	sxth	r2, r3
 8015594:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015596:	b21b      	sxth	r3, r3
 8015598:	4313      	orrs	r3, r2
 801559a:	b21b      	sxth	r3, r3
 801559c:	b29b      	uxth	r3, r3
 801559e:	877b      	strh	r3, [r7, #58]	; 0x3a
 80155a0:	e01b      	b.n	80155da <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80155a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80155a4:	461a      	mov	r2, r3
 80155a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80155aa:	fa42 f303 	asr.w	r3, r2, r3
 80155ae:	f003 0301 	and.w	r3, r3, #1
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d011      	beq.n	80155da <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80155b6:	4b4e      	ldr	r3, [pc, #312]	; (80156f0 <RegionEU868LinkAdrReq+0x240>)
 80155b8:	6819      	ldr	r1, [r3, #0]
 80155ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80155be:	4613      	mov	r3, r2
 80155c0:	005b      	lsls	r3, r3, #1
 80155c2:	4413      	add	r3, r2
 80155c4:	009b      	lsls	r3, r3, #2
 80155c6:	440b      	add	r3, r1
 80155c8:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d105      	bne.n	80155da <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80155ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80155d2:	f023 0301 	bic.w	r3, r3, #1
 80155d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80155da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80155de:	3301      	adds	r3, #1
 80155e0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80155e4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80155e8:	2b0f      	cmp	r3, #15
 80155ea:	d9bd      	bls.n	8015568 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	7a1b      	ldrb	r3, [r3, #8]
 80155f0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80155f4:	429a      	cmp	r2, r3
 80155f6:	f4ff af73 	bcc.w	80154e0 <RegionEU868LinkAdrReq+0x30>
 80155fa:	e000      	b.n	80155fe <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80155fc:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80155fe:	2302      	movs	r3, #2
 8015600:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	7a5b      	ldrb	r3, [r3, #9]
 8015608:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801560c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015610:	4618      	mov	r0, r3
 8015612:	f7ff fa27 	bl	8014a64 <RegionEU868GetPhyParam>
 8015616:	4603      	mov	r3, r0
 8015618:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801561a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801561e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	7a9b      	ldrb	r3, [r3, #10]
 8015624:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015626:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801562a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801562c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015630:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015632:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015636:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801563e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015646:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	7b5b      	ldrb	r3, [r3, #13]
 801564c:	b25b      	sxtb	r3, r3
 801564e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015650:	2310      	movs	r3, #16
 8015652:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015654:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015658:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565c:	b25b      	sxtb	r3, r3
 801565e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015662:	2307      	movs	r3, #7
 8015664:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015668:	4b21      	ldr	r3, [pc, #132]	; (80156f0 <RegionEU868LinkAdrReq+0x240>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801566e:	2307      	movs	r3, #7
 8015670:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015674:	2300      	movs	r3, #0
 8015676:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015680:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015684:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015688:	1c9a      	adds	r2, r3, #2
 801568a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801568e:	1c59      	adds	r1, r3, #1
 8015690:	f107 0010 	add.w	r0, r7, #16
 8015694:	4623      	mov	r3, r4
 8015696:	f7fe fdb0 	bl	80141fa <RegionCommonLinkAdrReqVerifyParams>
 801569a:	4603      	mov	r3, r0
 801569c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80156a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80156a4:	2b07      	cmp	r3, #7
 80156a6:	d10c      	bne.n	80156c2 <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80156a8:	4b11      	ldr	r3, [pc, #68]	; (80156f0 <RegionEU868LinkAdrReq+0x240>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	33c0      	adds	r3, #192	; 0xc0
 80156ae:	2202      	movs	r2, #2
 80156b0:	2100      	movs	r1, #0
 80156b2:	4618      	mov	r0, r3
 80156b4:	f000 fb7c 	bl	8015db0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80156b8:	4b0d      	ldr	r3, [pc, #52]	; (80156f0 <RegionEU868LinkAdrReq+0x240>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80156be:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80156c2:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80156ca:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80156d2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80156da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80156dc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80156e0:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80156e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	374c      	adds	r7, #76	; 0x4c
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd90      	pop	{r4, r7, pc}
 80156ee:	bf00      	nop
 80156f0:	20000dd4 	.word	0x20000dd4

080156f4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80156fc:	2307      	movs	r3, #7
 80156fe:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015700:	2300      	movs	r3, #0
 8015702:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	f107 020e 	add.w	r2, r7, #14
 801570c:	4611      	mov	r1, r2
 801570e:	4618      	mov	r0, r3
 8015710:	f7ff f8e2 	bl	80148d8 <VerifyRfFreq>
 8015714:	4603      	mov	r3, r0
 8015716:	f083 0301 	eor.w	r3, r3, #1
 801571a:	b2db      	uxtb	r3, r3
 801571c:	2b00      	cmp	r3, #0
 801571e:	d003      	beq.n	8015728 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015720:	7bfb      	ldrb	r3, [r7, #15]
 8015722:	f023 0301 	bic.w	r3, r3, #1
 8015726:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f993 3000 	ldrsb.w	r3, [r3]
 801572e:	2207      	movs	r2, #7
 8015730:	2100      	movs	r1, #0
 8015732:	4618      	mov	r0, r3
 8015734:	f7fe fb4f 	bl	8013dd6 <RegionCommonValueInRange>
 8015738:	4603      	mov	r3, r0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d103      	bne.n	8015746 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801573e:	7bfb      	ldrb	r3, [r7, #15]
 8015740:	f023 0302 	bic.w	r3, r3, #2
 8015744:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801574c:	2205      	movs	r2, #5
 801574e:	2100      	movs	r1, #0
 8015750:	4618      	mov	r0, r3
 8015752:	f7fe fb40 	bl	8013dd6 <RegionCommonValueInRange>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d103      	bne.n	8015764 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801575c:	7bfb      	ldrb	r3, [r7, #15]
 801575e:	f023 0304 	bic.w	r3, r3, #4
 8015762:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015764:	7bfb      	ldrb	r3, [r7, #15]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3710      	adds	r7, #16
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
	...

08015770 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b086      	sub	sp, #24
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015778:	2303      	movs	r3, #3
 801577a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d114      	bne.n	80157b0 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801578c:	b2db      	uxtb	r3, r3
 801578e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015790:	f107 0308 	add.w	r3, r7, #8
 8015794:	4618      	mov	r0, r3
 8015796:	f000 f9f9 	bl	8015b8c <RegionEU868ChannelsRemove>
 801579a:	4603      	mov	r3, r0
 801579c:	f083 0301 	eor.w	r3, r3, #1
 80157a0:	b2db      	uxtb	r3, r3
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d03b      	beq.n	801581e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80157a6:	7dfb      	ldrb	r3, [r7, #23]
 80157a8:	f023 0303 	bic.w	r3, r3, #3
 80157ac:	75fb      	strb	r3, [r7, #23]
 80157ae:	e036      	b.n	801581e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80157c0:	f107 030c 	add.w	r3, r7, #12
 80157c4:	4618      	mov	r0, r3
 80157c6:	f000 f93f 	bl	8015a48 <RegionEU868ChannelAdd>
 80157ca:	4603      	mov	r3, r0
 80157cc:	2b06      	cmp	r3, #6
 80157ce:	d820      	bhi.n	8015812 <RegionEU868NewChannelReq+0xa2>
 80157d0:	a201      	add	r2, pc, #4	; (adr r2, 80157d8 <RegionEU868NewChannelReq+0x68>)
 80157d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d6:	bf00      	nop
 80157d8:	0801581d 	.word	0x0801581d
 80157dc:	08015813 	.word	0x08015813
 80157e0:	08015813 	.word	0x08015813
 80157e4:	08015813 	.word	0x08015813
 80157e8:	080157f5 	.word	0x080157f5
 80157ec:	080157ff 	.word	0x080157ff
 80157f0:	08015809 	.word	0x08015809
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80157f4:	7dfb      	ldrb	r3, [r7, #23]
 80157f6:	f023 0301 	bic.w	r3, r3, #1
 80157fa:	75fb      	strb	r3, [r7, #23]
                break;
 80157fc:	e00f      	b.n	801581e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80157fe:	7dfb      	ldrb	r3, [r7, #23]
 8015800:	f023 0302 	bic.w	r3, r3, #2
 8015804:	75fb      	strb	r3, [r7, #23]
                break;
 8015806:	e00a      	b.n	801581e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015808:	7dfb      	ldrb	r3, [r7, #23]
 801580a:	f023 0303 	bic.w	r3, r3, #3
 801580e:	75fb      	strb	r3, [r7, #23]
                break;
 8015810:	e005      	b.n	801581e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015812:	7dfb      	ldrb	r3, [r7, #23]
 8015814:	f023 0303 	bic.w	r3, r3, #3
 8015818:	75fb      	strb	r3, [r7, #23]
                break;
 801581a:	e000      	b.n	801581e <RegionEU868NewChannelReq+0xae>
                break;
 801581c:	bf00      	nop
            }
        }
    }

    return status;
 801581e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015822:	4618      	mov	r0, r3
 8015824:	3718      	adds	r7, #24
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}
 801582a:	bf00      	nop

0801582c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801582c:	b480      	push	{r7}
 801582e:	b083      	sub	sp, #12
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015838:	4618      	mov	r0, r3
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	bc80      	pop	{r7}
 8015840:	4770      	bx	lr
	...

08015844 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801584c:	2303      	movs	r3, #3
 801584e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015850:	2300      	movs	r3, #0
 8015852:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	f107 020e 	add.w	r2, r7, #14
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7ff f83a 	bl	80148d8 <VerifyRfFreq>
 8015864:	4603      	mov	r3, r0
 8015866:	f083 0301 	eor.w	r3, r3, #1
 801586a:	b2db      	uxtb	r3, r3
 801586c:	2b00      	cmp	r3, #0
 801586e:	d003      	beq.n	8015878 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015870:	7bfb      	ldrb	r3, [r7, #15]
 8015872:	f023 0301 	bic.w	r3, r3, #1
 8015876:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015878:	4b13      	ldr	r3, [pc, #76]	; (80158c8 <RegionEU868DlChannelReq+0x84>)
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	781b      	ldrb	r3, [r3, #0]
 8015880:	4619      	mov	r1, r3
 8015882:	460b      	mov	r3, r1
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	440b      	add	r3, r1
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	4413      	add	r3, r2
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d103      	bne.n	801589a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015892:	7bfb      	ldrb	r3, [r7, #15]
 8015894:	f023 0302 	bic.w	r3, r3, #2
 8015898:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801589a:	7bfb      	ldrb	r3, [r7, #15]
 801589c:	2b03      	cmp	r3, #3
 801589e:	d10d      	bne.n	80158bc <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80158a0:	4b09      	ldr	r3, [pc, #36]	; (80158c8 <RegionEU868DlChannelReq+0x84>)
 80158a2:	6819      	ldr	r1, [r3, #0]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	781b      	ldrb	r3, [r3, #0]
 80158a8:	4618      	mov	r0, r3
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	685a      	ldr	r2, [r3, #4]
 80158ae:	4603      	mov	r3, r0
 80158b0:	005b      	lsls	r3, r3, #1
 80158b2:	4403      	add	r3, r0
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	440b      	add	r3, r1
 80158b8:	3304      	adds	r3, #4
 80158ba:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80158bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3710      	adds	r7, #16
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	20000dd4 	.word	0x20000dd4

080158cc <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	4603      	mov	r3, r0
 80158d4:	460a      	mov	r2, r1
 80158d6:	71fb      	strb	r3, [r7, #7]
 80158d8:	4613      	mov	r3, r2
 80158da:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80158dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	370c      	adds	r7, #12
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bc80      	pop	{r7}
 80158e8:	4770      	bx	lr
	...

080158ec <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b09a      	sub	sp, #104	; 0x68
 80158f0:	af02      	add	r7, sp, #8
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
 80158f8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80158fa:	2300      	movs	r3, #0
 80158fc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015900:	2300      	movs	r3, #0
 8015902:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015906:	2300      	movs	r3, #0
 8015908:	64fb      	str	r3, [r7, #76]	; 0x4c
 801590a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801590e:	2200      	movs	r2, #0
 8015910:	601a      	str	r2, [r3, #0]
 8015912:	605a      	str	r2, [r3, #4]
 8015914:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015916:	230c      	movs	r3, #12
 8015918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801591c:	2307      	movs	r3, #7
 801591e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015920:	4b47      	ldr	r3, [pc, #284]	; (8015a40 <RegionEU868NextChannel+0x154>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	33c0      	adds	r3, #192	; 0xc0
 8015926:	2201      	movs	r2, #1
 8015928:	2100      	movs	r1, #0
 801592a:	4618      	mov	r0, r3
 801592c:	f7fe faa4 	bl	8013e78 <RegionCommonCountChannels>
 8015930:	4603      	mov	r3, r0
 8015932:	2b00      	cmp	r3, #0
 8015934:	d10a      	bne.n	801594c <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015936:	4b42      	ldr	r3, [pc, #264]	; (8015a40 <RegionEU868NextChannel+0x154>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 801593e:	4b40      	ldr	r3, [pc, #256]	; (8015a40 <RegionEU868NextChannel+0x154>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	f042 0207 	orr.w	r2, r2, #7
 8015946:	b292      	uxth	r2, r2
 8015948:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	7a5b      	ldrb	r3, [r3, #9]
 8015950:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015958:	b2db      	uxtb	r3, r3
 801595a:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801595c:	4b38      	ldr	r3, [pc, #224]	; (8015a40 <RegionEU868NextChannel+0x154>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	33c0      	adds	r3, #192	; 0xc0
 8015962:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015964:	4b36      	ldr	r3, [pc, #216]	; (8015a40 <RegionEU868NextChannel+0x154>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801596a:	4b36      	ldr	r3, [pc, #216]	; (8015a44 <RegionEU868NextChannel+0x158>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015970:	2310      	movs	r3, #16
 8015972:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015974:	f107 0312 	add.w	r3, r7, #18
 8015978:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	685b      	ldr	r3, [r3, #4]
 8015984:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	7a9b      	ldrb	r3, [r3, #10]
 801598a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801598e:	2306      	movs	r3, #6
 8015990:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015994:	68fa      	ldr	r2, [r7, #12]
 8015996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801599a:	320c      	adds	r2, #12
 801599c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80159a0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	7d1b      	ldrb	r3, [r3, #20]
 80159a8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	8adb      	ldrh	r3, [r3, #22]
 80159b6:	4619      	mov	r1, r3
 80159b8:	4610      	mov	r0, r2
 80159ba:	f7ff f803 	bl	80149c4 <GetTimeOnAir>
 80159be:	4603      	mov	r3, r0
 80159c0:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80159c2:	f107 0314 	add.w	r3, r7, #20
 80159c6:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80159c8:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80159cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80159d0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	9301      	str	r3, [sp, #4]
 80159d8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80159dc:	9300      	str	r3, [sp, #0]
 80159de:	460b      	mov	r3, r1
 80159e0:	6839      	ldr	r1, [r7, #0]
 80159e2:	f7fe fe50 	bl	8014686 <RegionCommonIdentifyChannels>
 80159e6:	4603      	mov	r3, r0
 80159e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80159ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d10f      	bne.n	8015a14 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80159f4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80159f8:	3b01      	subs	r3, #1
 80159fa:	4619      	mov	r1, r3
 80159fc:	2000      	movs	r0, #0
 80159fe:	f000 f985 	bl	8015d0c <randr>
 8015a02:	4603      	mov	r3, r0
 8015a04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8015a08:	4413      	add	r3, r2
 8015a0a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	701a      	strb	r2, [r3, #0]
 8015a12:	e00e      	b.n	8015a32 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015a14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015a18:	2b0c      	cmp	r3, #12
 8015a1a:	d10a      	bne.n	8015a32 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015a1c:	4b08      	ldr	r3, [pc, #32]	; (8015a40 <RegionEU868NextChannel+0x154>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8015a24:	4b06      	ldr	r3, [pc, #24]	; (8015a40 <RegionEU868NextChannel+0x154>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	f042 0207 	orr.w	r2, r2, #7
 8015a2c:	b292      	uxth	r2, r2
 8015a2e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 8015a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3760      	adds	r7, #96	; 0x60
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	20000dd4 	.word	0x20000dd4
 8015a44:	20000dd0 	.word	0x20000dd0

08015a48 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015a50:	2300      	movs	r3, #0
 8015a52:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8015a54:	2300      	movs	r3, #0
 8015a56:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	791b      	ldrb	r3, [r3, #4]
 8015a60:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8015a62:	7b7b      	ldrb	r3, [r7, #13]
 8015a64:	2b02      	cmp	r3, #2
 8015a66:	d801      	bhi.n	8015a6c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015a68:	2306      	movs	r3, #6
 8015a6a:	e089      	b.n	8015b80 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8015a6c:	7b7b      	ldrb	r3, [r7, #13]
 8015a6e:	2b0f      	cmp	r3, #15
 8015a70:	d901      	bls.n	8015a76 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015a72:	2303      	movs	r3, #3
 8015a74:	e084      	b.n	8015b80 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	7a1b      	ldrb	r3, [r3, #8]
 8015a7c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015a80:	b25b      	sxtb	r3, r3
 8015a82:	2207      	movs	r2, #7
 8015a84:	2100      	movs	r1, #0
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7fe f9a5 	bl	8013dd6 <RegionCommonValueInRange>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d101      	bne.n	8015a96 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8015a92:	2301      	movs	r3, #1
 8015a94:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	7a1b      	ldrb	r3, [r3, #8]
 8015a9c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015aa0:	b25b      	sxtb	r3, r3
 8015aa2:	2207      	movs	r2, #7
 8015aa4:	2100      	movs	r1, #0
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7fe f995 	bl	8013dd6 <RegionCommonValueInRange>
 8015aac:	4603      	mov	r3, r0
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d101      	bne.n	8015ab6 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	7a1b      	ldrb	r3, [r3, #8]
 8015abc:	f343 0303 	sbfx	r3, r3, #0, #4
 8015ac0:	b25a      	sxtb	r2, r3
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	7a1b      	ldrb	r3, [r3, #8]
 8015ac8:	f343 1303 	sbfx	r3, r3, #4, #4
 8015acc:	b25b      	sxtb	r3, r3
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	dd01      	ble.n	8015ad6 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015ad6:	7bbb      	ldrb	r3, [r7, #14]
 8015ad8:	f083 0301 	eor.w	r3, r3, #1
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d010      	beq.n	8015b04 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f107 020c 	add.w	r2, r7, #12
 8015aec:	4611      	mov	r1, r2
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7fe fef2 	bl	80148d8 <VerifyRfFreq>
 8015af4:	4603      	mov	r3, r0
 8015af6:	f083 0301 	eor.w	r3, r3, #1
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d001      	beq.n	8015b04 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8015b00:	2301      	movs	r3, #1
 8015b02:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015b04:	7bfb      	ldrb	r3, [r7, #15]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d004      	beq.n	8015b14 <RegionEU868ChannelAdd+0xcc>
 8015b0a:	7bbb      	ldrb	r3, [r7, #14]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d001      	beq.n	8015b14 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015b10:	2306      	movs	r3, #6
 8015b12:	e035      	b.n	8015b80 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8015b14:	7bfb      	ldrb	r3, [r7, #15]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d001      	beq.n	8015b1e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015b1a:	2305      	movs	r3, #5
 8015b1c:	e030      	b.n	8015b80 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8015b1e:	7bbb      	ldrb	r3, [r7, #14]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d001      	beq.n	8015b28 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015b24:	2304      	movs	r3, #4
 8015b26:	e02b      	b.n	8015b80 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015b28:	4b17      	ldr	r3, [pc, #92]	; (8015b88 <RegionEU868ChannelAdd+0x140>)
 8015b2a:	6819      	ldr	r1, [r3, #0]
 8015b2c:	7b7a      	ldrb	r2, [r7, #13]
 8015b2e:	4613      	mov	r3, r2
 8015b30:	005b      	lsls	r3, r3, #1
 8015b32:	4413      	add	r3, r2
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	18c8      	adds	r0, r1, r3
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	220c      	movs	r2, #12
 8015b3e:	4619      	mov	r1, r3
 8015b40:	f000 f8fb 	bl	8015d3a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8015b44:	4b10      	ldr	r3, [pc, #64]	; (8015b88 <RegionEU868ChannelAdd+0x140>)
 8015b46:	6819      	ldr	r1, [r3, #0]
 8015b48:	7b7a      	ldrb	r2, [r7, #13]
 8015b4a:	7b38      	ldrb	r0, [r7, #12]
 8015b4c:	4613      	mov	r3, r2
 8015b4e:	005b      	lsls	r3, r3, #1
 8015b50:	4413      	add	r3, r2
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	440b      	add	r3, r1
 8015b56:	3309      	adds	r3, #9
 8015b58:	4602      	mov	r2, r0
 8015b5a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8015b5c:	4b0a      	ldr	r3, [pc, #40]	; (8015b88 <RegionEU868ChannelAdd+0x140>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8015b64:	b21a      	sxth	r2, r3
 8015b66:	7b7b      	ldrb	r3, [r7, #13]
 8015b68:	2101      	movs	r1, #1
 8015b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8015b6e:	b21b      	sxth	r3, r3
 8015b70:	4313      	orrs	r3, r2
 8015b72:	b21a      	sxth	r2, r3
 8015b74:	4b04      	ldr	r3, [pc, #16]	; (8015b88 <RegionEU868ChannelAdd+0x140>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	b292      	uxth	r2, r2
 8015b7a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 8015b7e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3710      	adds	r7, #16
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	20000dd4 	.word	0x20000dd4

08015b8c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b086      	sub	sp, #24
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8015b9a:	7dfb      	ldrb	r3, [r7, #23]
 8015b9c:	2b02      	cmp	r3, #2
 8015b9e:	d801      	bhi.n	8015ba4 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	e015      	b.n	8015bd0 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015ba4:	4b0c      	ldr	r3, [pc, #48]	; (8015bd8 <RegionEU868ChannelsRemove+0x4c>)
 8015ba6:	6819      	ldr	r1, [r3, #0]
 8015ba8:	7dfa      	ldrb	r2, [r7, #23]
 8015baa:	4613      	mov	r3, r2
 8015bac:	005b      	lsls	r3, r3, #1
 8015bae:	4413      	add	r3, r2
 8015bb0:	009b      	lsls	r3, r3, #2
 8015bb2:	440b      	add	r3, r1
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	6013      	str	r3, [r2, #0]
 8015bba:	6053      	str	r3, [r2, #4]
 8015bbc:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8015bbe:	4b06      	ldr	r3, [pc, #24]	; (8015bd8 <RegionEU868ChannelsRemove+0x4c>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	33c0      	adds	r3, #192	; 0xc0
 8015bc4:	7df9      	ldrb	r1, [r7, #23]
 8015bc6:	2210      	movs	r2, #16
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f7fe f921 	bl	8013e10 <RegionCommonChanDisable>
 8015bce:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	3718      	adds	r7, #24
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}
 8015bd8:	20000dd4 	.word	0x20000dd4

08015bdc <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015bdc:	b590      	push	{r4, r7, lr}
 8015bde:	b085      	sub	sp, #20
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015bea:	4b20      	ldr	r3, [pc, #128]	; (8015c6c <RegionEU868SetContinuousWave+0x90>)
 8015bec:	681a      	ldr	r2, [r3, #0]
 8015bee:	4b20      	ldr	r3, [pc, #128]	; (8015c70 <RegionEU868SetContinuousWave+0x94>)
 8015bf0:	6819      	ldr	r1, [r3, #0]
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	461c      	mov	r4, r3
 8015bf8:	4623      	mov	r3, r4
 8015bfa:	005b      	lsls	r3, r3, #1
 8015bfc:	4423      	add	r3, r4
 8015bfe:	009b      	lsls	r3, r3, #2
 8015c00:	440b      	add	r3, r1
 8015c02:	3309      	adds	r3, #9
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	4619      	mov	r1, r3
 8015c08:	460b      	mov	r3, r1
 8015c0a:	005b      	lsls	r3, r3, #1
 8015c0c:	440b      	add	r3, r1
 8015c0e:	00db      	lsls	r3, r3, #3
 8015c10:	4413      	add	r3, r2
 8015c12:	3302      	adds	r3, #2
 8015c14:	f993 3000 	ldrsb.w	r3, [r3]
 8015c18:	4619      	mov	r1, r3
 8015c1a:	f7fe fdd4 	bl	80147c6 <RegionCommonLimitTxPower>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015c22:	2300      	movs	r3, #0
 8015c24:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8015c26:	4b12      	ldr	r3, [pc, #72]	; (8015c70 <RegionEU868SetContinuousWave+0x94>)
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	781b      	ldrb	r3, [r3, #0]
 8015c2e:	4619      	mov	r1, r3
 8015c30:	460b      	mov	r3, r1
 8015c32:	005b      	lsls	r3, r3, #1
 8015c34:	440b      	add	r3, r1
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	4413      	add	r3, r2
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6859      	ldr	r1, [r3, #4]
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	689a      	ldr	r2, [r3, #8]
 8015c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7fe fc2c 	bl	80144a8 <RegionCommonComputeTxPower>
 8015c50:	4603      	mov	r3, r0
 8015c52:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8015c54:	4b07      	ldr	r3, [pc, #28]	; (8015c74 <RegionEU868SetContinuousWave+0x98>)
 8015c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	8992      	ldrh	r2, [r2, #12]
 8015c5c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015c60:	68b8      	ldr	r0, [r7, #8]
 8015c62:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8015c64:	bf00      	nop
 8015c66:	3714      	adds	r7, #20
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd90      	pop	{r4, r7, pc}
 8015c6c:	20000dd0 	.word	0x20000dd0
 8015c70:	20000dd4 	.word	0x20000dd4
 8015c74:	0801b528 	.word	0x0801b528

08015c78 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015c78:	b480      	push	{r7}
 8015c7a:	b085      	sub	sp, #20
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	4603      	mov	r3, r0
 8015c80:	71fb      	strb	r3, [r7, #7]
 8015c82:	460b      	mov	r3, r1
 8015c84:	71bb      	strb	r3, [r7, #6]
 8015c86:	4613      	mov	r3, r2
 8015c88:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8015c8a:	79ba      	ldrb	r2, [r7, #6]
 8015c8c:	797b      	ldrb	r3, [r7, #5]
 8015c8e:	1ad3      	subs	r3, r2, r3
 8015c90:	b2db      	uxtb	r3, r3
 8015c92:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8015c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	da01      	bge.n	8015ca0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3714      	adds	r7, #20
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bc80      	pop	{r7}
 8015caa:	4770      	bx	lr

08015cac <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8015cac:	b480      	push	{r7}
 8015cae:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015cb0:	4b0d      	ldr	r3, [pc, #52]	; (8015ce8 <rand1+0x3c>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	4a0d      	ldr	r2, [pc, #52]	; (8015cec <rand1+0x40>)
 8015cb6:	fb02 f303 	mul.w	r3, r2, r3
 8015cba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8015cbe:	3339      	adds	r3, #57	; 0x39
 8015cc0:	4a09      	ldr	r2, [pc, #36]	; (8015ce8 <rand1+0x3c>)
 8015cc2:	6013      	str	r3, [r2, #0]
 8015cc4:	4b08      	ldr	r3, [pc, #32]	; (8015ce8 <rand1+0x3c>)
 8015cc6:	681a      	ldr	r2, [r3, #0]
 8015cc8:	2303      	movs	r3, #3
 8015cca:	fba3 1302 	umull	r1, r3, r3, r2
 8015cce:	1ad1      	subs	r1, r2, r3
 8015cd0:	0849      	lsrs	r1, r1, #1
 8015cd2:	440b      	add	r3, r1
 8015cd4:	0f99      	lsrs	r1, r3, #30
 8015cd6:	460b      	mov	r3, r1
 8015cd8:	07db      	lsls	r3, r3, #31
 8015cda:	1a5b      	subs	r3, r3, r1
 8015cdc:	1ad1      	subs	r1, r2, r3
 8015cde:	460b      	mov	r3, r1
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bc80      	pop	{r7}
 8015ce6:	4770      	bx	lr
 8015ce8:	2000011c 	.word	0x2000011c
 8015cec:	41c64e6d 	.word	0x41c64e6d

08015cf0 <srand1>:

void srand1( uint32_t seed )
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    next = seed;
 8015cf8:	4a03      	ldr	r2, [pc, #12]	; (8015d08 <srand1+0x18>)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6013      	str	r3, [r2, #0]
}
 8015cfe:	bf00      	nop
 8015d00:	370c      	adds	r7, #12
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bc80      	pop	{r7}
 8015d06:	4770      	bx	lr
 8015d08:	2000011c 	.word	0x2000011c

08015d0c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8015d16:	f7ff ffc9 	bl	8015cac <rand1>
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	6839      	ldr	r1, [r7, #0]
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	1acb      	subs	r3, r1, r3
 8015d22:	3301      	adds	r3, #1
 8015d24:	fb92 f1f3 	sdiv	r1, r2, r3
 8015d28:	fb03 f301 	mul.w	r3, r3, r1
 8015d2c:	1ad2      	subs	r2, r2, r3
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	4413      	add	r3, r2
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3708      	adds	r7, #8
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}

08015d3a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015d3a:	b480      	push	{r7}
 8015d3c:	b085      	sub	sp, #20
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	60f8      	str	r0, [r7, #12]
 8015d42:	60b9      	str	r1, [r7, #8]
 8015d44:	4613      	mov	r3, r2
 8015d46:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8015d48:	e007      	b.n	8015d5a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8015d4a:	68ba      	ldr	r2, [r7, #8]
 8015d4c:	1c53      	adds	r3, r2, #1
 8015d4e:	60bb      	str	r3, [r7, #8]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	1c59      	adds	r1, r3, #1
 8015d54:	60f9      	str	r1, [r7, #12]
 8015d56:	7812      	ldrb	r2, [r2, #0]
 8015d58:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015d5a:	88fb      	ldrh	r3, [r7, #6]
 8015d5c:	1e5a      	subs	r2, r3, #1
 8015d5e:	80fa      	strh	r2, [r7, #6]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d1f2      	bne.n	8015d4a <memcpy1+0x10>
    }
}
 8015d64:	bf00      	nop
 8015d66:	bf00      	nop
 8015d68:	3714      	adds	r7, #20
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bc80      	pop	{r7}
 8015d6e:	4770      	bx	lr

08015d70 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8015d70:	b480      	push	{r7}
 8015d72:	b085      	sub	sp, #20
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	4613      	mov	r3, r2
 8015d7c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8015d7e:	88fb      	ldrh	r3, [r7, #6]
 8015d80:	3b01      	subs	r3, #1
 8015d82:	68fa      	ldr	r2, [r7, #12]
 8015d84:	4413      	add	r3, r2
 8015d86:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8015d88:	e007      	b.n	8015d9a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8015d8a:	68ba      	ldr	r2, [r7, #8]
 8015d8c:	1c53      	adds	r3, r2, #1
 8015d8e:	60bb      	str	r3, [r7, #8]
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	1e59      	subs	r1, r3, #1
 8015d94:	60f9      	str	r1, [r7, #12]
 8015d96:	7812      	ldrb	r2, [r2, #0]
 8015d98:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015d9a:	88fb      	ldrh	r3, [r7, #6]
 8015d9c:	1e5a      	subs	r2, r3, #1
 8015d9e:	80fa      	strh	r2, [r7, #6]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d1f2      	bne.n	8015d8a <memcpyr+0x1a>
    }
}
 8015da4:	bf00      	nop
 8015da6:	bf00      	nop
 8015da8:	3714      	adds	r7, #20
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bc80      	pop	{r7}
 8015dae:	4770      	bx	lr

08015db0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
 8015db8:	460b      	mov	r3, r1
 8015dba:	70fb      	strb	r3, [r7, #3]
 8015dbc:	4613      	mov	r3, r2
 8015dbe:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8015dc0:	e004      	b.n	8015dcc <memset1+0x1c>
    {
        *dst++ = value;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	1c5a      	adds	r2, r3, #1
 8015dc6:	607a      	str	r2, [r7, #4]
 8015dc8:	78fa      	ldrb	r2, [r7, #3]
 8015dca:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8015dcc:	883b      	ldrh	r3, [r7, #0]
 8015dce:	1e5a      	subs	r2, r3, #1
 8015dd0:	803a      	strh	r2, [r7, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1f5      	bne.n	8015dc2 <memset1+0x12>
    }
}
 8015dd6:	bf00      	nop
 8015dd8:	bf00      	nop
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bc80      	pop	{r7}
 8015de0:	4770      	bx	lr
	...

08015de4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8015de4:	b480      	push	{r7}
 8015de6:	b087      	sub	sp, #28
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	460b      	mov	r3, r1
 8015dee:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8015df0:	4b1a      	ldr	r3, [pc, #104]	; (8015e5c <Crc32+0x78>)
 8015df2:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8015df4:	f04f 33ff 	mov.w	r3, #4294967295
 8015df8:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d101      	bne.n	8015e04 <Crc32+0x20>
    {
        return 0;
 8015e00:	2300      	movs	r3, #0
 8015e02:	e026      	b.n	8015e52 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8015e04:	2300      	movs	r3, #0
 8015e06:	827b      	strh	r3, [r7, #18]
 8015e08:	e01d      	b.n	8015e46 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8015e0a:	8a7b      	ldrh	r3, [r7, #18]
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	4413      	add	r3, r2
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	461a      	mov	r2, r3
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	4053      	eors	r3, r2
 8015e18:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	823b      	strh	r3, [r7, #16]
 8015e1e:	e00c      	b.n	8015e3a <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	085a      	lsrs	r2, r3, #1
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	f003 0301 	and.w	r3, r3, #1
 8015e2a:	4259      	negs	r1, r3
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	400b      	ands	r3, r1
 8015e30:	4053      	eors	r3, r2
 8015e32:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8015e34:	8a3b      	ldrh	r3, [r7, #16]
 8015e36:	3301      	adds	r3, #1
 8015e38:	823b      	strh	r3, [r7, #16]
 8015e3a:	8a3b      	ldrh	r3, [r7, #16]
 8015e3c:	2b07      	cmp	r3, #7
 8015e3e:	d9ef      	bls.n	8015e20 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8015e40:	8a7b      	ldrh	r3, [r7, #18]
 8015e42:	3301      	adds	r3, #1
 8015e44:	827b      	strh	r3, [r7, #18]
 8015e46:	8a7a      	ldrh	r2, [r7, #18]
 8015e48:	887b      	ldrh	r3, [r7, #2]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d3dd      	bcc.n	8015e0a <Crc32+0x26>
        }
    }

    return ~crc;
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	43db      	mvns	r3, r3
}
 8015e52:	4618      	mov	r0, r3
 8015e54:	371c      	adds	r7, #28
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bc80      	pop	{r7}
 8015e5a:	4770      	bx	lr
 8015e5c:	edb88320 	.word	0xedb88320

08015e60 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8015e60:	b480      	push	{r7}
 8015e62:	b083      	sub	sp, #12
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	683a      	ldr	r2, [r7, #0]
 8015e6e:	619a      	str	r2, [r3, #24]
}
 8015e70:	bf00      	nop
 8015e72:	370c      	adds	r7, #12
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bc80      	pop	{r7}
 8015e78:	4770      	bx	lr

08015e7a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8015e7a:	b480      	push	{r7}
 8015e7c:	b083      	sub	sp, #12
 8015e7e:	af00      	add	r7, sp, #0
 8015e80:	6078      	str	r0, [r7, #4]
 8015e82:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	683a      	ldr	r2, [r7, #0]
 8015e88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015e8a:	bf00      	nop
 8015e8c:	370c      	adds	r7, #12
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bc80      	pop	{r7}
 8015e92:	4770      	bx	lr

08015e94 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b084      	sub	sp, #16
 8015e98:	af02      	add	r7, sp, #8
 8015e9a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8015e9c:	4a21      	ldr	r2, [pc, #132]	; (8015f24 <RadioInit+0x90>)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8015ea2:	4b21      	ldr	r3, [pc, #132]	; (8015f28 <RadioInit+0x94>)
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8015ea8:	4b1f      	ldr	r3, [pc, #124]	; (8015f28 <RadioInit+0x94>)
 8015eaa:	2200      	movs	r2, #0
 8015eac:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8015eae:	4b1e      	ldr	r3, [pc, #120]	; (8015f28 <RadioInit+0x94>)
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8015eb4:	481d      	ldr	r0, [pc, #116]	; (8015f2c <RadioInit+0x98>)
 8015eb6:	f001 fee3 	bl	8017c80 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8015eba:	2000      	movs	r0, #0
 8015ebc:	f001 f82a 	bl	8016f14 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8015ec0:	f002 f974 	bl	80181ac <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	2000      	movs	r0, #0
 8015ec8:	f002 fcca 	bl	8018860 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8015ecc:	2204      	movs	r2, #4
 8015ece:	2100      	movs	r1, #0
 8015ed0:	2001      	movs	r0, #1
 8015ed2:	f002 faf5 	bl	80184c0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	2200      	movs	r2, #0
 8015eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015ede:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ee2:	f002 fa29 	bl	8018338 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8015ee6:	f000 fea1 	bl	8016c2c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8015eea:	2300      	movs	r3, #0
 8015eec:	9300      	str	r3, [sp, #0]
 8015eee:	4b10      	ldr	r3, [pc, #64]	; (8015f30 <RadioInit+0x9c>)
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8015ef6:	480f      	ldr	r0, [pc, #60]	; (8015f34 <RadioInit+0xa0>)
 8015ef8:	f003 feb2 	bl	8019c60 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8015efc:	2300      	movs	r3, #0
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	4b0d      	ldr	r3, [pc, #52]	; (8015f38 <RadioInit+0xa4>)
 8015f02:	2200      	movs	r2, #0
 8015f04:	f04f 31ff 	mov.w	r1, #4294967295
 8015f08:	480c      	ldr	r0, [pc, #48]	; (8015f3c <RadioInit+0xa8>)
 8015f0a:	f003 fea9 	bl	8019c60 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8015f0e:	4809      	ldr	r0, [pc, #36]	; (8015f34 <RadioInit+0xa0>)
 8015f10:	f003 ff4a 	bl	8019da8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8015f14:	4809      	ldr	r0, [pc, #36]	; (8015f3c <RadioInit+0xa8>)
 8015f16:	f003 ff47 	bl	8019da8 <UTIL_TIMER_Stop>
}
 8015f1a:	bf00      	nop
 8015f1c:	3708      	adds	r7, #8
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
 8015f22:	bf00      	nop
 8015f24:	20000ed8 	.word	0x20000ed8
 8015f28:	200017c4 	.word	0x200017c4
 8015f2c:	0801700d 	.word	0x0801700d
 8015f30:	08016f81 	.word	0x08016f81
 8015f34:	2000181c 	.word	0x2000181c
 8015f38:	08016f95 	.word	0x08016f95
 8015f3c:	20001834 	.word	0x20001834

08015f40 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8015f44:	f001 fede 	bl	8017d04 <SUBGRF_GetOperatingMode>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	2b07      	cmp	r3, #7
 8015f4c:	d00a      	beq.n	8015f64 <RadioGetStatus+0x24>
 8015f4e:	2b07      	cmp	r3, #7
 8015f50:	dc0a      	bgt.n	8015f68 <RadioGetStatus+0x28>
 8015f52:	2b04      	cmp	r3, #4
 8015f54:	d002      	beq.n	8015f5c <RadioGetStatus+0x1c>
 8015f56:	2b05      	cmp	r3, #5
 8015f58:	d002      	beq.n	8015f60 <RadioGetStatus+0x20>
 8015f5a:	e005      	b.n	8015f68 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8015f5c:	2302      	movs	r3, #2
 8015f5e:	e004      	b.n	8015f6a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8015f60:	2301      	movs	r3, #1
 8015f62:	e002      	b.n	8015f6a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8015f64:	2303      	movs	r3, #3
 8015f66:	e000      	b.n	8015f6a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8015f68:	2300      	movs	r3, #0
    }
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	bd80      	pop	{r7, pc}
	...

08015f70 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	4603      	mov	r3, r0
 8015f78:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8015f7a:	4a25      	ldr	r2, [pc, #148]	; (8016010 <RadioSetModem+0xa0>)
 8015f7c:	79fb      	ldrb	r3, [r7, #7]
 8015f7e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8015f80:	79fb      	ldrb	r3, [r7, #7]
 8015f82:	4618      	mov	r0, r3
 8015f84:	f003 f831 	bl	8018fea <RFW_SetRadioModem>
    switch( modem )
 8015f88:	79fb      	ldrb	r3, [r7, #7]
 8015f8a:	3b01      	subs	r3, #1
 8015f8c:	2b03      	cmp	r3, #3
 8015f8e:	d80b      	bhi.n	8015fa8 <RadioSetModem+0x38>
 8015f90:	a201      	add	r2, pc, #4	; (adr r2, 8015f98 <RadioSetModem+0x28>)
 8015f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f96:	bf00      	nop
 8015f98:	08015fb7 	.word	0x08015fb7
 8015f9c:	08015fdd 	.word	0x08015fdd
 8015fa0:	08015feb 	.word	0x08015feb
 8015fa4:	08015ff9 	.word	0x08015ff9
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015fa8:	2000      	movs	r0, #0
 8015faa:	f002 fa63 	bl	8018474 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015fae:	4b18      	ldr	r3, [pc, #96]	; (8016010 <RadioSetModem+0xa0>)
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	735a      	strb	r2, [r3, #13]
        break;
 8015fb4:	e028      	b.n	8016008 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8015fb6:	2001      	movs	r0, #1
 8015fb8:	f002 fa5c 	bl	8018474 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8015fbc:	4b14      	ldr	r3, [pc, #80]	; (8016010 <RadioSetModem+0xa0>)
 8015fbe:	7b5a      	ldrb	r2, [r3, #13]
 8015fc0:	4b13      	ldr	r3, [pc, #76]	; (8016010 <RadioSetModem+0xa0>)
 8015fc2:	7b1b      	ldrb	r3, [r3, #12]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d01e      	beq.n	8016006 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8015fc8:	4b11      	ldr	r3, [pc, #68]	; (8016010 <RadioSetModem+0xa0>)
 8015fca:	7b1a      	ldrb	r2, [r3, #12]
 8015fcc:	4b10      	ldr	r3, [pc, #64]	; (8016010 <RadioSetModem+0xa0>)
 8015fce:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8015fd0:	4b0f      	ldr	r3, [pc, #60]	; (8016010 <RadioSetModem+0xa0>)
 8015fd2:	7b5b      	ldrb	r3, [r3, #13]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f000 ff9d 	bl	8016f14 <RadioSetPublicNetwork>
        }
        break;
 8015fda:	e014      	b.n	8016006 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8015fdc:	2002      	movs	r0, #2
 8015fde:	f002 fa49 	bl	8018474 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015fe2:	4b0b      	ldr	r3, [pc, #44]	; (8016010 <RadioSetModem+0xa0>)
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	735a      	strb	r2, [r3, #13]
        break;
 8015fe8:	e00e      	b.n	8016008 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8015fea:	2002      	movs	r0, #2
 8015fec:	f002 fa42 	bl	8018474 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015ff0:	4b07      	ldr	r3, [pc, #28]	; (8016010 <RadioSetModem+0xa0>)
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	735a      	strb	r2, [r3, #13]
        break;
 8015ff6:	e007      	b.n	8016008 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015ff8:	2000      	movs	r0, #0
 8015ffa:	f002 fa3b 	bl	8018474 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015ffe:	4b04      	ldr	r3, [pc, #16]	; (8016010 <RadioSetModem+0xa0>)
 8016000:	2200      	movs	r2, #0
 8016002:	735a      	strb	r2, [r3, #13]
        break;
 8016004:	e000      	b.n	8016008 <RadioSetModem+0x98>
        break;
 8016006:	bf00      	nop
    }
}
 8016008:	bf00      	nop
 801600a:	3708      	adds	r7, #8
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	200017c4 	.word	0x200017c4

08016014 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f002 f9e7 	bl	80183f0 <SUBGRF_SetRfFrequency>
}
 8016022:	bf00      	nop
 8016024:	3708      	adds	r7, #8
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}

0801602a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801602a:	b580      	push	{r7, lr}
 801602c:	b090      	sub	sp, #64	; 0x40
 801602e:	af0a      	add	r7, sp, #40	; 0x28
 8016030:	60f8      	str	r0, [r7, #12]
 8016032:	60b9      	str	r1, [r7, #8]
 8016034:	603b      	str	r3, [r7, #0]
 8016036:	4613      	mov	r3, r2
 8016038:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801603a:	2301      	movs	r3, #1
 801603c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801603e:	2300      	movs	r3, #0
 8016040:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016042:	2300      	movs	r3, #0
 8016044:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016046:	f000 fe04 	bl	8016c52 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801604a:	2000      	movs	r0, #0
 801604c:	f7ff ff90 	bl	8015f70 <RadioSetModem>

    RadioSetChannel( freq );
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f7ff ffdf 	bl	8016014 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016056:	2301      	movs	r3, #1
 8016058:	9309      	str	r3, [sp, #36]	; 0x24
 801605a:	2300      	movs	r3, #0
 801605c:	9308      	str	r3, [sp, #32]
 801605e:	2300      	movs	r3, #0
 8016060:	9307      	str	r3, [sp, #28]
 8016062:	2300      	movs	r3, #0
 8016064:	9306      	str	r3, [sp, #24]
 8016066:	2300      	movs	r3, #0
 8016068:	9305      	str	r3, [sp, #20]
 801606a:	2300      	movs	r3, #0
 801606c:	9304      	str	r3, [sp, #16]
 801606e:	2300      	movs	r3, #0
 8016070:	9303      	str	r3, [sp, #12]
 8016072:	2300      	movs	r3, #0
 8016074:	9302      	str	r3, [sp, #8]
 8016076:	2303      	movs	r3, #3
 8016078:	9301      	str	r3, [sp, #4]
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	2300      	movs	r3, #0
 8016080:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016084:	68b9      	ldr	r1, [r7, #8]
 8016086:	2000      	movs	r0, #0
 8016088:	f000 f840 	bl	801610c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801608c:	2000      	movs	r0, #0
 801608e:	f000 fde7 	bl	8016c60 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016092:	f000 ff6d 	bl	8016f70 <RadioGetWakeupTime>
 8016096:	4603      	mov	r3, r0
 8016098:	4618      	mov	r0, r3
 801609a:	f7eb fdbc 	bl	8001c16 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801609e:	f003 ff9d 	bl	8019fdc <UTIL_TIMER_GetCurrentTime>
 80160a2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80160a4:	e00d      	b.n	80160c2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80160a6:	2000      	movs	r0, #0
 80160a8:	f000 feb2 	bl	8016e10 <RadioRssi>
 80160ac:	4603      	mov	r3, r0
 80160ae:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80160b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80160b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	dd02      	ble.n	80160c2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80160bc:	2300      	movs	r3, #0
 80160be:	75fb      	strb	r3, [r7, #23]
            break;
 80160c0:	e006      	b.n	80160d0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80160c2:	6938      	ldr	r0, [r7, #16]
 80160c4:	f003 ff9c 	bl	801a000 <UTIL_TIMER_GetElapsedTime>
 80160c8:	4602      	mov	r2, r0
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d8ea      	bhi.n	80160a6 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80160d0:	f000 fdbf 	bl	8016c52 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80160d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3718      	adds	r7, #24
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80160e4:	2300      	movs	r3, #0
 80160e6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80160e8:	2001      	movs	r0, #1
 80160ea:	f7ff ff41 	bl	8015f70 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80160ee:	2300      	movs	r3, #0
 80160f0:	2200      	movs	r2, #0
 80160f2:	2100      	movs	r1, #0
 80160f4:	2000      	movs	r0, #0
 80160f6:	f002 f91f 	bl	8018338 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80160fa:	f001 fed4 	bl	8017ea6 <SUBGRF_GetRandom>
 80160fe:	6078      	str	r0, [r7, #4]

    return rnd;
 8016100:	687b      	ldr	r3, [r7, #4]
}
 8016102:	4618      	mov	r0, r3
 8016104:	3708      	adds	r7, #8
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
	...

0801610c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b08a      	sub	sp, #40	; 0x28
 8016110:	af00      	add	r7, sp, #0
 8016112:	60b9      	str	r1, [r7, #8]
 8016114:	607a      	str	r2, [r7, #4]
 8016116:	461a      	mov	r2, r3
 8016118:	4603      	mov	r3, r0
 801611a:	73fb      	strb	r3, [r7, #15]
 801611c:	4613      	mov	r3, r2
 801611e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016120:	4abd      	ldr	r2, [pc, #756]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016122:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016126:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016128:	f002 ff1d 	bl	8018f66 <RFW_DeInit>
    if( rxContinuous == true )
 801612c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016130:	2b00      	cmp	r3, #0
 8016132:	d001      	beq.n	8016138 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016134:	2300      	movs	r3, #0
 8016136:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016138:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801613c:	2b00      	cmp	r3, #0
 801613e:	d004      	beq.n	801614a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016140:	4ab6      	ldr	r2, [pc, #728]	; (801641c <RadioSetRxConfig+0x310>)
 8016142:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016146:	7013      	strb	r3, [r2, #0]
 8016148:	e002      	b.n	8016150 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801614a:	4bb4      	ldr	r3, [pc, #720]	; (801641c <RadioSetRxConfig+0x310>)
 801614c:	22ff      	movs	r2, #255	; 0xff
 801614e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016150:	7bfb      	ldrb	r3, [r7, #15]
 8016152:	2b04      	cmp	r3, #4
 8016154:	d009      	beq.n	801616a <RadioSetRxConfig+0x5e>
 8016156:	2b04      	cmp	r3, #4
 8016158:	f300 81da 	bgt.w	8016510 <RadioSetRxConfig+0x404>
 801615c:	2b00      	cmp	r3, #0
 801615e:	f000 80bf 	beq.w	80162e0 <RadioSetRxConfig+0x1d4>
 8016162:	2b01      	cmp	r3, #1
 8016164:	f000 812c 	beq.w	80163c0 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016168:	e1d2      	b.n	8016510 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801616a:	2001      	movs	r0, #1
 801616c:	f001 ffe0 	bl	8018130 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016170:	4ba9      	ldr	r3, [pc, #676]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016172:	2200      	movs	r2, #0
 8016174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016178:	4aa7      	ldr	r2, [pc, #668]	; (8016418 <RadioSetRxConfig+0x30c>)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801617e:	4ba6      	ldr	r3, [pc, #664]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016180:	2209      	movs	r2, #9
 8016182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016186:	4ba4      	ldr	r3, [pc, #656]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016188:	f44f 7248 	mov.w	r2, #800	; 0x320
 801618c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801618e:	68b8      	ldr	r0, [r7, #8]
 8016190:	f002 fe1a 	bl	8018dc8 <SUBGRF_GetFskBandwidthRegValue>
 8016194:	4603      	mov	r3, r0
 8016196:	461a      	mov	r2, r3
 8016198:	4b9f      	ldr	r3, [pc, #636]	; (8016418 <RadioSetRxConfig+0x30c>)
 801619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801619e:	4b9e      	ldr	r3, [pc, #632]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161a0:	2200      	movs	r2, #0
 80161a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80161a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80161a6:	00db      	lsls	r3, r3, #3
 80161a8:	b29a      	uxth	r2, r3
 80161aa:	4b9b      	ldr	r3, [pc, #620]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161ac:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80161ae:	4b9a      	ldr	r3, [pc, #616]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161b0:	2200      	movs	r2, #0
 80161b2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80161b4:	4b98      	ldr	r3, [pc, #608]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161b6:	2210      	movs	r2, #16
 80161b8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80161ba:	4b97      	ldr	r3, [pc, #604]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161bc:	2200      	movs	r2, #0
 80161be:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80161c0:	4b95      	ldr	r3, [pc, #596]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161c2:	2200      	movs	r2, #0
 80161c4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80161c6:	4b95      	ldr	r3, [pc, #596]	; (801641c <RadioSetRxConfig+0x310>)
 80161c8:	781a      	ldrb	r2, [r3, #0]
 80161ca:	4b93      	ldr	r3, [pc, #588]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161cc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80161ce:	4b92      	ldr	r3, [pc, #584]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161d0:	2201      	movs	r2, #1
 80161d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80161d4:	4b90      	ldr	r3, [pc, #576]	; (8016418 <RadioSetRxConfig+0x30c>)
 80161d6:	2200      	movs	r2, #0
 80161d8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80161da:	2004      	movs	r0, #4
 80161dc:	f7ff fec8 	bl	8015f70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80161e0:	488f      	ldr	r0, [pc, #572]	; (8016420 <RadioSetRxConfig+0x314>)
 80161e2:	f002 f9d3 	bl	801858c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80161e6:	488f      	ldr	r0, [pc, #572]	; (8016424 <RadioSetRxConfig+0x318>)
 80161e8:	f002 fa9c 	bl	8018724 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80161ec:	4a8e      	ldr	r2, [pc, #568]	; (8016428 <RadioSetRxConfig+0x31c>)
 80161ee:	f107 031c 	add.w	r3, r7, #28
 80161f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80161f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80161fa:	f107 031c 	add.w	r3, r7, #28
 80161fe:	4618      	mov	r0, r3
 8016200:	f001 fdcf 	bl	8017da2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016204:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016208:	f001 fe1a 	bl	8017e40 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 801620c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016210:	f000 fe1d 	bl	8016e4e <RadioRead>
 8016214:	4603      	mov	r3, r0
 8016216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801621a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801621e:	f023 0310 	bic.w	r3, r3, #16
 8016222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801622a:	4619      	mov	r1, r3
 801622c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016230:	f000 fdfb 	bl	8016e2a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016234:	2104      	movs	r1, #4
 8016236:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801623a:	f000 fdf6 	bl	8016e2a <RadioWrite>
            modReg= RadioRead(0x89b);
 801623e:	f640 009b 	movw	r0, #2203	; 0x89b
 8016242:	f000 fe04 	bl	8016e4e <RadioRead>
 8016246:	4603      	mov	r3, r0
 8016248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016250:	f023 031c 	bic.w	r3, r3, #28
 8016254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801625c:	f043 0308 	orr.w	r3, r3, #8
 8016260:	b2db      	uxtb	r3, r3
 8016262:	4619      	mov	r1, r3
 8016264:	f640 009b 	movw	r0, #2203	; 0x89b
 8016268:	f000 fddf 	bl	8016e2a <RadioWrite>
            modReg= RadioRead(0x6d1);
 801626c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016270:	f000 fded 	bl	8016e4e <RadioRead>
 8016274:	4603      	mov	r3, r0
 8016276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801627a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801627e:	f023 0318 	bic.w	r3, r3, #24
 8016282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801628a:	f043 0318 	orr.w	r3, r3, #24
 801628e:	b2db      	uxtb	r3, r3
 8016290:	4619      	mov	r1, r3
 8016292:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016296:	f000 fdc8 	bl	8016e2a <RadioWrite>
            modReg= RadioRead(0x6ac);
 801629a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801629e:	f000 fdd6 	bl	8016e4e <RadioRead>
 80162a2:	4603      	mov	r3, r0
 80162a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80162a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80162b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80162b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162b8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	4619      	mov	r1, r3
 80162c0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80162c4:	f000 fdb1 	bl	8016e2a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80162c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80162ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80162ce:	fb02 f303 	mul.w	r3, r2, r3
 80162d2:	461a      	mov	r2, r3
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80162da:	4a4f      	ldr	r2, [pc, #316]	; (8016418 <RadioSetRxConfig+0x30c>)
 80162dc:	6093      	str	r3, [r2, #8]
            break;
 80162de:	e118      	b.n	8016512 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80162e0:	2000      	movs	r0, #0
 80162e2:	f001 ff25 	bl	8018130 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80162e6:	4b4c      	ldr	r3, [pc, #304]	; (8016418 <RadioSetRxConfig+0x30c>)
 80162e8:	2200      	movs	r2, #0
 80162ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80162ee:	4a4a      	ldr	r2, [pc, #296]	; (8016418 <RadioSetRxConfig+0x30c>)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80162f4:	4b48      	ldr	r3, [pc, #288]	; (8016418 <RadioSetRxConfig+0x30c>)
 80162f6:	220b      	movs	r2, #11
 80162f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80162fc:	68b8      	ldr	r0, [r7, #8]
 80162fe:	f002 fd63 	bl	8018dc8 <SUBGRF_GetFskBandwidthRegValue>
 8016302:	4603      	mov	r3, r0
 8016304:	461a      	mov	r2, r3
 8016306:	4b44      	ldr	r3, [pc, #272]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801630c:	4b42      	ldr	r3, [pc, #264]	; (8016418 <RadioSetRxConfig+0x30c>)
 801630e:	2200      	movs	r2, #0
 8016310:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016312:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016314:	00db      	lsls	r3, r3, #3
 8016316:	b29a      	uxth	r2, r3
 8016318:	4b3f      	ldr	r3, [pc, #252]	; (8016418 <RadioSetRxConfig+0x30c>)
 801631a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801631c:	4b3e      	ldr	r3, [pc, #248]	; (8016418 <RadioSetRxConfig+0x30c>)
 801631e:	2204      	movs	r2, #4
 8016320:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016322:	4b3d      	ldr	r3, [pc, #244]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016324:	2218      	movs	r2, #24
 8016326:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016328:	4b3b      	ldr	r3, [pc, #236]	; (8016418 <RadioSetRxConfig+0x30c>)
 801632a:	2200      	movs	r2, #0
 801632c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801632e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016332:	f083 0301 	eor.w	r3, r3, #1
 8016336:	b2db      	uxtb	r3, r3
 8016338:	461a      	mov	r2, r3
 801633a:	4b37      	ldr	r3, [pc, #220]	; (8016418 <RadioSetRxConfig+0x30c>)
 801633c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801633e:	4b37      	ldr	r3, [pc, #220]	; (801641c <RadioSetRxConfig+0x310>)
 8016340:	781a      	ldrb	r2, [r3, #0]
 8016342:	4b35      	ldr	r3, [pc, #212]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016344:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016346:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801634a:	2b00      	cmp	r3, #0
 801634c:	d003      	beq.n	8016356 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801634e:	4b32      	ldr	r3, [pc, #200]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016350:	22f2      	movs	r2, #242	; 0xf2
 8016352:	75da      	strb	r2, [r3, #23]
 8016354:	e002      	b.n	801635c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016356:	4b30      	ldr	r3, [pc, #192]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016358:	2201      	movs	r2, #1
 801635a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801635c:	4b2e      	ldr	r3, [pc, #184]	; (8016418 <RadioSetRxConfig+0x30c>)
 801635e:	2201      	movs	r2, #1
 8016360:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016362:	f000 fc76 	bl	8016c52 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016366:	4b2c      	ldr	r3, [pc, #176]	; (8016418 <RadioSetRxConfig+0x30c>)
 8016368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801636c:	2b00      	cmp	r3, #0
 801636e:	bf14      	ite	ne
 8016370:	2301      	movne	r3, #1
 8016372:	2300      	moveq	r3, #0
 8016374:	b2db      	uxtb	r3, r3
 8016376:	4618      	mov	r0, r3
 8016378:	f7ff fdfa 	bl	8015f70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801637c:	4828      	ldr	r0, [pc, #160]	; (8016420 <RadioSetRxConfig+0x314>)
 801637e:	f002 f905 	bl	801858c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016382:	4828      	ldr	r0, [pc, #160]	; (8016424 <RadioSetRxConfig+0x318>)
 8016384:	f002 f9ce 	bl	8018724 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016388:	4a28      	ldr	r2, [pc, #160]	; (801642c <RadioSetRxConfig+0x320>)
 801638a:	f107 0314 	add.w	r3, r7, #20
 801638e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016392:	e883 0003 	stmia.w	r3, {r0, r1}
 8016396:	f107 0314 	add.w	r3, r7, #20
 801639a:	4618      	mov	r0, r3
 801639c:	f001 fd01 	bl	8017da2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80163a0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80163a4:	f001 fd4c 	bl	8017e40 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80163a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80163aa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80163ae:	fb02 f303 	mul.w	r3, r2, r3
 80163b2:	461a      	mov	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80163ba:	4a17      	ldr	r2, [pc, #92]	; (8016418 <RadioSetRxConfig+0x30c>)
 80163bc:	6093      	str	r3, [r2, #8]
            break;
 80163be:	e0a8      	b.n	8016512 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80163c0:	2000      	movs	r0, #0
 80163c2:	f001 feb5 	bl	8018130 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80163c6:	4b14      	ldr	r3, [pc, #80]	; (8016418 <RadioSetRxConfig+0x30c>)
 80163c8:	2201      	movs	r2, #1
 80163ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	b2da      	uxtb	r2, r3
 80163d2:	4b11      	ldr	r3, [pc, #68]	; (8016418 <RadioSetRxConfig+0x30c>)
 80163d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80163d8:	4a15      	ldr	r2, [pc, #84]	; (8016430 <RadioSetRxConfig+0x324>)
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	4413      	add	r3, r2
 80163de:	781a      	ldrb	r2, [r3, #0]
 80163e0:	4b0d      	ldr	r3, [pc, #52]	; (8016418 <RadioSetRxConfig+0x30c>)
 80163e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80163e6:	4a0c      	ldr	r2, [pc, #48]	; (8016418 <RadioSetRxConfig+0x30c>)
 80163e8:	7bbb      	ldrb	r3, [r7, #14]
 80163ea:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d105      	bne.n	8016400 <RadioSetRxConfig+0x2f4>
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2b0b      	cmp	r3, #11
 80163f8:	d008      	beq.n	801640c <RadioSetRxConfig+0x300>
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	2b0c      	cmp	r3, #12
 80163fe:	d005      	beq.n	801640c <RadioSetRxConfig+0x300>
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	2b01      	cmp	r3, #1
 8016404:	d116      	bne.n	8016434 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2b0c      	cmp	r3, #12
 801640a:	d113      	bne.n	8016434 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801640c:	4b02      	ldr	r3, [pc, #8]	; (8016418 <RadioSetRxConfig+0x30c>)
 801640e:	2201      	movs	r2, #1
 8016410:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016414:	e012      	b.n	801643c <RadioSetRxConfig+0x330>
 8016416:	bf00      	nop
 8016418:	200017c4 	.word	0x200017c4
 801641c:	20000120 	.word	0x20000120
 8016420:	200017fc 	.word	0x200017fc
 8016424:	200017d2 	.word	0x200017d2
 8016428:	0801afa8 	.word	0x0801afa8
 801642c:	0801afb0 	.word	0x0801afb0
 8016430:	0801b5ac 	.word	0x0801b5ac
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016434:	4b39      	ldr	r3, [pc, #228]	; (801651c <RadioSetRxConfig+0x410>)
 8016436:	2200      	movs	r2, #0
 8016438:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801643c:	4b37      	ldr	r3, [pc, #220]	; (801651c <RadioSetRxConfig+0x410>)
 801643e:	2201      	movs	r2, #1
 8016440:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016442:	4b36      	ldr	r3, [pc, #216]	; (801651c <RadioSetRxConfig+0x410>)
 8016444:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016448:	2b05      	cmp	r3, #5
 801644a:	d004      	beq.n	8016456 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801644c:	4b33      	ldr	r3, [pc, #204]	; (801651c <RadioSetRxConfig+0x410>)
 801644e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016452:	2b06      	cmp	r3, #6
 8016454:	d10a      	bne.n	801646c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016456:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016458:	2b0b      	cmp	r3, #11
 801645a:	d803      	bhi.n	8016464 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801645c:	4b2f      	ldr	r3, [pc, #188]	; (801651c <RadioSetRxConfig+0x410>)
 801645e:	220c      	movs	r2, #12
 8016460:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016462:	e006      	b.n	8016472 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016464:	4a2d      	ldr	r2, [pc, #180]	; (801651c <RadioSetRxConfig+0x410>)
 8016466:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016468:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801646a:	e002      	b.n	8016472 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801646c:	4a2b      	ldr	r2, [pc, #172]	; (801651c <RadioSetRxConfig+0x410>)
 801646e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016470:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016472:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016476:	4b29      	ldr	r3, [pc, #164]	; (801651c <RadioSetRxConfig+0x410>)
 8016478:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801647a:	4b29      	ldr	r3, [pc, #164]	; (8016520 <RadioSetRxConfig+0x414>)
 801647c:	781a      	ldrb	r2, [r3, #0]
 801647e:	4b27      	ldr	r3, [pc, #156]	; (801651c <RadioSetRxConfig+0x410>)
 8016480:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016482:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016486:	4b25      	ldr	r3, [pc, #148]	; (801651c <RadioSetRxConfig+0x410>)
 8016488:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801648c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016490:	4b22      	ldr	r3, [pc, #136]	; (801651c <RadioSetRxConfig+0x410>)
 8016492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016496:	f000 fbdc 	bl	8016c52 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801649a:	4b20      	ldr	r3, [pc, #128]	; (801651c <RadioSetRxConfig+0x410>)
 801649c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	bf14      	ite	ne
 80164a4:	2301      	movne	r3, #1
 80164a6:	2300      	moveq	r3, #0
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7ff fd60 	bl	8015f70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80164b0:	481c      	ldr	r0, [pc, #112]	; (8016524 <RadioSetRxConfig+0x418>)
 80164b2:	f002 f86b 	bl	801858c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80164b6:	481c      	ldr	r0, [pc, #112]	; (8016528 <RadioSetRxConfig+0x41c>)
 80164b8:	f002 f934 	bl	8018724 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80164bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80164be:	b2db      	uxtb	r3, r3
 80164c0:	4618      	mov	r0, r3
 80164c2:	f001 fe44 	bl	801814e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80164c6:	4b15      	ldr	r3, [pc, #84]	; (801651c <RadioSetRxConfig+0x410>)
 80164c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	d10d      	bne.n	80164ec <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80164d0:	f240 7036 	movw	r0, #1846	; 0x736
 80164d4:	f002 fa82 	bl	80189dc <SUBGRF_ReadRegister>
 80164d8:	4603      	mov	r3, r0
 80164da:	f023 0304 	bic.w	r3, r3, #4
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	4619      	mov	r1, r3
 80164e2:	f240 7036 	movw	r0, #1846	; 0x736
 80164e6:	f002 fa65 	bl	80189b4 <SUBGRF_WriteRegister>
 80164ea:	e00c      	b.n	8016506 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80164ec:	f240 7036 	movw	r0, #1846	; 0x736
 80164f0:	f002 fa74 	bl	80189dc <SUBGRF_ReadRegister>
 80164f4:	4603      	mov	r3, r0
 80164f6:	f043 0304 	orr.w	r3, r3, #4
 80164fa:	b2db      	uxtb	r3, r3
 80164fc:	4619      	mov	r1, r3
 80164fe:	f240 7036 	movw	r0, #1846	; 0x736
 8016502:	f002 fa57 	bl	80189b4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016506:	4b05      	ldr	r3, [pc, #20]	; (801651c <RadioSetRxConfig+0x410>)
 8016508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801650c:	609a      	str	r2, [r3, #8]
            break;
 801650e:	e000      	b.n	8016512 <RadioSetRxConfig+0x406>
            break;
 8016510:	bf00      	nop
    }
}
 8016512:	bf00      	nop
 8016514:	3728      	adds	r7, #40	; 0x28
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	200017c4 	.word	0x200017c4
 8016520:	20000120 	.word	0x20000120
 8016524:	200017fc 	.word	0x200017fc
 8016528:	200017d2 	.word	0x200017d2

0801652c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b086      	sub	sp, #24
 8016530:	af00      	add	r7, sp, #0
 8016532:	60ba      	str	r2, [r7, #8]
 8016534:	607b      	str	r3, [r7, #4]
 8016536:	4603      	mov	r3, r0
 8016538:	73fb      	strb	r3, [r7, #15]
 801653a:	460b      	mov	r3, r1
 801653c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801653e:	f002 fd12 	bl	8018f66 <RFW_DeInit>
    switch( modem )
 8016542:	7bfb      	ldrb	r3, [r7, #15]
 8016544:	2b03      	cmp	r3, #3
 8016546:	f000 80d7 	beq.w	80166f8 <RadioSetTxConfig+0x1cc>
 801654a:	2b03      	cmp	r3, #3
 801654c:	f300 80e6 	bgt.w	801671c <RadioSetTxConfig+0x1f0>
 8016550:	2b00      	cmp	r3, #0
 8016552:	d002      	beq.n	801655a <RadioSetTxConfig+0x2e>
 8016554:	2b01      	cmp	r3, #1
 8016556:	d061      	beq.n	801661c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016558:	e0e0      	b.n	801671c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801655a:	4b7c      	ldr	r3, [pc, #496]	; (801674c <RadioSetTxConfig+0x220>)
 801655c:	2200      	movs	r2, #0
 801655e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016562:	4a7a      	ldr	r2, [pc, #488]	; (801674c <RadioSetTxConfig+0x220>)
 8016564:	6a3b      	ldr	r3, [r7, #32]
 8016566:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016568:	4b78      	ldr	r3, [pc, #480]	; (801674c <RadioSetTxConfig+0x220>)
 801656a:	220b      	movs	r2, #11
 801656c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f002 fc29 	bl	8018dc8 <SUBGRF_GetFskBandwidthRegValue>
 8016576:	4603      	mov	r3, r0
 8016578:	461a      	mov	r2, r3
 801657a:	4b74      	ldr	r3, [pc, #464]	; (801674c <RadioSetTxConfig+0x220>)
 801657c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016580:	4a72      	ldr	r2, [pc, #456]	; (801674c <RadioSetTxConfig+0x220>)
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016586:	4b71      	ldr	r3, [pc, #452]	; (801674c <RadioSetTxConfig+0x220>)
 8016588:	2200      	movs	r2, #0
 801658a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801658c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801658e:	00db      	lsls	r3, r3, #3
 8016590:	b29a      	uxth	r2, r3
 8016592:	4b6e      	ldr	r3, [pc, #440]	; (801674c <RadioSetTxConfig+0x220>)
 8016594:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016596:	4b6d      	ldr	r3, [pc, #436]	; (801674c <RadioSetTxConfig+0x220>)
 8016598:	2204      	movs	r2, #4
 801659a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801659c:	4b6b      	ldr	r3, [pc, #428]	; (801674c <RadioSetTxConfig+0x220>)
 801659e:	2218      	movs	r2, #24
 80165a0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80165a2:	4b6a      	ldr	r3, [pc, #424]	; (801674c <RadioSetTxConfig+0x220>)
 80165a4:	2200      	movs	r2, #0
 80165a6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80165a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80165ac:	f083 0301 	eor.w	r3, r3, #1
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	461a      	mov	r2, r3
 80165b4:	4b65      	ldr	r3, [pc, #404]	; (801674c <RadioSetTxConfig+0x220>)
 80165b6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80165b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d003      	beq.n	80165c8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80165c0:	4b62      	ldr	r3, [pc, #392]	; (801674c <RadioSetTxConfig+0x220>)
 80165c2:	22f2      	movs	r2, #242	; 0xf2
 80165c4:	75da      	strb	r2, [r3, #23]
 80165c6:	e002      	b.n	80165ce <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80165c8:	4b60      	ldr	r3, [pc, #384]	; (801674c <RadioSetTxConfig+0x220>)
 80165ca:	2201      	movs	r2, #1
 80165cc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80165ce:	4b5f      	ldr	r3, [pc, #380]	; (801674c <RadioSetTxConfig+0x220>)
 80165d0:	2201      	movs	r2, #1
 80165d2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80165d4:	f000 fb3d 	bl	8016c52 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80165d8:	4b5c      	ldr	r3, [pc, #368]	; (801674c <RadioSetTxConfig+0x220>)
 80165da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80165de:	2b00      	cmp	r3, #0
 80165e0:	bf14      	ite	ne
 80165e2:	2301      	movne	r3, #1
 80165e4:	2300      	moveq	r3, #0
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7ff fcc1 	bl	8015f70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80165ee:	4858      	ldr	r0, [pc, #352]	; (8016750 <RadioSetTxConfig+0x224>)
 80165f0:	f001 ffcc 	bl	801858c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80165f4:	4857      	ldr	r0, [pc, #348]	; (8016754 <RadioSetTxConfig+0x228>)
 80165f6:	f002 f895 	bl	8018724 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80165fa:	4a57      	ldr	r2, [pc, #348]	; (8016758 <RadioSetTxConfig+0x22c>)
 80165fc:	f107 0310 	add.w	r3, r7, #16
 8016600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016604:	e883 0003 	stmia.w	r3, {r0, r1}
 8016608:	f107 0310 	add.w	r3, r7, #16
 801660c:	4618      	mov	r0, r3
 801660e:	f001 fbc8 	bl	8017da2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016612:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016616:	f001 fc13 	bl	8017e40 <SUBGRF_SetWhiteningSeed>
            break;
 801661a:	e080      	b.n	801671e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801661c:	4b4b      	ldr	r3, [pc, #300]	; (801674c <RadioSetTxConfig+0x220>)
 801661e:	2201      	movs	r2, #1
 8016620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016624:	6a3b      	ldr	r3, [r7, #32]
 8016626:	b2da      	uxtb	r2, r3
 8016628:	4b48      	ldr	r3, [pc, #288]	; (801674c <RadioSetTxConfig+0x220>)
 801662a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801662e:	4a4b      	ldr	r2, [pc, #300]	; (801675c <RadioSetTxConfig+0x230>)
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	4413      	add	r3, r2
 8016634:	781a      	ldrb	r2, [r3, #0]
 8016636:	4b45      	ldr	r3, [pc, #276]	; (801674c <RadioSetTxConfig+0x220>)
 8016638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801663c:	4a43      	ldr	r2, [pc, #268]	; (801674c <RadioSetTxConfig+0x220>)
 801663e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016642:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d105      	bne.n	8016658 <RadioSetTxConfig+0x12c>
 801664c:	6a3b      	ldr	r3, [r7, #32]
 801664e:	2b0b      	cmp	r3, #11
 8016650:	d008      	beq.n	8016664 <RadioSetTxConfig+0x138>
 8016652:	6a3b      	ldr	r3, [r7, #32]
 8016654:	2b0c      	cmp	r3, #12
 8016656:	d005      	beq.n	8016664 <RadioSetTxConfig+0x138>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b01      	cmp	r3, #1
 801665c:	d107      	bne.n	801666e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801665e:	6a3b      	ldr	r3, [r7, #32]
 8016660:	2b0c      	cmp	r3, #12
 8016662:	d104      	bne.n	801666e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016664:	4b39      	ldr	r3, [pc, #228]	; (801674c <RadioSetTxConfig+0x220>)
 8016666:	2201      	movs	r2, #1
 8016668:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801666c:	e003      	b.n	8016676 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801666e:	4b37      	ldr	r3, [pc, #220]	; (801674c <RadioSetTxConfig+0x220>)
 8016670:	2200      	movs	r2, #0
 8016672:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016676:	4b35      	ldr	r3, [pc, #212]	; (801674c <RadioSetTxConfig+0x220>)
 8016678:	2201      	movs	r2, #1
 801667a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801667c:	4b33      	ldr	r3, [pc, #204]	; (801674c <RadioSetTxConfig+0x220>)
 801667e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016682:	2b05      	cmp	r3, #5
 8016684:	d004      	beq.n	8016690 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016686:	4b31      	ldr	r3, [pc, #196]	; (801674c <RadioSetTxConfig+0x220>)
 8016688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801668c:	2b06      	cmp	r3, #6
 801668e:	d10a      	bne.n	80166a6 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016692:	2b0b      	cmp	r3, #11
 8016694:	d803      	bhi.n	801669e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016696:	4b2d      	ldr	r3, [pc, #180]	; (801674c <RadioSetTxConfig+0x220>)
 8016698:	220c      	movs	r2, #12
 801669a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801669c:	e006      	b.n	80166ac <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801669e:	4a2b      	ldr	r2, [pc, #172]	; (801674c <RadioSetTxConfig+0x220>)
 80166a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80166a2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80166a4:	e002      	b.n	80166ac <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80166a6:	4a29      	ldr	r2, [pc, #164]	; (801674c <RadioSetTxConfig+0x220>)
 80166a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80166aa:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80166ac:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80166b0:	4b26      	ldr	r3, [pc, #152]	; (801674c <RadioSetTxConfig+0x220>)
 80166b2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80166b4:	4b2a      	ldr	r3, [pc, #168]	; (8016760 <RadioSetTxConfig+0x234>)
 80166b6:	781a      	ldrb	r2, [r3, #0]
 80166b8:	4b24      	ldr	r3, [pc, #144]	; (801674c <RadioSetTxConfig+0x220>)
 80166ba:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80166bc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80166c0:	4b22      	ldr	r3, [pc, #136]	; (801674c <RadioSetTxConfig+0x220>)
 80166c2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80166c6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80166ca:	4b20      	ldr	r3, [pc, #128]	; (801674c <RadioSetTxConfig+0x220>)
 80166cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80166d0:	f000 fabf 	bl	8016c52 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80166d4:	4b1d      	ldr	r3, [pc, #116]	; (801674c <RadioSetTxConfig+0x220>)
 80166d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80166da:	2b00      	cmp	r3, #0
 80166dc:	bf14      	ite	ne
 80166de:	2301      	movne	r3, #1
 80166e0:	2300      	moveq	r3, #0
 80166e2:	b2db      	uxtb	r3, r3
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff fc43 	bl	8015f70 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80166ea:	4819      	ldr	r0, [pc, #100]	; (8016750 <RadioSetTxConfig+0x224>)
 80166ec:	f001 ff4e 	bl	801858c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80166f0:	4818      	ldr	r0, [pc, #96]	; (8016754 <RadioSetTxConfig+0x228>)
 80166f2:	f002 f817 	bl	8018724 <SUBGRF_SetPacketParams>
            break;
 80166f6:	e012      	b.n	801671e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80166f8:	2003      	movs	r0, #3
 80166fa:	f7ff fc39 	bl	8015f70 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80166fe:	4b13      	ldr	r3, [pc, #76]	; (801674c <RadioSetTxConfig+0x220>)
 8016700:	2202      	movs	r2, #2
 8016702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016706:	4a11      	ldr	r2, [pc, #68]	; (801674c <RadioSetTxConfig+0x220>)
 8016708:	6a3b      	ldr	r3, [r7, #32]
 801670a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801670c:	4b0f      	ldr	r3, [pc, #60]	; (801674c <RadioSetTxConfig+0x220>)
 801670e:	2216      	movs	r2, #22
 8016710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016714:	480e      	ldr	r0, [pc, #56]	; (8016750 <RadioSetTxConfig+0x224>)
 8016716:	f001 ff39 	bl	801858c <SUBGRF_SetModulationParams>
            break;
 801671a:	e000      	b.n	801671e <RadioSetTxConfig+0x1f2>
            break;
 801671c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801671e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016722:	4618      	mov	r0, r3
 8016724:	f002 fa62 	bl	8018bec <SUBGRF_SetRfTxPower>
 8016728:	4603      	mov	r3, r0
 801672a:	461a      	mov	r2, r3
 801672c:	4b07      	ldr	r3, [pc, #28]	; (801674c <RadioSetTxConfig+0x220>)
 801672e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016732:	4b06      	ldr	r3, [pc, #24]	; (801674c <RadioSetTxConfig+0x220>)
 8016734:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016738:	4618      	mov	r0, r3
 801673a:	f002 fc28 	bl	8018f8e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801673e:	4a03      	ldr	r2, [pc, #12]	; (801674c <RadioSetTxConfig+0x220>)
 8016740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016742:	6053      	str	r3, [r2, #4]
}
 8016744:	bf00      	nop
 8016746:	3718      	adds	r7, #24
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	200017c4 	.word	0x200017c4
 8016750:	200017fc 	.word	0x200017fc
 8016754:	200017d2 	.word	0x200017d2
 8016758:	0801afb0 	.word	0x0801afb0
 801675c:	0801b5ac 	.word	0x0801b5ac
 8016760:	20000120 	.word	0x20000120

08016764 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016764:	b480      	push	{r7}
 8016766:	b083      	sub	sp, #12
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
    return true;
 801676c:	2301      	movs	r3, #1
}
 801676e:	4618      	mov	r0, r3
 8016770:	370c      	adds	r7, #12
 8016772:	46bd      	mov	sp, r7
 8016774:	bc80      	pop	{r7}
 8016776:	4770      	bx	lr

08016778 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	4603      	mov	r3, r0
 8016780:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016786:	79fb      	ldrb	r3, [r7, #7]
 8016788:	2b0a      	cmp	r3, #10
 801678a:	d83e      	bhi.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
 801678c:	a201      	add	r2, pc, #4	; (adr r2, 8016794 <RadioGetLoRaBandwidthInHz+0x1c>)
 801678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016792:	bf00      	nop
 8016794:	080167c1 	.word	0x080167c1
 8016798:	080167d1 	.word	0x080167d1
 801679c:	080167e1 	.word	0x080167e1
 80167a0:	080167f1 	.word	0x080167f1
 80167a4:	080167f9 	.word	0x080167f9
 80167a8:	080167ff 	.word	0x080167ff
 80167ac:	08016805 	.word	0x08016805
 80167b0:	0801680b 	.word	0x0801680b
 80167b4:	080167c9 	.word	0x080167c9
 80167b8:	080167d9 	.word	0x080167d9
 80167bc:	080167e9 	.word	0x080167e9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80167c0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80167c4:	60fb      	str	r3, [r7, #12]
        break;
 80167c6:	e020      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80167c8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80167cc:	60fb      	str	r3, [r7, #12]
        break;
 80167ce:	e01c      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80167d0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80167d4:	60fb      	str	r3, [r7, #12]
        break;
 80167d6:	e018      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80167d8:	f245 1361 	movw	r3, #20833	; 0x5161
 80167dc:	60fb      	str	r3, [r7, #12]
        break;
 80167de:	e014      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80167e0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80167e4:	60fb      	str	r3, [r7, #12]
        break;
 80167e6:	e010      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80167e8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80167ec:	60fb      	str	r3, [r7, #12]
        break;
 80167ee:	e00c      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80167f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80167f4:	60fb      	str	r3, [r7, #12]
        break;
 80167f6:	e008      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80167f8:	4b07      	ldr	r3, [pc, #28]	; (8016818 <RadioGetLoRaBandwidthInHz+0xa0>)
 80167fa:	60fb      	str	r3, [r7, #12]
        break;
 80167fc:	e005      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80167fe:	4b07      	ldr	r3, [pc, #28]	; (801681c <RadioGetLoRaBandwidthInHz+0xa4>)
 8016800:	60fb      	str	r3, [r7, #12]
        break;
 8016802:	e002      	b.n	801680a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016804:	4b06      	ldr	r3, [pc, #24]	; (8016820 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016806:	60fb      	str	r3, [r7, #12]
        break;
 8016808:	bf00      	nop
    }

    return bandwidthInHz;
 801680a:	68fb      	ldr	r3, [r7, #12]
}
 801680c:	4618      	mov	r0, r3
 801680e:	3714      	adds	r7, #20
 8016810:	46bd      	mov	sp, r7
 8016812:	bc80      	pop	{r7}
 8016814:	4770      	bx	lr
 8016816:	bf00      	nop
 8016818:	0001e848 	.word	0x0001e848
 801681c:	0003d090 	.word	0x0003d090
 8016820:	0007a120 	.word	0x0007a120

08016824 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016824:	b480      	push	{r7}
 8016826:	b083      	sub	sp, #12
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	4608      	mov	r0, r1
 801682e:	4611      	mov	r1, r2
 8016830:	461a      	mov	r2, r3
 8016832:	4603      	mov	r3, r0
 8016834:	70fb      	strb	r3, [r7, #3]
 8016836:	460b      	mov	r3, r1
 8016838:	803b      	strh	r3, [r7, #0]
 801683a:	4613      	mov	r3, r2
 801683c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801683e:	883b      	ldrh	r3, [r7, #0]
 8016840:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016842:	78ba      	ldrb	r2, [r7, #2]
 8016844:	f082 0201 	eor.w	r2, r2, #1
 8016848:	b2d2      	uxtb	r2, r2
 801684a:	2a00      	cmp	r2, #0
 801684c:	d001      	beq.n	8016852 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801684e:	2208      	movs	r2, #8
 8016850:	e000      	b.n	8016854 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016852:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016854:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016856:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801685a:	7c3b      	ldrb	r3, [r7, #16]
 801685c:	7d39      	ldrb	r1, [r7, #20]
 801685e:	2900      	cmp	r1, #0
 8016860:	d001      	beq.n	8016866 <RadioGetGfskTimeOnAirNumerator+0x42>
 8016862:	2102      	movs	r1, #2
 8016864:	e000      	b.n	8016868 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016866:	2100      	movs	r1, #0
 8016868:	440b      	add	r3, r1
 801686a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801686c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801686e:	4618      	mov	r0, r3
 8016870:	370c      	adds	r7, #12
 8016872:	46bd      	mov	sp, r7
 8016874:	bc80      	pop	{r7}
 8016876:	4770      	bx	lr

08016878 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016878:	b480      	push	{r7}
 801687a:	b08b      	sub	sp, #44	; 0x2c
 801687c:	af00      	add	r7, sp, #0
 801687e:	60f8      	str	r0, [r7, #12]
 8016880:	60b9      	str	r1, [r7, #8]
 8016882:	4611      	mov	r1, r2
 8016884:	461a      	mov	r2, r3
 8016886:	460b      	mov	r3, r1
 8016888:	71fb      	strb	r3, [r7, #7]
 801688a:	4613      	mov	r3, r2
 801688c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801688e:	79fb      	ldrb	r3, [r7, #7]
 8016890:	3304      	adds	r3, #4
 8016892:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016894:	2300      	movs	r3, #0
 8016896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	2b05      	cmp	r3, #5
 801689e:	d002      	beq.n	80168a6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	2b06      	cmp	r3, #6
 80168a4:	d104      	bne.n	80168b0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80168a6:	88bb      	ldrh	r3, [r7, #4]
 80168a8:	2b0b      	cmp	r3, #11
 80168aa:	d801      	bhi.n	80168b0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80168ac:	230c      	movs	r3, #12
 80168ae:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d105      	bne.n	80168c2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	2b0b      	cmp	r3, #11
 80168ba:	d008      	beq.n	80168ce <RadioGetLoRaTimeOnAirNumerator+0x56>
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	2b0c      	cmp	r3, #12
 80168c0:	d005      	beq.n	80168ce <RadioGetLoRaTimeOnAirNumerator+0x56>
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	2b01      	cmp	r3, #1
 80168c6:	d105      	bne.n	80168d4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	2b0c      	cmp	r3, #12
 80168cc:	d102      	bne.n	80168d4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80168ce:	2301      	movs	r3, #1
 80168d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80168d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80168d8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80168da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80168de:	2a00      	cmp	r2, #0
 80168e0:	d001      	beq.n	80168e6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80168e2:	2210      	movs	r2, #16
 80168e4:	e000      	b.n	80168e8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80168e6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80168e8:	4413      	add	r3, r2
 80168ea:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80168f0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80168f2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80168f6:	2a00      	cmp	r2, #0
 80168f8:	d001      	beq.n	80168fe <RadioGetLoRaTimeOnAirNumerator+0x86>
 80168fa:	2200      	movs	r2, #0
 80168fc:	e000      	b.n	8016900 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80168fe:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016900:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016902:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	2b06      	cmp	r3, #6
 8016908:	d803      	bhi.n	8016912 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	009b      	lsls	r3, r3, #2
 801690e:	623b      	str	r3, [r7, #32]
 8016910:	e00e      	b.n	8016930 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016912:	69fb      	ldr	r3, [r7, #28]
 8016914:	3308      	adds	r3, #8
 8016916:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801691c:	2b00      	cmp	r3, #0
 801691e:	d004      	beq.n	801692a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	3b02      	subs	r3, #2
 8016924:	009b      	lsls	r3, r3, #2
 8016926:	623b      	str	r3, [r7, #32]
 8016928:	e002      	b.n	8016930 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	009b      	lsls	r3, r3, #2
 801692e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016930:	69fb      	ldr	r3, [r7, #28]
 8016932:	2b00      	cmp	r3, #0
 8016934:	da01      	bge.n	801693a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016936:	2300      	movs	r3, #0
 8016938:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801693a:	69fa      	ldr	r2, [r7, #28]
 801693c:	6a3b      	ldr	r3, [r7, #32]
 801693e:	4413      	add	r3, r2
 8016940:	1e5a      	subs	r2, r3, #1
 8016942:	6a3b      	ldr	r3, [r7, #32]
 8016944:	fb92 f3f3 	sdiv	r3, r2, r3
 8016948:	697a      	ldr	r2, [r7, #20]
 801694a:	fb02 f203 	mul.w	r2, r2, r3
 801694e:	88bb      	ldrh	r3, [r7, #4]
 8016950:	4413      	add	r3, r2
    int32_t intermediate =
 8016952:	330c      	adds	r3, #12
 8016954:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8016956:	68bb      	ldr	r3, [r7, #8]
 8016958:	2b06      	cmp	r3, #6
 801695a:	d802      	bhi.n	8016962 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801695c:	69bb      	ldr	r3, [r7, #24]
 801695e:	3302      	adds	r3, #2
 8016960:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	009b      	lsls	r3, r3, #2
 8016966:	1c5a      	adds	r2, r3, #1
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	3b02      	subs	r3, #2
 801696c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016970:	4618      	mov	r0, r3
 8016972:	372c      	adds	r7, #44	; 0x2c
 8016974:	46bd      	mov	sp, r7
 8016976:	bc80      	pop	{r7}
 8016978:	4770      	bx	lr
	...

0801697c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b08a      	sub	sp, #40	; 0x28
 8016980:	af04      	add	r7, sp, #16
 8016982:	60b9      	str	r1, [r7, #8]
 8016984:	607a      	str	r2, [r7, #4]
 8016986:	461a      	mov	r2, r3
 8016988:	4603      	mov	r3, r0
 801698a:	73fb      	strb	r3, [r7, #15]
 801698c:	4613      	mov	r3, r2
 801698e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8016990:	2300      	movs	r3, #0
 8016992:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8016994:	2301      	movs	r3, #1
 8016996:	613b      	str	r3, [r7, #16]

    switch( modem )
 8016998:	7bfb      	ldrb	r3, [r7, #15]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d002      	beq.n	80169a4 <RadioTimeOnAir+0x28>
 801699e:	2b01      	cmp	r3, #1
 80169a0:	d017      	beq.n	80169d2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80169a2:	e035      	b.n	8016a10 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80169a4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80169a8:	8c3a      	ldrh	r2, [r7, #32]
 80169aa:	7bb9      	ldrb	r1, [r7, #14]
 80169ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80169b0:	9301      	str	r3, [sp, #4]
 80169b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80169b6:	9300      	str	r3, [sp, #0]
 80169b8:	4603      	mov	r3, r0
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f7ff ff32 	bl	8016824 <RadioGetGfskTimeOnAirNumerator>
 80169c0:	4603      	mov	r3, r0
 80169c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80169c6:	fb02 f303 	mul.w	r3, r2, r3
 80169ca:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	613b      	str	r3, [r7, #16]
        break;
 80169d0:	e01e      	b.n	8016a10 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80169d2:	8c39      	ldrh	r1, [r7, #32]
 80169d4:	7bba      	ldrb	r2, [r7, #14]
 80169d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80169da:	9302      	str	r3, [sp, #8]
 80169dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80169e0:	9301      	str	r3, [sp, #4]
 80169e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80169e6:	9300      	str	r3, [sp, #0]
 80169e8:	460b      	mov	r3, r1
 80169ea:	6879      	ldr	r1, [r7, #4]
 80169ec:	68b8      	ldr	r0, [r7, #8]
 80169ee:	f7ff ff43 	bl	8016878 <RadioGetLoRaTimeOnAirNumerator>
 80169f2:	4603      	mov	r3, r0
 80169f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80169f8:	fb02 f303 	mul.w	r3, r2, r3
 80169fc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80169fe:	4a0a      	ldr	r2, [pc, #40]	; (8016a28 <RadioTimeOnAir+0xac>)
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	4413      	add	r3, r2
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7ff feb6 	bl	8016778 <RadioGetLoRaBandwidthInHz>
 8016a0c:	6138      	str	r0, [r7, #16]
        break;
 8016a0e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8016a10:	697a      	ldr	r2, [r7, #20]
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	4413      	add	r3, r2
 8016a16:	1e5a      	subs	r2, r3, #1
 8016a18:	693b      	ldr	r3, [r7, #16]
 8016a1a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3718      	adds	r7, #24
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	0801b5ac 	.word	0x0801b5ac

08016a2c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	460b      	mov	r3, r1
 8016a36:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8016a38:	2300      	movs	r3, #0
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	f240 2101 	movw	r1, #513	; 0x201
 8016a40:	f240 2001 	movw	r0, #513	; 0x201
 8016a44:	f001 fc78 	bl	8018338 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8016a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016a4c:	4871      	ldr	r0, [pc, #452]	; (8016c14 <RadioSend+0x1e8>)
 8016a4e:	f7ff fa07 	bl	8015e60 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8016a52:	4b71      	ldr	r3, [pc, #452]	; (8016c18 <RadioSend+0x1ec>)
 8016a54:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016a58:	2101      	movs	r1, #1
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f002 f89e 	bl	8018b9c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8016a60:	4b6d      	ldr	r3, [pc, #436]	; (8016c18 <RadioSend+0x1ec>)
 8016a62:	781b      	ldrb	r3, [r3, #0]
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	d112      	bne.n	8016a8e <RadioSend+0x62>
 8016a68:	4b6b      	ldr	r3, [pc, #428]	; (8016c18 <RadioSend+0x1ec>)
 8016a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016a6e:	2b06      	cmp	r3, #6
 8016a70:	d10d      	bne.n	8016a8e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8016a72:	f640 0089 	movw	r0, #2185	; 0x889
 8016a76:	f001 ffb1 	bl	80189dc <SUBGRF_ReadRegister>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	f023 0304 	bic.w	r3, r3, #4
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	4619      	mov	r1, r3
 8016a84:	f640 0089 	movw	r0, #2185	; 0x889
 8016a88:	f001 ff94 	bl	80189b4 <SUBGRF_WriteRegister>
 8016a8c:	e00c      	b.n	8016aa8 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8016a8e:	f640 0089 	movw	r0, #2185	; 0x889
 8016a92:	f001 ffa3 	bl	80189dc <SUBGRF_ReadRegister>
 8016a96:	4603      	mov	r3, r0
 8016a98:	f043 0304 	orr.w	r3, r3, #4
 8016a9c:	b2db      	uxtb	r3, r3
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	f640 0089 	movw	r0, #2185	; 0x889
 8016aa4:	f001 ff86 	bl	80189b4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8016aa8:	4b5b      	ldr	r3, [pc, #364]	; (8016c18 <RadioSend+0x1ec>)
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	2b03      	cmp	r3, #3
 8016aae:	f200 80a4 	bhi.w	8016bfa <RadioSend+0x1ce>
 8016ab2:	a201      	add	r2, pc, #4	; (adr r2, 8016ab8 <RadioSend+0x8c>)
 8016ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ab8:	08016ae3 	.word	0x08016ae3
 8016abc:	08016ac9 	.word	0x08016ac9
 8016ac0:	08016b43 	.word	0x08016b43
 8016ac4:	08016b63 	.word	0x08016b63
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8016ac8:	4a53      	ldr	r2, [pc, #332]	; (8016c18 <RadioSend+0x1ec>)
 8016aca:	78fb      	ldrb	r3, [r7, #3]
 8016acc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ace:	4853      	ldr	r0, [pc, #332]	; (8016c1c <RadioSend+0x1f0>)
 8016ad0:	f001 fe28 	bl	8018724 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8016ad4:	78fb      	ldrb	r3, [r7, #3]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	4619      	mov	r1, r3
 8016ada:	6878      	ldr	r0, [r7, #4]
 8016adc:	f001 f94e 	bl	8017d7c <SUBGRF_SendPayload>
            break;
 8016ae0:	e08c      	b.n	8016bfc <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8016ae2:	f002 fa46 	bl	8018f72 <RFW_Is_Init>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b01      	cmp	r3, #1
 8016aea:	d11d      	bne.n	8016b28 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8016aec:	f107 020d 	add.w	r2, r7, #13
 8016af0:	78fb      	ldrb	r3, [r7, #3]
 8016af2:	4619      	mov	r1, r3
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f002 fa54 	bl	8018fa2 <RFW_TransmitInit>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d10c      	bne.n	8016b1a <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8016b00:	7b7a      	ldrb	r2, [r7, #13]
 8016b02:	4b45      	ldr	r3, [pc, #276]	; (8016c18 <RadioSend+0x1ec>)
 8016b04:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b06:	4845      	ldr	r0, [pc, #276]	; (8016c1c <RadioSend+0x1f0>)
 8016b08:	f001 fe0c 	bl	8018724 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8016b0c:	7b7b      	ldrb	r3, [r7, #13]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	4619      	mov	r1, r3
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f001 f932 	bl	8017d7c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8016b18:	e070      	b.n	8016bfc <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8016b1a:	4b41      	ldr	r3, [pc, #260]	; (8016c20 <RadioSend+0x1f4>)
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	2100      	movs	r1, #0
 8016b20:	2002      	movs	r0, #2
 8016b22:	f003 fb4b 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
 8016b26:	e072      	b.n	8016c0e <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8016b28:	4a3b      	ldr	r2, [pc, #236]	; (8016c18 <RadioSend+0x1ec>)
 8016b2a:	78fb      	ldrb	r3, [r7, #3]
 8016b2c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b2e:	483b      	ldr	r0, [pc, #236]	; (8016c1c <RadioSend+0x1f0>)
 8016b30:	f001 fdf8 	bl	8018724 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8016b34:	78fb      	ldrb	r3, [r7, #3]
 8016b36:	2200      	movs	r2, #0
 8016b38:	4619      	mov	r1, r3
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f001 f91e 	bl	8017d7c <SUBGRF_SendPayload>
            break;
 8016b40:	e05c      	b.n	8016bfc <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8016b42:	4b35      	ldr	r3, [pc, #212]	; (8016c18 <RadioSend+0x1ec>)
 8016b44:	2202      	movs	r2, #2
 8016b46:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8016b48:	4a33      	ldr	r2, [pc, #204]	; (8016c18 <RadioSend+0x1ec>)
 8016b4a:	78fb      	ldrb	r3, [r7, #3]
 8016b4c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b4e:	4833      	ldr	r0, [pc, #204]	; (8016c1c <RadioSend+0x1f0>)
 8016b50:	f001 fde8 	bl	8018724 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8016b54:	78fb      	ldrb	r3, [r7, #3]
 8016b56:	2200      	movs	r2, #0
 8016b58:	4619      	mov	r1, r3
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	f001 f90e 	bl	8017d7c <SUBGRF_SendPayload>
            break;
 8016b60:	e04c      	b.n	8016bfc <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8016b62:	78fb      	ldrb	r3, [r7, #3]
 8016b64:	461a      	mov	r2, r3
 8016b66:	6879      	ldr	r1, [r7, #4]
 8016b68:	482e      	ldr	r0, [pc, #184]	; (8016c24 <RadioSend+0x1f8>)
 8016b6a:	f000 fc8e 	bl	801748a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8016b6e:	4b2a      	ldr	r3, [pc, #168]	; (8016c18 <RadioSend+0x1ec>)
 8016b70:	2202      	movs	r2, #2
 8016b72:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8016b74:	78fb      	ldrb	r3, [r7, #3]
 8016b76:	3301      	adds	r3, #1
 8016b78:	b2da      	uxtb	r2, r3
 8016b7a:	4b27      	ldr	r3, [pc, #156]	; (8016c18 <RadioSend+0x1ec>)
 8016b7c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b7e:	4827      	ldr	r0, [pc, #156]	; (8016c1c <RadioSend+0x1f0>)
 8016b80:	f001 fdd0 	bl	8018724 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8016b84:	2100      	movs	r1, #0
 8016b86:	20f1      	movs	r0, #241	; 0xf1
 8016b88:	f000 f94f 	bl	8016e2a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	20f0      	movs	r0, #240	; 0xf0
 8016b90:	f000 f94b 	bl	8016e2a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8016b94:	4b20      	ldr	r3, [pc, #128]	; (8016c18 <RadioSend+0x1ec>)
 8016b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016b98:	2b64      	cmp	r3, #100	; 0x64
 8016b9a:	d108      	bne.n	8016bae <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8016b9c:	2170      	movs	r1, #112	; 0x70
 8016b9e:	20f3      	movs	r0, #243	; 0xf3
 8016ba0:	f000 f943 	bl	8016e2a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8016ba4:	211d      	movs	r1, #29
 8016ba6:	20f2      	movs	r0, #242	; 0xf2
 8016ba8:	f000 f93f 	bl	8016e2a <RadioWrite>
 8016bac:	e007      	b.n	8016bbe <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8016bae:	21e1      	movs	r1, #225	; 0xe1
 8016bb0:	20f3      	movs	r0, #243	; 0xf3
 8016bb2:	f000 f93a 	bl	8016e2a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8016bb6:	2104      	movs	r1, #4
 8016bb8:	20f2      	movs	r0, #242	; 0xf2
 8016bba:	f000 f936 	bl	8016e2a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8016bbe:	78fb      	ldrb	r3, [r7, #3]
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	3302      	adds	r3, #2
 8016bc8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8016bca:	89fb      	ldrh	r3, [r7, #14]
 8016bcc:	0a1b      	lsrs	r3, r3, #8
 8016bce:	b29b      	uxth	r3, r3
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	20f4      	movs	r0, #244	; 0xf4
 8016bd6:	f000 f928 	bl	8016e2a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8016bda:	89fb      	ldrh	r3, [r7, #14]
 8016bdc:	b2db      	uxtb	r3, r3
 8016bde:	4619      	mov	r1, r3
 8016be0:	20f5      	movs	r0, #245	; 0xf5
 8016be2:	f000 f922 	bl	8016e2a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8016be6:	78fb      	ldrb	r3, [r7, #3]
 8016be8:	3301      	adds	r3, #1
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8016bf0:	4619      	mov	r1, r3
 8016bf2:	480c      	ldr	r0, [pc, #48]	; (8016c24 <RadioSend+0x1f8>)
 8016bf4:	f001 f8c2 	bl	8017d7c <SUBGRF_SendPayload>
            break;
 8016bf8:	e000      	b.n	8016bfc <RadioSend+0x1d0>
        }
        default:
            break;
 8016bfa:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8016bfc:	4b06      	ldr	r3, [pc, #24]	; (8016c18 <RadioSend+0x1ec>)
 8016bfe:	685b      	ldr	r3, [r3, #4]
 8016c00:	4619      	mov	r1, r3
 8016c02:	4809      	ldr	r0, [pc, #36]	; (8016c28 <RadioSend+0x1fc>)
 8016c04:	f003 f940 	bl	8019e88 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8016c08:	4807      	ldr	r0, [pc, #28]	; (8016c28 <RadioSend+0x1fc>)
 8016c0a:	f003 f85f 	bl	8019ccc <UTIL_TIMER_Start>
}
 8016c0e:	3710      	adds	r7, #16
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	48000400 	.word	0x48000400
 8016c18:	200017c4 	.word	0x200017c4
 8016c1c:	200017d2 	.word	0x200017d2
 8016c20:	0801afb8 	.word	0x0801afb8
 8016c24:	20000dd8 	.word	0x20000dd8
 8016c28:	2000181c 	.word	0x2000181c

08016c2c <RadioSleep>:

static void RadioSleep( void )
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b082      	sub	sp, #8
 8016c30:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8016c32:	2300      	movs	r3, #0
 8016c34:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8016c36:	793b      	ldrb	r3, [r7, #4]
 8016c38:	f043 0304 	orr.w	r3, r3, #4
 8016c3c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8016c3e:	7938      	ldrb	r0, [r7, #4]
 8016c40:	f001 f978 	bl	8017f34 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8016c44:	2002      	movs	r0, #2
 8016c46:	f7ea ffe6 	bl	8001c16 <HAL_Delay>
}
 8016c4a:	bf00      	nop
 8016c4c:	3708      	adds	r7, #8
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <RadioStandby>:

static void RadioStandby( void )
{
 8016c52:	b580      	push	{r7, lr}
 8016c54:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8016c56:	2000      	movs	r0, #0
 8016c58:	f001 f99e 	bl	8017f98 <SUBGRF_SetStandby>
}
 8016c5c:	bf00      	nop
 8016c5e:	bd80      	pop	{r7, pc}

08016c60 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8016c68:	f002 f983 	bl	8018f72 <RFW_Is_Init>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	2b01      	cmp	r3, #1
 8016c70:	d102      	bne.n	8016c78 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8016c72:	f002 f9a6 	bl	8018fc2 <RFW_ReceiveInit>
 8016c76:	e007      	b.n	8016c88 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8016c78:	2300      	movs	r3, #0
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f240 2162 	movw	r1, #610	; 0x262
 8016c80:	f240 2062 	movw	r0, #610	; 0x262
 8016c84:	f001 fb58 	bl	8018338 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d006      	beq.n	8016c9c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8016c8e:	6879      	ldr	r1, [r7, #4]
 8016c90:	4812      	ldr	r0, [pc, #72]	; (8016cdc <RadioRx+0x7c>)
 8016c92:	f003 f8f9 	bl	8019e88 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8016c96:	4811      	ldr	r0, [pc, #68]	; (8016cdc <RadioRx+0x7c>)
 8016c98:	f003 f818 	bl	8019ccc <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8016c9c:	2101      	movs	r1, #1
 8016c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016ca2:	f7ff f8dd 	bl	8015e60 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8016ca6:	4b0e      	ldr	r3, [pc, #56]	; (8016ce0 <RadioRx+0x80>)
 8016ca8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016cac:	2100      	movs	r1, #0
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f001 ff74 	bl	8018b9c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8016cb4:	4b0a      	ldr	r3, [pc, #40]	; (8016ce0 <RadioRx+0x80>)
 8016cb6:	785b      	ldrb	r3, [r3, #1]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d004      	beq.n	8016cc6 <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8016cbc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016cc0:	f001 f9a6 	bl	8018010 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8016cc4:	e005      	b.n	8016cd2 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8016cc6:	4b06      	ldr	r3, [pc, #24]	; (8016ce0 <RadioRx+0x80>)
 8016cc8:	689b      	ldr	r3, [r3, #8]
 8016cca:	019b      	lsls	r3, r3, #6
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f001 f99f 	bl	8018010 <SUBGRF_SetRx>
}
 8016cd2:	bf00      	nop
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	20001834 	.word	0x20001834
 8016ce0:	200017c4 	.word	0x200017c4

08016ce4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8016cec:	f002 f941 	bl	8018f72 <RFW_Is_Init>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d102      	bne.n	8016cfc <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8016cf6:	f002 f964 	bl	8018fc2 <RFW_ReceiveInit>
 8016cfa:	e007      	b.n	8016d0c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	2200      	movs	r2, #0
 8016d00:	f240 2162 	movw	r1, #610	; 0x262
 8016d04:	f240 2062 	movw	r0, #610	; 0x262
 8016d08:	f001 fb16 	bl	8018338 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d006      	beq.n	8016d20 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8016d12:	6879      	ldr	r1, [r7, #4]
 8016d14:	480f      	ldr	r0, [pc, #60]	; (8016d54 <RadioRxBoosted+0x70>)
 8016d16:	f003 f8b7 	bl	8019e88 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8016d1a:	480e      	ldr	r0, [pc, #56]	; (8016d54 <RadioRxBoosted+0x70>)
 8016d1c:	f002 ffd6 	bl	8019ccc <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8016d20:	4b0d      	ldr	r3, [pc, #52]	; (8016d58 <RadioRxBoosted+0x74>)
 8016d22:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016d26:	2100      	movs	r1, #0
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f001 ff37 	bl	8018b9c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8016d2e:	4b0a      	ldr	r3, [pc, #40]	; (8016d58 <RadioRxBoosted+0x74>)
 8016d30:	785b      	ldrb	r3, [r3, #1]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d004      	beq.n	8016d40 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8016d36:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016d3a:	f001 f989 	bl	8018050 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8016d3e:	e005      	b.n	8016d4c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8016d40:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <RadioRxBoosted+0x74>)
 8016d42:	689b      	ldr	r3, [r3, #8]
 8016d44:	019b      	lsls	r3, r3, #6
 8016d46:	4618      	mov	r0, r3
 8016d48:	f001 f982 	bl	8018050 <SUBGRF_SetRxBoosted>
}
 8016d4c:	bf00      	nop
 8016d4e:	3708      	adds	r7, #8
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	20001834 	.word	0x20001834
 8016d58:	200017c4 	.word	0x200017c4

08016d5c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
 8016d64:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8016d66:	4b07      	ldr	r3, [pc, #28]	; (8016d84 <RadioSetRxDutyCycle+0x28>)
 8016d68:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016d6c:	2100      	movs	r1, #0
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f001 ff14 	bl	8018b9c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8016d74:	6839      	ldr	r1, [r7, #0]
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f001 f98e 	bl	8018098 <SUBGRF_SetRxDutyCycle>
}
 8016d7c:	bf00      	nop
 8016d7e:	3708      	adds	r7, #8
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	200017c4 	.word	0x200017c4

08016d88 <RadioStartCad>:

static void RadioStartCad( void )
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8016d8c:	4b09      	ldr	r3, [pc, #36]	; (8016db4 <RadioStartCad+0x2c>)
 8016d8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016d92:	2100      	movs	r1, #0
 8016d94:	4618      	mov	r0, r3
 8016d96:	f001 ff01 	bl	8018b9c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8016da2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8016da6:	f001 fac7 	bl	8018338 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8016daa:	f001 f9a1 	bl	80180f0 <SUBGRF_SetCad>
}
 8016dae:	bf00      	nop
 8016db0:	bd80      	pop	{r7, pc}
 8016db2:	bf00      	nop
 8016db4:	200017c4 	.word	0x200017c4

08016db8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	70fb      	strb	r3, [r7, #3]
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8016dc8:	883b      	ldrh	r3, [r7, #0]
 8016dca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016dce:	fb02 f303 	mul.w	r3, r2, r3
 8016dd2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8016dd4:	6878      	ldr	r0, [r7, #4]
 8016dd6:	f001 fb0b 	bl	80183f0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8016dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016dde:	4618      	mov	r0, r3
 8016de0:	f001 ff04 	bl	8018bec <SUBGRF_SetRfTxPower>
 8016de4:	4603      	mov	r3, r0
 8016de6:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8016de8:	7afb      	ldrb	r3, [r7, #11]
 8016dea:	2101      	movs	r1, #1
 8016dec:	4618      	mov	r0, r3
 8016dee:	f001 fed5 	bl	8018b9c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8016df2:	f001 f98b 	bl	801810c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8016df6:	68f9      	ldr	r1, [r7, #12]
 8016df8:	4804      	ldr	r0, [pc, #16]	; (8016e0c <RadioSetTxContinuousWave+0x54>)
 8016dfa:	f003 f845 	bl	8019e88 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8016dfe:	4803      	ldr	r0, [pc, #12]	; (8016e0c <RadioSetTxContinuousWave+0x54>)
 8016e00:	f002 ff64 	bl	8019ccc <UTIL_TIMER_Start>
}
 8016e04:	bf00      	nop
 8016e06:	3710      	adds	r7, #16
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	2000181c 	.word	0x2000181c

08016e10 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	4603      	mov	r3, r0
 8016e18:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8016e1a:	f001 fd38 	bl	801888e <SUBGRF_GetRssiInst>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	b21b      	sxth	r3, r3
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3708      	adds	r7, #8
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}

08016e2a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8016e2a:	b580      	push	{r7, lr}
 8016e2c:	b082      	sub	sp, #8
 8016e2e:	af00      	add	r7, sp, #0
 8016e30:	4603      	mov	r3, r0
 8016e32:	460a      	mov	r2, r1
 8016e34:	80fb      	strh	r3, [r7, #6]
 8016e36:	4613      	mov	r3, r2
 8016e38:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8016e3a:	797a      	ldrb	r2, [r7, #5]
 8016e3c:	88fb      	ldrh	r3, [r7, #6]
 8016e3e:	4611      	mov	r1, r2
 8016e40:	4618      	mov	r0, r3
 8016e42:	f001 fdb7 	bl	80189b4 <SUBGRF_WriteRegister>
}
 8016e46:	bf00      	nop
 8016e48:	3708      	adds	r7, #8
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}

08016e4e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8016e4e:	b580      	push	{r7, lr}
 8016e50:	b082      	sub	sp, #8
 8016e52:	af00      	add	r7, sp, #0
 8016e54:	4603      	mov	r3, r0
 8016e56:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8016e58:	88fb      	ldrh	r3, [r7, #6]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f001 fdbe 	bl	80189dc <SUBGRF_ReadRegister>
 8016e60:	4603      	mov	r3, r0
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3708      	adds	r7, #8
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}

08016e6a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8016e6a:	b580      	push	{r7, lr}
 8016e6c:	b082      	sub	sp, #8
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	4603      	mov	r3, r0
 8016e72:	6039      	str	r1, [r7, #0]
 8016e74:	80fb      	strh	r3, [r7, #6]
 8016e76:	4613      	mov	r3, r2
 8016e78:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8016e7a:	797b      	ldrb	r3, [r7, #5]
 8016e7c:	b29a      	uxth	r2, r3
 8016e7e:	88fb      	ldrh	r3, [r7, #6]
 8016e80:	6839      	ldr	r1, [r7, #0]
 8016e82:	4618      	mov	r0, r3
 8016e84:	f001 fdbe 	bl	8018a04 <SUBGRF_WriteRegisters>
}
 8016e88:	bf00      	nop
 8016e8a:	3708      	adds	r7, #8
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	4603      	mov	r3, r0
 8016e98:	6039      	str	r1, [r7, #0]
 8016e9a:	80fb      	strh	r3, [r7, #6]
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8016ea0:	797b      	ldrb	r3, [r7, #5]
 8016ea2:	b29a      	uxth	r2, r3
 8016ea4:	88fb      	ldrh	r3, [r7, #6]
 8016ea6:	6839      	ldr	r1, [r7, #0]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f001 fdcd 	bl	8018a48 <SUBGRF_ReadRegisters>
}
 8016eae:	bf00      	nop
 8016eb0:	3708      	adds	r7, #8
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
	...

08016eb8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	460a      	mov	r2, r1
 8016ec2:	71fb      	strb	r3, [r7, #7]
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8016ec8:	79fb      	ldrb	r3, [r7, #7]
 8016eca:	2b01      	cmp	r3, #1
 8016ecc:	d10a      	bne.n	8016ee4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8016ece:	4a0e      	ldr	r2, [pc, #56]	; (8016f08 <RadioSetMaxPayloadLength+0x50>)
 8016ed0:	79bb      	ldrb	r3, [r7, #6]
 8016ed2:	7013      	strb	r3, [r2, #0]
 8016ed4:	4b0c      	ldr	r3, [pc, #48]	; (8016f08 <RadioSetMaxPayloadLength+0x50>)
 8016ed6:	781a      	ldrb	r2, [r3, #0]
 8016ed8:	4b0c      	ldr	r3, [pc, #48]	; (8016f0c <RadioSetMaxPayloadLength+0x54>)
 8016eda:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016edc:	480c      	ldr	r0, [pc, #48]	; (8016f10 <RadioSetMaxPayloadLength+0x58>)
 8016ede:	f001 fc21 	bl	8018724 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8016ee2:	e00d      	b.n	8016f00 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8016ee4:	4b09      	ldr	r3, [pc, #36]	; (8016f0c <RadioSetMaxPayloadLength+0x54>)
 8016ee6:	7d5b      	ldrb	r3, [r3, #21]
 8016ee8:	2b01      	cmp	r3, #1
 8016eea:	d109      	bne.n	8016f00 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8016eec:	4a06      	ldr	r2, [pc, #24]	; (8016f08 <RadioSetMaxPayloadLength+0x50>)
 8016eee:	79bb      	ldrb	r3, [r7, #6]
 8016ef0:	7013      	strb	r3, [r2, #0]
 8016ef2:	4b05      	ldr	r3, [pc, #20]	; (8016f08 <RadioSetMaxPayloadLength+0x50>)
 8016ef4:	781a      	ldrb	r2, [r3, #0]
 8016ef6:	4b05      	ldr	r3, [pc, #20]	; (8016f0c <RadioSetMaxPayloadLength+0x54>)
 8016ef8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016efa:	4805      	ldr	r0, [pc, #20]	; (8016f10 <RadioSetMaxPayloadLength+0x58>)
 8016efc:	f001 fc12 	bl	8018724 <SUBGRF_SetPacketParams>
}
 8016f00:	bf00      	nop
 8016f02:	3708      	adds	r7, #8
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	20000120 	.word	0x20000120
 8016f0c:	200017c4 	.word	0x200017c4
 8016f10:	200017d2 	.word	0x200017d2

08016f14 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b082      	sub	sp, #8
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8016f1e:	4a13      	ldr	r2, [pc, #76]	; (8016f6c <RadioSetPublicNetwork+0x58>)
 8016f20:	79fb      	ldrb	r3, [r7, #7]
 8016f22:	7313      	strb	r3, [r2, #12]
 8016f24:	4b11      	ldr	r3, [pc, #68]	; (8016f6c <RadioSetPublicNetwork+0x58>)
 8016f26:	7b1a      	ldrb	r2, [r3, #12]
 8016f28:	4b10      	ldr	r3, [pc, #64]	; (8016f6c <RadioSetPublicNetwork+0x58>)
 8016f2a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8016f2c:	2001      	movs	r0, #1
 8016f2e:	f7ff f81f 	bl	8015f70 <RadioSetModem>
    if( enable == true )
 8016f32:	79fb      	ldrb	r3, [r7, #7]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d00a      	beq.n	8016f4e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8016f38:	2134      	movs	r1, #52	; 0x34
 8016f3a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8016f3e:	f001 fd39 	bl	80189b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8016f42:	2144      	movs	r1, #68	; 0x44
 8016f44:	f240 7041 	movw	r0, #1857	; 0x741
 8016f48:	f001 fd34 	bl	80189b4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8016f4c:	e009      	b.n	8016f62 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8016f4e:	2114      	movs	r1, #20
 8016f50:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8016f54:	f001 fd2e 	bl	80189b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8016f58:	2124      	movs	r1, #36	; 0x24
 8016f5a:	f240 7041 	movw	r0, #1857	; 0x741
 8016f5e:	f001 fd29 	bl	80189b4 <SUBGRF_WriteRegister>
}
 8016f62:	bf00      	nop
 8016f64:	3708      	adds	r7, #8
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}
 8016f6a:	bf00      	nop
 8016f6c:	200017c4 	.word	0x200017c4

08016f70 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8016f74:	f001 fe6e 	bl	8018c54 <SUBGRF_GetRadioWakeUpTime>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	3303      	adds	r3, #3
}
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8016f88:	f000 f80e 	bl	8016fa8 <RadioOnTxTimeoutProcess>
}
 8016f8c:	bf00      	nop
 8016f8e:	3708      	adds	r7, #8
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}

08016f94 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b082      	sub	sp, #8
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8016f9c:	f000 f81e 	bl	8016fdc <RadioOnRxTimeoutProcess>
}
 8016fa0:	bf00      	nop
 8016fa2:	3708      	adds	r7, #8
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 8016fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016fb0:	4808      	ldr	r0, [pc, #32]	; (8016fd4 <RadioOnTxTimeoutProcess+0x2c>)
 8016fb2:	f7fe ff62 	bl	8015e7a <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016fb6:	4b08      	ldr	r3, [pc, #32]	; (8016fd8 <RadioOnTxTimeoutProcess+0x30>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d008      	beq.n	8016fd0 <RadioOnTxTimeoutProcess+0x28>
 8016fbe:	4b06      	ldr	r3, [pc, #24]	; (8016fd8 <RadioOnTxTimeoutProcess+0x30>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d003      	beq.n	8016fd0 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8016fc8:	4b03      	ldr	r3, [pc, #12]	; (8016fd8 <RadioOnTxTimeoutProcess+0x30>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	4798      	blx	r3
    }
}
 8016fd0:	bf00      	nop
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	48000400 	.word	0x48000400
 8016fd8:	20000ed8 	.word	0x20000ed8

08016fdc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8016fe0:	2101      	movs	r1, #1
 8016fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016fe6:	f7fe ff48 	bl	8015e7a <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016fea:	4b07      	ldr	r3, [pc, #28]	; (8017008 <RadioOnRxTimeoutProcess+0x2c>)
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d008      	beq.n	8017004 <RadioOnRxTimeoutProcess+0x28>
 8016ff2:	4b05      	ldr	r3, [pc, #20]	; (8017008 <RadioOnRxTimeoutProcess+0x2c>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	68db      	ldr	r3, [r3, #12]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d003      	beq.n	8017004 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8016ffc:	4b02      	ldr	r3, [pc, #8]	; (8017008 <RadioOnRxTimeoutProcess+0x2c>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	68db      	ldr	r3, [r3, #12]
 8017002:	4798      	blx	r3
    }
}
 8017004:	bf00      	nop
 8017006:	bd80      	pop	{r7, pc}
 8017008:	20000ed8 	.word	0x20000ed8

0801700c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801700c:	b580      	push	{r7, lr}
 801700e:	b082      	sub	sp, #8
 8017010:	af00      	add	r7, sp, #0
 8017012:	4603      	mov	r3, r0
 8017014:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017016:	4a05      	ldr	r2, [pc, #20]	; (801702c <RadioOnDioIrq+0x20>)
 8017018:	88fb      	ldrh	r3, [r7, #6]
 801701a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801701e:	f000 f807 	bl	8017030 <RadioIrqProcess>
}
 8017022:	bf00      	nop
 8017024:	3708      	adds	r7, #8
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	200017c4 	.word	0x200017c4

08017030 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017030:	b590      	push	{r4, r7, lr}
 8017032:	b083      	sub	sp, #12
 8017034:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017036:	2300      	movs	r3, #0
 8017038:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801703a:	2300      	movs	r3, #0
 801703c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801703e:	4bbf      	ldr	r3, [pc, #764]	; (801733c <RadioIrqProcess+0x30c>)
 8017040:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017048:	f000 8116 	beq.w	8017278 <RadioIrqProcess+0x248>
 801704c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017050:	f300 81cb 	bgt.w	80173ea <RadioIrqProcess+0x3ba>
 8017054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017058:	f000 80fa 	beq.w	8017250 <RadioIrqProcess+0x220>
 801705c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017060:	f300 81c3 	bgt.w	80173ea <RadioIrqProcess+0x3ba>
 8017064:	2b80      	cmp	r3, #128	; 0x80
 8017066:	f000 80df 	beq.w	8017228 <RadioIrqProcess+0x1f8>
 801706a:	2b80      	cmp	r3, #128	; 0x80
 801706c:	f300 81bd 	bgt.w	80173ea <RadioIrqProcess+0x3ba>
 8017070:	2b20      	cmp	r3, #32
 8017072:	dc49      	bgt.n	8017108 <RadioIrqProcess+0xd8>
 8017074:	2b00      	cmp	r3, #0
 8017076:	f340 81b8 	ble.w	80173ea <RadioIrqProcess+0x3ba>
 801707a:	3b01      	subs	r3, #1
 801707c:	2b1f      	cmp	r3, #31
 801707e:	f200 81b4 	bhi.w	80173ea <RadioIrqProcess+0x3ba>
 8017082:	a201      	add	r2, pc, #4	; (adr r2, 8017088 <RadioIrqProcess+0x58>)
 8017084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017088:	08017111 	.word	0x08017111
 801708c:	08017155 	.word	0x08017155
 8017090:	080173eb 	.word	0x080173eb
 8017094:	08017305 	.word	0x08017305
 8017098:	080173eb 	.word	0x080173eb
 801709c:	080173eb 	.word	0x080173eb
 80170a0:	080173eb 	.word	0x080173eb
 80170a4:	08017313 	.word	0x08017313
 80170a8:	080173eb 	.word	0x080173eb
 80170ac:	080173eb 	.word	0x080173eb
 80170b0:	080173eb 	.word	0x080173eb
 80170b4:	080173eb 	.word	0x080173eb
 80170b8:	080173eb 	.word	0x080173eb
 80170bc:	080173eb 	.word	0x080173eb
 80170c0:	080173eb 	.word	0x080173eb
 80170c4:	0801732f 	.word	0x0801732f
 80170c8:	080173eb 	.word	0x080173eb
 80170cc:	080173eb 	.word	0x080173eb
 80170d0:	080173eb 	.word	0x080173eb
 80170d4:	080173eb 	.word	0x080173eb
 80170d8:	080173eb 	.word	0x080173eb
 80170dc:	080173eb 	.word	0x080173eb
 80170e0:	080173eb 	.word	0x080173eb
 80170e4:	080173eb 	.word	0x080173eb
 80170e8:	080173eb 	.word	0x080173eb
 80170ec:	080173eb 	.word	0x080173eb
 80170f0:	080173eb 	.word	0x080173eb
 80170f4:	080173eb 	.word	0x080173eb
 80170f8:	080173eb 	.word	0x080173eb
 80170fc:	080173eb 	.word	0x080173eb
 8017100:	080173eb 	.word	0x080173eb
 8017104:	0801736d 	.word	0x0801736d
 8017108:	2b40      	cmp	r3, #64	; 0x40
 801710a:	f000 8150 	beq.w	80173ae <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801710e:	e16c      	b.n	80173ea <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017114:	488a      	ldr	r0, [pc, #552]	; (8017340 <RadioIrqProcess+0x310>)
 8017116:	f7fe feb0 	bl	8015e7a <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 801711a:	488a      	ldr	r0, [pc, #552]	; (8017344 <RadioIrqProcess+0x314>)
 801711c:	f002 fe44 	bl	8019da8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017120:	2000      	movs	r0, #0
 8017122:	f000 ff39 	bl	8017f98 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017126:	f001 ff2b 	bl	8018f80 <RFW_Is_LongPacketModeEnabled>
 801712a:	4603      	mov	r3, r0
 801712c:	2b01      	cmp	r3, #1
 801712e:	d101      	bne.n	8017134 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017130:	f001 ff4f 	bl	8018fd2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017134:	4b84      	ldr	r3, [pc, #528]	; (8017348 <RadioIrqProcess+0x318>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	2b00      	cmp	r3, #0
 801713a:	f000 8158 	beq.w	80173ee <RadioIrqProcess+0x3be>
 801713e:	4b82      	ldr	r3, [pc, #520]	; (8017348 <RadioIrqProcess+0x318>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	f000 8152 	beq.w	80173ee <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 801714a:	4b7f      	ldr	r3, [pc, #508]	; (8017348 <RadioIrqProcess+0x318>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	4798      	blx	r3
        break;
 8017152:	e14c      	b.n	80173ee <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8017154:	2101      	movs	r1, #1
 8017156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801715a:	f7fe fe8e 	bl	8015e7a <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 801715e:	487b      	ldr	r0, [pc, #492]	; (801734c <RadioIrqProcess+0x31c>)
 8017160:	f002 fe22 	bl	8019da8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017164:	4b75      	ldr	r3, [pc, #468]	; (801733c <RadioIrqProcess+0x30c>)
 8017166:	785b      	ldrb	r3, [r3, #1]
 8017168:	f083 0301 	eor.w	r3, r3, #1
 801716c:	b2db      	uxtb	r3, r3
 801716e:	2b00      	cmp	r3, #0
 8017170:	d014      	beq.n	801719c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017172:	2000      	movs	r0, #0
 8017174:	f000 ff10 	bl	8017f98 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017178:	2100      	movs	r1, #0
 801717a:	f640 1002 	movw	r0, #2306	; 0x902
 801717e:	f001 fc19 	bl	80189b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017182:	f640 1044 	movw	r0, #2372	; 0x944
 8017186:	f001 fc29 	bl	80189dc <SUBGRF_ReadRegister>
 801718a:	4603      	mov	r3, r0
 801718c:	f043 0302 	orr.w	r3, r3, #2
 8017190:	b2db      	uxtb	r3, r3
 8017192:	4619      	mov	r1, r3
 8017194:	f640 1044 	movw	r0, #2372	; 0x944
 8017198:	f001 fc0c 	bl	80189b4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801719c:	1dfb      	adds	r3, r7, #7
 801719e:	22ff      	movs	r2, #255	; 0xff
 80171a0:	4619      	mov	r1, r3
 80171a2:	486b      	ldr	r0, [pc, #428]	; (8017350 <RadioIrqProcess+0x320>)
 80171a4:	f000 fdc8 	bl	8017d38 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80171a8:	486a      	ldr	r0, [pc, #424]	; (8017354 <RadioIrqProcess+0x324>)
 80171aa:	f001 fbb1 	bl	8018910 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80171ae:	4b66      	ldr	r3, [pc, #408]	; (8017348 <RadioIrqProcess+0x318>)
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d036      	beq.n	8017224 <RadioIrqProcess+0x1f4>
 80171b6:	4b64      	ldr	r3, [pc, #400]	; (8017348 <RadioIrqProcess+0x318>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	689b      	ldr	r3, [r3, #8]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d031      	beq.n	8017224 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 80171c0:	4b5e      	ldr	r3, [pc, #376]	; (801733c <RadioIrqProcess+0x30c>)
 80171c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d10e      	bne.n	80171e8 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80171ca:	4b5f      	ldr	r3, [pc, #380]	; (8017348 <RadioIrqProcess+0x318>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	689c      	ldr	r4, [r3, #8]
 80171d0:	79fb      	ldrb	r3, [r7, #7]
 80171d2:	b299      	uxth	r1, r3
 80171d4:	4b59      	ldr	r3, [pc, #356]	; (801733c <RadioIrqProcess+0x30c>)
 80171d6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80171da:	b21a      	sxth	r2, r3
 80171dc:	4b57      	ldr	r3, [pc, #348]	; (801733c <RadioIrqProcess+0x30c>)
 80171de:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80171e2:	485b      	ldr	r0, [pc, #364]	; (8017350 <RadioIrqProcess+0x320>)
 80171e4:	47a0      	blx	r4
                break;
 80171e6:	e01e      	b.n	8017226 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80171e8:	4b54      	ldr	r3, [pc, #336]	; (801733c <RadioIrqProcess+0x30c>)
 80171ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171ec:	463a      	mov	r2, r7
 80171ee:	4611      	mov	r1, r2
 80171f0:	4618      	mov	r0, r3
 80171f2:	f001 fe11 	bl	8018e18 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80171f6:	4b54      	ldr	r3, [pc, #336]	; (8017348 <RadioIrqProcess+0x318>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	689c      	ldr	r4, [r3, #8]
 80171fc:	79fb      	ldrb	r3, [r7, #7]
 80171fe:	b299      	uxth	r1, r3
 8017200:	4b4e      	ldr	r3, [pc, #312]	; (801733c <RadioIrqProcess+0x30c>)
 8017202:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017206:	b218      	sxth	r0, r3
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801720e:	4a52      	ldr	r2, [pc, #328]	; (8017358 <RadioIrqProcess+0x328>)
 8017210:	fb82 c203 	smull	ip, r2, r2, r3
 8017214:	1192      	asrs	r2, r2, #6
 8017216:	17db      	asrs	r3, r3, #31
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	b25b      	sxtb	r3, r3
 801721c:	4602      	mov	r2, r0
 801721e:	484c      	ldr	r0, [pc, #304]	; (8017350 <RadioIrqProcess+0x320>)
 8017220:	47a0      	blx	r4
                break;
 8017222:	e000      	b.n	8017226 <RadioIrqProcess+0x1f6>
        }
 8017224:	bf00      	nop
        break;
 8017226:	e0ef      	b.n	8017408 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017228:	2000      	movs	r0, #0
 801722a:	f000 feb5 	bl	8017f98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801722e:	4b46      	ldr	r3, [pc, #280]	; (8017348 <RadioIrqProcess+0x318>)
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	2b00      	cmp	r3, #0
 8017234:	f000 80dd 	beq.w	80173f2 <RadioIrqProcess+0x3c2>
 8017238:	4b43      	ldr	r3, [pc, #268]	; (8017348 <RadioIrqProcess+0x318>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	699b      	ldr	r3, [r3, #24]
 801723e:	2b00      	cmp	r3, #0
 8017240:	f000 80d7 	beq.w	80173f2 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8017244:	4b40      	ldr	r3, [pc, #256]	; (8017348 <RadioIrqProcess+0x318>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	699b      	ldr	r3, [r3, #24]
 801724a:	2000      	movs	r0, #0
 801724c:	4798      	blx	r3
        break;
 801724e:	e0d0      	b.n	80173f2 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017250:	2000      	movs	r0, #0
 8017252:	f000 fea1 	bl	8017f98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017256:	4b3c      	ldr	r3, [pc, #240]	; (8017348 <RadioIrqProcess+0x318>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	2b00      	cmp	r3, #0
 801725c:	f000 80cb 	beq.w	80173f6 <RadioIrqProcess+0x3c6>
 8017260:	4b39      	ldr	r3, [pc, #228]	; (8017348 <RadioIrqProcess+0x318>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	699b      	ldr	r3, [r3, #24]
 8017266:	2b00      	cmp	r3, #0
 8017268:	f000 80c5 	beq.w	80173f6 <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 801726c:	4b36      	ldr	r3, [pc, #216]	; (8017348 <RadioIrqProcess+0x318>)
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	699b      	ldr	r3, [r3, #24]
 8017272:	2001      	movs	r0, #1
 8017274:	4798      	blx	r3
        break;
 8017276:	e0be      	b.n	80173f6 <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017278:	4b38      	ldr	r3, [pc, #224]	; (801735c <RadioIrqProcess+0x32c>)
 801727a:	2201      	movs	r2, #1
 801727c:	2100      	movs	r1, #0
 801727e:	2002      	movs	r0, #2
 8017280:	f002 ff9c 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017284:	f000 fd3e 	bl	8017d04 <SUBGRF_GetOperatingMode>
 8017288:	4603      	mov	r3, r0
 801728a:	2b04      	cmp	r3, #4
 801728c:	d11a      	bne.n	80172c4 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 801728e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017292:	482b      	ldr	r0, [pc, #172]	; (8017340 <RadioIrqProcess+0x310>)
 8017294:	f7fe fdf1 	bl	8015e7a <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017298:	482a      	ldr	r0, [pc, #168]	; (8017344 <RadioIrqProcess+0x314>)
 801729a:	f002 fd85 	bl	8019da8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801729e:	2000      	movs	r0, #0
 80172a0:	f000 fe7a 	bl	8017f98 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80172a4:	4b28      	ldr	r3, [pc, #160]	; (8017348 <RadioIrqProcess+0x318>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	f000 80a6 	beq.w	80173fa <RadioIrqProcess+0x3ca>
 80172ae:	4b26      	ldr	r3, [pc, #152]	; (8017348 <RadioIrqProcess+0x318>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	685b      	ldr	r3, [r3, #4]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	f000 80a0 	beq.w	80173fa <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 80172ba:	4b23      	ldr	r3, [pc, #140]	; (8017348 <RadioIrqProcess+0x318>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	685b      	ldr	r3, [r3, #4]
 80172c0:	4798      	blx	r3
        break;
 80172c2:	e09a      	b.n	80173fa <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80172c4:	f000 fd1e 	bl	8017d04 <SUBGRF_GetOperatingMode>
 80172c8:	4603      	mov	r3, r0
 80172ca:	2b05      	cmp	r3, #5
 80172cc:	f040 8095 	bne.w	80173fa <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 80172d0:	2101      	movs	r1, #1
 80172d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80172d6:	f7fe fdd0 	bl	8015e7a <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 80172da:	481c      	ldr	r0, [pc, #112]	; (801734c <RadioIrqProcess+0x31c>)
 80172dc:	f002 fd64 	bl	8019da8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80172e0:	2000      	movs	r0, #0
 80172e2:	f000 fe59 	bl	8017f98 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80172e6:	4b18      	ldr	r3, [pc, #96]	; (8017348 <RadioIrqProcess+0x318>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	f000 8085 	beq.w	80173fa <RadioIrqProcess+0x3ca>
 80172f0:	4b15      	ldr	r3, [pc, #84]	; (8017348 <RadioIrqProcess+0x318>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	68db      	ldr	r3, [r3, #12]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d07f      	beq.n	80173fa <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 80172fa:	4b13      	ldr	r3, [pc, #76]	; (8017348 <RadioIrqProcess+0x318>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	68db      	ldr	r3, [r3, #12]
 8017300:	4798      	blx	r3
        break;
 8017302:	e07a      	b.n	80173fa <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017304:	4b16      	ldr	r3, [pc, #88]	; (8017360 <RadioIrqProcess+0x330>)
 8017306:	2201      	movs	r2, #1
 8017308:	2100      	movs	r1, #0
 801730a:	2002      	movs	r0, #2
 801730c:	f002 ff56 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017310:	e07a      	b.n	8017408 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017312:	4b14      	ldr	r3, [pc, #80]	; (8017364 <RadioIrqProcess+0x334>)
 8017314:	2201      	movs	r2, #1
 8017316:	2100      	movs	r1, #0
 8017318:	2002      	movs	r0, #2
 801731a:	f002 ff4f 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801731e:	f001 fe28 	bl	8018f72 <RFW_Is_Init>
 8017322:	4603      	mov	r3, r0
 8017324:	2b01      	cmp	r3, #1
 8017326:	d16a      	bne.n	80173fe <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017328:	f001 fe59 	bl	8018fde <RFW_ReceivePayload>
        break;
 801732c:	e067      	b.n	80173fe <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801732e:	4b0e      	ldr	r3, [pc, #56]	; (8017368 <RadioIrqProcess+0x338>)
 8017330:	2201      	movs	r2, #1
 8017332:	2100      	movs	r1, #0
 8017334:	2002      	movs	r0, #2
 8017336:	f002 ff41 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 801733a:	e065      	b.n	8017408 <RadioIrqProcess+0x3d8>
 801733c:	200017c4 	.word	0x200017c4
 8017340:	48000400 	.word	0x48000400
 8017344:	2000181c 	.word	0x2000181c
 8017348:	20000ed8 	.word	0x20000ed8
 801734c:	20001834 	.word	0x20001834
 8017350:	20000dd8 	.word	0x20000dd8
 8017354:	200017e8 	.word	0x200017e8
 8017358:	10624dd3 	.word	0x10624dd3
 801735c:	0801afd0 	.word	0x0801afd0
 8017360:	0801afe4 	.word	0x0801afe4
 8017364:	0801aff0 	.word	0x0801aff0
 8017368:	0801affc 	.word	0x0801affc
        TimerStop( &RxTimeoutTimer );
 801736c:	4828      	ldr	r0, [pc, #160]	; (8017410 <RadioIrqProcess+0x3e0>)
 801736e:	f002 fd1b 	bl	8019da8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017372:	4b28      	ldr	r3, [pc, #160]	; (8017414 <RadioIrqProcess+0x3e4>)
 8017374:	785b      	ldrb	r3, [r3, #1]
 8017376:	f083 0301 	eor.w	r3, r3, #1
 801737a:	b2db      	uxtb	r3, r3
 801737c:	2b00      	cmp	r3, #0
 801737e:	d002      	beq.n	8017386 <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017380:	2000      	movs	r0, #0
 8017382:	f000 fe09 	bl	8017f98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017386:	4b24      	ldr	r3, [pc, #144]	; (8017418 <RadioIrqProcess+0x3e8>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d039      	beq.n	8017402 <RadioIrqProcess+0x3d2>
 801738e:	4b22      	ldr	r3, [pc, #136]	; (8017418 <RadioIrqProcess+0x3e8>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d034      	beq.n	8017402 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017398:	4b1f      	ldr	r3, [pc, #124]	; (8017418 <RadioIrqProcess+0x3e8>)
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	68db      	ldr	r3, [r3, #12]
 801739e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80173a0:	4b1e      	ldr	r3, [pc, #120]	; (801741c <RadioIrqProcess+0x3ec>)
 80173a2:	2201      	movs	r2, #1
 80173a4:	2100      	movs	r1, #0
 80173a6:	2002      	movs	r0, #2
 80173a8:	f002 ff08 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        break;
 80173ac:	e029      	b.n	8017402 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80173ae:	4b1c      	ldr	r3, [pc, #112]	; (8017420 <RadioIrqProcess+0x3f0>)
 80173b0:	2201      	movs	r2, #1
 80173b2:	2100      	movs	r1, #0
 80173b4:	2002      	movs	r0, #2
 80173b6:	f002 ff01 	bl	801a1bc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80173ba:	4b16      	ldr	r3, [pc, #88]	; (8017414 <RadioIrqProcess+0x3e4>)
 80173bc:	785b      	ldrb	r3, [r3, #1]
 80173be:	f083 0301 	eor.w	r3, r3, #1
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d002      	beq.n	80173ce <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 80173c8:	2000      	movs	r0, #0
 80173ca:	f000 fde5 	bl	8017f98 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80173ce:	4b12      	ldr	r3, [pc, #72]	; (8017418 <RadioIrqProcess+0x3e8>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d017      	beq.n	8017406 <RadioIrqProcess+0x3d6>
 80173d6:	4b10      	ldr	r3, [pc, #64]	; (8017418 <RadioIrqProcess+0x3e8>)
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	691b      	ldr	r3, [r3, #16]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d012      	beq.n	8017406 <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 80173e0:	4b0d      	ldr	r3, [pc, #52]	; (8017418 <RadioIrqProcess+0x3e8>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	691b      	ldr	r3, [r3, #16]
 80173e6:	4798      	blx	r3
        break;
 80173e8:	e00d      	b.n	8017406 <RadioIrqProcess+0x3d6>
        break;
 80173ea:	bf00      	nop
 80173ec:	e00c      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 80173ee:	bf00      	nop
 80173f0:	e00a      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 80173f2:	bf00      	nop
 80173f4:	e008      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 80173f6:	bf00      	nop
 80173f8:	e006      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 80173fa:	bf00      	nop
 80173fc:	e004      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 80173fe:	bf00      	nop
 8017400:	e002      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 8017402:	bf00      	nop
 8017404:	e000      	b.n	8017408 <RadioIrqProcess+0x3d8>
        break;
 8017406:	bf00      	nop
  }
}
 8017408:	bf00      	nop
 801740a:	370c      	adds	r7, #12
 801740c:	46bd      	mov	sp, r7
 801740e:	bd90      	pop	{r4, r7, pc}
 8017410:	20001834 	.word	0x20001834
 8017414:	200017c4 	.word	0x200017c4
 8017418:	20000ed8 	.word	0x20000ed8
 801741c:	0801b008 	.word	0x0801b008
 8017420:	0801b014 	.word	0x0801b014

08017424 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017424:	b580      	push	{r7, lr}
 8017426:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017428:	4b09      	ldr	r3, [pc, #36]	; (8017450 <RadioTxPrbs+0x2c>)
 801742a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801742e:	2101      	movs	r1, #1
 8017430:	4618      	mov	r0, r3
 8017432:	f001 fbb3 	bl	8018b9c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017436:	4b07      	ldr	r3, [pc, #28]	; (8017454 <RadioTxPrbs+0x30>)
 8017438:	212d      	movs	r1, #45	; 0x2d
 801743a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801743e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017440:	f000 fe6d 	bl	801811e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017444:	4804      	ldr	r0, [pc, #16]	; (8017458 <RadioTxPrbs+0x34>)
 8017446:	f000 fdc3 	bl	8017fd0 <SUBGRF_SetTx>
}
 801744a:	bf00      	nop
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	200017c4 	.word	0x200017c4
 8017454:	08016e2b 	.word	0x08016e2b
 8017458:	000fffff 	.word	0x000fffff

0801745c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b084      	sub	sp, #16
 8017460:	af00      	add	r7, sp, #0
 8017462:	4603      	mov	r3, r0
 8017464:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801746a:	4618      	mov	r0, r3
 801746c:	f001 fbbe 	bl	8018bec <SUBGRF_SetRfTxPower>
 8017470:	4603      	mov	r3, r0
 8017472:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017474:	7bfb      	ldrb	r3, [r7, #15]
 8017476:	2101      	movs	r1, #1
 8017478:	4618      	mov	r0, r3
 801747a:	f001 fb8f 	bl	8018b9c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801747e:	f000 fe45 	bl	801810c <SUBGRF_SetTxContinuousWave>
}
 8017482:	bf00      	nop
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}

0801748a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801748a:	b480      	push	{r7}
 801748c:	b089      	sub	sp, #36	; 0x24
 801748e:	af00      	add	r7, sp, #0
 8017490:	60f8      	str	r0, [r7, #12]
 8017492:	60b9      	str	r1, [r7, #8]
 8017494:	4613      	mov	r3, r2
 8017496:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017498:	2300      	movs	r3, #0
 801749a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801749c:	2300      	movs	r3, #0
 801749e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 80174a0:	2300      	movs	r3, #0
 80174a2:	61bb      	str	r3, [r7, #24]
 80174a4:	e011      	b.n	80174ca <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80174a6:	69bb      	ldr	r3, [r7, #24]
 80174a8:	68ba      	ldr	r2, [r7, #8]
 80174aa:	4413      	add	r3, r2
 80174ac:	781a      	ldrb	r2, [r3, #0]
 80174ae:	69bb      	ldr	r3, [r7, #24]
 80174b0:	68b9      	ldr	r1, [r7, #8]
 80174b2:	440b      	add	r3, r1
 80174b4:	43d2      	mvns	r2, r2
 80174b6:	b2d2      	uxtb	r2, r2
 80174b8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80174ba:	69bb      	ldr	r3, [r7, #24]
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	4413      	add	r3, r2
 80174c0:	2200      	movs	r2, #0
 80174c2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80174c4:	69bb      	ldr	r3, [r7, #24]
 80174c6:	3301      	adds	r3, #1
 80174c8:	61bb      	str	r3, [r7, #24]
 80174ca:	79fb      	ldrb	r3, [r7, #7]
 80174cc:	69ba      	ldr	r2, [r7, #24]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	dbe9      	blt.n	80174a6 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80174d2:	2300      	movs	r3, #0
 80174d4:	61bb      	str	r3, [r7, #24]
 80174d6:	e049      	b.n	801756c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80174d8:	69bb      	ldr	r3, [r7, #24]
 80174da:	425a      	negs	r2, r3
 80174dc:	f003 0307 	and.w	r3, r3, #7
 80174e0:	f002 0207 	and.w	r2, r2, #7
 80174e4:	bf58      	it	pl
 80174e6:	4253      	negpl	r3, r2
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	f1c3 0307 	rsb	r3, r3, #7
 80174ee:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80174f0:	69bb      	ldr	r3, [r7, #24]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	da00      	bge.n	80174f8 <payload_integration+0x6e>
 80174f6:	3307      	adds	r3, #7
 80174f8:	10db      	asrs	r3, r3, #3
 80174fa:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80174fc:	69bb      	ldr	r3, [r7, #24]
 80174fe:	3301      	adds	r3, #1
 8017500:	425a      	negs	r2, r3
 8017502:	f003 0307 	and.w	r3, r3, #7
 8017506:	f002 0207 	and.w	r2, r2, #7
 801750a:	bf58      	it	pl
 801750c:	4253      	negpl	r3, r2
 801750e:	b2db      	uxtb	r3, r3
 8017510:	f1c3 0307 	rsb	r3, r3, #7
 8017514:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	3301      	adds	r3, #1
 801751a:	2b00      	cmp	r3, #0
 801751c:	da00      	bge.n	8017520 <payload_integration+0x96>
 801751e:	3307      	adds	r3, #7
 8017520:	10db      	asrs	r3, r3, #3
 8017522:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017524:	7dbb      	ldrb	r3, [r7, #22]
 8017526:	68ba      	ldr	r2, [r7, #8]
 8017528:	4413      	add	r3, r2
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	461a      	mov	r2, r3
 801752e:	7dfb      	ldrb	r3, [r7, #23]
 8017530:	fa42 f303 	asr.w	r3, r2, r3
 8017534:	b2db      	uxtb	r3, r3
 8017536:	f003 0301 	and.w	r3, r3, #1
 801753a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801753c:	7ffa      	ldrb	r2, [r7, #31]
 801753e:	7cfb      	ldrb	r3, [r7, #19]
 8017540:	4053      	eors	r3, r2
 8017542:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017544:	7d3b      	ldrb	r3, [r7, #20]
 8017546:	68fa      	ldr	r2, [r7, #12]
 8017548:	4413      	add	r3, r2
 801754a:	781b      	ldrb	r3, [r3, #0]
 801754c:	b25a      	sxtb	r2, r3
 801754e:	7ff9      	ldrb	r1, [r7, #31]
 8017550:	7d7b      	ldrb	r3, [r7, #21]
 8017552:	fa01 f303 	lsl.w	r3, r1, r3
 8017556:	b25b      	sxtb	r3, r3
 8017558:	4313      	orrs	r3, r2
 801755a:	b259      	sxtb	r1, r3
 801755c:	7d3b      	ldrb	r3, [r7, #20]
 801755e:	68fa      	ldr	r2, [r7, #12]
 8017560:	4413      	add	r3, r2
 8017562:	b2ca      	uxtb	r2, r1
 8017564:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017566:	69bb      	ldr	r3, [r7, #24]
 8017568:	3301      	adds	r3, #1
 801756a:	61bb      	str	r3, [r7, #24]
 801756c:	79fb      	ldrb	r3, [r7, #7]
 801756e:	00db      	lsls	r3, r3, #3
 8017570:	69ba      	ldr	r2, [r7, #24]
 8017572:	429a      	cmp	r2, r3
 8017574:	dbb0      	blt.n	80174d8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017576:	7ffb      	ldrb	r3, [r7, #31]
 8017578:	01db      	lsls	r3, r3, #7
 801757a:	b25a      	sxtb	r2, r3
 801757c:	7ffb      	ldrb	r3, [r7, #31]
 801757e:	019b      	lsls	r3, r3, #6
 8017580:	b25b      	sxtb	r3, r3
 8017582:	4313      	orrs	r3, r2
 8017584:	b25b      	sxtb	r3, r3
 8017586:	7ffa      	ldrb	r2, [r7, #31]
 8017588:	2a00      	cmp	r2, #0
 801758a:	d101      	bne.n	8017590 <payload_integration+0x106>
 801758c:	2220      	movs	r2, #32
 801758e:	e000      	b.n	8017592 <payload_integration+0x108>
 8017590:	2200      	movs	r2, #0
 8017592:	4313      	orrs	r3, r2
 8017594:	b259      	sxtb	r1, r3
 8017596:	79fb      	ldrb	r3, [r7, #7]
 8017598:	68fa      	ldr	r2, [r7, #12]
 801759a:	4413      	add	r3, r2
 801759c:	b2ca      	uxtb	r2, r1
 801759e:	701a      	strb	r2, [r3, #0]
}
 80175a0:	bf00      	nop
 80175a2:	3724      	adds	r7, #36	; 0x24
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bc80      	pop	{r7}
 80175a8:	4770      	bx	lr
	...

080175ac <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b08c      	sub	sp, #48	; 0x30
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	60b9      	str	r1, [r7, #8]
 80175b4:	607a      	str	r2, [r7, #4]
 80175b6:	603b      	str	r3, [r7, #0]
 80175b8:	4603      	mov	r3, r0
 80175ba:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80175bc:	2300      	movs	r3, #0
 80175be:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80175c0:	2300      	movs	r3, #0
 80175c2:	61fb      	str	r3, [r7, #28]
 80175c4:	2300      	movs	r3, #0
 80175c6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80175c8:	f001 fccd 	bl	8018f66 <RFW_DeInit>

    if( rxContinuous != 0 )
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d001      	beq.n	80175d6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80175d2:	2300      	movs	r3, #0
 80175d4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	bf14      	ite	ne
 80175dc:	2301      	movne	r3, #1
 80175de:	2300      	moveq	r3, #0
 80175e0:	b2da      	uxtb	r2, r3
 80175e2:	4ba9      	ldr	r3, [pc, #676]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80175e4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80175e6:	7bfb      	ldrb	r3, [r7, #15]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d003      	beq.n	80175f4 <RadioSetRxGenericConfig+0x48>
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	f000 80e8 	beq.w	80177c2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80175f2:	e1a0      	b.n	8017936 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	68db      	ldr	r3, [r3, #12]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d003      	beq.n	8017604 <RadioSetRxGenericConfig+0x58>
 80175fc:	68bb      	ldr	r3, [r7, #8]
 80175fe:	691b      	ldr	r3, [r3, #16]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d102      	bne.n	801760a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017604:	f04f 33ff 	mov.w	r3, #4294967295
 8017608:	e196      	b.n	8017938 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	7d5b      	ldrb	r3, [r3, #21]
 801760e:	2b08      	cmp	r3, #8
 8017610:	d902      	bls.n	8017618 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017612:	f04f 33ff 	mov.w	r3, #4294967295
 8017616:	e18f      	b.n	8017938 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017618:	2300      	movs	r3, #0
 801761a:	62bb      	str	r3, [r7, #40]	; 0x28
 801761c:	e00d      	b.n	801763a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	699a      	ldr	r2, [r3, #24]
 8017622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017624:	4413      	add	r3, r2
 8017626:	7819      	ldrb	r1, [r3, #0]
 8017628:	f107 021c 	add.w	r2, r7, #28
 801762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762e:	4413      	add	r3, r2
 8017630:	460a      	mov	r2, r1
 8017632:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017636:	3301      	adds	r3, #1
 8017638:	62bb      	str	r3, [r7, #40]	; 0x28
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	7d5b      	ldrb	r3, [r3, #21]
 801763e:	461a      	mov	r2, r3
 8017640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017642:	4293      	cmp	r3, r2
 8017644:	dbeb      	blt.n	801761e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	2b00      	cmp	r3, #0
 801764c:	bf14      	ite	ne
 801764e:	2301      	movne	r3, #1
 8017650:	2300      	moveq	r3, #0
 8017652:	b2db      	uxtb	r3, r3
 8017654:	4618      	mov	r0, r3
 8017656:	f000 fd6b 	bl	8018130 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801765a:	4b8b      	ldr	r3, [pc, #556]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801765c:	2200      	movs	r2, #0
 801765e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	68db      	ldr	r3, [r3, #12]
 8017666:	4a88      	ldr	r2, [pc, #544]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017668:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	791a      	ldrb	r2, [r3, #4]
 801766e:	4b86      	ldr	r3, [pc, #536]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	689b      	ldr	r3, [r3, #8]
 8017678:	4618      	mov	r0, r3
 801767a:	f001 fba5 	bl	8018dc8 <SUBGRF_GetFskBandwidthRegValue>
 801767e:	4603      	mov	r3, r0
 8017680:	461a      	mov	r2, r3
 8017682:	4b81      	ldr	r3, [pc, #516]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017688:	4b7f      	ldr	r3, [pc, #508]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801768a:	2200      	movs	r2, #0
 801768c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801768e:	68bb      	ldr	r3, [r7, #8]
 8017690:	691b      	ldr	r3, [r3, #16]
 8017692:	b29b      	uxth	r3, r3
 8017694:	00db      	lsls	r3, r3, #3
 8017696:	b29a      	uxth	r2, r3
 8017698:	4b7b      	ldr	r3, [pc, #492]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801769a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	7d1a      	ldrb	r2, [r3, #20]
 80176a0:	4b79      	ldr	r3, [pc, #484]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80176a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	7d5b      	ldrb	r3, [r3, #21]
 80176a8:	00db      	lsls	r3, r3, #3
 80176aa:	b2da      	uxtb	r2, r3
 80176ac:	4b76      	ldr	r3, [pc, #472]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80176ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80176b6:	4b74      	ldr	r3, [pc, #464]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80176b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80176ba:	68bb      	ldr	r3, [r7, #8]
 80176bc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d105      	bne.n	80176d0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	69db      	ldr	r3, [r3, #28]
 80176c8:	b2da      	uxtb	r2, r3
 80176ca:	4b6f      	ldr	r3, [pc, #444]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80176cc:	759a      	strb	r2, [r3, #22]
 80176ce:	e00b      	b.n	80176e8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80176d6:	2b02      	cmp	r3, #2
 80176d8:	d103      	bne.n	80176e2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80176da:	4b6b      	ldr	r3, [pc, #428]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80176dc:	22ff      	movs	r2, #255	; 0xff
 80176de:	759a      	strb	r2, [r3, #22]
 80176e0:	e002      	b.n	80176e8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80176e2:	4b69      	ldr	r3, [pc, #420]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80176e4:	22ff      	movs	r2, #255	; 0xff
 80176e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80176e8:	68bb      	ldr	r3, [r7, #8]
 80176ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80176ee:	2b02      	cmp	r3, #2
 80176f0:	d004      	beq.n	80176fc <RadioSetRxGenericConfig+0x150>
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80176f8:	2b02      	cmp	r3, #2
 80176fa:	d12d      	bne.n	8017758 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017702:	2bf1      	cmp	r3, #241	; 0xf1
 8017704:	d00c      	beq.n	8017720 <RadioSetRxGenericConfig+0x174>
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801770c:	2bf2      	cmp	r3, #242	; 0xf2
 801770e:	d007      	beq.n	8017720 <RadioSetRxGenericConfig+0x174>
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017716:	2b01      	cmp	r3, #1
 8017718:	d002      	beq.n	8017720 <RadioSetRxGenericConfig+0x174>
            return -1;
 801771a:	f04f 33ff 	mov.w	r3, #4294967295
 801771e:	e10b      	b.n	8017938 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017720:	2300      	movs	r3, #0
 8017722:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017728:	4b58      	ldr	r3, [pc, #352]	; (801788c <RadioSetRxGenericConfig+0x2e0>)
 801772a:	6819      	ldr	r1, [r3, #0]
 801772c:	f107 0310 	add.w	r3, r7, #16
 8017730:	4a57      	ldr	r2, [pc, #348]	; (8017890 <RadioSetRxGenericConfig+0x2e4>)
 8017732:	4618      	mov	r0, r3
 8017734:	f001 fc0a 	bl	8018f4c <RFW_Init>
 8017738:	4603      	mov	r3, r0
 801773a:	2b00      	cmp	r3, #0
 801773c:	d002      	beq.n	8017744 <RadioSetRxGenericConfig+0x198>
            return -1;
 801773e:	f04f 33ff 	mov.w	r3, #4294967295
 8017742:	e0f9      	b.n	8017938 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017744:	4b50      	ldr	r3, [pc, #320]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017746:	2200      	movs	r2, #0
 8017748:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801774a:	4b4f      	ldr	r3, [pc, #316]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801774c:	2201      	movs	r2, #1
 801774e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017750:	4b4d      	ldr	r3, [pc, #308]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017752:	2200      	movs	r2, #0
 8017754:	755a      	strb	r2, [r3, #21]
        {
 8017756:	e00e      	b.n	8017776 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801775e:	4b4a      	ldr	r3, [pc, #296]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017760:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017768:	4b47      	ldr	r3, [pc, #284]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801776a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017772:	4b45      	ldr	r3, [pc, #276]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017774:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017776:	f7ff fa6c 	bl	8016c52 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801777a:	2000      	movs	r0, #0
 801777c:	f7fe fbf8 	bl	8015f70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017780:	4844      	ldr	r0, [pc, #272]	; (8017894 <RadioSetRxGenericConfig+0x2e8>)
 8017782:	f000 ff03 	bl	801858c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017786:	4844      	ldr	r0, [pc, #272]	; (8017898 <RadioSetRxGenericConfig+0x2ec>)
 8017788:	f000 ffcc 	bl	8018724 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801778c:	f107 031c 	add.w	r3, r7, #28
 8017790:	4618      	mov	r0, r3
 8017792:	f000 fb06 	bl	8017da2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017796:	68bb      	ldr	r3, [r7, #8]
 8017798:	8c1b      	ldrh	r3, [r3, #32]
 801779a:	4618      	mov	r0, r3
 801779c:	f000 fb50 	bl	8017e40 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80177a4:	4618      	mov	r0, r3
 80177a6:	f000 fb2b 	bl	8017e00 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80177b0:	fb02 f203 	mul.w	r2, r2, r3
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	68db      	ldr	r3, [r3, #12]
 80177b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80177bc:	4a32      	ldr	r2, [pc, #200]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 80177be:	6093      	str	r3, [r2, #8]
        break;
 80177c0:	e0b9      	b.n	8017936 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d102      	bne.n	80177d0 <RadioSetRxGenericConfig+0x224>
            return -1;
 80177ca:	f04f 33ff 	mov.w	r3, #4294967295
 80177ce:	e0b3      	b.n	8017938 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80177d0:	68bb      	ldr	r3, [r7, #8]
 80177d2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80177d6:	2b01      	cmp	r3, #1
 80177d8:	d104      	bne.n	80177e4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	69db      	ldr	r3, [r3, #28]
 80177de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80177e2:	e002      	b.n	80177ea <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80177e4:	23ff      	movs	r3, #255	; 0xff
 80177e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	bf14      	ite	ne
 80177f2:	2301      	movne	r3, #1
 80177f4:	2300      	moveq	r3, #0
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	4618      	mov	r0, r3
 80177fa:	f000 fc99 	bl	8018130 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	b2db      	uxtb	r3, r3
 8017802:	4618      	mov	r0, r3
 8017804:	f000 fca3 	bl	801814e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017808:	4b1f      	ldr	r3, [pc, #124]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801780a:	2201      	movs	r2, #1
 801780c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017816:	4b1c      	ldr	r3, [pc, #112]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017822:	4b19      	ldr	r3, [pc, #100]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801782e:	4b16      	ldr	r3, [pc, #88]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017830:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801783a:	2b02      	cmp	r3, #2
 801783c:	d010      	beq.n	8017860 <RadioSetRxGenericConfig+0x2b4>
 801783e:	2b02      	cmp	r3, #2
 8017840:	dc2c      	bgt.n	801789c <RadioSetRxGenericConfig+0x2f0>
 8017842:	2b00      	cmp	r3, #0
 8017844:	d002      	beq.n	801784c <RadioSetRxGenericConfig+0x2a0>
 8017846:	2b01      	cmp	r3, #1
 8017848:	d005      	beq.n	8017856 <RadioSetRxGenericConfig+0x2aa>
            break;
 801784a:	e027      	b.n	801789c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801784c:	4b0e      	ldr	r3, [pc, #56]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 801784e:	2200      	movs	r2, #0
 8017850:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017854:	e023      	b.n	801789e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017856:	4b0c      	ldr	r3, [pc, #48]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017858:	2201      	movs	r2, #1
 801785a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801785e:	e01e      	b.n	801789e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017866:	2b0b      	cmp	r3, #11
 8017868:	d004      	beq.n	8017874 <RadioSetRxGenericConfig+0x2c8>
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017870:	2b0c      	cmp	r3, #12
 8017872:	d104      	bne.n	801787e <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017874:	4b04      	ldr	r3, [pc, #16]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017876:	2201      	movs	r2, #1
 8017878:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801787c:	e00f      	b.n	801789e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801787e:	4b02      	ldr	r3, [pc, #8]	; (8017888 <RadioSetRxGenericConfig+0x2dc>)
 8017880:	2200      	movs	r2, #0
 8017882:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017886:	e00a      	b.n	801789e <RadioSetRxGenericConfig+0x2f2>
 8017888:	200017c4 	.word	0x200017c4
 801788c:	20000ed8 	.word	0x20000ed8
 8017890:	20001834 	.word	0x20001834
 8017894:	200017fc 	.word	0x200017fc
 8017898:	200017d2 	.word	0x200017d2
            break;
 801789c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801789e:	4b28      	ldr	r3, [pc, #160]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178a0:	2201      	movs	r2, #1
 80178a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80178a8:	4b25      	ldr	r3, [pc, #148]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80178b2:	4b23      	ldr	r3, [pc, #140]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80178b6:	4a22      	ldr	r2, [pc, #136]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80178bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80178be:	68bb      	ldr	r3, [r7, #8]
 80178c0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80178c4:	4b1e      	ldr	r3, [pc, #120]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80178d0:	4b1b      	ldr	r3, [pc, #108]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80178d6:	f7ff f9bc 	bl	8016c52 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80178da:	2001      	movs	r0, #1
 80178dc:	f7fe fb48 	bl	8015f70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80178e0:	4818      	ldr	r0, [pc, #96]	; (8017944 <RadioSetRxGenericConfig+0x398>)
 80178e2:	f000 fe53 	bl	801858c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178e6:	4818      	ldr	r0, [pc, #96]	; (8017948 <RadioSetRxGenericConfig+0x39c>)
 80178e8:	f000 ff1c 	bl	8018724 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80178ec:	4b14      	ldr	r3, [pc, #80]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 80178ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80178f2:	2b01      	cmp	r3, #1
 80178f4:	d10d      	bne.n	8017912 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80178f6:	f240 7036 	movw	r0, #1846	; 0x736
 80178fa:	f001 f86f 	bl	80189dc <SUBGRF_ReadRegister>
 80178fe:	4603      	mov	r3, r0
 8017900:	f023 0304 	bic.w	r3, r3, #4
 8017904:	b2db      	uxtb	r3, r3
 8017906:	4619      	mov	r1, r3
 8017908:	f240 7036 	movw	r0, #1846	; 0x736
 801790c:	f001 f852 	bl	80189b4 <SUBGRF_WriteRegister>
 8017910:	e00c      	b.n	801792c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8017912:	f240 7036 	movw	r0, #1846	; 0x736
 8017916:	f001 f861 	bl	80189dc <SUBGRF_ReadRegister>
 801791a:	4603      	mov	r3, r0
 801791c:	f043 0304 	orr.w	r3, r3, #4
 8017920:	b2db      	uxtb	r3, r3
 8017922:	4619      	mov	r1, r3
 8017924:	f240 7036 	movw	r0, #1846	; 0x736
 8017928:	f001 f844 	bl	80189b4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801792c:	4b04      	ldr	r3, [pc, #16]	; (8017940 <RadioSetRxGenericConfig+0x394>)
 801792e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017932:	609a      	str	r2, [r3, #8]
        break;
 8017934:	bf00      	nop
    }
    return status;
 8017936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017938:	4618      	mov	r0, r3
 801793a:	3730      	adds	r7, #48	; 0x30
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}
 8017940:	200017c4 	.word	0x200017c4
 8017944:	200017fc 	.word	0x200017fc
 8017948:	200017d2 	.word	0x200017d2

0801794c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b08a      	sub	sp, #40	; 0x28
 8017950:	af00      	add	r7, sp, #0
 8017952:	60b9      	str	r1, [r7, #8]
 8017954:	607b      	str	r3, [r7, #4]
 8017956:	4603      	mov	r3, r0
 8017958:	73fb      	strb	r3, [r7, #15]
 801795a:	4613      	mov	r3, r2
 801795c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801795e:	2300      	movs	r3, #0
 8017960:	61fb      	str	r3, [r7, #28]
 8017962:	2300      	movs	r3, #0
 8017964:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017966:	f001 fafe 	bl	8018f66 <RFW_DeInit>
    switch( modem )
 801796a:	7bfb      	ldrb	r3, [r7, #15]
 801796c:	2b02      	cmp	r3, #2
 801796e:	f000 8144 	beq.w	8017bfa <RadioSetTxGenericConfig+0x2ae>
 8017972:	2b02      	cmp	r3, #2
 8017974:	f300 8160 	bgt.w	8017c38 <RadioSetTxGenericConfig+0x2ec>
 8017978:	2b00      	cmp	r3, #0
 801797a:	d003      	beq.n	8017984 <RadioSetTxGenericConfig+0x38>
 801797c:	2b01      	cmp	r3, #1
 801797e:	f000 80b7 	beq.w	8017af0 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8017982:	e159      	b.n	8017c38 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	689b      	ldr	r3, [r3, #8]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d003      	beq.n	8017994 <RadioSetTxGenericConfig+0x48>
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	691b      	ldr	r3, [r3, #16]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d102      	bne.n	801799a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8017994:	f04f 33ff 	mov.w	r3, #4294967295
 8017998:	e163      	b.n	8017c62 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801799a:	68bb      	ldr	r3, [r7, #8]
 801799c:	7d1b      	ldrb	r3, [r3, #20]
 801799e:	2b08      	cmp	r3, #8
 80179a0:	d902      	bls.n	80179a8 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80179a2:	f04f 33ff 	mov.w	r3, #4294967295
 80179a6:	e15c      	b.n	8017c62 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80179a8:	2300      	movs	r3, #0
 80179aa:	627b      	str	r3, [r7, #36]	; 0x24
 80179ac:	e00d      	b.n	80179ca <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80179ae:	68bb      	ldr	r3, [r7, #8]
 80179b0:	699a      	ldr	r2, [r3, #24]
 80179b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b4:	4413      	add	r3, r2
 80179b6:	7819      	ldrb	r1, [r3, #0]
 80179b8:	f107 021c 	add.w	r2, r7, #28
 80179bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179be:	4413      	add	r3, r2
 80179c0:	460a      	mov	r2, r1
 80179c2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80179c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c6:	3301      	adds	r3, #1
 80179c8:	627b      	str	r3, [r7, #36]	; 0x24
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	7d1b      	ldrb	r3, [r3, #20]
 80179ce:	461a      	mov	r2, r3
 80179d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d2:	4293      	cmp	r3, r2
 80179d4:	dbeb      	blt.n	80179ae <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80179d6:	4ba5      	ldr	r3, [pc, #660]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 80179d8:	2200      	movs	r2, #0
 80179da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	689b      	ldr	r3, [r3, #8]
 80179e2:	4aa2      	ldr	r2, [pc, #648]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 80179e4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	781a      	ldrb	r2, [r3, #0]
 80179ea:	4ba0      	ldr	r3, [pc, #640]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 80179ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80179f0:	68bb      	ldr	r3, [r7, #8]
 80179f2:	685b      	ldr	r3, [r3, #4]
 80179f4:	4618      	mov	r0, r3
 80179f6:	f001 f9e7 	bl	8018dc8 <SUBGRF_GetFskBandwidthRegValue>
 80179fa:	4603      	mov	r3, r0
 80179fc:	461a      	mov	r2, r3
 80179fe:	4b9b      	ldr	r3, [pc, #620]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	68db      	ldr	r3, [r3, #12]
 8017a08:	4a98      	ldr	r2, [pc, #608]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a0a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017a0c:	4b97      	ldr	r3, [pc, #604]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	691b      	ldr	r3, [r3, #16]
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	00db      	lsls	r3, r3, #3
 8017a1a:	b29a      	uxth	r2, r3
 8017a1c:	4b93      	ldr	r3, [pc, #588]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a1e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8017a20:	4b92      	ldr	r3, [pc, #584]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a22:	2204      	movs	r2, #4
 8017a24:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017a26:	68bb      	ldr	r3, [r7, #8]
 8017a28:	7d1b      	ldrb	r3, [r3, #20]
 8017a2a:	00db      	lsls	r3, r3, #3
 8017a2c:	b2da      	uxtb	r2, r3
 8017a2e:	4b8f      	ldr	r3, [pc, #572]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a30:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8017a32:	4b8e      	ldr	r3, [pc, #568]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a34:	2200      	movs	r2, #0
 8017a36:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017a3e:	2b02      	cmp	r3, #2
 8017a40:	d003      	beq.n	8017a4a <RadioSetTxGenericConfig+0xfe>
 8017a42:	68bb      	ldr	r3, [r7, #8]
 8017a44:	7f9b      	ldrb	r3, [r3, #30]
 8017a46:	2b02      	cmp	r3, #2
 8017a48:	d12a      	bne.n	8017aa0 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	7fdb      	ldrb	r3, [r3, #31]
 8017a4e:	2bf1      	cmp	r3, #241	; 0xf1
 8017a50:	d00a      	beq.n	8017a68 <RadioSetTxGenericConfig+0x11c>
 8017a52:	68bb      	ldr	r3, [r7, #8]
 8017a54:	7fdb      	ldrb	r3, [r3, #31]
 8017a56:	2bf2      	cmp	r3, #242	; 0xf2
 8017a58:	d006      	beq.n	8017a68 <RadioSetTxGenericConfig+0x11c>
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	7fdb      	ldrb	r3, [r3, #31]
 8017a5e:	2b01      	cmp	r3, #1
 8017a60:	d002      	beq.n	8017a68 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8017a62:	f04f 33ff 	mov.w	r3, #4294967295
 8017a66:	e0fc      	b.n	8017c62 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8017a68:	2301      	movs	r3, #1
 8017a6a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8017a6c:	68bb      	ldr	r3, [r7, #8]
 8017a6e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8017a70:	4b7f      	ldr	r3, [pc, #508]	; (8017c70 <RadioSetTxGenericConfig+0x324>)
 8017a72:	6819      	ldr	r1, [r3, #0]
 8017a74:	f107 0310 	add.w	r3, r7, #16
 8017a78:	4a7e      	ldr	r2, [pc, #504]	; (8017c74 <RadioSetTxGenericConfig+0x328>)
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f001 fa66 	bl	8018f4c <RFW_Init>
 8017a80:	4603      	mov	r3, r0
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d002      	beq.n	8017a8c <RadioSetTxGenericConfig+0x140>
              return -1;
 8017a86:	f04f 33ff 	mov.w	r3, #4294967295
 8017a8a:	e0ea      	b.n	8017c62 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017a8c:	4b77      	ldr	r3, [pc, #476]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a8e:	2200      	movs	r2, #0
 8017a90:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8017a92:	4b76      	ldr	r3, [pc, #472]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a94:	2201      	movs	r2, #1
 8017a96:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017a98:	4b74      	ldr	r3, [pc, #464]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	755a      	strb	r2, [r3, #21]
        {
 8017a9e:	e00c      	b.n	8017aba <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017aa0:	68bb      	ldr	r3, [r7, #8]
 8017aa2:	7fda      	ldrb	r2, [r3, #31]
 8017aa4:	4b71      	ldr	r3, [pc, #452]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017aa6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017aae:	4b6f      	ldr	r3, [pc, #444]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017ab0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	7f9a      	ldrb	r2, [r3, #30]
 8017ab6:	4b6d      	ldr	r3, [pc, #436]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017ab8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017aba:	f7ff f8ca 	bl	8016c52 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017abe:	2000      	movs	r0, #0
 8017ac0:	f7fe fa56 	bl	8015f70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017ac4:	486c      	ldr	r0, [pc, #432]	; (8017c78 <RadioSetTxGenericConfig+0x32c>)
 8017ac6:	f000 fd61 	bl	801858c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017aca:	486c      	ldr	r0, [pc, #432]	; (8017c7c <RadioSetTxGenericConfig+0x330>)
 8017acc:	f000 fe2a 	bl	8018724 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017ad0:	f107 031c 	add.w	r3, r7, #28
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	f000 f964 	bl	8017da2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	8b9b      	ldrh	r3, [r3, #28]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f000 f9ae 	bl	8017e40 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	8c1b      	ldrh	r3, [r3, #32]
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f000 f989 	bl	8017e00 <SUBGRF_SetCrcPolynomial>
        break;
 8017aee:	e0a4      	b.n	8017c3a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017af0:	4b5e      	ldr	r3, [pc, #376]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017af2:	2201      	movs	r2, #1
 8017af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017af8:	68bb      	ldr	r3, [r7, #8]
 8017afa:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8017afe:	4b5b      	ldr	r3, [pc, #364]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8017b0a:	4b58      	ldr	r3, [pc, #352]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017b10:	68bb      	ldr	r3, [r7, #8]
 8017b12:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017b16:	4b55      	ldr	r3, [pc, #340]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017b22:	2b02      	cmp	r3, #2
 8017b24:	d010      	beq.n	8017b48 <RadioSetTxGenericConfig+0x1fc>
 8017b26:	2b02      	cmp	r3, #2
 8017b28:	dc22      	bgt.n	8017b70 <RadioSetTxGenericConfig+0x224>
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d002      	beq.n	8017b34 <RadioSetTxGenericConfig+0x1e8>
 8017b2e:	2b01      	cmp	r3, #1
 8017b30:	d005      	beq.n	8017b3e <RadioSetTxGenericConfig+0x1f2>
            break;
 8017b32:	e01d      	b.n	8017b70 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017b34:	4b4d      	ldr	r3, [pc, #308]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b36:	2200      	movs	r2, #0
 8017b38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017b3c:	e019      	b.n	8017b72 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017b3e:	4b4b      	ldr	r3, [pc, #300]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b40:	2201      	movs	r2, #1
 8017b42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017b46:	e014      	b.n	8017b72 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b4e:	2b0b      	cmp	r3, #11
 8017b50:	d004      	beq.n	8017b5c <RadioSetTxGenericConfig+0x210>
 8017b52:	68bb      	ldr	r3, [r7, #8]
 8017b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b58:	2b0c      	cmp	r3, #12
 8017b5a:	d104      	bne.n	8017b66 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017b5c:	4b43      	ldr	r3, [pc, #268]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b5e:	2201      	movs	r2, #1
 8017b60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017b64:	e005      	b.n	8017b72 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017b66:	4b41      	ldr	r3, [pc, #260]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b68:	2200      	movs	r2, #0
 8017b6a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017b6e:	e000      	b.n	8017b72 <RadioSetTxGenericConfig+0x226>
            break;
 8017b70:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017b72:	4b3e      	ldr	r3, [pc, #248]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b74:	2201      	movs	r2, #1
 8017b76:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017b7c:	4b3b      	ldr	r3, [pc, #236]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b7e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8017b86:	4b39      	ldr	r3, [pc, #228]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b88:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017b8a:	68bb      	ldr	r3, [r7, #8]
 8017b8c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8017b90:	4b36      	ldr	r3, [pc, #216]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b92:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017b9c:	4b33      	ldr	r3, [pc, #204]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017ba2:	f7ff f856 	bl	8016c52 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017ba6:	2001      	movs	r0, #1
 8017ba8:	f7fe f9e2 	bl	8015f70 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017bac:	4832      	ldr	r0, [pc, #200]	; (8017c78 <RadioSetTxGenericConfig+0x32c>)
 8017bae:	f000 fced 	bl	801858c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bb2:	4832      	ldr	r0, [pc, #200]	; (8017c7c <RadioSetTxGenericConfig+0x330>)
 8017bb4:	f000 fdb6 	bl	8018724 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8017bb8:	4b2c      	ldr	r3, [pc, #176]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017bbe:	2b06      	cmp	r3, #6
 8017bc0:	d10d      	bne.n	8017bde <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8017bc2:	f640 0089 	movw	r0, #2185	; 0x889
 8017bc6:	f000 ff09 	bl	80189dc <SUBGRF_ReadRegister>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	f023 0304 	bic.w	r3, r3, #4
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	4619      	mov	r1, r3
 8017bd4:	f640 0089 	movw	r0, #2185	; 0x889
 8017bd8:	f000 feec 	bl	80189b4 <SUBGRF_WriteRegister>
        break;
 8017bdc:	e02d      	b.n	8017c3a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8017bde:	f640 0089 	movw	r0, #2185	; 0x889
 8017be2:	f000 fefb 	bl	80189dc <SUBGRF_ReadRegister>
 8017be6:	4603      	mov	r3, r0
 8017be8:	f043 0304 	orr.w	r3, r3, #4
 8017bec:	b2db      	uxtb	r3, r3
 8017bee:	4619      	mov	r1, r3
 8017bf0:	f640 0089 	movw	r0, #2185	; 0x889
 8017bf4:	f000 fede 	bl	80189b4 <SUBGRF_WriteRegister>
        break;
 8017bf8:	e01f      	b.n	8017c3a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8017bfa:	68bb      	ldr	r3, [r7, #8]
 8017bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d004      	beq.n	8017c0c <RadioSetTxGenericConfig+0x2c0>
 8017c02:	68bb      	ldr	r3, [r7, #8]
 8017c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017c0a:	d902      	bls.n	8017c12 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8017c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c10:	e027      	b.n	8017c62 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8017c12:	2002      	movs	r0, #2
 8017c14:	f7fe f9ac 	bl	8015f70 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017c18:	4b14      	ldr	r3, [pc, #80]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017c1a:	2202      	movs	r2, #2
 8017c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c24:	4a11      	ldr	r2, [pc, #68]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017c26:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017c28:	4b10      	ldr	r3, [pc, #64]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017c2a:	2216      	movs	r2, #22
 8017c2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017c30:	4811      	ldr	r0, [pc, #68]	; (8017c78 <RadioSetTxGenericConfig+0x32c>)
 8017c32:	f000 fcab 	bl	801858c <SUBGRF_SetModulationParams>
        break;
 8017c36:	e000      	b.n	8017c3a <RadioSetTxGenericConfig+0x2ee>
        break;
 8017c38:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f000 ffd4 	bl	8018bec <SUBGRF_SetRfTxPower>
 8017c44:	4603      	mov	r3, r0
 8017c46:	461a      	mov	r2, r3
 8017c48:	4b08      	ldr	r3, [pc, #32]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017c4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017c4e:	4b07      	ldr	r3, [pc, #28]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017c50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017c54:	4618      	mov	r0, r3
 8017c56:	f001 f99a 	bl	8018f8e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017c5a:	4a04      	ldr	r2, [pc, #16]	; (8017c6c <RadioSetTxGenericConfig+0x320>)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	6053      	str	r3, [r2, #4]
    return 0;
 8017c60:	2300      	movs	r3, #0
}
 8017c62:	4618      	mov	r0, r3
 8017c64:	3728      	adds	r7, #40	; 0x28
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	200017c4 	.word	0x200017c4
 8017c70:	20000ed8 	.word	0x20000ed8
 8017c74:	2000181c 	.word	0x2000181c
 8017c78:	200017fc 	.word	0x200017fc
 8017c7c:	200017d2 	.word	0x200017d2

08017c80 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b084      	sub	sp, #16
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d002      	beq.n	8017c94 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8017c8e:	4a1a      	ldr	r2, [pc, #104]	; (8017cf8 <SUBGRF_Init+0x78>)
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8017c94:	f7e9 fdfe 	bl	8001894 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017c98:	2002      	movs	r0, #2
 8017c9a:	f001 f873 	bl	8018d84 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8017c9e:	4b17      	ldr	r3, [pc, #92]	; (8017cfc <SUBGRF_Init+0x7c>)
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	f000 f977 	bl	8017f98 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8017caa:	f7f2 fb11 	bl	800a2d0 <RBI_IsTCXO>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	2b01      	cmp	r3, #1
 8017cb2:	d10e      	bne.n	8017cd2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8017cb4:	2140      	movs	r1, #64	; 0x40
 8017cb6:	2001      	movs	r0, #1
 8017cb8:	f000 fb78 	bl	80183ac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8017cbc:	2100      	movs	r1, #0
 8017cbe:	f640 1011 	movw	r0, #2321	; 0x911
 8017cc2:	f000 fe77 	bl	80189b4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8017cc6:	237f      	movs	r3, #127	; 0x7f
 8017cc8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8017cca:	7b38      	ldrb	r0, [r7, #12]
 8017ccc:	f000 fa85 	bl	80181da <SUBGRF_Calibrate>
 8017cd0:	e009      	b.n	8017ce6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017cd2:	2120      	movs	r1, #32
 8017cd4:	f640 1011 	movw	r0, #2321	; 0x911
 8017cd8:	f000 fe6c 	bl	80189b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017cdc:	2120      	movs	r1, #32
 8017cde:	f640 1012 	movw	r0, #2322	; 0x912
 8017ce2:	f000 fe67 	bl	80189b4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8017ce6:	f7f2 fad7 	bl	800a298 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8017cea:	4b05      	ldr	r3, [pc, #20]	; (8017d00 <SUBGRF_Init+0x80>)
 8017cec:	2201      	movs	r2, #1
 8017cee:	701a      	strb	r2, [r3, #0]
}
 8017cf0:	bf00      	nop
 8017cf2:	3710      	adds	r7, #16
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	20000ee8 	.word	0x20000ee8
 8017cfc:	20000ee4 	.word	0x20000ee4
 8017d00:	20000edc 	.word	0x20000edc

08017d04 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8017d04:	b480      	push	{r7}
 8017d06:	af00      	add	r7, sp, #0
    return OperatingMode;
 8017d08:	4b02      	ldr	r3, [pc, #8]	; (8017d14 <SUBGRF_GetOperatingMode+0x10>)
 8017d0a:	781b      	ldrb	r3, [r3, #0]
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bc80      	pop	{r7}
 8017d12:	4770      	bx	lr
 8017d14:	20000edc 	.word	0x20000edc

08017d18 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b082      	sub	sp, #8
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	460b      	mov	r3, r1
 8017d22:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8017d24:	78fb      	ldrb	r3, [r7, #3]
 8017d26:	461a      	mov	r2, r3
 8017d28:	6879      	ldr	r1, [r7, #4]
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	f000 feae 	bl	8018a8c <SUBGRF_WriteBuffer>
}
 8017d30:	bf00      	nop
 8017d32:	3708      	adds	r7, #8
 8017d34:	46bd      	mov	sp, r7
 8017d36:	bd80      	pop	{r7, pc}

08017d38 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b086      	sub	sp, #24
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	60f8      	str	r0, [r7, #12]
 8017d40:	60b9      	str	r1, [r7, #8]
 8017d42:	4613      	mov	r3, r2
 8017d44:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8017d4a:	f107 0317 	add.w	r3, r7, #23
 8017d4e:	4619      	mov	r1, r3
 8017d50:	68b8      	ldr	r0, [r7, #8]
 8017d52:	f000 fdb1 	bl	80188b8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	79fa      	ldrb	r2, [r7, #7]
 8017d5c:	429a      	cmp	r2, r3
 8017d5e:	d201      	bcs.n	8017d64 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8017d60:	2301      	movs	r3, #1
 8017d62:	e007      	b.n	8017d74 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8017d64:	7df8      	ldrb	r0, [r7, #23]
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	781b      	ldrb	r3, [r3, #0]
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	68f9      	ldr	r1, [r7, #12]
 8017d6e:	f000 feaf 	bl	8018ad0 <SUBGRF_ReadBuffer>

    return 0;
 8017d72:	2300      	movs	r3, #0
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	3718      	adds	r7, #24
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd80      	pop	{r7, pc}

08017d7c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b084      	sub	sp, #16
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	460b      	mov	r3, r1
 8017d86:	607a      	str	r2, [r7, #4]
 8017d88:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8017d8a:	7afb      	ldrb	r3, [r7, #11]
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	68f8      	ldr	r0, [r7, #12]
 8017d90:	f7ff ffc2 	bl	8017d18 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f000 f91b 	bl	8017fd0 <SUBGRF_SetTx>
}
 8017d9a:	bf00      	nop
 8017d9c:	3710      	adds	r7, #16
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}

08017da2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8017da2:	b580      	push	{r7, lr}
 8017da4:	b082      	sub	sp, #8
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8017daa:	2208      	movs	r2, #8
 8017dac:	6879      	ldr	r1, [r7, #4]
 8017dae:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8017db2:	f000 fe27 	bl	8018a04 <SUBGRF_WriteRegisters>
    return 0;
 8017db6:	2300      	movs	r3, #0
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3708      	adds	r7, #8
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8017dca:	88fb      	ldrh	r3, [r7, #6]
 8017dcc:	0a1b      	lsrs	r3, r3, #8
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8017dd4:	88fb      	ldrh	r3, [r7, #6]
 8017dd6:	b2db      	uxtb	r3, r3
 8017dd8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017dda:	f000 fb67 	bl	80184ac <SUBGRF_GetPacketType>
 8017dde:	4603      	mov	r3, r0
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d108      	bne.n	8017df6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8017de4:	f107 030c 	add.w	r3, r7, #12
 8017de8:	2202      	movs	r2, #2
 8017dea:	4619      	mov	r1, r3
 8017dec:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8017df0:	f000 fe08 	bl	8018a04 <SUBGRF_WriteRegisters>
            break;
 8017df4:	e000      	b.n	8017df8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8017df6:	bf00      	nop
    }
}
 8017df8:	bf00      	nop
 8017dfa:	3710      	adds	r7, #16
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b084      	sub	sp, #16
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	4603      	mov	r3, r0
 8017e08:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8017e0a:	88fb      	ldrh	r3, [r7, #6]
 8017e0c:	0a1b      	lsrs	r3, r3, #8
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8017e14:	88fb      	ldrh	r3, [r7, #6]
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8017e1a:	f000 fb47 	bl	80184ac <SUBGRF_GetPacketType>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d108      	bne.n	8017e36 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8017e24:	f107 030c 	add.w	r3, r7, #12
 8017e28:	2202      	movs	r2, #2
 8017e2a:	4619      	mov	r1, r3
 8017e2c:	f240 60be 	movw	r0, #1726	; 0x6be
 8017e30:	f000 fde8 	bl	8018a04 <SUBGRF_WriteRegisters>
            break;
 8017e34:	e000      	b.n	8017e38 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8017e36:	bf00      	nop
    }
}
 8017e38:	bf00      	nop
 8017e3a:	3710      	adds	r7, #16
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b084      	sub	sp, #16
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	4603      	mov	r3, r0
 8017e48:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8017e4e:	f000 fb2d 	bl	80184ac <SUBGRF_GetPacketType>
 8017e52:	4603      	mov	r3, r0
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d121      	bne.n	8017e9c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8017e58:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017e5c:	f000 fdbe 	bl	80189dc <SUBGRF_ReadRegister>
 8017e60:	4603      	mov	r3, r0
 8017e62:	f023 0301 	bic.w	r3, r3, #1
 8017e66:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8017e68:	88fb      	ldrh	r3, [r7, #6]
 8017e6a:	0a1b      	lsrs	r3, r3, #8
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	b25b      	sxtb	r3, r3
 8017e70:	f003 0301 	and.w	r3, r3, #1
 8017e74:	b25a      	sxtb	r2, r3
 8017e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017e7a:	4313      	orrs	r3, r2
 8017e7c:	b25b      	sxtb	r3, r3
 8017e7e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8017e80:	7bfb      	ldrb	r3, [r7, #15]
 8017e82:	4619      	mov	r1, r3
 8017e84:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017e88:	f000 fd94 	bl	80189b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8017e8c:	88fb      	ldrh	r3, [r7, #6]
 8017e8e:	b2db      	uxtb	r3, r3
 8017e90:	4619      	mov	r1, r3
 8017e92:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8017e96:	f000 fd8d 	bl	80189b4 <SUBGRF_WriteRegister>
            break;
 8017e9a:	e000      	b.n	8017e9e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8017e9c:	bf00      	nop
    }
}
 8017e9e:	bf00      	nop
 8017ea0:	3710      	adds	r7, #16
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}

08017ea6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8017ea6:	b580      	push	{r7, lr}
 8017ea8:	b082      	sub	sp, #8
 8017eaa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8017eac:	2300      	movs	r3, #0
 8017eae:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8017eb8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017ebc:	f000 fd8e 	bl	80189dc <SUBGRF_ReadRegister>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8017ec4:	79fb      	ldrb	r3, [r7, #7]
 8017ec6:	f023 0301 	bic.w	r3, r3, #1
 8017eca:	b2db      	uxtb	r3, r3
 8017ecc:	4619      	mov	r1, r3
 8017ece:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017ed2:	f000 fd6f 	bl	80189b4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8017ed6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017eda:	f000 fd7f 	bl	80189dc <SUBGRF_ReadRegister>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8017ee2:	79bb      	ldrb	r3, [r7, #6]
 8017ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	4619      	mov	r1, r3
 8017eec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017ef0:	f000 fd60 	bl	80189b4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017ef4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017ef8:	f000 f88a 	bl	8018010 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8017efc:	463b      	mov	r3, r7
 8017efe:	2204      	movs	r2, #4
 8017f00:	4619      	mov	r1, r3
 8017f02:	f640 0019 	movw	r0, #2073	; 0x819
 8017f06:	f000 fd9f 	bl	8018a48 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8017f0a:	2000      	movs	r0, #0
 8017f0c:	f000 f844 	bl	8017f98 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8017f10:	79fb      	ldrb	r3, [r7, #7]
 8017f12:	4619      	mov	r1, r3
 8017f14:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017f18:	f000 fd4c 	bl	80189b4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8017f1c:	79bb      	ldrb	r3, [r7, #6]
 8017f1e:	4619      	mov	r1, r3
 8017f20:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017f24:	f000 fd46 	bl	80189b4 <SUBGRF_WriteRegister>

    return number;
 8017f28:	683b      	ldr	r3, [r7, #0]
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3708      	adds	r7, #8
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bd80      	pop	{r7, pc}
	...

08017f34 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b084      	sub	sp, #16
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	f7f2 f9b2 	bl	800a2a6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8017f42:	2002      	movs	r0, #2
 8017f44:	f000 ff1e 	bl	8018d84 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017f48:	793b      	ldrb	r3, [r7, #4]
 8017f4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	009b      	lsls	r3, r3, #2
 8017f52:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017f54:	793b      	ldrb	r3, [r7, #4]
 8017f56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017f5a:	b2db      	uxtb	r3, r3
 8017f5c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017f5e:	b25b      	sxtb	r3, r3
 8017f60:	4313      	orrs	r3, r2
 8017f62:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8017f64:	793b      	ldrb	r3, [r7, #4]
 8017f66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8017f6e:	4313      	orrs	r3, r2
 8017f70:	b25b      	sxtb	r3, r3
 8017f72:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8017f74:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8017f76:	f107 030f 	add.w	r3, r7, #15
 8017f7a:	2201      	movs	r2, #1
 8017f7c:	4619      	mov	r1, r3
 8017f7e:	2084      	movs	r0, #132	; 0x84
 8017f80:	f000 fdc8 	bl	8018b14 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8017f84:	4b03      	ldr	r3, [pc, #12]	; (8017f94 <SUBGRF_SetSleep+0x60>)
 8017f86:	2200      	movs	r2, #0
 8017f88:	701a      	strb	r2, [r3, #0]
}
 8017f8a:	bf00      	nop
 8017f8c:	3710      	adds	r7, #16
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	20000edc 	.word	0x20000edc

08017f98 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8017fa2:	1dfb      	adds	r3, r7, #7
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	2080      	movs	r0, #128	; 0x80
 8017faa:	f000 fdb3 	bl	8018b14 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8017fae:	79fb      	ldrb	r3, [r7, #7]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d103      	bne.n	8017fbc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8017fb4:	4b05      	ldr	r3, [pc, #20]	; (8017fcc <SUBGRF_SetStandby+0x34>)
 8017fb6:	2201      	movs	r2, #1
 8017fb8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8017fba:	e002      	b.n	8017fc2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8017fbc:	4b03      	ldr	r3, [pc, #12]	; (8017fcc <SUBGRF_SetStandby+0x34>)
 8017fbe:	2202      	movs	r2, #2
 8017fc0:	701a      	strb	r2, [r3, #0]
}
 8017fc2:	bf00      	nop
 8017fc4:	3708      	adds	r7, #8
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	bd80      	pop	{r7, pc}
 8017fca:	bf00      	nop
 8017fcc:	20000edc 	.word	0x20000edc

08017fd0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b084      	sub	sp, #16
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8017fd8:	4b0c      	ldr	r3, [pc, #48]	; (801800c <SUBGRF_SetTx+0x3c>)
 8017fda:	2204      	movs	r2, #4
 8017fdc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	0c1b      	lsrs	r3, r3, #16
 8017fe2:	b2db      	uxtb	r3, r3
 8017fe4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	0a1b      	lsrs	r3, r3, #8
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8017ff4:	f107 030c 	add.w	r3, r7, #12
 8017ff8:	2203      	movs	r2, #3
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	2083      	movs	r0, #131	; 0x83
 8017ffe:	f000 fd89 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018002:	bf00      	nop
 8018004:	3710      	adds	r7, #16
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}
 801800a:	bf00      	nop
 801800c:	20000edc 	.word	0x20000edc

08018010 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b084      	sub	sp, #16
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018018:	4b0c      	ldr	r3, [pc, #48]	; (801804c <SUBGRF_SetRx+0x3c>)
 801801a:	2205      	movs	r2, #5
 801801c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	0c1b      	lsrs	r3, r3, #16
 8018022:	b2db      	uxtb	r3, r3
 8018024:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	0a1b      	lsrs	r3, r3, #8
 801802a:	b2db      	uxtb	r3, r3
 801802c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	b2db      	uxtb	r3, r3
 8018032:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018034:	f107 030c 	add.w	r3, r7, #12
 8018038:	2203      	movs	r2, #3
 801803a:	4619      	mov	r1, r3
 801803c:	2082      	movs	r0, #130	; 0x82
 801803e:	f000 fd69 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018042:	bf00      	nop
 8018044:	3710      	adds	r7, #16
 8018046:	46bd      	mov	sp, r7
 8018048:	bd80      	pop	{r7, pc}
 801804a:	bf00      	nop
 801804c:	20000edc 	.word	0x20000edc

08018050 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b084      	sub	sp, #16
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018058:	4b0e      	ldr	r3, [pc, #56]	; (8018094 <SUBGRF_SetRxBoosted+0x44>)
 801805a:	2205      	movs	r2, #5
 801805c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801805e:	2197      	movs	r1, #151	; 0x97
 8018060:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018064:	f000 fca6 	bl	80189b4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	0c1b      	lsrs	r3, r3, #16
 801806c:	b2db      	uxtb	r3, r3
 801806e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	0a1b      	lsrs	r3, r3, #8
 8018074:	b2db      	uxtb	r3, r3
 8018076:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	b2db      	uxtb	r3, r3
 801807c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801807e:	f107 030c 	add.w	r3, r7, #12
 8018082:	2203      	movs	r2, #3
 8018084:	4619      	mov	r1, r3
 8018086:	2082      	movs	r0, #130	; 0x82
 8018088:	f000 fd44 	bl	8018b14 <SUBGRF_WriteCommand>
}
 801808c:	bf00      	nop
 801808e:	3710      	adds	r7, #16
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}
 8018094:	20000edc 	.word	0x20000edc

08018098 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b084      	sub	sp, #16
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	0c1b      	lsrs	r3, r3, #16
 80180a6:	b2db      	uxtb	r3, r3
 80180a8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	0a1b      	lsrs	r3, r3, #8
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	b2db      	uxtb	r3, r3
 80180b6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	0c1b      	lsrs	r3, r3, #16
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	0a1b      	lsrs	r3, r3, #8
 80180c4:	b2db      	uxtb	r3, r3
 80180c6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80180c8:	683b      	ldr	r3, [r7, #0]
 80180ca:	b2db      	uxtb	r3, r3
 80180cc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80180ce:	f107 0308 	add.w	r3, r7, #8
 80180d2:	2206      	movs	r2, #6
 80180d4:	4619      	mov	r1, r3
 80180d6:	2094      	movs	r0, #148	; 0x94
 80180d8:	f000 fd1c 	bl	8018b14 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80180dc:	4b03      	ldr	r3, [pc, #12]	; (80180ec <SUBGRF_SetRxDutyCycle+0x54>)
 80180de:	2206      	movs	r2, #6
 80180e0:	701a      	strb	r2, [r3, #0]
}
 80180e2:	bf00      	nop
 80180e4:	3710      	adds	r7, #16
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}
 80180ea:	bf00      	nop
 80180ec:	20000edc 	.word	0x20000edc

080180f0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80180f4:	2200      	movs	r2, #0
 80180f6:	2100      	movs	r1, #0
 80180f8:	20c5      	movs	r0, #197	; 0xc5
 80180fa:	f000 fd0b 	bl	8018b14 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80180fe:	4b02      	ldr	r3, [pc, #8]	; (8018108 <SUBGRF_SetCad+0x18>)
 8018100:	2207      	movs	r2, #7
 8018102:	701a      	strb	r2, [r3, #0]
}
 8018104:	bf00      	nop
 8018106:	bd80      	pop	{r7, pc}
 8018108:	20000edc 	.word	0x20000edc

0801810c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801810c:	b580      	push	{r7, lr}
 801810e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018110:	2200      	movs	r2, #0
 8018112:	2100      	movs	r1, #0
 8018114:	20d1      	movs	r0, #209	; 0xd1
 8018116:	f000 fcfd 	bl	8018b14 <SUBGRF_WriteCommand>
}
 801811a:	bf00      	nop
 801811c:	bd80      	pop	{r7, pc}

0801811e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801811e:	b580      	push	{r7, lr}
 8018120:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018122:	2200      	movs	r2, #0
 8018124:	2100      	movs	r1, #0
 8018126:	20d2      	movs	r0, #210	; 0xd2
 8018128:	f000 fcf4 	bl	8018b14 <SUBGRF_WriteCommand>
}
 801812c:	bf00      	nop
 801812e:	bd80      	pop	{r7, pc}

08018130 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b082      	sub	sp, #8
 8018134:	af00      	add	r7, sp, #0
 8018136:	4603      	mov	r3, r0
 8018138:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801813a:	1dfb      	adds	r3, r7, #7
 801813c:	2201      	movs	r2, #1
 801813e:	4619      	mov	r1, r3
 8018140:	209f      	movs	r0, #159	; 0x9f
 8018142:	f000 fce7 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018146:	bf00      	nop
 8018148:	3708      	adds	r7, #8
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}

0801814e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801814e:	b580      	push	{r7, lr}
 8018150:	b084      	sub	sp, #16
 8018152:	af00      	add	r7, sp, #0
 8018154:	4603      	mov	r3, r0
 8018156:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018158:	1dfb      	adds	r3, r7, #7
 801815a:	2201      	movs	r2, #1
 801815c:	4619      	mov	r1, r3
 801815e:	20a0      	movs	r0, #160	; 0xa0
 8018160:	f000 fcd8 	bl	8018b14 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018164:	79fb      	ldrb	r3, [r7, #7]
 8018166:	2b3f      	cmp	r3, #63	; 0x3f
 8018168:	d91c      	bls.n	80181a4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801816a:	79fb      	ldrb	r3, [r7, #7]
 801816c:	085b      	lsrs	r3, r3, #1
 801816e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018170:	2300      	movs	r3, #0
 8018172:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018174:	2300      	movs	r3, #0
 8018176:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018178:	e005      	b.n	8018186 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801817a:	7bfb      	ldrb	r3, [r7, #15]
 801817c:	089b      	lsrs	r3, r3, #2
 801817e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018180:	7bbb      	ldrb	r3, [r7, #14]
 8018182:	3301      	adds	r3, #1
 8018184:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018186:	7bfb      	ldrb	r3, [r7, #15]
 8018188:	2b1f      	cmp	r3, #31
 801818a:	d8f6      	bhi.n	801817a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801818c:	7bfb      	ldrb	r3, [r7, #15]
 801818e:	00db      	lsls	r3, r3, #3
 8018190:	b2da      	uxtb	r2, r3
 8018192:	7bbb      	ldrb	r3, [r7, #14]
 8018194:	4413      	add	r3, r2
 8018196:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018198:	7b7b      	ldrb	r3, [r7, #13]
 801819a:	4619      	mov	r1, r3
 801819c:	f240 7006 	movw	r0, #1798	; 0x706
 80181a0:	f000 fc08 	bl	80189b4 <SUBGRF_WriteRegister>
    }
}
 80181a4:	bf00      	nop
 80181a6:	3710      	adds	r7, #16
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80181b2:	f7f2 f894 	bl	800a2de <RBI_IsDCDC>
 80181b6:	4603      	mov	r3, r0
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	d102      	bne.n	80181c2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80181bc:	2301      	movs	r3, #1
 80181be:	71fb      	strb	r3, [r7, #7]
 80181c0:	e001      	b.n	80181c6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80181c2:	2300      	movs	r3, #0
 80181c4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80181c6:	1dfb      	adds	r3, r7, #7
 80181c8:	2201      	movs	r2, #1
 80181ca:	4619      	mov	r1, r3
 80181cc:	2096      	movs	r0, #150	; 0x96
 80181ce:	f000 fca1 	bl	8018b14 <SUBGRF_WriteCommand>
}
 80181d2:	bf00      	nop
 80181d4:	3708      	adds	r7, #8
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80181da:	b580      	push	{r7, lr}
 80181dc:	b084      	sub	sp, #16
 80181de:	af00      	add	r7, sp, #0
 80181e0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80181e2:	793b      	ldrb	r3, [r7, #4]
 80181e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	019b      	lsls	r3, r3, #6
 80181ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80181ee:	793b      	ldrb	r3, [r7, #4]
 80181f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80181f4:	b2db      	uxtb	r3, r3
 80181f6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80181f8:	b25b      	sxtb	r3, r3
 80181fa:	4313      	orrs	r3, r2
 80181fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80181fe:	793b      	ldrb	r3, [r7, #4]
 8018200:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018204:	b2db      	uxtb	r3, r3
 8018206:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018208:	b25b      	sxtb	r3, r3
 801820a:	4313      	orrs	r3, r2
 801820c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801820e:	793b      	ldrb	r3, [r7, #4]
 8018210:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018214:	b2db      	uxtb	r3, r3
 8018216:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018218:	b25b      	sxtb	r3, r3
 801821a:	4313      	orrs	r3, r2
 801821c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801821e:	793b      	ldrb	r3, [r7, #4]
 8018220:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018224:	b2db      	uxtb	r3, r3
 8018226:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018228:	b25b      	sxtb	r3, r3
 801822a:	4313      	orrs	r3, r2
 801822c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801822e:	793b      	ldrb	r3, [r7, #4]
 8018230:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018234:	b2db      	uxtb	r3, r3
 8018236:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018238:	b25b      	sxtb	r3, r3
 801823a:	4313      	orrs	r3, r2
 801823c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801823e:	793b      	ldrb	r3, [r7, #4]
 8018240:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018244:	b2db      	uxtb	r3, r3
 8018246:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018248:	4313      	orrs	r3, r2
 801824a:	b25b      	sxtb	r3, r3
 801824c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801824e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018250:	f107 030f 	add.w	r3, r7, #15
 8018254:	2201      	movs	r2, #1
 8018256:	4619      	mov	r1, r3
 8018258:	2089      	movs	r0, #137	; 0x89
 801825a:	f000 fc5b 	bl	8018b14 <SUBGRF_WriteCommand>
}
 801825e:	bf00      	nop
 8018260:	3710      	adds	r7, #16
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
	...

08018268 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b084      	sub	sp, #16
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	4a1b      	ldr	r2, [pc, #108]	; (80182e0 <SUBGRF_CalibrateImage+0x78>)
 8018274:	4293      	cmp	r3, r2
 8018276:	d904      	bls.n	8018282 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018278:	23e1      	movs	r3, #225	; 0xe1
 801827a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801827c:	23e9      	movs	r3, #233	; 0xe9
 801827e:	737b      	strb	r3, [r7, #13]
 8018280:	e022      	b.n	80182c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	4a17      	ldr	r2, [pc, #92]	; (80182e4 <SUBGRF_CalibrateImage+0x7c>)
 8018286:	4293      	cmp	r3, r2
 8018288:	d904      	bls.n	8018294 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801828a:	23d7      	movs	r3, #215	; 0xd7
 801828c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801828e:	23db      	movs	r3, #219	; 0xdb
 8018290:	737b      	strb	r3, [r7, #13]
 8018292:	e019      	b.n	80182c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	4a14      	ldr	r2, [pc, #80]	; (80182e8 <SUBGRF_CalibrateImage+0x80>)
 8018298:	4293      	cmp	r3, r2
 801829a:	d904      	bls.n	80182a6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801829c:	23c1      	movs	r3, #193	; 0xc1
 801829e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80182a0:	23c5      	movs	r3, #197	; 0xc5
 80182a2:	737b      	strb	r3, [r7, #13]
 80182a4:	e010      	b.n	80182c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	4a10      	ldr	r2, [pc, #64]	; (80182ec <SUBGRF_CalibrateImage+0x84>)
 80182aa:	4293      	cmp	r3, r2
 80182ac:	d904      	bls.n	80182b8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80182ae:	2375      	movs	r3, #117	; 0x75
 80182b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80182b2:	2381      	movs	r3, #129	; 0x81
 80182b4:	737b      	strb	r3, [r7, #13]
 80182b6:	e007      	b.n	80182c8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	4a0d      	ldr	r2, [pc, #52]	; (80182f0 <SUBGRF_CalibrateImage+0x88>)
 80182bc:	4293      	cmp	r3, r2
 80182be:	d903      	bls.n	80182c8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80182c0:	236b      	movs	r3, #107	; 0x6b
 80182c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80182c4:	236f      	movs	r3, #111	; 0x6f
 80182c6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80182c8:	f107 030c 	add.w	r3, r7, #12
 80182cc:	2202      	movs	r2, #2
 80182ce:	4619      	mov	r1, r3
 80182d0:	2098      	movs	r0, #152	; 0x98
 80182d2:	f000 fc1f 	bl	8018b14 <SUBGRF_WriteCommand>
}
 80182d6:	bf00      	nop
 80182d8:	3710      	adds	r7, #16
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd80      	pop	{r7, pc}
 80182de:	bf00      	nop
 80182e0:	35a4e900 	.word	0x35a4e900
 80182e4:	32a9f880 	.word	0x32a9f880
 80182e8:	2de54480 	.word	0x2de54480
 80182ec:	1b6b0b00 	.word	0x1b6b0b00
 80182f0:	1954fc40 	.word	0x1954fc40

080182f4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80182f4:	b590      	push	{r4, r7, lr}
 80182f6:	b085      	sub	sp, #20
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	4604      	mov	r4, r0
 80182fc:	4608      	mov	r0, r1
 80182fe:	4611      	mov	r1, r2
 8018300:	461a      	mov	r2, r3
 8018302:	4623      	mov	r3, r4
 8018304:	71fb      	strb	r3, [r7, #7]
 8018306:	4603      	mov	r3, r0
 8018308:	71bb      	strb	r3, [r7, #6]
 801830a:	460b      	mov	r3, r1
 801830c:	717b      	strb	r3, [r7, #5]
 801830e:	4613      	mov	r3, r2
 8018310:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018312:	79fb      	ldrb	r3, [r7, #7]
 8018314:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018316:	79bb      	ldrb	r3, [r7, #6]
 8018318:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801831a:	797b      	ldrb	r3, [r7, #5]
 801831c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801831e:	793b      	ldrb	r3, [r7, #4]
 8018320:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018322:	f107 030c 	add.w	r3, r7, #12
 8018326:	2204      	movs	r2, #4
 8018328:	4619      	mov	r1, r3
 801832a:	2095      	movs	r0, #149	; 0x95
 801832c:	f000 fbf2 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018330:	bf00      	nop
 8018332:	3714      	adds	r7, #20
 8018334:	46bd      	mov	sp, r7
 8018336:	bd90      	pop	{r4, r7, pc}

08018338 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018338:	b590      	push	{r4, r7, lr}
 801833a:	b085      	sub	sp, #20
 801833c:	af00      	add	r7, sp, #0
 801833e:	4604      	mov	r4, r0
 8018340:	4608      	mov	r0, r1
 8018342:	4611      	mov	r1, r2
 8018344:	461a      	mov	r2, r3
 8018346:	4623      	mov	r3, r4
 8018348:	80fb      	strh	r3, [r7, #6]
 801834a:	4603      	mov	r3, r0
 801834c:	80bb      	strh	r3, [r7, #4]
 801834e:	460b      	mov	r3, r1
 8018350:	807b      	strh	r3, [r7, #2]
 8018352:	4613      	mov	r3, r2
 8018354:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018356:	88fb      	ldrh	r3, [r7, #6]
 8018358:	0a1b      	lsrs	r3, r3, #8
 801835a:	b29b      	uxth	r3, r3
 801835c:	b2db      	uxtb	r3, r3
 801835e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018360:	88fb      	ldrh	r3, [r7, #6]
 8018362:	b2db      	uxtb	r3, r3
 8018364:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018366:	88bb      	ldrh	r3, [r7, #4]
 8018368:	0a1b      	lsrs	r3, r3, #8
 801836a:	b29b      	uxth	r3, r3
 801836c:	b2db      	uxtb	r3, r3
 801836e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018370:	88bb      	ldrh	r3, [r7, #4]
 8018372:	b2db      	uxtb	r3, r3
 8018374:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018376:	887b      	ldrh	r3, [r7, #2]
 8018378:	0a1b      	lsrs	r3, r3, #8
 801837a:	b29b      	uxth	r3, r3
 801837c:	b2db      	uxtb	r3, r3
 801837e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018380:	887b      	ldrh	r3, [r7, #2]
 8018382:	b2db      	uxtb	r3, r3
 8018384:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018386:	883b      	ldrh	r3, [r7, #0]
 8018388:	0a1b      	lsrs	r3, r3, #8
 801838a:	b29b      	uxth	r3, r3
 801838c:	b2db      	uxtb	r3, r3
 801838e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018390:	883b      	ldrh	r3, [r7, #0]
 8018392:	b2db      	uxtb	r3, r3
 8018394:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018396:	f107 0308 	add.w	r3, r7, #8
 801839a:	2208      	movs	r2, #8
 801839c:	4619      	mov	r1, r3
 801839e:	2008      	movs	r0, #8
 80183a0:	f000 fbb8 	bl	8018b14 <SUBGRF_WriteCommand>
}
 80183a4:	bf00      	nop
 80183a6:	3714      	adds	r7, #20
 80183a8:	46bd      	mov	sp, r7
 80183aa:	bd90      	pop	{r4, r7, pc}

080183ac <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b084      	sub	sp, #16
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	4603      	mov	r3, r0
 80183b4:	6039      	str	r1, [r7, #0]
 80183b6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80183b8:	79fb      	ldrb	r3, [r7, #7]
 80183ba:	f003 0307 	and.w	r3, r3, #7
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	0c1b      	lsrs	r3, r3, #16
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	0a1b      	lsrs	r3, r3, #8
 80183ce:	b2db      	uxtb	r3, r3
 80183d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	b2db      	uxtb	r3, r3
 80183d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80183d8:	f107 030c 	add.w	r3, r7, #12
 80183dc:	2204      	movs	r2, #4
 80183de:	4619      	mov	r1, r3
 80183e0:	2097      	movs	r0, #151	; 0x97
 80183e2:	f000 fb97 	bl	8018b14 <SUBGRF_WriteCommand>
}
 80183e6:	bf00      	nop
 80183e8:	3710      	adds	r7, #16
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
	...

080183f0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80183f0:	b5b0      	push	{r4, r5, r7, lr}
 80183f2:	b084      	sub	sp, #16
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80183f8:	2300      	movs	r3, #0
 80183fa:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80183fc:	4b1b      	ldr	r3, [pc, #108]	; (801846c <SUBGRF_SetRfFrequency+0x7c>)
 80183fe:	781b      	ldrb	r3, [r3, #0]
 8018400:	f083 0301 	eor.w	r3, r3, #1
 8018404:	b2db      	uxtb	r3, r3
 8018406:	2b00      	cmp	r3, #0
 8018408:	d005      	beq.n	8018416 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f7ff ff2c 	bl	8018268 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018410:	4b16      	ldr	r3, [pc, #88]	; (801846c <SUBGRF_SetRfFrequency+0x7c>)
 8018412:	2201      	movs	r2, #1
 8018414:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	461a      	mov	r2, r3
 801841a:	f04f 0300 	mov.w	r3, #0
 801841e:	09d5      	lsrs	r5, r2, #7
 8018420:	0654      	lsls	r4, r2, #25
 8018422:	4a13      	ldr	r2, [pc, #76]	; (8018470 <SUBGRF_SetRfFrequency+0x80>)
 8018424:	f04f 0300 	mov.w	r3, #0
 8018428:	4620      	mov	r0, r4
 801842a:	4629      	mov	r1, r5
 801842c:	f7e8 fb96 	bl	8000b5c <__aeabi_uldivmod>
 8018430:	4602      	mov	r2, r0
 8018432:	460b      	mov	r3, r1
 8018434:	4613      	mov	r3, r2
 8018436:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	0e1b      	lsrs	r3, r3, #24
 801843c:	b2db      	uxtb	r3, r3
 801843e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	0c1b      	lsrs	r3, r3, #16
 8018444:	b2db      	uxtb	r3, r3
 8018446:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	0a1b      	lsrs	r3, r3, #8
 801844c:	b2db      	uxtb	r3, r3
 801844e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	b2db      	uxtb	r3, r3
 8018454:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018456:	f107 0308 	add.w	r3, r7, #8
 801845a:	2204      	movs	r2, #4
 801845c:	4619      	mov	r1, r3
 801845e:	2086      	movs	r0, #134	; 0x86
 8018460:	f000 fb58 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018464:	bf00      	nop
 8018466:	3710      	adds	r7, #16
 8018468:	46bd      	mov	sp, r7
 801846a:	bdb0      	pop	{r4, r5, r7, pc}
 801846c:	20000ee4 	.word	0x20000ee4
 8018470:	01e84800 	.word	0x01e84800

08018474 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b082      	sub	sp, #8
 8018478:	af00      	add	r7, sp, #0
 801847a:	4603      	mov	r3, r0
 801847c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801847e:	79fa      	ldrb	r2, [r7, #7]
 8018480:	4b09      	ldr	r3, [pc, #36]	; (80184a8 <SUBGRF_SetPacketType+0x34>)
 8018482:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018484:	79fb      	ldrb	r3, [r7, #7]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d104      	bne.n	8018494 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801848a:	2100      	movs	r1, #0
 801848c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018490:	f000 fa90 	bl	80189b4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018494:	1dfb      	adds	r3, r7, #7
 8018496:	2201      	movs	r2, #1
 8018498:	4619      	mov	r1, r3
 801849a:	208a      	movs	r0, #138	; 0x8a
 801849c:	f000 fb3a 	bl	8018b14 <SUBGRF_WriteCommand>
}
 80184a0:	bf00      	nop
 80184a2:	3708      	adds	r7, #8
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	20000edd 	.word	0x20000edd

080184ac <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80184ac:	b480      	push	{r7}
 80184ae:	af00      	add	r7, sp, #0
    return PacketType;
 80184b0:	4b02      	ldr	r3, [pc, #8]	; (80184bc <SUBGRF_GetPacketType+0x10>)
 80184b2:	781b      	ldrb	r3, [r3, #0]
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bc80      	pop	{r7}
 80184ba:	4770      	bx	lr
 80184bc:	20000edd 	.word	0x20000edd

080184c0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b084      	sub	sp, #16
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	4603      	mov	r3, r0
 80184c8:	71fb      	strb	r3, [r7, #7]
 80184ca:	460b      	mov	r3, r1
 80184cc:	71bb      	strb	r3, [r7, #6]
 80184ce:	4613      	mov	r3, r2
 80184d0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80184d2:	79fb      	ldrb	r3, [r7, #7]
 80184d4:	2b01      	cmp	r3, #1
 80184d6:	d124      	bne.n	8018522 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80184d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184dc:	2b0f      	cmp	r3, #15
 80184de:	d106      	bne.n	80184ee <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80184e0:	2301      	movs	r3, #1
 80184e2:	2201      	movs	r2, #1
 80184e4:	2100      	movs	r1, #0
 80184e6:	2006      	movs	r0, #6
 80184e8:	f7ff ff04 	bl	80182f4 <SUBGRF_SetPaConfig>
 80184ec:	e005      	b.n	80184fa <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80184ee:	2301      	movs	r3, #1
 80184f0:	2201      	movs	r2, #1
 80184f2:	2100      	movs	r1, #0
 80184f4:	2004      	movs	r0, #4
 80184f6:	f7ff fefd 	bl	80182f4 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80184fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184fe:	2b0d      	cmp	r3, #13
 8018500:	dd02      	ble.n	8018508 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018502:	230e      	movs	r3, #14
 8018504:	71bb      	strb	r3, [r7, #6]
 8018506:	e006      	b.n	8018516 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018508:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801850c:	f113 0f11 	cmn.w	r3, #17
 8018510:	da01      	bge.n	8018516 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018512:	23ef      	movs	r3, #239	; 0xef
 8018514:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018516:	2118      	movs	r1, #24
 8018518:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801851c:	f000 fa4a 	bl	80189b4 <SUBGRF_WriteRegister>
 8018520:	e025      	b.n	801856e <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018522:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018526:	f000 fa59 	bl	80189dc <SUBGRF_ReadRegister>
 801852a:	4603      	mov	r3, r0
 801852c:	f043 031e 	orr.w	r3, r3, #30
 8018530:	b2db      	uxtb	r3, r3
 8018532:	4619      	mov	r1, r3
 8018534:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018538:	f000 fa3c 	bl	80189b4 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801853c:	2301      	movs	r3, #1
 801853e:	2200      	movs	r2, #0
 8018540:	2107      	movs	r1, #7
 8018542:	2004      	movs	r0, #4
 8018544:	f7ff fed6 	bl	80182f4 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018548:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801854c:	2b16      	cmp	r3, #22
 801854e:	dd02      	ble.n	8018556 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018550:	2316      	movs	r3, #22
 8018552:	71bb      	strb	r3, [r7, #6]
 8018554:	e006      	b.n	8018564 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018556:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801855a:	f113 0f09 	cmn.w	r3, #9
 801855e:	da01      	bge.n	8018564 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018560:	23f7      	movs	r3, #247	; 0xf7
 8018562:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018564:	2138      	movs	r1, #56	; 0x38
 8018566:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801856a:	f000 fa23 	bl	80189b4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801856e:	79bb      	ldrb	r3, [r7, #6]
 8018570:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018572:	797b      	ldrb	r3, [r7, #5]
 8018574:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018576:	f107 030c 	add.w	r3, r7, #12
 801857a:	2202      	movs	r2, #2
 801857c:	4619      	mov	r1, r3
 801857e:	208e      	movs	r0, #142	; 0x8e
 8018580:	f000 fac8 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018584:	bf00      	nop
 8018586:	3710      	adds	r7, #16
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801858c:	b5b0      	push	{r4, r5, r7, lr}
 801858e:	b086      	sub	sp, #24
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018594:	2300      	movs	r3, #0
 8018596:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018598:	4a5e      	ldr	r2, [pc, #376]	; (8018714 <SUBGRF_SetModulationParams+0x188>)
 801859a:	f107 0308 	add.w	r3, r7, #8
 801859e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80185a2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	781a      	ldrb	r2, [r3, #0]
 80185aa:	4b5b      	ldr	r3, [pc, #364]	; (8018718 <SUBGRF_SetModulationParams+0x18c>)
 80185ac:	781b      	ldrb	r3, [r3, #0]
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d004      	beq.n	80185bc <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7ff ff5c 	bl	8018474 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	2b03      	cmp	r3, #3
 80185c2:	f200 80a2 	bhi.w	801870a <SUBGRF_SetModulationParams+0x17e>
 80185c6:	a201      	add	r2, pc, #4	; (adr r2, 80185cc <SUBGRF_SetModulationParams+0x40>)
 80185c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185cc:	080185dd 	.word	0x080185dd
 80185d0:	08018699 	.word	0x08018699
 80185d4:	0801865b 	.word	0x0801865b
 80185d8:	080186c7 	.word	0x080186c7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80185dc:	2308      	movs	r3, #8
 80185de:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	685b      	ldr	r3, [r3, #4]
 80185e4:	4a4d      	ldr	r2, [pc, #308]	; (801871c <SUBGRF_SetModulationParams+0x190>)
 80185e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80185ea:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	0c1b      	lsrs	r3, r3, #16
 80185f0:	b2db      	uxtb	r3, r3
 80185f2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	0a1b      	lsrs	r3, r3, #8
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	7b1b      	ldrb	r3, [r3, #12]
 8018606:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	7b5b      	ldrb	r3, [r3, #13]
 801860c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	689b      	ldr	r3, [r3, #8]
 8018612:	461a      	mov	r2, r3
 8018614:	f04f 0300 	mov.w	r3, #0
 8018618:	09d5      	lsrs	r5, r2, #7
 801861a:	0654      	lsls	r4, r2, #25
 801861c:	4a40      	ldr	r2, [pc, #256]	; (8018720 <SUBGRF_SetModulationParams+0x194>)
 801861e:	f04f 0300 	mov.w	r3, #0
 8018622:	4620      	mov	r0, r4
 8018624:	4629      	mov	r1, r5
 8018626:	f7e8 fa99 	bl	8000b5c <__aeabi_uldivmod>
 801862a:	4602      	mov	r2, r0
 801862c:	460b      	mov	r3, r1
 801862e:	4613      	mov	r3, r2
 8018630:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	0c1b      	lsrs	r3, r3, #16
 8018636:	b2db      	uxtb	r3, r3
 8018638:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	0a1b      	lsrs	r3, r3, #8
 801863e:	b2db      	uxtb	r3, r3
 8018640:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	b2db      	uxtb	r3, r3
 8018646:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018648:	7cfb      	ldrb	r3, [r7, #19]
 801864a:	b29a      	uxth	r2, r3
 801864c:	f107 0308 	add.w	r3, r7, #8
 8018650:	4619      	mov	r1, r3
 8018652:	208b      	movs	r0, #139	; 0x8b
 8018654:	f000 fa5e 	bl	8018b14 <SUBGRF_WriteCommand>
        break;
 8018658:	e058      	b.n	801870c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 801865a:	2304      	movs	r3, #4
 801865c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	691b      	ldr	r3, [r3, #16]
 8018662:	4a2e      	ldr	r2, [pc, #184]	; (801871c <SUBGRF_SetModulationParams+0x190>)
 8018664:	fbb2 f3f3 	udiv	r3, r2, r3
 8018668:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	0c1b      	lsrs	r3, r3, #16
 801866e:	b2db      	uxtb	r3, r3
 8018670:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	0a1b      	lsrs	r3, r3, #8
 8018676:	b2db      	uxtb	r3, r3
 8018678:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	b2db      	uxtb	r3, r3
 801867e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	7d1b      	ldrb	r3, [r3, #20]
 8018684:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018686:	7cfb      	ldrb	r3, [r7, #19]
 8018688:	b29a      	uxth	r2, r3
 801868a:	f107 0308 	add.w	r3, r7, #8
 801868e:	4619      	mov	r1, r3
 8018690:	208b      	movs	r0, #139	; 0x8b
 8018692:	f000 fa3f 	bl	8018b14 <SUBGRF_WriteCommand>
        break;
 8018696:	e039      	b.n	801870c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018698:	2304      	movs	r3, #4
 801869a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	7e1b      	ldrb	r3, [r3, #24]
 80186a0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	7e5b      	ldrb	r3, [r3, #25]
 80186a6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	7e9b      	ldrb	r3, [r3, #26]
 80186ac:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	7edb      	ldrb	r3, [r3, #27]
 80186b2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80186b4:	7cfb      	ldrb	r3, [r7, #19]
 80186b6:	b29a      	uxth	r2, r3
 80186b8:	f107 0308 	add.w	r3, r7, #8
 80186bc:	4619      	mov	r1, r3
 80186be:	208b      	movs	r0, #139	; 0x8b
 80186c0:	f000 fa28 	bl	8018b14 <SUBGRF_WriteCommand>

        break;
 80186c4:	e022      	b.n	801870c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80186c6:	2305      	movs	r3, #5
 80186c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	4a13      	ldr	r2, [pc, #76]	; (801871c <SUBGRF_SetModulationParams+0x190>)
 80186d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80186d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	0c1b      	lsrs	r3, r3, #16
 80186da:	b2db      	uxtb	r3, r3
 80186dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	0a1b      	lsrs	r3, r3, #8
 80186e2:	b2db      	uxtb	r3, r3
 80186e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	b2db      	uxtb	r3, r3
 80186ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	7b1b      	ldrb	r3, [r3, #12]
 80186f0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	7b5b      	ldrb	r3, [r3, #13]
 80186f6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80186f8:	7cfb      	ldrb	r3, [r7, #19]
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	f107 0308 	add.w	r3, r7, #8
 8018700:	4619      	mov	r1, r3
 8018702:	208b      	movs	r0, #139	; 0x8b
 8018704:	f000 fa06 	bl	8018b14 <SUBGRF_WriteCommand>
        break;
 8018708:	e000      	b.n	801870c <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 801870a:	bf00      	nop
    }
}
 801870c:	bf00      	nop
 801870e:	3718      	adds	r7, #24
 8018710:	46bd      	mov	sp, r7
 8018712:	bdb0      	pop	{r4, r5, r7, pc}
 8018714:	0801b024 	.word	0x0801b024
 8018718:	20000edd 	.word	0x20000edd
 801871c:	3d090000 	.word	0x3d090000
 8018720:	01e84800 	.word	0x01e84800

08018724 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b086      	sub	sp, #24
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801872c:	2300      	movs	r3, #0
 801872e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018730:	4a48      	ldr	r2, [pc, #288]	; (8018854 <SUBGRF_SetPacketParams+0x130>)
 8018732:	f107 030c 	add.w	r3, r7, #12
 8018736:	ca07      	ldmia	r2, {r0, r1, r2}
 8018738:	c303      	stmia	r3!, {r0, r1}
 801873a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	781a      	ldrb	r2, [r3, #0]
 8018740:	4b45      	ldr	r3, [pc, #276]	; (8018858 <SUBGRF_SetPacketParams+0x134>)
 8018742:	781b      	ldrb	r3, [r3, #0]
 8018744:	429a      	cmp	r2, r3
 8018746:	d004      	beq.n	8018752 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	4618      	mov	r0, r3
 801874e:	f7ff fe91 	bl	8018474 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	2b03      	cmp	r3, #3
 8018758:	d878      	bhi.n	801884c <SUBGRF_SetPacketParams+0x128>
 801875a:	a201      	add	r2, pc, #4	; (adr r2, 8018760 <SUBGRF_SetPacketParams+0x3c>)
 801875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018760:	08018771 	.word	0x08018771
 8018764:	08018801 	.word	0x08018801
 8018768:	080187f5 	.word	0x080187f5
 801876c:	08018771 	.word	0x08018771
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	7a5b      	ldrb	r3, [r3, #9]
 8018774:	2bf1      	cmp	r3, #241	; 0xf1
 8018776:	d10a      	bne.n	801878e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018778:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801877c:	f7ff fb20 	bl	8017dc0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018780:	f248 0005 	movw	r0, #32773	; 0x8005
 8018784:	f7ff fb3c 	bl	8017e00 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018788:	2302      	movs	r3, #2
 801878a:	75bb      	strb	r3, [r7, #22]
 801878c:	e011      	b.n	80187b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	7a5b      	ldrb	r3, [r3, #9]
 8018792:	2bf2      	cmp	r3, #242	; 0xf2
 8018794:	d10a      	bne.n	80187ac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018796:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801879a:	f7ff fb11 	bl	8017dc0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801879e:	f241 0021 	movw	r0, #4129	; 0x1021
 80187a2:	f7ff fb2d 	bl	8017e00 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80187a6:	2306      	movs	r3, #6
 80187a8:	75bb      	strb	r3, [r7, #22]
 80187aa:	e002      	b.n	80187b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	7a5b      	ldrb	r3, [r3, #9]
 80187b0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80187b2:	2309      	movs	r3, #9
 80187b4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	885b      	ldrh	r3, [r3, #2]
 80187ba:	0a1b      	lsrs	r3, r3, #8
 80187bc:	b29b      	uxth	r3, r3
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	885b      	ldrh	r3, [r3, #2]
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	791b      	ldrb	r3, [r3, #4]
 80187ce:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	795b      	ldrb	r3, [r3, #5]
 80187d4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	799b      	ldrb	r3, [r3, #6]
 80187da:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	79db      	ldrb	r3, [r3, #7]
 80187e0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	7a1b      	ldrb	r3, [r3, #8]
 80187e6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80187e8:	7dbb      	ldrb	r3, [r7, #22]
 80187ea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	7a9b      	ldrb	r3, [r3, #10]
 80187f0:	753b      	strb	r3, [r7, #20]
        break;
 80187f2:	e022      	b.n	801883a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80187f4:	2301      	movs	r3, #1
 80187f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	7b1b      	ldrb	r3, [r3, #12]
 80187fc:	733b      	strb	r3, [r7, #12]
        break;
 80187fe:	e01c      	b.n	801883a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018800:	2306      	movs	r3, #6
 8018802:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	89db      	ldrh	r3, [r3, #14]
 8018808:	0a1b      	lsrs	r3, r3, #8
 801880a:	b29b      	uxth	r3, r3
 801880c:	b2db      	uxtb	r3, r3
 801880e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	89db      	ldrh	r3, [r3, #14]
 8018814:	b2db      	uxtb	r3, r3
 8018816:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	7c1a      	ldrb	r2, [r3, #16]
 801881c:	4b0f      	ldr	r3, [pc, #60]	; (801885c <SUBGRF_SetPacketParams+0x138>)
 801881e:	4611      	mov	r1, r2
 8018820:	7019      	strb	r1, [r3, #0]
 8018822:	4613      	mov	r3, r2
 8018824:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	7c5b      	ldrb	r3, [r3, #17]
 801882a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	7c9b      	ldrb	r3, [r3, #18]
 8018830:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	7cdb      	ldrb	r3, [r3, #19]
 8018836:	747b      	strb	r3, [r7, #17]
        break;
 8018838:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801883a:	7dfb      	ldrb	r3, [r7, #23]
 801883c:	b29a      	uxth	r2, r3
 801883e:	f107 030c 	add.w	r3, r7, #12
 8018842:	4619      	mov	r1, r3
 8018844:	208c      	movs	r0, #140	; 0x8c
 8018846:	f000 f965 	bl	8018b14 <SUBGRF_WriteCommand>
 801884a:	e000      	b.n	801884e <SUBGRF_SetPacketParams+0x12a>
        return;
 801884c:	bf00      	nop
}
 801884e:	3718      	adds	r7, #24
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}
 8018854:	0801b02c 	.word	0x0801b02c
 8018858:	20000edd 	.word	0x20000edd
 801885c:	20000ede 	.word	0x20000ede

08018860 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b084      	sub	sp, #16
 8018864:	af00      	add	r7, sp, #0
 8018866:	4603      	mov	r3, r0
 8018868:	460a      	mov	r2, r1
 801886a:	71fb      	strb	r3, [r7, #7]
 801886c:	4613      	mov	r3, r2
 801886e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018870:	79fb      	ldrb	r3, [r7, #7]
 8018872:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018874:	79bb      	ldrb	r3, [r7, #6]
 8018876:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018878:	f107 030c 	add.w	r3, r7, #12
 801887c:	2202      	movs	r2, #2
 801887e:	4619      	mov	r1, r3
 8018880:	208f      	movs	r0, #143	; 0x8f
 8018882:	f000 f947 	bl	8018b14 <SUBGRF_WriteCommand>
}
 8018886:	bf00      	nop
 8018888:	3710      	adds	r7, #16
 801888a:	46bd      	mov	sp, r7
 801888c:	bd80      	pop	{r7, pc}

0801888e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801888e:	b580      	push	{r7, lr}
 8018890:	b082      	sub	sp, #8
 8018892:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018894:	2300      	movs	r3, #0
 8018896:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018898:	1d3b      	adds	r3, r7, #4
 801889a:	2201      	movs	r2, #1
 801889c:	4619      	mov	r1, r3
 801889e:	2015      	movs	r0, #21
 80188a0:	f000 f95a 	bl	8018b58 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80188a4:	793b      	ldrb	r3, [r7, #4]
 80188a6:	425b      	negs	r3, r3
 80188a8:	105b      	asrs	r3, r3, #1
 80188aa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80188ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80188b0:	4618      	mov	r0, r3
 80188b2:	3708      	adds	r7, #8
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}

080188b8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b084      	sub	sp, #16
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
 80188c0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80188c2:	f107 030c 	add.w	r3, r7, #12
 80188c6:	2202      	movs	r2, #2
 80188c8:	4619      	mov	r1, r3
 80188ca:	2013      	movs	r0, #19
 80188cc:	f000 f944 	bl	8018b58 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80188d0:	f7ff fdec 	bl	80184ac <SUBGRF_GetPacketType>
 80188d4:	4603      	mov	r3, r0
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d10d      	bne.n	80188f6 <SUBGRF_GetRxBufferStatus+0x3e>
 80188da:	4b0c      	ldr	r3, [pc, #48]	; (801890c <SUBGRF_GetRxBufferStatus+0x54>)
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	b2db      	uxtb	r3, r3
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d108      	bne.n	80188f6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80188e4:	f240 7002 	movw	r0, #1794	; 0x702
 80188e8:	f000 f878 	bl	80189dc <SUBGRF_ReadRegister>
 80188ec:	4603      	mov	r3, r0
 80188ee:	461a      	mov	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	701a      	strb	r2, [r3, #0]
 80188f4:	e002      	b.n	80188fc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80188f6:	7b3a      	ldrb	r2, [r7, #12]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80188fc:	7b7a      	ldrb	r2, [r7, #13]
 80188fe:	683b      	ldr	r3, [r7, #0]
 8018900:	701a      	strb	r2, [r3, #0]
}
 8018902:	bf00      	nop
 8018904:	3710      	adds	r7, #16
 8018906:	46bd      	mov	sp, r7
 8018908:	bd80      	pop	{r7, pc}
 801890a:	bf00      	nop
 801890c:	20000ede 	.word	0x20000ede

08018910 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b084      	sub	sp, #16
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018918:	f107 030c 	add.w	r3, r7, #12
 801891c:	2203      	movs	r2, #3
 801891e:	4619      	mov	r1, r3
 8018920:	2014      	movs	r0, #20
 8018922:	f000 f919 	bl	8018b58 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018926:	f7ff fdc1 	bl	80184ac <SUBGRF_GetPacketType>
 801892a:	4603      	mov	r3, r0
 801892c:	461a      	mov	r2, r3
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	781b      	ldrb	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d002      	beq.n	8018940 <SUBGRF_GetPacketStatus+0x30>
 801893a:	2b01      	cmp	r3, #1
 801893c:	d013      	beq.n	8018966 <SUBGRF_GetPacketStatus+0x56>
 801893e:	e02a      	b.n	8018996 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8018940:	7b3a      	ldrb	r2, [r7, #12]
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8018946:	7b7b      	ldrb	r3, [r7, #13]
 8018948:	425b      	negs	r3, r3
 801894a:	105b      	asrs	r3, r3, #1
 801894c:	b25a      	sxtb	r2, r3
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8018952:	7bbb      	ldrb	r3, [r7, #14]
 8018954:	425b      	negs	r3, r3
 8018956:	105b      	asrs	r3, r3, #1
 8018958:	b25a      	sxtb	r2, r3
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	2200      	movs	r2, #0
 8018962:	609a      	str	r2, [r3, #8]
            break;
 8018964:	e020      	b.n	80189a8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8018966:	7b3b      	ldrb	r3, [r7, #12]
 8018968:	425b      	negs	r3, r3
 801896a:	105b      	asrs	r3, r3, #1
 801896c:	b25a      	sxtb	r2, r3
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018972:	7b7b      	ldrb	r3, [r7, #13]
 8018974:	b25b      	sxtb	r3, r3
 8018976:	3302      	adds	r3, #2
 8018978:	109b      	asrs	r3, r3, #2
 801897a:	b25a      	sxtb	r2, r3
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018980:	7bbb      	ldrb	r3, [r7, #14]
 8018982:	425b      	negs	r3, r3
 8018984:	105b      	asrs	r3, r3, #1
 8018986:	b25a      	sxtb	r2, r3
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801898c:	4b08      	ldr	r3, [pc, #32]	; (80189b0 <SUBGRF_GetPacketStatus+0xa0>)
 801898e:	681a      	ldr	r2, [r3, #0]
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	611a      	str	r2, [r3, #16]
            break;
 8018994:	e008      	b.n	80189a8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8018996:	2214      	movs	r2, #20
 8018998:	2100      	movs	r1, #0
 801899a:	6878      	ldr	r0, [r7, #4]
 801899c:	f000 fbf5 	bl	801918a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	220f      	movs	r2, #15
 80189a4:	701a      	strb	r2, [r3, #0]
            break;
 80189a6:	bf00      	nop
    }
}
 80189a8:	bf00      	nop
 80189aa:	3710      	adds	r7, #16
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	20000ee0 	.word	0x20000ee0

080189b4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b082      	sub	sp, #8
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	4603      	mov	r3, r0
 80189bc:	460a      	mov	r2, r1
 80189be:	80fb      	strh	r3, [r7, #6]
 80189c0:	4613      	mov	r3, r2
 80189c2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80189c4:	1d7a      	adds	r2, r7, #5
 80189c6:	88f9      	ldrh	r1, [r7, #6]
 80189c8:	2301      	movs	r3, #1
 80189ca:	4803      	ldr	r0, [pc, #12]	; (80189d8 <SUBGRF_WriteRegister+0x24>)
 80189cc:	f7ee fb84 	bl	80070d8 <HAL_SUBGHZ_WriteRegisters>
}
 80189d0:	bf00      	nop
 80189d2:	3708      	adds	r7, #8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}
 80189d8:	20001698 	.word	0x20001698

080189dc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	4603      	mov	r3, r0
 80189e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80189e6:	f107 020f 	add.w	r2, r7, #15
 80189ea:	88f9      	ldrh	r1, [r7, #6]
 80189ec:	2301      	movs	r3, #1
 80189ee:	4804      	ldr	r0, [pc, #16]	; (8018a00 <SUBGRF_ReadRegister+0x24>)
 80189f0:	f7ee fbd1 	bl	8007196 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80189f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3710      	adds	r7, #16
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	20001698 	.word	0x20001698

08018a04 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b086      	sub	sp, #24
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	6039      	str	r1, [r7, #0]
 8018a0e:	80fb      	strh	r3, [r7, #6]
 8018a10:	4613      	mov	r3, r2
 8018a12:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a14:	f3ef 8310 	mrs	r3, PRIMASK
 8018a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a1a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a1e:	b672      	cpsid	i
}
 8018a20:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8018a22:	88bb      	ldrh	r3, [r7, #4]
 8018a24:	88f9      	ldrh	r1, [r7, #6]
 8018a26:	683a      	ldr	r2, [r7, #0]
 8018a28:	4806      	ldr	r0, [pc, #24]	; (8018a44 <SUBGRF_WriteRegisters+0x40>)
 8018a2a:	f7ee fb55 	bl	80070d8 <HAL_SUBGHZ_WriteRegisters>
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	f383 8810 	msr	PRIMASK, r3
}
 8018a38:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a3a:	bf00      	nop
 8018a3c:	3718      	adds	r7, #24
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
 8018a42:	bf00      	nop
 8018a44:	20001698 	.word	0x20001698

08018a48 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b086      	sub	sp, #24
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	4603      	mov	r3, r0
 8018a50:	6039      	str	r1, [r7, #0]
 8018a52:	80fb      	strh	r3, [r7, #6]
 8018a54:	4613      	mov	r3, r2
 8018a56:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a58:	f3ef 8310 	mrs	r3, PRIMASK
 8018a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a62:	b672      	cpsid	i
}
 8018a64:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8018a66:	88bb      	ldrh	r3, [r7, #4]
 8018a68:	88f9      	ldrh	r1, [r7, #6]
 8018a6a:	683a      	ldr	r2, [r7, #0]
 8018a6c:	4806      	ldr	r0, [pc, #24]	; (8018a88 <SUBGRF_ReadRegisters+0x40>)
 8018a6e:	f7ee fb92 	bl	8007196 <HAL_SUBGHZ_ReadRegisters>
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a76:	693b      	ldr	r3, [r7, #16]
 8018a78:	f383 8810 	msr	PRIMASK, r3
}
 8018a7c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018a7e:	bf00      	nop
 8018a80:	3718      	adds	r7, #24
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	20001698 	.word	0x20001698

08018a8c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b086      	sub	sp, #24
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	4603      	mov	r3, r0
 8018a94:	6039      	str	r1, [r7, #0]
 8018a96:	71fb      	strb	r3, [r7, #7]
 8018a98:	4613      	mov	r3, r2
 8018a9a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8018aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8018aa2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018aa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018aa6:	b672      	cpsid	i
}
 8018aa8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8018aaa:	79bb      	ldrb	r3, [r7, #6]
 8018aac:	b29b      	uxth	r3, r3
 8018aae:	79f9      	ldrb	r1, [r7, #7]
 8018ab0:	683a      	ldr	r2, [r7, #0]
 8018ab2:	4806      	ldr	r0, [pc, #24]	; (8018acc <SUBGRF_WriteBuffer+0x40>)
 8018ab4:	f7ee fc83 	bl	80073be <HAL_SUBGHZ_WriteBuffer>
 8018ab8:	697b      	ldr	r3, [r7, #20]
 8018aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	f383 8810 	msr	PRIMASK, r3
}
 8018ac2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018ac4:	bf00      	nop
 8018ac6:	3718      	adds	r7, #24
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	bd80      	pop	{r7, pc}
 8018acc:	20001698 	.word	0x20001698

08018ad0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b086      	sub	sp, #24
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	6039      	str	r1, [r7, #0]
 8018ada:	71fb      	strb	r3, [r7, #7]
 8018adc:	4613      	mov	r3, r2
 8018ade:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8018ae4:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ae6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018ae8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018aea:	b672      	cpsid	i
}
 8018aec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8018aee:	79bb      	ldrb	r3, [r7, #6]
 8018af0:	b29b      	uxth	r3, r3
 8018af2:	79f9      	ldrb	r1, [r7, #7]
 8018af4:	683a      	ldr	r2, [r7, #0]
 8018af6:	4806      	ldr	r0, [pc, #24]	; (8018b10 <SUBGRF_ReadBuffer+0x40>)
 8018af8:	f7ee fcb4 	bl	8007464 <HAL_SUBGHZ_ReadBuffer>
 8018afc:	697b      	ldr	r3, [r7, #20]
 8018afe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	f383 8810 	msr	PRIMASK, r3
}
 8018b06:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018b08:	bf00      	nop
 8018b0a:	3718      	adds	r7, #24
 8018b0c:	46bd      	mov	sp, r7
 8018b0e:	bd80      	pop	{r7, pc}
 8018b10:	20001698 	.word	0x20001698

08018b14 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b086      	sub	sp, #24
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	6039      	str	r1, [r7, #0]
 8018b1e:	71fb      	strb	r3, [r7, #7]
 8018b20:	4613      	mov	r3, r2
 8018b22:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b24:	f3ef 8310 	mrs	r3, PRIMASK
 8018b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018b2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018b2e:	b672      	cpsid	i
}
 8018b30:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8018b32:	88bb      	ldrh	r3, [r7, #4]
 8018b34:	79f9      	ldrb	r1, [r7, #7]
 8018b36:	683a      	ldr	r2, [r7, #0]
 8018b38:	4806      	ldr	r0, [pc, #24]	; (8018b54 <SUBGRF_WriteCommand+0x40>)
 8018b3a:	f7ee fb8d 	bl	8007258 <HAL_SUBGHZ_ExecSetCmd>
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b42:	693b      	ldr	r3, [r7, #16]
 8018b44:	f383 8810 	msr	PRIMASK, r3
}
 8018b48:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018b4a:	bf00      	nop
 8018b4c:	3718      	adds	r7, #24
 8018b4e:	46bd      	mov	sp, r7
 8018b50:	bd80      	pop	{r7, pc}
 8018b52:	bf00      	nop
 8018b54:	20001698 	.word	0x20001698

08018b58 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b086      	sub	sp, #24
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	4603      	mov	r3, r0
 8018b60:	6039      	str	r1, [r7, #0]
 8018b62:	71fb      	strb	r3, [r7, #7]
 8018b64:	4613      	mov	r3, r2
 8018b66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b68:	f3ef 8310 	mrs	r3, PRIMASK
 8018b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018b72:	b672      	cpsid	i
}
 8018b74:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8018b76:	88bb      	ldrh	r3, [r7, #4]
 8018b78:	79f9      	ldrb	r1, [r7, #7]
 8018b7a:	683a      	ldr	r2, [r7, #0]
 8018b7c:	4806      	ldr	r0, [pc, #24]	; (8018b98 <SUBGRF_ReadCommand+0x40>)
 8018b7e:	f7ee fbca 	bl	8007316 <HAL_SUBGHZ_ExecGetCmd>
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	f383 8810 	msr	PRIMASK, r3
}
 8018b8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018b8e:	bf00      	nop
 8018b90:	3718      	adds	r7, #24
 8018b92:	46bd      	mov	sp, r7
 8018b94:	bd80      	pop	{r7, pc}
 8018b96:	bf00      	nop
 8018b98:	20001698 	.word	0x20001698

08018b9c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b084      	sub	sp, #16
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	460a      	mov	r2, r1
 8018ba6:	71fb      	strb	r3, [r7, #7]
 8018ba8:	4613      	mov	r3, r2
 8018baa:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8018bac:	2301      	movs	r3, #1
 8018bae:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8018bb0:	79bb      	ldrb	r3, [r7, #6]
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d10d      	bne.n	8018bd2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8018bb6:	79fb      	ldrb	r3, [r7, #7]
 8018bb8:	2b01      	cmp	r3, #1
 8018bba:	d104      	bne.n	8018bc6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8018bbc:	2302      	movs	r3, #2
 8018bbe:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8018bc0:	2004      	movs	r0, #4
 8018bc2:	f000 f8df 	bl	8018d84 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8018bc6:	79fb      	ldrb	r3, [r7, #7]
 8018bc8:	2b02      	cmp	r3, #2
 8018bca:	d107      	bne.n	8018bdc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8018bcc:	2303      	movs	r3, #3
 8018bce:	73fb      	strb	r3, [r7, #15]
 8018bd0:	e004      	b.n	8018bdc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8018bd2:	79bb      	ldrb	r3, [r7, #6]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d101      	bne.n	8018bdc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8018bd8:	2301      	movs	r3, #1
 8018bda:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8018bdc:	7bfb      	ldrb	r3, [r7, #15]
 8018bde:	4618      	mov	r0, r3
 8018be0:	f7f1 fb61 	bl	800a2a6 <RBI_ConfigRFSwitch>
}
 8018be4:	bf00      	nop
 8018be6:	3710      	adds	r7, #16
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}

08018bec <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b084      	sub	sp, #16
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8018bfa:	f7f1 fb62 	bl	800a2c2 <RBI_GetTxConfig>
 8018bfe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	2b02      	cmp	r3, #2
 8018c04:	d016      	beq.n	8018c34 <SUBGRF_SetRfTxPower+0x48>
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	2b02      	cmp	r3, #2
 8018c0a:	dc16      	bgt.n	8018c3a <SUBGRF_SetRfTxPower+0x4e>
 8018c0c:	68bb      	ldr	r3, [r7, #8]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d003      	beq.n	8018c1a <SUBGRF_SetRfTxPower+0x2e>
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	2b01      	cmp	r3, #1
 8018c16:	d00a      	beq.n	8018c2e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8018c18:	e00f      	b.n	8018c3a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8018c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c1e:	2b0f      	cmp	r3, #15
 8018c20:	dd02      	ble.n	8018c28 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8018c22:	2302      	movs	r3, #2
 8018c24:	73fb      	strb	r3, [r7, #15]
            break;
 8018c26:	e009      	b.n	8018c3c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8018c28:	2301      	movs	r3, #1
 8018c2a:	73fb      	strb	r3, [r7, #15]
            break;
 8018c2c:	e006      	b.n	8018c3c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8018c2e:	2301      	movs	r3, #1
 8018c30:	73fb      	strb	r3, [r7, #15]
            break;
 8018c32:	e003      	b.n	8018c3c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8018c34:	2302      	movs	r3, #2
 8018c36:	73fb      	strb	r3, [r7, #15]
            break;
 8018c38:	e000      	b.n	8018c3c <SUBGRF_SetRfTxPower+0x50>
            break;
 8018c3a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8018c3c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8018c40:	7bfb      	ldrb	r3, [r7, #15]
 8018c42:	2202      	movs	r2, #2
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7ff fc3b 	bl	80184c0 <SUBGRF_SetTxParams>

    return paSelect;
 8018c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}

08018c54 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8018c54:	b480      	push	{r7}
 8018c56:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8018c58:	2301      	movs	r3, #1
}
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bc80      	pop	{r7}
 8018c60:	4770      	bx	lr
	...

08018c64 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8018c6c:	4b03      	ldr	r3, [pc, #12]	; (8018c7c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	2001      	movs	r0, #1
 8018c72:	4798      	blx	r3
}
 8018c74:	bf00      	nop
 8018c76:	3708      	adds	r7, #8
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}
 8018c7c:	20000ee8 	.word	0x20000ee8

08018c80 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b082      	sub	sp, #8
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8018c88:	4b03      	ldr	r3, [pc, #12]	; (8018c98 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	2002      	movs	r0, #2
 8018c8e:	4798      	blx	r3
}
 8018c90:	bf00      	nop
 8018c92:	3708      	adds	r7, #8
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}
 8018c98:	20000ee8 	.word	0x20000ee8

08018c9c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8018ca4:	4b03      	ldr	r3, [pc, #12]	; (8018cb4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2040      	movs	r0, #64	; 0x40
 8018caa:	4798      	blx	r3
}
 8018cac:	bf00      	nop
 8018cae:	3708      	adds	r7, #8
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}
 8018cb4:	20000ee8 	.word	0x20000ee8

08018cb8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	460b      	mov	r3, r1
 8018cc2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8018cc4:	78fb      	ldrb	r3, [r7, #3]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d002      	beq.n	8018cd0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8018cca:	2b01      	cmp	r3, #1
 8018ccc:	d005      	beq.n	8018cda <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8018cce:	e00a      	b.n	8018ce6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8018cd0:	4b07      	ldr	r3, [pc, #28]	; (8018cf0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2080      	movs	r0, #128	; 0x80
 8018cd6:	4798      	blx	r3
            break;
 8018cd8:	e005      	b.n	8018ce6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8018cda:	4b05      	ldr	r3, [pc, #20]	; (8018cf0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018ce2:	4798      	blx	r3
            break;
 8018ce4:	bf00      	nop
    }
}
 8018ce6:	bf00      	nop
 8018ce8:	3708      	adds	r7, #8
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop
 8018cf0:	20000ee8 	.word	0x20000ee8

08018cf4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8018cfc:	4b04      	ldr	r3, [pc, #16]	; (8018d10 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018d04:	4798      	blx	r3
}
 8018d06:	bf00      	nop
 8018d08:	3708      	adds	r7, #8
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bd80      	pop	{r7, pc}
 8018d0e:	bf00      	nop
 8018d10:	20000ee8 	.word	0x20000ee8

08018d14 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b082      	sub	sp, #8
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8018d1c:	4b03      	ldr	r3, [pc, #12]	; (8018d2c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	2020      	movs	r0, #32
 8018d22:	4798      	blx	r3
}
 8018d24:	bf00      	nop
 8018d26:	3708      	adds	r7, #8
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	bd80      	pop	{r7, pc}
 8018d2c:	20000ee8 	.word	0x20000ee8

08018d30 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b082      	sub	sp, #8
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8018d38:	4b03      	ldr	r3, [pc, #12]	; (8018d48 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2004      	movs	r0, #4
 8018d3e:	4798      	blx	r3
}
 8018d40:	bf00      	nop
 8018d42:	3708      	adds	r7, #8
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bd80      	pop	{r7, pc}
 8018d48:	20000ee8 	.word	0x20000ee8

08018d4c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b082      	sub	sp, #8
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8018d54:	4b03      	ldr	r3, [pc, #12]	; (8018d64 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	2008      	movs	r0, #8
 8018d5a:	4798      	blx	r3
}
 8018d5c:	bf00      	nop
 8018d5e:	3708      	adds	r7, #8
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}
 8018d64:	20000ee8 	.word	0x20000ee8

08018d68 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b082      	sub	sp, #8
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8018d70:	4b03      	ldr	r3, [pc, #12]	; (8018d80 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	2010      	movs	r0, #16
 8018d76:	4798      	blx	r3
}
 8018d78:	bf00      	nop
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}
 8018d80:	20000ee8 	.word	0x20000ee8

08018d84 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b084      	sub	sp, #16
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8018d8e:	f7f1 faa6 	bl	800a2de <RBI_IsDCDC>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b01      	cmp	r3, #1
 8018d96:	d112      	bne.n	8018dbe <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8018d98:	f640 1023 	movw	r0, #2339	; 0x923
 8018d9c:	f7ff fe1e 	bl	80189dc <SUBGRF_ReadRegister>
 8018da0:	4603      	mov	r3, r0
 8018da2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8018da4:	7bfb      	ldrb	r3, [r7, #15]
 8018da6:	f023 0306 	bic.w	r3, r3, #6
 8018daa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8018dac:	7bfa      	ldrb	r2, [r7, #15]
 8018dae:	79fb      	ldrb	r3, [r7, #7]
 8018db0:	4313      	orrs	r3, r2
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	4619      	mov	r1, r3
 8018db6:	f640 1023 	movw	r0, #2339	; 0x923
 8018dba:	f7ff fdfb 	bl	80189b4 <SUBGRF_WriteRegister>
  }
}
 8018dbe:	bf00      	nop
 8018dc0:	3710      	adds	r7, #16
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}
	...

08018dc8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8018dc8:	b480      	push	{r7}
 8018dca:	b085      	sub	sp, #20
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d101      	bne.n	8018dda <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8018dd6:	231f      	movs	r3, #31
 8018dd8:	e016      	b.n	8018e08 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018dda:	2300      	movs	r3, #0
 8018ddc:	73fb      	strb	r3, [r7, #15]
 8018dde:	e00f      	b.n	8018e00 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8018de0:	7bfb      	ldrb	r3, [r7, #15]
 8018de2:	4a0c      	ldr	r2, [pc, #48]	; (8018e14 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018de8:	687a      	ldr	r2, [r7, #4]
 8018dea:	429a      	cmp	r2, r3
 8018dec:	d205      	bcs.n	8018dfa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8018dee:	7bfb      	ldrb	r3, [r7, #15]
 8018df0:	4a08      	ldr	r2, [pc, #32]	; (8018e14 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018df2:	00db      	lsls	r3, r3, #3
 8018df4:	4413      	add	r3, r2
 8018df6:	791b      	ldrb	r3, [r3, #4]
 8018df8:	e006      	b.n	8018e08 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8018dfa:	7bfb      	ldrb	r3, [r7, #15]
 8018dfc:	3301      	adds	r3, #1
 8018dfe:	73fb      	strb	r3, [r7, #15]
 8018e00:	7bfb      	ldrb	r3, [r7, #15]
 8018e02:	2b15      	cmp	r3, #21
 8018e04:	d9ec      	bls.n	8018de0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8018e06:	e7fe      	b.n	8018e06 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3714      	adds	r7, #20
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bc80      	pop	{r7}
 8018e10:	4770      	bx	lr
 8018e12:	bf00      	nop
 8018e14:	0801b5b0 	.word	0x0801b5b0

08018e18 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b08a      	sub	sp, #40	; 0x28
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
 8018e20:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8018e22:	4b36      	ldr	r3, [pc, #216]	; (8018efc <SUBGRF_GetCFO+0xe4>)
 8018e24:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8018e26:	f640 0007 	movw	r0, #2055	; 0x807
 8018e2a:	f7ff fdd7 	bl	80189dc <SUBGRF_ReadRegister>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8018e32:	7ffb      	ldrb	r3, [r7, #31]
 8018e34:	08db      	lsrs	r3, r3, #3
 8018e36:	b2db      	uxtb	r3, r3
 8018e38:	f003 0303 	and.w	r3, r3, #3
 8018e3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018e40:	4413      	add	r3, r2
 8018e42:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8018e46:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8018e48:	7ffb      	ldrb	r3, [r7, #31]
 8018e4a:	f003 0307 	and.w	r3, r3, #7
 8018e4e:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8018e50:	7fba      	ldrb	r2, [r7, #30]
 8018e52:	7f7b      	ldrb	r3, [r7, #29]
 8018e54:	3b01      	subs	r3, #1
 8018e56:	fa02 f303 	lsl.w	r3, r2, r3
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	4b28      	ldr	r3, [pc, #160]	; (8018f00 <SUBGRF_GetCFO+0xe8>)
 8018e5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e62:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8018e64:	69ba      	ldr	r2, [r7, #24]
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e6c:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8018e6e:	2301      	movs	r3, #1
 8018e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8018e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e78:	697a      	ldr	r2, [r7, #20]
 8018e7a:	fb02 f303 	mul.w	r3, r2, r3
 8018e7e:	2b07      	cmp	r3, #7
 8018e80:	d802      	bhi.n	8018e88 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8018e82:	2302      	movs	r3, #2
 8018e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8018e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e8c:	697a      	ldr	r2, [r7, #20]
 8018e8e:	fb02 f303 	mul.w	r3, r2, r3
 8018e92:	2b03      	cmp	r3, #3
 8018e94:	d802      	bhi.n	8018e9c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8018e96:	2304      	movs	r3, #4
 8018e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8018e9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018ea0:	69bb      	ldr	r3, [r7, #24]
 8018ea2:	fb02 f303 	mul.w	r3, r2, r3
 8018ea6:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8018ea8:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8018eac:	f7ff fd96 	bl	80189dc <SUBGRF_ReadRegister>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	021b      	lsls	r3, r3, #8
 8018eb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018eb8:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8018eba:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8018ebe:	f7ff fd8d 	bl	80189dc <SUBGRF_ReadRegister>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	461a      	mov	r2, r3
 8018ec6:	6a3b      	ldr	r3, [r7, #32]
 8018ec8:	4313      	orrs	r3, r2
 8018eca:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8018ecc:	6a3b      	ldr	r3, [r7, #32]
 8018ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d005      	beq.n	8018ee2 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8018ed6:	6a3b      	ldr	r3, [r7, #32]
 8018ed8:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8018edc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8018ee0:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	095b      	lsrs	r3, r3, #5
 8018ee6:	6a3a      	ldr	r2, [r7, #32]
 8018ee8:	fb02 f303 	mul.w	r3, r2, r3
 8018eec:	11da      	asrs	r2, r3, #7
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	601a      	str	r2, [r3, #0]
}
 8018ef2:	bf00      	nop
 8018ef4:	3728      	adds	r7, #40	; 0x28
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}
 8018efa:	bf00      	nop
 8018efc:	0c0a0804 	.word	0x0c0a0804
 8018f00:	01e84800 	.word	0x01e84800

08018f04 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8018f04:	b480      	push	{r7}
 8018f06:	b087      	sub	sp, #28
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	60b9      	str	r1, [r7, #8]
 8018f0e:	607a      	str	r2, [r7, #4]
 8018f10:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8018f12:	2300      	movs	r3, #0
 8018f14:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8018f16:	f04f 33ff 	mov.w	r3, #4294967295
 8018f1a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8018f1c:	697b      	ldr	r3, [r7, #20]
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	371c      	adds	r7, #28
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bc80      	pop	{r7}
 8018f26:	4770      	bx	lr

08018f28 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8018f28:	b480      	push	{r7}
 8018f2a:	b087      	sub	sp, #28
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	4603      	mov	r3, r0
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	607a      	str	r2, [r7, #4]
 8018f34:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8018f36:	2300      	movs	r3, #0
 8018f38:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8018f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f3e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8018f40:	697b      	ldr	r3, [r7, #20]
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	371c      	adds	r7, #28
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bc80      	pop	{r7}
 8018f4a:	4770      	bx	lr

08018f4c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b085      	sub	sp, #20
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	60f8      	str	r0, [r7, #12]
 8018f54:	60b9      	str	r1, [r7, #8]
 8018f56:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8018f58:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	3714      	adds	r7, #20
 8018f60:	46bd      	mov	sp, r7
 8018f62:	bc80      	pop	{r7}
 8018f64:	4770      	bx	lr

08018f66 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8018f66:	b480      	push	{r7}
 8018f68:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8018f6a:	bf00      	nop
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bc80      	pop	{r7}
 8018f70:	4770      	bx	lr

08018f72 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8018f72:	b480      	push	{r7}
 8018f74:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8018f76:	2300      	movs	r3, #0
#endif
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bc80      	pop	{r7}
 8018f7e:	4770      	bx	lr

08018f80 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8018f80:	b480      	push	{r7}
 8018f82:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8018f84:	2300      	movs	r3, #0
#endif
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bc80      	pop	{r7}
 8018f8c:	4770      	bx	lr

08018f8e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8018f8e:	b480      	push	{r7}
 8018f90:	b083      	sub	sp, #12
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	4603      	mov	r3, r0
 8018f96:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8018f98:	bf00      	nop
 8018f9a:	370c      	adds	r7, #12
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	bc80      	pop	{r7}
 8018fa0:	4770      	bx	lr

08018fa2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8018fa2:	b480      	push	{r7}
 8018fa4:	b087      	sub	sp, #28
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	60f8      	str	r0, [r7, #12]
 8018faa:	460b      	mov	r3, r1
 8018fac:	607a      	str	r2, [r7, #4]
 8018fae:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8018fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fb4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8018fb6:	697b      	ldr	r3, [r7, #20]
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	371c      	adds	r7, #28
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bc80      	pop	{r7}
 8018fc0:	4770      	bx	lr

08018fc2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8018fc2:	b480      	push	{r7}
 8018fc4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8018fc6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8018fca:	4618      	mov	r0, r3
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bc80      	pop	{r7}
 8018fd0:	4770      	bx	lr

08018fd2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8018fd2:	b480      	push	{r7}
 8018fd4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8018fd6:	bf00      	nop
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bc80      	pop	{r7}
 8018fdc:	4770      	bx	lr

08018fde <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8018fde:	b480      	push	{r7}
 8018fe0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8018fe2:	bf00      	nop
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bc80      	pop	{r7}
 8018fe8:	4770      	bx	lr

08018fea <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8018fea:	b480      	push	{r7}
 8018fec:	b083      	sub	sp, #12
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8018ff4:	bf00      	nop
 8018ff6:	370c      	adds	r7, #12
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bc80      	pop	{r7}
 8018ffc:	4770      	bx	lr
	...

08019000 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019000:	b480      	push	{r7}
 8019002:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019004:	4b04      	ldr	r3, [pc, #16]	; (8019018 <UTIL_LPM_Init+0x18>)
 8019006:	2200      	movs	r2, #0
 8019008:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801900a:	4b04      	ldr	r3, [pc, #16]	; (801901c <UTIL_LPM_Init+0x1c>)
 801900c:	2200      	movs	r2, #0
 801900e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019010:	bf00      	nop
 8019012:	46bd      	mov	sp, r7
 8019014:	bc80      	pop	{r7}
 8019016:	4770      	bx	lr
 8019018:	20000eec 	.word	0x20000eec
 801901c:	20000ef0 	.word	0x20000ef0

08019020 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019020:	b480      	push	{r7}
 8019022:	b087      	sub	sp, #28
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
 8019028:	460b      	mov	r3, r1
 801902a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801902c:	f3ef 8310 	mrs	r3, PRIMASK
 8019030:	613b      	str	r3, [r7, #16]
  return(result);
 8019032:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019036:	b672      	cpsid	i
}
 8019038:	bf00      	nop
  
  switch( state )
 801903a:	78fb      	ldrb	r3, [r7, #3]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d008      	beq.n	8019052 <UTIL_LPM_SetStopMode+0x32>
 8019040:	2b01      	cmp	r3, #1
 8019042:	d10e      	bne.n	8019062 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019044:	4b0d      	ldr	r3, [pc, #52]	; (801907c <UTIL_LPM_SetStopMode+0x5c>)
 8019046:	681a      	ldr	r2, [r3, #0]
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	4313      	orrs	r3, r2
 801904c:	4a0b      	ldr	r2, [pc, #44]	; (801907c <UTIL_LPM_SetStopMode+0x5c>)
 801904e:	6013      	str	r3, [r2, #0]
      break;
 8019050:	e008      	b.n	8019064 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	43da      	mvns	r2, r3
 8019056:	4b09      	ldr	r3, [pc, #36]	; (801907c <UTIL_LPM_SetStopMode+0x5c>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	4013      	ands	r3, r2
 801905c:	4a07      	ldr	r2, [pc, #28]	; (801907c <UTIL_LPM_SetStopMode+0x5c>)
 801905e:	6013      	str	r3, [r2, #0]
      break;
 8019060:	e000      	b.n	8019064 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019062:	bf00      	nop
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	f383 8810 	msr	PRIMASK, r3
}
 801906e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019070:	bf00      	nop
 8019072:	371c      	adds	r7, #28
 8019074:	46bd      	mov	sp, r7
 8019076:	bc80      	pop	{r7}
 8019078:	4770      	bx	lr
 801907a:	bf00      	nop
 801907c:	20000eec 	.word	0x20000eec

08019080 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019080:	b480      	push	{r7}
 8019082:	b087      	sub	sp, #28
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
 8019088:	460b      	mov	r3, r1
 801908a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801908c:	f3ef 8310 	mrs	r3, PRIMASK
 8019090:	613b      	str	r3, [r7, #16]
  return(result);
 8019092:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019096:	b672      	cpsid	i
}
 8019098:	bf00      	nop
  
  switch(state)
 801909a:	78fb      	ldrb	r3, [r7, #3]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d008      	beq.n	80190b2 <UTIL_LPM_SetOffMode+0x32>
 80190a0:	2b01      	cmp	r3, #1
 80190a2:	d10e      	bne.n	80190c2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80190a4:	4b0d      	ldr	r3, [pc, #52]	; (80190dc <UTIL_LPM_SetOffMode+0x5c>)
 80190a6:	681a      	ldr	r2, [r3, #0]
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	4313      	orrs	r3, r2
 80190ac:	4a0b      	ldr	r2, [pc, #44]	; (80190dc <UTIL_LPM_SetOffMode+0x5c>)
 80190ae:	6013      	str	r3, [r2, #0]
      break;
 80190b0:	e008      	b.n	80190c4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	43da      	mvns	r2, r3
 80190b6:	4b09      	ldr	r3, [pc, #36]	; (80190dc <UTIL_LPM_SetOffMode+0x5c>)
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4013      	ands	r3, r2
 80190bc:	4a07      	ldr	r2, [pc, #28]	; (80190dc <UTIL_LPM_SetOffMode+0x5c>)
 80190be:	6013      	str	r3, [r2, #0]
      break;
 80190c0:	e000      	b.n	80190c4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80190c2:	bf00      	nop
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	f383 8810 	msr	PRIMASK, r3
}
 80190ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80190d0:	bf00      	nop
 80190d2:	371c      	adds	r7, #28
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bc80      	pop	{r7}
 80190d8:	4770      	bx	lr
 80190da:	bf00      	nop
 80190dc:	20000ef0 	.word	0x20000ef0

080190e0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80190e0:	b580      	push	{r7, lr}
 80190e2:	b084      	sub	sp, #16
 80190e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190e6:	f3ef 8310 	mrs	r3, PRIMASK
 80190ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80190ec:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80190ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80190f0:	b672      	cpsid	i
}
 80190f2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80190f4:	4b12      	ldr	r3, [pc, #72]	; (8019140 <UTIL_LPM_EnterLowPower+0x60>)
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d006      	beq.n	801910a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80190fc:	4b11      	ldr	r3, [pc, #68]	; (8019144 <UTIL_LPM_EnterLowPower+0x64>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019102:	4b10      	ldr	r3, [pc, #64]	; (8019144 <UTIL_LPM_EnterLowPower+0x64>)
 8019104:	685b      	ldr	r3, [r3, #4]
 8019106:	4798      	blx	r3
 8019108:	e010      	b.n	801912c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801910a:	4b0f      	ldr	r3, [pc, #60]	; (8019148 <UTIL_LPM_EnterLowPower+0x68>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d006      	beq.n	8019120 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019112:	4b0c      	ldr	r3, [pc, #48]	; (8019144 <UTIL_LPM_EnterLowPower+0x64>)
 8019114:	689b      	ldr	r3, [r3, #8]
 8019116:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019118:	4b0a      	ldr	r3, [pc, #40]	; (8019144 <UTIL_LPM_EnterLowPower+0x64>)
 801911a:	68db      	ldr	r3, [r3, #12]
 801911c:	4798      	blx	r3
 801911e:	e005      	b.n	801912c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019120:	4b08      	ldr	r3, [pc, #32]	; (8019144 <UTIL_LPM_EnterLowPower+0x64>)
 8019122:	691b      	ldr	r3, [r3, #16]
 8019124:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019126:	4b07      	ldr	r3, [pc, #28]	; (8019144 <UTIL_LPM_EnterLowPower+0x64>)
 8019128:	695b      	ldr	r3, [r3, #20]
 801912a:	4798      	blx	r3
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f383 8810 	msr	PRIMASK, r3
}
 8019136:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019138:	bf00      	nop
 801913a:	3710      	adds	r7, #16
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}
 8019140:	20000eec 	.word	0x20000eec
 8019144:	0801b090 	.word	0x0801b090
 8019148:	20000ef0 	.word	0x20000ef0

0801914c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801914c:	b480      	push	{r7}
 801914e:	b087      	sub	sp, #28
 8019150:	af00      	add	r7, sp, #0
 8019152:	60f8      	str	r0, [r7, #12]
 8019154:	60b9      	str	r1, [r7, #8]
 8019156:	4613      	mov	r3, r2
 8019158:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019162:	e007      	b.n	8019174 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019164:	693a      	ldr	r2, [r7, #16]
 8019166:	1c53      	adds	r3, r2, #1
 8019168:	613b      	str	r3, [r7, #16]
 801916a:	697b      	ldr	r3, [r7, #20]
 801916c:	1c59      	adds	r1, r3, #1
 801916e:	6179      	str	r1, [r7, #20]
 8019170:	7812      	ldrb	r2, [r2, #0]
 8019172:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019174:	88fb      	ldrh	r3, [r7, #6]
 8019176:	1e5a      	subs	r2, r3, #1
 8019178:	80fa      	strh	r2, [r7, #6]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d1f2      	bne.n	8019164 <UTIL_MEM_cpy_8+0x18>
    }
}
 801917e:	bf00      	nop
 8019180:	bf00      	nop
 8019182:	371c      	adds	r7, #28
 8019184:	46bd      	mov	sp, r7
 8019186:	bc80      	pop	{r7}
 8019188:	4770      	bx	lr

0801918a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801918a:	b480      	push	{r7}
 801918c:	b085      	sub	sp, #20
 801918e:	af00      	add	r7, sp, #0
 8019190:	6078      	str	r0, [r7, #4]
 8019192:	460b      	mov	r3, r1
 8019194:	70fb      	strb	r3, [r7, #3]
 8019196:	4613      	mov	r3, r2
 8019198:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801919e:	e004      	b.n	80191aa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	1c5a      	adds	r2, r3, #1
 80191a4:	60fa      	str	r2, [r7, #12]
 80191a6:	78fa      	ldrb	r2, [r7, #3]
 80191a8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80191aa:	883b      	ldrh	r3, [r7, #0]
 80191ac:	1e5a      	subs	r2, r3, #1
 80191ae:	803a      	strh	r2, [r7, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d1f5      	bne.n	80191a0 <UTIL_MEM_set_8+0x16>
  }
}
 80191b4:	bf00      	nop
 80191b6:	bf00      	nop
 80191b8:	3714      	adds	r7, #20
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bc80      	pop	{r7}
 80191be:	4770      	bx	lr

080191c0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80191c0:	b082      	sub	sp, #8
 80191c2:	b480      	push	{r7}
 80191c4:	b087      	sub	sp, #28
 80191c6:	af00      	add	r7, sp, #0
 80191c8:	60f8      	str	r0, [r7, #12]
 80191ca:	1d38      	adds	r0, r7, #4
 80191cc:	e880 0006 	stmia.w	r0, {r1, r2}
 80191d0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80191d2:	2300      	movs	r3, #0
 80191d4:	613b      	str	r3, [r7, #16]
 80191d6:	2300      	movs	r3, #0
 80191d8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 80191da:	687a      	ldr	r2, [r7, #4]
 80191dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191de:	4413      	add	r3, r2
 80191e0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80191e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80191e6:	b29a      	uxth	r2, r3
 80191e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	4413      	add	r3, r2
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	b21b      	sxth	r3, r3
 80191f4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 80191f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80191fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80191fe:	db0a      	blt.n	8019216 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019200:	693b      	ldr	r3, [r7, #16]
 8019202:	3301      	adds	r3, #1
 8019204:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019206:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801920a:	b29b      	uxth	r3, r3
 801920c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019210:	b29b      	uxth	r3, r3
 8019212:	b21b      	sxth	r3, r3
 8019214:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	461a      	mov	r2, r3
 801921a:	f107 0310 	add.w	r3, r7, #16
 801921e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019222:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019226:	68f8      	ldr	r0, [r7, #12]
 8019228:	371c      	adds	r7, #28
 801922a:	46bd      	mov	sp, r7
 801922c:	bc80      	pop	{r7}
 801922e:	b002      	add	sp, #8
 8019230:	4770      	bx	lr

08019232 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019232:	b082      	sub	sp, #8
 8019234:	b480      	push	{r7}
 8019236:	b087      	sub	sp, #28
 8019238:	af00      	add	r7, sp, #0
 801923a:	60f8      	str	r0, [r7, #12]
 801923c:	1d38      	adds	r0, r7, #4
 801923e:	e880 0006 	stmia.w	r0, {r1, r2}
 8019242:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019244:	2300      	movs	r3, #0
 8019246:	613b      	str	r3, [r7, #16]
 8019248:	2300      	movs	r3, #0
 801924a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801924c:	687a      	ldr	r2, [r7, #4]
 801924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019250:	1ad3      	subs	r3, r2, r3
 8019252:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019254:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019258:	b29a      	uxth	r2, r3
 801925a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801925e:	b29b      	uxth	r3, r3
 8019260:	1ad3      	subs	r3, r2, r3
 8019262:	b29b      	uxth	r3, r3
 8019264:	b21b      	sxth	r3, r3
 8019266:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801926c:	2b00      	cmp	r3, #0
 801926e:	da0a      	bge.n	8019286 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	3b01      	subs	r3, #1
 8019274:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019276:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801927a:	b29b      	uxth	r3, r3
 801927c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019280:	b29b      	uxth	r3, r3
 8019282:	b21b      	sxth	r3, r3
 8019284:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	461a      	mov	r2, r3
 801928a:	f107 0310 	add.w	r3, r7, #16
 801928e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019292:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019296:	68f8      	ldr	r0, [r7, #12]
 8019298:	371c      	adds	r7, #28
 801929a:	46bd      	mov	sp, r7
 801929c:	bc80      	pop	{r7}
 801929e:	b002      	add	sp, #8
 80192a0:	4770      	bx	lr
	...

080192a4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b088      	sub	sp, #32
 80192a8:	af02      	add	r7, sp, #8
 80192aa:	463b      	mov	r3, r7
 80192ac:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80192b0:	2300      	movs	r3, #0
 80192b2:	60bb      	str	r3, [r7, #8]
 80192b4:	2300      	movs	r3, #0
 80192b6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80192b8:	4b10      	ldr	r3, [pc, #64]	; (80192fc <SysTimeSet+0x58>)
 80192ba:	691b      	ldr	r3, [r3, #16]
 80192bc:	f107 0208 	add.w	r2, r7, #8
 80192c0:	3204      	adds	r2, #4
 80192c2:	4610      	mov	r0, r2
 80192c4:	4798      	blx	r3
 80192c6:	4603      	mov	r3, r0
 80192c8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80192ca:	f107 0010 	add.w	r0, r7, #16
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	9300      	str	r3, [sp, #0]
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	463a      	mov	r2, r7
 80192d6:	ca06      	ldmia	r2, {r1, r2}
 80192d8:	f7ff ffab 	bl	8019232 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80192dc:	4b07      	ldr	r3, [pc, #28]	; (80192fc <SysTimeSet+0x58>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	693a      	ldr	r2, [r7, #16]
 80192e2:	4610      	mov	r0, r2
 80192e4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80192e6:	4b05      	ldr	r3, [pc, #20]	; (80192fc <SysTimeSet+0x58>)
 80192e8:	689b      	ldr	r3, [r3, #8]
 80192ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80192ee:	4610      	mov	r0, r2
 80192f0:	4798      	blx	r3
}
 80192f2:	bf00      	nop
 80192f4:	3718      	adds	r7, #24
 80192f6:	46bd      	mov	sp, r7
 80192f8:	bd80      	pop	{r7, pc}
 80192fa:	bf00      	nop
 80192fc:	0801b174 	.word	0x0801b174

08019300 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b08a      	sub	sp, #40	; 0x28
 8019304:	af02      	add	r7, sp, #8
 8019306:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019308:	2300      	movs	r3, #0
 801930a:	61bb      	str	r3, [r7, #24]
 801930c:	2300      	movs	r3, #0
 801930e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019310:	2300      	movs	r3, #0
 8019312:	613b      	str	r3, [r7, #16]
 8019314:	2300      	movs	r3, #0
 8019316:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019318:	4b14      	ldr	r3, [pc, #80]	; (801936c <SysTimeGet+0x6c>)
 801931a:	691b      	ldr	r3, [r3, #16]
 801931c:	f107 0218 	add.w	r2, r7, #24
 8019320:	3204      	adds	r2, #4
 8019322:	4610      	mov	r0, r2
 8019324:	4798      	blx	r3
 8019326:	4603      	mov	r3, r0
 8019328:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801932a:	4b10      	ldr	r3, [pc, #64]	; (801936c <SysTimeGet+0x6c>)
 801932c:	68db      	ldr	r3, [r3, #12]
 801932e:	4798      	blx	r3
 8019330:	4603      	mov	r3, r0
 8019332:	b21b      	sxth	r3, r3
 8019334:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019336:	4b0d      	ldr	r3, [pc, #52]	; (801936c <SysTimeGet+0x6c>)
 8019338:	685b      	ldr	r3, [r3, #4]
 801933a:	4798      	blx	r3
 801933c:	4603      	mov	r3, r0
 801933e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019340:	f107 0010 	add.w	r0, r7, #16
 8019344:	69fb      	ldr	r3, [r7, #28]
 8019346:	9300      	str	r3, [sp, #0]
 8019348:	69bb      	ldr	r3, [r7, #24]
 801934a:	f107 0208 	add.w	r2, r7, #8
 801934e:	ca06      	ldmia	r2, {r1, r2}
 8019350:	f7ff ff36 	bl	80191c0 <SysTimeAdd>

  return sysTime;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	461a      	mov	r2, r3
 8019358:	f107 0310 	add.w	r3, r7, #16
 801935c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019360:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	3720      	adds	r7, #32
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}
 801936c:	0801b174 	.word	0x0801b174

08019370 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b084      	sub	sp, #16
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019378:	2300      	movs	r3, #0
 801937a:	60bb      	str	r3, [r7, #8]
 801937c:	2300      	movs	r3, #0
 801937e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019380:	4b0a      	ldr	r3, [pc, #40]	; (80193ac <SysTimeGetMcuTime+0x3c>)
 8019382:	691b      	ldr	r3, [r3, #16]
 8019384:	f107 0208 	add.w	r2, r7, #8
 8019388:	3204      	adds	r2, #4
 801938a:	4610      	mov	r0, r2
 801938c:	4798      	blx	r3
 801938e:	4603      	mov	r3, r0
 8019390:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	461a      	mov	r2, r3
 8019396:	f107 0308 	add.w	r3, r7, #8
 801939a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801939e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	3710      	adds	r7, #16
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	0801b174 	.word	0x0801b174

080193b0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b088      	sub	sp, #32
 80193b4:	af02      	add	r7, sp, #8
 80193b6:	463b      	mov	r3, r7
 80193b8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80193bc:	4b0f      	ldr	r3, [pc, #60]	; (80193fc <SysTimeToMs+0x4c>)
 80193be:	68db      	ldr	r3, [r3, #12]
 80193c0:	4798      	blx	r3
 80193c2:	4603      	mov	r3, r0
 80193c4:	b21b      	sxth	r3, r3
 80193c6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80193c8:	4b0c      	ldr	r3, [pc, #48]	; (80193fc <SysTimeToMs+0x4c>)
 80193ca:	685b      	ldr	r3, [r3, #4]
 80193cc:	4798      	blx	r3
 80193ce:	4603      	mov	r3, r0
 80193d0:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80193d2:	f107 0008 	add.w	r0, r7, #8
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	9300      	str	r3, [sp, #0]
 80193da:	693b      	ldr	r3, [r7, #16]
 80193dc:	463a      	mov	r2, r7
 80193de:	ca06      	ldmia	r2, {r1, r2}
 80193e0:	f7ff ff27 	bl	8019232 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80193e4:	68bb      	ldr	r3, [r7, #8]
 80193e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80193ea:	fb02 f303 	mul.w	r3, r2, r3
 80193ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80193f2:	4413      	add	r3, r2
}
 80193f4:	4618      	mov	r0, r3
 80193f6:	3718      	adds	r7, #24
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	0801b174 	.word	0x0801b174

08019400 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b08a      	sub	sp, #40	; 0x28
 8019404:	af02      	add	r7, sp, #8
 8019406:	6078      	str	r0, [r7, #4]
 8019408:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	4a19      	ldr	r2, [pc, #100]	; (8019474 <SysTimeFromMs+0x74>)
 801940e:	fba2 2303 	umull	r2, r3, r2, r3
 8019412:	099b      	lsrs	r3, r3, #6
 8019414:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019416:	69fb      	ldr	r3, [r7, #28]
 8019418:	617b      	str	r3, [r7, #20]
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	b29a      	uxth	r2, r3
 801941e:	69fb      	ldr	r3, [r7, #28]
 8019420:	b29b      	uxth	r3, r3
 8019422:	4619      	mov	r1, r3
 8019424:	0149      	lsls	r1, r1, #5
 8019426:	1ac9      	subs	r1, r1, r3
 8019428:	0089      	lsls	r1, r1, #2
 801942a:	440b      	add	r3, r1
 801942c:	00db      	lsls	r3, r3, #3
 801942e:	b29b      	uxth	r3, r3
 8019430:	1ad3      	subs	r3, r2, r3
 8019432:	b29b      	uxth	r3, r3
 8019434:	b21b      	sxth	r3, r3
 8019436:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019438:	f107 030c 	add.w	r3, r7, #12
 801943c:	2200      	movs	r2, #0
 801943e:	601a      	str	r2, [r3, #0]
 8019440:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019442:	4b0d      	ldr	r3, [pc, #52]	; (8019478 <SysTimeFromMs+0x78>)
 8019444:	68db      	ldr	r3, [r3, #12]
 8019446:	4798      	blx	r3
 8019448:	4603      	mov	r3, r0
 801944a:	b21b      	sxth	r3, r3
 801944c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801944e:	4b0a      	ldr	r3, [pc, #40]	; (8019478 <SysTimeFromMs+0x78>)
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	4798      	blx	r3
 8019454:	4603      	mov	r3, r0
 8019456:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019458:	6878      	ldr	r0, [r7, #4]
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	9300      	str	r3, [sp, #0]
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	f107 0214 	add.w	r2, r7, #20
 8019464:	ca06      	ldmia	r2, {r1, r2}
 8019466:	f7ff feab 	bl	80191c0 <SysTimeAdd>
}
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	3720      	adds	r7, #32
 801946e:	46bd      	mov	sp, r7
 8019470:	bd80      	pop	{r7, pc}
 8019472:	bf00      	nop
 8019474:	10624dd3 	.word	0x10624dd3
 8019478:	0801b174 	.word	0x0801b174

0801947c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801947c:	b480      	push	{r7}
 801947e:	b085      	sub	sp, #20
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019484:	2300      	movs	r3, #0
 8019486:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019488:	e00e      	b.n	80194a8 <ee_skip_atoi+0x2c>
 801948a:	68fa      	ldr	r2, [r7, #12]
 801948c:	4613      	mov	r3, r2
 801948e:	009b      	lsls	r3, r3, #2
 8019490:	4413      	add	r3, r2
 8019492:	005b      	lsls	r3, r3, #1
 8019494:	4618      	mov	r0, r3
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	1c59      	adds	r1, r3, #1
 801949c:	687a      	ldr	r2, [r7, #4]
 801949e:	6011      	str	r1, [r2, #0]
 80194a0:	781b      	ldrb	r3, [r3, #0]
 80194a2:	4403      	add	r3, r0
 80194a4:	3b30      	subs	r3, #48	; 0x30
 80194a6:	60fb      	str	r3, [r7, #12]
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	2b2f      	cmp	r3, #47	; 0x2f
 80194b0:	d904      	bls.n	80194bc <ee_skip_atoi+0x40>
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	2b39      	cmp	r3, #57	; 0x39
 80194ba:	d9e6      	bls.n	801948a <ee_skip_atoi+0xe>
  return i;
 80194bc:	68fb      	ldr	r3, [r7, #12]
}
 80194be:	4618      	mov	r0, r3
 80194c0:	3714      	adds	r7, #20
 80194c2:	46bd      	mov	sp, r7
 80194c4:	bc80      	pop	{r7}
 80194c6:	4770      	bx	lr

080194c8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80194c8:	b480      	push	{r7}
 80194ca:	b099      	sub	sp, #100	; 0x64
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	60f8      	str	r0, [r7, #12]
 80194d0:	60b9      	str	r1, [r7, #8]
 80194d2:	607a      	str	r2, [r7, #4]
 80194d4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 80194d6:	4b72      	ldr	r3, [pc, #456]	; (80196a0 <ee_number+0x1d8>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80194dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80194de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d002      	beq.n	80194ec <ee_number+0x24>
 80194e6:	4b6f      	ldr	r3, [pc, #444]	; (80196a4 <ee_number+0x1dc>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	dd02      	ble.n	80194f8 <ee_number+0x30>
 80194f2:	683b      	ldr	r3, [r7, #0]
 80194f4:	2b24      	cmp	r3, #36	; 0x24
 80194f6:	dd01      	ble.n	80194fc <ee_number+0x34>
 80194f8:	2300      	movs	r3, #0
 80194fa:	e0cc      	b.n	8019696 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 80194fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80194fe:	f003 0301 	and.w	r3, r3, #1
 8019502:	2b00      	cmp	r3, #0
 8019504:	d001      	beq.n	801950a <ee_number+0x42>
 8019506:	2330      	movs	r3, #48	; 0x30
 8019508:	e000      	b.n	801950c <ee_number+0x44>
 801950a:	2320      	movs	r3, #32
 801950c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019510:	2300      	movs	r3, #0
 8019512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019518:	f003 0302 	and.w	r3, r3, #2
 801951c:	2b00      	cmp	r3, #0
 801951e:	d00b      	beq.n	8019538 <ee_number+0x70>
  {
    if (num < 0)
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	2b00      	cmp	r3, #0
 8019524:	da08      	bge.n	8019538 <ee_number+0x70>
    {
      sign = '-';
 8019526:	232d      	movs	r3, #45	; 0x2d
 8019528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	425b      	negs	r3, r3
 8019530:	607b      	str	r3, [r7, #4]
      size--;
 8019532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019534:	3b01      	subs	r3, #1
 8019536:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019538:	2300      	movs	r3, #0
 801953a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d120      	bne.n	8019584 <ee_number+0xbc>
    tmp[i++] = '0';
 8019542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019544:	1c5a      	adds	r2, r3, #1
 8019546:	657a      	str	r2, [r7, #84]	; 0x54
 8019548:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801954c:	4413      	add	r3, r2
 801954e:	2230      	movs	r2, #48	; 0x30
 8019550:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019554:	e019      	b.n	801958a <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	683a      	ldr	r2, [r7, #0]
 801955a:	fbb3 f1f2 	udiv	r1, r3, r2
 801955e:	fb02 f201 	mul.w	r2, r2, r1
 8019562:	1a9b      	subs	r3, r3, r2
 8019564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019566:	441a      	add	r2, r3
 8019568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801956a:	1c59      	adds	r1, r3, #1
 801956c:	6579      	str	r1, [r7, #84]	; 0x54
 801956e:	7812      	ldrb	r2, [r2, #0]
 8019570:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019574:	440b      	add	r3, r1
 8019576:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801957a:	687a      	ldr	r2, [r7, #4]
 801957c:	683b      	ldr	r3, [r7, #0]
 801957e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019582:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d1e5      	bne.n	8019556 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 801958a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801958e:	429a      	cmp	r2, r3
 8019590:	dd01      	ble.n	8019596 <ee_number+0xce>
 8019592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019594:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801959a:	1ad3      	subs	r3, r2, r3
 801959c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801959e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80195a0:	f003 0301 	and.w	r3, r3, #1
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d112      	bne.n	80195ce <ee_number+0x106>
 80195a8:	e00c      	b.n	80195c4 <ee_number+0xfc>
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	1c5a      	adds	r2, r3, #1
 80195ae:	60fa      	str	r2, [r7, #12]
 80195b0:	2220      	movs	r2, #32
 80195b2:	701a      	strb	r2, [r3, #0]
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	3b01      	subs	r3, #1
 80195b8:	60bb      	str	r3, [r7, #8]
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d101      	bne.n	80195c4 <ee_number+0xfc>
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	e068      	b.n	8019696 <ee_number+0x1ce>
 80195c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80195c6:	1e5a      	subs	r2, r3, #1
 80195c8:	66ba      	str	r2, [r7, #104]	; 0x68
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	dced      	bgt.n	80195aa <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 80195ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d01b      	beq.n	801960e <ee_number+0x146>
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	1c5a      	adds	r2, r3, #1
 80195da:	60fa      	str	r2, [r7, #12]
 80195dc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80195e0:	701a      	strb	r2, [r3, #0]
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	3b01      	subs	r3, #1
 80195e6:	60bb      	str	r3, [r7, #8]
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d10f      	bne.n	801960e <ee_number+0x146>
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	e051      	b.n	8019696 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	1c5a      	adds	r2, r3, #1
 80195f6:	60fa      	str	r2, [r7, #12]
 80195f8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80195fc:	701a      	strb	r2, [r3, #0]
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	3b01      	subs	r3, #1
 8019602:	60bb      	str	r3, [r7, #8]
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d101      	bne.n	801960e <ee_number+0x146>
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	e043      	b.n	8019696 <ee_number+0x1ce>
 801960e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019610:	1e5a      	subs	r2, r3, #1
 8019612:	66ba      	str	r2, [r7, #104]	; 0x68
 8019614:	2b00      	cmp	r3, #0
 8019616:	dcec      	bgt.n	80195f2 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019618:	e00c      	b.n	8019634 <ee_number+0x16c>
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	1c5a      	adds	r2, r3, #1
 801961e:	60fa      	str	r2, [r7, #12]
 8019620:	2230      	movs	r2, #48	; 0x30
 8019622:	701a      	strb	r2, [r3, #0]
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	3b01      	subs	r3, #1
 8019628:	60bb      	str	r3, [r7, #8]
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d101      	bne.n	8019634 <ee_number+0x16c>
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	e030      	b.n	8019696 <ee_number+0x1ce>
 8019634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019636:	1e5a      	subs	r2, r3, #1
 8019638:	66fa      	str	r2, [r7, #108]	; 0x6c
 801963a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801963c:	429a      	cmp	r2, r3
 801963e:	dbec      	blt.n	801961a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019640:	e010      	b.n	8019664 <ee_number+0x19c>
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	1c5a      	adds	r2, r3, #1
 8019646:	60fa      	str	r2, [r7, #12]
 8019648:	f107 0110 	add.w	r1, r7, #16
 801964c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801964e:	440a      	add	r2, r1
 8019650:	7812      	ldrb	r2, [r2, #0]
 8019652:	701a      	strb	r2, [r3, #0]
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	3b01      	subs	r3, #1
 8019658:	60bb      	str	r3, [r7, #8]
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	2b00      	cmp	r3, #0
 801965e:	d101      	bne.n	8019664 <ee_number+0x19c>
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	e018      	b.n	8019696 <ee_number+0x1ce>
 8019664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019666:	1e5a      	subs	r2, r3, #1
 8019668:	657a      	str	r2, [r7, #84]	; 0x54
 801966a:	2b00      	cmp	r3, #0
 801966c:	dce9      	bgt.n	8019642 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801966e:	e00c      	b.n	801968a <ee_number+0x1c2>
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	1c5a      	adds	r2, r3, #1
 8019674:	60fa      	str	r2, [r7, #12]
 8019676:	2220      	movs	r2, #32
 8019678:	701a      	strb	r2, [r3, #0]
 801967a:	68bb      	ldr	r3, [r7, #8]
 801967c:	3b01      	subs	r3, #1
 801967e:	60bb      	str	r3, [r7, #8]
 8019680:	68bb      	ldr	r3, [r7, #8]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d101      	bne.n	801968a <ee_number+0x1c2>
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	e005      	b.n	8019696 <ee_number+0x1ce>
 801968a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801968c:	1e5a      	subs	r2, r3, #1
 801968e:	66ba      	str	r2, [r7, #104]	; 0x68
 8019690:	2b00      	cmp	r3, #0
 8019692:	dced      	bgt.n	8019670 <ee_number+0x1a8>

  return str;
 8019694:	68fb      	ldr	r3, [r7, #12]
}
 8019696:	4618      	mov	r0, r3
 8019698:	3764      	adds	r7, #100	; 0x64
 801969a:	46bd      	mov	sp, r7
 801969c:	bc80      	pop	{r7}
 801969e:	4770      	bx	lr
 80196a0:	20000124 	.word	0x20000124
 80196a4:	20000128 	.word	0x20000128

080196a8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b092      	sub	sp, #72	; 0x48
 80196ac:	af04      	add	r7, sp, #16
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	607a      	str	r2, [r7, #4]
 80196b4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80196b6:	68bb      	ldr	r3, [r7, #8]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	dc01      	bgt.n	80196c0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 80196bc:	2300      	movs	r3, #0
 80196be:	e142      	b.n	8019946 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196c4:	e12a      	b.n	801991c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 80196c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	1ad2      	subs	r2, r2, r3
 80196cc:	68bb      	ldr	r3, [r7, #8]
 80196ce:	3b01      	subs	r3, #1
 80196d0:	429a      	cmp	r2, r3
 80196d2:	f280 8131 	bge.w	8019938 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	781b      	ldrb	r3, [r3, #0]
 80196da:	2b25      	cmp	r3, #37	; 0x25
 80196dc:	d006      	beq.n	80196ec <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e2:	1c59      	adds	r1, r3, #1
 80196e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80196e6:	7812      	ldrb	r2, [r2, #0]
 80196e8:	701a      	strb	r2, [r3, #0]
      continue;
 80196ea:	e114      	b.n	8019916 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 80196ec:	2300      	movs	r3, #0
 80196ee:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	3301      	adds	r3, #1
 80196f4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	781b      	ldrb	r3, [r3, #0]
 80196fa:	2b30      	cmp	r3, #48	; 0x30
 80196fc:	d103      	bne.n	8019706 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 80196fe:	6a3b      	ldr	r3, [r7, #32]
 8019700:	f043 0301 	orr.w	r3, r3, #1
 8019704:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019706:	f04f 33ff 	mov.w	r3, #4294967295
 801970a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	2b2f      	cmp	r3, #47	; 0x2f
 8019712:	d908      	bls.n	8019726 <tiny_vsnprintf_like+0x7e>
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	2b39      	cmp	r3, #57	; 0x39
 801971a:	d804      	bhi.n	8019726 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801971c:	1d3b      	adds	r3, r7, #4
 801971e:	4618      	mov	r0, r3
 8019720:	f7ff feac 	bl	801947c <ee_skip_atoi>
 8019724:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019726:	f04f 33ff 	mov.w	r3, #4294967295
 801972a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801972c:	f04f 33ff 	mov.w	r3, #4294967295
 8019730:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019732:	230a      	movs	r3, #10
 8019734:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	3b58      	subs	r3, #88	; 0x58
 801973c:	2b20      	cmp	r3, #32
 801973e:	f200 8094 	bhi.w	801986a <tiny_vsnprintf_like+0x1c2>
 8019742:	a201      	add	r2, pc, #4	; (adr r2, 8019748 <tiny_vsnprintf_like+0xa0>)
 8019744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019748:	08019853 	.word	0x08019853
 801974c:	0801986b 	.word	0x0801986b
 8019750:	0801986b 	.word	0x0801986b
 8019754:	0801986b 	.word	0x0801986b
 8019758:	0801986b 	.word	0x0801986b
 801975c:	0801986b 	.word	0x0801986b
 8019760:	0801986b 	.word	0x0801986b
 8019764:	0801986b 	.word	0x0801986b
 8019768:	0801986b 	.word	0x0801986b
 801976c:	0801986b 	.word	0x0801986b
 8019770:	0801986b 	.word	0x0801986b
 8019774:	080197d7 	.word	0x080197d7
 8019778:	08019861 	.word	0x08019861
 801977c:	0801986b 	.word	0x0801986b
 8019780:	0801986b 	.word	0x0801986b
 8019784:	0801986b 	.word	0x0801986b
 8019788:	0801986b 	.word	0x0801986b
 801978c:	08019861 	.word	0x08019861
 8019790:	0801986b 	.word	0x0801986b
 8019794:	0801986b 	.word	0x0801986b
 8019798:	0801986b 	.word	0x0801986b
 801979c:	0801986b 	.word	0x0801986b
 80197a0:	0801986b 	.word	0x0801986b
 80197a4:	0801986b 	.word	0x0801986b
 80197a8:	0801986b 	.word	0x0801986b
 80197ac:	0801986b 	.word	0x0801986b
 80197b0:	0801986b 	.word	0x0801986b
 80197b4:	080197f7 	.word	0x080197f7
 80197b8:	0801986b 	.word	0x0801986b
 80197bc:	080198b7 	.word	0x080198b7
 80197c0:	0801986b 	.word	0x0801986b
 80197c4:	0801986b 	.word	0x0801986b
 80197c8:	0801985b 	.word	0x0801985b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80197cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ce:	1c5a      	adds	r2, r3, #1
 80197d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80197d2:	2220      	movs	r2, #32
 80197d4:	701a      	strb	r2, [r3, #0]
 80197d6:	69fb      	ldr	r3, [r7, #28]
 80197d8:	3b01      	subs	r3, #1
 80197da:	61fb      	str	r3, [r7, #28]
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	dcf4      	bgt.n	80197cc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 80197e2:	683b      	ldr	r3, [r7, #0]
 80197e4:	1d1a      	adds	r2, r3, #4
 80197e6:	603a      	str	r2, [r7, #0]
 80197e8:	6819      	ldr	r1, [r3, #0]
 80197ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ec:	1c5a      	adds	r2, r3, #1
 80197ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80197f0:	b2ca      	uxtb	r2, r1
 80197f2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80197f4:	e08f      	b.n	8019916 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 80197f6:	683b      	ldr	r3, [r7, #0]
 80197f8:	1d1a      	adds	r2, r3, #4
 80197fa:	603a      	str	r2, [r7, #0]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019802:	2b00      	cmp	r3, #0
 8019804:	d101      	bne.n	801980a <tiny_vsnprintf_like+0x162>
 8019806:	4b52      	ldr	r3, [pc, #328]	; (8019950 <tiny_vsnprintf_like+0x2a8>)
 8019808:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801980a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801980c:	f7e6 fcb4 	bl	8000178 <strlen>
 8019810:	4603      	mov	r3, r0
 8019812:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019814:	e004      	b.n	8019820 <tiny_vsnprintf_like+0x178>
 8019816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019818:	1c5a      	adds	r2, r3, #1
 801981a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801981c:	2220      	movs	r2, #32
 801981e:	701a      	strb	r2, [r3, #0]
 8019820:	69fb      	ldr	r3, [r7, #28]
 8019822:	1e5a      	subs	r2, r3, #1
 8019824:	61fa      	str	r2, [r7, #28]
 8019826:	693a      	ldr	r2, [r7, #16]
 8019828:	429a      	cmp	r2, r3
 801982a:	dbf4      	blt.n	8019816 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801982c:	2300      	movs	r3, #0
 801982e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019830:	e00a      	b.n	8019848 <tiny_vsnprintf_like+0x1a0>
 8019832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019834:	1c53      	adds	r3, r2, #1
 8019836:	627b      	str	r3, [r7, #36]	; 0x24
 8019838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983a:	1c59      	adds	r1, r3, #1
 801983c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801983e:	7812      	ldrb	r2, [r2, #0]
 8019840:	701a      	strb	r2, [r3, #0]
 8019842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019844:	3301      	adds	r3, #1
 8019846:	62bb      	str	r3, [r7, #40]	; 0x28
 8019848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801984a:	693b      	ldr	r3, [r7, #16]
 801984c:	429a      	cmp	r2, r3
 801984e:	dbf0      	blt.n	8019832 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019850:	e061      	b.n	8019916 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019852:	6a3b      	ldr	r3, [r7, #32]
 8019854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019858:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801985a:	2310      	movs	r3, #16
 801985c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801985e:	e02d      	b.n	80198bc <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019860:	6a3b      	ldr	r3, [r7, #32]
 8019862:	f043 0302 	orr.w	r3, r3, #2
 8019866:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019868:	e025      	b.n	80198b6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	781b      	ldrb	r3, [r3, #0]
 801986e:	2b25      	cmp	r3, #37	; 0x25
 8019870:	d004      	beq.n	801987c <tiny_vsnprintf_like+0x1d4>
 8019872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019874:	1c5a      	adds	r2, r3, #1
 8019876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019878:	2225      	movs	r2, #37	; 0x25
 801987a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801987c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	1ad2      	subs	r2, r2, r3
 8019882:	68bb      	ldr	r3, [r7, #8]
 8019884:	3b01      	subs	r3, #1
 8019886:	429a      	cmp	r2, r3
 8019888:	da17      	bge.n	80198ba <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	781b      	ldrb	r3, [r3, #0]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d006      	beq.n	80198a0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019892:	687a      	ldr	r2, [r7, #4]
 8019894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019896:	1c59      	adds	r1, r3, #1
 8019898:	62f9      	str	r1, [r7, #44]	; 0x2c
 801989a:	7812      	ldrb	r2, [r2, #0]
 801989c:	701a      	strb	r2, [r3, #0]
 801989e:	e002      	b.n	80198a6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	3b01      	subs	r3, #1
 80198a4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 80198a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	1ad2      	subs	r2, r2, r3
 80198ac:	68bb      	ldr	r3, [r7, #8]
 80198ae:	3b01      	subs	r3, #1
 80198b0:	429a      	cmp	r2, r3
 80198b2:	db2f      	blt.n	8019914 <tiny_vsnprintf_like+0x26c>
 80198b4:	e002      	b.n	80198bc <tiny_vsnprintf_like+0x214>
        break;
 80198b6:	bf00      	nop
 80198b8:	e000      	b.n	80198bc <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 80198ba:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	2b6c      	cmp	r3, #108	; 0x6c
 80198c0:	d105      	bne.n	80198ce <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	1d1a      	adds	r2, r3, #4
 80198c6:	603a      	str	r2, [r7, #0]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	637b      	str	r3, [r7, #52]	; 0x34
 80198cc:	e00f      	b.n	80198ee <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 80198ce:	6a3b      	ldr	r3, [r7, #32]
 80198d0:	f003 0302 	and.w	r3, r3, #2
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d005      	beq.n	80198e4 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	1d1a      	adds	r2, r3, #4
 80198dc:	603a      	str	r2, [r7, #0]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	637b      	str	r3, [r7, #52]	; 0x34
 80198e2:	e004      	b.n	80198ee <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 80198e4:	683b      	ldr	r3, [r7, #0]
 80198e6:	1d1a      	adds	r2, r3, #4
 80198e8:	603a      	str	r2, [r7, #0]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	1e5a      	subs	r2, r3, #1
 80198f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	1acb      	subs	r3, r1, r3
 80198f8:	1ad1      	subs	r1, r2, r3
 80198fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80198fc:	6a3b      	ldr	r3, [r7, #32]
 80198fe:	9302      	str	r3, [sp, #8]
 8019900:	69bb      	ldr	r3, [r7, #24]
 8019902:	9301      	str	r3, [sp, #4]
 8019904:	69fb      	ldr	r3, [r7, #28]
 8019906:	9300      	str	r3, [sp, #0]
 8019908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801990a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801990c:	f7ff fddc 	bl	80194c8 <ee_number>
 8019910:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019912:	e000      	b.n	8019916 <tiny_vsnprintf_like+0x26e>
        continue;
 8019914:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	3301      	adds	r3, #1
 801991a:	607b      	str	r3, [r7, #4]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b00      	cmp	r3, #0
 8019922:	f47f aed0 	bne.w	80196c6 <tiny_vsnprintf_like+0x1e>
 8019926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	1ad2      	subs	r2, r2, r3
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	3b01      	subs	r3, #1
 8019930:	429a      	cmp	r2, r3
 8019932:	f6bf aec8 	bge.w	80196c6 <tiny_vsnprintf_like+0x1e>
 8019936:	e000      	b.n	801993a <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019938:	bf00      	nop
  }

  *str = '\0';
 801993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993c:	2200      	movs	r2, #0
 801993e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8019940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	1ad3      	subs	r3, r2, r3
}
 8019946:	4618      	mov	r0, r3
 8019948:	3738      	adds	r7, #56	; 0x38
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}
 801994e:	bf00      	nop
 8019950:	0801b088 	.word	0x0801b088

08019954 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b08c      	sub	sp, #48	; 0x30
 8019958:	af00      	add	r7, sp, #0
 801995a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801995c:	4b67      	ldr	r3, [pc, #412]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8019962:	4b66      	ldr	r3, [pc, #408]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 8019964:	681a      	ldr	r2, [r3, #0]
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	4013      	ands	r3, r2
 801996a:	4a64      	ldr	r2, [pc, #400]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 801996c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801996e:	e083      	b.n	8019a78 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8019970:	2300      	movs	r3, #0
 8019972:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8019974:	e002      	b.n	801997c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8019976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019978:	3301      	adds	r3, #1
 801997a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801997c:	4a60      	ldr	r2, [pc, #384]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 801997e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019980:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019984:	4b5f      	ldr	r3, [pc, #380]	; (8019b04 <UTIL_SEQ_Run+0x1b0>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	401a      	ands	r2, r3
 801998a:	4b5c      	ldr	r3, [pc, #368]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	4013      	ands	r3, r2
 8019990:	2b00      	cmp	r3, #0
 8019992:	d0f0      	beq.n	8019976 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8019994:	4a5a      	ldr	r2, [pc, #360]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 8019996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019998:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801999c:	4b59      	ldr	r3, [pc, #356]	; (8019b04 <UTIL_SEQ_Run+0x1b0>)
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	401a      	ands	r2, r3
 80199a2:	4b56      	ldr	r3, [pc, #344]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	4013      	ands	r3, r2
 80199a8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80199aa:	4a55      	ldr	r2, [pc, #340]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 80199ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ae:	00db      	lsls	r3, r3, #3
 80199b0:	4413      	add	r3, r2
 80199b2:	685a      	ldr	r2, [r3, #4]
 80199b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199b6:	4013      	ands	r3, r2
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d106      	bne.n	80199ca <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80199bc:	4a50      	ldr	r2, [pc, #320]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 80199be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199c0:	00db      	lsls	r3, r3, #3
 80199c2:	4413      	add	r3, r2
 80199c4:	f04f 32ff 	mov.w	r2, #4294967295
 80199c8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80199ca:	4a4d      	ldr	r2, [pc, #308]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 80199cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ce:	00db      	lsls	r3, r3, #3
 80199d0:	4413      	add	r3, r2
 80199d2:	685a      	ldr	r2, [r3, #4]
 80199d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d6:	4013      	ands	r3, r2
 80199d8:	4618      	mov	r0, r3
 80199da:	f000 f8f9 	bl	8019bd0 <SEQ_BitPosition>
 80199de:	4603      	mov	r3, r0
 80199e0:	461a      	mov	r2, r3
 80199e2:	4b49      	ldr	r3, [pc, #292]	; (8019b08 <UTIL_SEQ_Run+0x1b4>)
 80199e4:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80199e6:	4a46      	ldr	r2, [pc, #280]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 80199e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ea:	00db      	lsls	r3, r3, #3
 80199ec:	4413      	add	r3, r2
 80199ee:	685a      	ldr	r2, [r3, #4]
 80199f0:	4b45      	ldr	r3, [pc, #276]	; (8019b08 <UTIL_SEQ_Run+0x1b4>)
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2101      	movs	r1, #1
 80199f6:	fa01 f303 	lsl.w	r3, r1, r3
 80199fa:	43db      	mvns	r3, r3
 80199fc:	401a      	ands	r2, r3
 80199fe:	4940      	ldr	r1, [pc, #256]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 8019a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a02:	00db      	lsls	r3, r3, #3
 8019a04:	440b      	add	r3, r1
 8019a06:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a08:	f3ef 8310 	mrs	r3, PRIMASK
 8019a0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8019a0e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019a10:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a12:	b672      	cpsid	i
}
 8019a14:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019a16:	4b3c      	ldr	r3, [pc, #240]	; (8019b08 <UTIL_SEQ_Run+0x1b4>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	2201      	movs	r2, #1
 8019a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a20:	43da      	mvns	r2, r3
 8019a22:	4b3a      	ldr	r3, [pc, #232]	; (8019b0c <UTIL_SEQ_Run+0x1b8>)
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	4013      	ands	r3, r2
 8019a28:	4a38      	ldr	r2, [pc, #224]	; (8019b0c <UTIL_SEQ_Run+0x1b8>)
 8019a2a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019a2c:	2302      	movs	r3, #2
 8019a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a30:	e013      	b.n	8019a5a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a34:	3b01      	subs	r3, #1
 8019a36:	4a32      	ldr	r2, [pc, #200]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 8019a38:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019a3c:	4b32      	ldr	r3, [pc, #200]	; (8019b08 <UTIL_SEQ_Run+0x1b4>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	2201      	movs	r2, #1
 8019a42:	fa02 f303 	lsl.w	r3, r2, r3
 8019a46:	43da      	mvns	r2, r3
 8019a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a4a:	3b01      	subs	r3, #1
 8019a4c:	400a      	ands	r2, r1
 8019a4e:	492c      	ldr	r1, [pc, #176]	; (8019b00 <UTIL_SEQ_Run+0x1ac>)
 8019a50:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a56:	3b01      	subs	r3, #1
 8019a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d1e8      	bne.n	8019a32 <UTIL_SEQ_Run+0xde>
 8019a60:	6a3b      	ldr	r3, [r7, #32]
 8019a62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a64:	697b      	ldr	r3, [r7, #20]
 8019a66:	f383 8810 	msr	PRIMASK, r3
}
 8019a6a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019a6c:	4b26      	ldr	r3, [pc, #152]	; (8019b08 <UTIL_SEQ_Run+0x1b4>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	4a27      	ldr	r2, [pc, #156]	; (8019b10 <UTIL_SEQ_Run+0x1bc>)
 8019a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019a76:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8019a78:	4b24      	ldr	r3, [pc, #144]	; (8019b0c <UTIL_SEQ_Run+0x1b8>)
 8019a7a:	681a      	ldr	r2, [r3, #0]
 8019a7c:	4b21      	ldr	r3, [pc, #132]	; (8019b04 <UTIL_SEQ_Run+0x1b0>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	401a      	ands	r2, r3
 8019a82:	4b1e      	ldr	r3, [pc, #120]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	4013      	ands	r3, r2
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d007      	beq.n	8019a9c <UTIL_SEQ_Run+0x148>
 8019a8c:	4b21      	ldr	r3, [pc, #132]	; (8019b14 <UTIL_SEQ_Run+0x1c0>)
 8019a8e:	681a      	ldr	r2, [r3, #0]
 8019a90:	4b21      	ldr	r3, [pc, #132]	; (8019b18 <UTIL_SEQ_Run+0x1c4>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	4013      	ands	r3, r2
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	f43f af6a 	beq.w	8019970 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019a9c:	4b1a      	ldr	r3, [pc, #104]	; (8019b08 <UTIL_SEQ_Run+0x1b4>)
 8019a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8019aa2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019aa4:	f000 f888 	bl	8019bb8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8019aac:	613b      	str	r3, [r7, #16]
  return(result);
 8019aae:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ab2:	b672      	cpsid	i
}
 8019ab4:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8019ab6:	4b15      	ldr	r3, [pc, #84]	; (8019b0c <UTIL_SEQ_Run+0x1b8>)
 8019ab8:	681a      	ldr	r2, [r3, #0]
 8019aba:	4b12      	ldr	r3, [pc, #72]	; (8019b04 <UTIL_SEQ_Run+0x1b0>)
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	401a      	ands	r2, r3
 8019ac0:	4b0e      	ldr	r3, [pc, #56]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	4013      	ands	r3, r2
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d108      	bne.n	8019adc <UTIL_SEQ_Run+0x188>
 8019aca:	4b12      	ldr	r3, [pc, #72]	; (8019b14 <UTIL_SEQ_Run+0x1c0>)
 8019acc:	681a      	ldr	r2, [r3, #0]
 8019ace:	4b12      	ldr	r3, [pc, #72]	; (8019b18 <UTIL_SEQ_Run+0x1c4>)
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	4013      	ands	r3, r2
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d101      	bne.n	8019adc <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8019ad8:	f7e7 ff5c 	bl	8001994 <UTIL_SEQ_Idle>
 8019adc:	69fb      	ldr	r3, [r7, #28]
 8019ade:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	f383 8810 	msr	PRIMASK, r3
}
 8019ae6:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8019ae8:	f000 f86c 	bl	8019bc4 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019aec:	4a03      	ldr	r2, [pc, #12]	; (8019afc <UTIL_SEQ_Run+0x1a8>)
 8019aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af0:	6013      	str	r3, [r2, #0]

  return;
 8019af2:	bf00      	nop
}
 8019af4:	3730      	adds	r7, #48	; 0x30
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}
 8019afa:	bf00      	nop
 8019afc:	20000130 	.word	0x20000130
 8019b00:	20000f84 	.word	0x20000f84
 8019b04:	2000012c 	.word	0x2000012c
 8019b08:	20000f00 	.word	0x20000f00
 8019b0c:	20000ef4 	.word	0x20000ef4
 8019b10:	20000f04 	.word	0x20000f04
 8019b14:	20000ef8 	.word	0x20000ef8
 8019b18:	20000efc 	.word	0x20000efc

08019b1c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b088      	sub	sp, #32
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	60f8      	str	r0, [r7, #12]
 8019b24:	60b9      	str	r1, [r7, #8]
 8019b26:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b28:	f3ef 8310 	mrs	r3, PRIMASK
 8019b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8019b2e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b32:	b672      	cpsid	i
}
 8019b34:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019b36:	68f8      	ldr	r0, [r7, #12]
 8019b38:	f000 f84a 	bl	8019bd0 <SEQ_BitPosition>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	4619      	mov	r1, r3
 8019b40:	4a06      	ldr	r2, [pc, #24]	; (8019b5c <UTIL_SEQ_RegTask+0x40>)
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019b48:	69fb      	ldr	r3, [r7, #28]
 8019b4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b4c:	69bb      	ldr	r3, [r7, #24]
 8019b4e:	f383 8810 	msr	PRIMASK, r3
}
 8019b52:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019b54:	bf00      	nop
}
 8019b56:	3720      	adds	r7, #32
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	bd80      	pop	{r7, pc}
 8019b5c:	20000f04 	.word	0x20000f04

08019b60 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019b60:	b480      	push	{r7}
 8019b62:	b087      	sub	sp, #28
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8019b6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019b70:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019b72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b74:	b672      	cpsid	i
}
 8019b76:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019b78:	4b0d      	ldr	r3, [pc, #52]	; (8019bb0 <UTIL_SEQ_SetTask+0x50>)
 8019b7a:	681a      	ldr	r2, [r3, #0]
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	4313      	orrs	r3, r2
 8019b80:	4a0b      	ldr	r2, [pc, #44]	; (8019bb0 <UTIL_SEQ_SetTask+0x50>)
 8019b82:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019b84:	4a0b      	ldr	r2, [pc, #44]	; (8019bb4 <UTIL_SEQ_SetTask+0x54>)
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	431a      	orrs	r2, r3
 8019b90:	4908      	ldr	r1, [pc, #32]	; (8019bb4 <UTIL_SEQ_SetTask+0x54>)
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019b98:	697b      	ldr	r3, [r7, #20]
 8019b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b9c:	693b      	ldr	r3, [r7, #16]
 8019b9e:	f383 8810 	msr	PRIMASK, r3
}
 8019ba2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019ba4:	bf00      	nop
}
 8019ba6:	371c      	adds	r7, #28
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bc80      	pop	{r7}
 8019bac:	4770      	bx	lr
 8019bae:	bf00      	nop
 8019bb0:	20000ef4 	.word	0x20000ef4
 8019bb4:	20000f84 	.word	0x20000f84

08019bb8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019bb8:	b480      	push	{r7}
 8019bba:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019bbc:	bf00      	nop
}
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bc80      	pop	{r7}
 8019bc2:	4770      	bx	lr

08019bc4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019bc8:	bf00      	nop
}
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bc80      	pop	{r7}
 8019bce:	4770      	bx	lr

08019bd0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019bd0:	b480      	push	{r7}
 8019bd2:	b085      	sub	sp, #20
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8019bd8:	2300      	movs	r3, #0
 8019bda:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	0c1b      	lsrs	r3, r3, #16
 8019be0:	041b      	lsls	r3, r3, #16
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d104      	bne.n	8019bf0 <SEQ_BitPosition+0x20>
 8019be6:	2310      	movs	r3, #16
 8019be8:	73fb      	strb	r3, [r7, #15]
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	041b      	lsls	r3, r3, #16
 8019bee:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d105      	bne.n	8019c06 <SEQ_BitPosition+0x36>
 8019bfa:	7bfb      	ldrb	r3, [r7, #15]
 8019bfc:	3308      	adds	r3, #8
 8019bfe:	73fb      	strb	r3, [r7, #15]
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	021b      	lsls	r3, r3, #8
 8019c04:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d105      	bne.n	8019c1c <SEQ_BitPosition+0x4c>
 8019c10:	7bfb      	ldrb	r3, [r7, #15]
 8019c12:	3304      	adds	r3, #4
 8019c14:	73fb      	strb	r3, [r7, #15]
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	011b      	lsls	r3, r3, #4
 8019c1a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	0f1b      	lsrs	r3, r3, #28
 8019c20:	4a06      	ldr	r2, [pc, #24]	; (8019c3c <SEQ_BitPosition+0x6c>)
 8019c22:	5cd2      	ldrb	r2, [r2, r3]
 8019c24:	7bfb      	ldrb	r3, [r7, #15]
 8019c26:	4413      	add	r3, r2
 8019c28:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019c2a:	7bfb      	ldrb	r3, [r7, #15]
 8019c2c:	f1c3 031f 	rsb	r3, r3, #31
 8019c30:	b2db      	uxtb	r3, r3
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	3714      	adds	r7, #20
 8019c36:	46bd      	mov	sp, r7
 8019c38:	bc80      	pop	{r7}
 8019c3a:	4770      	bx	lr
 8019c3c:	0801b660 	.word	0x0801b660

08019c40 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8019c44:	4b04      	ldr	r3, [pc, #16]	; (8019c58 <UTIL_TIMER_Init+0x18>)
 8019c46:	2200      	movs	r2, #0
 8019c48:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8019c4a:	4b04      	ldr	r3, [pc, #16]	; (8019c5c <UTIL_TIMER_Init+0x1c>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	4798      	blx	r3
 8019c50:	4603      	mov	r3, r0
}
 8019c52:	4618      	mov	r0, r3
 8019c54:	bd80      	pop	{r7, pc}
 8019c56:	bf00      	nop
 8019c58:	20000f94 	.word	0x20000f94
 8019c5c:	0801b148 	.word	0x0801b148

08019c60 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b084      	sub	sp, #16
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	60f8      	str	r0, [r7, #12]
 8019c68:	60b9      	str	r1, [r7, #8]
 8019c6a:	603b      	str	r3, [r7, #0]
 8019c6c:	4613      	mov	r3, r2
 8019c6e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d023      	beq.n	8019cbe <UTIL_TIMER_Create+0x5e>
 8019c76:	683b      	ldr	r3, [r7, #0]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d020      	beq.n	8019cbe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8019c82:	4b11      	ldr	r3, [pc, #68]	; (8019cc8 <UTIL_TIMER_Create+0x68>)
 8019c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c86:	68b8      	ldr	r0, [r7, #8]
 8019c88:	4798      	blx	r3
 8019c8a:	4602      	mov	r2, r0
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	2200      	movs	r2, #0
 8019c94:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	2200      	movs	r2, #0
 8019c9a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	683a      	ldr	r2, [r7, #0]
 8019ca6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	69ba      	ldr	r2, [r7, #24]
 8019cac:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	79fa      	ldrb	r2, [r7, #7]
 8019cb2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	e000      	b.n	8019cc0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8019cbe:	2301      	movs	r3, #1
  }
}
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	3710      	adds	r7, #16
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd80      	pop	{r7, pc}
 8019cc8:	0801b148 	.word	0x0801b148

08019ccc <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b08a      	sub	sp, #40	; 0x28
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d056      	beq.n	8019d8e <UTIL_TIMER_Start+0xc2>
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	f000 f9a9 	bl	801a038 <TimerExists>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	f083 0301 	eor.w	r3, r3, #1
 8019cec:	b2db      	uxtb	r3, r3
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d04d      	beq.n	8019d8e <UTIL_TIMER_Start+0xc2>
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	7a5b      	ldrb	r3, [r3, #9]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d149      	bne.n	8019d8e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8019cfe:	613b      	str	r3, [r7, #16]
  return(result);
 8019d00:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d04:	b672      	cpsid	i
}
 8019d06:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	685b      	ldr	r3, [r3, #4]
 8019d0c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8019d0e:	4b24      	ldr	r3, [pc, #144]	; (8019da0 <UTIL_TIMER_Start+0xd4>)
 8019d10:	6a1b      	ldr	r3, [r3, #32]
 8019d12:	4798      	blx	r3
 8019d14:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8019d16:	6a3a      	ldr	r2, [r7, #32]
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	d201      	bcs.n	8019d22 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8019d1e:	69bb      	ldr	r3, [r7, #24]
 8019d20:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6a3a      	ldr	r2, [r7, #32]
 8019d26:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	2200      	movs	r2, #0
 8019d2c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	2201      	movs	r2, #1
 8019d32:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	2200      	movs	r2, #0
 8019d38:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8019d3a:	4b1a      	ldr	r3, [pc, #104]	; (8019da4 <UTIL_TIMER_Start+0xd8>)
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d106      	bne.n	8019d50 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8019d42:	4b17      	ldr	r3, [pc, #92]	; (8019da0 <UTIL_TIMER_Start+0xd4>)
 8019d44:	691b      	ldr	r3, [r3, #16]
 8019d46:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8019d48:	6878      	ldr	r0, [r7, #4]
 8019d4a:	f000 f9eb 	bl	801a124 <TimerInsertNewHeadTimer>
 8019d4e:	e017      	b.n	8019d80 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8019d50:	4b13      	ldr	r3, [pc, #76]	; (8019da0 <UTIL_TIMER_Start+0xd4>)
 8019d52:	699b      	ldr	r3, [r3, #24]
 8019d54:	4798      	blx	r3
 8019d56:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	681a      	ldr	r2, [r3, #0]
 8019d5c:	697b      	ldr	r3, [r7, #20]
 8019d5e:	441a      	add	r2, r3
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	681a      	ldr	r2, [r3, #0]
 8019d68:	4b0e      	ldr	r3, [pc, #56]	; (8019da4 <UTIL_TIMER_Start+0xd8>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d203      	bcs.n	8019d7a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8019d72:	6878      	ldr	r0, [r7, #4]
 8019d74:	f000 f9d6 	bl	801a124 <TimerInsertNewHeadTimer>
 8019d78:	e002      	b.n	8019d80 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f000 f9a2 	bl	801a0c4 <TimerInsertTimer>
 8019d80:	69fb      	ldr	r3, [r7, #28]
 8019d82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	f383 8810 	msr	PRIMASK, r3
}
 8019d8a:	bf00      	nop
  {
 8019d8c:	e002      	b.n	8019d94 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8019d8e:	2301      	movs	r3, #1
 8019d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8019d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8019d98:	4618      	mov	r0, r3
 8019d9a:	3728      	adds	r7, #40	; 0x28
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd80      	pop	{r7, pc}
 8019da0:	0801b148 	.word	0x0801b148
 8019da4:	20000f94 	.word	0x20000f94

08019da8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b088      	sub	sp, #32
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019db0:	2300      	movs	r3, #0
 8019db2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d05b      	beq.n	8019e72 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019dba:	f3ef 8310 	mrs	r3, PRIMASK
 8019dbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8019dc0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019dc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dc4:	b672      	cpsid	i
}
 8019dc6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8019dc8:	4b2d      	ldr	r3, [pc, #180]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8019dce:	4b2c      	ldr	r3, [pc, #176]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2201      	movs	r2, #1
 8019dd8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8019dda:	4b29      	ldr	r3, [pc, #164]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d041      	beq.n	8019e66 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2200      	movs	r2, #0
 8019de6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8019de8:	4b25      	ldr	r3, [pc, #148]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	687a      	ldr	r2, [r7, #4]
 8019dee:	429a      	cmp	r2, r3
 8019df0:	d134      	bne.n	8019e5c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8019df2:	4b23      	ldr	r3, [pc, #140]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	2200      	movs	r2, #0
 8019df8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8019dfa:	4b21      	ldr	r3, [pc, #132]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	695b      	ldr	r3, [r3, #20]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d00a      	beq.n	8019e1a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8019e04:	4b1e      	ldr	r3, [pc, #120]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	695b      	ldr	r3, [r3, #20]
 8019e0a:	4a1d      	ldr	r2, [pc, #116]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019e0c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8019e0e:	4b1c      	ldr	r3, [pc, #112]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	4618      	mov	r0, r3
 8019e14:	f000 f92c 	bl	801a070 <TimerSetTimeout>
 8019e18:	e023      	b.n	8019e62 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8019e1a:	4b1a      	ldr	r3, [pc, #104]	; (8019e84 <UTIL_TIMER_Stop+0xdc>)
 8019e1c:	68db      	ldr	r3, [r3, #12]
 8019e1e:	4798      	blx	r3
            TimerListHead = NULL;
 8019e20:	4b17      	ldr	r3, [pc, #92]	; (8019e80 <UTIL_TIMER_Stop+0xd8>)
 8019e22:	2200      	movs	r2, #0
 8019e24:	601a      	str	r2, [r3, #0]
 8019e26:	e01c      	b.n	8019e62 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8019e28:	697a      	ldr	r2, [r7, #20]
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	429a      	cmp	r2, r3
 8019e2e:	d110      	bne.n	8019e52 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8019e30:	697b      	ldr	r3, [r7, #20]
 8019e32:	695b      	ldr	r3, [r3, #20]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d006      	beq.n	8019e46 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	695b      	ldr	r3, [r3, #20]
 8019e3c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019e3e:	69bb      	ldr	r3, [r7, #24]
 8019e40:	697a      	ldr	r2, [r7, #20]
 8019e42:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8019e44:	e00d      	b.n	8019e62 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8019e46:	2300      	movs	r3, #0
 8019e48:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8019e4a:	69bb      	ldr	r3, [r7, #24]
 8019e4c:	697a      	ldr	r2, [r7, #20]
 8019e4e:	615a      	str	r2, [r3, #20]
            break;
 8019e50:	e007      	b.n	8019e62 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8019e56:	697b      	ldr	r3, [r7, #20]
 8019e58:	695b      	ldr	r3, [r3, #20]
 8019e5a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8019e5c:	697b      	ldr	r3, [r7, #20]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d1e2      	bne.n	8019e28 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8019e62:	2300      	movs	r3, #0
 8019e64:	77fb      	strb	r3, [r7, #31]
 8019e66:	693b      	ldr	r3, [r7, #16]
 8019e68:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	f383 8810 	msr	PRIMASK, r3
}
 8019e70:	e001      	b.n	8019e76 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8019e72:	2301      	movs	r3, #1
 8019e74:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8019e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3720      	adds	r7, #32
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}
 8019e80:	20000f94 	.word	0x20000f94
 8019e84:	0801b148 	.word	0x0801b148

08019e88 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b084      	sub	sp, #16
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
 8019e90:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019e92:	2300      	movs	r3, #0
 8019e94:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d102      	bne.n	8019ea2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	73fb      	strb	r3, [r7, #15]
 8019ea0:	e014      	b.n	8019ecc <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8019ea2:	4b0d      	ldr	r3, [pc, #52]	; (8019ed8 <UTIL_TIMER_SetPeriod+0x50>)
 8019ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ea6:	6838      	ldr	r0, [r7, #0]
 8019ea8:	4798      	blx	r3
 8019eaa:	4602      	mov	r2, r0
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8019eb0:	6878      	ldr	r0, [r7, #4]
 8019eb2:	f000 f8c1 	bl	801a038 <TimerExists>
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d007      	beq.n	8019ecc <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8019ebc:	6878      	ldr	r0, [r7, #4]
 8019ebe:	f7ff ff73 	bl	8019da8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	f7ff ff02 	bl	8019ccc <UTIL_TIMER_Start>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8019ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	3710      	adds	r7, #16
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}
 8019ed6:	bf00      	nop
 8019ed8:	0801b148 	.word	0x0801b148

08019edc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 8019edc:	b590      	push	{r4, r7, lr}
 8019ede:	b089      	sub	sp, #36	; 0x24
 8019ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8019ee6:	60bb      	str	r3, [r7, #8]
  return(result);
 8019ee8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019eec:	b672      	cpsid	i
}
 8019eee:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8019ef0:	4b38      	ldr	r3, [pc, #224]	; (8019fd4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019ef2:	695b      	ldr	r3, [r3, #20]
 8019ef4:	4798      	blx	r3
 8019ef6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8019ef8:	4b36      	ldr	r3, [pc, #216]	; (8019fd4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019efa:	691b      	ldr	r3, [r3, #16]
 8019efc:	4798      	blx	r3
 8019efe:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8019f00:	693a      	ldr	r2, [r7, #16]
 8019f02:	697b      	ldr	r3, [r7, #20]
 8019f04:	1ad3      	subs	r3, r2, r3
 8019f06:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8019f08:	4b33      	ldr	r3, [pc, #204]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d037      	beq.n	8019f80 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 8019f10:	4b31      	ldr	r3, [pc, #196]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 8019f16:	69fb      	ldr	r3, [r7, #28]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	68fa      	ldr	r2, [r7, #12]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	d206      	bcs.n	8019f2e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 8019f20:	69fb      	ldr	r3, [r7, #28]
 8019f22:	681a      	ldr	r2, [r3, #0]
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	1ad2      	subs	r2, r2, r3
 8019f28:	69fb      	ldr	r3, [r7, #28]
 8019f2a:	601a      	str	r2, [r3, #0]
 8019f2c:	e002      	b.n	8019f34 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 8019f2e:	69fb      	ldr	r3, [r7, #28]
 8019f30:	2200      	movs	r2, #0
 8019f32:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	695b      	ldr	r3, [r3, #20]
 8019f38:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 8019f3a:	69fb      	ldr	r3, [r7, #28]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d1ea      	bne.n	8019f16 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8019f40:	e01e      	b.n	8019f80 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 8019f42:	4b25      	ldr	r3, [pc, #148]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 8019f48:	4b23      	ldr	r3, [pc, #140]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	695b      	ldr	r3, [r3, #20]
 8019f4e:	4a22      	ldr	r2, [pc, #136]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f50:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 8019f52:	69fb      	ldr	r3, [r7, #28]
 8019f54:	2200      	movs	r2, #0
 8019f56:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 8019f58:	69fb      	ldr	r3, [r7, #28]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8019f5e:	69fb      	ldr	r3, [r7, #28]
 8019f60:	68db      	ldr	r3, [r3, #12]
 8019f62:	69fa      	ldr	r2, [r7, #28]
 8019f64:	6912      	ldr	r2, [r2, #16]
 8019f66:	4610      	mov	r0, r2
 8019f68:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8019f6a:	69fb      	ldr	r3, [r7, #28]
 8019f6c:	7adb      	ldrb	r3, [r3, #11]
 8019f6e:	2b01      	cmp	r3, #1
 8019f70:	d106      	bne.n	8019f80 <UTIL_TIMER_IRQ_Handler+0xa4>
 8019f72:	69fb      	ldr	r3, [r7, #28]
 8019f74:	7a9b      	ldrb	r3, [r3, #10]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d102      	bne.n	8019f80 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8019f7a:	69f8      	ldr	r0, [r7, #28]
 8019f7c:	f7ff fea6 	bl	8019ccc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8019f80:	4b15      	ldr	r3, [pc, #84]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d00d      	beq.n	8019fa4 <UTIL_TIMER_IRQ_Handler+0xc8>
 8019f88:	4b13      	ldr	r3, [pc, #76]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d0d7      	beq.n	8019f42 <UTIL_TIMER_IRQ_Handler+0x66>
 8019f92:	4b11      	ldr	r3, [pc, #68]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	681c      	ldr	r4, [r3, #0]
 8019f98:	4b0e      	ldr	r3, [pc, #56]	; (8019fd4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019f9a:	699b      	ldr	r3, [r3, #24]
 8019f9c:	4798      	blx	r3
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	429c      	cmp	r4, r3
 8019fa2:	d3ce      	bcc.n	8019f42 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8019fa4:	4b0c      	ldr	r3, [pc, #48]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d009      	beq.n	8019fc0 <UTIL_TIMER_IRQ_Handler+0xe4>
 8019fac:	4b0a      	ldr	r3, [pc, #40]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	7a1b      	ldrb	r3, [r3, #8]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d104      	bne.n	8019fc0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8019fb6:	4b08      	ldr	r3, [pc, #32]	; (8019fd8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	4618      	mov	r0, r3
 8019fbc:	f000 f858 	bl	801a070 <TimerSetTimeout>
 8019fc0:	69bb      	ldr	r3, [r7, #24]
 8019fc2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	f383 8810 	msr	PRIMASK, r3
}
 8019fca:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8019fcc:	bf00      	nop
 8019fce:	3724      	adds	r7, #36	; 0x24
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bd90      	pop	{r4, r7, pc}
 8019fd4:	0801b148 	.word	0x0801b148
 8019fd8:	20000f94 	.word	0x20000f94

08019fdc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b082      	sub	sp, #8
 8019fe0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8019fe2:	4b06      	ldr	r3, [pc, #24]	; (8019ffc <UTIL_TIMER_GetCurrentTime+0x20>)
 8019fe4:	69db      	ldr	r3, [r3, #28]
 8019fe6:	4798      	blx	r3
 8019fe8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8019fea:	4b04      	ldr	r3, [pc, #16]	; (8019ffc <UTIL_TIMER_GetCurrentTime+0x20>)
 8019fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fee:	6878      	ldr	r0, [r7, #4]
 8019ff0:	4798      	blx	r3
 8019ff2:	4603      	mov	r3, r0
}
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	3708      	adds	r7, #8
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}
 8019ffc:	0801b148 	.word	0x0801b148

0801a000 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b084      	sub	sp, #16
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a008:	4b0a      	ldr	r3, [pc, #40]	; (801a034 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a00a:	69db      	ldr	r3, [r3, #28]
 801a00c:	4798      	blx	r3
 801a00e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a010:	4b08      	ldr	r3, [pc, #32]	; (801a034 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	4798      	blx	r3
 801a018:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a01a:	4b06      	ldr	r3, [pc, #24]	; (801a034 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a01e:	68f9      	ldr	r1, [r7, #12]
 801a020:	68ba      	ldr	r2, [r7, #8]
 801a022:	1a8a      	subs	r2, r1, r2
 801a024:	4610      	mov	r0, r2
 801a026:	4798      	blx	r3
 801a028:	4603      	mov	r3, r0
}
 801a02a:	4618      	mov	r0, r3
 801a02c:	3710      	adds	r7, #16
 801a02e:	46bd      	mov	sp, r7
 801a030:	bd80      	pop	{r7, pc}
 801a032:	bf00      	nop
 801a034:	0801b148 	.word	0x0801b148

0801a038 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a038:	b480      	push	{r7}
 801a03a:	b085      	sub	sp, #20
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a040:	4b0a      	ldr	r3, [pc, #40]	; (801a06c <TimerExists+0x34>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a046:	e008      	b.n	801a05a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a048:	68fa      	ldr	r2, [r7, #12]
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	d101      	bne.n	801a054 <TimerExists+0x1c>
    {
      return true;
 801a050:	2301      	movs	r3, #1
 801a052:	e006      	b.n	801a062 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	695b      	ldr	r3, [r3, #20]
 801a058:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d1f3      	bne.n	801a048 <TimerExists+0x10>
  }
  return false;
 801a060:	2300      	movs	r3, #0
}
 801a062:	4618      	mov	r0, r3
 801a064:	3714      	adds	r7, #20
 801a066:	46bd      	mov	sp, r7
 801a068:	bc80      	pop	{r7}
 801a06a:	4770      	bx	lr
 801a06c:	20000f94 	.word	0x20000f94

0801a070 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a070:	b590      	push	{r4, r7, lr}
 801a072:	b085      	sub	sp, #20
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a078:	4b11      	ldr	r3, [pc, #68]	; (801a0c0 <TimerSetTimeout+0x50>)
 801a07a:	6a1b      	ldr	r3, [r3, #32]
 801a07c:	4798      	blx	r3
 801a07e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	2201      	movs	r2, #1
 801a084:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681c      	ldr	r4, [r3, #0]
 801a08a:	4b0d      	ldr	r3, [pc, #52]	; (801a0c0 <TimerSetTimeout+0x50>)
 801a08c:	699b      	ldr	r3, [r3, #24]
 801a08e:	4798      	blx	r3
 801a090:	4602      	mov	r2, r0
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	4413      	add	r3, r2
 801a096:	429c      	cmp	r4, r3
 801a098:	d207      	bcs.n	801a0aa <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a09a:	4b09      	ldr	r3, [pc, #36]	; (801a0c0 <TimerSetTimeout+0x50>)
 801a09c:	699b      	ldr	r3, [r3, #24]
 801a09e:	4798      	blx	r3
 801a0a0:	4602      	mov	r2, r0
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	441a      	add	r2, r3
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a0aa:	4b05      	ldr	r3, [pc, #20]	; (801a0c0 <TimerSetTimeout+0x50>)
 801a0ac:	689b      	ldr	r3, [r3, #8]
 801a0ae:	687a      	ldr	r2, [r7, #4]
 801a0b0:	6812      	ldr	r2, [r2, #0]
 801a0b2:	4610      	mov	r0, r2
 801a0b4:	4798      	blx	r3
}
 801a0b6:	bf00      	nop
 801a0b8:	3714      	adds	r7, #20
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bd90      	pop	{r4, r7, pc}
 801a0be:	bf00      	nop
 801a0c0:	0801b148 	.word	0x0801b148

0801a0c4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b085      	sub	sp, #20
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a0cc:	4b14      	ldr	r3, [pc, #80]	; (801a120 <TimerInsertTimer+0x5c>)
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a0d2:	4b13      	ldr	r3, [pc, #76]	; (801a120 <TimerInsertTimer+0x5c>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	695b      	ldr	r3, [r3, #20]
 801a0d8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a0da:	e012      	b.n	801a102 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681a      	ldr	r2, [r3, #0]
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	d905      	bls.n	801a0f4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a0ec:	68bb      	ldr	r3, [r7, #8]
 801a0ee:	695b      	ldr	r3, [r3, #20]
 801a0f0:	60bb      	str	r3, [r7, #8]
 801a0f2:	e006      	b.n	801a102 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	687a      	ldr	r2, [r7, #4]
 801a0f8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	68ba      	ldr	r2, [r7, #8]
 801a0fe:	615a      	str	r2, [r3, #20]
        return;
 801a100:	e009      	b.n	801a116 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	695b      	ldr	r3, [r3, #20]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d1e8      	bne.n	801a0dc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2200      	movs	r2, #0
 801a114:	615a      	str	r2, [r3, #20]
}
 801a116:	3714      	adds	r7, #20
 801a118:	46bd      	mov	sp, r7
 801a11a:	bc80      	pop	{r7}
 801a11c:	4770      	bx	lr
 801a11e:	bf00      	nop
 801a120:	20000f94 	.word	0x20000f94

0801a124 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b084      	sub	sp, #16
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a12c:	4b0b      	ldr	r3, [pc, #44]	; (801a15c <TimerInsertNewHeadTimer+0x38>)
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d002      	beq.n	801a13e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	2200      	movs	r2, #0
 801a13c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	68fa      	ldr	r2, [r7, #12]
 801a142:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a144:	4a05      	ldr	r2, [pc, #20]	; (801a15c <TimerInsertNewHeadTimer+0x38>)
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a14a:	4b04      	ldr	r3, [pc, #16]	; (801a15c <TimerInsertNewHeadTimer+0x38>)
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	4618      	mov	r0, r3
 801a150:	f7ff ff8e 	bl	801a070 <TimerSetTimeout>
}
 801a154:	bf00      	nop
 801a156:	3710      	adds	r7, #16
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}
 801a15c:	20000f94 	.word	0x20000f94

0801a160 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a164:	2218      	movs	r2, #24
 801a166:	2100      	movs	r1, #0
 801a168:	4807      	ldr	r0, [pc, #28]	; (801a188 <UTIL_ADV_TRACE_Init+0x28>)
 801a16a:	f7ff f80e 	bl	801918a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a16e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a172:	2100      	movs	r1, #0
 801a174:	4805      	ldr	r0, [pc, #20]	; (801a18c <UTIL_ADV_TRACE_Init+0x2c>)
 801a176:	f7ff f808 	bl	801918a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a17a:	4b05      	ldr	r3, [pc, #20]	; (801a190 <UTIL_ADV_TRACE_Init+0x30>)
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	4805      	ldr	r0, [pc, #20]	; (801a194 <UTIL_ADV_TRACE_Init+0x34>)
 801a180:	4798      	blx	r3
 801a182:	4603      	mov	r3, r0
}
 801a184:	4618      	mov	r0, r3
 801a186:	bd80      	pop	{r7, pc}
 801a188:	20000f98 	.word	0x20000f98
 801a18c:	20000fb0 	.word	0x20000fb0
 801a190:	0801b188 	.word	0x0801b188
 801a194:	0801a405 	.word	0x0801a405

0801a198 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a198:	b480      	push	{r7}
 801a19a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a19c:	4b06      	ldr	r3, [pc, #24]	; (801a1b8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a19e:	8a5a      	ldrh	r2, [r3, #18]
 801a1a0:	4b05      	ldr	r3, [pc, #20]	; (801a1b8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a1a2:	8a1b      	ldrh	r3, [r3, #16]
 801a1a4:	429a      	cmp	r2, r3
 801a1a6:	d101      	bne.n	801a1ac <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	e000      	b.n	801a1ae <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a1ac:	2300      	movs	r3, #0
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bc80      	pop	{r7}
 801a1b4:	4770      	bx	lr
 801a1b6:	bf00      	nop
 801a1b8:	20000f98 	.word	0x20000f98

0801a1bc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a1bc:	b408      	push	{r3}
 801a1be:	b580      	push	{r7, lr}
 801a1c0:	b08d      	sub	sp, #52	; 0x34
 801a1c2:	af00      	add	r7, sp, #0
 801a1c4:	60f8      	str	r0, [r7, #12]
 801a1c6:	60b9      	str	r1, [r7, #8]
 801a1c8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a1d2:	4b38      	ldr	r3, [pc, #224]	; (801a2b4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a1d4:	7a1b      	ldrb	r3, [r3, #8]
 801a1d6:	461a      	mov	r2, r3
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	4293      	cmp	r3, r2
 801a1dc:	d902      	bls.n	801a1e4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a1de:	f06f 0304 	mvn.w	r3, #4
 801a1e2:	e05f      	b.n	801a2a4 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a1e4:	4b33      	ldr	r3, [pc, #204]	; (801a2b4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a1e6:	68da      	ldr	r2, [r3, #12]
 801a1e8:	68bb      	ldr	r3, [r7, #8]
 801a1ea:	4013      	ands	r3, r2
 801a1ec:	68ba      	ldr	r2, [r7, #8]
 801a1ee:	429a      	cmp	r2, r3
 801a1f0:	d002      	beq.n	801a1f8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a1f2:	f06f 0305 	mvn.w	r3, #5
 801a1f6:	e055      	b.n	801a2a4 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a1f8:	4b2e      	ldr	r3, [pc, #184]	; (801a2b4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a1fa:	685b      	ldr	r3, [r3, #4]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d00a      	beq.n	801a216 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d007      	beq.n	801a216 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a206:	4b2b      	ldr	r3, [pc, #172]	; (801a2b4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a208:	685b      	ldr	r3, [r3, #4]
 801a20a:	f107 0116 	add.w	r1, r7, #22
 801a20e:	f107 0218 	add.w	r2, r7, #24
 801a212:	4610      	mov	r0, r2
 801a214:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a21a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a21e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a220:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a224:	4824      	ldr	r0, [pc, #144]	; (801a2b8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a226:	f7ff fa3f 	bl	80196a8 <tiny_vsnprintf_like>
 801a22a:	4603      	mov	r3, r0
 801a22c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a22e:	f000 f9f3 	bl	801a618 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a232:	8afa      	ldrh	r2, [r7, #22]
 801a234:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a236:	4413      	add	r3, r2
 801a238:	b29b      	uxth	r3, r3
 801a23a:	f107 0214 	add.w	r2, r7, #20
 801a23e:	4611      	mov	r1, r2
 801a240:	4618      	mov	r0, r3
 801a242:	f000 f96b 	bl	801a51c <TRACE_AllocateBufer>
 801a246:	4603      	mov	r3, r0
 801a248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a24c:	d026      	beq.n	801a29c <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a24e:	2300      	movs	r3, #0
 801a250:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a252:	e00f      	b.n	801a274 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a254:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a256:	8aba      	ldrh	r2, [r7, #20]
 801a258:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a25c:	440b      	add	r3, r1
 801a25e:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a262:	4b16      	ldr	r3, [pc, #88]	; (801a2bc <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a264:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a266:	8abb      	ldrh	r3, [r7, #20]
 801a268:	3301      	adds	r3, #1
 801a26a:	b29b      	uxth	r3, r3
 801a26c:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a26e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a270:	3301      	adds	r3, #1
 801a272:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a274:	8afb      	ldrh	r3, [r7, #22]
 801a276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a278:	429a      	cmp	r2, r3
 801a27a:	d3eb      	bcc.n	801a254 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a27c:	8abb      	ldrh	r3, [r7, #20]
 801a27e:	461a      	mov	r2, r3
 801a280:	4b0e      	ldr	r3, [pc, #56]	; (801a2bc <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a282:	18d0      	adds	r0, r2, r3
 801a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a288:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a28c:	f7ff fa0c 	bl	80196a8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a290:	f000 f9e0 	bl	801a654 <TRACE_UnLock>

    return TRACE_Send();
 801a294:	f000 f832 	bl	801a2fc <TRACE_Send>
 801a298:	4603      	mov	r3, r0
 801a29a:	e003      	b.n	801a2a4 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a29c:	f000 f9da 	bl	801a654 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a2a0:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	3734      	adds	r7, #52	; 0x34
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a2ae:	b001      	add	sp, #4
 801a2b0:	4770      	bx	lr
 801a2b2:	bf00      	nop
 801a2b4:	20000f98 	.word	0x20000f98
 801a2b8:	200013b0 	.word	0x200013b0
 801a2bc:	20000fb0 	.word	0x20000fb0

0801a2c0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	b083      	sub	sp, #12
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a2c8:	4a03      	ldr	r2, [pc, #12]	; (801a2d8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	6053      	str	r3, [r2, #4]
}
 801a2ce:	bf00      	nop
 801a2d0:	370c      	adds	r7, #12
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	bc80      	pop	{r7}
 801a2d6:	4770      	bx	lr
 801a2d8:	20000f98 	.word	0x20000f98

0801a2dc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a2dc:	b480      	push	{r7}
 801a2de:	b083      	sub	sp, #12
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a2e6:	4a04      	ldr	r2, [pc, #16]	; (801a2f8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a2e8:	79fb      	ldrb	r3, [r7, #7]
 801a2ea:	7213      	strb	r3, [r2, #8]
}
 801a2ec:	bf00      	nop
 801a2ee:	370c      	adds	r7, #12
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bc80      	pop	{r7}
 801a2f4:	4770      	bx	lr
 801a2f6:	bf00      	nop
 801a2f8:	20000f98 	.word	0x20000f98

0801a2fc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b088      	sub	sp, #32
 801a300:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a302:	2300      	movs	r3, #0
 801a304:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a306:	2300      	movs	r3, #0
 801a308:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a30a:	f3ef 8310 	mrs	r3, PRIMASK
 801a30e:	613b      	str	r3, [r7, #16]
  return(result);
 801a310:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a314:	b672      	cpsid	i
}
 801a316:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a318:	f000 f9ba 	bl	801a690 <TRACE_IsLocked>
 801a31c:	4603      	mov	r3, r0
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d15d      	bne.n	801a3de <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a322:	f000 f979 	bl	801a618 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a326:	4b34      	ldr	r3, [pc, #208]	; (801a3f8 <TRACE_Send+0xfc>)
 801a328:	8a1a      	ldrh	r2, [r3, #16]
 801a32a:	4b33      	ldr	r3, [pc, #204]	; (801a3f8 <TRACE_Send+0xfc>)
 801a32c:	8a5b      	ldrh	r3, [r3, #18]
 801a32e:	429a      	cmp	r2, r3
 801a330:	d04d      	beq.n	801a3ce <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a332:	4b31      	ldr	r3, [pc, #196]	; (801a3f8 <TRACE_Send+0xfc>)
 801a334:	789b      	ldrb	r3, [r3, #2]
 801a336:	2b01      	cmp	r3, #1
 801a338:	d117      	bne.n	801a36a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a33a:	4b2f      	ldr	r3, [pc, #188]	; (801a3f8 <TRACE_Send+0xfc>)
 801a33c:	881a      	ldrh	r2, [r3, #0]
 801a33e:	4b2e      	ldr	r3, [pc, #184]	; (801a3f8 <TRACE_Send+0xfc>)
 801a340:	8a1b      	ldrh	r3, [r3, #16]
 801a342:	1ad3      	subs	r3, r2, r3
 801a344:	b29a      	uxth	r2, r3
 801a346:	4b2c      	ldr	r3, [pc, #176]	; (801a3f8 <TRACE_Send+0xfc>)
 801a348:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a34a:	4b2b      	ldr	r3, [pc, #172]	; (801a3f8 <TRACE_Send+0xfc>)
 801a34c:	2202      	movs	r2, #2
 801a34e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a350:	4b29      	ldr	r3, [pc, #164]	; (801a3f8 <TRACE_Send+0xfc>)
 801a352:	2200      	movs	r2, #0
 801a354:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a356:	4b28      	ldr	r3, [pc, #160]	; (801a3f8 <TRACE_Send+0xfc>)
 801a358:	8a9b      	ldrh	r3, [r3, #20]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d105      	bne.n	801a36a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a35e:	4b26      	ldr	r3, [pc, #152]	; (801a3f8 <TRACE_Send+0xfc>)
 801a360:	2200      	movs	r2, #0
 801a362:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a364:	4b24      	ldr	r3, [pc, #144]	; (801a3f8 <TRACE_Send+0xfc>)
 801a366:	2200      	movs	r2, #0
 801a368:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a36a:	4b23      	ldr	r3, [pc, #140]	; (801a3f8 <TRACE_Send+0xfc>)
 801a36c:	789b      	ldrb	r3, [r3, #2]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d115      	bne.n	801a39e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a372:	4b21      	ldr	r3, [pc, #132]	; (801a3f8 <TRACE_Send+0xfc>)
 801a374:	8a5a      	ldrh	r2, [r3, #18]
 801a376:	4b20      	ldr	r3, [pc, #128]	; (801a3f8 <TRACE_Send+0xfc>)
 801a378:	8a1b      	ldrh	r3, [r3, #16]
 801a37a:	429a      	cmp	r2, r3
 801a37c:	d908      	bls.n	801a390 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a37e:	4b1e      	ldr	r3, [pc, #120]	; (801a3f8 <TRACE_Send+0xfc>)
 801a380:	8a5a      	ldrh	r2, [r3, #18]
 801a382:	4b1d      	ldr	r3, [pc, #116]	; (801a3f8 <TRACE_Send+0xfc>)
 801a384:	8a1b      	ldrh	r3, [r3, #16]
 801a386:	1ad3      	subs	r3, r2, r3
 801a388:	b29a      	uxth	r2, r3
 801a38a:	4b1b      	ldr	r3, [pc, #108]	; (801a3f8 <TRACE_Send+0xfc>)
 801a38c:	829a      	strh	r2, [r3, #20]
 801a38e:	e006      	b.n	801a39e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a390:	4b19      	ldr	r3, [pc, #100]	; (801a3f8 <TRACE_Send+0xfc>)
 801a392:	8a1b      	ldrh	r3, [r3, #16]
 801a394:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a398:	b29a      	uxth	r2, r3
 801a39a:	4b17      	ldr	r3, [pc, #92]	; (801a3f8 <TRACE_Send+0xfc>)
 801a39c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a39e:	4b16      	ldr	r3, [pc, #88]	; (801a3f8 <TRACE_Send+0xfc>)
 801a3a0:	8a1b      	ldrh	r3, [r3, #16]
 801a3a2:	461a      	mov	r2, r3
 801a3a4:	4b15      	ldr	r3, [pc, #84]	; (801a3fc <TRACE_Send+0x100>)
 801a3a6:	4413      	add	r3, r2
 801a3a8:	61bb      	str	r3, [r7, #24]
 801a3aa:	697b      	ldr	r3, [r7, #20]
 801a3ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	f383 8810 	msr	PRIMASK, r3
}
 801a3b4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a3b6:	f7e7 fbf7 	bl	8001ba8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a3ba:	4b11      	ldr	r3, [pc, #68]	; (801a400 <TRACE_Send+0x104>)
 801a3bc:	68db      	ldr	r3, [r3, #12]
 801a3be:	4a0e      	ldr	r2, [pc, #56]	; (801a3f8 <TRACE_Send+0xfc>)
 801a3c0:	8a92      	ldrh	r2, [r2, #20]
 801a3c2:	4611      	mov	r1, r2
 801a3c4:	69b8      	ldr	r0, [r7, #24]
 801a3c6:	4798      	blx	r3
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	77fb      	strb	r3, [r7, #31]
 801a3cc:	e00d      	b.n	801a3ea <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a3ce:	f000 f941 	bl	801a654 <TRACE_UnLock>
 801a3d2:	697b      	ldr	r3, [r7, #20]
 801a3d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3d6:	68bb      	ldr	r3, [r7, #8]
 801a3d8:	f383 8810 	msr	PRIMASK, r3
}
 801a3dc:	e005      	b.n	801a3ea <TRACE_Send+0xee>
 801a3de:	697b      	ldr	r3, [r7, #20]
 801a3e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	f383 8810 	msr	PRIMASK, r3
}
 801a3e8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a3ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3720      	adds	r7, #32
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	20000f98 	.word	0x20000f98
 801a3fc:	20000fb0 	.word	0x20000fb0
 801a400:	0801b188 	.word	0x0801b188

0801a404 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b088      	sub	sp, #32
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a40c:	2300      	movs	r3, #0
 801a40e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a410:	f3ef 8310 	mrs	r3, PRIMASK
 801a414:	617b      	str	r3, [r7, #20]
  return(result);
 801a416:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a418:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a41a:	b672      	cpsid	i
}
 801a41c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a41e:	4b3c      	ldr	r3, [pc, #240]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a420:	789b      	ldrb	r3, [r3, #2]
 801a422:	2b02      	cmp	r3, #2
 801a424:	d106      	bne.n	801a434 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a426:	4b3a      	ldr	r3, [pc, #232]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a428:	2200      	movs	r2, #0
 801a42a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a42c:	4b38      	ldr	r3, [pc, #224]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a42e:	2200      	movs	r2, #0
 801a430:	821a      	strh	r2, [r3, #16]
 801a432:	e00a      	b.n	801a44a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a434:	4b36      	ldr	r3, [pc, #216]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a436:	8a1a      	ldrh	r2, [r3, #16]
 801a438:	4b35      	ldr	r3, [pc, #212]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a43a:	8a9b      	ldrh	r3, [r3, #20]
 801a43c:	4413      	add	r3, r2
 801a43e:	b29b      	uxth	r3, r3
 801a440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a444:	b29a      	uxth	r2, r3
 801a446:	4b32      	ldr	r3, [pc, #200]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a448:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a44a:	4b31      	ldr	r3, [pc, #196]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a44c:	8a1a      	ldrh	r2, [r3, #16]
 801a44e:	4b30      	ldr	r3, [pc, #192]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a450:	8a5b      	ldrh	r3, [r3, #18]
 801a452:	429a      	cmp	r2, r3
 801a454:	d04d      	beq.n	801a4f2 <TRACE_TxCpltCallback+0xee>
 801a456:	4b2e      	ldr	r3, [pc, #184]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a458:	8adb      	ldrh	r3, [r3, #22]
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d149      	bne.n	801a4f2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a45e:	4b2c      	ldr	r3, [pc, #176]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a460:	789b      	ldrb	r3, [r3, #2]
 801a462:	2b01      	cmp	r3, #1
 801a464:	d117      	bne.n	801a496 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a466:	4b2a      	ldr	r3, [pc, #168]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a468:	881a      	ldrh	r2, [r3, #0]
 801a46a:	4b29      	ldr	r3, [pc, #164]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a46c:	8a1b      	ldrh	r3, [r3, #16]
 801a46e:	1ad3      	subs	r3, r2, r3
 801a470:	b29a      	uxth	r2, r3
 801a472:	4b27      	ldr	r3, [pc, #156]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a474:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a476:	4b26      	ldr	r3, [pc, #152]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a478:	2202      	movs	r2, #2
 801a47a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a47c:	4b24      	ldr	r3, [pc, #144]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a47e:	2200      	movs	r2, #0
 801a480:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a482:	4b23      	ldr	r3, [pc, #140]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a484:	8a9b      	ldrh	r3, [r3, #20]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d105      	bne.n	801a496 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a48a:	4b21      	ldr	r3, [pc, #132]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a48c:	2200      	movs	r2, #0
 801a48e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a490:	4b1f      	ldr	r3, [pc, #124]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a492:	2200      	movs	r2, #0
 801a494:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a496:	4b1e      	ldr	r3, [pc, #120]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a498:	789b      	ldrb	r3, [r3, #2]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d115      	bne.n	801a4ca <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a49e:	4b1c      	ldr	r3, [pc, #112]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4a0:	8a5a      	ldrh	r2, [r3, #18]
 801a4a2:	4b1b      	ldr	r3, [pc, #108]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4a4:	8a1b      	ldrh	r3, [r3, #16]
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	d908      	bls.n	801a4bc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a4aa:	4b19      	ldr	r3, [pc, #100]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4ac:	8a5a      	ldrh	r2, [r3, #18]
 801a4ae:	4b18      	ldr	r3, [pc, #96]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4b0:	8a1b      	ldrh	r3, [r3, #16]
 801a4b2:	1ad3      	subs	r3, r2, r3
 801a4b4:	b29a      	uxth	r2, r3
 801a4b6:	4b16      	ldr	r3, [pc, #88]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4b8:	829a      	strh	r2, [r3, #20]
 801a4ba:	e006      	b.n	801a4ca <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a4bc:	4b14      	ldr	r3, [pc, #80]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4be:	8a1b      	ldrh	r3, [r3, #16]
 801a4c0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a4c4:	b29a      	uxth	r2, r3
 801a4c6:	4b12      	ldr	r3, [pc, #72]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4c8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a4ca:	4b11      	ldr	r3, [pc, #68]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4cc:	8a1b      	ldrh	r3, [r3, #16]
 801a4ce:	461a      	mov	r2, r3
 801a4d0:	4b10      	ldr	r3, [pc, #64]	; (801a514 <TRACE_TxCpltCallback+0x110>)
 801a4d2:	4413      	add	r3, r2
 801a4d4:	61fb      	str	r3, [r7, #28]
 801a4d6:	69bb      	ldr	r3, [r7, #24]
 801a4d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4da:	693b      	ldr	r3, [r7, #16]
 801a4dc:	f383 8810 	msr	PRIMASK, r3
}
 801a4e0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a4e2:	4b0d      	ldr	r3, [pc, #52]	; (801a518 <TRACE_TxCpltCallback+0x114>)
 801a4e4:	68db      	ldr	r3, [r3, #12]
 801a4e6:	4a0a      	ldr	r2, [pc, #40]	; (801a510 <TRACE_TxCpltCallback+0x10c>)
 801a4e8:	8a92      	ldrh	r2, [r2, #20]
 801a4ea:	4611      	mov	r1, r2
 801a4ec:	69f8      	ldr	r0, [r7, #28]
 801a4ee:	4798      	blx	r3
 801a4f0:	e00a      	b.n	801a508 <TRACE_TxCpltCallback+0x104>
 801a4f2:	69bb      	ldr	r3, [r7, #24]
 801a4f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	f383 8810 	msr	PRIMASK, r3
}
 801a4fc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a4fe:	f7e7 fb5b 	bl	8001bb8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a502:	f000 f8a7 	bl	801a654 <TRACE_UnLock>
  }
}
 801a506:	bf00      	nop
 801a508:	bf00      	nop
 801a50a:	3720      	adds	r7, #32
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd80      	pop	{r7, pc}
 801a510:	20000f98 	.word	0x20000f98
 801a514:	20000fb0 	.word	0x20000fb0
 801a518:	0801b188 	.word	0x0801b188

0801a51c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a51c:	b480      	push	{r7}
 801a51e:	b087      	sub	sp, #28
 801a520:	af00      	add	r7, sp, #0
 801a522:	4603      	mov	r3, r0
 801a524:	6039      	str	r1, [r7, #0]
 801a526:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801a528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a52c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a52e:	f3ef 8310 	mrs	r3, PRIMASK
 801a532:	60fb      	str	r3, [r7, #12]
  return(result);
 801a534:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a538:	b672      	cpsid	i
}
 801a53a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a53c:	4b35      	ldr	r3, [pc, #212]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a53e:	8a5a      	ldrh	r2, [r3, #18]
 801a540:	4b34      	ldr	r3, [pc, #208]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a542:	8a1b      	ldrh	r3, [r3, #16]
 801a544:	429a      	cmp	r2, r3
 801a546:	d11b      	bne.n	801a580 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a548:	4b32      	ldr	r3, [pc, #200]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a54a:	8a5b      	ldrh	r3, [r3, #18]
 801a54c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a550:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801a552:	88fa      	ldrh	r2, [r7, #6]
 801a554:	8afb      	ldrh	r3, [r7, #22]
 801a556:	429a      	cmp	r2, r3
 801a558:	d33a      	bcc.n	801a5d0 <TRACE_AllocateBufer+0xb4>
 801a55a:	4b2e      	ldr	r3, [pc, #184]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a55c:	8a1b      	ldrh	r3, [r3, #16]
 801a55e:	88fa      	ldrh	r2, [r7, #6]
 801a560:	429a      	cmp	r2, r3
 801a562:	d235      	bcs.n	801a5d0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a564:	4b2b      	ldr	r3, [pc, #172]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a566:	2201      	movs	r2, #1
 801a568:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a56a:	4b2a      	ldr	r3, [pc, #168]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a56c:	8a5a      	ldrh	r2, [r3, #18]
 801a56e:	4b29      	ldr	r3, [pc, #164]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a570:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a572:	4b28      	ldr	r3, [pc, #160]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a574:	8a1b      	ldrh	r3, [r3, #16]
 801a576:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a578:	4b26      	ldr	r3, [pc, #152]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a57a:	2200      	movs	r2, #0
 801a57c:	825a      	strh	r2, [r3, #18]
 801a57e:	e027      	b.n	801a5d0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a580:	4b24      	ldr	r3, [pc, #144]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a582:	8a5a      	ldrh	r2, [r3, #18]
 801a584:	4b23      	ldr	r3, [pc, #140]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a586:	8a1b      	ldrh	r3, [r3, #16]
 801a588:	429a      	cmp	r2, r3
 801a58a:	d91b      	bls.n	801a5c4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801a58c:	4b21      	ldr	r3, [pc, #132]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a58e:	8a5b      	ldrh	r3, [r3, #18]
 801a590:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a594:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801a596:	88fa      	ldrh	r2, [r7, #6]
 801a598:	8afb      	ldrh	r3, [r7, #22]
 801a59a:	429a      	cmp	r2, r3
 801a59c:	d318      	bcc.n	801a5d0 <TRACE_AllocateBufer+0xb4>
 801a59e:	4b1d      	ldr	r3, [pc, #116]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5a0:	8a1b      	ldrh	r3, [r3, #16]
 801a5a2:	88fa      	ldrh	r2, [r7, #6]
 801a5a4:	429a      	cmp	r2, r3
 801a5a6:	d213      	bcs.n	801a5d0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801a5a8:	4b1a      	ldr	r3, [pc, #104]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801a5ae:	4b19      	ldr	r3, [pc, #100]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5b0:	8a5a      	ldrh	r2, [r3, #18]
 801a5b2:	4b18      	ldr	r3, [pc, #96]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5b4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801a5b6:	4b17      	ldr	r3, [pc, #92]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5b8:	8a1b      	ldrh	r3, [r3, #16]
 801a5ba:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801a5bc:	4b15      	ldr	r3, [pc, #84]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5be:	2200      	movs	r2, #0
 801a5c0:	825a      	strh	r2, [r3, #18]
 801a5c2:	e005      	b.n	801a5d0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801a5c4:	4b13      	ldr	r3, [pc, #76]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5c6:	8a1a      	ldrh	r2, [r3, #16]
 801a5c8:	4b12      	ldr	r3, [pc, #72]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5ca:	8a5b      	ldrh	r3, [r3, #18]
 801a5cc:	1ad3      	subs	r3, r2, r3
 801a5ce:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801a5d0:	8afa      	ldrh	r2, [r7, #22]
 801a5d2:	88fb      	ldrh	r3, [r7, #6]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d90f      	bls.n	801a5f8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801a5d8:	4b0e      	ldr	r3, [pc, #56]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5da:	8a5a      	ldrh	r2, [r3, #18]
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a5e0:	4b0c      	ldr	r3, [pc, #48]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5e2:	8a5a      	ldrh	r2, [r3, #18]
 801a5e4:	88fb      	ldrh	r3, [r7, #6]
 801a5e6:	4413      	add	r3, r2
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a5ee:	b29a      	uxth	r2, r3
 801a5f0:	4b08      	ldr	r3, [pc, #32]	; (801a614 <TRACE_AllocateBufer+0xf8>)
 801a5f2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	82bb      	strh	r3, [r7, #20]
 801a5f8:	693b      	ldr	r3, [r7, #16]
 801a5fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	f383 8810 	msr	PRIMASK, r3
}
 801a602:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801a604:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801a608:	4618      	mov	r0, r3
 801a60a:	371c      	adds	r7, #28
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bc80      	pop	{r7}
 801a610:	4770      	bx	lr
 801a612:	bf00      	nop
 801a614:	20000f98 	.word	0x20000f98

0801a618 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801a618:	b480      	push	{r7}
 801a61a:	b085      	sub	sp, #20
 801a61c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a61e:	f3ef 8310 	mrs	r3, PRIMASK
 801a622:	607b      	str	r3, [r7, #4]
  return(result);
 801a624:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a628:	b672      	cpsid	i
}
 801a62a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801a62c:	4b08      	ldr	r3, [pc, #32]	; (801a650 <TRACE_Lock+0x38>)
 801a62e:	8adb      	ldrh	r3, [r3, #22]
 801a630:	3301      	adds	r3, #1
 801a632:	b29a      	uxth	r2, r3
 801a634:	4b06      	ldr	r3, [pc, #24]	; (801a650 <TRACE_Lock+0x38>)
 801a636:	82da      	strh	r2, [r3, #22]
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a63c:	68bb      	ldr	r3, [r7, #8]
 801a63e:	f383 8810 	msr	PRIMASK, r3
}
 801a642:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a644:	bf00      	nop
 801a646:	3714      	adds	r7, #20
 801a648:	46bd      	mov	sp, r7
 801a64a:	bc80      	pop	{r7}
 801a64c:	4770      	bx	lr
 801a64e:	bf00      	nop
 801a650:	20000f98 	.word	0x20000f98

0801a654 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801a654:	b480      	push	{r7}
 801a656:	b085      	sub	sp, #20
 801a658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a65a:	f3ef 8310 	mrs	r3, PRIMASK
 801a65e:	607b      	str	r3, [r7, #4]
  return(result);
 801a660:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a664:	b672      	cpsid	i
}
 801a666:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801a668:	4b08      	ldr	r3, [pc, #32]	; (801a68c <TRACE_UnLock+0x38>)
 801a66a:	8adb      	ldrh	r3, [r3, #22]
 801a66c:	3b01      	subs	r3, #1
 801a66e:	b29a      	uxth	r2, r3
 801a670:	4b06      	ldr	r3, [pc, #24]	; (801a68c <TRACE_UnLock+0x38>)
 801a672:	82da      	strh	r2, [r3, #22]
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a678:	68bb      	ldr	r3, [r7, #8]
 801a67a:	f383 8810 	msr	PRIMASK, r3
}
 801a67e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801a680:	bf00      	nop
 801a682:	3714      	adds	r7, #20
 801a684:	46bd      	mov	sp, r7
 801a686:	bc80      	pop	{r7}
 801a688:	4770      	bx	lr
 801a68a:	bf00      	nop
 801a68c:	20000f98 	.word	0x20000f98

0801a690 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801a690:	b480      	push	{r7}
 801a692:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801a694:	4b05      	ldr	r3, [pc, #20]	; (801a6ac <TRACE_IsLocked+0x1c>)
 801a696:	8adb      	ldrh	r3, [r3, #22]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	bf14      	ite	ne
 801a69c:	2301      	movne	r3, #1
 801a69e:	2300      	moveq	r3, #0
 801a6a0:	b2db      	uxtb	r3, r3
}
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	bc80      	pop	{r7}
 801a6a8:	4770      	bx	lr
 801a6aa:	bf00      	nop
 801a6ac:	20000f98 	.word	0x20000f98

0801a6b0 <__libc_init_array>:
 801a6b0:	b570      	push	{r4, r5, r6, lr}
 801a6b2:	4d0d      	ldr	r5, [pc, #52]	; (801a6e8 <__libc_init_array+0x38>)
 801a6b4:	4c0d      	ldr	r4, [pc, #52]	; (801a6ec <__libc_init_array+0x3c>)
 801a6b6:	1b64      	subs	r4, r4, r5
 801a6b8:	10a4      	asrs	r4, r4, #2
 801a6ba:	2600      	movs	r6, #0
 801a6bc:	42a6      	cmp	r6, r4
 801a6be:	d109      	bne.n	801a6d4 <__libc_init_array+0x24>
 801a6c0:	4d0b      	ldr	r5, [pc, #44]	; (801a6f0 <__libc_init_array+0x40>)
 801a6c2:	4c0c      	ldr	r4, [pc, #48]	; (801a6f4 <__libc_init_array+0x44>)
 801a6c4:	f000 f8a0 	bl	801a808 <_init>
 801a6c8:	1b64      	subs	r4, r4, r5
 801a6ca:	10a4      	asrs	r4, r4, #2
 801a6cc:	2600      	movs	r6, #0
 801a6ce:	42a6      	cmp	r6, r4
 801a6d0:	d105      	bne.n	801a6de <__libc_init_array+0x2e>
 801a6d2:	bd70      	pop	{r4, r5, r6, pc}
 801a6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6d8:	4798      	blx	r3
 801a6da:	3601      	adds	r6, #1
 801a6dc:	e7ee      	b.n	801a6bc <__libc_init_array+0xc>
 801a6de:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6e2:	4798      	blx	r3
 801a6e4:	3601      	adds	r6, #1
 801a6e6:	e7f2      	b.n	801a6ce <__libc_init_array+0x1e>
 801a6e8:	0801b678 	.word	0x0801b678
 801a6ec:	0801b678 	.word	0x0801b678
 801a6f0:	0801b678 	.word	0x0801b678
 801a6f4:	0801b67c 	.word	0x0801b67c

0801a6f8 <memset>:
 801a6f8:	4402      	add	r2, r0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	4293      	cmp	r3, r2
 801a6fe:	d100      	bne.n	801a702 <memset+0xa>
 801a700:	4770      	bx	lr
 801a702:	f803 1b01 	strb.w	r1, [r3], #1
 801a706:	e7f9      	b.n	801a6fc <memset+0x4>

0801a708 <floor>:
 801a708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a70c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801a710:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801a714:	2e13      	cmp	r6, #19
 801a716:	4602      	mov	r2, r0
 801a718:	460b      	mov	r3, r1
 801a71a:	4607      	mov	r7, r0
 801a71c:	460c      	mov	r4, r1
 801a71e:	4605      	mov	r5, r0
 801a720:	dc34      	bgt.n	801a78c <floor+0x84>
 801a722:	2e00      	cmp	r6, #0
 801a724:	da15      	bge.n	801a752 <floor+0x4a>
 801a726:	a334      	add	r3, pc, #208	; (adr r3, 801a7f8 <floor+0xf0>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	f7e5 fd32 	bl	8000194 <__adddf3>
 801a730:	2200      	movs	r2, #0
 801a732:	2300      	movs	r3, #0
 801a734:	f7e5 ff62 	bl	80005fc <__aeabi_dcmpgt>
 801a738:	b140      	cbz	r0, 801a74c <floor+0x44>
 801a73a:	2c00      	cmp	r4, #0
 801a73c:	da59      	bge.n	801a7f2 <floor+0xea>
 801a73e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a742:	ea57 0503 	orrs.w	r5, r7, r3
 801a746:	d001      	beq.n	801a74c <floor+0x44>
 801a748:	4c2d      	ldr	r4, [pc, #180]	; (801a800 <floor+0xf8>)
 801a74a:	2500      	movs	r5, #0
 801a74c:	4623      	mov	r3, r4
 801a74e:	462f      	mov	r7, r5
 801a750:	e025      	b.n	801a79e <floor+0x96>
 801a752:	4a2c      	ldr	r2, [pc, #176]	; (801a804 <floor+0xfc>)
 801a754:	fa42 f806 	asr.w	r8, r2, r6
 801a758:	ea01 0208 	and.w	r2, r1, r8
 801a75c:	4302      	orrs	r2, r0
 801a75e:	d01e      	beq.n	801a79e <floor+0x96>
 801a760:	a325      	add	r3, pc, #148	; (adr r3, 801a7f8 <floor+0xf0>)
 801a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a766:	f7e5 fd15 	bl	8000194 <__adddf3>
 801a76a:	2200      	movs	r2, #0
 801a76c:	2300      	movs	r3, #0
 801a76e:	f7e5 ff45 	bl	80005fc <__aeabi_dcmpgt>
 801a772:	2800      	cmp	r0, #0
 801a774:	d0ea      	beq.n	801a74c <floor+0x44>
 801a776:	2c00      	cmp	r4, #0
 801a778:	bfbe      	ittt	lt
 801a77a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a77e:	fa43 f606 	asrlt.w	r6, r3, r6
 801a782:	19a4      	addlt	r4, r4, r6
 801a784:	ea24 0408 	bic.w	r4, r4, r8
 801a788:	2500      	movs	r5, #0
 801a78a:	e7df      	b.n	801a74c <floor+0x44>
 801a78c:	2e33      	cmp	r6, #51	; 0x33
 801a78e:	dd0a      	ble.n	801a7a6 <floor+0x9e>
 801a790:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a794:	d103      	bne.n	801a79e <floor+0x96>
 801a796:	f7e5 fcfd 	bl	8000194 <__adddf3>
 801a79a:	4607      	mov	r7, r0
 801a79c:	460b      	mov	r3, r1
 801a79e:	4638      	mov	r0, r7
 801a7a0:	4619      	mov	r1, r3
 801a7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7a6:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801a7aa:	f04f 32ff 	mov.w	r2, #4294967295
 801a7ae:	fa22 f808 	lsr.w	r8, r2, r8
 801a7b2:	ea18 0f00 	tst.w	r8, r0
 801a7b6:	d0f2      	beq.n	801a79e <floor+0x96>
 801a7b8:	a30f      	add	r3, pc, #60	; (adr r3, 801a7f8 <floor+0xf0>)
 801a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7be:	f7e5 fce9 	bl	8000194 <__adddf3>
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	f7e5 ff19 	bl	80005fc <__aeabi_dcmpgt>
 801a7ca:	2800      	cmp	r0, #0
 801a7cc:	d0be      	beq.n	801a74c <floor+0x44>
 801a7ce:	2c00      	cmp	r4, #0
 801a7d0:	da02      	bge.n	801a7d8 <floor+0xd0>
 801a7d2:	2e14      	cmp	r6, #20
 801a7d4:	d103      	bne.n	801a7de <floor+0xd6>
 801a7d6:	3401      	adds	r4, #1
 801a7d8:	ea25 0508 	bic.w	r5, r5, r8
 801a7dc:	e7b6      	b.n	801a74c <floor+0x44>
 801a7de:	2301      	movs	r3, #1
 801a7e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a7e4:	fa03 f606 	lsl.w	r6, r3, r6
 801a7e8:	4435      	add	r5, r6
 801a7ea:	42bd      	cmp	r5, r7
 801a7ec:	bf38      	it	cc
 801a7ee:	18e4      	addcc	r4, r4, r3
 801a7f0:	e7f2      	b.n	801a7d8 <floor+0xd0>
 801a7f2:	2500      	movs	r5, #0
 801a7f4:	462c      	mov	r4, r5
 801a7f6:	e7a9      	b.n	801a74c <floor+0x44>
 801a7f8:	8800759c 	.word	0x8800759c
 801a7fc:	7e37e43c 	.word	0x7e37e43c
 801a800:	bff00000 	.word	0xbff00000
 801a804:	000fffff 	.word	0x000fffff

0801a808 <_init>:
 801a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a80a:	bf00      	nop
 801a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a80e:	bc08      	pop	{r3}
 801a810:	469e      	mov	lr, r3
 801a812:	4770      	bx	lr

0801a814 <_fini>:
 801a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a816:	bf00      	nop
 801a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a81a:	bc08      	pop	{r3}
 801a81c:	469e      	mov	lr, r3
 801a81e:	4770      	bx	lr
