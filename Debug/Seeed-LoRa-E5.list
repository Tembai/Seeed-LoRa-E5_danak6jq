
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0a0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  0801b1d8  0801b1d8  0002b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c058  0801c058  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c058  0801c058  0002c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c060  0801c060  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c060  0801c060  0002c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c064  0801c064  0002c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801c068  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000134  0801c19c  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  0801c19c  00031944  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00064013  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b99f  00000000  00000000  00094171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036c0  00000000  00000000  0009fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003298  00000000  00000000  000a31d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a55  00000000  00000000  000a6468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fc44  00000000  00000000  000ceebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd3c1  00000000  00000000  0010eb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001dbec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e1ec  00000000  00000000  001dbf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b1c0 	.word	0x0801b1c0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801b1c0 	.word	0x0801b1c0

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <Sensor_Init+0x18>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fe88 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
		I2C_id();
 8000e60:	f000 f8a8 	bl	8000fb4 <I2C_id>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0801b1d8 	.word	0x0801b1d8

08000e6c <Sensor_Data>:


uint16_t Sensor_Data(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af02      	add	r7, sp, #8


	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <Sensor_Data+0xd4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f019 fe79 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>

	stmdev_ctx_t dev_ctx;

	/* Initialize mems driver interface */
	dev_ctx.write_reg = platform_write;
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <Sensor_Data+0xd8>)
 8000e80:	607b      	str	r3, [r7, #4]
	dev_ctx.read_reg = platform_read;
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <Sensor_Data+0xdc>)
 8000e84:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &hi2c2;
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <Sensor_Data+0xe0>)
 8000e88:	60fb      	str	r3, [r7, #12]


	Sensor_Init();
 8000e8a:	f7ff ffe1 	bl	8000e50 <Sensor_Init>
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(50);
 8000e8e:	2032      	movs	r0, #50	; 0x32
 8000e90:	f001 f8d7 	bl	8002042 <HAL_Delay>

	uint8_t reg[3];
	reg[0]=0x1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	703b      	strb	r3, [r7, #0]
	reg[1]=0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	707b      	strb	r3, [r7, #1]
	reg[2]=0x1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	70bb      	strb	r3, [r7, #2]
//	uint8_t whoamI;
//
//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);


		I2C_id();
 8000ea0:	f000 f888 	bl	8000fb4 <I2C_id>


		lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fa3f 	bl	800132c <lps22hh_reset_set>
		do {
		lps22hh_reset_get(&dev_ctx, &rst);									// software reset
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4927      	ldr	r1, [pc, #156]	; (8000f50 <Sensor_Data+0xe4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa60 	bl	8001378 <lps22hh_reset_get>
		} while (rst);
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <Sensor_Data+0xe4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f6      	bne.n	8000eae <Sensor_Data+0x42>





		HAL_Delay(50);
 8000ec0:	2032      	movs	r0, #50	; 0x32
 8000ec2:	f001 f8be 	bl	8002042 <HAL_Delay>
		/* Check device ID */
		whoamI = 0;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <Sensor_Data+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
		lps22hh_device_id_get(&dev_ctx, &whoamI);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4921      	ldr	r1, [pc, #132]	; (8000f54 <Sensor_Data+0xe8>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fa1a 	bl	800130a <lps22hh_device_id_get>
		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <Sensor_Data+0xe8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <Sensor_Data+0xec>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f019 fe44 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>


		/* Enable Block Data Update */
		  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2101      	movs	r1, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f96f 	bl	80011d0 <lps22hh_block_data_update_set>
		  /* Set Output Data Rate */
		  lps22hh_data_rate_set(&dev_ctx, LPS22HH_POWER_DOWN);				// one-shot mode enabled
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f990 	bl	800121c <lps22hh_data_rate_set>




	    do {
	    	HAL_Delay(1000);
 8000efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f00:	f001 f89f 	bl	8002042 <HAL_Delay>
//	    	lps22hh_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
	    	one_shot_trigger();
 8000f04:	f000 f82e 	bl	8000f64 <one_shot_trigger>
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <Sensor_Data+0xf0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]

//	    	ret =  platform_read(&hi2c2, LPS22HH_PRESS_OUT_XL, reg, 3);


			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4912      	ldr	r1, [pc, #72]	; (8000f5c <Sensor_Data+0xf0>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f9d0 	bl	80012b8 <lps22hh_pressure_raw_get>
//			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
//			APP_LOG(TS_OFF, VLEVEL_M, "raw als decimaal:%d\r\n", data_raw_pressure);
			pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <Sensor_Data+0xf0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f945 	bl	80011ac <lps22hh_from_lsb_to_hpa>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <Sensor_Data+0xf4>)
 8000f26:	6013      	str	r3, [r2, #0]
	      */




	  return pressure_hPa;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <Sensor_Data+0xf4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fdf5 	bl	8000b1c <__aeabi_f2uiz>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b29b      	uxth	r3, r3
	  }
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0801b200 	.word	0x0801b200
 8000f44:	08000ff9 	.word	0x08000ff9
 8000f48:	080010d1 	.word	0x080010d1
 8000f4c:	2000170c 	.word	0x2000170c
 8000f50:	20000159 	.word	0x20000159
 8000f54:	20000158 	.word	0x20000158
 8000f58:	0801b228 	.word	0x0801b228
 8000f5c:	20000150 	.word	0x20000150
 8000f60:	20000154 	.word	0x20000154

08000f64 <one_shot_trigger>:
    var[0]=0x14;
    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    return;
}

void one_shot_trigger(void){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t var[1];
  	static const uint8_t CTRL_REG2 = 0x11;				// register
    var[0]=0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	713b      	strb	r3, [r7, #4]

    ret=platform_read(&hi2c2, CTRL_REG2, var, 1);
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <one_shot_trigger+0x48>)
 8000f70:	7819      	ldrb	r1, [r3, #0]
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	2301      	movs	r3, #1
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <one_shot_trigger+0x4c>)
 8000f78:	f000 f8aa 	bl	80010d0 <platform_read>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10e      	bne.n	8000fa4 <one_shot_trigger+0x40>
    {
    	var[0]=var[0] | (uint8_t) 1;
 8000f86:	793b      	ldrb	r3, [r7, #4]
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	713b      	strb	r3, [r7, #4]
		ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <one_shot_trigger+0x48>)
 8000f92:	7819      	ldrb	r1, [r3, #0]
 8000f94:	1d3a      	adds	r2, r7, #4
 8000f96:	2301      	movs	r3, #1
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <one_shot_trigger+0x4c>)
 8000f9a:	f000 f82d 	bl	8000ff8 <platform_write>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    }


    return;
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
}
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0801ba73 	.word	0x0801ba73
 8000fb0:	2000170c 	.word	0x2000170c

08000fb4 <I2C_id>:


void I2C_id(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <I2C_id+0x38>)
 8000fc4:	7819      	ldrb	r1, [r3, #0]
 8000fc6:	1d3a      	adds	r2, r7, #4
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <I2C_id+0x3c>)
 8000fcc:	f000 f880 	bl	80010d0 <platform_read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000fd4:	793b      	ldrb	r3, [r7, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <I2C_id+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f019 fdc6 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return;
 8000fe4:	bf00      	nop
}
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	0801ba74 	.word	0x0801ba74
 8000ff0:	2000170c 	.word	0x2000170c
 8000ff4:	0801b270 	.word	0x0801b270

08000ff8 <platform_write>:


static int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	461a      	mov	r2, r3
 8001004:	460b      	mov	r3, r1
 8001006:	72fb      	strb	r3, [r7, #11]
 8001008:	4613      	mov	r3, r2
 800100a:	813b      	strh	r3, [r7, #8]
 800100c:	466b      	mov	r3, sp
 800100e:	461d      	mov	r5, r3
//    if (len>0){
//		for (int i=0; i<len; i++){
//			message[i]=Bufp[i];
//		}
//    }
    uint8_t buffer[len+1];
 8001010:	893b      	ldrh	r3, [r7, #8]
 8001012:	1c5c      	adds	r4, r3, #1
 8001014:	1e63      	subs	r3, r4, #1
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	4623      	mov	r3, r4
 800101a:	4618      	mov	r0, r3
 800101c:	f04f 0100 	mov.w	r1, #0
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	00cb      	lsls	r3, r1, #3
 800102a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800102e:	00c2      	lsls	r2, r0, #3
 8001030:	4623      	mov	r3, r4
 8001032:	4618      	mov	r0, r3
 8001034:	f04f 0100 	mov.w	r1, #0
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	00cb      	lsls	r3, r1, #3
 8001042:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001046:	00c2      	lsls	r2, r0, #3
 8001048:	4623      	mov	r3, r4
 800104a:	3307      	adds	r3, #7
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	ebad 0d03 	sub.w	sp, sp, r3
 8001054:	ab02      	add	r3, sp, #8
 8001056:	3300      	adds	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
    if (len>0){
 800105a:	893b      	ldrh	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <platform_write+0x90>
		for (int i=1;i<(len+1);i++){
 8001060:	2301      	movs	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	e00c      	b.n	8001080 <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b01      	subs	r3, #1
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	7819      	ldrb	r1, [r3, #0]
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	4413      	add	r3, r2
 8001076:	460a      	mov	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	893b      	ldrh	r3, [r7, #8]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	429a      	cmp	r2, r3
 8001086:	ddee      	ble.n	8001066 <platform_write+0x6e>
			}}
	buffer[0]=Reg;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	7afa      	ldrb	r2, [r7, #11]
 800108c:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 800108e:	23ba      	movs	r3, #186	; 0xba
 8001090:	b299      	uxth	r1, r3
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	3301      	adds	r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109e:	9000      	str	r0, [sp, #0]
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <platform_write+0xd0>)
 80010a2:	f004 f831 	bl	8005108 <HAL_I2C_Master_Transmit>
 80010a6:	4603      	mov	r3, r0
 80010a8:	74fb      	strb	r3, [r7, #19]

	if (ret){
 80010aa:	7cfb      	ldrb	r3, [r7, #19]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <platform_write+0xd4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2002      	movs	r0, #2
 80010b8:	f019 fd5a 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	46ad      	mov	sp, r5
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdb0      	pop	{r4, r5, r7, pc}
 80010c8:	2000170c 	.word	0x2000170c
 80010cc:	0801b284 	.word	0x0801b284

080010d0 <platform_read>:



static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	72fb      	strb	r3, [r7, #11]
 80010e0:	4613      	mov	r3, r2
 80010e2:	813b      	strh	r3, [r7, #8]
//int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){

    HAL_StatusTypeDef ret;
    uint8_t reg[1];
    reg[0]=Reg;
 80010e4:	7afb      	ldrb	r3, [r7, #11]
 80010e6:	753b      	strb	r3, [r7, #20]

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 80010e8:	23ba      	movs	r3, #186	; 0xba
 80010ea:	b299      	uxth	r1, r3
 80010ec:	f107 0214 	add.w	r2, r7, #20
 80010f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <platform_read+0x74>)
 80010fa:	f004 f805 	bl	8005108 <HAL_I2C_Master_Transmit>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 8001102:	893b      	ldrh	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <platform_read+0x58>
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10c      	bne.n	8001128 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 800110e:	23bb      	movs	r3, #187	; 0xbb
 8001110:	b299      	uxth	r1, r3
 8001112:	893b      	ldrh	r3, [r7, #8]
 8001114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001118:	9200      	str	r2, [sp, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <platform_read+0x74>)
 800111e:	f004 f8e7 	bl	80052f0 <HAL_I2C_Master_Receive>
 8001122:	4603      	mov	r3, r0
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	e008      	b.n	800113a <platform_read+0x6a>
	}
	else if(ret){
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <platform_read+0x78>)
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2002      	movs	r0, #2
 8001136:	f019 fd1b 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 800113a:	7dfb      	ldrb	r3, [r7, #23]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000170c 	.word	0x2000170c
 8001148:	0801b2a0 	.word	0x0801b2a0

0800114c <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	460b      	mov	r3, r1
 800115a:	72fb      	strb	r3, [r7, #11]
 800115c:	4613      	mov	r3, r2
 800115e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	685c      	ldr	r4, [r3, #4]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6898      	ldr	r0, [r3, #8]
 8001168:	893b      	ldrh	r3, [r7, #8]
 800116a:	7af9      	ldrb	r1, [r7, #11]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	47a0      	blx	r4
 8001170:	6178      	str	r0, [r7, #20]

  return ret;
 8001172:	697b      	ldr	r3, [r7, #20]
}
 8001174:	4618      	mov	r0, r3
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd90      	pop	{r4, r7, pc}

0800117c <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	461a      	mov	r2, r3
 8001188:	460b      	mov	r3, r1
 800118a:	72fb      	strb	r3, [r7, #11]
 800118c:	4613      	mov	r3, r2
 800118e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6898      	ldr	r0, [r3, #8]
 8001198:	893b      	ldrh	r3, [r7, #8]
 800119a:	7af9      	ldrb	r1, [r7, #11]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	47a0      	blx	r4
 80011a0:	6178      	str	r0, [r7, #20]

  return ret;
 80011a2:	697b      	ldr	r3, [r7, #20]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}

080011ac <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fb09 	bl	80007cc <__aeabi_ui2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fc0f 	bl	80009e4 <__aeabi_fdiv>
 80011c6:	4603      	mov	r3, r0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	2301      	movs	r3, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffb1 	bl	800114c <lps22hh_read_reg>
 80011ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10f      	bne.n	8001212 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	7a3b      	ldrb	r3, [r7, #8]
 80011fc:	f362 0341 	bfi	r3, r2, #1, #1
 8001200:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001202:	f107 0208 	add.w	r2, r7, #8
 8001206:	2301      	movs	r3, #1
 8001208:	2110      	movs	r1, #16
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffb6 	bl	800117c <lps22hh_write_reg>
 8001210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001228:	f107 0210 	add.w	r2, r7, #16
 800122c:	2301      	movs	r3, #1
 800122e:	2110      	movs	r1, #16
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff8b 	bl	800114c <lps22hh_read_reg>
 8001236:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d107      	bne.n	800124e <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	2301      	movs	r3, #1
 8001244:	2111      	movs	r1, #17
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff80 	bl	800114c <lps22hh_read_reg>
 800124c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10f      	bne.n	8001274 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	b2da      	uxtb	r2, r3
 800125c:	7c3b      	ldrb	r3, [r7, #16]
 800125e:	f362 1306 	bfi	r3, r2, #4, #3
 8001262:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001264:	f107 0210 	add.w	r2, r7, #16
 8001268:	2301      	movs	r3, #1
 800126a:	2110      	movs	r1, #16
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff85 	bl	800117c <lps22hh_write_reg>
 8001272:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d119      	bne.n	80012ae <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	7b3b      	ldrb	r3, [r7, #12]
 8001286:	f362 0341 	bfi	r3, r2, #1, #1
 800128a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	b2da      	uxtb	r2, r3
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	f362 0300 	bfi	r3, r2, #0, #1
 800129c:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	2301      	movs	r3, #1
 80012a4:	2111      	movs	r1, #17
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ff68 	bl	800117c <lps22hh_write_reg>
 80012ac:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80012ae:	697b      	ldr	r3, [r7, #20]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	2303      	movs	r3, #3
 80012c8:	2128      	movs	r1, #40	; 0x28
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff3e 	bl	800114c <lps22hh_read_reg>
 80012d0:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80012d2:	7abb      	ldrb	r3, [r7, #10]
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	7a7a      	ldrb	r2, [r7, #9]
 80012e2:	441a      	add	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	7a3a      	ldrb	r2, [r7, #8]
 80012f0:	441a      	add	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	021a      	lsls	r2, r3, #8
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	601a      	str	r2, [r3, #0]

  return ret;
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001314:	2301      	movs	r3, #1
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	210f      	movs	r1, #15
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff16 	bl	800114c <lps22hh_read_reg>
 8001320:	60f8      	str	r0, [r7, #12]

  return ret;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001338:	f107 0208 	add.w	r2, r7, #8
 800133c:	2301      	movs	r3, #1
 800133e:	2111      	movs	r1, #17
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff03 	bl	800114c <lps22hh_read_reg>
 8001346:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	7a3b      	ldrb	r3, [r7, #8]
 8001358:	f362 0382 	bfi	r3, r2, #2, #1
 800135c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800135e:	f107 0208 	add.w	r2, r7, #8
 8001362:	2301      	movs	r3, #1
 8001364:	2111      	movs	r1, #17
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff08 	bl	800117c <lps22hh_write_reg>
 800136c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001382:	f107 0208 	add.w	r2, r7, #8
 8001386:	2301      	movs	r3, #1
 8001388:	2111      	movs	r1, #17
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fede 	bl	800114c <lps22hh_read_reg>
 8001390:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001392:	7a3b      	ldrb	r3, [r7, #8]
 8001394:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	701a      	strb	r2, [r3, #0]

  return ret;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4013      	ands	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f0:	4013      	ands	r3, r2
 80013f2:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_ADC_Init+0x94>)
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <MX_ADC_Init+0x98>)
 8001408:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_ADC_Init+0x94>)
 800140c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001410:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_ADC_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_ADC_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_ADC_Init+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_ADC_Init+0x94>)
 8001426:	2204      	movs	r2, #4
 8001428:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_ADC_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_ADC_Init+0x94>)
 8001432:	2200      	movs	r2, #0
 8001434:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_ADC_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC_Init+0x94>)
 800143e:	2201      	movs	r2, #1
 8001440:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_ADC_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_ADC_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_ADC_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_ADC_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_ADC_Init+0x94>)
 8001460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_ADC_Init+0x94>)
 8001468:	2207      	movs	r2, #7
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_ADC_Init+0x94>)
 800146e:	2207      	movs	r2, #7
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_ADC_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_ADC_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_ADC_Init+0x94>)
 8001482:	f001 ffb5 	bl	80033f0 <HAL_ADC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 800148c:	f000 faa2 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200016a8 	.word	0x200016a8
 8001498:	40012400 	.word	0x40012400

0800149c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <HAL_ADC_MspInit+0x24>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d103      	bne.n	80014b6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014b2:	f7ff ff7a 	bl	80013aa <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40012400 	.word	0x40012400

080014c4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_ADC_MspDeInit+0x24>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d103      	bne.n	80014de <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014da:	f7ff ff7e 	bl	80013da <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40012400 	.word	0x40012400

080014ec <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <SYS_InitMeasurement+0x14>)
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <SYS_InitMeasurement+0x18>)
 80014f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200016a8 	.word	0x200016a8
 8001504:	40012400 	.word	0x40012400

08001508 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001516:	f000 f871 	bl	80015fc <SYS_GetBatteryLevel>
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800151e:	4830      	ldr	r0, [pc, #192]	; (80015e0 <SYS_GetTemperatureLevel+0xd8>)
 8001520:	f000 f8a0 	bl	8001664 <ADC_ReadChannels>
 8001524:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <SYS_GetTemperatureLevel+0xdc>)
 8001528:	881a      	ldrh	r2, [r3, #0]
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <SYS_GetTemperatureLevel+0xe0>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d026      	beq.n	8001580 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <SYS_GetTemperatureLevel+0xdc>)
 8001534:	881a      	ldrh	r2, [r3, #0]
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <SYS_GetTemperatureLevel+0xe0>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d01c      	beq.n	8001578 <SYS_GetTemperatureLevel+0x70>
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <SYS_GetTemperatureLevel+0xe4>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	461a      	mov	r2, r3
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <SYS_GetTemperatureLevel+0xe0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2264      	movs	r2, #100	; 0x64
 800155a:	fb02 f203 	mul.w	r2, r2, r3
 800155e:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <SYS_GetTemperatureLevel+0xdc>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <SYS_GetTemperatureLevel+0xe0>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	1acb      	subs	r3, r1, r3
 800156a:	fb92 f3f3 	sdiv	r3, r2, r3
 800156e:	b29b      	uxth	r3, r3
 8001570:	331e      	adds	r3, #30
 8001572:	b29b      	uxth	r3, r3
 8001574:	b21b      	sxth	r3, r3
 8001576:	e001      	b.n	800157c <SYS_GetTemperatureLevel+0x74>
 8001578:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800157c:	81fb      	strh	r3, [r7, #14]
 800157e:	e01c      	b.n	80015ba <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	fb02 f203 	mul.w	r2, r2, r3
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <SYS_GetTemperatureLevel+0xe8>)
 800158a:	fba3 1302 	umull	r1, r3, r3, r2
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	0852      	lsrs	r2, r2, #1
 8001592:	4413      	add	r3, r2
 8001594:	0adb      	lsrs	r3, r3, #11
 8001596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 80015a2:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <SYS_GetTemperatureLevel+0xec>)
 80015a8:	fb82 1203 	smull	r1, r2, r2, r3
 80015ac:	1292      	asrs	r2, r2, #10
 80015ae:	17db      	asrs	r3, r3, #31
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	331e      	adds	r3, #30
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80015ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <SYS_GetTemperatureLevel+0xf0>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	2100      	movs	r1, #0
 80015c6:	2001      	movs	r0, #1
 80015c8:	f019 fad2 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80015cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 80015d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	b0001000 	.word	0xb0001000
 80015e4:	1fff75c8 	.word	0x1fff75c8
 80015e8:	1fff75a8 	.word	0x1fff75a8
 80015ec:	09ee009f 	.word	0x09ee009f
 80015f0:	00100101 	.word	0x00100101
 80015f4:	68db8bad 	.word	0x68db8bad
 80015f8:	0801b2d4 	.word	0x0801b2d4

080015fc <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800160a:	4813      	ldr	r0, [pc, #76]	; (8001658 <SYS_GetBatteryLevel+0x5c>)
 800160c:	f000 f82a 	bl	8001664 <ADC_ReadChannels>
 8001610:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	e016      	b.n	800164c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <SYS_GetBatteryLevel+0x60>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	4293      	cmp	r3, r2
 8001628:	d00b      	beq.n	8001642 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <SYS_GetBatteryLevel+0x60>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001634:	fb03 f202 	mul.w	r2, r3, r2
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	80fb      	strh	r3, [r7, #6]
 8001640:	e004      	b.n	800164c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001642:	4a07      	ldr	r2, [pc, #28]	; (8001660 <SYS_GetBatteryLevel+0x64>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800164c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	b4002000 	.word	0xb4002000
 800165c:	1fff75aa 	.word	0x1fff75aa
 8001660:	004c08d8 	.word	0x004c08d8

08001664 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800167c:	f7ff fec0 	bl	8001400 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001680:	481a      	ldr	r0, [pc, #104]	; (80016ec <ADC_ReadChannels+0x88>)
 8001682:	f002 fc9b 	bl	8003fbc <HAL_ADCEx_Calibration_Start>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800168c:	f000 f9a2 	bl	80019d4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <ADC_ReadChannels+0x88>)
 80016a4:	f002 fa02 	bl	8003aac <HAL_ADC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80016ae:	f000 f991 	bl	80019d4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80016b2:	480e      	ldr	r0, [pc, #56]	; (80016ec <ADC_ReadChannels+0x88>)
 80016b4:	f002 f8de 	bl	8003874 <HAL_ADC_Start>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016be:	f000 f989 	bl	80019d4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016c2:	f04f 31ff 	mov.w	r1, #4294967295
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <ADC_ReadChannels+0x88>)
 80016c8:	f002 f94c 	bl	8003964 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <ADC_ReadChannels+0x88>)
 80016ce:	f002 f917 	bl	8003900 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <ADC_ReadChannels+0x88>)
 80016d4:	f002 f9dd 	bl	8003a92 <HAL_ADC_GetValue>
 80016d8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016da:	4804      	ldr	r0, [pc, #16]	; (80016ec <ADC_ReadChannels+0x88>)
 80016dc:	f002 f84e 	bl	800377c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200016a8 	.word	0x200016a8

080016f0 <LL_AHB1_GRP1_EnableClock>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001724:	2004      	movs	r0, #4
 8001726:	f7ff ffe3 	bl	80016f0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff ffe0 	bl	80016f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2102      	movs	r1, #2
 8001734:	200b      	movs	r0, #11
 8001736:	f002 fd94 	bl	8004262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800173a:	200b      	movs	r0, #11
 800173c:	f002 fdab 	bl	8004296 <HAL_NVIC_EnableIRQ>

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <LL_AHB2_GRP1_EnableClock>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <LL_APB1_GRP1_EnableClock>:
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_I2C2_Init+0x74>)
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <MX_I2C2_Init+0x78>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_I2C2_Init+0x74>)
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <MX_I2C2_Init+0x7c>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_I2C2_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_I2C2_Init+0x74>)
 80017bc:	2201      	movs	r2, #1
 80017be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_I2C2_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_I2C2_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_I2C2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_I2C2_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017de:	480e      	ldr	r0, [pc, #56]	; (8001818 <MX_I2C2_Init+0x74>)
 80017e0:	f003 fc02 	bl	8004fe8 <HAL_I2C_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017ea:	f000 f8f3 	bl	80019d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <MX_I2C2_Init+0x74>)
 80017f2:	f004 f861 	bl	80058b8 <HAL_I2CEx_ConfigAnalogFilter>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f000 f8ea 	bl	80019d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_I2C2_Init+0x74>)
 8001804:	f004 f8a2 	bl	800594c <HAL_I2CEx_ConfigDigitalFilter>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800180e:	f000 f8e1 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000170c 	.word	0x2000170c
 800181c:	40005800 	.word	0x40005800
 8001820:	20303e5d 	.word	0x20303e5d

08001824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b096      	sub	sp, #88	; 0x58
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2238      	movs	r2, #56	; 0x38
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f019 fc31 	bl	801b0ac <memset>
  if(i2cHandle->Instance==I2C2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <HAL_I2C_MspInit+0xb0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d13b      	bne.n	80018cc <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001858:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f005 fb4a 	bl	8006efc <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800186e:	f000 f8b1 	bl	80019d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff ff66 	bl	8001744 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	2002      	movs	r0, #2
 800187a:	f7ff ff63 	bl	8001744 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800187e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001890:	2304      	movs	r3, #4
 8001892:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f003 f92d 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_I2C_MspInit+0xb4>)
 80018c0:	f003 f91c 	bl	8004afc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018c8:	f7ff ff54 	bl	8001774 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018cc:	bf00      	nop
 80018ce:	3758      	adds	r7, #88	; 0x58
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40005800 	.word	0x40005800
 80018d8:	48000400 	.word	0x48000400

080018dc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	f023 0218 	bic.w	r2, r3, #24
 80018f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190a:	f001 fb89 	bl	8003020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190e:	f000 f807 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8001912:	f008 fe85 	bl	800a620 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001916:	f7ff ff45 	bl	80017a4 <MX_I2C2_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800191a:	f008 fe89 	bl	800a630 <MX_LoRaWAN_Process>
 800191e:	e7fc      	b.n	800191a <main+0x14>

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09a      	sub	sp, #104	; 0x68
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	2248      	movs	r2, #72	; 0x48
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f019 fbbc 	bl	801b0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001946:	f004 f84d 	bl	80059e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff ffc6 	bl	80018dc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <SystemClock_Config+0xb0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <SystemClock_Config+0xb0>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <SystemClock_Config+0xb0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800196c:	2324      	movs	r3, #36	; 0x24
 800196e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001970:	2381      	movs	r3, #129	; 0x81
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001978:	2300      	movs	r3, #0
 800197a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800197c:	23b0      	movs	r3, #176	; 0xb0
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	4618      	mov	r0, r3
 800198a:	f004 fb77 	bl	800607c <HAL_RCC_OscConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001994:	f000 f81e 	bl	80019d4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001998:	234f      	movs	r3, #79	; 0x4f
 800199a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	2102      	movs	r1, #2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 fefa 	bl	80067b0 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019c2:	f000 f807 	bl	80019d4 <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3768      	adds	r7, #104	; 0x68
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	58000400 	.word	0x58000400

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>

080019de <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <LL_APB1_GRP1_EnableClock>:
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
	...

08001a30 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	222c      	movs	r2, #44	; 0x2c
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f019 fb35 	bl	801b0ac <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a44:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <MX_RTC_Init+0xa0>)
 8001a46:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a4a:	221f      	movs	r2, #31
 8001a4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a66:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a76:	4815      	ldr	r0, [pc, #84]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a78:	f005 fb5a 	bl	8007130 <HAL_RTC_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a82:	f7ff ffa7 	bl	80019d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <MX_RTC_Init+0x9c>)
 8001a88:	f005 fe48 	bl	800771c <HAL_RTCEx_SetSSRU_IT>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001a92:	f7ff ff9f 	bl	80019d4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001aa2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001aa6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_RTC_Init+0x9c>)
 8001ab6:	f005 fbb5 	bl	8007224 <HAL_RTC_SetAlarm_IT>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ac0:	f7ff ff88 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	3730      	adds	r7, #48	; 0x30
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20001758 	.word	0x20001758
 8001ad0:	40002800 	.word	0x40002800

08001ad4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2238      	movs	r2, #56	; 0x38
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f019 fae1 	bl	801b0ac <memset>
  if(rtcHandle->Instance==RTC)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RTC_MspInit+0x74>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d125      	bne.n	8001b40 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 f9f9 	bl	8006efc <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b10:	f7ff ff60 	bl	80019d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b14:	f7ff ff63 	bl	80019de <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b1c:	f7ff ff6f 	bl	80019fe <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2002      	movs	r0, #2
 8001b26:	f002 fb9c 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f002 fbb3 	bl	8004296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	202a      	movs	r0, #42	; 0x2a
 8001b36:	f002 fb94 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b3a:	202a      	movs	r0, #42	; 0x2a
 8001b3c:	f002 fbab 	bl	8004296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b40:	bf00      	nop
 8001b42:	3740      	adds	r7, #64	; 0x40
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40002800 	.word	0x40002800

08001b4c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	58000400 	.word	0x58000400

08001b64 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001b80:	f001 fa6e 	bl	8003060 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001b84:	f7ff ffe2 	bl	8001b4c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f003 ffbd 	bl	8005b08 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001b96:	f001 fa71 	bl	800307c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001b9a:	f000 ff8f 	bl	8002abc <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001ba6:	f001 fa5b 	bl	8003060 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001baa:	2101      	movs	r1, #1
 8001bac:	2000      	movs	r0, #0
 8001bae:	f003 ff27 	bl	8005a00 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 8001bba:	f001 fa5f 	bl	800307c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <NMI_Handler+0x4>

08001bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <HardFault_Handler+0x4>

08001bda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <BusFault_Handler+0x4>

08001be6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <UsageFault_Handler+0x4>

08001bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001c22:	f005 fdb7 	bl	8007794 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20001758 	.word	0x20001758

08001c30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <DMA1_Channel1_IRQHandler+0x10>)
 8001c36:	f002 fdc5 	bl	80047c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000179c 	.word	0x2000179c

08001c44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <USART1_IRQHandler+0x10>)
 8001c4a:	f006 fc03 	bl	8008454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200017fc 	.word	0x200017fc

08001c58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c60:	f003 f9aa 	bl	8004fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <RTC_Alarm_IRQHandler+0x10>)
 8001c6e:	f005 fc41 	bl	80074f4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20001758 	.word	0x20001758

08001c7c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c82:	f006 f8ef 	bl	8007e64 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20001790 	.word	0x20001790

08001c90 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_SUBGHZ_Init+0x20>)
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_SUBGHZ_Init+0x20>)
 8001ccc:	f005 fe4e 	bl	800796c <HAL_SUBGHZ_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001cd6:	f7ff fe7d 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20001790 	.word	0x20001790

08001ce4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff ffcf 	bl	8001c90 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2032      	movs	r0, #50	; 0x32
 8001cf8:	f002 fab3 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001cfc:	2032      	movs	r0, #50	; 0x32
 8001cfe:	f002 faca 	bl	8004296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <LL_FLASH_GetUDN+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	1fff7580 	.word	0x1fff7580

08001d44 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <LL_FLASH_GetDeviceID+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	1fff7584 	.word	0x1fff7584

08001d5c <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <LL_FLASH_GetSTCompanyID+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0a1b      	lsrs	r3, r3, #8
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	1fff7584 	.word	0x1fff7584

08001d74 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7ff ffc6 	bl	8001d0a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001d7e:	f018 fc39 	bl	801a5f4 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001d82:	f000 f997 	bl	80020b4 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001d86:	f000 f9b7 	bl	80020f8 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d8a:	f018 fec3 	bl	801ab14 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d8e:	480b      	ldr	r0, [pc, #44]	; (8001dbc <SystemApp_Init+0x48>)
 8001d90:	f018 ff70 	bl	801ac74 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d94:	2002      	movs	r0, #2
 8001d96:	f018 ff7b 	bl	801ac90 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d9a:	f7ff fba7 	bl	80014ec <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d9e:	f000 fa75 	bl	800228c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001da2:	f017 fe07 	bl	80199b4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001da6:	2101      	movs	r1, #1
 8001da8:	2001      	movs	r0, #1
 8001daa:	f017 fe43 	bl	8019a34 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001dae:	2101      	movs	r1, #1
 8001db0:	2001      	movs	r0, #1
 8001db2:	f017 fe0f 	bl	80199d4 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	08001f95 	.word	0x08001f95

08001dc0 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001dc4:	f017 fe66 	bl	8019a94 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001dd6:	f7ff fc11 	bl	80015fc <SYS_GetBatteryLevel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d902      	bls.n	8001dee <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001de8:	23fe      	movs	r3, #254	; 0xfe
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	e014      	b.n	8001e18 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001df4:	d202      	bcs.n	8001dfc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e00d      	b.n	8001e18 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001dfc:	88bb      	ldrh	r3, [r7, #4]
 8001dfe:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001e02:	461a      	mov	r2, r3
 8001e04:	4613      	mov	r3, r2
 8001e06:	01db      	lsls	r3, r3, #7
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <GetBatteryLevel+0x68>)
 8001e10:	fba3 2302 	umull	r2, r3, r3, r2
 8001e14:	09db      	lsrs	r3, r3, #7
 8001e16:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <GetBatteryLevel+0x6c>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2100      	movs	r1, #0
 8001e22:	2002      	movs	r0, #2
 8001e24:	f018 fea4 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001e28:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	1b4e81b5 	.word	0x1b4e81b5
 8001e38:	0801b2e0 	.word	0x0801b2e0

08001e3c <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001e46:	f7ff fb5f 	bl	8001508 <SYS_GetTemperatureLevel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	da00      	bge.n	8001e52 <GetTemperatureLevel+0x16>
 8001e50:	33ff      	adds	r3, #255	; 0xff
 8001e52:	121b      	asrs	r3, r3, #8
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001e58:	88fb      	ldrh	r3, [r7, #6]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001e62:	b590      	push	{r4, r7, lr}
 8001e64:	b087      	sub	sp, #28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001e6e:	f7ff ff5f 	bl	8001d30 <LL_FLASH_GetUDN>
 8001e72:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7a:	d138      	bne.n	8001eee <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e7c:	f001 f90c 	bl	8003098 <HAL_GetUIDw0>
 8001e80:	4604      	mov	r4, r0
 8001e82:	f001 f91d 	bl	80030c0 <HAL_GetUIDw2>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4423      	add	r3, r4
 8001e8a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e8c:	f001 f90e 	bl	80030ac <HAL_GetUIDw1>
 8001e90:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	0e1a      	lsrs	r2, r3, #24
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3307      	adds	r3, #7
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	0c1a      	lsrs	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3306      	adds	r3, #6
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	0a1a      	lsrs	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3305      	adds	r3, #5
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	0e1a      	lsrs	r2, r3, #24
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0c1a      	lsrs	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	0a1a      	lsrs	r2, r3, #8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001eec:	e031      	b.n	8001f52 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3307      	adds	r3, #7
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	0a1a      	lsrs	r2, r3, #8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3306      	adds	r3, #6
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	0c1a      	lsrs	r2, r3, #16
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	0e1a      	lsrs	r2, r3, #24
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001f1c:	f7ff ff12 	bl	8001d44 <LL_FLASH_GetDeviceID>
 8001f20:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3303      	adds	r3, #3
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001f2c:	f7ff ff16 	bl	8001d5c <LL_FLASH_GetSTCompanyID>
 8001f30:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3302      	adds	r3, #2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	0a1a      	lsrs	r2, r3, #8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	0c1b      	lsrs	r3, r3, #16
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	701a      	strb	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}

08001f5a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001f5a:	b590      	push	{r4, r7, lr}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001f64:	f7ff fee4 	bl	8001d30 <LL_FLASH_GetUDN>
 8001f68:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d10b      	bne.n	8001f8a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001f72:	f001 f891 	bl	8003098 <HAL_GetUIDw0>
 8001f76:	4604      	mov	r4, r0
 8001f78:	f001 f898 	bl	80030ac <HAL_GetUIDw1>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	405c      	eors	r4, r3
 8001f80:	f001 f89e 	bl	80030c0 <HAL_GetUIDw2>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4063      	eors	r3, r4
 8001f88:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001f8a:	687b      	ldr	r3, [r7, #4]

}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}

08001f94 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f017 fe86 	bl	8019cb4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001fae:	9200      	str	r2, [sp, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <TimestampNow+0x3c>)
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f81d 	bl	8001ff4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe f8dc 	bl	8000178 <strlen>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	0801b2ec 	.word	0x0801b2ec

08001fd4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001fd8:	2101      	movs	r1, #1
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f017 fcfa 	bl	80199d4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2002      	movs	r0, #2
 8001fec:	f017 fcf2 	bl	80199d4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ff4:	b40c      	push	{r2, r3}
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f018 f825 	bl	801a05c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800201c:	b002      	add	sp, #8
 800201e:	4770      	bx	lr

08002020 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8002038:	f000 f9f0 	bl	800241c <TIMER_IF_GetTimerValue>
 800203c:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800203e:	4618      	mov	r0, r3
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fa65 	bl	800251c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <LL_AHB2_GRP1_EnableClock>:
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002096:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800209a:	4905      	ldr	r1, [pc, #20]	; (80020b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58000800 	.word	0x58000800

080020b4 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f000 f802 	bl	80020c2 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d106      	bne.n	80020e4 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 80020d6:	f000 fffd 	bl	80030d4 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 80020da:	f001 f807 	bl	80030ec <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 80020de:	f001 f811 	bl	8003104 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 80020e2:	e005      	b.n	80020f0 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 80020e4:	f000 fffc 	bl	80030e0 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 80020e8:	f001 f806 	bl	80030f8 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 80020ec:	f001 f810 	bl	8003110 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8002110:	2301      	movs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff ff9e 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800211e:	2002      	movs	r0, #2
 8002120:	f7ff ff9b 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002124:	2002      	movs	r0, #2
 8002126:	f7ff ff98 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 800212a:	2002      	movs	r0, #2
 800212c:	f7ff ff95 	bl	800205a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002130:	2301      	movs	r3, #1
 8002132:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	4619      	mov	r1, r3
 8002138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213c:	f002 fcde 	bl	8004afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002144:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	483a      	ldr	r0, [pc, #232]	; (8002234 <DBG_ProbesInit+0x13c>)
 800214c:	f002 fcd6 	bl	8004afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002150:	2308      	movs	r3, #8
 8002152:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4836      	ldr	r0, [pc, #216]	; (8002234 <DBG_ProbesInit+0x13c>)
 800215a:	f002 fccf 	bl	8004afc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800215e:	2310      	movs	r3, #16
 8002160:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4833      	ldr	r0, [pc, #204]	; (8002234 <DBG_ProbesInit+0x13c>)
 8002168:	f002 fcc8 	bl	8004afc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2101      	movs	r1, #1
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f002 fef0 	bl	8004f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217e:	482d      	ldr	r0, [pc, #180]	; (8002234 <DBG_ProbesInit+0x13c>)
 8002180:	f002 feea 	bl	8004f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	2108      	movs	r1, #8
 8002188:	482a      	ldr	r0, [pc, #168]	; (8002234 <DBG_ProbesInit+0x13c>)
 800218a:	f002 fee5 	bl	8004f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	2110      	movs	r1, #16
 8002192:	4828      	ldr	r0, [pc, #160]	; (8002234 <DBG_ProbesInit+0x13c>)
 8002194:	f002 fee0 	bl	8004f58 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 80021a4:	23f0      	movs	r3, #240	; 0xf0
 80021a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 80021a8:	230d      	movs	r3, #13
 80021aa:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	2001      	movs	r0, #1
 80021ae:	f7ff ff54 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ba:	f002 fc9f 	bl	8004afc <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 80021c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 80021cc:	2306      	movs	r3, #6
 80021ce:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff ff42 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f002 fc8d 	bl	8004afc <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 80021ea:	2304      	movs	r3, #4
 80021ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 80021ee:	230d      	movs	r3, #13
 80021f0:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2002      	movs	r0, #2
 80021f4:	f7ff ff31 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <DBG_ProbesInit+0x13c>)
 80021fe:	f002 fc7d 	bl	8004afc <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 800220a:	2310      	movs	r3, #16
 800220c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 800220e:	230d      	movs	r3, #13
 8002210:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2002      	movs	r0, #2
 8002214:	f7ff ff21 	bl	800205a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	4619      	mov	r1, r3
 800221c:	4805      	ldr	r0, [pc, #20]	; (8002234 <DBG_ProbesInit+0x13c>)
 800221e:	f002 fc6d 	bl	8004afc <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002222:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002226:	f7ff ff31 	bl	800208c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	48000400 	.word	0x48000400

08002238 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <EnvSensors_Read+0x40>)
 8002242:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <EnvSensors_Read+0x44>)
 8002246:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <EnvSensors_Read+0x48>)
 800224a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a08      	ldr	r2, [pc, #32]	; (8002284 <EnvSensors_Read+0x4c>)
 8002262:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <EnvSensors_Read+0x50>)
 8002268:	611a      	str	r2, [r3, #16]

  return 0;
 800226a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800226c:	4618      	mov	r0, r3
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	42480000 	.word	0x42480000
 800227c:	41900000 	.word	0x41900000
 8002280:	447a0000 	.word	0x447a0000
 8002284:	003e090d 	.word	0x003e090d
 8002288:	000503ab 	.word	0x000503ab

0800228c <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002290:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <TIMER_IF_Init+0x5c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01b      	beq.n	800230c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <TIMER_IF_Init+0x60>)
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022dc:	f7ff fba8 	bl	8001a30 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022e0:	f000 f856 	bl	8002390 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <TIMER_IF_Init+0x60>)
 80022ea:	f005 f8a7 	bl	800743c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <TIMER_IF_Init+0x60>)
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022f6:	4809      	ldr	r0, [pc, #36]	; (800231c <TIMER_IF_Init+0x60>)
 80022f8:	f005 f9de 	bl	80076b8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f000 f9cf 	bl	80026a0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002302:	f000 f85f 	bl	80023c4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <TIMER_IF_Init+0x5c>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800230c:	79fb      	ldrb	r3, [r7, #7]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000015a 	.word	0x2000015a
 800231c:	20001758 	.word	0x20001758

08002320 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	222c      	movs	r2, #44	; 0x2c
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f018 feb8 	bl	801b0ac <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800233c:	f000 f828 	bl	8002390 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <TIMER_IF_StartTimer+0x68>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	43db      	mvns	r3, r3
 8002352:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002358:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800235c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800235e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	2201      	movs	r2, #1
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <TIMER_IF_StartTimer+0x6c>)
 800236e:	f004 ff59 	bl	8007224 <HAL_RTC_SetAlarm_IT>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002378:	f7ff fb2c 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800237c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002380:	4618      	mov	r0, r3
 8002382:	3738      	adds	r7, #56	; 0x38
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000015c 	.word	0x2000015c
 800238c:	20001758 	.word	0x20001758

08002390 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <TIMER_IF_StopTimer+0x2c>)
 800239c:	2201      	movs	r2, #1
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a4:	4806      	ldr	r0, [pc, #24]	; (80023c0 <TIMER_IF_StopTimer+0x30>)
 80023a6:	f005 f849 	bl	800743c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <TIMER_IF_StopTimer+0x30>)
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40002800 	.word	0x40002800
 80023c0:	20001758 	.word	0x20001758

080023c4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023c8:	f000 f98a 	bl	80026e0 <GetTimerTicks>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <TIMER_IF_SetTimerContext+0x18>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023d2:	4b02      	ldr	r3, [pc, #8]	; (80023dc <TIMER_IF_SetTimerContext+0x18>)
 80023d4:	681b      	ldr	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000015c 	.word	0x2000015c

080023e0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <TIMER_IF_GetTimerContext+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	2000015c 	.word	0x2000015c

080023f4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023fe:	f000 f96f 	bl	80026e0 <GetTimerTicks>
 8002402:	4602      	mov	r2, r0
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000015c 	.word	0x2000015c

0800241c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <TIMER_IF_GetTimerValue+0x24>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800242e:	f000 f957 	bl	80026e0 <GetTimerTicks>
 8002432:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002434:	687b      	ldr	r3, [r7, #4]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000015a 	.word	0x2000015a

08002444 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800244e:	2303      	movs	r3, #3
 8002450:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002452:	687b      	ldr	r3, [r7, #4]
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800245e:	b5b0      	push	{r4, r5, r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	461a      	mov	r2, r3
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	0d95      	lsrs	r5, r2, #22
 8002474:	0294      	lsls	r4, r2, #10
 8002476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fe fb6b 	bl	8000b5c <__aeabi_uldivmod>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4613      	mov	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}

08002498 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002498:	b4b0      	push	{r4, r5, r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f04f 0100 	mov.w	r1, #0
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	f04f 0400 	mov.w	r4, #0
 80024b4:	f04f 0500 	mov.w	r5, #0
 80024b8:	015d      	lsls	r5, r3, #5
 80024ba:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80024be:	0154      	lsls	r4, r2, #5
 80024c0:	4622      	mov	r2, r4
 80024c2:	462b      	mov	r3, r5
 80024c4:	1a12      	subs	r2, r2, r0
 80024c6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ca:	f04f 0400 	mov.w	r4, #0
 80024ce:	f04f 0500 	mov.w	r5, #0
 80024d2:	009d      	lsls	r5, r3, #2
 80024d4:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80024d8:	0094      	lsls	r4, r2, #2
 80024da:	4622      	mov	r2, r4
 80024dc:	462b      	mov	r3, r5
 80024de:	1812      	adds	r2, r2, r0
 80024e0:	eb41 0303 	adc.w	r3, r1, r3
 80024e4:	f04f 0000 	mov.w	r0, #0
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	00d9      	lsls	r1, r3, #3
 80024ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024f2:	00d0      	lsls	r0, r2, #3
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	0a82      	lsrs	r2, r0, #10
 8002506:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800250a:	0a8b      	lsrs	r3, r1, #10
 800250c:	4613      	mov	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bcb0      	pop	{r4, r5, r7}
 800251a:	4770      	bx	lr

0800251c <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff9a 	bl	800245e <TIMER_IF_Convert_ms2Tick>
 800252a:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800252c:	f000 f8d8 	bl	80026e0 <GetTimerTicks>
 8002530:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002532:	e000      	b.n	8002536 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002534:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002536:	f000 f8d3 	bl	80026e0 <GetTimerTicks>
 800253a:	4602      	mov	r2, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	429a      	cmp	r2, r3
 8002544:	d8f6      	bhi.n	8002534 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002558:	f018 f99a 	bl	801a890 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800256c:	f000 f8a8 	bl	80026c0 <TIMER_IF_BkUp_Read_MSBticks>
 8002570:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3301      	adds	r3, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f892 	bl	80026a0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002584:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002588:	b088      	sub	sp, #32
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002592:	f000 f8a5 	bl	80026e0 <GetTimerTicks>
 8002596:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002598:	f000 f892 	bl	80026c0 <TIMER_IF_BkUp_Read_MSBticks>
 800259c:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	0003      	movs	r3, r0
 80025b0:	2200      	movs	r2, #0
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	4608      	mov	r0, r1
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	eb12 0800 	adds.w	r8, r2, r0
 80025be:	eb43 0901 	adc.w	r9, r3, r1
 80025c2:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	0a82      	lsrs	r2, r0, #10
 80025d4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025d8:	0a8b      	lsrs	r3, r1, #10
 80025da:	4613      	mov	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	ea02 0400 	and.w	r4, r2, r0
 80025f2:	ea03 0501 	and.w	r5, r3, r1
 80025f6:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff4b 	bl	8002498 <TIMER_IF_Convert_Tick2ms>
 8002602:	4603      	mov	r3, r0
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800260a:	69fb      	ldr	r3, [r7, #28]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002618 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	2100      	movs	r1, #0
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002626:	f005 f8d9 	bl	80077dc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20001758 	.word	0x20001758

08002638 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	2101      	movs	r1, #1
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002646:	f005 f8c9 	bl	80077dc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20001758 	.word	0x20001758

08002658 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002662:	2100      	movs	r1, #0
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002666:	f005 f8d1 	bl	800780c <HAL_RTCEx_BKUPRead>
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20001758 	.word	0x20001758

0800267c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002686:	2101      	movs	r1, #1
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800268a:	f005 f8bf 	bl	800780c <HAL_RTCEx_BKUPRead>
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20001758 	.word	0x20001758

080026a0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	2102      	movs	r1, #2
 80026ac:	4803      	ldr	r0, [pc, #12]	; (80026bc <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80026ae:	f005 f895 	bl	80077dc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20001758 	.word	0x20001758

080026c0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026c6:	2102      	movs	r1, #2
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026ca:	f005 f89f 	bl	800780c <HAL_RTCEx_BKUPRead>
 80026ce:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80026d0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20001758 	.word	0x20001758

080026e0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80026e4:	4803      	ldr	r0, [pc, #12]	; (80026f4 <GetTimerTicks+0x14>)
 80026e6:	f7ff fdde 	bl	80022a6 <LL_RTC_TIME_GetSubSecond>
 80026ea:	4603      	mov	r3, r0
 80026ec:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40002800 	.word	0x40002800

080026f8 <LL_AHB2_GRP1_EnableClock>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_APB2_GRP1_EnableClock>:
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002734:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002744:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <LL_APB2_GRP1_DisableClock>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	43db      	mvns	r3, r3
 800276a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276e:	4013      	ands	r3, r2
 8002770:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <MX_USART1_UART_Init+0x90>)
 8002782:	4a23      	ldr	r2, [pc, #140]	; (8002810 <MX_USART1_UART_Init+0x94>)
 8002784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <MX_USART1_UART_Init+0x90>)
 8002788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800278c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <MX_USART1_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <MX_USART1_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <MX_USART1_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027a0:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027c4:	4811      	ldr	r0, [pc, #68]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027c6:	f005 fd0c 	bl	80081e2 <HAL_UART_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027d0:	f7ff f900 	bl	80019d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d4:	2100      	movs	r1, #0
 80027d6:	480d      	ldr	r0, [pc, #52]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027d8:	f007 fd39 	bl	800a24e <HAL_UARTEx_SetTxFifoThreshold>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027e2:	f7ff f8f7 	bl	80019d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e6:	2100      	movs	r1, #0
 80027e8:	4808      	ldr	r0, [pc, #32]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027ea:	f007 fd6e 	bl	800a2ca <HAL_UARTEx_SetRxFifoThreshold>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027f4:	f7ff f8ee 	bl	80019d4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80027f8:	4804      	ldr	r0, [pc, #16]	; (800280c <MX_USART1_UART_Init+0x90>)
 80027fa:	f007 fced 	bl	800a1d8 <HAL_UARTEx_EnableFifoMode>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002804:	f7ff f8e6 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200017fc 	.word	0x200017fc
 8002810:	40013800 	.word	0x40013800

08002814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b096      	sub	sp, #88	; 0x58
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2238      	movs	r2, #56	; 0x38
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f018 fc39 	bl	801b0ac <memset>
  if(uartHandle->Instance==USART1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <HAL_UART_MspInit+0xe8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d156      	bne.n	80028f2 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002844:	2301      	movs	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002848:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800284c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	4618      	mov	r0, r3
 8002854:	f004 fb52 	bl	8006efc <HAL_RCCEx_PeriphCLKConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800285e:	f7ff f8b9 	bl	80019d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002862:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002866:	f7ff ff5f 	bl	8002728 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2002      	movs	r0, #2
 800286c:	f7ff ff44 	bl	80026f8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287c:	2303      	movs	r3, #3
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002880:	2307      	movs	r3, #7
 8002882:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002888:	4619      	mov	r1, r3
 800288a:	481d      	ldr	r0, [pc, #116]	; (8002900 <HAL_UART_MspInit+0xec>)
 800288c:	f002 f936 	bl	8004afc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002890:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <HAL_UART_MspInit+0xf0>)
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_UART_MspInit+0xf4>)
 8002894:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_UART_MspInit+0xf0>)
 8002898:	2212      	movs	r2, #18
 800289a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_UART_MspInit+0xf0>)
 800289e:	2210      	movs	r2, #16
 80028a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028c6:	480f      	ldr	r0, [pc, #60]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028c8:	f001 fd02 	bl	80042d0 <HAL_DMA_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80028d2:	f7ff f87f 	bl	80019d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028da:	679a      	str	r2, [r3, #120]	; 0x78
 80028dc:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_UART_MspInit+0xf0>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2102      	movs	r1, #2
 80028e6:	2024      	movs	r0, #36	; 0x24
 80028e8:	f001 fcbb 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ec:	2024      	movs	r0, #36	; 0x24
 80028ee:	f001 fcd2 	bl	8004296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028f2:	bf00      	nop
 80028f4:	3758      	adds	r7, #88	; 0x58
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40013800 	.word	0x40013800
 8002900:	48000400 	.word	0x48000400
 8002904:	2000179c 	.word	0x2000179c
 8002908:	40020008 	.word	0x40020008

0800290c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_UART_MspDeInit+0x3c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10f      	bne.n	800293e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800291e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002922:	f7ff ff19 	bl	8002758 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002926:	21c0      	movs	r1, #192	; 0xc0
 8002928:	4808      	ldr	r0, [pc, #32]	; (800294c <HAL_UART_MspDeInit+0x40>)
 800292a:	f002 fa47 	bl	8004dbc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002932:	4618      	mov	r0, r3
 8002934:	f001 fd74 	bl	8004420 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002938:	2024      	movs	r0, #36	; 0x24
 800293a:	f001 fcba 	bl	80042b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40013800 	.word	0x40013800
 800294c:	48000400 	.word	0x48000400

08002950 <LL_APB2_GRP1_ForceReset>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4313      	orrs	r3, r2
 8002966:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_APB2_GRP1_ReleaseReset>:
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	43db      	mvns	r3, r3
 8002984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002988:	4013      	ands	r3, r2
 800298a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
	...

08002998 <LL_EXTI_EnableIT_0_31>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <LL_EXTI_EnableIT_0_31+0x24>)
 80029a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80029a6:	4905      	ldr	r1, [pc, #20]	; (80029bc <LL_EXTI_EnableIT_0_31+0x24>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	58000800 	.word	0x58000800

080029c0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <vcom_Init+0x28>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80029ce:	f7fe fea7 	bl	8001720 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80029d2:	f7ff fed3 	bl	800277c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80029d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80029da:	f7ff ffdd 	bl	8002998 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80029de:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000160 	.word	0x20000160

080029ec <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80029f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029f4:	f7ff ffac 	bl	8002950 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80029f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029fc:	f7ff ffb9 	bl	8002972 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <vcom_DeInit+0x28>)
 8002a02:	f7ff ff83 	bl	800290c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002a06:	200f      	movs	r0, #15
 8002a08:	f001 fc53 	bl	80042b2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002a0c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200017fc 	.word	0x200017fc

08002a18 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a24:	887b      	ldrh	r3, [r7, #2]
 8002a26:	461a      	mov	r2, r3
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4804      	ldr	r0, [pc, #16]	; (8002a3c <vcom_Trace_DMA+0x24>)
 8002a2c:	f005 fc80 	bl	8008330 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002a30:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200017fc 	.word	0x200017fc

08002a40 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <vcom_ReceiveInit+0x70>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002a4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a52:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002a54:	f107 0308 	add.w	r3, r7, #8
 8002a58:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a5c:	4815      	ldr	r0, [pc, #84]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002a5e:	f007 fb2e 	bl	800a0be <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002a62:	bf00      	nop
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d0f7      	beq.n	8002a64 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002a74:	bf00      	nop
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a84:	d1f7      	bne.n	8002a76 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a94:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002a98:	f007 fb6c 	bl	800a174 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <vcom_ReceiveInit+0x78>)
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <vcom_ReceiveInit+0x74>)
 8002aa2:	f005 fbef 	bl	8008284 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002aa6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000164 	.word	0x20000164
 8002ab4:	200017fc 	.word	0x200017fc
 8002ab8:	2000188c 	.word	0x2000188c

08002abc <vcom_Resume>:

void vcom_Resume(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ac0:	4808      	ldr	r0, [pc, #32]	; (8002ae4 <vcom_Resume+0x28>)
 8002ac2:	f005 fb8e 	bl	80081e2 <HAL_UART_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002acc:	f7fe ff82 	bl	80019d4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ad0:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <vcom_Resume+0x2c>)
 8002ad2:	f001 fbfd 	bl	80042d0 <HAL_DMA_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002adc:	f7fe ff7a 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200017fc 	.word	0x200017fc
 8002ae8:	2000179c 	.word	0x2000179c

08002aec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_UART_TxCpltCallback+0x18>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2000      	movs	r0, #0
 8002afa:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000160 	.word	0x20000160

08002b08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_UART_RxCpltCallback+0x38>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_UART_RxCpltCallback+0x26>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_UART_RxCpltCallback+0x38>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2200      	movs	r2, #0
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4806      	ldr	r0, [pc, #24]	; (8002b44 <HAL_UART_RxCpltCallback+0x3c>)
 8002b2c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_UART_RxCpltCallback+0x3c>)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f005 fba6 	bl	8008284 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000164 	.word	0x20000164
 8002b44:	2000188c 	.word	0x2000188c

08002b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b4c:	f7ff fba5 	bl	800229a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <LoopForever+0xe>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b58:	e002      	b.n	8002b60 <LoopCopyDataInit>

08002b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5e:	3304      	adds	r3, #4

08002b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b64:	d3f9      	bcc.n	8002b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b68:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <LoopForever+0x16>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b6c:	e001      	b.n	8002b72 <LoopFillZerobss>

08002b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b70:	3204      	adds	r2, #4

08002b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b74:	d3fb      	bcc.n	8002b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b76:	f018 fa75 	bl	801b064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b7a:	f7fe fec4 	bl	8001906 <main>

08002b7e <LoopForever>:

LoopForever:
    b LoopForever
 8002b7e:	e7fe      	b.n	8002b7e <LoopForever>
  ldr   r0, =_estack
 8002b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002b8c:	0801c068 	.word	0x0801c068
  ldr r2, =_sbss
 8002b90:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002b94:	20001944 	.word	0x20001944

08002b98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC_IRQHandler>

08002b9a <LL_AHB2_GRP1_EnableClock>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
	...

08002bcc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <BSP_LED_Init+0x80>)
 8002bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e024      	b.n	8002c44 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	f7ff ffcd 	bl	8002b9a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <BSP_LED_Init+0x80>)
 8002c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c08:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c12:	2302      	movs	r3, #2
 8002c14:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <BSP_LED_Init+0x84>)
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	f107 020c 	add.w	r2, r7, #12
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 ff69 	bl	8004afc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <BSP_LED_Init+0x84>)
 8002c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <BSP_LED_Init+0x80>)
 8002c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f002 f98b 	bl	8004f58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0801bb80 	.word	0x0801bb80
 8002c50:	20000004 	.word	0x20000004

08002c54 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <BSP_LED_On+0x40>)
 8002c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e00c      	b.n	8002c8c <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <BSP_LED_On+0x44>)
 8002c76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <BSP_LED_On+0x40>)
 8002c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c82:	2200      	movs	r2, #0
 8002c84:	4619      	mov	r1, r3
 8002c86:	f002 f967 	bl	8004f58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	0801bb80 	.word	0x0801bb80
 8002c98:	20000004 	.word	0x20000004

08002c9c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	4a0c      	ldr	r2, [pc, #48]	; (8002cdc <BSP_LED_Off+0x40>)
 8002caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e00c      	b.n	8002cd4 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <BSP_LED_Off+0x44>)
 8002cbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <BSP_LED_Off+0x40>)
 8002cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f002 f943 	bl	8004f58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	0801bb80 	.word	0x0801bb80
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <BSP_LED_Toggle+0x40>)
 8002cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e00c      	b.n	8002d1c <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <BSP_LED_Toggle+0x44>)
 8002d06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	4905      	ldr	r1, [pc, #20]	; (8002d24 <BSP_LED_Toggle+0x40>)
 8002d0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f002 f936 	bl	8004f86 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	0801bb80 	.word	0x0801bb80
 8002d28:	20000004 	.word	0x20000004

08002d2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <BSP_PB_Init+0xe4>)
 8002d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e055      	b.n	8002e08 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <BSP_PB_Init+0x3c>
 8002d62:	2002      	movs	r0, #2
 8002d64:	f7ff ff19 	bl	8002b9a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <BSP_PB_Init+0xe8>)
 8002d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d70:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d76:	2302      	movs	r3, #2
 8002d78:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002d7a:	79bb      	ldrb	r3, [r7, #6]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <BSP_PB_Init+0xec>)
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	f107 020c 	add.w	r2, r7, #12
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 feb2 	bl	8004afc <HAL_GPIO_Init>
 8002d98:	e035      	b.n	8002e06 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002d9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d9e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <BSP_PB_Init+0xec>)
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	f107 020c 	add.w	r2, r7, #12
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fea4 	bl	8004afc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <BSP_PB_Init+0xf0>)
 8002dba:	441a      	add	r2, r3
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4918      	ldr	r1, [pc, #96]	; (8002e20 <BSP_PB_Init+0xf4>)
 8002dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f001 fe85 	bl	8004ad6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <BSP_PB_Init+0xf0>)
 8002dd2:	1898      	adds	r0, r3, r2
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <BSP_PB_Init+0xe4>)
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2100      	movs	r1, #0
 8002de0:	f001 fe60 	bl	8004aa4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <BSP_PB_Init+0xf8>)
 8002de8:	56d0      	ldrsb	r0, [r2, r3]
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <BSP_PB_Init+0xfc>)
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	f001 fa34 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <BSP_PB_Init+0xf8>)
 8002dfe:	56d3      	ldrsb	r3, [r2, r3]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fa48 	bl	8004296 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	2000001c 	.word	0x2000001c
 8002e14:	0801bb88 	.word	0x0801bb88
 8002e18:	20000010 	.word	0x20000010
 8002e1c:	20001890 	.word	0x20001890
 8002e20:	0801bb94 	.word	0x0801bb94
 8002e24:	0801bb90 	.word	0x0801bb90
 8002e28:	20000028 	.word	0x20000028

08002e2c <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fff1 	bl	8002e2c <BSP_PB_Callback>
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e62:	2310      	movs	r3, #16
 8002e64:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7a:	f001 fe3f 	bl	8004afc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8a:	f001 fe37 	bl	8004afc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2120      	movs	r1, #32
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f002 f85f 	bl	8004f58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2110      	movs	r1, #16
 8002e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea2:	f002 f859 	bl	8004f58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d83f      	bhi.n	8002f40 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002ec0:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002ef3 	.word	0x08002ef3
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f27 	.word	0x08002f27
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2110      	movs	r1, #16
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f002 f83a 	bl	8004f58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eec:	f002 f834 	bl	8004f58 <HAL_GPIO_WritePin>
      break;      
 8002ef0:	e027      	b.n	8002f42 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efa:	f002 f82d 	bl	8004f58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002efe:	2200      	movs	r2, #0
 8002f00:	2120      	movs	r1, #32
 8002f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f06:	f002 f827 	bl	8004f58 <HAL_GPIO_WritePin>
      break;
 8002f0a:	e01a      	b.n	8002f42 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2110      	movs	r1, #16
 8002f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f14:	f002 f820 	bl	8004f58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f20:	f002 f81a 	bl	8004f58 <HAL_GPIO_WritePin>
      break;
 8002f24:	e00d      	b.n	8002f42 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f26:	2200      	movs	r2, #0
 8002f28:	2110      	movs	r1, #16
 8002f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2e:	f002 f813 	bl	8004f58 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f32:	2201      	movs	r2, #1
 8002f34:	2120      	movs	r1, #32
 8002f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f3a:	f002 f80d 	bl	8004f58 <HAL_GPIO_WritePin>
      break;
 8002f3e:	e000      	b.n	8002f42 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002f40:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002f50:	2302      	movs	r3, #2
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002f6c:	2301      	movs	r3, #1
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6053      	str	r3, [r2, #4]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	e0042000 	.word	0xe0042000

08002f94 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a03      	ldr	r2, [pc, #12]	; (8002fac <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6053      	str	r3, [r2, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	e0042000 	.word	0xe0042000

08002fb0 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a03      	ldr	r2, [pc, #12]	; (8002fc8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	6053      	str	r3, [r2, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	e0042000 	.word	0xe0042000

08002fcc <LL_DBGMCU_DisableDBGStopMode>:
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002fd6:	f023 0302 	bic.w	r3, r3, #2
 8002fda:	6053      	str	r3, [r2, #4]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	e0042000 	.word	0xe0042000

08002fe8 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a03      	ldr	r2, [pc, #12]	; (8003000 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6053      	str	r3, [r2, #4]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	e0042000 	.word	0xe0042000

08003004 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a03      	ldr	r2, [pc, #12]	; (800301c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6053      	str	r3, [r2, #4]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	e0042000 	.word	0xe0042000

08003020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302a:	2003      	movs	r0, #3
 800302c:	f001 f90e 	bl	800424c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003030:	f003 fd82 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8003034:	4603      	mov	r3, r0
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_Init+0x3c>)
 8003038:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800303a:	200f      	movs	r0, #15
 800303c:	f7fe fff0 	bl	8002020 <HAL_InitTick>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	71fb      	strb	r3, [r7, #7]
 800304a:	e001      	b.n	8003050 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800304c:	f7fe fdb9 	bl	8001bc2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003050:	79fb      	ldrb	r3, [r7, #7]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <HAL_SuspendTick+0x18>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a03      	ldr	r2, [pc, #12]	; (8003078 <HAL_SuspendTick+0x18>)
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	e000e010 	.word	0xe000e010

0800307c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <HAL_ResumeTick+0x18>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a03      	ldr	r2, [pc, #12]	; (8003094 <HAL_ResumeTick+0x18>)
 8003086:	f043 0302 	orr.w	r3, r3, #2
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	e000e010 	.word	0xe000e010

08003098 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800309c:	4b02      	ldr	r3, [pc, #8]	; (80030a8 <HAL_GetUIDw0+0x10>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	1fff7590 	.word	0x1fff7590

080030ac <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80030b0:	4b02      	ldr	r3, [pc, #8]	; (80030bc <HAL_GetUIDw1+0x10>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	1fff7594 	.word	0x1fff7594

080030c0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_GetUIDw2+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	1fff7598 	.word	0x1fff7598

080030d4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030d8:	f7ff ff4e 	bl	8002f78 <LL_DBGMCU_EnableDBGSleepMode>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80030e4:	f7ff ff56 	bl	8002f94 <LL_DBGMCU_DisableDBGSleepMode>
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030f0:	f7ff ff5e 	bl	8002fb0 <LL_DBGMCU_EnableDBGStopMode>
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80030fc:	f7ff ff66 	bl	8002fcc <LL_DBGMCU_DisableDBGStopMode>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003108:	f7ff ff6e 	bl	8002fe8 <LL_DBGMCU_EnableDBGStandbyMode>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003114:	f7ff ff76 	bl	8003004 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}

0800311c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2107      	movs	r1, #7
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	401a      	ands	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	431a      	orrs	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	210f      	movs	r1, #15
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	401a      	ands	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	0e9b      	lsrs	r3, r3, #26
 80031de:	f003 010f 	and.w	r1, r3, #15
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	43db      	mvns	r3, r3
 800325c:	401a      	ands	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0219      	lsls	r1, r3, #8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	400b      	ands	r3, r1
 8003266:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800326a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800326e:	431a      	orrs	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003274:	bf00      	nop
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800328e:	f023 0317 	bic.w	r3, r3, #23
 8003292:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80032b4:	f023 0317 	bic.w	r3, r3, #23
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6093      	str	r3, [r2, #8]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032da:	d101      	bne.n	80032e0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	f023 0317 	bic.w	r3, r3, #23
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr

08003312 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003322:	f023 0317 	bic.w	r3, r3, #23
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <LL_ADC_IsEnabled+0x18>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <LL_ADC_IsEnabled+0x1a>
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d101      	bne.n	8003374 <LL_ADC_IsDisableOngoing+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_ADC_IsDisableOngoing+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003390:	f023 0317 	bic.w	r3, r3, #23
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b6:	f023 0317 	bic.w	r3, r3, #23
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d101      	bne.n	80033e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1ae      	b.n	8003770 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fe f83b 	bl	800149c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff44 	bl	80032c6 <LL_ADC_IsInternalRegulatorEnabled>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d115      	bne.n	8003470 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff18 	bl	800327e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344e:	4b9b      	ldr	r3, [pc, #620]	; (80036bc <HAL_ADC_Init+0x2cc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	4a9a      	ldr	r2, [pc, #616]	; (80036c0 <HAL_ADC_Init+0x2d0>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	099b      	lsrs	r3, r3, #6
 800345c:	3301      	adds	r3, #1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003462:	e002      	b.n	800346a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	3b01      	subs	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f9      	bne.n	8003464 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff26 	bl	80032c6 <LL_ADC_IsInternalRegulatorEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f043 0210 	orr.w	r2, r3, #16
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff93 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 80034a6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 8154 	bne.w	800375e <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 8150 	bne.w	800375e <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034c6:	f043 0202 	orr.w	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff30 	bl	8003338 <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d14f      	bne.n	800357e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f023 0118 	bic.w	r1, r3, #24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003500:	4313      	orrs	r3, r2
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d111      	bne.n	8003536 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800351e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003524:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800352a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	4b61      	ldr	r3, [pc, #388]	; (80036c4 <HAL_ADC_Init+0x2d4>)
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	6979      	ldr	r1, [r7, #20]
 8003546:	430b      	orrs	r3, r1
 8003548:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003552:	d014      	beq.n	800357e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d00f      	beq.n	800357e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003566:	d00a      	beq.n	800357e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003568:	4b57      	ldr	r3, [pc, #348]	; (80036c8 <HAL_ADC_Init+0x2d8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003578:	4953      	ldr	r1, [pc, #332]	; (80036c8 <HAL_ADC_Init+0x2d8>)
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7e1b      	ldrb	r3, [r3, #24]
 8003582:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	7e5b      	ldrb	r3, [r3, #25]
 8003588:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800358a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7e9b      	ldrb	r3, [r3, #26]
 8003590:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003592:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003598:	2a00      	cmp	r2, #0
 800359a:	d002      	beq.n	80035a2 <HAL_ADC_Init+0x1b2>
 800359c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a0:	e000      	b.n	80035a4 <HAL_ADC_Init+0x1b4>
 80035a2:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80035a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80035aa:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da04      	bge.n	80035be <HAL_ADC_Init+0x1ce>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035bc:	e001      	b.n	80035c2 <HAL_ADC_Init+0x1d2>
 80035be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80035c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035ca:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035cc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d114      	bne.n	8003608 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7e9b      	ldrb	r3, [r3, #26]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e00b      	b.n	8003608 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800361c:	4313      	orrs	r3, r2
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800362e:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	430b      	orrs	r3, r1
 800363a:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_ADC_Init+0x2dc>)
 8003644:	4013      	ands	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	6979      	ldr	r1, [r7, #20]
 800364c:	430b      	orrs	r3, r1
 800364e:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	461a      	mov	r2, r3
 800365a:	2100      	movs	r1, #0
 800365c:	f7ff fd7d 	bl	800315a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	461a      	mov	r2, r3
 800366a:	4919      	ldr	r1, [pc, #100]	; (80036d0 <HAL_ADC_Init+0x2e0>)
 800366c:	f7ff fd75 	bl	800315a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d108      	bne.n	800368a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f062 020f 	orn	r2, r2, #15
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
 8003688:	e044      	b.n	8003714 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003692:	d13f      	bne.n	8003714 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e00c      	b.n	80036b4 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	d012      	beq.n	80036d4 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3301      	adds	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b07      	cmp	r3, #7
 80036b8:	d9ef      	bls.n	800369a <HAL_ADC_Init+0x2aa>
 80036ba:	e00c      	b.n	80036d6 <HAL_ADC_Init+0x2e6>
 80036bc:	20000000 	.word	0x20000000
 80036c0:	053e2d63 	.word	0x053e2d63
 80036c4:	1ffffc02 	.word	0x1ffffc02
 80036c8:	40012708 	.word	0x40012708
 80036cc:	dffffc02 	.word	0xdffffc02
 80036d0:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 80036d4:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d108      	bne.n	80036ee <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f062 020f 	orn	r2, r2, #15
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
 80036ec:	e012      	b.n	8003714 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f003 031c 	and.w	r3, r3, #28
 8003700:	f06f 020f 	mvn.w	r2, #15
 8003704:	fa02 f103 	lsl.w	r1, r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <HAL_ADC_Init+0x388>)
 800371c:	4013      	ands	r3, r2
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d10b      	bne.n	800373c <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800373a:	e018      	b.n	800376e <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f023 0312 	bic.w	r3, r3, #18
 8003744:	f043 0210 	orr.w	r2, r3, #16
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800375c:	e007      	b.n	800376e <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f043 0210 	orr.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800376e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3720      	adds	r7, #32
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	833fffe7 	.word	0x833fffe7

0800377c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06a      	b.n	8003864 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	f043 0202 	orr.w	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fabe 	bl	8003d1c <ADC_ConversionStop>
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb82 	bl	8003eb4 <ADC_Disable>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd6d 	bl	80032a4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80037d8:	f023 0303 	bic.w	r3, r3, #3
 80037dc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f240 329f 	movw	r2, #927	; 0x39f
 80037e6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68d9      	ldr	r1, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HAL_ADC_DeInit+0xf0>)
 80037f4:	400b      	ands	r3, r1
 80037f6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003806:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0207 	bic.w	r2, r2, #7
 8003816:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003826:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_ADC_DeInit+0xf4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <HAL_ADC_DeInit+0xf4>)
 800383c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003840:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fe3e 	bl	80014c4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	833e0200 	.word	0x833e0200
 8003870:	40012708 	.word	0x40012708

08003874 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fda3 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d132      	bne.n	80038f2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_ADC_Start+0x26>
 8003896:	2302      	movs	r3, #2
 8003898:	e02e      	b.n	80038f8 <HAL_ADC_Start+0x84>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa80 	bl	8003da8 <ADC_Enable>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d11a      	bne.n	80038e8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	221c      	movs	r2, #28
 80038d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fd4d 	bl	8003380 <LL_ADC_REG_StartConversion>
 80038e6:	e006      	b.n	80038f6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80038f0:	e001      	b.n	80038f6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
 80038f4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Stop+0x16>
 8003912:	2302      	movs	r3, #2
 8003914:	e022      	b.n	800395c <HAL_ADC_Stop+0x5c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f9fc 	bl	8003d1c <ADC_ConversionStop>
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d111      	bne.n	8003952 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fac0 	bl	8003eb4 <ADC_Disable>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d102      	bne.n	800397c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003976:	2308      	movs	r3, #8
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e010      	b.n	800399e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e077      	b.n	8003a8a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800399a:	2304      	movs	r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800399e:	f7fe fb49 	bl	8002034 <HAL_GetTick>
 80039a2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039a4:	e021      	b.n	80039ea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d01d      	beq.n	80039ea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039ae:	f7fe fb41 	bl	8002034 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <HAL_ADC_PollForConversion+0x60>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d112      	bne.n	80039ea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f043 0204 	orr.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e04f      	b.n	8003a8a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0d6      	beq.n	80039a6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fbc4 	bl	8003196 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d031      	beq.n	8003a78 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	7e9b      	ldrb	r3, [r3, #26]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d12d      	bne.n	8003a78 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d126      	bne.n	8003a78 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fccc 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d112      	bne.n	8003a60 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 020c 	bic.w	r2, r2, #12
 8003a48:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f043 0201 	orr.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a5e:	e00b      	b.n	8003a78 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7e1b      	ldrb	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	220c      	movs	r2, #12
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x28>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e110      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x24a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fc73 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f040 80f7 	bne.w	8003cdc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	f000 80b1 	beq.w	8003c5a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b00:	d004      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_ADC_ConfigChannel+0x254>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f7ff fb70 	bl	80031fc <LL_ADC_REG_SetSequencerChAdd>
 8003b1c:	e041      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0xa0>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0e9b      	lsrs	r3, r3, #26
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	e011      	b.n	8003b70 <HAL_ADC_ConfigChannel+0xc4>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	fa93 f3a3 	rbit	r3, r3
 8003b58:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003b64:	2320      	movs	r3, #32
 8003b66:	e003      	b.n	8003b70 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	6849      	ldr	r1, [r1, #4]
 8003b74:	f001 011f 	and.w	r1, r1, #31
 8003b78:	408b      	lsls	r3, r1
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d808      	bhi.n	8003ba2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f7ff fb0c 	bl	80031ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7ff fb49 	bl	8003246 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f280 8097 	bge.w	8003cec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bbe:	4851      	ldr	r0, [pc, #324]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003bc0:	f7ff fabe 	bl	8003140 <LL_ADC_GetCommonPathInternalCh>
 8003bc4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4f      	ldr	r2, [pc, #316]	; (8003d08 <HAL_ADC_ConfigChannel+0x25c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d120      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11b      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003be0:	4619      	mov	r1, r3
 8003be2:	4848      	ldr	r0, [pc, #288]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003be4:	f7ff fa9a 	bl	800311c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003be8:	4b48      	ldr	r3, [pc, #288]	; (8003d0c <HAL_ADC_ConfigChannel+0x260>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	4a48      	ldr	r2, [pc, #288]	; (8003d10 <HAL_ADC_ConfigChannel+0x264>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c02:	e002      	b.n	8003c0a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f9      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c10:	e06c      	b.n	8003cec <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <HAL_ADC_ConfigChannel+0x268>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d10c      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x18a>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4835      	ldr	r0, [pc, #212]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003c30:	f7ff fa74 	bl	800311c <LL_ADC_SetCommonPathInternalCh>
 8003c34:	e05a      	b.n	8003cec <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <HAL_ADC_ConfigChannel+0x26c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d155      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d150      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c50:	4619      	mov	r1, r3
 8003c52:	482c      	ldr	r0, [pc, #176]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003c54:	f7ff fa62 	bl	800311c <LL_ADC_SetCommonPathInternalCh>
 8003c58:	e048      	b.n	8003cec <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c62:	d004      	beq.n	8003c6e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c68:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <HAL_ADC_ConfigChannel+0x254>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d107      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4610      	mov	r0, r2
 8003c7a:	f7ff fad1 	bl	8003220 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da32      	bge.n	8003cec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c86:	481f      	ldr	r0, [pc, #124]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003c88:	f7ff fa5a 	bl	8003140 <LL_ADC_GetCommonPathInternalCh>
 8003c8c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_ADC_ConfigChannel+0x25c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d107      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4818      	ldr	r0, [pc, #96]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003ca2:	f7ff fa3b 	bl	800311c <LL_ADC_SetCommonPathInternalCh>
 8003ca6:	e021      	b.n	8003cec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_ADC_ConfigChannel+0x268>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d107      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4812      	ldr	r0, [pc, #72]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003cbc:	f7ff fa2e 	bl	800311c <LL_ADC_SetCommonPathInternalCh>
 8003cc0:	e014      	b.n	8003cec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <HAL_ADC_ConfigChannel+0x26c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10f      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	480b      	ldr	r0, [pc, #44]	; (8003d04 <HAL_ADC_ConfigChannel+0x258>)
 8003cd6:	f7ff fa21 	bl	800311c <LL_ADC_SetCommonPathInternalCh>
 8003cda:	e007      	b.n	8003cec <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	80000004 	.word	0x80000004
 8003d04:	40012708 	.word	0x40012708
 8003d08:	b0001000 	.word	0xb0001000
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	053e2d63 	.word	0x053e2d63
 8003d14:	b8004000 	.word	0xb8004000
 8003d18:	b4002000 	.word	0xb4002000

08003d1c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fb4f 	bl	80033cc <LL_ADC_REG_IsConversionOngoing>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d033      	beq.n	8003d9c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fb0f 	bl	800335c <LL_ADC_IsDisableOngoing>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fb2c 	bl	80033a6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d4e:	f7fe f971 	bl	8002034 <HAL_GetTick>
 8003d52:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d54:	e01b      	b.n	8003d8e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d56:	f7fe f96d 	bl	8002034 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d914      	bls.n	8003d8e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	f043 0210 	orr.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	f043 0201 	orr.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e007      	b.n	8003d9e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1dc      	bne.n	8003d56 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fabd 	bl	8003338 <LL_ADC_IsEnabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d169      	bne.n	8003e98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <ADC_Enable+0xfc>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e055      	b.n	8003e9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fa7a 	bl	80032ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003df8:	482b      	ldr	r0, [pc, #172]	; (8003ea8 <ADC_Enable+0x100>)
 8003dfa:	f7ff f9a1 	bl	8003140 <LL_ADC_GetCommonPathInternalCh>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00f      	beq.n	8003e28 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <ADC_Enable+0x104>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <ADC_Enable+0x108>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	3301      	adds	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e1a:	e002      	b.n	8003e22 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f9      	bne.n	8003e1c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7e5b      	ldrb	r3, [r3, #25]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d033      	beq.n	8003e98 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003e30:	f7fe f900 	bl	8002034 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e36:	e028      	b.n	8003e8a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fa7b 	bl	8003338 <LL_ADC_IsEnabled>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fa4d 	bl	80032ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e52:	f7fe f8ef 	bl	8002034 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d914      	bls.n	8003e8a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d00d      	beq.n	8003e8a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f043 0210 	orr.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e007      	b.n	8003e9a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d1cf      	bne.n	8003e38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	80000017 	.word	0x80000017
 8003ea8:	40012708 	.word	0x40012708
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	053e2d63 	.word	0x053e2d63

08003eb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fa4b 	bl	800335c <LL_ADC_IsDisableOngoing>
 8003ec6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fa33 	bl	8003338 <LL_ADC_IsEnabled>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d047      	beq.n	8003f68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d144      	bne.n	8003f68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0305 	and.w	r3, r3, #5
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10c      	bne.n	8003f06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff fa0e 	bl	8003312 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2203      	movs	r2, #3
 8003efc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003efe:	f7fe f899 	bl	8002034 <HAL_GetTick>
 8003f02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f04:	e029      	b.n	8003f5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f043 0210 	orr.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e023      	b.n	8003f6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f22:	f7fe f887 	bl	8002034 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d914      	bls.n	8003f5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f043 0210 	orr.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e007      	b.n	8003f6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1dc      	bne.n	8003f22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <LL_ADC_IsEnabled>:
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <LL_ADC_IsEnabled+0x18>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <LL_ADC_IsEnabled+0x1a>
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003faa:	d101      	bne.n	8003fb0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADCEx_Calibration_Start+0x1a>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e068      	b.n	80040a8 <HAL_ADCEx_Calibration_Start+0xec>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff ff68 	bl	8003eb4 <ADC_Disable>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ffc0 	bl	8003f72 <LL_ADC_IsEnabled>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d14c      	bne.n	8004092 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004000:	f043 0202 	orr.w	r2, r3, #2
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0203 	bic.w	r2, r2, #3
 8004022:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004032:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004034:	e014      	b.n	8004060 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3301      	adds	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004042:	d30d      	bcc.n	8004060 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f023 0312 	bic.w	r3, r3, #18
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e023      	b.n	80040a8 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff96 	bl	8003f96 <LL_ADC_IsCalibrationOnGoing>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e2      	bne.n	8004036 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68d9      	ldr	r1, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f023 0303 	bic.w	r3, r3, #3
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	659a      	str	r2, [r3, #88]	; 0x58
 8004090:	e005      	b.n	800409e <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	f043 0210 	orr.w	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040cc:	4013      	ands	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e2:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <__NVIC_SetPriorityGrouping+0x44>)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	60d3      	str	r3, [r2, #12]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <__NVIC_GetPriorityGrouping+0x18>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	f003 0307 	and.w	r3, r3, #7
}
 8004106:	4618      	mov	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	db0b      	blt.n	800413e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	4906      	ldr	r1, [pc, #24]	; (8004148 <__NVIC_EnableIRQ+0x34>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2001      	movs	r0, #1
 8004136:	fa00 f202 	lsl.w	r2, r0, r2
 800413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	e000e100 	.word	0xe000e100

0800414c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	db12      	blt.n	8004184 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	f003 021f 	and.w	r2, r3, #31
 8004164:	490a      	ldr	r1, [pc, #40]	; (8004190 <__NVIC_DisableIRQ+0x44>)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2001      	movs	r0, #1
 800416e:	fa00 f202 	lsl.w	r2, r0, r2
 8004172:	3320      	adds	r3, #32
 8004174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004178:	f3bf 8f4f 	dsb	sy
}
 800417c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800417e:	f3bf 8f6f 	isb	sy
}
 8004182:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000e100 	.word	0xe000e100

08004194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db0a      	blt.n	80041be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	490c      	ldr	r1, [pc, #48]	; (80041e0 <__NVIC_SetPriority+0x4c>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	440b      	add	r3, r1
 80041b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041bc:	e00a      	b.n	80041d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <__NVIC_SetPriority+0x50>)
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	3b04      	subs	r3, #4
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	440b      	add	r3, r1
 80041d2:	761a      	strb	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e100 	.word	0xe000e100
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f1c3 0307 	rsb	r3, r3, #7
 8004202:	2b04      	cmp	r3, #4
 8004204:	bf28      	it	cs
 8004206:	2304      	movcs	r3, #4
 8004208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3304      	adds	r3, #4
 800420e:	2b06      	cmp	r3, #6
 8004210:	d902      	bls.n	8004218 <NVIC_EncodePriority+0x30>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3b03      	subs	r3, #3
 8004216:	e000      	b.n	800421a <NVIC_EncodePriority+0x32>
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	401a      	ands	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004230:	f04f 31ff 	mov.w	r1, #4294967295
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	43d9      	mvns	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004240:	4313      	orrs	r3, r2
         );
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff2b 	bl	80040b0 <__NVIC_SetPriorityGrouping>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004270:	f7ff ff42 	bl	80040f8 <__NVIC_GetPriorityGrouping>
 8004274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7ff ffb4 	bl	80041e8 <NVIC_EncodePriority>
 8004280:	4602      	mov	r2, r0
 8004282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff83 	bl	8004194 <__NVIC_SetPriority>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff35 	bl	8004114 <__NVIC_EnableIRQ>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff43 	bl	800414c <__NVIC_DisableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e08e      	b.n	8004400 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_DMA_Init+0x138>)
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d80f      	bhi.n	800430e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_DMA_Init+0x13c>)
 80042f6:	4413      	add	r3, r2
 80042f8:	4a45      	ldr	r2, [pc, #276]	; (8004410 <HAL_DMA_Init+0x140>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a42      	ldr	r2, [pc, #264]	; (8004414 <HAL_DMA_Init+0x144>)
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
 800430c:	e00e      	b.n	800432c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_DMA_Init+0x148>)
 8004316:	4413      	add	r3, r2
 8004318:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <HAL_DMA_Init+0x140>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a3c      	ldr	r2, [pc, #240]	; (800441c <HAL_DMA_Init+0x14c>)
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fb24 	bl	80049cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438c:	d102      	bne.n	8004394 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043a0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043aa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_DMA_Init+0x106>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d80c      	bhi.n	80043d6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fb4d 	bl	8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	e008      	b.n	80043e8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40020407 	.word	0x40020407
 800440c:	bffdfff8 	.word	0xbffdfff8
 8004410:	cccccccd 	.word	0xcccccccd
 8004414:	40020000 	.word	0x40020000
 8004418:	bffdfbf8 	.word	0xbffdfbf8
 800441c:	40020400 	.word	0x40020400

08004420 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07b      	b.n	800452a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_DMA_DeInit+0x114>)
 800444a:	429a      	cmp	r2, r3
 800444c:	d80f      	bhi.n	800446e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	4b38      	ldr	r3, [pc, #224]	; (8004538 <HAL_DMA_DeInit+0x118>)
 8004456:	4413      	add	r3, r2
 8004458:	4a38      	ldr	r2, [pc, #224]	; (800453c <HAL_DMA_DeInit+0x11c>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	009a      	lsls	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a35      	ldr	r2, [pc, #212]	; (8004540 <HAL_DMA_DeInit+0x120>)
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
 800446c:	e00e      	b.n	800448c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_DMA_DeInit+0x124>)
 8004476:	4413      	add	r3, r2
 8004478:	4a30      	ldr	r2, [pc, #192]	; (800453c <HAL_DMA_DeInit+0x11c>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	009a      	lsls	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <HAL_DMA_DeInit+0x128>)
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	f003 021c 	and.w	r2, r3, #28
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f202 	lsl.w	r2, r1, r2
 80044a6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa8f 	bl	80049cc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044be:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00f      	beq.n	80044e8 <HAL_DMA_DeInit+0xc8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d80b      	bhi.n	80044e8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fac3 	bl	8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044e6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40020407 	.word	0x40020407
 8004538:	bffdfff8 	.word	0xbffdfff8
 800453c:	cccccccd 	.word	0xcccccccd
 8004540:	40020000 	.word	0x40020000
 8004544:	bffdfbf8 	.word	0xbffdfbf8
 8004548:	40020400 	.word	0x40020400

0800454c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004564:	2b01      	cmp	r3, #1
 8004566:	d101      	bne.n	800456c <HAL_DMA_Start_IT+0x20>
 8004568:	2302      	movs	r3, #2
 800456a:	e069      	b.n	8004640 <HAL_DMA_Start_IT+0xf4>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d155      	bne.n	800462c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f9d3 	bl	8004950 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 020e 	orr.w	r2, r2, #14
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e00f      	b.n	80045e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 020a 	orr.w	r2, r2, #10
 80045e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004600:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004618:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e008      	b.n	800463e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2280      	movs	r2, #128	; 0x80
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800463e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e04f      	b.n	80046fa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d008      	beq.n	8004678 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2204      	movs	r2, #4
 800466a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e040      	b.n	80046fa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 020e 	bic.w	r2, r2, #14
 8004686:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004696:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	f003 021c 	and.w	r2, r3, #28
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d005      	beq.n	8004728 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2204      	movs	r2, #4
 8004720:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e047      	b.n	80047b8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 020e 	bic.w	r2, r2, #14
 8004736:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f003 021c 	and.w	r2, r3, #28
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f202 	lsl.w	r2, r1, r2
 800476a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004774:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004796:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
    }
  }
  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	f003 031c 	and.w	r3, r3, #28
 80047e4:	2204      	movs	r2, #4
 80047e6:	409a      	lsls	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d027      	beq.n	8004840 <HAL_DMA_IRQHandler+0x7c>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0304 	and.w	r3, r3, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d022      	beq.n	8004840 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0204 	bic.w	r2, r2, #4
 8004816:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	f003 021c 	and.w	r2, r3, #28
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	2104      	movs	r1, #4
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8081 	beq.w	8004938 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800483e:	e07b      	b.n	8004938 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f003 031c 	and.w	r3, r3, #28
 8004848:	2202      	movs	r2, #2
 800484a:	409a      	lsls	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d03d      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x10c>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d038      	beq.n	80048d0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 020a 	bic.w	r2, r2, #10
 800487a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_DMA_IRQHandler+0x180>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d909      	bls.n	80048a4 <HAL_DMA_IRQHandler+0xe0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	f003 031c 	and.w	r3, r3, #28
 8004898:	4a2b      	ldr	r2, [pc, #172]	; (8004948 <HAL_DMA_IRQHandler+0x184>)
 800489a:	2102      	movs	r1, #2
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	6053      	str	r3, [r2, #4]
 80048a2:	e008      	b.n	80048b6 <HAL_DMA_IRQHandler+0xf2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f003 031c 	and.w	r3, r3, #28
 80048ac:	4a27      	ldr	r2, [pc, #156]	; (800494c <HAL_DMA_IRQHandler+0x188>)
 80048ae:	2102      	movs	r1, #2
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d038      	beq.n	8004938 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80048ce:	e033      	b.n	8004938 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	f003 031c 	and.w	r3, r3, #28
 80048d8:	2208      	movs	r2, #8
 80048da:	409a      	lsls	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02a      	beq.n	800493a <HAL_DMA_IRQHandler+0x176>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d025      	beq.n	800493a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 020e 	bic.w	r2, r2, #14
 80048fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	f003 021c 	and.w	r2, r3, #28
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2101      	movs	r1, #1
 800490c:	fa01 f202 	lsl.w	r2, r1, r2
 8004910:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	2b00      	cmp	r3, #0
 800492e:	d004      	beq.n	800493a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004938:	bf00      	nop
 800493a:	bf00      	nop
}
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40020080 	.word	0x40020080
 8004948:	40020400 	.word	0x40020400
 800494c:	40020000 	.word	0x40020000

08004950 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004966:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f003 021c 	and.w	r2, r3, #28
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f202 	lsl.w	r2, r1, r2
 800498c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b10      	cmp	r3, #16
 800499c:	d108      	bne.n	80049b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ae:	e007      	b.n	80049c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
	...

080049cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80049dc:	429a      	cmp	r2, r3
 80049de:	d813      	bhi.n	8004a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	3b08      	subs	r3, #8
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e011      	b.n	8004a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	009a      	lsls	r2, r3, #2
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004a12:	4413      	add	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	3b08      	subs	r3, #8
 8004a20:	4a0b      	ldr	r2, [pc, #44]	; (8004a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	3307      	adds	r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004a30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40020407 	.word	0x40020407
 8004a50:	cccccccd 	.word	0xcccccccd
 8004a54:	4002081c 	.word	0x4002081c
 8004a58:	40020880 	.word	0x40020880

08004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	1000823f 	.word	0x1000823f
 8004aa0:	40020940 	.word	0x40020940

08004aa4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	460b      	mov	r3, r1
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d103      	bne.n	8004ac4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac8:	bf00      	nop
  }

  return status;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e003      	b.n	8004af2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b0a:	e140      	b.n	8004d8e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8132 	beq.w	8004d88 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d005      	beq.n	8004b3c <HAL_GPIO_Init+0x40>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d130      	bne.n	8004b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	2203      	movs	r2, #3
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4013      	ands	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b72:	2201      	movs	r2, #1
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 0201 	and.w	r2, r3, #1
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d017      	beq.n	8004bda <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d123      	bne.n	8004c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	08da      	lsrs	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3208      	adds	r2, #8
 8004bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	220f      	movs	r2, #15
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	08da      	lsrs	r2, r3, #3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3208      	adds	r2, #8
 8004c28:	6939      	ldr	r1, [r7, #16]
 8004c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	2203      	movs	r2, #3
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0203 	and.w	r2, r3, #3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 808c 	beq.w	8004d88 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c70:	4a4e      	ldr	r2, [pc, #312]	; (8004dac <HAL_GPIO_Init+0x2b0>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	3302      	adds	r3, #2
 8004c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	2207      	movs	r2, #7
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c9a:	d00d      	beq.n	8004cb8 <HAL_GPIO_Init+0x1bc>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a44      	ldr	r2, [pc, #272]	; (8004db0 <HAL_GPIO_Init+0x2b4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <HAL_GPIO_Init+0x1b8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a43      	ldr	r2, [pc, #268]	; (8004db4 <HAL_GPIO_Init+0x2b8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_GPIO_Init+0x1b4>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e004      	b.n	8004cba <HAL_GPIO_Init+0x1be>
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	e002      	b.n	8004cba <HAL_GPIO_Init+0x1be>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_GPIO_Init+0x1be>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	f002 0203 	and.w	r2, r2, #3
 8004cc0:	0092      	lsls	r2, r2, #2
 8004cc2:	4093      	lsls	r3, r2
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cca:	4938      	ldr	r1, [pc, #224]	; (8004dac <HAL_GPIO_Init+0x2b0>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004cd8:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cde:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004cfe:	4a2e      	ldr	r2, [pc, #184]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004d06:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004d2c:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d58:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d82:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <HAL_GPIO_Init+0x2bc>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f aeb7 	bne.w	8004b0c <HAL_GPIO_Init+0x10>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40010000 	.word	0x40010000
 8004db0:	48000400 	.word	0x48000400
 8004db4:	48000800 	.word	0x48000800
 8004db8:	58000800 	.word	0x58000800

08004dbc <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004dca:	e0af      	b.n	8004f2c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004dcc:	2201      	movs	r2, #1
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80a2 	beq.w	8004f26 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004de2:	4a59      	ldr	r2, [pc, #356]	; (8004f48 <HAL_GPIO_DeInit+0x18c>)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	3302      	adds	r3, #2
 8004dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	2207      	movs	r2, #7
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e0a:	d00d      	beq.n	8004e28 <HAL_GPIO_DeInit+0x6c>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a4f      	ldr	r2, [pc, #316]	; (8004f4c <HAL_GPIO_DeInit+0x190>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <HAL_GPIO_DeInit+0x68>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a4e      	ldr	r2, [pc, #312]	; (8004f50 <HAL_GPIO_DeInit+0x194>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_GPIO_DeInit+0x64>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e004      	b.n	8004e2a <HAL_GPIO_DeInit+0x6e>
 8004e20:	2307      	movs	r3, #7
 8004e22:	e002      	b.n	8004e2a <HAL_GPIO_DeInit+0x6e>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <HAL_GPIO_DeInit+0x6e>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	f002 0203 	and.w	r2, r2, #3
 8004e30:	0092      	lsls	r2, r2, #2
 8004e32:	4093      	lsls	r3, r2
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d136      	bne.n	8004ea8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	4943      	ldr	r1, [pc, #268]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004e4c:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	493f      	ldr	r1, [pc, #252]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	493b      	ldr	r1, [pc, #236]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	4937      	ldr	r1, [pc, #220]	; (8004f54 <HAL_GPIO_DeInit+0x198>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	2207      	movs	r2, #7
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	; (8004f48 <HAL_GPIO_DeInit+0x18c>)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	3302      	adds	r3, #2
 8004e92:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	482b      	ldr	r0, [pc, #172]	; (8004f48 <HAL_GPIO_DeInit+0x18c>)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	08da      	lsrs	r2, r3, #3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3208      	adds	r2, #8
 8004ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	08d2      	lsrs	r2, r2, #3
 8004edc:	4019      	ands	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3208      	adds	r2, #8
 8004ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	2103      	movs	r1, #3
 8004ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	2101      	movs	r1, #1
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	2103      	movs	r1, #3
 8004f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	401a      	ands	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f af49 	bne.w	8004dcc <HAL_GPIO_DeInit+0x10>
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	48000400 	.word	0x48000400
 8004f50:	48000800 	.word	0x48000800
 8004f54:	58000800 	.word	0x58000800

08004f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
 8004f64:	4613      	mov	r3, r2
 8004f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f68:	787b      	ldrb	r3, [r7, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f74:	e002      	b.n	8004f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f98:	887a      	ldrh	r2, [r7, #2]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	041a      	lsls	r2, r3, #16
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	43d9      	mvns	r1, r3
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	400b      	ands	r3, r1
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	619a      	str	r2, [r3, #24]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fce:	4a05      	ldr	r2, [pc, #20]	; (8004fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f005 fbf6 	bl	800a7c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	58000800 	.word	0x58000800

08004fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e081      	b.n	80050fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fc08 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2224      	movs	r2, #36	; 0x24
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d107      	bne.n	8005062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	e006      	b.n	8005070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800506e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d104      	bne.n	8005082 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005080:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005094:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69d9      	ldr	r1, [r3, #28]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	461a      	mov	r2, r3
 8005114:	460b      	mov	r3, r1
 8005116:	817b      	strh	r3, [r7, #10]
 8005118:	4613      	mov	r3, r2
 800511a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	f040 80da 	bne.w	80052de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_I2C_Master_Transmit+0x30>
 8005134:	2302      	movs	r3, #2
 8005136:	e0d3      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1d8>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005140:	f7fc ff78 	bl	8002034 <HAL_GetTick>
 8005144:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	2319      	movs	r3, #25
 800514c:	2201      	movs	r2, #1
 800514e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f9e5 	bl	8005522 <I2C_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0be      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2221      	movs	r2, #33	; 0x21
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2210      	movs	r2, #16
 800516e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	893a      	ldrh	r2, [r7, #8]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	2bff      	cmp	r3, #255	; 0xff
 8005192:	d90e      	bls.n	80051b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	8979      	ldrh	r1, [r7, #10]
 80051a2:	4b51      	ldr	r3, [pc, #324]	; (80052e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fb58 	bl	8005860 <I2C_TransferConfig>
 80051b0:	e06c      	b.n	800528c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	8979      	ldrh	r1, [r7, #10]
 80051c4:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fb47 	bl	8005860 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051d2:	e05b      	b.n	800528c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f9e2 	bl	80055a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e07b      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	781a      	ldrb	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d034      	beq.n	800528c <HAL_I2C_Master_Transmit+0x184>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d130      	bne.n	800528c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	2200      	movs	r2, #0
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f974 	bl	8005522 <I2C_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e04d      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2bff      	cmp	r3, #255	; 0xff
 800524c:	d90e      	bls.n	800526c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	b2da      	uxtb	r2, r3
 800525a:	8979      	ldrh	r1, [r7, #10]
 800525c:	2300      	movs	r3, #0
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fafb 	bl	8005860 <I2C_TransferConfig>
 800526a:	e00f      	b.n	800528c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	b2da      	uxtb	r2, r3
 800527c:	8979      	ldrh	r1, [r7, #10]
 800527e:	2300      	movs	r3, #0
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 faea 	bl	8005860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d19e      	bne.n	80051d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f9c1 	bl	8005622 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e01a      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2220      	movs	r2, #32
 80052b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_I2C_Master_Transmit+0x1e4>)
 80052be:	400b      	ands	r3, r1
 80052c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	80002000 	.word	0x80002000
 80052ec:	fe00e800 	.word	0xfe00e800

080052f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	461a      	mov	r2, r3
 80052fc:	460b      	mov	r3, r1
 80052fe:	817b      	strh	r3, [r7, #10]
 8005300:	4613      	mov	r3, r2
 8005302:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b20      	cmp	r3, #32
 800530e:	f040 80db 	bne.w	80054c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_I2C_Master_Receive+0x30>
 800531c:	2302      	movs	r3, #2
 800531e:	e0d4      	b.n	80054ca <HAL_I2C_Master_Receive+0x1da>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005328:	f7fc fe84 	bl	8002034 <HAL_GetTick>
 800532c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2319      	movs	r3, #25
 8005334:	2201      	movs	r2, #1
 8005336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f8f1 	bl	8005522 <I2C_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0bf      	b.n	80054ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2222      	movs	r2, #34	; 0x22
 800534e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2210      	movs	r2, #16
 8005356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	893a      	ldrh	r2, [r7, #8]
 800536a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	2bff      	cmp	r3, #255	; 0xff
 800537a:	d90e      	bls.n	800539a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	22ff      	movs	r2, #255	; 0xff
 8005380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	b2da      	uxtb	r2, r3
 8005388:	8979      	ldrh	r1, [r7, #10]
 800538a:	4b52      	ldr	r3, [pc, #328]	; (80054d4 <HAL_I2C_Master_Receive+0x1e4>)
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa64 	bl	8005860 <I2C_TransferConfig>
 8005398:	e06d      	b.n	8005476 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	8979      	ldrh	r1, [r7, #10]
 80053ac:	4b49      	ldr	r3, [pc, #292]	; (80054d4 <HAL_I2C_Master_Receive+0x1e4>)
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fa53 	bl	8005860 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80053ba:	e05c      	b.n	8005476 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	6a39      	ldr	r1, [r7, #32]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f96b 	bl	800569c <I2C_WaitOnRXNEFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e07c      	b.n	80054ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d034      	beq.n	8005476 <HAL_I2C_Master_Receive+0x186>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	2b00      	cmp	r3, #0
 8005412:	d130      	bne.n	8005476 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	2200      	movs	r2, #0
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f87f 	bl	8005522 <I2C_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e04d      	b.n	80054ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2bff      	cmp	r3, #255	; 0xff
 8005436:	d90e      	bls.n	8005456 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	b2da      	uxtb	r2, r3
 8005444:	8979      	ldrh	r1, [r7, #10]
 8005446:	2300      	movs	r3, #0
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fa06 	bl	8005860 <I2C_TransferConfig>
 8005454:	e00f      	b.n	8005476 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	b2da      	uxtb	r2, r3
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f9f5 	bl	8005860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d19d      	bne.n	80053bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	6a39      	ldr	r1, [r7, #32]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f8cc 	bl	8005622 <I2C_WaitOnSTOPFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e01a      	b.n	80054ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2220      	movs	r2, #32
 800549a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6859      	ldr	r1, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <HAL_I2C_Master_Receive+0x1e8>)
 80054a8:	400b      	ands	r3, r1
 80054aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	80002400 	.word	0x80002400
 80054d8:	fe00e800 	.word	0xfe00e800

080054dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d103      	bne.n	80054fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2200      	movs	r2, #0
 80054f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d007      	beq.n	8005518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	619a      	str	r2, [r3, #24]
  }
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005532:	e022      	b.n	800557a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d01e      	beq.n	800557a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553c:	f7fc fd7a 	bl	8002034 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d302      	bcc.n	8005552 <I2C_WaitOnFlagUntilTimeout+0x30>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d113      	bne.n	800557a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e00f      	b.n	800559a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4013      	ands	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	429a      	cmp	r2, r3
 8005596:	d0cd      	beq.n	8005534 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055ae:	e02c      	b.n	800560a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f8dd 	bl	8005774 <I2C_IsAcknowledgeFailed>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e02a      	b.n	800561a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d01e      	beq.n	800560a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055cc:	f7fc fd32 	bl	8002034 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e007      	b.n	800561a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d1cb      	bne.n	80055b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800562e:	e028      	b.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f89d 	bl	8005774 <I2C_IsAcknowledgeFailed>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e026      	b.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005644:	f7fc fcf6 	bl	8002034 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	d302      	bcc.n	800565a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d113      	bne.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d1cf      	bne.n	8005630 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056a8:	e055      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f860 	bl	8005774 <I2C_IsAcknowledgeFailed>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e053      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d129      	bne.n	8005720 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d105      	bne.n	80056e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e03f      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2220      	movs	r2, #32
 80056ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e022      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005720:	f7fc fc88 	bl	8002034 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e007      	b.n	8005766 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b04      	cmp	r3, #4
 8005762:	d1a2      	bne.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	fe00e800 	.word	0xfe00e800

08005774 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d161      	bne.n	8005852 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800579c:	d02b      	beq.n	80057f6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ac:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057ae:	e022      	b.n	80057f6 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d01e      	beq.n	80057f6 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b8:	f7fc fc3c 	bl	8002034 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <I2C_IsAcknowledgeFailed+0x5a>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d113      	bne.n	80057f6 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	f043 0220 	orr.w	r2, r3, #32
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e02e      	b.n	8005854 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b20      	cmp	r3, #32
 8005802:	d1d5      	bne.n	80057b0 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2210      	movs	r2, #16
 800580a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2220      	movs	r2, #32
 8005812:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff fe61 	bl	80054dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b0d      	ldr	r3, [pc, #52]	; (800585c <I2C_IsAcknowledgeFailed+0xe8>)
 8005826:	400b      	ands	r3, r1
 8005828:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	f043 0204 	orr.w	r2, r3, #4
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	fe00e800 	.word	0xfe00e800

08005860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	4613      	mov	r3, r2
 8005870:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	0d5b      	lsrs	r3, r3, #21
 800587c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <I2C_TransferConfig+0x54>)
 8005882:	430b      	orrs	r3, r1
 8005884:	43db      	mvns	r3, r3
 8005886:	ea02 0103 	and.w	r1, r2, r3
 800588a:	897b      	ldrh	r3, [r7, #10]
 800588c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005890:	7a7b      	ldrb	r3, [r7, #9]
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	431a      	orrs	r2, r3
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr
 80058b4:	03ff63ff 	.word	0x03ff63ff

080058b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d138      	bne.n	8005940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058d8:	2302      	movs	r3, #2
 80058da:	e032      	b.n	8005942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2224      	movs	r2, #36	; 0x24
 80058e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800590a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr

0800594c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b20      	cmp	r3, #32
 8005960:	d139      	bne.n	80059d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800596c:	2302      	movs	r3, #2
 800596e:	e033      	b.n	80059d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800599e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
	...

080059e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a03      	ldr	r2, [pc, #12]	; (80059fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80059ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f2:	6013      	str	r3, [r2, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr
 80059fc:	58000400 	.word	0x58000400

08005a00 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1e:	d10d      	bne.n	8005a3c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005a20:	f000 f83c 	bl	8005a9c <HAL_PWREx_DisableLowPowerRunMode>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005a2a:	e015      	b.n	8005a58 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005a38:	f000 f822 	bl	8005a80 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005a42:	f023 0304 	bic.w	r3, r3, #4
 8005a46:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005a4e:	bf30      	wfi
 8005a50:	e002      	b.n	8005a58 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a52:	bf40      	sev
    __WFE();
 8005a54:	bf20      	wfe
    __WFE();
 8005a56:	bf20      	wfe
  }
}
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	58000400 	.word	0x58000400
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <HAL_PWREx_GetVoltageRange+0x14>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	58000400 	.word	0x58000400

08005a80 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a8e:	6013      	str	r3, [r2, #0]
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	58000400 	.word	0x58000400

08005a9c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a15      	ldr	r2, [pc, #84]	; (8005afc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aac:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2232      	movs	r2, #50	; 0x32
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0c9b      	lsrs	r3, r3, #18
 8005ac0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005ac2:	e002      	b.n	8005aca <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005aca:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad6:	d102      	bne.n	8005ade <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f2      	bne.n	8005ac4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005ade:	4b07      	ldr	r3, [pc, #28]	; (8005afc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aea:	d101      	bne.n	8005af0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e000      	b.n	8005af2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	58000400 	.word	0x58000400
 8005b00:	20000000 	.word	0x20000000
 8005b04:	431bde83 	.word	0x431bde83

08005b08 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005b1c:	f043 0302 	orr.w	r3, r3, #2
 8005b20:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b22:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b28:	f043 0304 	orr.w	r3, r3, #4
 8005b2c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005b34:	bf30      	wfi
 8005b36:	e002      	b.n	8005b3e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005b38:	bf40      	sev
    __WFE();
 8005b3a:	bf20      	wfe
    __WFE();
 8005b3c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005b3e:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	4a05      	ldr	r2, [pc, #20]	; (8005b58 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	6113      	str	r3, [r2, #16]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr
 8005b54:	58000400 	.word	0x58000400
 8005b58:	e000ed00 	.word	0xe000ed00

08005b5c <LL_PWR_IsEnabledBkUpAccess>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6c:	d101      	bne.n	8005b72 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	58000400 	.word	0x58000400

08005b80 <LL_RCC_HSE_EnableTcxo>:
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <LL_RCC_HSE_DisableTcxo>:
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bae:	6013      	str	r3, [r2, #0]
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bca:	d101      	bne.n	8005bd0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_HSE_Enable>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_HSE_Disable>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_HSE_IsReady>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c24:	d101      	bne.n	8005c2a <LL_RCC_HSE_IsReady+0x18>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <LL_RCC_HSE_IsReady+0x1a>
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <LL_RCC_HSI_Enable>:
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <LL_RCC_HSI_Disable>:
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_HSI_IsReady>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7e:	d101      	bne.n	8005c84 <LL_RCC_HSI_IsReady+0x18>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <LL_RCC_HSI_IsReady+0x1a>
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <LL_RCC_LSE_IsReady>:
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d101      	bne.n	8005cce <LL_RCC_LSE_IsReady+0x18>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <LL_RCC_LSE_IsReady+0x1a>
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <LL_RCC_LSI_Enable>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_LSI_Disable>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bc80      	pop	{r7}
 8005d16:	4770      	bx	lr

08005d18 <LL_RCC_LSI_IsReady>:
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d101      	bne.n	8005d30 <LL_RCC_LSI_IsReady+0x18>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <LL_RCC_LSI_IsReady+0x1a>
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr

08005d3a <LL_RCC_MSI_Enable>:
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6013      	str	r3, [r2, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <LL_RCC_MSI_Disable>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d64:	f023 0301 	bic.w	r3, r3, #1
 8005d68:	6013      	str	r3, [r2, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <LL_RCC_MSI_IsReady>:
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d101      	bne.n	8005d88 <LL_RCC_MSI_IsReady+0x16>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <LL_RCC_MSI_IsReady+0x18>
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d101      	bne.n	8005da8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <LL_RCC_MSI_GetRange>:
{
 8005db2:	b480      	push	{r7}
 8005db4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_SetSysClkSource>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f023 0203 	bic.w	r2, r3, #3
 8005e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <LL_RCC_GetSysClkSource>:
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 030c 	and.w	r3, r3, #12
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <LL_RCC_SetAHBPrescaler>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <LL_RCC_SetAHB3Prescaler>:
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e7a:	f023 020f 	bic.w	r2, r3, #15
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <LL_RCC_SetAPB1Prescaler>:
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr

08005ebc <LL_RCC_SetAPB2Prescaler>:
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	608b      	str	r3, [r1, #8]
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bc80      	pop	{r7}
 8005ee0:	4770      	bx	lr

08005ee2 <LL_RCC_GetAHBPrescaler>:
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <LL_RCC_GetAHB3Prescaler>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <LL_RCC_GetAPB1Prescaler>:
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr

08005f28 <LL_RCC_GetAPB2Prescaler>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f50:	6013      	str	r3, [r2, #0]
}
 8005f52:	bf00      	nop
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	6013      	str	r3, [r2, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f76:	b480      	push	{r7}
 8005f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f88:	d101      	bne.n	8005f8e <LL_RCC_PLL_IsReady+0x18>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <LL_RCC_PLL_IsReady+0x1a>
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	0a1b      	lsrs	r3, r3, #8
 8005fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bc80      	pop	{r7}
 8005fda:	4770      	bx	lr

08005fdc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d101      	bne.n	800600a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006028:	d101      	bne.n	800602e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800603c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800604a:	d101      	bne.n	8006050 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800605a:	b480      	push	{r7}
 800605c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800606c:	d101      	bne.n	8006072 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e38a      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608e:	f7ff fece 	bl	8005e2e <LL_RCC_GetSysClkSource>
 8006092:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006094:	f7ff ffa2 	bl	8005fdc <LL_RCC_PLL_GetMainSource>
 8006098:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 80c9 	beq.w	800623a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_RCC_OscConfig+0x3e>
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b0c      	cmp	r3, #12
 80060b2:	d17b      	bne.n	80061ac <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d178      	bne.n	80061ac <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060ba:	f7ff fe5a 	bl	8005d72 <LL_RCC_MSI_IsReady>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_RCC_OscConfig+0x54>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e369      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_RCC_OscConfig+0x72>
 80060e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ec:	e006      	b.n	80060fc <HAL_RCC_OscConfig+0x80>
 80060ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d222      	bcs.n	8006146 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fd4f 	bl	8006ba8 <RCC_SetFlashLatencyFromMSIRange>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e347      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800611e:	f043 0308 	orr.w	r3, r3, #8
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fe4e 	bl	8005de0 <LL_RCC_MSI_SetCalibTrimming>
 8006144:	e021      	b.n	800618a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006150:	f043 0308 	orr.w	r3, r3, #8
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006168:	4313      	orrs	r3, r2
 800616a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fe35 	bl	8005de0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fd14 	bl	8006ba8 <RCC_SetFlashLatencyFromMSIRange>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e30c      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800618a:	f000 fcd5 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 800618e:	4603      	mov	r3, r0
 8006190:	4ab4      	ldr	r2, [pc, #720]	; (8006464 <HAL_RCC_OscConfig+0x3e8>)
 8006192:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006194:	4bb4      	ldr	r3, [pc, #720]	; (8006468 <HAL_RCC_OscConfig+0x3ec>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7fb ff41 	bl	8002020 <HAL_InitTick>
 800619e:	4603      	mov	r3, r0
 80061a0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d047      	beq.n	8006238 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	e2fb      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d02c      	beq.n	800620e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80061b4:	f7ff fdc1 	bl	8005d3a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061b8:	f7fb ff3c 	bl	8002034 <HAL_GetTick>
 80061bc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061c0:	f7fb ff38 	bl	8002034 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e2e8      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80061d2:	f7ff fdce 	bl	8005d72 <LL_RCC_MSI_IsReady>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f1      	beq.n	80061c0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e6:	f043 0308 	orr.w	r3, r3, #8
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	4618      	mov	r0, r3
 8006208:	f7ff fdea 	bl	8005de0 <LL_RCC_MSI_SetCalibTrimming>
 800620c:	e015      	b.n	800623a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800620e:	f7ff fda2 	bl	8005d56 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006212:	f7fb ff0f 	bl	8002034 <HAL_GetTick>
 8006216:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800621a:	f7fb ff0b 	bl	8002034 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e2bb      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 800622c:	f7ff fda1 	bl	8005d72 <LL_RCC_MSI_IsReady>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f1      	bne.n	800621a <HAL_RCC_OscConfig+0x19e>
 8006236:	e000      	b.n	800623a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006238:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d05f      	beq.n	8006306 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d005      	beq.n	8006258 <HAL_RCC_OscConfig+0x1dc>
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d10d      	bne.n	800626e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d10a      	bne.n	800626e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006258:	f7ff fcdb 	bl	8005c12 <LL_RCC_HSE_IsReady>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d050      	beq.n	8006304 <HAL_RCC_OscConfig+0x288>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14c      	bne.n	8006304 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e29a      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800626e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006280:	4313      	orrs	r3, r2
 8006282:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628c:	d102      	bne.n	8006294 <HAL_RCC_OscConfig+0x218>
 800628e:	f7ff fca4 	bl	8005bda <LL_RCC_HSE_Enable>
 8006292:	e00d      	b.n	80062b0 <HAL_RCC_OscConfig+0x234>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800629c:	d104      	bne.n	80062a8 <HAL_RCC_OscConfig+0x22c>
 800629e:	f7ff fc6f 	bl	8005b80 <LL_RCC_HSE_EnableTcxo>
 80062a2:	f7ff fc9a 	bl	8005bda <LL_RCC_HSE_Enable>
 80062a6:	e003      	b.n	80062b0 <HAL_RCC_OscConfig+0x234>
 80062a8:	f7ff fca5 	bl	8005bf6 <LL_RCC_HSE_Disable>
 80062ac:	f7ff fc76 	bl	8005b9c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d012      	beq.n	80062de <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fb febc 	bl	8002034 <HAL_GetTick>
 80062bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fb feb8 	bl	8002034 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e268      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80062d2:	f7ff fc9e 	bl	8005c12 <LL_RCC_HSE_IsReady>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f1      	beq.n	80062c0 <HAL_RCC_OscConfig+0x244>
 80062dc:	e013      	b.n	8006306 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fb fea9 	bl	8002034 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e6:	f7fb fea5 	bl	8002034 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b64      	cmp	r3, #100	; 0x64
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e255      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80062f8:	f7ff fc8b 	bl	8005c12 <LL_RCC_HSE_IsReady>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f1      	bne.n	80062e6 <HAL_RCC_OscConfig+0x26a>
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006304:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d04b      	beq.n	80063aa <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	2b04      	cmp	r3, #4
 8006316:	d005      	beq.n	8006324 <HAL_RCC_OscConfig+0x2a8>
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b0c      	cmp	r3, #12
 800631c:	d113      	bne.n	8006346 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d110      	bne.n	8006346 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006324:	f7ff fca2 	bl	8005c6c <LL_RCC_HSI_IsReady>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_RCC_OscConfig+0x2be>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e234      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fca5 	bl	8005c8e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006344:	e031      	b.n	80063aa <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d019      	beq.n	8006382 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800634e:	f7ff fc71 	bl	8005c34 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006352:	f7fb fe6f 	bl	8002034 <HAL_GetTick>
 8006356:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800635a:	f7fb fe6b 	bl	8002034 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e21b      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 800636c:	f7ff fc7e 	bl	8005c6c <LL_RCC_HSI_IsReady>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f1      	beq.n	800635a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fc87 	bl	8005c8e <LL_RCC_HSI_SetCalibTrimming>
 8006380:	e013      	b.n	80063aa <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006382:	f7ff fc65 	bl	8005c50 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fb fe55 	bl	8002034 <HAL_GetTick>
 800638a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800638e:	f7fb fe51 	bl	8002034 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e201      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80063a0:	f7ff fc64 	bl	8005c6c <LL_RCC_HSI_IsReady>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f1      	bne.n	800638e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d06e      	beq.n	8006494 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d056      	beq.n	800646c <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d031      	beq.n	800643a <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e1da      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d013      	beq.n	8006420 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80063f8:	f7ff fc7e 	bl	8005cf8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063fc:	f7fb fe1a 	bl	8002034 <HAL_GetTick>
 8006400:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006404:	f7fb fe16 	bl	8002034 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b11      	cmp	r3, #17
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e1c6      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006416:	f7ff fc7f 	bl	8005d18 <LL_RCC_LSI_IsReady>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1f1      	bne.n	8006404 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006428:	f023 0210 	bic.w	r2, r3, #16
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800643a:	f7ff fc4d 	bl	8005cd8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800643e:	f7fb fdf9 	bl	8002034 <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006446:	f7fb fdf5 	bl	8002034 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b11      	cmp	r3, #17
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e1a5      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006458:	f7ff fc5e 	bl	8005d18 <LL_RCC_LSI_IsReady>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f1      	beq.n	8006446 <HAL_RCC_OscConfig+0x3ca>
 8006462:	e017      	b.n	8006494 <HAL_RCC_OscConfig+0x418>
 8006464:	20000000 	.word	0x20000000
 8006468:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800646c:	f7ff fc44 	bl	8005cf8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fb fde0 	bl	8002034 <HAL_GetTick>
 8006474:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006478:	f7fb fddc 	bl	8002034 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b11      	cmp	r3, #17
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e18c      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800648a:	f7ff fc45 	bl	8005d18 <LL_RCC_LSI_IsReady>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1f1      	bne.n	8006478 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80d8 	beq.w	8006652 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064a2:	f7ff fb5b 	bl	8005b5c <LL_PWR_IsEnabledBkUpAccess>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d113      	bne.n	80064d4 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80064ac:	f7ff fa9a 	bl	80059e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b0:	f7fb fdc0 	bl	8002034 <HAL_GetTick>
 80064b4:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b8:	f7fb fdbc 	bl	8002034 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e16c      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80064ca:	f7ff fb47 	bl	8005b5c <LL_PWR_IsEnabledBkUpAccess>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f1      	beq.n	80064b8 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d07b      	beq.n	80065d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b85      	cmp	r3, #133	; 0x85
 80064e2:	d003      	beq.n	80064ec <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	2b05      	cmp	r3, #5
 80064ea:	d109      	bne.n	8006500 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80064ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f8:	f043 0304 	orr.w	r3, r3, #4
 80064fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006500:	f7fb fd98 	bl	8002034 <HAL_GetTick>
 8006504:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800651a:	e00a      	b.n	8006532 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651c:	f7fb fd8a 	bl	8002034 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e138      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006532:	f7ff fbc0 	bl	8005cb6 <LL_RCC_LSE_IsReady>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0ef      	beq.n	800651c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b81      	cmp	r3, #129	; 0x81
 8006542:	d003      	beq.n	800654c <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b85      	cmp	r3, #133	; 0x85
 800654a:	d121      	bne.n	8006590 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654c:	f7fb fd72 	bl	8002034 <HAL_GetTick>
 8006550:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800655e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fb fd64 	bl	8002034 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	; 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e112      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800657e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0ec      	beq.n	8006568 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800658e:	e060      	b.n	8006652 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fb fd50 	bl	8002034 <HAL_GetTick>
 8006594:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ac:	f7fb fd42 	bl	8002034 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0f0      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1ec      	bne.n	80065ac <HAL_RCC_OscConfig+0x530>
 80065d2:	e03e      	b.n	8006652 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fb fd2e 	bl	8002034 <HAL_GetTick>
 80065d8:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f0:	f7fb fd20 	bl	8002034 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0ce      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1ec      	bne.n	80065f0 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006616:	f7fb fd0d 	bl	8002034 <HAL_GetTick>
 800661a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800661c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006630:	e00a      	b.n	8006648 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f7fb fcff 	bl	8002034 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e0ad      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006648:	f7ff fb35 	bl	8005cb6 <LL_RCC_LSE_IsReady>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ef      	bne.n	8006632 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80a3 	beq.w	80067a2 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b0c      	cmp	r3, #12
 8006660:	d076      	beq.n	8006750 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	2b02      	cmp	r3, #2
 8006668:	d14b      	bne.n	8006702 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	f7ff fc76 	bl	8005f5a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666e:	f7fb fce1 	bl	8002034 <HAL_GetTick>
 8006672:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006674:	e008      	b.n	8006688 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006676:	f7fb fcdd 	bl	8002034 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b0a      	cmp	r3, #10
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e08d      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006688:	f7ff fc75 	bl	8005f76 <LL_RCC_PLL_IsReady>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f1      	bne.n	8006676 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	4b44      	ldr	r3, [pc, #272]	; (80067ac <HAL_RCC_OscConfig+0x730>)
 800669a:	4013      	ands	r3, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066a4:	4311      	orrs	r1, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066aa:	0212      	lsls	r2, r2, #8
 80066ac:	4311      	orrs	r1, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066b2:	4311      	orrs	r1, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066b8:	4311      	orrs	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80066be:	430a      	orrs	r2, r1
 80066c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c8:	f7ff fc39 	bl	8005f3e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fb fcaa 	bl	8002034 <HAL_GetTick>
 80066e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e4:	f7fb fca6 	bl	8002034 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b0a      	cmp	r3, #10
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e056      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80066f6:	f7ff fc3e 	bl	8005f76 <LL_RCC_PLL_IsReady>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f1      	beq.n	80066e4 <HAL_RCC_OscConfig+0x668>
 8006700:	e04f      	b.n	80067a2 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	f7ff fc2a 	bl	8005f5a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006710:	f023 0303 	bic.w	r3, r3, #3
 8006714:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006720:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006728:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fb fc83 	bl	8002034 <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006732:	f7fb fc7f 	bl	8002034 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b0a      	cmp	r3, #10
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e02f      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006744:	f7ff fc17 	bl	8005f76 <LL_RCC_PLL_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <HAL_RCC_OscConfig+0x6b6>
 800674e:	e028      	b.n	80067a2 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e023      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f003 0203 	and.w	r2, r3, #3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676e:	429a      	cmp	r2, r3
 8006770:	d115      	bne.n	800679e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	429a      	cmp	r2, r3
 800677e:	d10e      	bne.n	800679e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	429a      	cmp	r2, r3
 800678e:	d106      	bne.n	800679e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	429a      	cmp	r2, r3
 800679c:	d001      	beq.n	80067a2 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	11c1808c 	.word	0x11c1808c

080067b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e10f      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067c4:	4b89      	ldr	r3, [pc, #548]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d91b      	bls.n	800680a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d2:	4b86      	ldr	r3, [pc, #536]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 0207 	bic.w	r2, r3, #7
 80067da:	4984      	ldr	r1, [pc, #528]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	4313      	orrs	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e2:	f7fb fc27 	bl	8002034 <HAL_GetTick>
 80067e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067ea:	f7fb fc23 	bl	8002034 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0f3      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fc:	4b7b      	ldr	r3, [pc, #492]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d1ef      	bne.n	80067ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fb12 	bl	8005e44 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006820:	f7fb fc08 	bl	8002034 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006828:	f7fb fc04 	bl	8002034 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e0d4      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800683a:	f7ff fbda 	bl	8005ff2 <LL_RCC_IsActiveFlag_HPRE>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f1      	beq.n	8006828 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d016      	beq.n	800687e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fb08 	bl	8005e6a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800685a:	f7fb fbeb 	bl	8002034 <HAL_GetTick>
 800685e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006860:	e008      	b.n	8006874 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006862:	f7fb fbe7 	bl	8002034 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e0b7      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006874:	f7ff fbce 	bl	8006014 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f1      	beq.n	8006862 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0304 	and.w	r3, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fb01 	bl	8005e96 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006894:	f7fb fbce 	bl	8002034 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800689a:	e008      	b.n	80068ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800689c:	f7fb fbca 	bl	8002034 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e09a      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80068ae:	f7ff fbc3 	bl	8006038 <LL_RCC_IsActiveFlag_PPRE1>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f1      	beq.n	800689c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d017      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff faf6 	bl	8005ebc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068d0:	f7fb fbb0 	bl	8002034 <HAL_GetTick>
 80068d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068d8:	f7fb fbac 	bl	8002034 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e07c      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068ea:	f7ff fbb6 	bl	800605a <LL_RCC_IsActiveFlag_PPRE2>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f1      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d043      	beq.n	8006988 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d106      	bne.n	8006916 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006908:	f7ff f983 	bl	8005c12 <LL_RCC_HSE_IsReady>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d11e      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e066      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b03      	cmp	r3, #3
 800691c:	d106      	bne.n	800692c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800691e:	f7ff fb2a 	bl	8005f76 <LL_RCC_PLL_IsReady>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d113      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e05b      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006934:	f7ff fa1d 	bl	8005d72 <LL_RCC_MSI_IsReady>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d108      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e050      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006942:	f7ff f993 	bl	8005c6c <LL_RCC_HSI_IsReady>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e049      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fa57 	bl	8005e08 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695a:	f7fb fb6b 	bl	8002034 <HAL_GetTick>
 800695e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006960:	e00a      	b.n	8006978 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006962:	f7fb fb67 	bl	8002034 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e035      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006978:	f7ff fa59 	bl	8005e2e <LL_RCC_GetSysClkSource>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	429a      	cmp	r2, r3
 8006986:	d1ec      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006988:	4b18      	ldr	r3, [pc, #96]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d21b      	bcs.n	80069ce <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006996:	4b15      	ldr	r3, [pc, #84]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f023 0207 	bic.w	r2, r3, #7
 800699e:	4913      	ldr	r1, [pc, #76]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a6:	f7fb fb45 	bl	8002034 <HAL_GetTick>
 80069aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ac:	e008      	b.n	80069c0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069ae:	f7fb fb41 	bl	8002034 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e011      	b.n	80069e4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <HAL_RCC_ClockConfig+0x23c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d1ef      	bne.n	80069ae <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80069ce:	f000 f8b3 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4a06      	ldr	r2, [pc, #24]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80069d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fb fb1f 	bl	8002020 <HAL_InitTick>
 80069e2:	4603      	mov	r3, r0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	58004000 	.word	0x58004000
 80069f0:	20000000 	.word	0x20000000
 80069f4:	20000034 	.word	0x20000034

080069f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a06:	f7ff fa12 	bl	8005e2e <LL_RCC_GetSysClkSource>
 8006a0a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a0c:	f7ff fae6 	bl	8005fdc <LL_RCC_PLL_GetMainSource>
 8006a10:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_GetSysClockFreq+0x2c>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b0c      	cmp	r3, #12
 8006a1c:	d139      	bne.n	8006a92 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d136      	bne.n	8006a92 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006a24:	f7ff f9b5 	bl	8005d92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d115      	bne.n	8006a5a <HAL_RCC_GetSysClockFreq+0x62>
 8006a2e:	f7ff f9b0 	bl	8005d92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d106      	bne.n	8006a46 <HAL_RCC_GetSysClockFreq+0x4e>
 8006a38:	f7ff f9bb 	bl	8005db2 <LL_RCC_MSI_GetRange>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	e005      	b.n	8006a52 <HAL_RCC_GetSysClockFreq+0x5a>
 8006a46:	f7ff f9bf 	bl	8005dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	0a1b      	lsrs	r3, r3, #8
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	4a36      	ldr	r2, [pc, #216]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x134>)
 8006a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a58:	e014      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x8c>
 8006a5a:	f7ff f99a 	bl	8005d92 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d106      	bne.n	8006a72 <HAL_RCC_GetSysClockFreq+0x7a>
 8006a64:	f7ff f9a5 	bl	8005db2 <LL_RCC_MSI_GetRange>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	091b      	lsrs	r3, r3, #4
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	e005      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x86>
 8006a72:	f7ff f9a9 	bl	8005dc8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a76:	4603      	mov	r3, r0
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x134>)
 8006a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a84:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d115      	bne.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a90:	e012      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d102      	bne.n	8006a9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a98:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e00c      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d109      	bne.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006aa4:	f7ff f888 	bl	8005bb8 <LL_RCC_HSE_IsEnabledDiv2>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d102      	bne.n	8006ab4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e001      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006ab4:	4b1f      	ldr	r3, [pc, #124]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006ab6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ab8:	f7ff f9b9 	bl	8005e2e <LL_RCC_GetSysClkSource>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b0c      	cmp	r3, #12
 8006ac0:	d12f      	bne.n	8006b22 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006ac2:	f7ff fa8b 	bl	8005fdc <LL_RCC_PLL_GetMainSource>
 8006ac6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCC_GetSysClockFreq+0xde>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d003      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0xe4>
 8006ad4:	e00d      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006ad6:	4b16      	ldr	r3, [pc, #88]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ad8:	60fb      	str	r3, [r7, #12]
        break;
 8006ada:	e00d      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006adc:	f7ff f86c 	bl	8005bb8 <LL_RCC_HSE_IsEnabledDiv2>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d102      	bne.n	8006aec <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ae6:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ae8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006aea:	e005      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006aec:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006aee:	60fb      	str	r3, [r7, #12]
        break;
 8006af0:	e002      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	60fb      	str	r3, [r7, #12]
        break;
 8006af6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006af8:	f7ff fa4e 	bl	8005f98 <LL_RCC_PLL_GetN>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	fb03 f402 	mul.w	r4, r3, r2
 8006b04:	f7ff fa5f 	bl	8005fc6 <LL_RCC_PLL_GetDivider>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	091b      	lsrs	r3, r3, #4
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006b12:	f7ff fa4d 	bl	8005fb0 <LL_RCC_PLL_GetR>
 8006b16:	4603      	mov	r3, r0
 8006b18:	0f5b      	lsrs	r3, r3, #29
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b20:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006b22:	697b      	ldr	r3, [r7, #20]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd90      	pop	{r4, r7, pc}
 8006b2c:	0801baf0 	.word	0x0801baf0
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	01e84800 	.word	0x01e84800

08006b38 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b38:	b598      	push	{r3, r4, r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006b3c:	f7ff ff5c 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 8006b40:	4604      	mov	r4, r0
 8006b42:	f7ff f9ce 	bl	8005ee2 <LL_RCC_GetAHBPrescaler>
 8006b46:	4603      	mov	r3, r0
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <HAL_RCC_GetHCLKFreq+0x24>)
 8006b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b54:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	bd98      	pop	{r3, r4, r7, pc}
 8006b5c:	0801ba90 	.word	0x0801ba90

08006b60 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b60:	b598      	push	{r3, r4, r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b64:	f7ff ffe8 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b68:	4604      	mov	r4, r0
 8006b6a:	f7ff f9d2 	bl	8005f12 <LL_RCC_GetAPB1Prescaler>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	4a03      	ldr	r2, [pc, #12]	; (8006b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	bd98      	pop	{r3, r4, r7, pc}
 8006b80:	0801bad0 	.word	0x0801bad0

08006b84 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b84:	b598      	push	{r3, r4, r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006b88:	f7ff ffd6 	bl	8006b38 <HAL_RCC_GetHCLKFreq>
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	f7ff f9cb 	bl	8005f28 <LL_RCC_GetAPB2Prescaler>
 8006b92:	4603      	mov	r3, r0
 8006b94:	0adb      	lsrs	r3, r3, #11
 8006b96:	4a03      	ldr	r2, [pc, #12]	; (8006ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b9c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd98      	pop	{r3, r4, r7, pc}
 8006ba4:	0801bad0 	.word	0x0801bad0

08006ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbe:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006bc0:	f7ff f99a 	bl	8005ef8 <LL_RCC_GetAHB3Prescaler>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	0c9c      	lsrs	r4, r3, #18
 8006be4:	f7fe ff40 	bl	8005a68 <HAL_PWREx_GetVoltageRange>
 8006be8:	4603      	mov	r3, r0
 8006bea:	4619      	mov	r1, r3
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 f80b 	bl	8006c08 <RCC_SetFlashLatency>
 8006bf2:	4603      	mov	r3, r0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd90      	pop	{r4, r7, pc}
 8006bfc:	0801baf0 	.word	0x0801baf0
 8006c00:	0801ba90 	.word	0x0801ba90
 8006c04:	431bde83 	.word	0x431bde83

08006c08 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	; 0x38
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006c12:	4a3c      	ldr	r2, [pc, #240]	; (8006d04 <RCC_SetFlashLatency+0xfc>)
 8006c14:	f107 0320 	add.w	r3, r7, #32
 8006c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c1c:	6018      	str	r0, [r3, #0]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006c22:	4a39      	ldr	r2, [pc, #228]	; (8006d08 <RCC_SetFlashLatency+0x100>)
 8006c24:	f107 0318 	add.w	r3, r7, #24
 8006c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c2c:	6018      	str	r0, [r3, #0]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006c32:	4a36      	ldr	r2, [pc, #216]	; (8006d0c <RCC_SetFlashLatency+0x104>)
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d11d      	bne.n	8006c86 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4e:	e016      	b.n	8006c7e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c58:	4413      	add	r3, r2
 8006c5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d808      	bhi.n	8006c78 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c6e:	4413      	add	r3, r2
 8006c70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c76:	e023      	b.n	8006cc0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d9e5      	bls.n	8006c50 <RCC_SetFlashLatency+0x48>
 8006c84:	e01c      	b.n	8006cc0 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c86:	2300      	movs	r3, #0
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c8a:	e016      	b.n	8006cba <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c94:	4413      	add	r3, r2
 8006c96:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d808      	bhi.n	8006cb4 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006caa:	4413      	add	r3, r2
 8006cac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb2:	e005      	b.n	8006cc0 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d9e5      	bls.n	8006c8c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006cc0:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <RCC_SetFlashLatency+0x108>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f023 0207 	bic.w	r2, r3, #7
 8006cc8:	4911      	ldr	r1, [pc, #68]	; (8006d10 <RCC_SetFlashLatency+0x108>)
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cd0:	f7fb f9b0 	bl	8002034 <HAL_GetTick>
 8006cd4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cd6:	e008      	b.n	8006cea <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cd8:	f7fb f9ac 	bl	8002034 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e007      	b.n	8006cfa <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006cea:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <RCC_SetFlashLatency+0x108>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1ef      	bne.n	8006cd8 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3738      	adds	r7, #56	; 0x38
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	0801b2f8 	.word	0x0801b2f8
 8006d08:	0801b300 	.word	0x0801b300
 8006d0c:	0801b308 	.word	0x0801b308
 8006d10:	58004000 	.word	0x58004000

08006d14 <LL_RCC_LSE_IsReady>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d101      	bne.n	8006d2c <LL_RCC_LSE_IsReady+0x18>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <LL_RCC_LSE_IsReady+0x1a>
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <LL_RCC_SetUSARTClockSource>:
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	401a      	ands	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <LL_RCC_SetI2SClockSource>:
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <LL_RCC_SetLPUARTClockSource>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_SetI2CClockSource>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	091b      	lsrs	r3, r3, #4
 8006dce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	401a      	ands	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr

08006df2 <LL_RCC_SetLPTIMClockSource>:
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr

08006e24 <LL_RCC_SetRNGClockSource>:
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e34:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <LL_RCC_SetADCClockSource>:
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <LL_RCC_SetRTCClockSource>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <LL_RCC_GetRTCClockSource>:
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr

08006eba <LL_RCC_ForceBackupDomainReset>:
{
 8006eba:	b480      	push	{r7}
 8006ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ed2:	bf00      	nop
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr

08006eda <LL_RCC_ReleaseBackupDomainReset>:
{
 8006eda:	b480      	push	{r7}
 8006edc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ef2:	bf00      	nop
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr
	...

08006efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006f08:	2300      	movs	r3, #0
 8006f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d058      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006f1c:	f7fe fd62 	bl	80059e4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f20:	f7fb f888 	bl	8002034 <HAL_GetTick>
 8006f24:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f26:	e009      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f28:	f7fb f884 	bl	8002034 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d902      	bls.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	74fb      	strb	r3, [r7, #19]
        break;
 8006f3a:	e006      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f3c:	4b7b      	ldr	r3, [pc, #492]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f48:	d1ee      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006f4a:	7cfb      	ldrb	r3, [r7, #19]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13c      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006f50:	f7ff ffa7 	bl	8006ea2 <LL_RCC_GetRTCClockSource>
 8006f54:	4602      	mov	r2, r0
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d00f      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f6c:	f7ff ffa5 	bl	8006eba <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f70:	f7ff ffb3 	bl	8006eda <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d014      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fb f854 	bl	8002034 <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f8e:	e00b      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f90:	f7fb f850 	bl	8002034 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d902      	bls.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	74fb      	strb	r3, [r7, #19]
            break;
 8006fa6:	e004      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006fa8:	f7ff feb4 	bl	8006d14 <LL_RCC_LSE_IsReady>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d1ee      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006fb2:	7cfb      	ldrb	r3, [r7, #19]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff ff5b 	bl	8006e78 <LL_RCC_SetRTCClockSource>
 8006fc2:	e004      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fc4:	7cfb      	ldrb	r3, [r7, #19]
 8006fc6:	74bb      	strb	r3, [r7, #18]
 8006fc8:	e001      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fca:	7cfb      	ldrb	r3, [r7, #19]
 8006fcc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff fea9 	bl	8006d36 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff fe9e 	bl	8006d36 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff fec0 	bl	8006d90 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007018:	2b00      	cmp	r3, #0
 800701a:	d004      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fee6 	bl	8006df2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fedb 	bl	8006df2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fed0 	bl	8006df2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff fea9 	bl	8006dba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff fe9e 	bl	8006dba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	2b00      	cmp	r3, #0
 8007088:	d004      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fe93 	bl	8006dba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	d011      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fe5e 	bl	8006d66 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b2:	d107      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80070b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d010      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fea5 	bl	8006e24 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d107      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80070e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d011      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fea3 	bl	8006e4e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007110:	d107      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007122:	7cbb      	ldrb	r3, [r7, #18]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	58000400 	.word	0x58000400

08007130 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d068      	beq.n	8007214 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fa fcbc 	bl	8001ad4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007164:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <HAL_RTC_Init+0xf0>)
 8007166:	22ca      	movs	r2, #202	; 0xca
 8007168:	625a      	str	r2, [r3, #36]	; 0x24
 800716a:	4b2d      	ldr	r3, [pc, #180]	; (8007220 <HAL_RTC_Init+0xf0>)
 800716c:	2253      	movs	r2, #83	; 0x53
 800716e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa0f 	bl	8007594 <RTC_EnterInitMode>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d13f      	bne.n	8007200 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007180:	4b27      	ldr	r3, [pc, #156]	; (8007220 <HAL_RTC_Init+0xf0>)
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	4a26      	ldr	r2, [pc, #152]	; (8007220 <HAL_RTC_Init+0xf0>)
 8007186:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800718a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007190:	4b23      	ldr	r3, [pc, #140]	; (8007220 <HAL_RTC_Init+0xf0>)
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6859      	ldr	r1, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	4319      	orrs	r1, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	430b      	orrs	r3, r1
 80071a4:	491e      	ldr	r1, [pc, #120]	; (8007220 <HAL_RTC_Init+0xf0>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	491a      	ldr	r1, [pc, #104]	; (8007220 <HAL_RTC_Init+0xf0>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80071ba:	4b19      	ldr	r3, [pc, #100]	; (8007220 <HAL_RTC_Init+0xf0>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	430b      	orrs	r3, r1
 80071cc:	4914      	ldr	r1, [pc, #80]	; (8007220 <HAL_RTC_Init+0xf0>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa12 	bl	80075fc <RTC_ExitInitMode>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10e      	bne.n	8007200 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80071e2:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <HAL_RTC_Init+0xf0>)
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a19      	ldr	r1, [r3, #32]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	4319      	orrs	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	430b      	orrs	r3, r1
 80071fa:	4909      	ldr	r1, [pc, #36]	; (8007220 <HAL_RTC_Init+0xf0>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <HAL_RTC_Init+0xf0>)
 8007202:	22ff      	movs	r2, #255	; 0xff
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40002800 	.word	0x40002800

08007224 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_RTC_SetAlarm_IT+0x1e>
 800723e:	2302      	movs	r3, #2
 8007240:	e0f3      	b.n	800742a <HAL_RTC_SetAlarm_IT+0x206>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2202      	movs	r2, #2
 800724e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007252:	4b78      	ldr	r3, [pc, #480]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007262:	d06a      	beq.n	800733a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d13a      	bne.n	80072e0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800726a:	4b72      	ldr	r3, [pc, #456]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2200      	movs	r2, #0
 800727a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f000 f9f5 	bl	8007678 <RTC_ByteToBcd2>
 800728e:	4603      	mov	r3, r0
 8007290:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f9ee 	bl	8007678 <RTC_ByteToBcd2>
 800729c:	4603      	mov	r3, r0
 800729e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072a0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	789b      	ldrb	r3, [r3, #2]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f9e6 	bl	8007678 <RTC_ByteToBcd2>
 80072ac:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072ae:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	78db      	ldrb	r3, [r3, #3]
 80072b6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072b8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f9d8 	bl	8007678 <RTC_ByteToBcd2>
 80072c8:	4603      	mov	r3, r0
 80072ca:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072cc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072d4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e02c      	b.n	800733a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80072e8:	d00d      	beq.n	8007306 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072f2:	d008      	beq.n	8007306 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80072f4:	4b4f      	ldr	r3, [pc, #316]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007312:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007318:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	78db      	ldrb	r3, [r3, #3]
 800731e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007320:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007328:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800732a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007330:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800733a:	4b3e      	ldr	r3, [pc, #248]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 800733c:	22ca      	movs	r2, #202	; 0xca
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
 8007340:	4b3c      	ldr	r3, [pc, #240]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007342:	2253      	movs	r2, #83	; 0x53
 8007344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734e:	d12c      	bne.n	80073aa <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007350:	4b38      	ldr	r3, [pc, #224]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	4a37      	ldr	r2, [pc, #220]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007356:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800735a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800735c:	4b35      	ldr	r3, [pc, #212]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 800735e:	2201      	movs	r2, #1
 8007360:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007368:	d107      	bne.n	800737a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	4930      	ldr	r1, [pc, #192]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007374:	4313      	orrs	r3, r2
 8007376:	644b      	str	r3, [r1, #68]	; 0x44
 8007378:	e006      	b.n	8007388 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800737a:	4a2e      	ldr	r2, [pc, #184]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007380:	4a2c      	ldr	r2, [pc, #176]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007388:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	f043 0201 	orr.w	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	4a24      	ldr	r2, [pc, #144]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073a2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80073a6:	6193      	str	r3, [r2, #24]
 80073a8:	e02b      	b.n	8007402 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80073aa:	4b22      	ldr	r3, [pc, #136]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	4a21      	ldr	r2, [pc, #132]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073b0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80073b4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80073b6:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073b8:	2202      	movs	r2, #2
 80073ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	d107      	bne.n	80073d4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	699a      	ldr	r2, [r3, #24]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	4919      	ldr	r1, [pc, #100]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073d2:	e006      	b.n	80073e2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80073d4:	4a17      	ldr	r2, [pc, #92]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80073da:	4a16      	ldr	r2, [pc, #88]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80073e2:	4a14      	ldr	r2, [pc, #80]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	f043 0202 	orr.w	r2, r3, #2
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80073f6:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	4a0e      	ldr	r2, [pc, #56]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 80073fc:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007400:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <HAL_RTC_SetAlarm_IT+0x214>)
 8007404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007408:	4a0b      	ldr	r2, [pc, #44]	; (8007438 <HAL_RTC_SetAlarm_IT+0x214>)
 800740a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <HAL_RTC_SetAlarm_IT+0x210>)
 8007414:	22ff      	movs	r2, #255	; 0xff
 8007416:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	bd90      	pop	{r4, r7, pc}
 8007432:	bf00      	nop
 8007434:	40002800 	.word	0x40002800
 8007438:	58000800 	.word	0x58000800

0800743c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_RTC_DeactivateAlarm+0x18>
 8007450:	2302      	movs	r3, #2
 8007452:	e048      	b.n	80074e6 <HAL_RTC_DeactivateAlarm+0xaa>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007464:	4b22      	ldr	r3, [pc, #136]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007466:	22ca      	movs	r2, #202	; 0xca
 8007468:	625a      	str	r2, [r3, #36]	; 0x24
 800746a:	4b21      	ldr	r3, [pc, #132]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800746c:	2253      	movs	r2, #83	; 0x53
 800746e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007476:	d115      	bne.n	80074a4 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800747e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007482:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007484:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007488:	4a19      	ldr	r2, [pc, #100]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800748a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800748e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	f023 0201 	bic.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800749c:	4b14      	ldr	r3, [pc, #80]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800749e:	2201      	movs	r2, #1
 80074a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80074a2:	e014      	b.n	80074ce <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80074a4:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074aa:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80074ae:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b4:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074ba:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	f023 0202 	bic.w	r2, r3, #2
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074ca:	2202      	movs	r2, #2
 80074cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80074d0:	22ff      	movs	r2, #255	; 0xff
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr
 80074f0:	40002800 	.word	0x40002800

080074f4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80074fc:	4b11      	ldr	r3, [pc, #68]	; (8007544 <HAL_RTC_AlarmIRQHandler+0x50>)
 80074fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007514:	2201      	movs	r2, #1
 8007516:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fb f819 	bl	8002550 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <HAL_RTC_AlarmIRQHandler+0x50>)
 800752a:	2202      	movs	r2, #2
 800752c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f94a 	bl	80077c8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40002800 	.word	0x40002800

08007548 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007550:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <HAL_RTC_WaitForSynchro+0x48>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a0e      	ldr	r2, [pc, #56]	; (8007590 <HAL_RTC_WaitForSynchro+0x48>)
 8007556:	f023 0320 	bic.w	r3, r3, #32
 800755a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800755c:	f7fa fd6a 	bl	8002034 <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007562:	e009      	b.n	8007578 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007564:	f7fa fd66 	bl	8002034 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007572:	d901      	bls.n	8007578 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e006      	b.n	8007586 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <HAL_RTC_WaitForSynchro+0x48>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0ef      	beq.n	8007564 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40002800 	.word	0x40002800

08007594 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80075a0:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <RTC_EnterInitMode+0x64>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d120      	bne.n	80075ee <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <RTC_EnterInitMode+0x64>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <RTC_EnterInitMode+0x64>)
 80075b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075b6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80075b8:	f7fa fd3c 	bl	8002034 <HAL_GetTick>
 80075bc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075be:	e00d      	b.n	80075dc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80075c0:	f7fa fd38 	bl	8002034 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ce:	d905      	bls.n	80075dc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2203      	movs	r2, #3
 80075d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80075dc:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <RTC_EnterInitMode+0x64>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <RTC_EnterInitMode+0x5a>
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d1e8      	bne.n	80075c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40002800 	.word	0x40002800

080075fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007608:	4b1a      	ldr	r3, [pc, #104]	; (8007674 <RTC_ExitInitMode+0x78>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a19      	ldr	r2, [pc, #100]	; (8007674 <RTC_ExitInitMode+0x78>)
 800760e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007612:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007614:	4b17      	ldr	r3, [pc, #92]	; (8007674 <RTC_ExitInitMode+0x78>)
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10c      	bne.n	800763a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ff91 	bl	8007548 <HAL_RTC_WaitForSynchro>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d01e      	beq.n	800766a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2203      	movs	r2, #3
 8007630:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	73fb      	strb	r3, [r7, #15]
 8007638:	e017      	b.n	800766a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800763a:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <RTC_ExitInitMode+0x78>)
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	4a0d      	ldr	r2, [pc, #52]	; (8007674 <RTC_ExitInitMode+0x78>)
 8007640:	f023 0320 	bic.w	r3, r3, #32
 8007644:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ff7e 	bl	8007548 <HAL_RTC_WaitForSynchro>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d005      	beq.n	800765e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2203      	movs	r2, #3
 8007656:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <RTC_ExitInitMode+0x78>)
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	4a04      	ldr	r2, [pc, #16]	; (8007674 <RTC_ExitInitMode+0x78>)
 8007664:	f043 0320 	orr.w	r3, r3, #32
 8007668:	6193      	str	r3, [r2, #24]
  }

  return status;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40002800 	.word	0x40002800

08007678 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800768a:	e005      	b.n	8007698 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	3b0a      	subs	r3, #10
 8007696:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	2b09      	cmp	r3, #9
 800769c:	d8f6      	bhi.n	800768c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	b2db      	uxtb	r3, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr
	...

080076b8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d101      	bne.n	80076ce <HAL_RTCEx_EnableBypassShadow+0x16>
 80076ca:	2302      	movs	r3, #2
 80076cc:	e01f      	b.n	800770e <HAL_RTCEx_EnableBypassShadow+0x56>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076de:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076e0:	22ca      	movs	r2, #202	; 0xca
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24
 80076e4:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076e6:	2253      	movs	r2, #83	; 0x53
 80076e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076ea:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076f0:	f043 0320 	orr.w	r3, r3, #32
 80076f4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076f6:	4b08      	ldr	r3, [pc, #32]	; (8007718 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80076f8:	22ff      	movs	r2, #255	; 0xff
 80076fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr
 8007718:	40002800 	.word	0x40002800

0800771c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_RTCEx_SetSSRU_IT+0x16>
 800772e:	2302      	movs	r3, #2
 8007730:	e027      	b.n	8007782 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007742:	4b12      	ldr	r3, [pc, #72]	; (800778c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007744:	22ca      	movs	r2, #202	; 0xca
 8007746:	625a      	str	r2, [r3, #36]	; 0x24
 8007748:	4b10      	ldr	r3, [pc, #64]	; (800778c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800774a:	2253      	movs	r2, #83	; 0x53
 800774c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	4a0e      	ldr	r2, [pc, #56]	; (800778c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007758:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800775c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007760:	4a0b      	ldr	r2, [pc, #44]	; (8007790 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007766:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800776a:	4b08      	ldr	r3, [pc, #32]	; (800778c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800776c:	22ff      	movs	r2, #255	; 0xff
 800776e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr
 800778c:	40002800 	.word	0x40002800
 8007790:	58000800 	.word	0x58000800

08007794 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80077aa:	2240      	movs	r2, #64	; 0x40
 80077ac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fa fed8 	bl	8002564 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40002800 	.word	0x40002800

080077c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bc80      	pop	{r7}
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <HAL_RTCEx_BKUPWrite+0x2c>)
 80077ea:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4413      	add	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	601a      	str	r2, [r3, #0]
}
 80077fc:	bf00      	nop
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	4000b100 	.word	0x4000b100

0800780c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007816:	4b07      	ldr	r3, [pc, #28]	; (8007834 <HAL_RTCEx_BKUPRead+0x28>)
 8007818:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	4000b100 	.word	0x4000b100

08007838 <LL_PWR_SetRadioBusyTrigger>:
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007848:	4904      	ldr	r1, [pc, #16]	; (800785c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4313      	orrs	r3, r2
 800784e:	608b      	str	r3, [r1, #8]
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	58000400 	.word	0x58000400

08007860 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786a:	4a04      	ldr	r2, [pc, #16]	; (800787c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800786c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007874:	bf00      	nop
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr
 800787c:	58000400 	.word	0x58000400

08007880 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788a:	4a04      	ldr	r2, [pc, #16]	; (800789c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800788c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	58000400 	.word	0x58000400

080078a0 <LL_PWR_ClearFlag_RFBUSY>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80078a4:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80078a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078aa:	619a      	str	r2, [r3, #24]
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr
 80078b4:	58000400 	.word	0x58000400

080078b8 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d101      	bne.n	80078cc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	58000400 	.word	0x58000400

080078dc <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80078e0:	4b06      	ldr	r3, [pc, #24]	; (80078fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d101      	bne.n	80078f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	58000400 	.word	0x58000400

08007900 <LL_RCC_RF_DisableReset>:
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007910:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007914:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007918:	bf00      	nop
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <LL_RCC_IsRFUnderReset>:
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800792c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007934:	d101      	bne.n	800793a <LL_RCC_IsRFUnderReset+0x1a>
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <LL_RCC_IsRFUnderReset+0x1c>
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <LL_EXTI_EnableIT_32_63>:
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <LL_EXTI_EnableIT_32_63+0x24>)
 800794e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007952:	4905      	ldr	r1, [pc, #20]	; (8007968 <LL_EXTI_EnableIT_32_63+0x24>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58000800 	.word	0x58000800

0800796c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d103      	bne.n	8007982 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
    return status;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	e04b      	b.n	8007a1a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	799b      	ldrb	r3, [r3, #6]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fa f9a4 	bl	8001ce4 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80079a2:	f7ff ffad 	bl	8007900 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079a6:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <HAL_SUBGHZ_Init+0xb8>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	1a9b      	subs	r3, r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	0cdb      	lsrs	r3, r3, #19
 80079b4:	2264      	movs	r2, #100	; 0x64
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d105      	bne.n	80079ce <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	609a      	str	r2, [r3, #8]
      break;
 80079cc:	e007      	b.n	80079de <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80079d4:	f7ff ffa4 	bl	8007920 <LL_RCC_IsRFUnderReset>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1ee      	bne.n	80079bc <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80079de:	f7ff ff3f 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80079e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80079e6:	f7ff ffad 	bl	8007944 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80079ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80079ee:	f7ff ff23 	bl	8007838 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80079f2:	f7ff ff55 	bl	80078a0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 faad 	bl	8007f60 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	719a      	strb	r2, [r3, #6]

  return status;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000000 	.word	0x20000000

08007a28 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	461a      	mov	r2, r3
 8007a34:	460b      	mov	r3, r1
 8007a36:	817b      	strh	r3, [r7, #10]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	799b      	ldrb	r3, [r3, #6]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d14a      	bne.n	8007adc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	795b      	ldrb	r3, [r3, #5]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e045      	b.n	8007ade <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fb4c 	bl	80080fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a64:	f7ff ff0c 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007a68:	210d      	movs	r1, #13
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fa98 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007a70:	897b      	ldrh	r3, [r7, #10]
 8007a72:	0a1b      	lsrs	r3, r3, #8
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fa90 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007a80:	897b      	ldrh	r3, [r7, #10]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa8a 	bl	8007fa0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	82bb      	strh	r3, [r7, #20]
 8007a90:	e00a      	b.n	8007aa8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a92:	8abb      	ldrh	r3, [r7, #20]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 fa7f 	bl	8007fa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007aa2:	8abb      	ldrh	r3, [r7, #20]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	82bb      	strh	r3, [r7, #20]
 8007aa8:	8aba      	ldrh	r2, [r7, #20]
 8007aaa:	893b      	ldrh	r3, [r7, #8]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3f0      	bcc.n	8007a92 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ab0:	f7ff fed6 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 fb45 	bl	8008144 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
 8007ac6:	e001      	b.n	8007acc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	715a      	strb	r2, [r3, #5]

    return status;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	e000      	b.n	8007ade <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b088      	sub	sp, #32
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	461a      	mov	r2, r3
 8007af2:	460b      	mov	r3, r1
 8007af4:	817b      	strh	r3, [r7, #10]
 8007af6:	4613      	mov	r3, r2
 8007af8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	799b      	ldrb	r3, [r3, #6]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d14a      	bne.n	8007b9e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	795b      	ldrb	r3, [r3, #5]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e045      	b.n	8007ba0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 faee 	bl	80080fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b20:	f7ff feae 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007b24:	211d      	movs	r1, #29
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fa3a 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007b2c:	897b      	ldrh	r3, [r7, #10]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	4619      	mov	r1, r3
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fa32 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007b3c:	897b      	ldrh	r3, [r7, #10]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	4619      	mov	r1, r3
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 fa2c 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007b48:	2100      	movs	r1, #0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fa28 	bl	8007fa0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b50:	2300      	movs	r3, #0
 8007b52:	82fb      	strh	r3, [r7, #22]
 8007b54:	e009      	b.n	8007b6a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b56:	69b9      	ldr	r1, [r7, #24]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fa77 	bl	800804c <SUBGHZSPI_Receive>
      pData++;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	3301      	adds	r3, #1
 8007b62:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007b64:	8afb      	ldrh	r3, [r7, #22]
 8007b66:	3301      	adds	r3, #1
 8007b68:	82fb      	strh	r3, [r7, #22]
 8007b6a:	8afa      	ldrh	r2, [r7, #22]
 8007b6c:	893b      	ldrh	r3, [r7, #8]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d3f1      	bcc.n	8007b56 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b72:	f7ff fe75 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fae4 	bl	8008144 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	77fb      	strb	r3, [r7, #31]
 8007b88:	e001      	b.n	8007b8e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	715a      	strb	r2, [r3, #5]

    return status;
 8007b9a:	7ffb      	ldrb	r3, [r7, #31]
 8007b9c:	e000      	b.n	8007ba0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007b9e:	2302      	movs	r3, #2
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3720      	adds	r7, #32
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	607a      	str	r2, [r7, #4]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	72fb      	strb	r3, [r7, #11]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	799b      	ldrb	r3, [r3, #6]
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d14a      	bne.n	8007c5c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	795b      	ldrb	r3, [r3, #5]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e045      	b.n	8007c5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fa8f 	bl	80080fc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007bde:	7afb      	ldrb	r3, [r7, #11]
 8007be0:	2b84      	cmp	r3, #132	; 0x84
 8007be2:	d002      	beq.n	8007bea <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	2b94      	cmp	r3, #148	; 0x94
 8007be8:	d103      	bne.n	8007bf2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	711a      	strb	r2, [r3, #4]
 8007bf0:	e002      	b.n	8007bf8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007bf8:	f7ff fe42 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f9cd 	bl	8007fa0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c06:	2300      	movs	r3, #0
 8007c08:	82bb      	strh	r3, [r7, #20]
 8007c0a:	e00a      	b.n	8007c22 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007c0c:	8abb      	ldrh	r3, [r7, #20]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	4619      	mov	r1, r3
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f9c2 	bl	8007fa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007c1c:	8abb      	ldrh	r3, [r7, #20]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	82bb      	strh	r3, [r7, #20]
 8007c22:	8aba      	ldrh	r2, [r7, #20]
 8007c24:	893b      	ldrh	r3, [r7, #8]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3f0      	bcc.n	8007c0c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c2a:	f7ff fe19 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b84      	cmp	r3, #132	; 0x84
 8007c32:	d002      	beq.n	8007c3a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fa85 	bl	8008144 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]
 8007c46:	e001      	b.n	8007c4c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	715a      	strb	r2, [r3, #5]

    return status;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	e000      	b.n	8007c5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b088      	sub	sp, #32
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	461a      	mov	r2, r3
 8007c72:	460b      	mov	r3, r1
 8007c74:	72fb      	strb	r3, [r7, #11]
 8007c76:	4613      	mov	r3, r2
 8007c78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	799b      	ldrb	r3, [r3, #6]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d13d      	bne.n	8007d04 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	795b      	ldrb	r3, [r3, #5]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007c90:	2302      	movs	r3, #2
 8007c92:	e038      	b.n	8007d06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fa2e 	bl	80080fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ca0:	f7ff fdee 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f979 	bl	8007fa0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007cae:	2100      	movs	r1, #0
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f975 	bl	8007fa0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	82fb      	strh	r3, [r7, #22]
 8007cba:	e009      	b.n	8007cd0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007cbc:	69b9      	ldr	r1, [r7, #24]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f9c4 	bl	800804c <SUBGHZSPI_Receive>
      pData++;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007cca:	8afb      	ldrh	r3, [r7, #22]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	82fb      	strh	r3, [r7, #22]
 8007cd0:	8afa      	ldrh	r2, [r7, #22]
 8007cd2:	893b      	ldrh	r3, [r7, #8]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d3f1      	bcc.n	8007cbc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007cd8:	f7ff fdc2 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 fa31 	bl	8008144 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e001      	b.n	8007cf4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	715a      	strb	r2, [r3, #5]

    return status;
 8007d00:	7ffb      	ldrb	r3, [r7, #31]
 8007d02:	e000      	b.n	8007d06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007d04:	2302      	movs	r3, #2
  }
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b086      	sub	sp, #24
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	72fb      	strb	r3, [r7, #11]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	799b      	ldrb	r3, [r3, #6]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d13e      	bne.n	8007daa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	795b      	ldrb	r3, [r3, #5]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e039      	b.n	8007dac <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f9dc 	bl	80080fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d44:	f7ff fd9c 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007d48:	210e      	movs	r1, #14
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f928 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f923 	bl	8007fa0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	82bb      	strh	r3, [r7, #20]
 8007d5e:	e00a      	b.n	8007d76 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007d60:	8abb      	ldrh	r3, [r7, #20]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f918 	bl	8007fa0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007d70:	8abb      	ldrh	r3, [r7, #20]
 8007d72:	3301      	adds	r3, #1
 8007d74:	82bb      	strh	r3, [r7, #20]
 8007d76:	8aba      	ldrh	r2, [r7, #20]
 8007d78:	893b      	ldrh	r3, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d3f0      	bcc.n	8007d60 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d7e:	f7ff fd6f 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f9de 	bl	8008144 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	75fb      	strb	r3, [r7, #23]
 8007d94:	e001      	b.n	8007d9a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	715a      	strb	r2, [r3, #5]

    return status;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	e000      	b.n	8007dac <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007daa:	2302      	movs	r3, #2
  }
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	72fb      	strb	r3, [r7, #11]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	799b      	ldrb	r3, [r3, #6]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d141      	bne.n	8007e5a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	795b      	ldrb	r3, [r3, #5]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e03c      	b.n	8007e5c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f987 	bl	80080fc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007dee:	f7ff fd47 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007df2:	211e      	movs	r1, #30
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f8d3 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f8ce 	bl	8007fa0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007e04:	2100      	movs	r1, #0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f8ca 	bl	8007fa0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	82fb      	strh	r3, [r7, #22]
 8007e10:	e009      	b.n	8007e26 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007e12:	69b9      	ldr	r1, [r7, #24]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 f919 	bl	800804c <SUBGHZSPI_Receive>
      pData++;
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007e20:	8afb      	ldrh	r3, [r7, #22]
 8007e22:	3301      	adds	r3, #1
 8007e24:	82fb      	strh	r3, [r7, #22]
 8007e26:	8afa      	ldrh	r2, [r7, #22]
 8007e28:	893b      	ldrh	r3, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d3f1      	bcc.n	8007e12 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e2e:	f7ff fd17 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f986 	bl	8008144 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e001      	b.n	8007e4a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	715a      	strb	r2, [r3, #5]

    return status;
 8007e56:	7ffb      	ldrb	r3, [r7, #31]
 8007e58:	e000      	b.n	8007e5c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007e5a:	2302      	movs	r3, #2
  }
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3720      	adds	r7, #32
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007e70:	f107 020c 	add.w	r2, r7, #12
 8007e74:	2302      	movs	r3, #2
 8007e76:	2112      	movs	r1, #18
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fef4 	bl	8007c66 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007e7e:	7b3b      	ldrb	r3, [r7, #12]
 8007e80:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007e82:	89fb      	ldrh	r3, [r7, #14]
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	b21a      	sxth	r2, r3
 8007e88:	7b7b      	ldrb	r3, [r7, #13]
 8007e8a:	b21b      	sxth	r3, r3
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	b21b      	sxth	r3, r3
 8007e90:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f011 fbbb 	bl	8019618 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007ea2:	89fb      	ldrh	r3, [r7, #14]
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f011 fbc0 	bl	8019634 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007eb4:	89fb      	ldrh	r3, [r7, #14]
 8007eb6:	089b      	lsrs	r3, r3, #2
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d002      	beq.n	8007ec6 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f011 fc0f 	bl	80196e4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007ec6:	89fb      	ldrh	r3, [r7, #14]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f011 fc14 	bl	8019700 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f011 fc19 	bl	801971c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007eea:	89fb      	ldrh	r3, [r7, #14]
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f011 fbe6 	bl	80196c8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007efc:	89fb      	ldrh	r3, [r7, #14]
 8007efe:	099b      	lsrs	r3, r3, #6
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f011 fba1 	bl	8019650 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007f0e:	89fb      	ldrh	r3, [r7, #14]
 8007f10:	09db      	lsrs	r3, r3, #7
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00e      	beq.n	8007f38 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007f1a:	89fb      	ldrh	r3, [r7, #14]
 8007f1c:	0a1b      	lsrs	r3, r3, #8
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007f26:	2101      	movs	r1, #1
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f011 fb9f 	bl	801966c <HAL_SUBGHZ_CADStatusCallback>
 8007f2e:	e003      	b.n	8007f38 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f011 fb9a 	bl	801966c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007f38:	89fb      	ldrh	r3, [r7, #14]
 8007f3a:	0a5b      	lsrs	r3, r3, #9
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f011 fbaf 	bl	80196a8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007f4a:	f107 020c 	add.w	r2, r7, #12
 8007f4e:	2302      	movs	r3, #2
 8007f50:	2102      	movs	r1, #2
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff fe28 	bl	8007ba8 <HAL_SUBGHZ_ExecSetCmd>
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f68:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <SUBGHZSPI_Init+0x3c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a0b      	ldr	r2, [pc, #44]	; (8007f9c <SUBGHZSPI_Init+0x3c>)
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f72:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007f74:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <SUBGHZSPI_Init+0x3c>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007f7c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007f7e:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <SUBGHZSPI_Init+0x3c>)
 8007f80:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007f84:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <SUBGHZSPI_Init+0x3c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <SUBGHZSPI_Init+0x3c>)
 8007f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f90:	6013      	str	r3, [r2, #0]
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr
 8007f9c:	58010000 	.word	0x58010000

08007fa0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007fb0:	4b23      	ldr	r3, [pc, #140]	; (8008040 <SUBGHZSPI_Transmit+0xa0>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	0cdb      	lsrs	r3, r3, #19
 8007fbe:	2264      	movs	r2, #100	; 0x64
 8007fc0:	fb02 f303 	mul.w	r3, r2, r3
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	609a      	str	r2, [r3, #8]
      break;
 8007fd6:	e008      	b.n	8007fea <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007fde:	4b19      	ldr	r3, [pc, #100]	; (8008044 <SUBGHZSPI_Transmit+0xa4>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d1ed      	bne.n	8007fc6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007fea:	4b17      	ldr	r3, [pc, #92]	; (8008048 <SUBGHZSPI_Transmit+0xa8>)
 8007fec:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	78fa      	ldrb	r2, [r7, #3]
 8007ff2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ff4:	4b12      	ldr	r3, [pc, #72]	; (8008040 <SUBGHZSPI_Transmit+0xa0>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	0cdb      	lsrs	r3, r3, #19
 8008002:	2264      	movs	r2, #100	; 0x64
 8008004:	fb02 f303 	mul.w	r3, r2, r3
 8008008:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	609a      	str	r2, [r3, #8]
      break;
 800801a:	e008      	b.n	800802e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008022:	4b08      	ldr	r3, [pc, #32]	; (8008044 <SUBGHZSPI_Transmit+0xa4>)
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b01      	cmp	r3, #1
 800802c:	d1ed      	bne.n	800800a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <SUBGHZSPI_Transmit+0xa4>)
 8008030:	68db      	ldr	r3, [r3, #12]

  return status;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000000 	.word	0x20000000
 8008044:	58010000 	.word	0x58010000
 8008048:	5801000c 	.word	0x5801000c

0800804c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800805a:	4b25      	ldr	r3, [pc, #148]	; (80080f0 <SUBGHZSPI_Receive+0xa4>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	0cdb      	lsrs	r3, r3, #19
 8008068:	2264      	movs	r2, #100	; 0x64
 800806a:	fb02 f303 	mul.w	r3, r2, r3
 800806e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	609a      	str	r2, [r3, #8]
      break;
 8008080:	e008      	b.n	8008094 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3b01      	subs	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008088:	4b1a      	ldr	r3, [pc, #104]	; (80080f4 <SUBGHZSPI_Receive+0xa8>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d1ed      	bne.n	8008070 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008094:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <SUBGHZSPI_Receive+0xac>)
 8008096:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	22ff      	movs	r2, #255	; 0xff
 800809c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800809e:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <SUBGHZSPI_Receive+0xa4>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	1a9b      	subs	r3, r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	0cdb      	lsrs	r3, r3, #19
 80080ac:	2264      	movs	r2, #100	; 0x64
 80080ae:	fb02 f303 	mul.w	r3, r2, r3
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	609a      	str	r2, [r3, #8]
      break;
 80080c4:	e008      	b.n	80080d8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80080cc:	4b09      	ldr	r3, [pc, #36]	; (80080f4 <SUBGHZSPI_Receive+0xa8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d1ed      	bne.n	80080b4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80080d8:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <SUBGHZSPI_Receive+0xa8>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	701a      	strb	r2, [r3, #0]

  return status;
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000000 	.word	0x20000000
 80080f4:	58010000 	.word	0x58010000
 80080f8:	5801000c 	.word	0x5801000c

080080fc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	791b      	ldrb	r3, [r3, #4]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d111      	bne.n	8008130 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <SUBGHZ_CheckDeviceReady+0x44>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	4613      	mov	r3, r2
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	4413      	add	r3, r2
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	0c1b      	lsrs	r3, r3, #16
 800811a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800811c:	f7ff fbb0 	bl	8007880 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3b01      	subs	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f9      	bne.n	8008120 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800812c:	f7ff fb98 	bl	8007860 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f807 	bl	8008144 <SUBGHZ_WaitOnBusy>
 8008136:	4603      	mov	r3, r0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20000000 	.word	0x20000000

08008144 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008150:	4b12      	ldr	r3, [pc, #72]	; (800819c <SUBGHZ_WaitOnBusy+0x58>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	4413      	add	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	0d1b      	lsrs	r3, r3, #20
 800815e:	2264      	movs	r2, #100	; 0x64
 8008160:	fb02 f303 	mul.w	r3, r2, r3
 8008164:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008166:	f7ff fbb9 	bl	80078dc <LL_PWR_IsActiveFlag_RFBUSYMS>
 800816a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	609a      	str	r2, [r3, #8]
      break;
 800817c:	e009      	b.n	8008192 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3b01      	subs	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008184:	f7ff fb98 	bl	80078b8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	4013      	ands	r3, r2
 800818e:	2b01      	cmp	r3, #1
 8008190:	d0e9      	beq.n	8008166 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000000 	.word	0x20000000

080081a0 <LL_RCC_GetUSARTClockSource>:
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	401a      	ands	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	4313      	orrs	r3, r2
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr

080081c4 <LL_RCC_GetLPUARTClockSource>:
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80081cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4013      	ands	r3, r2
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e042      	b.n	800827a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7fa fb04 	bl	8002814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2224      	movs	r2, #36	; 0x24
 8008210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc4b 	bl	8008ac0 <UART_SetConfig>
 800822a:	4603      	mov	r3, r0
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e022      	b.n	800827a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fe8f 	bl	8008f60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008250:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008260:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 ff15 	bl	80090a2 <UART_CheckIdleState>
 8008278:	4603      	mov	r3, r0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	4613      	mov	r3, r2
 8008290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008298:	2b20      	cmp	r3, #32
 800829a:	d142      	bne.n	8008322 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <HAL_UART_Receive_IT+0x24>
 80082a2:	88fb      	ldrh	r3, [r7, #6]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e03b      	b.n	8008324 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d101      	bne.n	80082ba <HAL_UART_Receive_IT+0x36>
 80082b6:	2302      	movs	r3, #2
 80082b8:	e034      	b.n	8008324 <HAL_UART_Receive_IT+0xa0>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a17      	ldr	r2, [pc, #92]	; (800832c <HAL_UART_Receive_IT+0xa8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01f      	beq.n	8008312 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d018      	beq.n	8008312 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	613b      	str	r3, [r7, #16]
   return(result);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	623b      	str	r3, [r7, #32]
 8008300:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	69f9      	ldr	r1, [r7, #28]
 8008304:	6a3a      	ldr	r2, [r7, #32]
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	61bb      	str	r3, [r7, #24]
   return(result);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e6      	bne.n	80082e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	461a      	mov	r2, r3
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 ffd5 	bl	80092c8 <UART_Start_Receive_IT>
 800831e:	4603      	mov	r3, r0
 8008320:	e000      	b.n	8008324 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008322:	2302      	movs	r3, #2
  }
}
 8008324:	4618      	mov	r0, r3
 8008326:	3728      	adds	r7, #40	; 0x28
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40008000 	.word	0x40008000

08008330 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	; 0x28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008344:	2b20      	cmp	r3, #32
 8008346:	d17a      	bne.n	800843e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_UART_Transmit_DMA+0x24>
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e073      	b.n	8008440 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UART_Transmit_DMA+0x36>
 8008362:	2302      	movs	r3, #2
 8008364:	e06c      	b.n	8008440 <HAL_UART_Transmit_DMA+0x110>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	88fa      	ldrh	r2, [r7, #6]
 8008378:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2221      	movs	r2, #33	; 0x21
 8008390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008398:	2b00      	cmp	r3, #0
 800839a:	d02c      	beq.n	80083f6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a0:	4a29      	ldr	r2, [pc, #164]	; (8008448 <HAL_UART_Transmit_DMA+0x118>)
 80083a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a8:	4a28      	ldr	r2, [pc, #160]	; (800844c <HAL_UART_Transmit_DMA+0x11c>)
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b0:	4a27      	ldr	r2, [pc, #156]	; (8008450 <HAL_UART_Transmit_DMA+0x120>)
 80083b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b8:	2200      	movs	r2, #0
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c4:	4619      	mov	r1, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3328      	adds	r3, #40	; 0x28
 80083cc:	461a      	mov	r2, r3
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	f7fc f8bc 	bl	800454c <HAL_DMA_Start_IT>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00d      	beq.n	80083f6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2210      	movs	r2, #16
 80083de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2220      	movs	r2, #32
 80083ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e024      	b.n	8008440 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2240      	movs	r2, #64	; 0x40
 80083fc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	613b      	str	r3, [r7, #16]
   return(result);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008426:	623a      	str	r2, [r7, #32]
 8008428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	69f9      	ldr	r1, [r7, #28]
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	61bb      	str	r3, [r7, #24]
   return(result);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e5      	bne.n	8008406 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	e000      	b.n	8008440 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800843e:	2302      	movs	r3, #2
  }
}
 8008440:	4618      	mov	r0, r3
 8008442:	3728      	adds	r7, #40	; 0x28
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	08009617 	.word	0x08009617
 800844c:	080096b1 	.word	0x080096b1
 8008450:	080096cd 	.word	0x080096cd

08008454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b0ba      	sub	sp, #232	; 0xe8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800847a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800847e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008482:	4013      	ands	r3, r2
 8008484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d11b      	bne.n	80084c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d015      	beq.n	80084c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 82d6 	beq.w	8008a6a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
      }
      return;
 80084c6:	e2d0      	b.n	8008a6a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 811f 	beq.w	8008710 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084d6:	4b8b      	ldr	r3, [pc, #556]	; (8008704 <HAL_UART_IRQHandler+0x2b0>)
 80084d8:	4013      	ands	r3, r2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d106      	bne.n	80084ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084e2:	4b89      	ldr	r3, [pc, #548]	; (8008708 <HAL_UART_IRQHandler+0x2b4>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8112 	beq.w	8008710 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d011      	beq.n	800851c <HAL_UART_IRQHandler+0xc8>
 80084f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2201      	movs	r2, #1
 800850a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008512:	f043 0201 	orr.w	r2, r3, #1
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800851c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d011      	beq.n	800854c <HAL_UART_IRQHandler+0xf8>
 8008528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2202      	movs	r2, #2
 800853a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008542:	f043 0204 	orr.w	r2, r3, #4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d011      	beq.n	800857c <HAL_UART_IRQHandler+0x128>
 8008558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2204      	movs	r2, #4
 800856a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008572:	f043 0202 	orr.w	r2, r3, #2
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d017      	beq.n	80085b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008594:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008598:	4b5a      	ldr	r3, [pc, #360]	; (8008704 <HAL_UART_IRQHandler+0x2b0>)
 800859a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2208      	movs	r2, #8
 80085a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ae:	f043 0208 	orr.w	r2, r3, #8
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d012      	beq.n	80085ea <HAL_UART_IRQHandler+0x196>
 80085c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e0:	f043 0220 	orr.w	r2, r3, #32
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 823c 	beq.w	8008a6e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d013      	beq.n	800862a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d105      	bne.n	800861a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800860e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d005      	beq.n	800864e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800864a:	2b00      	cmp	r3, #0
 800864c:	d04f      	beq.n	80086ee <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 ff7c 	bl	800954c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d141      	bne.n	80086e6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008670:	e853 3f00 	ldrex	r3, [r3]
 8008674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800867c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3308      	adds	r3, #8
 800868a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800868e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800869a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1d9      	bne.n	8008662 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d013      	beq.n	80086de <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ba:	4a14      	ldr	r2, [pc, #80]	; (800870c <HAL_UART_IRQHandler+0x2b8>)
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fc f81e 	bl	8004704 <HAL_DMA_Abort_IT>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d017      	beq.n	80086fe <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086dc:	e00f      	b.n	80086fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f9d9 	bl	8008a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e4:	e00b      	b.n	80086fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9d5 	bl	8008a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ec:	e007      	b.n	80086fe <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9d1 	bl	8008a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80086fc:	e1b7      	b.n	8008a6e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fe:	bf00      	nop
    return;
 8008700:	e1b5      	b.n	8008a6e <HAL_UART_IRQHandler+0x61a>
 8008702:	bf00      	nop
 8008704:	10000001 	.word	0x10000001
 8008708:	04000120 	.word	0x04000120
 800870c:	0800974d 	.word	0x0800974d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008714:	2b01      	cmp	r3, #1
 8008716:	f040 814a 	bne.w	80089ae <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 8143 	beq.w	80089ae <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 813c 	beq.w	80089ae <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2210      	movs	r2, #16
 800873c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008748:	2b40      	cmp	r3, #64	; 0x40
 800874a:	f040 80b5 	bne.w	80088b8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800875a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8187 	beq.w	8008a72 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800876a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800876e:	429a      	cmp	r2, r3
 8008770:	f080 817f 	bcs.w	8008a72 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800877a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	f040 8086 	bne.w	800889c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1da      	bne.n	8008790 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3308      	adds	r3, #8
 80087fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e1      	bne.n	80087da <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3308      	adds	r3, #8
 800881c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008820:	e853 3f00 	ldrex	r3, [r3]
 8008824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800883a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800883c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1e3      	bne.n	8008816 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2220      	movs	r2, #32
 8008852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800886a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886c:	f023 0310 	bic.w	r3, r3, #16
 8008870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008880:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008884:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800888c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e4      	bne.n	800885c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008896:	4618      	mov	r0, r3
 8008898:	f7fb fed6 	bl	8004648 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f8f9 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088b6:	e0dc      	b.n	8008a72 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80ce 	beq.w	8008a76 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80088da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 80c9 	beq.w	8008a76 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008906:	647b      	str	r3, [r7, #68]	; 0x44
 8008908:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800890c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e4      	bne.n	80088e4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3308      	adds	r3, #8
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	623b      	str	r3, [r7, #32]
   return(result);
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008942:	633a      	str	r2, [r7, #48]	; 0x30
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e1      	bne.n	800891a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	60fb      	str	r3, [r7, #12]
   return(result);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0310 	bic.w	r3, r3, #16
 800897e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	617b      	str	r3, [r7, #20]
   return(result);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e4      	bne.n	800896a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f87e 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089ac:	e063      	b.n	8008a76 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00e      	beq.n	80089d8 <HAL_UART_IRQHandler+0x584>
 80089ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d008      	beq.n	80089d8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fb59 	bl	800a088 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d6:	e051      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d014      	beq.n	8008a0e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d008      	beq.n	8008a0e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d03a      	beq.n	8008a7a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
    }
    return;
 8008a0c:	e035      	b.n	8008a7a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d009      	beq.n	8008a2e <HAL_UART_IRQHandler+0x5da>
 8008a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fea6 	bl	8009778 <UART_EndTransmit_IT>
    return;
 8008a2c:	e026      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <HAL_UART_IRQHandler+0x5fa>
 8008a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fb30 	bl	800a0ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a4c:	e016      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d010      	beq.n	8008a7c <HAL_UART_IRQHandler+0x628>
 8008a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da0c      	bge.n	8008a7c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fb19 	bl	800a09a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a68:	e008      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
      return;
 8008a6a:	bf00      	nop
 8008a6c:	e006      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
    return;
 8008a6e:	bf00      	nop
 8008a70:	e004      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
      return;
 8008a72:	bf00      	nop
 8008a74:	e002      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
      return;
 8008a76:	bf00      	nop
 8008a78:	e000      	b.n	8008a7c <HAL_UART_IRQHandler+0x628>
    return;
 8008a7a:	bf00      	nop
  }
}
 8008a7c:	37e8      	adds	r7, #232	; 0xe8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop

08008a84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr

08008a96 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr
	...

08008ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	4bab      	ldr	r3, [pc, #684]	; (8008d98 <UART_SetConfig+0x2d8>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	69f9      	ldr	r1, [r7, #28]
 8008af4:	430b      	orrs	r3, r1
 8008af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4aa0      	ldr	r2, [pc, #640]	; (8008d9c <UART_SetConfig+0x2dc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d004      	beq.n	8008b28 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	69f9      	ldr	r1, [r7, #28]
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	f023 010f 	bic.w	r1, r3, #15
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a91      	ldr	r2, [pc, #580]	; (8008da0 <UART_SetConfig+0x2e0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d122      	bne.n	8008ba6 <UART_SetConfig+0xe6>
 8008b60:	2003      	movs	r0, #3
 8008b62:	f7ff fb1d 	bl	80081a0 <LL_RCC_GetUSARTClockSource>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d817      	bhi.n	8008ba0 <UART_SetConfig+0xe0>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0xb8>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b95 	.word	0x08008b95
 8008b80:	08008b8f 	.word	0x08008b8f
 8008b84:	08008b9b 	.word	0x08008b9b
 8008b88:	2301      	movs	r3, #1
 8008b8a:	76fb      	strb	r3, [r7, #27]
 8008b8c:	e072      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	76fb      	strb	r3, [r7, #27]
 8008b92:	e06f      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008b94:	2304      	movs	r3, #4
 8008b96:	76fb      	strb	r3, [r7, #27]
 8008b98:	e06c      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008b9a:	2308      	movs	r3, #8
 8008b9c:	76fb      	strb	r3, [r7, #27]
 8008b9e:	e069      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	76fb      	strb	r3, [r7, #27]
 8008ba4:	e066      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a7e      	ldr	r2, [pc, #504]	; (8008da4 <UART_SetConfig+0x2e4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d134      	bne.n	8008c1a <UART_SetConfig+0x15a>
 8008bb0:	200c      	movs	r0, #12
 8008bb2:	f7ff faf5 	bl	80081a0 <LL_RCC_GetUSARTClockSource>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008bbc:	2b0c      	cmp	r3, #12
 8008bbe:	d829      	bhi.n	8008c14 <UART_SetConfig+0x154>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <UART_SetConfig+0x108>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008bfd 	.word	0x08008bfd
 8008bcc:	08008c15 	.word	0x08008c15
 8008bd0:	08008c15 	.word	0x08008c15
 8008bd4:	08008c15 	.word	0x08008c15
 8008bd8:	08008c09 	.word	0x08008c09
 8008bdc:	08008c15 	.word	0x08008c15
 8008be0:	08008c15 	.word	0x08008c15
 8008be4:	08008c15 	.word	0x08008c15
 8008be8:	08008c03 	.word	0x08008c03
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c15 	.word	0x08008c15
 8008bf4:	08008c15 	.word	0x08008c15
 8008bf8:	08008c0f 	.word	0x08008c0f
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	76fb      	strb	r3, [r7, #27]
 8008c00:	e038      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c02:	2302      	movs	r3, #2
 8008c04:	76fb      	strb	r3, [r7, #27]
 8008c06:	e035      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	76fb      	strb	r3, [r7, #27]
 8008c0c:	e032      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c0e:	2308      	movs	r3, #8
 8008c10:	76fb      	strb	r3, [r7, #27]
 8008c12:	e02f      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c14:	2310      	movs	r3, #16
 8008c16:	76fb      	strb	r3, [r7, #27]
 8008c18:	e02c      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a5f      	ldr	r2, [pc, #380]	; (8008d9c <UART_SetConfig+0x2dc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d125      	bne.n	8008c70 <UART_SetConfig+0x1b0>
 8008c24:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c28:	f7ff facc 	bl	80081c4 <LL_RCC_GetLPUARTClockSource>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c32:	d017      	beq.n	8008c64 <UART_SetConfig+0x1a4>
 8008c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c38:	d817      	bhi.n	8008c6a <UART_SetConfig+0x1aa>
 8008c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3e:	d00b      	beq.n	8008c58 <UART_SetConfig+0x198>
 8008c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c44:	d811      	bhi.n	8008c6a <UART_SetConfig+0x1aa>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <UART_SetConfig+0x192>
 8008c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4e:	d006      	beq.n	8008c5e <UART_SetConfig+0x19e>
 8008c50:	e00b      	b.n	8008c6a <UART_SetConfig+0x1aa>
 8008c52:	2300      	movs	r3, #0
 8008c54:	76fb      	strb	r3, [r7, #27]
 8008c56:	e00d      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	76fb      	strb	r3, [r7, #27]
 8008c5c:	e00a      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c5e:	2304      	movs	r3, #4
 8008c60:	76fb      	strb	r3, [r7, #27]
 8008c62:	e007      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c64:	2308      	movs	r3, #8
 8008c66:	76fb      	strb	r3, [r7, #27]
 8008c68:	e004      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	76fb      	strb	r3, [r7, #27]
 8008c6e:	e001      	b.n	8008c74 <UART_SetConfig+0x1b4>
 8008c70:	2310      	movs	r3, #16
 8008c72:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a48      	ldr	r2, [pc, #288]	; (8008d9c <UART_SetConfig+0x2dc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	f040 8098 	bne.w	8008db0 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c80:	7efb      	ldrb	r3, [r7, #27]
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d823      	bhi.n	8008cce <UART_SetConfig+0x20e>
 8008c86:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <UART_SetConfig+0x1cc>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008cb1 	.word	0x08008cb1
 8008c90:	08008ccf 	.word	0x08008ccf
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008ccf 	.word	0x08008ccf
 8008c9c:	08008cbf 	.word	0x08008cbf
 8008ca0:	08008ccf 	.word	0x08008ccf
 8008ca4:	08008ccf 	.word	0x08008ccf
 8008ca8:	08008ccf 	.word	0x08008ccf
 8008cac:	08008cc7 	.word	0x08008cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb0:	f7fd ff56 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
 8008cb4:	6178      	str	r0, [r7, #20]
        break;
 8008cb6:	e00f      	b.n	8008cd8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cb8:	4b3b      	ldr	r3, [pc, #236]	; (8008da8 <UART_SetConfig+0x2e8>)
 8008cba:	617b      	str	r3, [r7, #20]
        break;
 8008cbc:	e00c      	b.n	8008cd8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cbe:	f7fd fe9b 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 8008cc2:	6178      	str	r0, [r7, #20]
        break;
 8008cc4:	e008      	b.n	8008cd8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cca:	617b      	str	r3, [r7, #20]
        break;
 8008ccc:	e004      	b.n	8008cd8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	76bb      	strb	r3, [r7, #26]
        break;
 8008cd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8128 	beq.w	8008f30 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	4a31      	ldr	r2, [pc, #196]	; (8008dac <UART_SetConfig+0x2ec>)
 8008ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cea:	461a      	mov	r2, r3
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	4413      	add	r3, r2
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d305      	bcc.n	8008d10 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d902      	bls.n	8008d16 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	76bb      	strb	r3, [r7, #26]
 8008d14:	e10c      	b.n	8008f30 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f04f 0100 	mov.w	r1, #0
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	4a22      	ldr	r2, [pc, #136]	; (8008dac <UART_SetConfig+0x2ec>)
 8008d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	f7f7 ff15 	bl	8000b5c <__aeabi_uldivmod>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4610      	mov	r0, r2
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	020b      	lsls	r3, r1, #8
 8008d44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d48:	0202      	lsls	r2, r0, #8
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	6849      	ldr	r1, [r1, #4]
 8008d4e:	0849      	lsrs	r1, r1, #1
 8008d50:	4608      	mov	r0, r1
 8008d52:	f04f 0100 	mov.w	r1, #0
 8008d56:	1814      	adds	r4, r2, r0
 8008d58:	eb43 0501 	adc.w	r5, r3, r1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	461a      	mov	r2, r3
 8008d62:	f04f 0300 	mov.w	r3, #0
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fef7 	bl	8000b5c <__aeabi_uldivmod>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4613      	mov	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7c:	d308      	bcc.n	8008d90 <UART_SetConfig+0x2d0>
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d84:	d204      	bcs.n	8008d90 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	60da      	str	r2, [r3, #12]
 8008d8e:	e0cf      	b.n	8008f30 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	76bb      	strb	r3, [r7, #26]
 8008d94:	e0cc      	b.n	8008f30 <UART_SetConfig+0x470>
 8008d96:	bf00      	nop
 8008d98:	cfff69f3 	.word	0xcfff69f3
 8008d9c:	40008000 	.word	0x40008000
 8008da0:	40013800 	.word	0x40013800
 8008da4:	40004400 	.word	0x40004400
 8008da8:	00f42400 	.word	0x00f42400
 8008dac:	0801bba0 	.word	0x0801bba0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db8:	d165      	bne.n	8008e86 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008dba:	7efb      	ldrb	r3, [r7, #27]
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d828      	bhi.n	8008e12 <UART_SetConfig+0x352>
 8008dc0:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x308>)
 8008dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc6:	bf00      	nop
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	08008dfd 	.word	0x08008dfd
 8008dd4:	08008e13 	.word	0x08008e13
 8008dd8:	08008e03 	.word	0x08008e03
 8008ddc:	08008e13 	.word	0x08008e13
 8008de0:	08008e13 	.word	0x08008e13
 8008de4:	08008e13 	.word	0x08008e13
 8008de8:	08008e0b 	.word	0x08008e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dec:	f7fd feb8 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
 8008df0:	6178      	str	r0, [r7, #20]
        break;
 8008df2:	e013      	b.n	8008e1c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008df4:	f7fd fec6 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 8008df8:	6178      	str	r0, [r7, #20]
        break;
 8008dfa:	e00f      	b.n	8008e1c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dfc:	4b56      	ldr	r3, [pc, #344]	; (8008f58 <UART_SetConfig+0x498>)
 8008dfe:	617b      	str	r3, [r7, #20]
        break;
 8008e00:	e00c      	b.n	8008e1c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e02:	f7fd fdf9 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 8008e06:	6178      	str	r0, [r7, #20]
        break;
 8008e08:	e008      	b.n	8008e1c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e0e:	617b      	str	r3, [r7, #20]
        break;
 8008e10:	e004      	b.n	8008e1c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	76bb      	strb	r3, [r7, #26]
        break;
 8008e1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8086 	beq.w	8008f30 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	4a4c      	ldr	r2, [pc, #304]	; (8008f5c <UART_SetConfig+0x49c>)
 8008e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e36:	005a      	lsls	r2, r3, #1
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	441a      	add	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b0f      	cmp	r3, #15
 8008e50:	d916      	bls.n	8008e80 <UART_SetConfig+0x3c0>
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e58:	d212      	bcs.n	8008e80 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f023 030f 	bic.w	r3, r3, #15
 8008e62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f003 0307 	and.w	r3, r3, #7
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	89fb      	ldrh	r3, [r7, #14]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	89fa      	ldrh	r2, [r7, #14]
 8008e7c:	60da      	str	r2, [r3, #12]
 8008e7e:	e057      	b.n	8008f30 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	76bb      	strb	r3, [r7, #26]
 8008e84:	e054      	b.n	8008f30 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e86:	7efb      	ldrb	r3, [r7, #27]
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d828      	bhi.n	8008ede <UART_SetConfig+0x41e>
 8008e8c:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <UART_SetConfig+0x3d4>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008eb9 	.word	0x08008eb9
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008ec9 	.word	0x08008ec9
 8008ea0:	08008edf 	.word	0x08008edf
 8008ea4:	08008ecf 	.word	0x08008ecf
 8008ea8:	08008edf 	.word	0x08008edf
 8008eac:	08008edf 	.word	0x08008edf
 8008eb0:	08008edf 	.word	0x08008edf
 8008eb4:	08008ed7 	.word	0x08008ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb8:	f7fd fe52 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
 8008ebc:	6178      	str	r0, [r7, #20]
        break;
 8008ebe:	e013      	b.n	8008ee8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ec0:	f7fd fe60 	bl	8006b84 <HAL_RCC_GetPCLK2Freq>
 8008ec4:	6178      	str	r0, [r7, #20]
        break;
 8008ec6:	e00f      	b.n	8008ee8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec8:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <UART_SetConfig+0x498>)
 8008eca:	617b      	str	r3, [r7, #20]
        break;
 8008ecc:	e00c      	b.n	8008ee8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ece:	f7fd fd93 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 8008ed2:	6178      	str	r0, [r7, #20]
        break;
 8008ed4:	e008      	b.n	8008ee8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eda:	617b      	str	r3, [r7, #20]
        break;
 8008edc:	e004      	b.n	8008ee8 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	76bb      	strb	r3, [r7, #26]
        break;
 8008ee6:	bf00      	nop
    }

    if (pclk != 0U)
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d020      	beq.n	8008f30 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	4a1a      	ldr	r2, [pc, #104]	; (8008f5c <UART_SetConfig+0x49c>)
 8008ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	441a      	add	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b0f      	cmp	r3, #15
 8008f18:	d908      	bls.n	8008f2c <UART_SetConfig+0x46c>
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f20:	d204      	bcs.n	8008f2c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	60da      	str	r2, [r3, #12]
 8008f2a:	e001      	b.n	8008f30 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bdb0      	pop	{r4, r5, r7, pc}
 8008f56:	bf00      	nop
 8008f58:	00f42400 	.word	0x00f42400
 8008f5c:	0801bba0 	.word	0x0801bba0

08008f60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01a      	beq.n	8009076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800905e:	d10a      	bne.n	8009076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	605a      	str	r2, [r3, #4]
  }
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af02      	add	r7, sp, #8
 80090a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090b2:	f7f8 ffbf 	bl	8002034 <HAL_GetTick>
 80090b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0308 	and.w	r3, r3, #8
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	d10e      	bne.n	80090e4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f82f 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e025      	b.n	8009130 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0304 	and.w	r3, r3, #4
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d10e      	bne.n	8009110 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f819 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e00f      	b.n	8009130 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b09c      	sub	sp, #112	; 0x70
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	4613      	mov	r3, r2
 8009146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009148:	e0a9      	b.n	800929e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800914a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800914c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009150:	f000 80a5 	beq.w	800929e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009154:	f7f8 ff6e 	bl	8002034 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009160:	429a      	cmp	r2, r3
 8009162:	d302      	bcc.n	800916a <UART_WaitOnFlagUntilTimeout+0x32>
 8009164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009166:	2b00      	cmp	r3, #0
 8009168:	d140      	bne.n	80091ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800917e:	667b      	str	r3, [r7, #100]	; 0x64
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800918a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800918e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e6      	bne.n	800916a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3308      	adds	r3, #8
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	f023 0301 	bic.w	r3, r3, #1
 80091b2:	663b      	str	r3, [r7, #96]	; 0x60
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3308      	adds	r3, #8
 80091ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80091be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e5      	bne.n	800919c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2220      	movs	r2, #32
 80091dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e069      	b.n	80092c0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d051      	beq.n	800929e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009208:	d149      	bne.n	800929e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009212:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
 8009234:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e6      	bne.n	8009214 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	613b      	str	r3, [r7, #16]
   return(result);
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	66bb      	str	r3, [r7, #104]	; 0x68
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009266:	623a      	str	r2, [r7, #32]
 8009268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	69f9      	ldr	r1, [r7, #28]
 800926c:	6a3a      	ldr	r2, [r7, #32]
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	61bb      	str	r3, [r7, #24]
   return(result);
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e5      	bne.n	8009246 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2220      	movs	r2, #32
 800928e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e010      	b.n	80092c0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69da      	ldr	r2, [r3, #28]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4013      	ands	r3, r2
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	bf0c      	ite	eq
 80092ae:	2301      	moveq	r3, #1
 80092b0:	2300      	movne	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	461a      	mov	r2, r3
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	f43f af46 	beq.w	800914a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3770      	adds	r7, #112	; 0x70
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b09d      	sub	sp, #116	; 0x74
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	88fa      	ldrh	r2, [r7, #6]
 80092e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	88fa      	ldrh	r2, [r7, #6]
 80092e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fa:	d10e      	bne.n	800931a <UART_Start_Receive_IT+0x52>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d105      	bne.n	8009310 <UART_Start_Receive_IT+0x48>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f240 12ff 	movw	r2, #511	; 0x1ff
 800930a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800930e:	e02d      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	22ff      	movs	r2, #255	; 0xff
 8009314:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009318:	e028      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10d      	bne.n	800933e <UART_Start_Receive_IT+0x76>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d104      	bne.n	8009334 <UART_Start_Receive_IT+0x6c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	22ff      	movs	r2, #255	; 0xff
 800932e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009332:	e01b      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	227f      	movs	r2, #127	; 0x7f
 8009338:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800933c:	e016      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009346:	d10d      	bne.n	8009364 <UART_Start_Receive_IT+0x9c>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <UART_Start_Receive_IT+0x92>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	227f      	movs	r2, #127	; 0x7f
 8009354:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009358:	e008      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	223f      	movs	r2, #63	; 0x3f
 800935e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009362:	e003      	b.n	800936c <UART_Start_Receive_IT+0xa4>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2200      	movs	r2, #0
 8009368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2222      	movs	r2, #34	; 0x22
 8009378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009386:	e853 3f00 	ldrex	r3, [r3]
 800938a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800938c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938e:	f043 0301 	orr.w	r3, r3, #1
 8009392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800939c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800939e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093a4:	e841 2300 	strex	r3, r2, [r1]
 80093a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80093aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e5      	bne.n	800937c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b8:	d14d      	bne.n	8009456 <UART_Start_Receive_IT+0x18e>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093c0:	88fa      	ldrh	r2, [r7, #6]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d347      	bcc.n	8009456 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ce:	d107      	bne.n	80093e0 <UART_Start_Receive_IT+0x118>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d103      	bne.n	80093e0 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4a38      	ldr	r2, [pc, #224]	; (80094bc <UART_Start_Receive_IT+0x1f4>)
 80093dc:	671a      	str	r2, [r3, #112]	; 0x70
 80093de:	e002      	b.n	80093e6 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a37      	ldr	r2, [pc, #220]	; (80094c0 <UART_Start_Receive_IT+0x1f8>)
 80093e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009402:	66bb      	str	r3, [r7, #104]	; 0x68
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800940c:	64bb      	str	r3, [r7, #72]	; 0x48
 800940e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800941a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e6      	bne.n	80093ee <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3308      	adds	r3, #8
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009436:	667b      	str	r3, [r7, #100]	; 0x64
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009440:	637a      	str	r2, [r7, #52]	; 0x34
 8009442:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009448:	e841 2300 	strex	r3, r2, [r1]
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800944e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e5      	bne.n	8009420 <UART_Start_Receive_IT+0x158>
 8009454:	e02c      	b.n	80094b0 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945e:	d107      	bne.n	8009470 <UART_Start_Receive_IT+0x1a8>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d103      	bne.n	8009470 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4a16      	ldr	r2, [pc, #88]	; (80094c4 <UART_Start_Receive_IT+0x1fc>)
 800946c:	671a      	str	r2, [r3, #112]	; 0x70
 800946e:	e002      	b.n	8009476 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <UART_Start_Receive_IT+0x200>)
 8009474:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	613b      	str	r3, [r7, #16]
   return(result);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009492:	663b      	str	r3, [r7, #96]	; 0x60
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800949c:	623b      	str	r3, [r7, #32]
 800949e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	69f9      	ldr	r1, [r7, #28]
 80094a2:	6a3a      	ldr	r2, [r7, #32]
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3774      	adds	r7, #116	; 0x74
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr
 80094bc:	08009d89 	.word	0x08009d89
 80094c0:	08009a91 	.word	0x08009a91
 80094c4:	0800992f 	.word	0x0800992f
 80094c8:	080097cf 	.word	0x080097cf

080094cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b08f      	sub	sp, #60	; 0x3c
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e6      	bne.n	80094d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3308      	adds	r3, #8
 800950c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	60bb      	str	r3, [r7, #8]
   return(result);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800951c:	633b      	str	r3, [r7, #48]	; 0x30
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009526:	61ba      	str	r2, [r7, #24]
 8009528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	613b      	str	r3, [r7, #16]
   return(result);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e5      	bne.n	8009506 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009542:	bf00      	nop
 8009544:	373c      	adds	r7, #60	; 0x3c
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b095      	sub	sp, #84	; 0x54
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009572:	643b      	str	r3, [r7, #64]	; 0x40
 8009574:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800957a:	e841 2300 	strex	r3, r2, [r1]
 800957e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e6      	bne.n	8009554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3308      	adds	r3, #8
 800958c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958e:	6a3b      	ldr	r3, [r7, #32]
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	61fb      	str	r3, [r7, #28]
   return(result);
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3308      	adds	r3, #8
 80095a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e3      	bne.n	8009586 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d118      	bne.n	80095f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	f023 0310 	bic.w	r3, r3, #16
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	6979      	ldr	r1, [r7, #20]
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	613b      	str	r3, [r7, #16]
   return(result);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e6      	bne.n	80095c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800960c:	bf00      	nop
 800960e:	3754      	adds	r7, #84	; 0x54
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr

08009616 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b090      	sub	sp, #64	; 0x40
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d137      	bne.n	80096a2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009634:	2200      	movs	r2, #0
 8009636:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800963a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	623b      	str	r3, [r7, #32]
   return(result);
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009650:	63bb      	str	r3, [r7, #56]	; 0x38
 8009652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800965a:	633a      	str	r2, [r7, #48]	; 0x30
 800965c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e5      	bne.n	800963a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800966e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	60fb      	str	r3, [r7, #12]
   return(result);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009682:	637b      	str	r3, [r7, #52]	; 0x34
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	69b9      	ldr	r1, [r7, #24]
 8009692:	69fa      	ldr	r2, [r7, #28]
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	617b      	str	r3, [r7, #20]
   return(result);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e6      	bne.n	800966e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096a0:	e002      	b.n	80096a8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80096a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80096a4:	f7f9 fa22 	bl	8002aec <HAL_UART_TxCpltCallback>
}
 80096a8:	bf00      	nop
 80096aa:	3740      	adds	r7, #64	; 0x40
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff f9e0 	bl	8008a84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096c4:	bf00      	nop
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f4:	2b80      	cmp	r3, #128	; 0x80
 80096f6:	d109      	bne.n	800970c <UART_DMAError+0x40>
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	2b21      	cmp	r3, #33	; 0x21
 80096fc:	d106      	bne.n	800970c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2200      	movs	r2, #0
 8009702:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009706:	6978      	ldr	r0, [r7, #20]
 8009708:	f7ff fee0 	bl	80094cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009716:	2b40      	cmp	r3, #64	; 0x40
 8009718:	d109      	bne.n	800972e <UART_DMAError+0x62>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b22      	cmp	r3, #34	; 0x22
 800971e:	d106      	bne.n	800972e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2200      	movs	r2, #0
 8009724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009728:	6978      	ldr	r0, [r7, #20]
 800972a:	f7ff ff0f 	bl	800954c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009734:	f043 0210 	orr.w	r2, r3, #16
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800973e:	6978      	ldr	r0, [r7, #20]
 8009740:	f7ff f9a9 	bl	8008a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009744:	bf00      	nop
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff f993 	bl	8008a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009770:	bf00      	nop
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	e853 3f00 	ldrex	r3, [r3]
 800978c:	60bb      	str	r3, [r7, #8]
   return(result);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6979      	ldr	r1, [r7, #20]
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	613b      	str	r3, [r7, #16]
   return(result);
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e6      	bne.n	8009780 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7f9 f993 	bl	8002aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097c6:	bf00      	nop
 80097c8:	3720      	adds	r7, #32
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b096      	sub	sp, #88	; 0x58
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e6:	2b22      	cmp	r3, #34	; 0x22
 80097e8:	f040 8095 	bne.w	8009916 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097f6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80097fa:	b2d9      	uxtb	r1, r3
 80097fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009800:	b2da      	uxtb	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	400a      	ands	r2, r1
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	b29a      	uxth	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d178      	bne.n	8009926 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009848:	653b      	str	r3, [r7, #80]	; 0x50
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009852:	647b      	str	r3, [r7, #68]	; 0x44
 8009854:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e6      	bne.n	8009834 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3308      	adds	r3, #8
 800986c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	623b      	str	r3, [r7, #32]
   return(result);
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	f023 0301 	bic.w	r3, r3, #1
 800987c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3308      	adds	r3, #8
 8009884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009886:	633a      	str	r2, [r7, #48]	; 0x30
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800988c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e5      	bne.n	8009866 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d12e      	bne.n	800990e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	e853 3f00 	ldrex	r3, [r3]
 80098c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0310 	bic.w	r3, r3, #16
 80098ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	69b9      	ldr	r1, [r7, #24]
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	e841 2300 	strex	r3, r2, [r1]
 80098e0:	617b      	str	r3, [r7, #20]
   return(result);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e6      	bne.n	80098b6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	f003 0310 	and.w	r3, r3, #16
 80098f2:	2b10      	cmp	r3, #16
 80098f4:	d103      	bne.n	80098fe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2210      	movs	r2, #16
 80098fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff f8ce 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800990c:	e00b      	b.n	8009926 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7f9 f8fa 	bl	8002b08 <HAL_UART_RxCpltCallback>
}
 8009914:	e007      	b.n	8009926 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	699a      	ldr	r2, [r3, #24]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0208 	orr.w	r2, r2, #8
 8009924:	619a      	str	r2, [r3, #24]
}
 8009926:	bf00      	nop
 8009928:	3758      	adds	r7, #88	; 0x58
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b096      	sub	sp, #88	; 0x58
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800993c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	2b22      	cmp	r3, #34	; 0x22
 8009948:	f040 8095 	bne.w	8009a76 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800995c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009960:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009964:	4013      	ands	r3, r2
 8009966:	b29a      	uxth	r2, r3
 8009968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800996a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009970:	1c9a      	adds	r2, r3, #2
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800998e:	b29b      	uxth	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d178      	bne.n	8009a86 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b2:	643b      	str	r3, [r7, #64]	; 0x40
 80099b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e6      	bne.n	8009994 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3308      	adds	r3, #8
 80099cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	f023 0301 	bic.w	r3, r3, #1
 80099dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3308      	adds	r3, #8
 80099e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e5      	bne.n	80099c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d12e      	bne.n	8009a6e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f023 0310 	bic.w	r3, r3, #16
 8009a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a34:	61bb      	str	r3, [r7, #24]
 8009a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6979      	ldr	r1, [r7, #20]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	613b      	str	r3, [r7, #16]
   return(result);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e6      	bne.n	8009a16 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	f003 0310 	and.w	r3, r3, #16
 8009a52:	2b10      	cmp	r3, #16
 8009a54:	d103      	bne.n	8009a5e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2210      	movs	r2, #16
 8009a5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff f81e 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a6c:	e00b      	b.n	8009a86 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7f9 f84a 	bl	8002b08 <HAL_UART_RxCpltCallback>
}
 8009a74:	e007      	b.n	8009a86 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699a      	ldr	r2, [r3, #24]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f042 0208 	orr.w	r2, r2, #8
 8009a84:	619a      	str	r2, [r3, #24]
}
 8009a86:	bf00      	nop
 8009a88:	3758      	adds	r7, #88	; 0x58
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b0a6      	sub	sp, #152	; 0x98
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a9e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	2b22      	cmp	r3, #34	; 0x22
 8009ac8:	f040 814f 	bne.w	8009d6a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ad2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ad6:	e0f6      	b.n	8009cc6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ae2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009ae6:	b2d9      	uxtb	r1, r3
 8009ae8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	400a      	ands	r2, r1
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d053      	beq.n	8009bd2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d011      	beq.n	8009b5a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00b      	beq.n	8009b5a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2201      	movs	r2, #1
 8009b48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b50:	f043 0201 	orr.w	r2, r3, #1
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d011      	beq.n	8009b8a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00b      	beq.n	8009b8a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2202      	movs	r2, #2
 8009b78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b80:	f043 0204 	orr.w	r2, r3, #4
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b8e:	f003 0304 	and.w	r3, r3, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d011      	beq.n	8009bba <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2204      	movs	r2, #4
 8009ba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb0:	f043 0202 	orr.w	r2, r3, #2
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d006      	beq.n	8009bd2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe ff66 	bl	8008a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d173      	bne.n	8009cc6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009be6:	e853 3f00 	ldrex	r3, [r3]
 8009bea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c02:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e4      	bne.n	8009bde <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c1e:	e853 3f00 	ldrex	r3, [r3]
 8009c22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c2a:	f023 0301 	bic.w	r3, r3, #1
 8009c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3308      	adds	r3, #8
 8009c36:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c38:	657a      	str	r2, [r7, #84]	; 0x54
 8009c3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c40:	e841 2300 	strex	r3, r2, [r1]
 8009c44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1e3      	bne.n	8009c14 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d12e      	bne.n	8009cc0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	f023 0310 	bic.w	r3, r3, #16
 8009c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c86:	643b      	str	r3, [r7, #64]	; 0x40
 8009c88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e6      	bne.n	8009c68 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f003 0310 	and.w	r3, r3, #16
 8009ca4:	2b10      	cmp	r3, #16
 8009ca6:	d103      	bne.n	8009cb0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2210      	movs	r2, #16
 8009cae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7fe fef5 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009cbe:	e002      	b.n	8009cc6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f7f8 ff21 	bl	8002b08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cc6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d006      	beq.n	8009cdc <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f47f aefe 	bne.w	8009ad8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ce2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ce6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d045      	beq.n	8009d7a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009cf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d23e      	bcs.n	8009d7a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3308      	adds	r3, #8
 8009d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d12:	673b      	str	r3, [r7, #112]	; 0x70
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e5      	bne.n	8009cfc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a14      	ldr	r2, [pc, #80]	; (8009d84 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009d34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f043 0320 	orr.w	r3, r3, #32
 8009d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	6979      	ldr	r1, [r7, #20]
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	613b      	str	r3, [r7, #16]
   return(result);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e6      	bne.n	8009d36 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d68:	e007      	b.n	8009d7a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	699a      	ldr	r2, [r3, #24]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f042 0208 	orr.w	r2, r2, #8
 8009d78:	619a      	str	r2, [r3, #24]
}
 8009d7a:	bf00      	nop
 8009d7c:	3798      	adds	r7, #152	; 0x98
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	080097cf 	.word	0x080097cf

08009d88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b0a8      	sub	sp, #160	; 0xa0
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d96:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbe:	2b22      	cmp	r3, #34	; 0x22
 8009dc0:	f040 8153 	bne.w	800a06a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009dca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dce:	e0fa      	b.n	8009fc6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009de2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009de6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009dea:	4013      	ands	r3, r2
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009df2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df8:	1c9a      	adds	r2, r3, #2
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e1e:	f003 0307 	and.w	r3, r3, #7
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d053      	beq.n	8009ece <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2201      	movs	r2, #1
 8009e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e4c:	f043 0201 	orr.w	r2, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e5a:	f003 0302 	and.w	r3, r3, #2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d011      	beq.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2202      	movs	r2, #2
 8009e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e7c:	f043 0204 	orr.w	r2, r3, #4
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d011      	beq.n	8009eb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eac:	f043 0202 	orr.w	r2, r3, #2
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7fe fde8 	bl	8008a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d175      	bne.n	8009fc6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee2:	e853 3f00 	ldrex	r3, [r3]
 8009ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009efe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f04:	e841 2300 	strex	r3, r2, [r1]
 8009f08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1e4      	bne.n	8009eda <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3308      	adds	r3, #8
 8009f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f26:	f023 0301 	bic.w	r3, r3, #1
 8009f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3308      	adds	r3, #8
 8009f34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f38:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f40:	e841 2300 	strex	r3, r2, [r1]
 8009f44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e1      	bne.n	8009f10 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d12e      	bne.n	8009fc0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f78:	f023 0310 	bic.w	r3, r3, #16
 8009f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f86:	647b      	str	r3, [r7, #68]	; 0x44
 8009f88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e6      	bne.n	8009f68 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69db      	ldr	r3, [r3, #28]
 8009fa0:	f003 0310 	and.w	r3, r3, #16
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	d103      	bne.n	8009fb0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2210      	movs	r2, #16
 8009fae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7fe fd75 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009fbe:	e002      	b.n	8009fc6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7f8 fda1 	bl	8002b08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fc6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <UART_RxISR_16BIT_FIFOEN+0x254>
 8009fce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f47f aefa 	bne.w	8009dd0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fe2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fe6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d045      	beq.n	800a07a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ff4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d23e      	bcs.n	800a07a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3308      	adds	r3, #8
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	623b      	str	r3, [r7, #32]
   return(result);
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a012:	677b      	str	r3, [r7, #116]	; 0x74
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3308      	adds	r3, #8
 800a01a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a01c:	633a      	str	r2, [r7, #48]	; 0x30
 800a01e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e5      	bne.n	8009ffc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a14      	ldr	r2, [pc, #80]	; (800a084 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a034:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	e853 3f00 	ldrex	r3, [r3]
 800a042:	60fb      	str	r3, [r7, #12]
   return(result);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f043 0320 	orr.w	r3, r3, #32
 800a04a:	673b      	str	r3, [r7, #112]	; 0x70
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	461a      	mov	r2, r3
 800a052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	69b9      	ldr	r1, [r7, #24]
 800a05a:	69fa      	ldr	r2, [r7, #28]
 800a05c:	e841 2300 	strex	r3, r2, [r1]
 800a060:	617b      	str	r3, [r7, #20]
   return(result);
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e6      	bne.n	800a036 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a068:	e007      	b.n	800a07a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699a      	ldr	r2, [r3, #24]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0208 	orr.w	r2, r2, #8
 800a078:	619a      	str	r2, [r3, #24]
}
 800a07a:	bf00      	nop
 800a07c:	37a0      	adds	r7, #160	; 0xa0
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	0800992f 	.word	0x0800992f

0800a088 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	bc80      	pop	{r7}
 800a098:	4770      	bx	lr

0800a09a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0a2:	bf00      	nop
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bc80      	pop	{r7}
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr

0800a0be <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b088      	sub	sp, #32
 800a0c2:	af02      	add	r7, sp, #8
 800a0c4:	60f8      	str	r0, [r7, #12]
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d101      	bne.n	800a0de <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e046      	b.n	800a16c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2224      	movs	r2, #36	; 0x24
 800a0ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0201 	bic.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a118:	1d3b      	adds	r3, r7, #4
 800a11a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 f911 	bl	800a346 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0201 	orr.w	r2, r2, #1
 800a132:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a134:	f7f7 ff7e 	bl	8002034 <HAL_GetTick>
 800a138:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a13a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2200      	movs	r2, #0
 800a144:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7fe fff5 	bl	8009138 <UART_WaitOnFlagUntilTimeout>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	75fb      	strb	r3, [r7, #23]
 800a158:	e003      	b.n	800a162 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3718      	adds	r7, #24
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b089      	sub	sp, #36	; 0x24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_UARTEx_EnableStopMode+0x16>
 800a186:	2302      	movs	r3, #2
 800a188:	e021      	b.n	800a1ce <HAL_UARTEx_EnableStopMode+0x5a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	e853 3f00 	ldrex	r3, [r3]
 800a19e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f043 0302 	orr.w	r3, r3, #2
 800a1a6:	61fb      	str	r3, [r7, #28]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b4:	6979      	ldr	r1, [r7, #20]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	e841 2300 	strex	r3, r2, [r1]
 800a1bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1e6      	bne.n	800a192 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3724      	adds	r7, #36	; 0x24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bc80      	pop	{r7}
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d101      	bne.n	800a1ee <HAL_UARTEx_EnableFifoMode+0x16>
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	e02b      	b.n	800a246 <HAL_UARTEx_EnableFifoMode+0x6e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2224      	movs	r2, #36	; 0x24
 800a1fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f022 0201 	bic.w	r2, r2, #1
 800a214:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a21c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a224:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f8ac 	bl	800a38c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d101      	bne.n	800a266 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a262:	2302      	movs	r3, #2
 800a264:	e02d      	b.n	800a2c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2224      	movs	r2, #36	; 0x24
 800a272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f022 0201 	bic.w	r2, r2, #1
 800a28c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f872 	bl	800a38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2220      	movs	r2, #32
 800a2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e02d      	b.n	800a33e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2224      	movs	r2, #36	; 0x24
 800a2ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0201 	bic.w	r2, r2, #1
 800a308:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f834 	bl	800a38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a346:	b480      	push	{r7}
 800a348:	b085      	sub	sp, #20
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	1d3b      	adds	r3, r7, #4
 800a350:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f023 0210 	bic.w	r2, r3, #16
 800a35e:	893b      	ldrh	r3, [r7, #8]
 800a360:	4619      	mov	r1, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a374:	7abb      	ldrb	r3, [r7, #10]
 800a376:	061a      	lsls	r2, r3, #24
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	605a      	str	r2, [r3, #4]
}
 800a380:	bf00      	nop
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	bc80      	pop	{r7}
 800a388:	4770      	bx	lr
	...

0800a38c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d108      	bne.n	800a3ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3ac:	e031      	b.n	800a412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3ae:	2308      	movs	r3, #8
 800a3b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a3b2:	2308      	movs	r3, #8
 800a3b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	0e5b      	lsrs	r3, r3, #25
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	0f5b      	lsrs	r3, r3, #29
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	f003 0307 	and.w	r3, r3, #7
 800a3d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
 800a3d8:	7b3a      	ldrb	r2, [r7, #12]
 800a3da:	4910      	ldr	r1, [pc, #64]	; (800a41c <UARTEx_SetNbDataToProcess+0x90>)
 800a3dc:	5c8a      	ldrb	r2, [r1, r2]
 800a3de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a3e2:	7b3a      	ldrb	r2, [r7, #12]
 800a3e4:	490e      	ldr	r1, [pc, #56]	; (800a420 <UARTEx_SetNbDataToProcess+0x94>)
 800a3e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	7b7a      	ldrb	r2, [r7, #13]
 800a3f8:	4908      	ldr	r1, [pc, #32]	; (800a41c <UARTEx_SetNbDataToProcess+0x90>)
 800a3fa:	5c8a      	ldrb	r2, [r1, r2]
 800a3fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a400:	7b7a      	ldrb	r2, [r7, #13]
 800a402:	4907      	ldr	r1, [pc, #28]	; (800a420 <UARTEx_SetNbDataToProcess+0x94>)
 800a404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a406:	fb93 f3f2 	sdiv	r3, r3, r2
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr
 800a41c:	0801bbb8 	.word	0x0801bbb8
 800a420:	0801bbc0 	.word	0x0801bbc0

0800a424 <CayenneLppReset>:

  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  CayenneLppCursor = 0;
 800a428:	4b03      	ldr	r3, [pc, #12]	; (800a438 <CayenneLppReset+0x14>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	bc80      	pop	{r7}
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	2000025a 	.word	0x2000025a

0800a43c <CayenneLppGetSize>:

uint8_t CayenneLppGetSize(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
 800a440:	4b02      	ldr	r3, [pc, #8]	; (800a44c <CayenneLppGetSize+0x10>)
 800a442:	781b      	ldrb	r3, [r3, #0]
}
 800a444:	4618      	mov	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	bc80      	pop	{r7}
 800a44a:	4770      	bx	lr
 800a44c:	2000025a 	.word	0x2000025a

0800a450 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 800a458:	4b06      	ldr	r3, [pc, #24]	; (800a474 <CayenneLppCopy+0x24>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	461a      	mov	r2, r3
 800a460:	4905      	ldr	r1, [pc, #20]	; (800a478 <CayenneLppCopy+0x28>)
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f00f fb4c 	bl	8019b00 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <CayenneLppCopy+0x24>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	2000025a 	.word	0x2000025a
 800a478:	20000168 	.word	0x20000168

0800a47c <CayenneLppAddDigitalInput>:

uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	460a      	mov	r2, r1
 800a486:	71fb      	strb	r3, [r7, #7]
 800a488:	4613      	mov	r3, r2
 800a48a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a48c:	4b15      	ldr	r3, [pc, #84]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2bef      	cmp	r3, #239	; 0xef
 800a492:	d901      	bls.n	800a498 <CayenneLppAddDigitalInput+0x1c>
  {
    return 0;
 800a494:	2300      	movs	r3, #0
 800a496:	e01f      	b.n	800a4d8 <CayenneLppAddDigitalInput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a498:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	b2d1      	uxtb	r1, r2
 800a4a0:	4a10      	ldr	r2, [pc, #64]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a4a2:	7011      	strb	r1, [r2, #0]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4a10      	ldr	r2, [pc, #64]	; (800a4e8 <CayenneLppAddDigitalInput+0x6c>)
 800a4a8:	79fb      	ldrb	r3, [r7, #7]
 800a4aa:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	b2d1      	uxtb	r1, r2
 800a4b4:	4a0b      	ldr	r2, [pc, #44]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a4b6:	7011      	strb	r1, [r2, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <CayenneLppAddDigitalInput+0x6c>)
 800a4bc:	2100      	movs	r1, #0
 800a4be:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a4c0:	4b08      	ldr	r3, [pc, #32]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	b2d1      	uxtb	r1, r2
 800a4c8:	4a06      	ldr	r2, [pc, #24]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a4ca:	7011      	strb	r1, [r2, #0]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	4a06      	ldr	r2, [pc, #24]	; (800a4e8 <CayenneLppAddDigitalInput+0x6c>)
 800a4d0:	79bb      	ldrb	r3, [r7, #6]
 800a4d2:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
 800a4d4:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <CayenneLppAddDigitalInput+0x68>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bc80      	pop	{r7}
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	2000025a 	.word	0x2000025a
 800a4e8:	20000168 	.word	0x20000168

0800a4ec <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, int16_t celsius)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	460a      	mov	r2, r1
 800a4f6:	71fb      	strb	r3, [r7, #7]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a4fc:	4b20      	ldr	r3, [pc, #128]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2bee      	cmp	r3, #238	; 0xee
 800a502:	d901      	bls.n	800a508 <CayenneLppAddTemperature+0x1c>
  {
    return 0;
 800a504:	2300      	movs	r3, #0
 800a506:	e035      	b.n	800a574 <CayenneLppAddTemperature+0x88>
  }
  int16_t val = celsius * 10;
 800a508:	88bb      	ldrh	r3, [r7, #4]
 800a50a:	461a      	mov	r2, r3
 800a50c:	0092      	lsls	r2, r2, #2
 800a50e:	4413      	add	r3, r2
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	b29b      	uxth	r3, r3
 800a514:	81fb      	strh	r3, [r7, #14]
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a516:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	b2d1      	uxtb	r1, r2
 800a51e:	4a18      	ldr	r2, [pc, #96]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a520:	7011      	strb	r1, [r2, #0]
 800a522:	4619      	mov	r1, r3
 800a524:	4a17      	ldr	r2, [pc, #92]	; (800a584 <CayenneLppAddTemperature+0x98>)
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800a52a:	4b15      	ldr	r3, [pc, #84]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	b2d1      	uxtb	r1, r2
 800a532:	4a13      	ldr	r2, [pc, #76]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a534:	7011      	strb	r1, [r2, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	4b12      	ldr	r3, [pc, #72]	; (800a584 <CayenneLppAddTemperature+0x98>)
 800a53a:	2167      	movs	r1, #103	; 0x67
 800a53c:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a53e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a542:	121b      	asrs	r3, r3, #8
 800a544:	b219      	sxth	r1, r3
 800a546:	4b0e      	ldr	r3, [pc, #56]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	b2d0      	uxtb	r0, r2
 800a54e:	4a0c      	ldr	r2, [pc, #48]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a550:	7010      	strb	r0, [r2, #0]
 800a552:	461a      	mov	r2, r3
 800a554:	b2c9      	uxtb	r1, r1
 800a556:	4b0b      	ldr	r3, [pc, #44]	; (800a584 <CayenneLppAddTemperature+0x98>)
 800a558:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a55a:	4b09      	ldr	r3, [pc, #36]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	b2d1      	uxtb	r1, r2
 800a562:	4a07      	ldr	r2, [pc, #28]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a564:	7011      	strb	r1, [r2, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	89fb      	ldrh	r3, [r7, #14]
 800a56a:	b2d9      	uxtb	r1, r3
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <CayenneLppAddTemperature+0x98>)
 800a56e:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <CayenneLppAddTemperature+0x94>)
 800a572:	781b      	ldrb	r3, [r3, #0]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc80      	pop	{r7}
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	2000025a 	.word	0x2000025a
 800a584:	20000168 	.word	0x20000168

0800a588 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, uint16_t hpa)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	460a      	mov	r2, r1
 800a592:	71fb      	strb	r3, [r7, #7]
 800a594:	4613      	mov	r3, r2
 800a596:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a598:	4b1f      	ldr	r3, [pc, #124]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2bee      	cmp	r3, #238	; 0xee
 800a59e:	d901      	bls.n	800a5a4 <CayenneLppAddBarometricPressure+0x1c>
  {
    return 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	e033      	b.n	800a60c <CayenneLppAddBarometricPressure+0x84>
  }
  hpa *= 10;
 800a5a4:	88bb      	ldrh	r3, [r7, #4]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	0092      	lsls	r2, r2, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	80bb      	strh	r3, [r7, #4]

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a5b0:	4b19      	ldr	r3, [pc, #100]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	1c5a      	adds	r2, r3, #1
 800a5b6:	b2d1      	uxtb	r1, r2
 800a5b8:	4a17      	ldr	r2, [pc, #92]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5ba:	7011      	strb	r1, [r2, #0]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4a17      	ldr	r2, [pc, #92]	; (800a61c <CayenneLppAddBarometricPressure+0x94>)
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800a5c4:	4b14      	ldr	r3, [pc, #80]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	1c5a      	adds	r2, r3, #1
 800a5ca:	b2d1      	uxtb	r1, r2
 800a5cc:	4a12      	ldr	r2, [pc, #72]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5ce:	7011      	strb	r1, [r2, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	4b12      	ldr	r3, [pc, #72]	; (800a61c <CayenneLppAddBarometricPressure+0x94>)
 800a5d4:	2173      	movs	r1, #115	; 0x73
 800a5d6:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa >> 8;
 800a5d8:	88bb      	ldrh	r3, [r7, #4]
 800a5da:	0a1b      	lsrs	r3, r3, #8
 800a5dc:	b299      	uxth	r1, r3
 800a5de:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	b2d0      	uxtb	r0, r2
 800a5e6:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5e8:	7010      	strb	r0, [r2, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	b2c9      	uxtb	r1, r1
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <CayenneLppAddBarometricPressure+0x94>)
 800a5f0:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa;
 800a5f2:	4b09      	ldr	r3, [pc, #36]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	b2d1      	uxtb	r1, r2
 800a5fa:	4a07      	ldr	r2, [pc, #28]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a5fc:	7011      	strb	r1, [r2, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	88bb      	ldrh	r3, [r7, #4]
 800a602:	b2d9      	uxtb	r1, r3
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <CayenneLppAddBarometricPressure+0x94>)
 800a606:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
 800a608:	4b03      	ldr	r3, [pc, #12]	; (800a618 <CayenneLppAddBarometricPressure+0x90>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	2000025a 	.word	0x2000025a
 800a61c:	20000168 	.word	0x20000168

0800a620 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a624:	f7f7 fba6 	bl	8001d74 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a628:	f000 f80a 	bl	800a640 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a62c:	bf00      	nop
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	f00f fe66 	bl	801a308 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a63c:	bf00      	nop
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a646:	2000      	movs	r0, #0
 800a648:	f7f8 fac0 	bl	8002bcc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a64c:	2001      	movs	r0, #1
 800a64e:	f7f8 fabd 	bl	8002bcc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a652:	2002      	movs	r0, #2
 800a654:	f7f8 faba 	bl	8002bcc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a658:	2101      	movs	r1, #1
 800a65a:	2001      	movs	r0, #1
 800a65c:	f7f8 fb66 	bl	8002d2c <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a660:	2300      	movs	r3, #0
 800a662:	9302      	str	r3, [sp, #8]
 800a664:	2301      	movs	r3, #1
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	2301      	movs	r3, #1
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	4b43      	ldr	r3, [pc, #268]	; (800a77c <LoRaWAN_Init+0x13c>)
 800a66e:	2200      	movs	r2, #0
 800a670:	2100      	movs	r1, #0
 800a672:	2002      	movs	r0, #2
 800a674:	f010 fa7c 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a678:	2300      	movs	r3, #0
 800a67a:	9302      	str	r3, [sp, #8]
 800a67c:	2303      	movs	r3, #3
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	2302      	movs	r3, #2
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4b3e      	ldr	r3, [pc, #248]	; (800a780 <LoRaWAN_Init+0x140>)
 800a686:	2200      	movs	r2, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	2002      	movs	r0, #2
 800a68c:	f010 fa70 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a690:	2300      	movs	r3, #0
 800a692:	9302      	str	r3, [sp, #8]
 800a694:	2301      	movs	r3, #1
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	2301      	movs	r3, #1
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4b39      	ldr	r3, [pc, #228]	; (800a784 <LoRaWAN_Init+0x144>)
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	2002      	movs	r0, #2
 800a6a4:	f010 fa64 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	4b36      	ldr	r3, [pc, #216]	; (800a788 <LoRaWAN_Init+0x148>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a6b4:	4835      	ldr	r0, [pc, #212]	; (800a78c <LoRaWAN_Init+0x14c>)
 800a6b6:	f00f ffad 	bl	801a614 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	4b34      	ldr	r3, [pc, #208]	; (800a790 <LoRaWAN_Init+0x150>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f04f 31ff 	mov.w	r1, #4294967295
 800a6c6:	4833      	ldr	r0, [pc, #204]	; (800a794 <LoRaWAN_Init+0x154>)
 800a6c8:	f00f ffa4 	bl	801a614 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	4b31      	ldr	r3, [pc, #196]	; (800a798 <LoRaWAN_Init+0x158>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a6d8:	4830      	ldr	r0, [pc, #192]	; (800a79c <LoRaWAN_Init+0x15c>)
 800a6da:	f00f ff9b 	bl	801a614 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a6de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6e2:	482a      	ldr	r0, [pc, #168]	; (800a78c <LoRaWAN_Init+0x14c>)
 800a6e4:	f010 f8aa 	bl	801a83c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a6e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6ec:	4829      	ldr	r0, [pc, #164]	; (800a794 <LoRaWAN_Init+0x154>)
 800a6ee:	f010 f8a5 	bl	801a83c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a6f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6f6:	4829      	ldr	r0, [pc, #164]	; (800a79c <LoRaWAN_Init+0x15c>)
 800a6f8:	f010 f8a0 	bl	801a83c <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a6fc:	4a28      	ldr	r2, [pc, #160]	; (800a7a0 <LoRaWAN_Init+0x160>)
 800a6fe:	2100      	movs	r1, #0
 800a700:	2004      	movs	r0, #4
 800a702:	f00f fee5 	bl	801a4d0 <UTIL_SEQ_RegTask>
//  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a706:	2100      	movs	r1, #0
 800a708:	2004      	movs	r0, #4
 800a70a:	f00f ff03 	bl	801a514 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a70e:	4a25      	ldr	r2, [pc, #148]	; (800a7a4 <LoRaWAN_Init+0x164>)
 800a710:	2100      	movs	r1, #0
 800a712:	2001      	movs	r0, #1
 800a714:	f00f fedc 	bl	801a4d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a718:	4a23      	ldr	r2, [pc, #140]	; (800a7a8 <LoRaWAN_Init+0x168>)
 800a71a:	2100      	movs	r1, #0
 800a71c:	2002      	movs	r0, #2
 800a71e:	f00f fed7 	bl	801a4d0 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a722:	f000 fa6b 	bl	800abfc <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a726:	4821      	ldr	r0, [pc, #132]	; (800a7ac <LoRaWAN_Init+0x16c>)
 800a728:	f001 fece 	bl	800c4c8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a72c:	4820      	ldr	r0, [pc, #128]	; (800a7b0 <LoRaWAN_Init+0x170>)
 800a72e:	f001 ff17 	bl	800c560 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a732:	481a      	ldr	r0, [pc, #104]	; (800a79c <LoRaWAN_Init+0x15c>)
 800a734:	f00f ffa4 	bl	801a680 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a738:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <LoRaWAN_Init+0x174>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f002 f845 	bl	800c7cc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a742:	4b1d      	ldr	r3, [pc, #116]	; (800a7b8 <LoRaWAN_Init+0x178>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d110      	bne.n	800a76c <LoRaWAN_Init+0x12c>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a74a:	2300      	movs	r3, #0
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <LoRaWAN_Init+0x17c>)
 800a750:	2200      	movs	r2, #0
 800a752:	f04f 31ff 	mov.w	r1, #4294967295
 800a756:	481a      	ldr	r0, [pc, #104]	; (800a7c0 <LoRaWAN_Init+0x180>)
 800a758:	f00f ff5c 	bl	801a614 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a75c:	4919      	ldr	r1, [pc, #100]	; (800a7c4 <LoRaWAN_Init+0x184>)
 800a75e:	4818      	ldr	r0, [pc, #96]	; (800a7c0 <LoRaWAN_Init+0x180>)
 800a760:	f010 f86c 	bl	801a83c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a764:	4816      	ldr	r0, [pc, #88]	; (800a7c0 <LoRaWAN_Init+0x180>)
 800a766:	f00f ff8b 	bl	801a680 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a76a:	e003      	b.n	800a774 <LoRaWAN_Init+0x134>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a76c:	2101      	movs	r1, #1
 800a76e:	2000      	movs	r0, #0
 800a770:	f7f8 fadc 	bl	8002d2c <BSP_PB_Init>
}
 800a774:	bf00      	nop
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	0801b314 	.word	0x0801b314
 800a780:	0801b334 	.word	0x0801b334
 800a784:	0801b354 	.word	0x0801b354
 800a788:	0800aa6d 	.word	0x0800aa6d
 800a78c:	20000368 	.word	0x20000368
 800a790:	0800aa83 	.word	0x0800aa83
 800a794:	20000380 	.word	0x20000380
 800a798:	0800aa99 	.word	0x0800aa99
 800a79c:	20000398 	.word	0x20000398
 800a7a0:	08000e51 	.word	0x08000e51
 800a7a4:	0800c7b9 	.word	0x0800c7b9
 800a7a8:	0800a941 	.word	0x0800a941
 800a7ac:	2000003c 	.word	0x2000003c
 800a7b0:	20000070 	.word	0x20000070
 800a7b4:	20000038 	.word	0x20000038
 800a7b8:	2000025b 	.word	0x2000025b
 800a7bc:	0800aa49 	.word	0x0800aa49
 800a7c0:	2000025c 	.word	0x2000025c
 800a7c4:	004dd1e0 	.word	0x004dd1e0

0800a7c8 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d8:	d007      	beq.n	800a7ea <HAL_GPIO_EXTI_Callback+0x22>
 800a7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7de:	dc09      	bgt.n	800a7f4 <HAL_GPIO_EXTI_Callback+0x2c>
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d009      	beq.n	800a7f8 <HAL_GPIO_EXTI_Callback+0x30>
 800a7e4:	2b40      	cmp	r3, #64	; 0x40
 800a7e6:	d009      	beq.n	800a7fc <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a7e8:	e004      	b.n	800a7f4 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	2002      	movs	r0, #2
 800a7ee:	f00f fe91 	bl	801a514 <UTIL_SEQ_SetTask>
      break;
 800a7f2:	e004      	b.n	800a7fe <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7f4:	bf00      	nop
 800a7f6:	e002      	b.n	800a7fe <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7f8:	bf00      	nop
 800a7fa:	e000      	b.n	800a7fe <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a7fc:	bf00      	nop
  }
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a808:	b5b0      	push	{r4, r5, r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af06      	add	r7, sp, #24
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <OnRxData+0x16>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d078      	beq.n	800a910 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a81e:	2000      	movs	r0, #0
 800a820:	f7f8 fa18 	bl	8002c54 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a824:	483f      	ldr	r0, [pc, #252]	; (800a924 <OnRxData+0x11c>)
 800a826:	f00f ff2b 	bl	801a680 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a82a:	4b3f      	ldr	r3, [pc, #252]	; (800a928 <OnRxData+0x120>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	2100      	movs	r1, #0
 800a830:	2002      	movs	r0, #2
 800a832:	f010 f99d 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a840:	4611      	mov	r1, r2
 800a842:	4a3a      	ldr	r2, [pc, #232]	; (800a92c <OnRxData+0x124>)
 800a844:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	7809      	ldrb	r1, [r1, #0]
 800a84c:	4608      	mov	r0, r1
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a854:	460c      	mov	r4, r1
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a85c:	460d      	mov	r5, r1
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a864:	9105      	str	r1, [sp, #20]
 800a866:	9504      	str	r5, [sp, #16]
 800a868:	9403      	str	r4, [sp, #12]
 800a86a:	9002      	str	r0, [sp, #8]
 800a86c:	9201      	str	r2, [sp, #4]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	4b2f      	ldr	r3, [pc, #188]	; (800a930 <OnRxData+0x128>)
 800a872:	2200      	movs	r2, #0
 800a874:	2100      	movs	r1, #0
 800a876:	2003      	movs	r0, #3
 800a878:	f010 f97a 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	2b02      	cmp	r3, #2
 800a882:	d021      	beq.n	800a8c8 <OnRxData+0xc0>
 800a884:	2b03      	cmp	r3, #3
 800a886:	d145      	bne.n	800a914 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	785b      	ldrb	r3, [r3, #1]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d117      	bne.n	800a8c0 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d00e      	beq.n	800a8b8 <OnRxData+0xb0>
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	dc12      	bgt.n	800a8c4 <OnRxData+0xbc>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d002      	beq.n	800a8a8 <OnRxData+0xa0>
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d004      	beq.n	800a8b0 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a8a6:	e00d      	b.n	800a8c4 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	f002 f8f1 	bl	800ca90 <LmHandlerRequestClass>
              break;
 800a8ae:	e00a      	b.n	800a8c6 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a8b0:	2001      	movs	r0, #1
 800a8b2:	f002 f8ed 	bl	800ca90 <LmHandlerRequestClass>
              break;
 800a8b6:	e006      	b.n	800a8c6 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a8b8:	2002      	movs	r0, #2
 800a8ba:	f002 f8e9 	bl	800ca90 <LmHandlerRequestClass>
              break;
 800a8be:	e002      	b.n	800a8c6 <OnRxData+0xbe>
          }
        }
 800a8c0:	bf00      	nop
 800a8c2:	e02a      	b.n	800a91a <OnRxData+0x112>
              break;
 800a8c4:	bf00      	nop
        break;
 800a8c6:	e028      	b.n	800a91a <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	785b      	ldrb	r3, [r3, #1]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d123      	bne.n	800a918 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	4b15      	ldr	r3, [pc, #84]	; (800a934 <OnRxData+0x12c>)
 800a8de:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a8e0:	4b14      	ldr	r3, [pc, #80]	; (800a934 <OnRxData+0x12c>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d109      	bne.n	800a8fc <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a8e8:	4b13      	ldr	r3, [pc, #76]	; (800a938 <OnRxData+0x130>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	2003      	movs	r0, #3
 800a8f0:	f010 f93e 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a8f4:	2002      	movs	r0, #2
 800a8f6:	f7f8 f9d1 	bl	8002c9c <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a8fa:	e00d      	b.n	800a918 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a8fc:	4b0f      	ldr	r3, [pc, #60]	; (800a93c <OnRxData+0x134>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	2003      	movs	r0, #3
 800a904:	f010 f934 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a908:	2002      	movs	r0, #2
 800a90a:	f7f8 f9a3 	bl	8002c54 <BSP_LED_On>
        break;
 800a90e:	e003      	b.n	800a918 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a910:	bf00      	nop
 800a912:	e002      	b.n	800a91a <OnRxData+0x112>
        break;
 800a914:	bf00      	nop
 800a916:	e000      	b.n	800a91a <OnRxData+0x112>
        break;
 800a918:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bdb0      	pop	{r4, r5, r7, pc}
 800a922:	bf00      	nop
 800a924:	20000380 	.word	0x20000380
 800a928:	0801b374 	.word	0x0801b374
 800a92c:	20000088 	.word	0x20000088
 800a930:	0801b3a8 	.word	0x0801b3a8
 800a934:	20000366 	.word	0x20000366
 800a938:	0801b3f0 	.word	0x0801b3f0
 800a93c:	0801b3fc 	.word	0x0801b3fc

0800a940 <SendTxData>:

static void SendTxData(void)
{
 800a940:	b590      	push	{r4, r7, lr}
 800a942:	b08d      	sub	sp, #52	; 0x34
 800a944:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t temperature = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	84bb      	strh	r3, [r7, #36]	; 0x24
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int32_t latitude = 0;
  int32_t longitude = 0;
  uint16_t altitudeGps = 0;
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a958:	f107 0308 	add.w	r3, r7, #8
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7f7 fc6b 	bl	8002238 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a962:	f7f6 fdd1 	bl	8001508 <SYS_GetTemperatureLevel>
 800a966:	4603      	mov	r3, r0
 800a968:	121b      	asrs	r3, r3, #8
 800a96a:	84bb      	strh	r3, [r7, #36]	; 0x24
//  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
  pressure = (uint16_t) Sensor_Data();
 800a96c:	f7f6 fa7e 	bl	8000e6c <Sensor_Data>
 800a970:	4603      	mov	r3, r0
 800a972:	84fb      	strh	r3, [r7, #38]	; 0x26

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a974:	4b2f      	ldr	r3, [pc, #188]	; (800aa34 <SendTxData+0xf4>)
 800a976:	2202      	movs	r2, #2
 800a978:	701a      	strb	r2, [r3, #0]

#ifdef CAYENNE_LPP
  CayenneLppReset();
 800a97a:	f7ff fd53 	bl	800a424 <CayenneLppReset>
  CayenneLppAddBarometricPressure(channel++, pressure);
 800a97e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a988:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a98a:	4611      	mov	r1, r2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff fdfb 	bl	800a588 <CayenneLppAddBarometricPressure>
  CayenneLppAddTemperature(channel++, temperature);
 800a992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a99c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fda2 	bl	800a4ec <CayenneLppAddTemperature>
//  CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));	//==================================================================

  if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 800a9a8:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <SendTxData+0xf8>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b08      	cmp	r3, #8
 800a9ae:	d013      	beq.n	800a9d8 <SendTxData+0x98>
 800a9b0:	4b21      	ldr	r3, [pc, #132]	; (800aa38 <SendTxData+0xf8>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d00f      	beq.n	800a9d8 <SendTxData+0x98>
      && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 800a9b8:	4b1f      	ldr	r3, [pc, #124]	; (800aa38 <SendTxData+0xf8>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <SendTxData+0x98>
  {
    CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 800a9c0:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 800a9c4:	1c63      	adds	r3, r4, #1
 800a9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ca:	f7f7 f9ff 	bl	8001dcc <GetBatteryLevel>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7ff fd52 	bl	800a47c <CayenneLppAddDigitalInput>
//    CayenneLppAddDigitalOutput(channel++, AppLedStateOn);						//==================================================================
  }

  CayenneLppCopy(AppData.Buffer);
 800a9d8:	4b16      	ldr	r3, [pc, #88]	; (800aa34 <SendTxData+0xf4>)
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff fd37 	bl	800a450 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 800a9e2:	f7ff fd2b 	bl	800a43c <CayenneLppGetSize>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4b12      	ldr	r3, [pc, #72]	; (800aa34 <SendTxData+0xf4>)
 800a9ec:	705a      	strb	r2, [r3, #1]
  }

  AppData.BufferSize = i;
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a9ee:	1d3a      	adds	r2, r7, #4
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	480f      	ldr	r0, [pc, #60]	; (800aa34 <SendTxData+0xf4>)
 800a9f6:	f001 ff5f 	bl	800c8b8 <LmHandlerSend>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <SendTxData+0xce>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800aa00:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <SendTxData+0xfc>)
 800aa02:	2201      	movs	r2, #1
 800aa04:	2100      	movs	r1, #0
 800aa06:	2001      	movs	r0, #1
 800aa08:	f010 f8b2 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800aa0c:	e00e      	b.n	800aa2c <SendTxData+0xec>
  else if (nextTxIn > 0)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00b      	beq.n	800aa2c <SendTxData+0xec>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a0a      	ldr	r2, [pc, #40]	; (800aa40 <SendTxData+0x100>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	099b      	lsrs	r3, r3, #6
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <SendTxData+0x104>)
 800aa22:	2201      	movs	r2, #1
 800aa24:	2100      	movs	r1, #0
 800aa26:	2001      	movs	r0, #1
 800aa28:	f010 f8a2 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800aa2c:	bf00      	nop
 800aa2e:	372c      	adds	r7, #44	; 0x2c
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd90      	pop	{r4, r7, pc}
 800aa34:	20000080 	.word	0x20000080
 800aa38:	20000070 	.word	0x20000070
 800aa3c:	0801b408 	.word	0x0801b408
 800aa40:	10624dd3 	.word	0x10624dd3
 800aa44:	0801b418 	.word	0x0801b418

0800aa48 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800aa50:	2100      	movs	r1, #0
 800aa52:	2002      	movs	r0, #2
 800aa54:	f00f fd5e 	bl	801a514 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800aa58:	4803      	ldr	r0, [pc, #12]	; (800aa68 <OnTxTimerEvent+0x20>)
 800aa5a:	f00f fe11 	bl	801a680 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	2000025c 	.word	0x2000025c

0800aa6c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800aa74:	2001      	movs	r0, #1
 800aa76:	f7f8 f911 	bl	8002c9c <BSP_LED_Off>
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	f7f8 f906 	bl	8002c9c <BSP_LED_Off>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800aaa0:	2002      	movs	r0, #2
 800aaa2:	f7f8 f91f 	bl	8002ce4 <BSP_LED_Toggle>
}
 800aaa6:	bf00      	nop
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af04      	add	r7, sp, #16
 800aab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d044      	beq.n	800ab48 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d040      	beq.n	800ab48 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800aac6:	2001      	movs	r0, #1
 800aac8:	f7f8 f8c4 	bl	8002c54 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800aacc:	4820      	ldr	r0, [pc, #128]	; (800ab50 <OnTxData+0xa0>)
 800aace:	f00f fdd7 	bl	801a680 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800aad2:	4b20      	ldr	r3, [pc, #128]	; (800ab54 <OnTxData+0xa4>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	2100      	movs	r1, #0
 800aad8:	2002      	movs	r0, #2
 800aada:	f010 f849 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	7b12      	ldrb	r2, [r2, #12]
 800aae6:	4611      	mov	r1, r2
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800aaee:	4610      	mov	r0, r2
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800aaf6:	9203      	str	r2, [sp, #12]
 800aaf8:	9002      	str	r0, [sp, #8]
 800aafa:	9101      	str	r1, [sp, #4]
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	4b16      	ldr	r3, [pc, #88]	; (800ab58 <OnTxData+0xa8>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	2003      	movs	r0, #3
 800ab06:	f010 f833 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800ab0a:	4b14      	ldr	r3, [pc, #80]	; (800ab5c <OnTxData+0xac>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2003      	movs	r0, #3
 800ab12:	f010 f82d 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	789b      	ldrb	r3, [r3, #2]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d10e      	bne.n	800ab3c <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	78db      	ldrb	r3, [r3, #3]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <OnTxData+0x7a>
 800ab26:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <OnTxData+0xb0>)
 800ab28:	e000      	b.n	800ab2c <OnTxData+0x7c>
 800ab2a:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <OnTxData+0xb4>)
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <OnTxData+0xb8>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	2003      	movs	r0, #3
 800ab36:	f010 f81b 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ab3a:	e005      	b.n	800ab48 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ab3c:	4b0b      	ldr	r3, [pc, #44]	; (800ab6c <OnTxData+0xbc>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2100      	movs	r1, #0
 800ab42:	2003      	movs	r0, #3
 800ab44:	f010 f814 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20000368 	.word	0x20000368
 800ab54:	0801b438 	.word	0x0801b438
 800ab58:	0801b46c 	.word	0x0801b46c
 800ab5c:	0801b4a0 	.word	0x0801b4a0
 800ab60:	0801b4b0 	.word	0x0801b4b0
 800ab64:	0801b4b4 	.word	0x0801b4b4
 800ab68:	0801b4bc 	.word	0x0801b4bc
 800ab6c:	0801b4d0 	.word	0x0801b4d0

0800ab70 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d028      	beq.n	800abd0 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11d      	bne.n	800abc4 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800ab88:	4813      	ldr	r0, [pc, #76]	; (800abd8 <OnJoinRequest+0x68>)
 800ab8a:	f00f fde7 	bl	801a75c <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800ab8e:	2002      	movs	r0, #2
 800ab90:	f7f8 f884 	bl	8002c9c <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ab94:	4b11      	ldr	r3, [pc, #68]	; (800abdc <OnJoinRequest+0x6c>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	2100      	movs	r1, #0
 800ab9a:	2002      	movs	r0, #2
 800ab9c:	f00f ffe8 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	789b      	ldrb	r3, [r3, #2]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d106      	bne.n	800abb6 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800aba8:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <OnJoinRequest+0x70>)
 800abaa:	2200      	movs	r2, #0
 800abac:	2100      	movs	r1, #0
 800abae:	2002      	movs	r0, #2
 800abb0:	f00f ffde 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800abb4:	e00c      	b.n	800abd0 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <OnJoinRequest+0x74>)
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	2002      	movs	r0, #2
 800abbe:	f00f ffd7 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800abc2:	e005      	b.n	800abd0 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800abc4:	4b08      	ldr	r3, [pc, #32]	; (800abe8 <OnJoinRequest+0x78>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	2100      	movs	r1, #0
 800abca:	2002      	movs	r0, #2
 800abcc:	f00f ffd0 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	20000398 	.word	0x20000398
 800abdc:	0801b4e0 	.word	0x0801b4e0
 800abe0:	0801b4f8 	.word	0x0801b4f8
 800abe4:	0801b518 	.word	0x0801b518
 800abe8:	0801b538 	.word	0x0801b538

0800abec <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800abf0:	2100      	movs	r1, #0
 800abf2:	2001      	movs	r0, #1
 800abf4:	f00f fc8e 	bl	801a514 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800abf8:	bf00      	nop
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800ac00:	4b15      	ldr	r3, [pc, #84]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ac06:	4b14      	ldr	r3, [pc, #80]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ac0c:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ac12:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800ac18:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f043 0320 	orr.w	r3, r3, #32
 800ac20:	4a0d      	ldr	r2, [pc, #52]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac22:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ac24:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10c      	bne.n	800ac46 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <LoraInfo_Init+0x60>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	2100      	movs	r1, #0
 800ac32:	2000      	movs	r0, #0
 800ac34:	f00f ff9c 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ac38:	bf00      	nop
 800ac3a:	f00f ff87 	bl	801ab4c <UTIL_ADV_TRACE_IsBufferEmpty>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d1fa      	bne.n	800ac3a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ac44:	e7fe      	b.n	800ac44 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ac46:	4b04      	ldr	r3, [pc, #16]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ac4c:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <LoraInfo_Init+0x5c>)
 800ac4e:	2203      	movs	r2, #3
 800ac50:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ac52:	bf00      	nop
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	200003b0 	.word	0x200003b0
 800ac5c:	0801b590 	.word	0x0801b590

0800ac60 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ac64:	4b02      	ldr	r3, [pc, #8]	; (800ac70 <LoraInfo_GetPtr+0x10>)
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bc80      	pop	{r7}
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	200003b0 	.word	0x200003b0

0800ac74 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800ac78:	f7f8 f8e9 	bl	8002e4e <BSP_RADIO_Init>
 800ac7c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	4603      	mov	r3, r0
 800ac8a:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f8 f90e 	bl	8002eb0 <BSP_RADIO_ConfigRFSwitch>
 800ac94:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800aca2:	f7f8 f953 	bl	8002f4c <BSP_RADIO_GetTxConfig>
 800aca6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	bd80      	pop	{r7, pc}

0800acac <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800acb0:	f7f8 f953 	bl	8002f5a <BSP_RADIO_IsTCXO>
 800acb4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	bd80      	pop	{r7, pc}

0800acba <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800acbe:	f7f8 f953 	bl	8002f68 <BSP_RADIO_IsDCDC>
 800acc2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	33f1      	adds	r3, #241	; 0xf1
 800acd4:	2210      	movs	r2, #16
 800acd6:	2100      	movs	r1, #0
 800acd8:	4618      	mov	r0, r3
 800acda:	f00b fd43 	bl	8016764 <memset1>
    ctx->M_n = 0;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	22f0      	movs	r2, #240	; 0xf0
 800acea:	2100      	movs	r1, #0
 800acec:	4618      	mov	r0, r3
 800acee:	f00b fd39 	bl	8016764 <memset1>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	461a      	mov	r2, r3
 800ad08:	2110      	movs	r1, #16
 800ad0a:	6838      	ldr	r0, [r7, #0]
 800ad0c:	f000 fe60 	bl	800b9d0 <lorawan_aes_set_key>
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08c      	sub	sp, #48	; 0x30
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 80a1 	beq.w	800ae72 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad36:	f1c3 0310 	rsb	r3, r3, #16
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	bf28      	it	cs
 800ad40:	4613      	movcs	r3, r2
 800ad42:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad50:	4413      	add	r3, r2
 800ad52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad54:	b292      	uxth	r2, r2
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f00b fcc8 	bl	80166ee <memcpy1>
        ctx->M_n += mlen;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	441a      	add	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad74:	2b0f      	cmp	r3, #15
 800ad76:	f240 808d 	bls.w	800ae94 <AES_CMAC_Update+0x17c>
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	f000 8088 	beq.w	800ae94 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ad84:	2300      	movs	r3, #0
 800ad86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad88:	e015      	b.n	800adb6 <AES_CMAC_Update+0x9e>
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	4413      	add	r3, r2
 800ad90:	33f1      	adds	r3, #241	; 0xf1
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	68f9      	ldr	r1, [r7, #12]
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	440b      	add	r3, r1
 800ad9a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	4053      	eors	r3, r2
 800ada2:	b2d9      	uxtb	r1, r3
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	4413      	add	r3, r2
 800adaa:	33f1      	adds	r3, #241	; 0xf1
 800adac:	460a      	mov	r2, r1
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	3301      	adds	r3, #1
 800adb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	2b0f      	cmp	r3, #15
 800adba:	dde6      	ble.n	800ad8a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800adc2:	f107 0314 	add.w	r3, r7, #20
 800adc6:	2210      	movs	r2, #16
 800adc8:	4618      	mov	r0, r3
 800adca:	f00b fc90 	bl	80166ee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	f107 0114 	add.w	r1, r7, #20
 800add4:	f107 0314 	add.w	r3, r7, #20
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fed7 	bl	800bb8c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	33f1      	adds	r3, #241	; 0xf1
 800ade2:	f107 0114 	add.w	r1, r7, #20
 800ade6:	2210      	movs	r2, #16
 800ade8:	4618      	mov	r0, r3
 800adea:	f00b fc80 	bl	80166ee <memcpy1>

        data += mlen;
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	4413      	add	r3, r2
 800adf4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800adfe:	e038      	b.n	800ae72 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ae00:	2300      	movs	r3, #0
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae04:	e013      	b.n	800ae2e <AES_CMAC_Update+0x116>
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	4413      	add	r3, r2
 800ae0c:	33f1      	adds	r3, #241	; 0xf1
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	440b      	add	r3, r1
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	4053      	eors	r3, r2
 800ae1a:	b2d9      	uxtb	r1, r3
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	4413      	add	r3, r2
 800ae22:	33f1      	adds	r3, #241	; 0xf1
 800ae24:	460a      	mov	r2, r1
 800ae26:	701a      	strb	r2, [r3, #0]
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	2b0f      	cmp	r3, #15
 800ae32:	dde8      	ble.n	800ae06 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae3a:	f107 0314 	add.w	r3, r7, #20
 800ae3e:	2210      	movs	r2, #16
 800ae40:	4618      	mov	r0, r3
 800ae42:	f00b fc54 	bl	80166ee <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	f107 0114 	add.w	r1, r7, #20
 800ae4c:	f107 0314 	add.w	r3, r7, #20
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fe9b 	bl	800bb8c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	33f1      	adds	r3, #241	; 0xf1
 800ae5a:	f107 0114 	add.w	r1, r7, #20
 800ae5e:	2210      	movs	r2, #16
 800ae60:	4618      	mov	r0, r3
 800ae62:	f00b fc44 	bl	80166ee <memcpy1>

        data += 16;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	3310      	adds	r3, #16
 800ae6a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3b10      	subs	r3, #16
 800ae70:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b10      	cmp	r3, #16
 800ae76:	d8c3      	bhi.n	800ae00 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	b292      	uxth	r2, r2
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f00b fc32 	bl	80166ee <memcpy1>
    ctx->M_n = len;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae92:	e000      	b.n	800ae96 <AES_CMAC_Update+0x17e>
            return;
 800ae94:	bf00      	nop
}
 800ae96:	3730      	adds	r7, #48	; 0x30
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b092      	sub	sp, #72	; 0x48
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800aea6:	f107 031c 	add.w	r3, r7, #28
 800aeaa:	2210      	movs	r2, #16
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f00b fc58 	bl	8016764 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	f107 011c 	add.w	r1, r7, #28
 800aeba:	f107 031c 	add.w	r3, r7, #28
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fe64 	bl	800bb8c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800aec4:	7f3b      	ldrb	r3, [r7, #28]
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da31      	bge.n	800af30 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800aecc:	2300      	movs	r3, #0
 800aece:	647b      	str	r3, [r7, #68]	; 0x44
 800aed0:	e01c      	b.n	800af0c <AES_CMAC_Final+0x70>
 800aed2:	f107 021c 	add.w	r2, r7, #28
 800aed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aed8:	4413      	add	r3, r2
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	005b      	lsls	r3, r3, #1
 800aede:	b25a      	sxtb	r2, r3
 800aee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee2:	3301      	adds	r3, #1
 800aee4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aee8:	440b      	add	r3, r1
 800aeea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aeee:	09db      	lsrs	r3, r3, #7
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	b25b      	sxtb	r3, r3
 800aef4:	4313      	orrs	r3, r2
 800aef6:	b25b      	sxtb	r3, r3
 800aef8:	b2d9      	uxtb	r1, r3
 800aefa:	f107 021c 	add.w	r2, r7, #28
 800aefe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af00:	4413      	add	r3, r2
 800af02:	460a      	mov	r2, r1
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af08:	3301      	adds	r3, #1
 800af0a:	647b      	str	r3, [r7, #68]	; 0x44
 800af0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af0e:	2b0e      	cmp	r3, #14
 800af10:	dddf      	ble.n	800aed2 <AES_CMAC_Final+0x36>
 800af12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800af1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af22:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800af26:	43db      	mvns	r3, r3
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af2e:	e028      	b.n	800af82 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800af30:	2300      	movs	r3, #0
 800af32:	643b      	str	r3, [r7, #64]	; 0x40
 800af34:	e01c      	b.n	800af70 <AES_CMAC_Final+0xd4>
 800af36:	f107 021c 	add.w	r2, r7, #28
 800af3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3c:	4413      	add	r3, r2
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	b25a      	sxtb	r2, r3
 800af44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af46:	3301      	adds	r3, #1
 800af48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800af4c:	440b      	add	r3, r1
 800af4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af52:	09db      	lsrs	r3, r3, #7
 800af54:	b2db      	uxtb	r3, r3
 800af56:	b25b      	sxtb	r3, r3
 800af58:	4313      	orrs	r3, r2
 800af5a:	b25b      	sxtb	r3, r3
 800af5c:	b2d9      	uxtb	r1, r3
 800af5e:	f107 021c 	add.w	r2, r7, #28
 800af62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af64:	4413      	add	r3, r2
 800af66:	460a      	mov	r2, r1
 800af68:	701a      	strb	r2, [r3, #0]
 800af6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6c:	3301      	adds	r3, #1
 800af6e:	643b      	str	r3, [r7, #64]	; 0x40
 800af70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af72:	2b0e      	cmp	r3, #14
 800af74:	dddf      	ble.n	800af36 <AES_CMAC_Final+0x9a>
 800af76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800af88:	2b10      	cmp	r3, #16
 800af8a:	d11d      	bne.n	800afc8 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af90:	e016      	b.n	800afc0 <AES_CMAC_Final+0x124>
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af96:	4413      	add	r3, r2
 800af98:	f203 1301 	addw	r3, r3, #257	; 0x101
 800af9c:	781a      	ldrb	r2, [r3, #0]
 800af9e:	f107 011c 	add.w	r1, r7, #28
 800afa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa4:	440b      	add	r3, r1
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	4053      	eors	r3, r2
 800afaa:	b2d9      	uxtb	r1, r3
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	4413      	add	r3, r2
 800afb2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800afb6:	460a      	mov	r2, r1
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbc:	3301      	adds	r3, #1
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc2:	2b0f      	cmp	r3, #15
 800afc4:	dde5      	ble.n	800af92 <AES_CMAC_Final+0xf6>
 800afc6:	e098      	b.n	800b0fa <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800afc8:	7f3b      	ldrb	r3, [r7, #28]
 800afca:	b25b      	sxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da31      	bge.n	800b034 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800afd0:	2300      	movs	r3, #0
 800afd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afd4:	e01c      	b.n	800b010 <AES_CMAC_Final+0x174>
 800afd6:	f107 021c 	add.w	r2, r7, #28
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	4413      	add	r3, r2
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	b25a      	sxtb	r2, r3
 800afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe6:	3301      	adds	r3, #1
 800afe8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800afec:	440b      	add	r3, r1
 800afee:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aff2:	09db      	lsrs	r3, r3, #7
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	b25b      	sxtb	r3, r3
 800aff8:	4313      	orrs	r3, r2
 800affa:	b25b      	sxtb	r3, r3
 800affc:	b2d9      	uxtb	r1, r3
 800affe:	f107 021c 	add.w	r2, r7, #28
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	4413      	add	r3, r2
 800b006:	460a      	mov	r2, r1
 800b008:	701a      	strb	r2, [r3, #0]
 800b00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00c:	3301      	adds	r3, #1
 800b00e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	2b0e      	cmp	r3, #14
 800b014:	dddf      	ble.n	800afd6 <AES_CMAC_Final+0x13a>
 800b016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b026:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b02a:	43db      	mvns	r3, r3
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b032:	e028      	b.n	800b086 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800b034:	2300      	movs	r3, #0
 800b036:	637b      	str	r3, [r7, #52]	; 0x34
 800b038:	e01c      	b.n	800b074 <AES_CMAC_Final+0x1d8>
 800b03a:	f107 021c 	add.w	r2, r7, #28
 800b03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b040:	4413      	add	r3, r2
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	b25a      	sxtb	r2, r3
 800b048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04a:	3301      	adds	r3, #1
 800b04c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b050:	440b      	add	r3, r1
 800b052:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b056:	09db      	lsrs	r3, r3, #7
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	b25b      	sxtb	r3, r3
 800b05c:	4313      	orrs	r3, r2
 800b05e:	b25b      	sxtb	r3, r3
 800b060:	b2d9      	uxtb	r1, r3
 800b062:	f107 021c 	add.w	r2, r7, #28
 800b066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b068:	4413      	add	r3, r2
 800b06a:	460a      	mov	r2, r1
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b070:	3301      	adds	r3, #1
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
 800b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b076:	2b0e      	cmp	r3, #14
 800b078:	dddf      	ble.n	800b03a <AES_CMAC_Final+0x19e>
 800b07a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	b2db      	uxtb	r3, r3
 800b082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	4413      	add	r3, r2
 800b090:	2280      	movs	r2, #128	; 0x80
 800b092:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b096:	e007      	b.n	800b0a8 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b09e:	683a      	ldr	r2, [r7, #0]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b0bc:	2b0f      	cmp	r3, #15
 800b0be:	d9eb      	bls.n	800b098 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b0c4:	e016      	b.n	800b0f4 <AES_CMAC_Final+0x258>
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	4413      	add	r3, r2
 800b0cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0d0:	781a      	ldrb	r2, [r3, #0]
 800b0d2:	f107 011c 	add.w	r1, r7, #28
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	440b      	add	r3, r1
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	4053      	eors	r3, r2
 800b0de:	b2d9      	uxtb	r1, r3
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	633b      	str	r3, [r7, #48]	; 0x30
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	2b0f      	cmp	r3, #15
 800b0f8:	dde5      	ble.n	800b0c6 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0fe:	e015      	b.n	800b12c <AES_CMAC_Final+0x290>
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	4413      	add	r3, r2
 800b106:	33f1      	adds	r3, #241	; 0xf1
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	440b      	add	r3, r1
 800b110:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	4053      	eors	r3, r2
 800b118:	b2d9      	uxtb	r1, r3
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11e:	4413      	add	r3, r2
 800b120:	33f1      	adds	r3, #241	; 0xf1
 800b122:	460a      	mov	r2, r1
 800b124:	701a      	strb	r2, [r3, #0]
 800b126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b128:	3301      	adds	r3, #1
 800b12a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12e:	2b0f      	cmp	r3, #15
 800b130:	dde6      	ble.n	800b100 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b138:	f107 030c 	add.w	r3, r7, #12
 800b13c:	2210      	movs	r2, #16
 800b13e:	4618      	mov	r0, r3
 800b140:	f00b fad5 	bl	80166ee <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	f107 030c 	add.w	r3, r7, #12
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 fd1d 	bl	800bb8c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b152:	f107 031c 	add.w	r3, r7, #28
 800b156:	2210      	movs	r2, #16
 800b158:	2100      	movs	r1, #0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f00b fb02 	bl	8016764 <memset1>
}
 800b160:	bf00      	nop
 800b162:	3748      	adds	r7, #72	; 0x48
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781a      	ldrb	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3301      	adds	r3, #1
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	7852      	ldrb	r2, [r2, #1]
 800b182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3302      	adds	r3, #2
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	7892      	ldrb	r2, [r2, #2]
 800b18c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3303      	adds	r3, #3
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	78d2      	ldrb	r2, [r2, #3]
 800b196:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	7912      	ldrb	r2, [r2, #4]
 800b1a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	3305      	adds	r3, #5
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	7952      	ldrb	r2, [r2, #5]
 800b1aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3306      	adds	r3, #6
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	7992      	ldrb	r2, [r2, #6]
 800b1b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3307      	adds	r3, #7
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	79d2      	ldrb	r2, [r2, #7]
 800b1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	7a12      	ldrb	r2, [r2, #8]
 800b1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	3309      	adds	r3, #9
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	7a52      	ldrb	r2, [r2, #9]
 800b1d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	330a      	adds	r3, #10
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	7a92      	ldrb	r2, [r2, #10]
 800b1dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	330b      	adds	r3, #11
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	7ad2      	ldrb	r2, [r2, #11]
 800b1e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	330c      	adds	r3, #12
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	7b12      	ldrb	r2, [r2, #12]
 800b1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	330d      	adds	r3, #13
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	7b52      	ldrb	r2, [r2, #13]
 800b1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	330e      	adds	r3, #14
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	7b92      	ldrb	r2, [r2, #14]
 800b204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	330f      	adds	r3, #15
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	7bd2      	ldrb	r2, [r2, #15]
 800b20e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b21a:	b480      	push	{r7}
 800b21c:	b085      	sub	sp, #20
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	4613      	mov	r3, r2
 800b226:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b228:	e007      	b.n	800b23a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	1c53      	adds	r3, r2, #1
 800b22e:	60bb      	str	r3, [r7, #8]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	1c59      	adds	r1, r3, #1
 800b234:	60f9      	str	r1, [r7, #12]
 800b236:	7812      	ldrb	r2, [r2, #0]
 800b238:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b23a:	79fb      	ldrb	r3, [r7, #7]
 800b23c:	1e5a      	subs	r2, r3, #1
 800b23e:	71fa      	strb	r2, [r7, #7]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1f2      	bne.n	800b22a <copy_block_nn+0x10>
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bc80      	pop	{r7}
 800b24e:	4770      	bx	lr

0800b250 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	781a      	ldrb	r2, [r3, #0]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	4053      	eors	r3, r2
 800b264:	b2da      	uxtb	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3301      	adds	r3, #1
 800b26e:	7819      	ldrb	r1, [r3, #0]
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	781a      	ldrb	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3301      	adds	r3, #1
 800b27a:	404a      	eors	r2, r1
 800b27c:	b2d2      	uxtb	r2, r2
 800b27e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3302      	adds	r3, #2
 800b284:	7819      	ldrb	r1, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	3302      	adds	r3, #2
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3302      	adds	r3, #2
 800b290:	404a      	eors	r2, r1
 800b292:	b2d2      	uxtb	r2, r2
 800b294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3303      	adds	r3, #3
 800b29a:	7819      	ldrb	r1, [r3, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	3303      	adds	r3, #3
 800b2a0:	781a      	ldrb	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	3303      	adds	r3, #3
 800b2a6:	404a      	eors	r2, r1
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	7819      	ldrb	r1, [r3, #0]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	404a      	eors	r2, r1
 800b2be:	b2d2      	uxtb	r2, r2
 800b2c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3305      	adds	r3, #5
 800b2c6:	7819      	ldrb	r1, [r3, #0]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	3305      	adds	r3, #5
 800b2cc:	781a      	ldrb	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3305      	adds	r3, #5
 800b2d2:	404a      	eors	r2, r1
 800b2d4:	b2d2      	uxtb	r2, r2
 800b2d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3306      	adds	r3, #6
 800b2dc:	7819      	ldrb	r1, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	3306      	adds	r3, #6
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3306      	adds	r3, #6
 800b2e8:	404a      	eors	r2, r1
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3307      	adds	r3, #7
 800b2f2:	7819      	ldrb	r1, [r3, #0]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	3307      	adds	r3, #7
 800b2f8:	781a      	ldrb	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3307      	adds	r3, #7
 800b2fe:	404a      	eors	r2, r1
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3308      	adds	r3, #8
 800b308:	7819      	ldrb	r1, [r3, #0]
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	3308      	adds	r3, #8
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3308      	adds	r3, #8
 800b314:	404a      	eors	r2, r1
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3309      	adds	r3, #9
 800b31e:	7819      	ldrb	r1, [r3, #0]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	3309      	adds	r3, #9
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3309      	adds	r3, #9
 800b32a:	404a      	eors	r2, r1
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	330a      	adds	r3, #10
 800b334:	7819      	ldrb	r1, [r3, #0]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	330a      	adds	r3, #10
 800b33a:	781a      	ldrb	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	330a      	adds	r3, #10
 800b340:	404a      	eors	r2, r1
 800b342:	b2d2      	uxtb	r2, r2
 800b344:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	330b      	adds	r3, #11
 800b34a:	7819      	ldrb	r1, [r3, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	330b      	adds	r3, #11
 800b350:	781a      	ldrb	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	330b      	adds	r3, #11
 800b356:	404a      	eors	r2, r1
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	330c      	adds	r3, #12
 800b360:	7819      	ldrb	r1, [r3, #0]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	330c      	adds	r3, #12
 800b366:	781a      	ldrb	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	330c      	adds	r3, #12
 800b36c:	404a      	eors	r2, r1
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	330d      	adds	r3, #13
 800b376:	7819      	ldrb	r1, [r3, #0]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	330d      	adds	r3, #13
 800b37c:	781a      	ldrb	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	330d      	adds	r3, #13
 800b382:	404a      	eors	r2, r1
 800b384:	b2d2      	uxtb	r2, r2
 800b386:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	330e      	adds	r3, #14
 800b38c:	7819      	ldrb	r1, [r3, #0]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	330e      	adds	r3, #14
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	330e      	adds	r3, #14
 800b398:	404a      	eors	r2, r1
 800b39a:	b2d2      	uxtb	r2, r2
 800b39c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	330f      	adds	r3, #15
 800b3a2:	7819      	ldrb	r1, [r3, #0]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	330f      	adds	r3, #15
 800b3a8:	781a      	ldrb	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	330f      	adds	r3, #15
 800b3ae:	404a      	eors	r2, r1
 800b3b0:	b2d2      	uxtb	r2, r2
 800b3b2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bc80      	pop	{r7}
 800b3bc:	4770      	bx	lr

0800b3be <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	60f8      	str	r0, [r7, #12]
 800b3c6:	60b9      	str	r1, [r7, #8]
 800b3c8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	781a      	ldrb	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	4053      	eors	r3, r2
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	7819      	ldrb	r1, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	781a      	ldrb	r2, [r3, #0]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	404a      	eors	r2, r1
 800b3ec:	b2d2      	uxtb	r2, r2
 800b3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	3302      	adds	r3, #2
 800b3f4:	7819      	ldrb	r1, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3302      	adds	r3, #2
 800b3fa:	781a      	ldrb	r2, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3302      	adds	r3, #2
 800b400:	404a      	eors	r2, r1
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	3303      	adds	r3, #3
 800b40a:	7819      	ldrb	r1, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3303      	adds	r3, #3
 800b410:	781a      	ldrb	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	3303      	adds	r3, #3
 800b416:	404a      	eors	r2, r1
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	3304      	adds	r3, #4
 800b420:	7819      	ldrb	r1, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3304      	adds	r3, #4
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3304      	adds	r3, #4
 800b42c:	404a      	eors	r2, r1
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3305      	adds	r3, #5
 800b436:	7819      	ldrb	r1, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3305      	adds	r3, #5
 800b43c:	781a      	ldrb	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3305      	adds	r3, #5
 800b442:	404a      	eors	r2, r1
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3306      	adds	r3, #6
 800b44c:	7819      	ldrb	r1, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3306      	adds	r3, #6
 800b452:	781a      	ldrb	r2, [r3, #0]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3306      	adds	r3, #6
 800b458:	404a      	eors	r2, r1
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	3307      	adds	r3, #7
 800b462:	7819      	ldrb	r1, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3307      	adds	r3, #7
 800b468:	781a      	ldrb	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3307      	adds	r3, #7
 800b46e:	404a      	eors	r2, r1
 800b470:	b2d2      	uxtb	r2, r2
 800b472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	3308      	adds	r3, #8
 800b478:	7819      	ldrb	r1, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	3308      	adds	r3, #8
 800b47e:	781a      	ldrb	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	3308      	adds	r3, #8
 800b484:	404a      	eors	r2, r1
 800b486:	b2d2      	uxtb	r2, r2
 800b488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	3309      	adds	r3, #9
 800b48e:	7819      	ldrb	r1, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3309      	adds	r3, #9
 800b494:	781a      	ldrb	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3309      	adds	r3, #9
 800b49a:	404a      	eors	r2, r1
 800b49c:	b2d2      	uxtb	r2, r2
 800b49e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	330a      	adds	r3, #10
 800b4a4:	7819      	ldrb	r1, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	330a      	adds	r3, #10
 800b4aa:	781a      	ldrb	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	330a      	adds	r3, #10
 800b4b0:	404a      	eors	r2, r1
 800b4b2:	b2d2      	uxtb	r2, r2
 800b4b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	330b      	adds	r3, #11
 800b4ba:	7819      	ldrb	r1, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	330b      	adds	r3, #11
 800b4c0:	781a      	ldrb	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	330b      	adds	r3, #11
 800b4c6:	404a      	eors	r2, r1
 800b4c8:	b2d2      	uxtb	r2, r2
 800b4ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	330c      	adds	r3, #12
 800b4d0:	7819      	ldrb	r1, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	330c      	adds	r3, #12
 800b4d6:	781a      	ldrb	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	330c      	adds	r3, #12
 800b4dc:	404a      	eors	r2, r1
 800b4de:	b2d2      	uxtb	r2, r2
 800b4e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	330d      	adds	r3, #13
 800b4e6:	7819      	ldrb	r1, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	330d      	adds	r3, #13
 800b4ec:	781a      	ldrb	r2, [r3, #0]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	330d      	adds	r3, #13
 800b4f2:	404a      	eors	r2, r1
 800b4f4:	b2d2      	uxtb	r2, r2
 800b4f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	330e      	adds	r3, #14
 800b4fc:	7819      	ldrb	r1, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	330e      	adds	r3, #14
 800b502:	781a      	ldrb	r2, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	330e      	adds	r3, #14
 800b508:	404a      	eors	r2, r1
 800b50a:	b2d2      	uxtb	r2, r2
 800b50c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	330f      	adds	r3, #15
 800b512:	7819      	ldrb	r1, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	330f      	adds	r3, #15
 800b518:	781a      	ldrb	r2, [r3, #0]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	330f      	adds	r3, #15
 800b51e:	404a      	eors	r2, r1
 800b520:	b2d2      	uxtb	r2, r2
 800b522:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b524:	bf00      	nop
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	bc80      	pop	{r7}
 800b52c:	4770      	bx	lr

0800b52e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b082      	sub	sp, #8
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff fe88 	bl	800b250 <xor_block>
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	461a      	mov	r2, r3
 800b556:	4b48      	ldr	r3, [pc, #288]	; (800b678 <shift_sub_rows+0x130>)
 800b558:	5c9a      	ldrb	r2, [r3, r2]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3304      	adds	r3, #4
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	4619      	mov	r1, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3304      	adds	r3, #4
 800b56a:	4a43      	ldr	r2, [pc, #268]	; (800b678 <shift_sub_rows+0x130>)
 800b56c:	5c52      	ldrb	r2, [r2, r1]
 800b56e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3308      	adds	r3, #8
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	4619      	mov	r1, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3308      	adds	r3, #8
 800b57c:	4a3e      	ldr	r2, [pc, #248]	; (800b678 <shift_sub_rows+0x130>)
 800b57e:	5c52      	ldrb	r2, [r2, r1]
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	330c      	adds	r3, #12
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	4619      	mov	r1, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	330c      	adds	r3, #12
 800b58e:	4a3a      	ldr	r2, [pc, #232]	; (800b678 <shift_sub_rows+0x130>)
 800b590:	5c52      	ldrb	r2, [r2, r1]
 800b592:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	785b      	ldrb	r3, [r3, #1]
 800b598:	73fb      	strb	r3, [r7, #15]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3305      	adds	r3, #5
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	4a34      	ldr	r2, [pc, #208]	; (800b678 <shift_sub_rows+0x130>)
 800b5a8:	5c52      	ldrb	r2, [r2, r1]
 800b5aa:	701a      	strb	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3309      	adds	r3, #9
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3305      	adds	r3, #5
 800b5b8:	4a2f      	ldr	r2, [pc, #188]	; (800b678 <shift_sub_rows+0x130>)
 800b5ba:	5c52      	ldrb	r2, [r2, r1]
 800b5bc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	330d      	adds	r3, #13
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3309      	adds	r3, #9
 800b5ca:	4a2b      	ldr	r2, [pc, #172]	; (800b678 <shift_sub_rows+0x130>)
 800b5cc:	5c52      	ldrb	r2, [r2, r1]
 800b5ce:	701a      	strb	r2, [r3, #0]
 800b5d0:	7bfa      	ldrb	r2, [r7, #15]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	330d      	adds	r3, #13
 800b5d6:	4928      	ldr	r1, [pc, #160]	; (800b678 <shift_sub_rows+0x130>)
 800b5d8:	5c8a      	ldrb	r2, [r1, r2]
 800b5da:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	789b      	ldrb	r3, [r3, #2]
 800b5e0:	73fb      	strb	r3, [r7, #15]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	330a      	adds	r3, #10
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3302      	adds	r3, #2
 800b5ee:	4a22      	ldr	r2, [pc, #136]	; (800b678 <shift_sub_rows+0x130>)
 800b5f0:	5c52      	ldrb	r2, [r2, r1]
 800b5f2:	701a      	strb	r2, [r3, #0]
 800b5f4:	7bfa      	ldrb	r2, [r7, #15]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	330a      	adds	r3, #10
 800b5fa:	491f      	ldr	r1, [pc, #124]	; (800b678 <shift_sub_rows+0x130>)
 800b5fc:	5c8a      	ldrb	r2, [r1, r2]
 800b5fe:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	799b      	ldrb	r3, [r3, #6]
 800b604:	73fb      	strb	r3, [r7, #15]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	330e      	adds	r3, #14
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	4619      	mov	r1, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3306      	adds	r3, #6
 800b612:	4a19      	ldr	r2, [pc, #100]	; (800b678 <shift_sub_rows+0x130>)
 800b614:	5c52      	ldrb	r2, [r2, r1]
 800b616:	701a      	strb	r2, [r3, #0]
 800b618:	7bfa      	ldrb	r2, [r7, #15]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	330e      	adds	r3, #14
 800b61e:	4916      	ldr	r1, [pc, #88]	; (800b678 <shift_sub_rows+0x130>)
 800b620:	5c8a      	ldrb	r2, [r1, r2]
 800b622:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	7bdb      	ldrb	r3, [r3, #15]
 800b628:	73fb      	strb	r3, [r7, #15]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	330b      	adds	r3, #11
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	4619      	mov	r1, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	330f      	adds	r3, #15
 800b636:	4a10      	ldr	r2, [pc, #64]	; (800b678 <shift_sub_rows+0x130>)
 800b638:	5c52      	ldrb	r2, [r2, r1]
 800b63a:	701a      	strb	r2, [r3, #0]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3307      	adds	r3, #7
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	4619      	mov	r1, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	330b      	adds	r3, #11
 800b648:	4a0b      	ldr	r2, [pc, #44]	; (800b678 <shift_sub_rows+0x130>)
 800b64a:	5c52      	ldrb	r2, [r2, r1]
 800b64c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	3303      	adds	r3, #3
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	4619      	mov	r1, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3307      	adds	r3, #7
 800b65a:	4a07      	ldr	r2, [pc, #28]	; (800b678 <shift_sub_rows+0x130>)
 800b65c:	5c52      	ldrb	r2, [r2, r1]
 800b65e:	701a      	strb	r2, [r3, #0]
 800b660:	7bfa      	ldrb	r2, [r7, #15]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3303      	adds	r3, #3
 800b666:	4904      	ldr	r1, [pc, #16]	; (800b678 <shift_sub_rows+0x130>)
 800b668:	5c8a      	ldrb	r2, [r1, r2]
 800b66a:	701a      	strb	r2, [r3, #0]
}
 800b66c:	bf00      	nop
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	bc80      	pop	{r7}
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	0801bbc8 	.word	0x0801bbc8

0800b67c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff fd6c 	bl	800b168 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b690:	7a3b      	ldrb	r3, [r7, #8]
 800b692:	461a      	mov	r2, r3
 800b694:	4b9a      	ldr	r3, [pc, #616]	; (800b900 <mix_sub_columns+0x284>)
 800b696:	5c9a      	ldrb	r2, [r3, r2]
 800b698:	7b7b      	ldrb	r3, [r7, #13]
 800b69a:	4619      	mov	r1, r3
 800b69c:	4b99      	ldr	r3, [pc, #612]	; (800b904 <mix_sub_columns+0x288>)
 800b69e:	5c5b      	ldrb	r3, [r3, r1]
 800b6a0:	4053      	eors	r3, r2
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	7cbb      	ldrb	r3, [r7, #18]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4b97      	ldr	r3, [pc, #604]	; (800b908 <mix_sub_columns+0x28c>)
 800b6aa:	5c5b      	ldrb	r3, [r3, r1]
 800b6ac:	4053      	eors	r3, r2
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4b94      	ldr	r3, [pc, #592]	; (800b908 <mix_sub_columns+0x28c>)
 800b6b6:	5c5b      	ldrb	r3, [r3, r1]
 800b6b8:	4053      	eors	r3, r2
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b6c0:	7a3b      	ldrb	r3, [r7, #8]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4b90      	ldr	r3, [pc, #576]	; (800b908 <mix_sub_columns+0x28c>)
 800b6c6:	5c9a      	ldrb	r2, [r3, r2]
 800b6c8:	7b7b      	ldrb	r3, [r7, #13]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4b8c      	ldr	r3, [pc, #560]	; (800b900 <mix_sub_columns+0x284>)
 800b6ce:	5c5b      	ldrb	r3, [r3, r1]
 800b6d0:	4053      	eors	r3, r2
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	7cbb      	ldrb	r3, [r7, #18]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4b8a      	ldr	r3, [pc, #552]	; (800b904 <mix_sub_columns+0x288>)
 800b6da:	5c5b      	ldrb	r3, [r3, r1]
 800b6dc:	4053      	eors	r3, r2
 800b6de:	b2d9      	uxtb	r1, r3
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4b88      	ldr	r3, [pc, #544]	; (800b908 <mix_sub_columns+0x28c>)
 800b6e6:	5c9a      	ldrb	r2, [r3, r2]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	404a      	eors	r2, r1
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b6f2:	7a3b      	ldrb	r3, [r7, #8]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4b84      	ldr	r3, [pc, #528]	; (800b908 <mix_sub_columns+0x28c>)
 800b6f8:	5c9a      	ldrb	r2, [r3, r2]
 800b6fa:	7b7b      	ldrb	r3, [r7, #13]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4b82      	ldr	r3, [pc, #520]	; (800b908 <mix_sub_columns+0x28c>)
 800b700:	5c5b      	ldrb	r3, [r3, r1]
 800b702:	4053      	eors	r3, r2
 800b704:	b2da      	uxtb	r2, r3
 800b706:	7cbb      	ldrb	r3, [r7, #18]
 800b708:	4619      	mov	r1, r3
 800b70a:	4b7d      	ldr	r3, [pc, #500]	; (800b900 <mix_sub_columns+0x284>)
 800b70c:	5c5b      	ldrb	r3, [r3, r1]
 800b70e:	4053      	eors	r3, r2
 800b710:	b2d9      	uxtb	r1, r3
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	461a      	mov	r2, r3
 800b716:	4b7b      	ldr	r3, [pc, #492]	; (800b904 <mix_sub_columns+0x288>)
 800b718:	5c9a      	ldrb	r2, [r3, r2]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3302      	adds	r3, #2
 800b71e:	404a      	eors	r2, r1
 800b720:	b2d2      	uxtb	r2, r2
 800b722:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b724:	7a3b      	ldrb	r3, [r7, #8]
 800b726:	461a      	mov	r2, r3
 800b728:	4b76      	ldr	r3, [pc, #472]	; (800b904 <mix_sub_columns+0x288>)
 800b72a:	5c9a      	ldrb	r2, [r3, r2]
 800b72c:	7b7b      	ldrb	r3, [r7, #13]
 800b72e:	4619      	mov	r1, r3
 800b730:	4b75      	ldr	r3, [pc, #468]	; (800b908 <mix_sub_columns+0x28c>)
 800b732:	5c5b      	ldrb	r3, [r3, r1]
 800b734:	4053      	eors	r3, r2
 800b736:	b2da      	uxtb	r2, r3
 800b738:	7cbb      	ldrb	r3, [r7, #18]
 800b73a:	4619      	mov	r1, r3
 800b73c:	4b72      	ldr	r3, [pc, #456]	; (800b908 <mix_sub_columns+0x28c>)
 800b73e:	5c5b      	ldrb	r3, [r3, r1]
 800b740:	4053      	eors	r3, r2
 800b742:	b2d9      	uxtb	r1, r3
 800b744:	7dfb      	ldrb	r3, [r7, #23]
 800b746:	461a      	mov	r2, r3
 800b748:	4b6d      	ldr	r3, [pc, #436]	; (800b900 <mix_sub_columns+0x284>)
 800b74a:	5c9a      	ldrb	r2, [r3, r2]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3303      	adds	r3, #3
 800b750:	404a      	eors	r2, r1
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b756:	7b3b      	ldrb	r3, [r7, #12]
 800b758:	461a      	mov	r2, r3
 800b75a:	4b69      	ldr	r3, [pc, #420]	; (800b900 <mix_sub_columns+0x284>)
 800b75c:	5c9a      	ldrb	r2, [r3, r2]
 800b75e:	7c7b      	ldrb	r3, [r7, #17]
 800b760:	4619      	mov	r1, r3
 800b762:	4b68      	ldr	r3, [pc, #416]	; (800b904 <mix_sub_columns+0x288>)
 800b764:	5c5b      	ldrb	r3, [r3, r1]
 800b766:	4053      	eors	r3, r2
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	7dbb      	ldrb	r3, [r7, #22]
 800b76c:	4619      	mov	r1, r3
 800b76e:	4b66      	ldr	r3, [pc, #408]	; (800b908 <mix_sub_columns+0x28c>)
 800b770:	5c5b      	ldrb	r3, [r3, r1]
 800b772:	4053      	eors	r3, r2
 800b774:	b2d9      	uxtb	r1, r3
 800b776:	7afb      	ldrb	r3, [r7, #11]
 800b778:	461a      	mov	r2, r3
 800b77a:	4b63      	ldr	r3, [pc, #396]	; (800b908 <mix_sub_columns+0x28c>)
 800b77c:	5c9a      	ldrb	r2, [r3, r2]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3304      	adds	r3, #4
 800b782:	404a      	eors	r2, r1
 800b784:	b2d2      	uxtb	r2, r2
 800b786:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b788:	7b3b      	ldrb	r3, [r7, #12]
 800b78a:	461a      	mov	r2, r3
 800b78c:	4b5e      	ldr	r3, [pc, #376]	; (800b908 <mix_sub_columns+0x28c>)
 800b78e:	5c9a      	ldrb	r2, [r3, r2]
 800b790:	7c7b      	ldrb	r3, [r7, #17]
 800b792:	4619      	mov	r1, r3
 800b794:	4b5a      	ldr	r3, [pc, #360]	; (800b900 <mix_sub_columns+0x284>)
 800b796:	5c5b      	ldrb	r3, [r3, r1]
 800b798:	4053      	eors	r3, r2
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	7dbb      	ldrb	r3, [r7, #22]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4b58      	ldr	r3, [pc, #352]	; (800b904 <mix_sub_columns+0x288>)
 800b7a2:	5c5b      	ldrb	r3, [r3, r1]
 800b7a4:	4053      	eors	r3, r2
 800b7a6:	b2d9      	uxtb	r1, r3
 800b7a8:	7afb      	ldrb	r3, [r7, #11]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	4b56      	ldr	r3, [pc, #344]	; (800b908 <mix_sub_columns+0x28c>)
 800b7ae:	5c9a      	ldrb	r2, [r3, r2]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	3305      	adds	r3, #5
 800b7b4:	404a      	eors	r2, r1
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b7ba:	7b3b      	ldrb	r3, [r7, #12]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	4b52      	ldr	r3, [pc, #328]	; (800b908 <mix_sub_columns+0x28c>)
 800b7c0:	5c9a      	ldrb	r2, [r3, r2]
 800b7c2:	7c7b      	ldrb	r3, [r7, #17]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4b50      	ldr	r3, [pc, #320]	; (800b908 <mix_sub_columns+0x28c>)
 800b7c8:	5c5b      	ldrb	r3, [r3, r1]
 800b7ca:	4053      	eors	r3, r2
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	7dbb      	ldrb	r3, [r7, #22]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4b4b      	ldr	r3, [pc, #300]	; (800b900 <mix_sub_columns+0x284>)
 800b7d4:	5c5b      	ldrb	r3, [r3, r1]
 800b7d6:	4053      	eors	r3, r2
 800b7d8:	b2d9      	uxtb	r1, r3
 800b7da:	7afb      	ldrb	r3, [r7, #11]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4b49      	ldr	r3, [pc, #292]	; (800b904 <mix_sub_columns+0x288>)
 800b7e0:	5c9a      	ldrb	r2, [r3, r2]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3306      	adds	r3, #6
 800b7e6:	404a      	eors	r2, r1
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b7ec:	7b3b      	ldrb	r3, [r7, #12]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	4b44      	ldr	r3, [pc, #272]	; (800b904 <mix_sub_columns+0x288>)
 800b7f2:	5c9a      	ldrb	r2, [r3, r2]
 800b7f4:	7c7b      	ldrb	r3, [r7, #17]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4b43      	ldr	r3, [pc, #268]	; (800b908 <mix_sub_columns+0x28c>)
 800b7fa:	5c5b      	ldrb	r3, [r3, r1]
 800b7fc:	4053      	eors	r3, r2
 800b7fe:	b2da      	uxtb	r2, r3
 800b800:	7dbb      	ldrb	r3, [r7, #22]
 800b802:	4619      	mov	r1, r3
 800b804:	4b40      	ldr	r3, [pc, #256]	; (800b908 <mix_sub_columns+0x28c>)
 800b806:	5c5b      	ldrb	r3, [r3, r1]
 800b808:	4053      	eors	r3, r2
 800b80a:	b2d9      	uxtb	r1, r3
 800b80c:	7afb      	ldrb	r3, [r7, #11]
 800b80e:	461a      	mov	r2, r3
 800b810:	4b3b      	ldr	r3, [pc, #236]	; (800b900 <mix_sub_columns+0x284>)
 800b812:	5c9a      	ldrb	r2, [r3, r2]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3307      	adds	r3, #7
 800b818:	404a      	eors	r2, r1
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b81e:	7c3b      	ldrb	r3, [r7, #16]
 800b820:	461a      	mov	r2, r3
 800b822:	4b37      	ldr	r3, [pc, #220]	; (800b900 <mix_sub_columns+0x284>)
 800b824:	5c9a      	ldrb	r2, [r3, r2]
 800b826:	7d7b      	ldrb	r3, [r7, #21]
 800b828:	4619      	mov	r1, r3
 800b82a:	4b36      	ldr	r3, [pc, #216]	; (800b904 <mix_sub_columns+0x288>)
 800b82c:	5c5b      	ldrb	r3, [r3, r1]
 800b82e:	4053      	eors	r3, r2
 800b830:	b2da      	uxtb	r2, r3
 800b832:	7abb      	ldrb	r3, [r7, #10]
 800b834:	4619      	mov	r1, r3
 800b836:	4b34      	ldr	r3, [pc, #208]	; (800b908 <mix_sub_columns+0x28c>)
 800b838:	5c5b      	ldrb	r3, [r3, r1]
 800b83a:	4053      	eors	r3, r2
 800b83c:	b2d9      	uxtb	r1, r3
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
 800b840:	461a      	mov	r2, r3
 800b842:	4b31      	ldr	r3, [pc, #196]	; (800b908 <mix_sub_columns+0x28c>)
 800b844:	5c9a      	ldrb	r2, [r3, r2]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3308      	adds	r3, #8
 800b84a:	404a      	eors	r2, r1
 800b84c:	b2d2      	uxtb	r2, r2
 800b84e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b850:	7c3b      	ldrb	r3, [r7, #16]
 800b852:	461a      	mov	r2, r3
 800b854:	4b2c      	ldr	r3, [pc, #176]	; (800b908 <mix_sub_columns+0x28c>)
 800b856:	5c9a      	ldrb	r2, [r3, r2]
 800b858:	7d7b      	ldrb	r3, [r7, #21]
 800b85a:	4619      	mov	r1, r3
 800b85c:	4b28      	ldr	r3, [pc, #160]	; (800b900 <mix_sub_columns+0x284>)
 800b85e:	5c5b      	ldrb	r3, [r3, r1]
 800b860:	4053      	eors	r3, r2
 800b862:	b2da      	uxtb	r2, r3
 800b864:	7abb      	ldrb	r3, [r7, #10]
 800b866:	4619      	mov	r1, r3
 800b868:	4b26      	ldr	r3, [pc, #152]	; (800b904 <mix_sub_columns+0x288>)
 800b86a:	5c5b      	ldrb	r3, [r3, r1]
 800b86c:	4053      	eors	r3, r2
 800b86e:	b2d9      	uxtb	r1, r3
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	461a      	mov	r2, r3
 800b874:	4b24      	ldr	r3, [pc, #144]	; (800b908 <mix_sub_columns+0x28c>)
 800b876:	5c9a      	ldrb	r2, [r3, r2]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3309      	adds	r3, #9
 800b87c:	404a      	eors	r2, r1
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b882:	7c3b      	ldrb	r3, [r7, #16]
 800b884:	461a      	mov	r2, r3
 800b886:	4b20      	ldr	r3, [pc, #128]	; (800b908 <mix_sub_columns+0x28c>)
 800b888:	5c9a      	ldrb	r2, [r3, r2]
 800b88a:	7d7b      	ldrb	r3, [r7, #21]
 800b88c:	4619      	mov	r1, r3
 800b88e:	4b1e      	ldr	r3, [pc, #120]	; (800b908 <mix_sub_columns+0x28c>)
 800b890:	5c5b      	ldrb	r3, [r3, r1]
 800b892:	4053      	eors	r3, r2
 800b894:	b2da      	uxtb	r2, r3
 800b896:	7abb      	ldrb	r3, [r7, #10]
 800b898:	4619      	mov	r1, r3
 800b89a:	4b19      	ldr	r3, [pc, #100]	; (800b900 <mix_sub_columns+0x284>)
 800b89c:	5c5b      	ldrb	r3, [r3, r1]
 800b89e:	4053      	eors	r3, r2
 800b8a0:	b2d9      	uxtb	r1, r3
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4b17      	ldr	r3, [pc, #92]	; (800b904 <mix_sub_columns+0x288>)
 800b8a8:	5c9a      	ldrb	r2, [r3, r2]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	330a      	adds	r3, #10
 800b8ae:	404a      	eors	r2, r1
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b8b4:	7c3b      	ldrb	r3, [r7, #16]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	4b12      	ldr	r3, [pc, #72]	; (800b904 <mix_sub_columns+0x288>)
 800b8ba:	5c9a      	ldrb	r2, [r3, r2]
 800b8bc:	7d7b      	ldrb	r3, [r7, #21]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4b11      	ldr	r3, [pc, #68]	; (800b908 <mix_sub_columns+0x28c>)
 800b8c2:	5c5b      	ldrb	r3, [r3, r1]
 800b8c4:	4053      	eors	r3, r2
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	7abb      	ldrb	r3, [r7, #10]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4b0e      	ldr	r3, [pc, #56]	; (800b908 <mix_sub_columns+0x28c>)
 800b8ce:	5c5b      	ldrb	r3, [r3, r1]
 800b8d0:	4053      	eors	r3, r2
 800b8d2:	b2d9      	uxtb	r1, r3
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <mix_sub_columns+0x284>)
 800b8da:	5c9a      	ldrb	r2, [r3, r2]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	330b      	adds	r3, #11
 800b8e0:	404a      	eors	r2, r1
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b8e6:	7d3b      	ldrb	r3, [r7, #20]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4b05      	ldr	r3, [pc, #20]	; (800b900 <mix_sub_columns+0x284>)
 800b8ec:	5c9a      	ldrb	r2, [r3, r2]
 800b8ee:	7a7b      	ldrb	r3, [r7, #9]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4b04      	ldr	r3, [pc, #16]	; (800b904 <mix_sub_columns+0x288>)
 800b8f4:	5c5b      	ldrb	r3, [r3, r1]
 800b8f6:	4053      	eors	r3, r2
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	e005      	b.n	800b90c <mix_sub_columns+0x290>
 800b900:	0801bcc8 	.word	0x0801bcc8
 800b904:	0801bdc8 	.word	0x0801bdc8
 800b908:	0801bbc8 	.word	0x0801bbc8
 800b90c:	4b2d      	ldr	r3, [pc, #180]	; (800b9c4 <mix_sub_columns+0x348>)
 800b90e:	5c5b      	ldrb	r3, [r3, r1]
 800b910:	4053      	eors	r3, r2
 800b912:	b2d9      	uxtb	r1, r3
 800b914:	7cfb      	ldrb	r3, [r7, #19]
 800b916:	461a      	mov	r2, r3
 800b918:	4b2a      	ldr	r3, [pc, #168]	; (800b9c4 <mix_sub_columns+0x348>)
 800b91a:	5c9a      	ldrb	r2, [r3, r2]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	330c      	adds	r3, #12
 800b920:	404a      	eors	r2, r1
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b926:	7d3b      	ldrb	r3, [r7, #20]
 800b928:	461a      	mov	r2, r3
 800b92a:	4b26      	ldr	r3, [pc, #152]	; (800b9c4 <mix_sub_columns+0x348>)
 800b92c:	5c9a      	ldrb	r2, [r3, r2]
 800b92e:	7a7b      	ldrb	r3, [r7, #9]
 800b930:	4619      	mov	r1, r3
 800b932:	4b25      	ldr	r3, [pc, #148]	; (800b9c8 <mix_sub_columns+0x34c>)
 800b934:	5c5b      	ldrb	r3, [r3, r1]
 800b936:	4053      	eors	r3, r2
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	7bbb      	ldrb	r3, [r7, #14]
 800b93c:	4619      	mov	r1, r3
 800b93e:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <mix_sub_columns+0x350>)
 800b940:	5c5b      	ldrb	r3, [r3, r1]
 800b942:	4053      	eors	r3, r2
 800b944:	b2d9      	uxtb	r1, r3
 800b946:	7cfb      	ldrb	r3, [r7, #19]
 800b948:	461a      	mov	r2, r3
 800b94a:	4b1e      	ldr	r3, [pc, #120]	; (800b9c4 <mix_sub_columns+0x348>)
 800b94c:	5c9a      	ldrb	r2, [r3, r2]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	330d      	adds	r3, #13
 800b952:	404a      	eors	r2, r1
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b958:	7d3b      	ldrb	r3, [r7, #20]
 800b95a:	461a      	mov	r2, r3
 800b95c:	4b19      	ldr	r3, [pc, #100]	; (800b9c4 <mix_sub_columns+0x348>)
 800b95e:	5c9a      	ldrb	r2, [r3, r2]
 800b960:	7a7b      	ldrb	r3, [r7, #9]
 800b962:	4619      	mov	r1, r3
 800b964:	4b17      	ldr	r3, [pc, #92]	; (800b9c4 <mix_sub_columns+0x348>)
 800b966:	5c5b      	ldrb	r3, [r3, r1]
 800b968:	4053      	eors	r3, r2
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	4619      	mov	r1, r3
 800b970:	4b15      	ldr	r3, [pc, #84]	; (800b9c8 <mix_sub_columns+0x34c>)
 800b972:	5c5b      	ldrb	r3, [r3, r1]
 800b974:	4053      	eors	r3, r2
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	7cfb      	ldrb	r3, [r7, #19]
 800b97a:	461a      	mov	r2, r3
 800b97c:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <mix_sub_columns+0x350>)
 800b97e:	5c9a      	ldrb	r2, [r3, r2]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	330e      	adds	r3, #14
 800b984:	404a      	eors	r2, r1
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b98a:	7d3b      	ldrb	r3, [r7, #20]
 800b98c:	461a      	mov	r2, r3
 800b98e:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <mix_sub_columns+0x350>)
 800b990:	5c9a      	ldrb	r2, [r3, r2]
 800b992:	7a7b      	ldrb	r3, [r7, #9]
 800b994:	4619      	mov	r1, r3
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <mix_sub_columns+0x348>)
 800b998:	5c5b      	ldrb	r3, [r3, r1]
 800b99a:	4053      	eors	r3, r2
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4b08      	ldr	r3, [pc, #32]	; (800b9c4 <mix_sub_columns+0x348>)
 800b9a4:	5c5b      	ldrb	r3, [r3, r1]
 800b9a6:	4053      	eors	r3, r2
 800b9a8:	b2d9      	uxtb	r1, r3
 800b9aa:	7cfb      	ldrb	r3, [r7, #19]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <mix_sub_columns+0x34c>)
 800b9b0:	5c9a      	ldrb	r2, [r3, r2]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	330f      	adds	r3, #15
 800b9b6:	404a      	eors	r2, r1
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	701a      	strb	r2, [r3, #0]
  }
 800b9bc:	bf00      	nop
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	0801bbc8 	.word	0x0801bbc8
 800b9c8:	0801bcc8 	.word	0x0801bcc8
 800b9cc:	0801bdc8 	.word	0x0801bdc8

0800b9d0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b9de:	7afb      	ldrb	r3, [r7, #11]
 800b9e0:	3b10      	subs	r3, #16
 800b9e2:	2b10      	cmp	r3, #16
 800b9e4:	bf8c      	ite	hi
 800b9e6:	2201      	movhi	r2, #1
 800b9e8:	2200      	movls	r2, #0
 800b9ea:	b2d2      	uxtb	r2, r2
 800b9ec:	2a00      	cmp	r2, #0
 800b9ee:	d10d      	bne.n	800ba0c <lorawan_aes_set_key+0x3c>
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b9fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bf14      	ite	ne
 800ba02:	2301      	movne	r3, #1
 800ba04:	2300      	moveq	r3, #0
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d105      	bne.n	800ba18 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ba14:	23ff      	movs	r3, #255	; 0xff
 800ba16:	e0b2      	b.n	800bb7e <lorawan_aes_set_key+0x1ae>
        break;
 800ba18:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7afa      	ldrb	r2, [r7, #11]
 800ba1e:	68f9      	ldr	r1, [r7, #12]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff fbfa 	bl	800b21a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ba26:	7afb      	ldrb	r3, [r7, #11]
 800ba28:	331c      	adds	r3, #28
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ba30:	7c7b      	ldrb	r3, [r7, #17]
 800ba32:	091b      	lsrs	r3, r3, #4
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	75fb      	strb	r3, [r7, #23]
 800ba44:	2301      	movs	r3, #1
 800ba46:	75bb      	strb	r3, [r7, #22]
 800ba48:	e093      	b.n	800bb72 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	3b04      	subs	r3, #4
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	5cd3      	ldrb	r3, [r2, r3]
 800ba52:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	3b03      	subs	r3, #3
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	5cd3      	ldrb	r3, [r2, r3]
 800ba5c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	3b02      	subs	r3, #2
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	5cd3      	ldrb	r3, [r2, r3]
 800ba66:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	5cd3      	ldrb	r3, [r2, r3]
 800ba70:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	7afa      	ldrb	r2, [r7, #11]
 800ba76:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba7a:	fb02 f201 	mul.w	r2, r2, r1
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d127      	bne.n	800bad6 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800ba86:	7d7b      	ldrb	r3, [r7, #21]
 800ba88:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ba8a:	7d3b      	ldrb	r3, [r7, #20]
 800ba8c:	4a3e      	ldr	r2, [pc, #248]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800ba8e:	5cd2      	ldrb	r2, [r2, r3]
 800ba90:	7dbb      	ldrb	r3, [r7, #22]
 800ba92:	4053      	eors	r3, r2
 800ba94:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ba96:	7cfb      	ldrb	r3, [r7, #19]
 800ba98:	4a3b      	ldr	r2, [pc, #236]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800ba9a:	5cd3      	ldrb	r3, [r2, r3]
 800ba9c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ba9e:	7cbb      	ldrb	r3, [r7, #18]
 800baa0:	4a39      	ldr	r2, [pc, #228]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800baa2:	5cd3      	ldrb	r3, [r2, r3]
 800baa4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800baa6:	7c3b      	ldrb	r3, [r7, #16]
 800baa8:	4a37      	ldr	r2, [pc, #220]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800baaa:	5cd3      	ldrb	r3, [r2, r3]
 800baac:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800baae:	7dbb      	ldrb	r3, [r7, #22]
 800bab0:	005b      	lsls	r3, r3, #1
 800bab2:	b25a      	sxtb	r2, r3
 800bab4:	7dbb      	ldrb	r3, [r7, #22]
 800bab6:	09db      	lsrs	r3, r3, #7
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	4619      	mov	r1, r3
 800babc:	0049      	lsls	r1, r1, #1
 800babe:	440b      	add	r3, r1
 800bac0:	4619      	mov	r1, r3
 800bac2:	00c8      	lsls	r0, r1, #3
 800bac4:	4619      	mov	r1, r3
 800bac6:	4603      	mov	r3, r0
 800bac8:	440b      	add	r3, r1
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	b25b      	sxtb	r3, r3
 800bace:	4053      	eors	r3, r2
 800bad0:	b25b      	sxtb	r3, r3
 800bad2:	75bb      	strb	r3, [r7, #22]
 800bad4:	e01c      	b.n	800bb10 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	2b18      	cmp	r3, #24
 800bada:	d919      	bls.n	800bb10 <lorawan_aes_set_key+0x140>
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	7afa      	ldrb	r2, [r7, #11]
 800bae0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bae4:	fb02 f201 	mul.w	r2, r2, r1
 800bae8:	1a9b      	subs	r3, r3, r2
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b10      	cmp	r3, #16
 800baee:	d10f      	bne.n	800bb10 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800baf0:	7d7b      	ldrb	r3, [r7, #21]
 800baf2:	4a25      	ldr	r2, [pc, #148]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800baf4:	5cd3      	ldrb	r3, [r2, r3]
 800baf6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800baf8:	7d3b      	ldrb	r3, [r7, #20]
 800bafa:	4a23      	ldr	r2, [pc, #140]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800bafc:	5cd3      	ldrb	r3, [r2, r3]
 800bafe:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800bb00:	7cfb      	ldrb	r3, [r7, #19]
 800bb02:	4a21      	ldr	r2, [pc, #132]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800bb04:	5cd3      	ldrb	r3, [r2, r3]
 800bb06:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800bb08:	7cbb      	ldrb	r3, [r7, #18]
 800bb0a:	4a1f      	ldr	r2, [pc, #124]	; (800bb88 <lorawan_aes_set_key+0x1b8>)
 800bb0c:	5cd3      	ldrb	r3, [r2, r3]
 800bb0e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800bb10:	7dfa      	ldrb	r2, [r7, #23]
 800bb12:	7afb      	ldrb	r3, [r7, #11]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800bb18:	7c3b      	ldrb	r3, [r7, #16]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	5cd1      	ldrb	r1, [r2, r3]
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	7d7a      	ldrb	r2, [r7, #21]
 800bb22:	404a      	eors	r2, r1
 800bb24:	b2d1      	uxtb	r1, r2
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800bb2a:	7c3b      	ldrb	r3, [r7, #16]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	5cd1      	ldrb	r1, [r2, r3]
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	3301      	adds	r3, #1
 800bb36:	7d3a      	ldrb	r2, [r7, #20]
 800bb38:	404a      	eors	r2, r1
 800bb3a:	b2d1      	uxtb	r1, r2
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800bb40:	7c3b      	ldrb	r3, [r7, #16]
 800bb42:	3302      	adds	r3, #2
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	5cd1      	ldrb	r1, [r2, r3]
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	3302      	adds	r3, #2
 800bb4c:	7cfa      	ldrb	r2, [r7, #19]
 800bb4e:	404a      	eors	r2, r1
 800bb50:	b2d1      	uxtb	r1, r2
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bb56:	7c3b      	ldrb	r3, [r7, #16]
 800bb58:	3303      	adds	r3, #3
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	5cd1      	ldrb	r1, [r2, r3]
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	3303      	adds	r3, #3
 800bb62:	7cba      	ldrb	r2, [r7, #18]
 800bb64:	404a      	eors	r2, r1
 800bb66:	b2d1      	uxtb	r1, r2
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	75fb      	strb	r3, [r7, #23]
 800bb72:	7dfa      	ldrb	r2, [r7, #23]
 800bb74:	7c7b      	ldrb	r3, [r7, #17]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	f4ff af67 	bcc.w	800ba4a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	0801bbc8 	.word	0x0801bbc8

0800bb8c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	; 0x28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d038      	beq.n	800bc14 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	68f9      	ldr	r1, [r7, #12]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fc07 	bl	800b3be <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbb6:	e014      	b.n	800bbe2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bbb8:	f107 0314 	add.w	r3, r7, #20
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff fd5d 	bl	800b67c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbc8:	0112      	lsls	r2, r2, #4
 800bbca:	441a      	add	r2, r3
 800bbcc:	f107 0314 	add.w	r3, r7, #20
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff fcab 	bl	800b52e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbdc:	3301      	adds	r3, #1
 800bbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800bbe8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d3e3      	bcc.n	800bbb8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bbf0:	f107 0314 	add.w	r3, r7, #20
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff fca7 	bl	800b548 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bc00:	0112      	lsls	r2, r2, #4
 800bc02:	441a      	add	r2, r3
 800bc04:	f107 0314 	add.w	r3, r7, #20
 800bc08:	4619      	mov	r1, r3
 800bc0a:	68b8      	ldr	r0, [r7, #8]
 800bc0c:	f7ff fbd7 	bl	800b3be <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	e000      	b.n	800bc16 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bc14:	23ff      	movs	r3, #255	; 0xff
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3728      	adds	r7, #40	; 0x28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
	...

0800bc20 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800bc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc22:	b09d      	sub	sp, #116	; 0x74
 800bc24:	af10      	add	r7, sp, #64	; 0x40
 800bc26:	4603      	mov	r3, r0
 800bc28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bc2c:	2306      	movs	r3, #6
 800bc2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bc32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800bc36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 f9f1 	bl	800c024 <SecureElementGetKeyByID>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bc48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 80b0 	bne.w	800bdb2 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bc52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bc5a:	4b58      	ldr	r3, [pc, #352]	; (800bdbc <PrintKey+0x19c>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	2002      	movs	r0, #2
 800bc62:	f00e ff85 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bc66:	e056      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bc68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d106      	bne.n	800bc7e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bc70:	4b53      	ldr	r3, [pc, #332]	; (800bdc0 <PrintKey+0x1a0>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	2100      	movs	r1, #0
 800bc76:	2002      	movs	r0, #2
 800bc78:	f00e ff7a 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bc7c:	e04b      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d106      	bne.n	800bc94 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bc86:	4b4f      	ldr	r3, [pc, #316]	; (800bdc4 <PrintKey+0x1a4>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	2002      	movs	r0, #2
 800bc8e:	f00e ff6f 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bc92:	e040      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bc94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d106      	bne.n	800bcaa <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bc9c:	4b4a      	ldr	r3, [pc, #296]	; (800bdc8 <PrintKey+0x1a8>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2100      	movs	r1, #0
 800bca2:	2002      	movs	r0, #2
 800bca4:	f00e ff64 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bca8:	e035      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bcaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d106      	bne.n	800bcc0 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800bcb2:	4b46      	ldr	r3, [pc, #280]	; (800bdcc <PrintKey+0x1ac>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	2002      	movs	r0, #2
 800bcba:	f00e ff59 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bcbe:	e02a      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800bcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcc4:	2b7f      	cmp	r3, #127	; 0x7f
 800bcc6:	d106      	bne.n	800bcd6 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800bcc8:	4b41      	ldr	r3, [pc, #260]	; (800bdd0 <PrintKey+0x1b0>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	2100      	movs	r1, #0
 800bcce:	2002      	movs	r0, #2
 800bcd0:	f00e ff4e 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bcd4:	e01f      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800bcd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcda:	2b80      	cmp	r3, #128	; 0x80
 800bcdc:	d106      	bne.n	800bcec <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800bcde:	4b3d      	ldr	r3, [pc, #244]	; (800bdd4 <PrintKey+0x1b4>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	2002      	movs	r0, #2
 800bce6:	f00e ff43 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bcea:	e014      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800bcec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcf0:	2b81      	cmp	r3, #129	; 0x81
 800bcf2:	d106      	bne.n	800bd02 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800bcf4:	4b38      	ldr	r3, [pc, #224]	; (800bdd8 <PrintKey+0x1b8>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	2002      	movs	r0, #2
 800bcfc:	f00e ff38 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 800bd00:	e009      	b.n	800bd16 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800bd02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd06:	2b82      	cmp	r3, #130	; 0x82
 800bd08:	d105      	bne.n	800bd16 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800bd0a:	4b34      	ldr	r3, [pc, #208]	; (800bddc <PrintKey+0x1bc>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2100      	movs	r1, #0
 800bd10:	2002      	movs	r0, #2
 800bd12:	f00e ff2d 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	785b      	ldrb	r3, [r3, #1]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	789b      	ldrb	r3, [r3, #2]
 800bd20:	461c      	mov	r4, r3
 800bd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd24:	78db      	ldrb	r3, [r3, #3]
 800bd26:	461d      	mov	r5, r3
 800bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2a:	791b      	ldrb	r3, [r3, #4]
 800bd2c:	461e      	mov	r6, r3
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	795b      	ldrb	r3, [r3, #5]
 800bd32:	623b      	str	r3, [r7, #32]
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	799b      	ldrb	r3, [r3, #6]
 800bd38:	61fb      	str	r3, [r7, #28]
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	79db      	ldrb	r3, [r3, #7]
 800bd3e:	61bb      	str	r3, [r7, #24]
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	7a1b      	ldrb	r3, [r3, #8]
 800bd44:	617b      	str	r3, [r7, #20]
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	7a5b      	ldrb	r3, [r3, #9]
 800bd4a:	613b      	str	r3, [r7, #16]
 800bd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4e:	7a9b      	ldrb	r3, [r3, #10]
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	7adb      	ldrb	r3, [r3, #11]
 800bd56:	60bb      	str	r3, [r7, #8]
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	7b1b      	ldrb	r3, [r3, #12]
 800bd5c:	607b      	str	r3, [r7, #4]
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	7b5b      	ldrb	r3, [r3, #13]
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	7b9b      	ldrb	r3, [r3, #14]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6c:	7bdb      	ldrb	r3, [r3, #15]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd72:	7c1b      	ldrb	r3, [r3, #16]
 800bd74:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd76:	920e      	str	r2, [sp, #56]	; 0x38
 800bd78:	910d      	str	r1, [sp, #52]	; 0x34
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	920c      	str	r2, [sp, #48]	; 0x30
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	920a      	str	r2, [sp, #40]	; 0x28
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	9209      	str	r2, [sp, #36]	; 0x24
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	9208      	str	r2, [sp, #32]
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	9207      	str	r2, [sp, #28]
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	9206      	str	r2, [sp, #24]
 800bd96:	69fa      	ldr	r2, [r7, #28]
 800bd98:	9205      	str	r2, [sp, #20]
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	9603      	str	r6, [sp, #12]
 800bda0:	9502      	str	r5, [sp, #8]
 800bda2:	9401      	str	r4, [sp, #4]
 800bda4:	9000      	str	r0, [sp, #0]
 800bda6:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <PrintKey+0x1c0>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	2002      	movs	r0, #2
 800bdae:	f00e fedf 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bdb2:	bf00      	nop
 800bdb4:	3734      	adds	r7, #52	; 0x34
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	0801b5e0 	.word	0x0801b5e0
 800bdc0:	0801b5f8 	.word	0x0801b5f8
 800bdc4:	0801b610 	.word	0x0801b610
 800bdc8:	0801b628 	.word	0x0801b628
 800bdcc:	0801b640 	.word	0x0801b640
 800bdd0:	0801b658 	.word	0x0801b658
 800bdd4:	0801b670 	.word	0x0801b670
 800bdd8:	0801b688 	.word	0x0801b688
 800bddc:	0801b6a0 	.word	0x0801b6a0
 800bde0:	0801b6b8 	.word	0x0801b6b8

0800bde4 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
 800bdf4:	e01a      	b.n	800be2c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bdf6:	4b12      	ldr	r3, [pc, #72]	; (800be40 <GetKeyByID+0x5c>)
 800bdf8:	6819      	ldr	r1, [r3, #0]
 800bdfa:	7bfa      	ldrb	r2, [r7, #15]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	4413      	add	r3, r2
 800be02:	440b      	add	r3, r1
 800be04:	3310      	adds	r3, #16
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	79fa      	ldrb	r2, [r7, #7]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d10b      	bne.n	800be26 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <GetKeyByID+0x5c>)
 800be10:	6819      	ldr	r1, [r3, #0]
 800be12:	7bfa      	ldrb	r2, [r7, #15]
 800be14:	4613      	mov	r3, r2
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	4413      	add	r3, r2
 800be1a:	3310      	adds	r3, #16
 800be1c:	18ca      	adds	r2, r1, r3
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800be22:	2300      	movs	r3, #0
 800be24:	e006      	b.n	800be34 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	3301      	adds	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	2b09      	cmp	r3, #9
 800be30:	d9e1      	bls.n	800bdf6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be32:	2303      	movs	r3, #3
}
 800be34:	4618      	mov	r0, r3
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	200003c0 	.word	0x200003c0

0800be44 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800be44:	b590      	push	{r4, r7, lr}
 800be46:	b0d1      	sub	sp, #324	; 0x144
 800be48:	af00      	add	r7, sp, #0
 800be4a:	f107 040c 	add.w	r4, r7, #12
 800be4e:	6020      	str	r0, [r4, #0]
 800be50:	f107 0008 	add.w	r0, r7, #8
 800be54:	6001      	str	r1, [r0, #0]
 800be56:	4619      	mov	r1, r3
 800be58:	1dbb      	adds	r3, r7, #6
 800be5a:	801a      	strh	r2, [r3, #0]
 800be5c:	1d7b      	adds	r3, r7, #5
 800be5e:	460a      	mov	r2, r1
 800be60:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <ComputeCmac+0x30>
 800be6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be74:	2302      	movs	r3, #2
 800be76:	e04e      	b.n	800bf16 <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800be78:	f107 0314 	add.w	r3, r7, #20
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe ff23 	bl	800acc8 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800be82:	f107 0210 	add.w	r2, r7, #16
 800be86:	1d7b      	adds	r3, r7, #5
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff ffa9 	bl	800bde4 <GetKeyByID>
 800be92:	4603      	mov	r3, r0
 800be94:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800be98:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d138      	bne.n	800bf12 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bea0:	f107 0310 	add.w	r3, r7, #16
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	f107 0314 	add.w	r3, r7, #20
 800beac:	4611      	mov	r1, r2
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe ff23 	bl	800acfa <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800beb4:	f107 030c 	add.w	r3, r7, #12
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d007      	beq.n	800bece <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bebe:	f107 030c 	add.w	r3, r7, #12
 800bec2:	f107 0014 	add.w	r0, r7, #20
 800bec6:	2210      	movs	r2, #16
 800bec8:	6819      	ldr	r1, [r3, #0]
 800beca:	f7fe ff25 	bl	800ad18 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bece:	1dbb      	adds	r3, r7, #6
 800bed0:	881a      	ldrh	r2, [r3, #0]
 800bed2:	f107 0308 	add.w	r3, r7, #8
 800bed6:	f107 0014 	add.w	r0, r7, #20
 800beda:	6819      	ldr	r1, [r3, #0]
 800bedc:	f7fe ff1c 	bl	800ad18 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bee0:	f107 0214 	add.w	r2, r7, #20
 800bee4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bee8:	4611      	mov	r1, r2
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe ffd6 	bl	800ae9c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bef0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bef4:	061a      	lsls	r2, r3, #24
 800bef6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800befa:	041b      	lsls	r3, r3, #16
 800befc:	431a      	orrs	r2, r3
 800befe:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bf02:	021b      	lsls	r3, r3, #8
 800bf04:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bf06:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bf10:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bf12:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd90      	pop	{r4, r7, pc}

0800bf20 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bf20:	b5b0      	push	{r4, r5, r7, lr}
 800bf22:	b0b2      	sub	sp, #200	; 0xc8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bf2a:	f107 0308 	add.w	r3, r7, #8
 800bf2e:	22c0      	movs	r2, #192	; 0xc0
 800bf30:	2100      	movs	r1, #0
 800bf32:	4618      	mov	r0, r3
 800bf34:	f00f f8ba 	bl	801b0ac <memset>
 800bf38:	4a33      	ldr	r2, [pc, #204]	; (800c008 <SecureElementInit+0xe8>)
 800bf3a:	f107 0308 	add.w	r3, r7, #8
 800bf3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf42:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf46:	4a31      	ldr	r2, [pc, #196]	; (800c00c <SecureElementInit+0xec>)
 800bf48:	f107 0310 	add.w	r3, r7, #16
 800bf4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf50:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf54:	4b2e      	ldr	r3, [pc, #184]	; (800c010 <SecureElementInit+0xf0>)
 800bf56:	f107 0419 	add.w	r4, r7, #25
 800bf5a:	461d      	mov	r5, r3
 800bf5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf5e:	6020      	str	r0, [r4, #0]
 800bf60:	6061      	str	r1, [r4, #4]
 800bf62:	60a2      	str	r2, [r4, #8]
 800bf64:	60e3      	str	r3, [r4, #12]
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bf6c:	4b29      	ldr	r3, [pc, #164]	; (800c014 <SecureElementInit+0xf4>)
 800bf6e:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bf72:	461d      	mov	r5, r3
 800bf74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf76:	6020      	str	r0, [r4, #0]
 800bf78:	6061      	str	r1, [r4, #4]
 800bf7a:	60a2      	str	r2, [r4, #8]
 800bf7c:	60e3      	str	r3, [r4, #12]
 800bf7e:	2302      	movs	r3, #2
 800bf80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bf84:	2303      	movs	r3, #3
 800bf86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bf8a:	2304      	movs	r3, #4
 800bf8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bf90:	237f      	movs	r3, #127	; 0x7f
 800bf92:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bf96:	2380      	movs	r3, #128	; 0x80
 800bf98:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bf9c:	2381      	movs	r3, #129	; 0x81
 800bf9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bfa2:	2382      	movs	r3, #130	; 0x82
 800bfa4:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bfa8:	2383      	movs	r3, #131	; 0x83
 800bfaa:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <SecureElementInit+0x98>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e023      	b.n	800c000 <SecureElementInit+0xe0>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bfb8:	4a17      	ldr	r2, [pc, #92]	; (800c018 <SecureElementInit+0xf8>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bfbe:	4b16      	ldr	r3, [pc, #88]	; (800c018 <SecureElementInit+0xf8>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f107 0108 	add.w	r1, r7, #8
 800bfc6:	22c0      	movs	r2, #192	; 0xc0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f00a fb90 	bl	80166ee <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bfce:	4b13      	ldr	r3, [pc, #76]	; (800c01c <SecureElementInit+0xfc>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	2002      	movs	r0, #2
 800bfd6:	f00e fdcb 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bfda:	2000      	movs	r0, #0
 800bfdc:	f7ff fe20 	bl	800bc20 <PrintKey>
    PrintKey(NWK_KEY);
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	f7ff fe1d 	bl	800bc20 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bfe6:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <SecureElementInit+0x100>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2100      	movs	r1, #0
 800bfec:	2002      	movs	r0, #2
 800bfee:	f00e fdbf 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bff2:	2003      	movs	r0, #3
 800bff4:	f7ff fe14 	bl	800bc20 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bff8:	2002      	movs	r0, #2
 800bffa:	f7ff fe11 	bl	800bc20 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	37c8      	adds	r7, #200	; 0xc8
 800c004:	46bd      	mov	sp, r7
 800c006:	bdb0      	pop	{r4, r5, r7, pc}
 800c008:	0801b73c 	.word	0x0801b73c
 800c00c:	0801b744 	.word	0x0801b744
 800c010:	0801b74c 	.word	0x0801b74c
 800c014:	0801b75c 	.word	0x0801b75c
 800c018:	200003c0 	.word	0x200003c0
 800c01c:	0801b70c 	.word	0x0801b70c
 800c020:	0801b724 	.word	0x0801b724

0800c024 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	6039      	str	r1, [r7, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
 800c034:	e01a      	b.n	800c06c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c036:	4b12      	ldr	r3, [pc, #72]	; (800c080 <SecureElementGetKeyByID+0x5c>)
 800c038:	6819      	ldr	r1, [r3, #0]
 800c03a:	7bfa      	ldrb	r2, [r7, #15]
 800c03c:	4613      	mov	r3, r2
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	4413      	add	r3, r2
 800c042:	440b      	add	r3, r1
 800c044:	3310      	adds	r3, #16
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	79fa      	ldrb	r2, [r7, #7]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d10b      	bne.n	800c066 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <SecureElementGetKeyByID+0x5c>)
 800c050:	6819      	ldr	r1, [r3, #0]
 800c052:	7bfa      	ldrb	r2, [r7, #15]
 800c054:	4613      	mov	r3, r2
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	4413      	add	r3, r2
 800c05a:	3310      	adds	r3, #16
 800c05c:	18ca      	adds	r2, r1, r3
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c062:	2300      	movs	r3, #0
 800c064:	e006      	b.n	800c074 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	3301      	adds	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	2b09      	cmp	r3, #9
 800c070:	d9e1      	bls.n	800c036 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c072:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	bc80      	pop	{r7}
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	200003c0 	.word	0x200003c0

0800c084 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c096:	2302      	movs	r3, #2
 800c098:	e04c      	b.n	800c134 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c09a:	2300      	movs	r3, #0
 800c09c:	77fb      	strb	r3, [r7, #31]
 800c09e:	e045      	b.n	800c12c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c0a0:	4b26      	ldr	r3, [pc, #152]	; (800c13c <SecureElementSetKey+0xb8>)
 800c0a2:	6819      	ldr	r1, [r3, #0]
 800c0a4:	7ffa      	ldrb	r2, [r7, #31]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	011b      	lsls	r3, r3, #4
 800c0aa:	4413      	add	r3, r2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	79fa      	ldrb	r2, [r7, #7]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d136      	bne.n	800c126 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c0b8:	79fb      	ldrb	r3, [r7, #7]
 800c0ba:	2b80      	cmp	r3, #128	; 0x80
 800c0bc:	d123      	bne.n	800c106 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c0be:	2306      	movs	r3, #6
 800c0c0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60fb      	str	r3, [r7, #12]
 800c0c6:	f107 0310 	add.w	r3, r7, #16
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	605a      	str	r2, [r3, #4]
 800c0d0:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c0d2:	f107 030c 	add.w	r3, r7, #12
 800c0d6:	227f      	movs	r2, #127	; 0x7f
 800c0d8:	2110      	movs	r1, #16
 800c0da:	6838      	ldr	r0, [r7, #0]
 800c0dc:	f000 f87d 	bl	800c1da <SecureElementAesEncrypt>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c0e4:	4b15      	ldr	r3, [pc, #84]	; (800c13c <SecureElementSetKey+0xb8>)
 800c0e6:	6819      	ldr	r1, [r3, #0]
 800c0e8:	7ffa      	ldrb	r2, [r7, #31]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	011b      	lsls	r3, r3, #4
 800c0ee:	4413      	add	r3, r2
 800c0f0:	3310      	adds	r3, #16
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	f107 010c 	add.w	r1, r7, #12
 800c0fa:	2210      	movs	r2, #16
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f00a faf6 	bl	80166ee <memcpy1>
                return retval;
 800c102:	7fbb      	ldrb	r3, [r7, #30]
 800c104:	e016      	b.n	800c134 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c106:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <SecureElementSetKey+0xb8>)
 800c108:	6819      	ldr	r1, [r3, #0]
 800c10a:	7ffa      	ldrb	r2, [r7, #31]
 800c10c:	4613      	mov	r3, r2
 800c10e:	011b      	lsls	r3, r3, #4
 800c110:	4413      	add	r3, r2
 800c112:	3310      	adds	r3, #16
 800c114:	440b      	add	r3, r1
 800c116:	3301      	adds	r3, #1
 800c118:	2210      	movs	r2, #16
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f00a fae6 	bl	80166ee <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c122:	2300      	movs	r3, #0
 800c124:	e006      	b.n	800c134 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c126:	7ffb      	ldrb	r3, [r7, #31]
 800c128:	3301      	adds	r3, #1
 800c12a:	77fb      	strb	r3, [r7, #31]
 800c12c:	7ffb      	ldrb	r3, [r7, #31]
 800c12e:	2b09      	cmp	r3, #9
 800c130:	d9b6      	bls.n	800c0a0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c132:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	200003c0 	.word	0x200003c0

0800c140 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4611      	mov	r1, r2
 800c14c:	461a      	mov	r2, r3
 800c14e:	460b      	mov	r3, r1
 800c150:	80fb      	strh	r3, [r7, #6]
 800c152:	4613      	mov	r3, r2
 800c154:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c156:	797b      	ldrb	r3, [r7, #5]
 800c158:	2b7e      	cmp	r3, #126	; 0x7e
 800c15a:	d901      	bls.n	800c160 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e009      	b.n	800c174 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c160:	7979      	ldrb	r1, [r7, #5]
 800c162:	88fa      	ldrh	r2, [r7, #6]
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	460b      	mov	r3, r1
 800c16a:	68b9      	ldr	r1, [r7, #8]
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f7ff fe69 	bl	800be44 <ComputeCmac>
 800c172:	4603      	mov	r3, r0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b088      	sub	sp, #32
 800c180:	af02      	add	r7, sp, #8
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	607a      	str	r2, [r7, #4]
 800c186:	461a      	mov	r2, r3
 800c188:	460b      	mov	r3, r1
 800c18a:	817b      	strh	r3, [r7, #10]
 800c18c:	4613      	mov	r3, r2
 800c18e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c196:	2302      	movs	r3, #2
 800c198:	e01b      	b.n	800c1d2 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c19a:	2306      	movs	r3, #6
 800c19c:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c1a2:	7a79      	ldrb	r1, [r7, #9]
 800c1a4:	897a      	ldrh	r2, [r7, #10]
 800c1a6:	f107 0310 	add.w	r3, r7, #16
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	68f9      	ldr	r1, [r7, #12]
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	f7ff fe47 	bl	800be44 <ComputeCmac>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	e006      	b.n	800c1d2 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d001      	beq.n	800c1d0 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3718      	adds	r7, #24
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b0c2      	sub	sp, #264	; 0x108
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	1d3a      	adds	r2, r7, #4
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	817b      	strh	r3, [r7, #10]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <SecureElementAesEncrypt+0x26>
 800c1f8:	1d3b      	adds	r3, r7, #4
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d101      	bne.n	800c204 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c200:	2302      	movs	r3, #2
 800c202:	e043      	b.n	800c28c <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c204:	897b      	ldrh	r3, [r7, #10]
 800c206:	f003 030f 	and.w	r3, r3, #15
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c210:	2305      	movs	r3, #5
 800c212:	e03b      	b.n	800c28c <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c214:	f107 0314 	add.w	r3, r7, #20
 800c218:	22f0      	movs	r2, #240	; 0xf0
 800c21a:	2100      	movs	r1, #0
 800c21c:	4618      	mov	r0, r3
 800c21e:	f00a faa1 	bl	8016764 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c222:	f107 0210 	add.w	r2, r7, #16
 800c226:	7a7b      	ldrb	r3, [r7, #9]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff fdda 	bl	800bde4 <GetKeyByID>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c236:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d124      	bne.n	800c288 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	3301      	adds	r3, #1
 800c242:	f107 0214 	add.w	r2, r7, #20
 800c246:	2110      	movs	r1, #16
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff fbc1 	bl	800b9d0 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c254:	e015      	b.n	800c282 <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c256:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	18d0      	adds	r0, r2, r3
 800c25e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c262:	1d3a      	adds	r2, r7, #4
 800c264:	6812      	ldr	r2, [r2, #0]
 800c266:	4413      	add	r3, r2
 800c268:	f107 0214 	add.w	r2, r7, #20
 800c26c:	4619      	mov	r1, r3
 800c26e:	f7ff fc8d 	bl	800bb8c <lorawan_aes_encrypt>
            block = block + 16;
 800c272:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c276:	3310      	adds	r3, #16
 800c278:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c27c:	897b      	ldrh	r3, [r7, #10]
 800c27e:	3b10      	subs	r3, #16
 800c280:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c282:	897b      	ldrh	r3, [r7, #10]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1e6      	bne.n	800c256 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c288:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b088      	sub	sp, #32
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	70fb      	strb	r3, [r7, #3]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e02e      	b.n	800c30e <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c2b0:	2306      	movs	r3, #6
 800c2b2:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c2b4:	78bb      	ldrb	r3, [r7, #2]
 800c2b6:	2b7f      	cmp	r3, #127	; 0x7f
 800c2b8:	d104      	bne.n	800c2c4 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c2ba:	78fb      	ldrb	r3, [r7, #3]
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d001      	beq.n	800c2c4 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e024      	b.n	800c30e <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	f107 0310 	add.w	r3, r7, #16
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	605a      	str	r2, [r3, #4]
 800c2d2:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c2d4:	f107 030c 	add.w	r3, r7, #12
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	2110      	movs	r1, #16
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff ff7c 	bl	800c1da <SecureElementAesEncrypt>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c2e6:	7ffb      	ldrb	r3, [r7, #31]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c2ec:	7ffb      	ldrb	r3, [r7, #31]
 800c2ee:	e00e      	b.n	800c30e <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c2f0:	f107 020c 	add.w	r2, r7, #12
 800c2f4:	78bb      	ldrb	r3, [r7, #2]
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fec3 	bl	800c084 <SecureElementSetKey>
 800c2fe:	4603      	mov	r3, r0
 800c300:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c302:	7ffb      	ldrb	r3, [r7, #31]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c308:	7ffb      	ldrb	r3, [r7, #31]
 800c30a:	e000      	b.n	800c30e <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c30c:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3720      	adds	r7, #32
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b086      	sub	sp, #24
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607b      	str	r3, [r7, #4]
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]
 800c324:	4613      	mov	r3, r2
 800c326:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d005      	beq.n	800c33a <SecureElementProcessJoinAccept+0x24>
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <SecureElementProcessJoinAccept+0x24>
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c33a:	2302      	movs	r3, #2
 800c33c:	e064      	b.n	800c408 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c33e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c342:	2b21      	cmp	r3, #33	; 0x21
 800c344:	d901      	bls.n	800c34a <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c346:	2305      	movs	r3, #5
 800c348:	e05e      	b.n	800c408 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c34a:	2301      	movs	r3, #1
 800c34c:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c34e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c352:	b29b      	uxth	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c35a:	f00a f9c8 	bl	80166ee <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	1c58      	adds	r0, r3, #1
 800c362:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c366:	b29b      	uxth	r3, r3
 800c368:	3b01      	subs	r3, #1
 800c36a:	b299      	uxth	r1, r3
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	3301      	adds	r3, #1
 800c370:	7dfa      	ldrb	r2, [r7, #23]
 800c372:	f7ff ff32 	bl	800c1da <SecureElementAesEncrypt>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c37c:	2307      	movs	r3, #7
 800c37e:	e043      	b.n	800c408 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c382:	330b      	adds	r3, #11
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	09db      	lsrs	r3, r3, #7
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c38e:	2300      	movs	r3, #0
 800c390:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c392:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c396:	3b04      	subs	r3, #4
 800c398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c39a:	4413      	add	r3, r2
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c3a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3a4:	3b03      	subs	r3, #3
 800c3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a8:	4413      	add	r3, r2
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c3b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3b8:	3b02      	subs	r3, #2
 800c3ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3bc:	4413      	add	r3, r2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	041b      	lsls	r3, r3, #16
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c3c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3d0:	4413      	add	r3, r2
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	061b      	lsls	r3, r3, #24
 800c3d6:	693a      	ldr	r2, [r7, #16]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10e      	bne.n	800c402 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c3e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	3b04      	subs	r3, #4
 800c3ec:	b299      	uxth	r1, r3
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3f4:	f7ff fec2 	bl	800c17c <SecureElementVerifyAesCmac>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e002      	b.n	800c408 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c402:	2304      	movs	r3, #4
 800c404:	e000      	b.n	800c408 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c41e:	2302      	movs	r3, #2
 800c420:	e006      	b.n	800c430 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c422:	4b05      	ldr	r3, [pc, #20]	; (800c438 <SecureElementRandomNumber+0x28>)
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	4798      	blx	r3
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	0801bf10 	.word	0x0801bf10

0800c43c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c44a:	2302      	movs	r3, #2
 800c44c:	e007      	b.n	800c45e <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c44e:	4b06      	ldr	r3, [pc, #24]	; (800c468 <SecureElementSetDevEui+0x2c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2208      	movs	r2, #8
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	4618      	mov	r0, r3
 800c458:	f00a f949 	bl	80166ee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	200003c0 	.word	0x200003c0

0800c46c <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c470:	4b02      	ldr	r3, [pc, #8]	; (800c47c <SecureElementGetDevEui+0x10>)
 800c472:	681b      	ldr	r3, [r3, #0]
}
 800c474:	4618      	mov	r0, r3
 800c476:	46bd      	mov	sp, r7
 800c478:	bc80      	pop	{r7}
 800c47a:	4770      	bx	lr
 800c47c:	200003c0 	.word	0x200003c0

0800c480 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c48e:	2302      	movs	r3, #2
 800c490:	e008      	b.n	800c4a4 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c492:	4b06      	ldr	r3, [pc, #24]	; (800c4ac <SecureElementSetJoinEui+0x2c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3308      	adds	r3, #8
 800c498:	2208      	movs	r2, #8
 800c49a:	6879      	ldr	r1, [r7, #4]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f00a f926 	bl	80166ee <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	200003c0 	.word	0x200003c0

0800c4b0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c4b4:	4b03      	ldr	r3, [pc, #12]	; (800c4c4 <SecureElementGetJoinEui+0x14>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3308      	adds	r3, #8
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	200003c0 	.word	0x200003c0

0800c4c8 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c4d0:	4a1a      	ldr	r2, [pc, #104]	; (800c53c <LmHandlerInit+0x74>)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c4d6:	4b1a      	ldr	r3, [pc, #104]	; (800c540 <LmHandlerInit+0x78>)
 800c4d8:	4a1a      	ldr	r2, [pc, #104]	; (800c544 <LmHandlerInit+0x7c>)
 800c4da:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c4dc:	4b18      	ldr	r3, [pc, #96]	; (800c540 <LmHandlerInit+0x78>)
 800c4de:	4a1a      	ldr	r2, [pc, #104]	; (800c548 <LmHandlerInit+0x80>)
 800c4e0:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c4e2:	4b17      	ldr	r3, [pc, #92]	; (800c540 <LmHandlerInit+0x78>)
 800c4e4:	4a19      	ldr	r2, [pc, #100]	; (800c54c <LmHandlerInit+0x84>)
 800c4e6:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <LmHandlerInit+0x78>)
 800c4ea:	4a19      	ldr	r2, [pc, #100]	; (800c550 <LmHandlerInit+0x88>)
 800c4ec:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c4ee:	4b13      	ldr	r3, [pc, #76]	; (800c53c <LmHandlerInit+0x74>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a17      	ldr	r2, [pc, #92]	; (800c554 <LmHandlerInit+0x8c>)
 800c4f6:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c4f8:	4b10      	ldr	r3, [pc, #64]	; (800c53c <LmHandlerInit+0x74>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	4a15      	ldr	r2, [pc, #84]	; (800c554 <LmHandlerInit+0x8c>)
 800c500:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c502:	4b0e      	ldr	r3, [pc, #56]	; (800c53c <LmHandlerInit+0x74>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	4a12      	ldr	r2, [pc, #72]	; (800c554 <LmHandlerInit+0x8c>)
 800c50a:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c50c:	4b11      	ldr	r3, [pc, #68]	; (800c554 <LmHandlerInit+0x8c>)
 800c50e:	4a12      	ldr	r2, [pc, #72]	; (800c558 <LmHandlerInit+0x90>)
 800c510:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <LmHandlerInit+0x74>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	4a0e      	ldr	r2, [pc, #56]	; (800c554 <LmHandlerInit+0x8c>)
 800c51a:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c51c:	490f      	ldr	r1, [pc, #60]	; (800c55c <LmHandlerInit+0x94>)
 800c51e:	2000      	movs	r0, #0
 800c520:	f000 fcfe 	bl	800cf20 <LmHandlerPackageRegister>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295
 800c52e:	e000      	b.n	800c532 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	200003e8 	.word	0x200003e8
 800c540:	200003ec 	.word	0x200003ec
 800c544:	0800cc75 	.word	0x0800cc75
 800c548:	0800ccdd 	.word	0x0800ccdd
 800c54c:	0800cdbd 	.word	0x0800cdbd
 800c550:	0800ce81 	.word	0x0800ce81
 800c554:	200003fc 	.word	0x200003fc
 800c558:	0800d191 	.word	0x0800d191
 800c55c:	200000b8 	.word	0x200000b8

0800c560 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c562:	b099      	sub	sp, #100	; 0x64
 800c564:	af08      	add	r7, sp, #32
 800c566:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c56c:	2210      	movs	r2, #16
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	4882      	ldr	r0, [pc, #520]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c572:	f00d fac5 	bl	8019b00 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c576:	f7fe fb73 	bl	800ac60 <LoraInfo_GetPtr>
 800c57a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c57c:	4b7f      	ldr	r3, [pc, #508]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	2301      	movs	r3, #1
 800c584:	4093      	lsls	r3, r2
 800c586:	461a      	mov	r2, r3
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	4013      	ands	r3, r2
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00c      	beq.n	800c5ac <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c592:	4b7a      	ldr	r3, [pc, #488]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	4979      	ldr	r1, [pc, #484]	; (800c780 <LmHandlerConfigure+0x220>)
 800c59a:	487a      	ldr	r0, [pc, #488]	; (800c784 <LmHandlerConfigure+0x224>)
 800c59c:	f004 fb1a 	bl	8010bd4 <LoRaMacInitialization>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d009      	beq.n	800c5ba <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5aa:	e0e2      	b.n	800c772 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c5ac:	4b76      	ldr	r3, [pc, #472]	; (800c788 <LmHandlerConfigure+0x228>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	f00e fadc 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c5b8:	e7fe      	b.n	800c5b8 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c5ba:	f000 fdfa 	bl	800d1b2 <NvmDataMgmtRestore>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c5c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d003      	beq.n	800c5d0 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c5c8:	4b70      	ldr	r3, [pc, #448]	; (800c78c <LmHandlerConfigure+0x22c>)
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	e002      	b.n	800c5d6 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c5d0:	4b6e      	ldr	r3, [pc, #440]	; (800c78c <LmHandlerConfigure+0x22c>)
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5da:	f107 0314 	add.w	r3, r7, #20
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f004 fe42 	bl	8011268 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c5e4:	69bb      	ldr	r3, [r7, #24]
 800c5e6:	2208      	movs	r2, #8
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4869      	ldr	r0, [pc, #420]	; (800c790 <LmHandlerConfigure+0x230>)
 800c5ec:	f00a f87f 	bl	80166ee <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c5f4:	f107 0314 	add.w	r3, r7, #20
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f004 fe35 	bl	8011268 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	2208      	movs	r2, #8
 800c602:	4619      	mov	r1, r3
 800c604:	4863      	ldr	r0, [pc, #396]	; (800c794 <LmHandlerConfigure+0x234>)
 800c606:	f00a f872 	bl	80166ee <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c60a:	4b63      	ldr	r3, [pc, #396]	; (800c798 <LmHandlerConfigure+0x238>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	4798      	blx	r3
 800c612:	4603      	mov	r3, r0
 800c614:	4a5e      	ldr	r2, [pc, #376]	; (800c790 <LmHandlerConfigure+0x230>)
 800c616:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c618:	2306      	movs	r3, #6
 800c61a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c61c:	4b5c      	ldr	r3, [pc, #368]	; (800c790 <LmHandlerConfigure+0x230>)
 800c61e:	695b      	ldr	r3, [r3, #20]
 800c620:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c622:	f107 0314 	add.w	r3, r7, #20
 800c626:	4618      	mov	r0, r3
 800c628:	f004 ff7c 	bl	8011524 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c62c:	4b58      	ldr	r3, [pc, #352]	; (800c790 <LmHandlerConfigure+0x230>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	4b57      	ldr	r3, [pc, #348]	; (800c790 <LmHandlerConfigure+0x230>)
 800c634:	785b      	ldrb	r3, [r3, #1]
 800c636:	4619      	mov	r1, r3
 800c638:	4b55      	ldr	r3, [pc, #340]	; (800c790 <LmHandlerConfigure+0x230>)
 800c63a:	789b      	ldrb	r3, [r3, #2]
 800c63c:	4618      	mov	r0, r3
 800c63e:	4b54      	ldr	r3, [pc, #336]	; (800c790 <LmHandlerConfigure+0x230>)
 800c640:	78db      	ldrb	r3, [r3, #3]
 800c642:	461c      	mov	r4, r3
 800c644:	4b52      	ldr	r3, [pc, #328]	; (800c790 <LmHandlerConfigure+0x230>)
 800c646:	791b      	ldrb	r3, [r3, #4]
 800c648:	461d      	mov	r5, r3
 800c64a:	4b51      	ldr	r3, [pc, #324]	; (800c790 <LmHandlerConfigure+0x230>)
 800c64c:	795b      	ldrb	r3, [r3, #5]
 800c64e:	461e      	mov	r6, r3
 800c650:	4b4f      	ldr	r3, [pc, #316]	; (800c790 <LmHandlerConfigure+0x230>)
 800c652:	799b      	ldrb	r3, [r3, #6]
 800c654:	603b      	str	r3, [r7, #0]
 800c656:	4b4e      	ldr	r3, [pc, #312]	; (800c790 <LmHandlerConfigure+0x230>)
 800c658:	79db      	ldrb	r3, [r3, #7]
 800c65a:	9307      	str	r3, [sp, #28]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	9306      	str	r3, [sp, #24]
 800c660:	9605      	str	r6, [sp, #20]
 800c662:	9504      	str	r5, [sp, #16]
 800c664:	9403      	str	r4, [sp, #12]
 800c666:	9002      	str	r0, [sp, #8]
 800c668:	9101      	str	r1, [sp, #4]
 800c66a:	9200      	str	r2, [sp, #0]
 800c66c:	4b4b      	ldr	r3, [pc, #300]	; (800c79c <LmHandlerConfigure+0x23c>)
 800c66e:	2200      	movs	r2, #0
 800c670:	2100      	movs	r1, #0
 800c672:	2002      	movs	r0, #2
 800c674:	f00e fa7c 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c678:	4b45      	ldr	r3, [pc, #276]	; (800c790 <LmHandlerConfigure+0x230>)
 800c67a:	7a1b      	ldrb	r3, [r3, #8]
 800c67c:	461a      	mov	r2, r3
 800c67e:	4b44      	ldr	r3, [pc, #272]	; (800c790 <LmHandlerConfigure+0x230>)
 800c680:	7a5b      	ldrb	r3, [r3, #9]
 800c682:	4619      	mov	r1, r3
 800c684:	4b42      	ldr	r3, [pc, #264]	; (800c790 <LmHandlerConfigure+0x230>)
 800c686:	7a9b      	ldrb	r3, [r3, #10]
 800c688:	4618      	mov	r0, r3
 800c68a:	4b41      	ldr	r3, [pc, #260]	; (800c790 <LmHandlerConfigure+0x230>)
 800c68c:	7adb      	ldrb	r3, [r3, #11]
 800c68e:	461c      	mov	r4, r3
 800c690:	4b3f      	ldr	r3, [pc, #252]	; (800c790 <LmHandlerConfigure+0x230>)
 800c692:	7b1b      	ldrb	r3, [r3, #12]
 800c694:	461d      	mov	r5, r3
 800c696:	4b3e      	ldr	r3, [pc, #248]	; (800c790 <LmHandlerConfigure+0x230>)
 800c698:	7b5b      	ldrb	r3, [r3, #13]
 800c69a:	461e      	mov	r6, r3
 800c69c:	4b3c      	ldr	r3, [pc, #240]	; (800c790 <LmHandlerConfigure+0x230>)
 800c69e:	7b9b      	ldrb	r3, [r3, #14]
 800c6a0:	603b      	str	r3, [r7, #0]
 800c6a2:	4b3b      	ldr	r3, [pc, #236]	; (800c790 <LmHandlerConfigure+0x230>)
 800c6a4:	7bdb      	ldrb	r3, [r3, #15]
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	9306      	str	r3, [sp, #24]
 800c6ac:	9605      	str	r6, [sp, #20]
 800c6ae:	9504      	str	r5, [sp, #16]
 800c6b0:	9403      	str	r4, [sp, #12]
 800c6b2:	9002      	str	r0, [sp, #8]
 800c6b4:	9101      	str	r1, [sp, #4]
 800c6b6:	9200      	str	r2, [sp, #0]
 800c6b8:	4b39      	ldr	r3, [pc, #228]	; (800c7a0 <LmHandlerConfigure+0x240>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2100      	movs	r1, #0
 800c6be:	2002      	movs	r0, #2
 800c6c0:	f00e fa56 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c6c4:	4b37      	ldr	r3, [pc, #220]	; (800c7a4 <LmHandlerConfigure+0x244>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4b37      	ldr	r3, [pc, #220]	; (800c7a8 <LmHandlerConfigure+0x248>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4b36      	ldr	r3, [pc, #216]	; (800c7ac <LmHandlerConfigure+0x24c>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	4b36      	ldr	r3, [pc, #216]	; (800c7b0 <LmHandlerConfigure+0x250>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	9303      	str	r3, [sp, #12]
 800c6dc:	9002      	str	r0, [sp, #8]
 800c6de:	9101      	str	r1, [sp, #4]
 800c6e0:	9200      	str	r2, [sp, #0]
 800c6e2:	4b34      	ldr	r3, [pc, #208]	; (800c7b4 <LmHandlerConfigure+0x254>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	2002      	movs	r0, #2
 800c6ea:	f00e fa41 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c6ee:	230f      	movs	r3, #15
 800c6f0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c6f6:	f107 0314 	add.w	r3, r7, #20
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f004 ff12 	bl	8011524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c700:	2305      	movs	r3, #5
 800c702:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c704:	2300      	movs	r3, #0
 800c706:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c708:	f107 0314 	add.w	r3, r7, #20
 800c70c:	4618      	mov	r0, r3
 800c70e:	f004 ff09 	bl	8011524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c712:	2310      	movs	r3, #16
 800c714:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c716:	2300      	movs	r3, #0
 800c718:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c71a:	f107 0314 	add.w	r3, r7, #20
 800c71e:	4618      	mov	r0, r3
 800c720:	f004 ff00 	bl	8011524 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c724:	2304      	movs	r3, #4
 800c726:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c728:	4b14      	ldr	r3, [pc, #80]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c72a:	789b      	ldrb	r3, [r3, #2]
 800c72c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c72e:	f107 0314 	add.w	r3, r7, #20
 800c732:	4618      	mov	r0, r3
 800c734:	f004 fef6 	bl	8011524 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c738:	230f      	movs	r3, #15
 800c73a:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c73c:	4b0f      	ldr	r3, [pc, #60]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	f107 020c 	add.w	r2, r7, #12
 800c744:	4611      	mov	r1, r2
 800c746:	4618      	mov	r0, r3
 800c748:	f007 fcc6 	bl	80140d8 <RegionGetPhyParam>
 800c74c:	4603      	mov	r3, r0
 800c74e:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	bf14      	ite	ne
 800c756:	2301      	movne	r3, #1
 800c758:	2300      	moveq	r3, #0
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	4b07      	ldr	r3, [pc, #28]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c75e:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c760:	2014      	movs	r0, #20
 800c762:	f000 fa6f 	bl	800cc44 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c766:	4b05      	ldr	r3, [pc, #20]	; (800c77c <LmHandlerConfigure+0x21c>)
 800c768:	795b      	ldrb	r3, [r3, #5]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f005 fc4e 	bl	801200c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c770:	2300      	movs	r3, #0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3744      	adds	r7, #68	; 0x44
 800c776:	46bd      	mov	sp, r7
 800c778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c77a:	bf00      	nop
 800c77c:	200003d8 	.word	0x200003d8
 800c780:	200003fc 	.word	0x200003fc
 800c784:	200003ec 	.word	0x200003ec
 800c788:	0801b76c 	.word	0x0801b76c
 800c78c:	2000051a 	.word	0x2000051a
 800c790:	200000a0 	.word	0x200000a0
 800c794:	200000a8 	.word	0x200000a8
 800c798:	200003e8 	.word	0x200003e8
 800c79c:	0801b7b8 	.word	0x0801b7b8
 800c7a0:	0801b7f4 	.word	0x0801b7f4
 800c7a4:	200000b7 	.word	0x200000b7
 800c7a8:	200000b6 	.word	0x200000b6
 800c7ac:	200000b5 	.word	0x200000b5
 800c7b0:	200000b4 	.word	0x200000b4
 800c7b4:	0801b830 	.word	0x0801b830

0800c7b8 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c7bc:	f002 f9b8 	bl	800eb30 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c7c0:	f000 fc9a 	bl	800d0f8 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c7c4:	f000 fcee 	bl	800d1a4 <NvmDataMgmtStore>
}
 800c7c8:	bf00      	nop
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b090      	sub	sp, #64	; 0x40
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d111      	bne.n	800c800 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c7dc:	4b23      	ldr	r3, [pc, #140]	; (800c86c <LmHandlerJoin+0xa0>)
 800c7de:	2202      	movs	r2, #2
 800c7e0:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c7e2:	f004 fcab 	bl	801113c <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c7ea:	4b21      	ldr	r3, [pc, #132]	; (800c870 <LmHandlerJoin+0xa4>)
 800c7ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c7f4:	f107 0308 	add.w	r3, r7, #8
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f005 f9d1 	bl	8011ba0 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c7fe:	e030      	b.n	800c862 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <LmHandlerJoin+0xa0>)
 800c802:	2201      	movs	r2, #1
 800c804:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c806:	4b1a      	ldr	r3, [pc, #104]	; (800c870 <LmHandlerJoin+0xa4>)
 800c808:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c80c:	4b17      	ldr	r3, [pc, #92]	; (800c86c <LmHandlerJoin+0xa0>)
 800c80e:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c810:	4b16      	ldr	r3, [pc, #88]	; (800c86c <LmHandlerJoin+0xa0>)
 800c812:	2200      	movs	r2, #0
 800c814:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c816:	4b17      	ldr	r3, [pc, #92]	; (800c874 <LmHandlerJoin+0xa8>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	f083 0301 	eor.w	r3, r3, #1
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b00      	cmp	r3, #0
 800c822:	d008      	beq.n	800c836 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c824:	2327      	movs	r3, #39	; 0x27
 800c826:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c828:	4b13      	ldr	r3, [pc, #76]	; (800c878 <LmHandlerJoin+0xac>)
 800c82a:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c82c:	f107 031c 	add.w	r3, r7, #28
 800c830:	4618      	mov	r0, r3
 800c832:	f004 fe77 	bl	8011524 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c836:	f004 fc81 	bl	801113c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c83a:	2301      	movs	r3, #1
 800c83c:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c83e:	2301      	movs	r3, #1
 800c840:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c844:	f107 031c 	add.w	r3, r7, #28
 800c848:	4618      	mov	r0, r3
 800c84a:	f004 fe6b 	bl	8011524 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c84e:	4b0b      	ldr	r3, [pc, #44]	; (800c87c <LmHandlerJoin+0xb0>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	4805      	ldr	r0, [pc, #20]	; (800c86c <LmHandlerJoin+0xa0>)
 800c856:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c858:	4b05      	ldr	r3, [pc, #20]	; (800c870 <LmHandlerJoin+0xa4>)
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f917 	bl	800ca90 <LmHandlerRequestClass>
}
 800c862:	bf00      	nop
 800c864:	3740      	adds	r7, #64	; 0x40
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	200000c4 	.word	0x200000c4
 800c870:	200003d8 	.word	0x200003d8
 800c874:	2000051a 	.word	0x2000051a
 800c878:	01000300 	.word	0x01000300
 800c87c:	200003e8 	.word	0x200003e8

0800c880 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08a      	sub	sp, #40	; 0x28
 800c884:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c886:	2301      	movs	r3, #1
 800c888:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c88a:	463b      	mov	r3, r7
 800c88c:	4618      	mov	r0, r3
 800c88e:	f004 fceb 	bl	8011268 <LoRaMacMibGetRequestConfirm>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d106      	bne.n	800c8ae <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c8a0:	793b      	ldrb	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e002      	b.n	800c8b0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c8ae:	2300      	movs	r3, #0
    }
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3728      	adds	r7, #40	; 0x28
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08c      	sub	sp, #48	; 0x30
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	607a      	str	r2, [r7, #4]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	72fb      	strb	r3, [r7, #11]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c8cc:	23ff      	movs	r3, #255	; 0xff
 800c8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c8d2:	f001 fe97 	bl	800e604 <LoRaMacIsBusy>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8dc:	f06f 0301 	mvn.w	r3, #1
 800c8e0:	e0b4      	b.n	800ca4c <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c8e2:	f7ff ffcd 	bl	800c880 <LmHandlerJoinStatus>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d007      	beq.n	800c8fc <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c8ec:	4b59      	ldr	r3, [pc, #356]	; (800ca54 <LmHandlerSend+0x19c>)
 800c8ee:	789b      	ldrb	r3, [r3, #2]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff ff6b 	bl	800c7cc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8f6:	f06f 0302 	mvn.w	r3, #2
 800c8fa:	e0a7      	b.n	800ca4c <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c8fc:	4b56      	ldr	r3, [pc, #344]	; (800ca58 <LmHandlerSend+0x1a0>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	4798      	blx	r3
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00d      	beq.n	800c926 <LmHandlerSend+0x6e>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	781a      	ldrb	r2, [r3, #0]
 800c90e:	4b52      	ldr	r3, [pc, #328]	; (800ca58 <LmHandlerSend+0x1a0>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d006      	beq.n	800c926 <LmHandlerSend+0x6e>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c920:	f06f 0303 	mvn.w	r3, #3
 800c924:	e092      	b.n	800ca4c <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c926:	4b4d      	ldr	r3, [pc, #308]	; (800ca5c <LmHandlerSend+0x1a4>)
 800c928:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c92c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	785b      	ldrb	r3, [r3, #1]
 800c934:	f107 0214 	add.w	r2, r7, #20
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f004 fc0c 	bl	8011158 <LoRaMacQueryTxPossible>
 800c940:	4603      	mov	r3, r0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d009      	beq.n	800c95a <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c946:	4b46      	ldr	r3, [pc, #280]	; (800ca60 <LmHandlerSend+0x1a8>)
 800c948:	2200      	movs	r2, #0
 800c94a:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c94c:	2300      	movs	r3, #0
 800c94e:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c950:	2300      	movs	r3, #0
 800c952:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c958:	e017      	b.n	800c98a <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c95a:	4a41      	ldr	r2, [pc, #260]	; (800ca60 <LmHandlerSend+0x1a8>)
 800c95c:	7afb      	ldrb	r3, [r7, #11]
 800c95e:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	785b      	ldrb	r3, [r3, #1]
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c974:	7afb      	ldrb	r3, [r7, #11]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c97a:	2300      	movs	r3, #0
 800c97c:	763b      	strb	r3, [r7, #24]
 800c97e:	e004      	b.n	800c98a <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c980:	2301      	movs	r3, #1
 800c982:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c984:	2308      	movs	r3, #8
 800c986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c98a:	4b35      	ldr	r3, [pc, #212]	; (800ca60 <LmHandlerSend+0x1a8>)
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	330c      	adds	r3, #12
 800c990:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c994:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c998:	4b30      	ldr	r3, [pc, #192]	; (800ca5c <LmHandlerSend+0x1a4>)
 800c99a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c99e:	4b30      	ldr	r3, [pc, #192]	; (800ca60 <LmHandlerSend+0x1a8>)
 800c9a0:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c9a2:	7aba      	ldrb	r2, [r7, #10]
 800c9a4:	f107 0318 	add.w	r3, r7, #24
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f005 fa38 	bl	8011e20 <LoRaMacMcpsRequest>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c9c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c9c6:	2b11      	cmp	r3, #17
 800c9c8:	d83a      	bhi.n	800ca40 <LmHandlerSend+0x188>
 800c9ca:	a201      	add	r2, pc, #4	; (adr r2, 800c9d0 <LmHandlerSend+0x118>)
 800c9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d0:	0800ca19 	.word	0x0800ca19
 800c9d4:	0800ca21 	.word	0x0800ca21
 800c9d8:	0800ca41 	.word	0x0800ca41
 800c9dc:	0800ca41 	.word	0x0800ca41
 800c9e0:	0800ca41 	.word	0x0800ca41
 800c9e4:	0800ca41 	.word	0x0800ca41
 800c9e8:	0800ca41 	.word	0x0800ca41
 800c9ec:	0800ca29 	.word	0x0800ca29
 800c9f0:	0800ca41 	.word	0x0800ca41
 800c9f4:	0800ca41 	.word	0x0800ca41
 800c9f8:	0800ca41 	.word	0x0800ca41
 800c9fc:	0800ca39 	.word	0x0800ca39
 800ca00:	0800ca41 	.word	0x0800ca41
 800ca04:	0800ca41 	.word	0x0800ca41
 800ca08:	0800ca21 	.word	0x0800ca21
 800ca0c:	0800ca21 	.word	0x0800ca21
 800ca10:	0800ca21 	.word	0x0800ca21
 800ca14:	0800ca31 	.word	0x0800ca31
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca1e:	e013      	b.n	800ca48 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800ca20:	23fe      	movs	r3, #254	; 0xfe
 800ca22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca26:	e00f      	b.n	800ca48 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ca28:	23fd      	movs	r3, #253	; 0xfd
 800ca2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca2e:	e00b      	b.n	800ca48 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ca30:	23fb      	movs	r3, #251	; 0xfb
 800ca32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca36:	e007      	b.n	800ca48 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ca38:	23fa      	movs	r3, #250	; 0xfa
 800ca3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca3e:	e003      	b.n	800ca48 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ca40:	23ff      	movs	r3, #255	; 0xff
 800ca42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ca46:	bf00      	nop
    }

    return lmhStatus;
 800ca48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3730      	adds	r7, #48	; 0x30
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	200000c4 	.word	0x200000c4
 800ca58:	200003c4 	.word	0x200003c4
 800ca5c:	200003d8 	.word	0x200003d8
 800ca60:	20000410 	.word	0x20000410

0800ca64 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ca6a:	230a      	movs	r3, #10
 800ca6c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ca6e:	463b      	mov	r3, r7
 800ca70:	4618      	mov	r0, r3
 800ca72:	f005 f895 	bl	8011ba0 <LoRaMacMlmeRequest>
 800ca76:	4603      	mov	r3, r0
 800ca78:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ca80:	2300      	movs	r3, #0
 800ca82:	e001      	b.n	800ca88 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ca84:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3718      	adds	r7, #24
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b08c      	sub	sp, #48	; 0x30
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800caa0:	f001 fdb0 	bl	800e604 <LoRaMacIsBusy>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800caaa:	f06f 0301 	mvn.w	r3, #1
 800caae:	e07b      	b.n	800cba8 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800cab0:	f7ff fee6 	bl	800c880 <LmHandlerJoinStatus>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d002      	beq.n	800cac0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800caba:	f06f 0302 	mvn.w	r3, #2
 800cabe:	e073      	b.n	800cba8 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cac0:	2300      	movs	r3, #0
 800cac2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cac4:	f107 0308 	add.w	r3, r7, #8
 800cac8:	4618      	mov	r0, r3
 800caca:	f004 fbcd 	bl	8011268 <LoRaMacMibGetRequestConfirm>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295
 800cad8:	e066      	b.n	800cba8 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800cada:	7b3b      	ldrb	r3, [r7, #12]
 800cadc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cae0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d055      	beq.n	800cb96 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d02c      	beq.n	800cb4a <LmHandlerRequestClass+0xba>
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	dc52      	bgt.n	800cb9a <LmHandlerRequestClass+0x10a>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <LmHandlerRequestClass+0x6e>
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d022      	beq.n	800cb42 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800cafc:	e04d      	b.n	800cb9a <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800cafe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d04b      	beq.n	800cb9e <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cb0a:	f107 0308 	add.w	r3, r7, #8
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f004 fd08 	bl	8011524 <LoRaMacMibSetRequestConfirm>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10f      	bne.n	800cb3a <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fb1f 	bl	800d160 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb22:	4b23      	ldr	r3, [pc, #140]	; (800cbb0 <LmHandlerRequestClass+0x120>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d038      	beq.n	800cb9e <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb2c:	4b20      	ldr	r3, [pc, #128]	; (800cbb0 <LmHandlerRequestClass+0x120>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb32:	79fa      	ldrb	r2, [r7, #7]
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
            break;
 800cb38:	e031      	b.n	800cb9e <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb3a:	23ff      	movs	r3, #255	; 0xff
 800cb3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb40:	e02d      	b.n	800cb9e <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800cb42:	23ff      	movs	r3, #255	; 0xff
 800cb44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb48:	e02c      	b.n	800cba4 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800cb4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800cb52:	23ff      	movs	r3, #255	; 0xff
 800cb54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb58:	e023      	b.n	800cba2 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	4618      	mov	r0, r3
 800cb64:	f004 fcde 	bl	8011524 <LoRaMacMibSetRequestConfirm>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10f      	bne.n	800cb8e <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800cb6e:	79fb      	ldrb	r3, [r7, #7]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 faf5 	bl	800d160 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800cb76:	4b0e      	ldr	r3, [pc, #56]	; (800cbb0 <LmHandlerRequestClass+0x120>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d010      	beq.n	800cba2 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800cb80:	4b0b      	ldr	r3, [pc, #44]	; (800cbb0 <LmHandlerRequestClass+0x120>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb86:	79fa      	ldrb	r2, [r7, #7]
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4798      	blx	r3
            break;
 800cb8c:	e009      	b.n	800cba2 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800cb8e:	23ff      	movs	r3, #255	; 0xff
 800cb90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800cb94:	e005      	b.n	800cba2 <LmHandlerRequestClass+0x112>
        }
    }
 800cb96:	bf00      	nop
 800cb98:	e004      	b.n	800cba4 <LmHandlerRequestClass+0x114>
            break;
 800cb9a:	bf00      	nop
 800cb9c:	e002      	b.n	800cba4 <LmHandlerRequestClass+0x114>
            break;
 800cb9e:	bf00      	nop
 800cba0:	e000      	b.n	800cba4 <LmHandlerRequestClass+0x114>
            break;
 800cba2:	bf00      	nop
    return errorStatus;
 800cba4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3730      	adds	r7, #48	; 0x30
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	200003e8 	.word	0x200003e8

0800cbb4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08c      	sub	sp, #48	; 0x30
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbc2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc6:	e010      	b.n	800cbea <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f004 fb49 	bl	8011268 <LoRaMacMibGetRequestConfirm>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe0:	e003      	b.n	800cbea <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800cbe2:	7c3a      	ldrb	r2, [r7, #16]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3730      	adds	r7, #48	; 0x30
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
	...

0800cbf4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08c      	sub	sp, #48	; 0x30
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d102      	bne.n	800cc08 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc02:	f04f 33ff 	mov.w	r3, #4294967295
 800cc06:	e016      	b.n	800cc36 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cc08:	231f      	movs	r3, #31
 800cc0a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	4618      	mov	r0, r3
 800cc12:	f004 fb29 	bl	8011268 <LoRaMacMibGetRequestConfirm>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc20:	e009      	b.n	800cc36 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cc22:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f993 2000 	ldrsb.w	r2, [r3]
 800cc30:	4b03      	ldr	r3, [pc, #12]	; (800cc40 <LmHandlerGetTxDatarate+0x4c>)
 800cc32:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3730      	adds	r7, #48	; 0x30
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	200003d8 	.word	0x200003d8

0800cc44 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08c      	sub	sp, #48	; 0x30
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cc4c:	2322      	movs	r3, #34	; 0x22
 800cc4e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cc54:	f107 030c 	add.w	r3, r7, #12
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f004 fc63 	bl	8011524 <LoRaMacMibSetRequestConfirm>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc64:	f04f 33ff 	mov.w	r3, #4294967295
 800cc68:	e000      	b.n	800cc6c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3730      	adds	r7, #48	; 0x30
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800cc7c:	4b15      	ldr	r3, [pc, #84]	; (800ccd4 <McpsConfirm+0x60>)
 800cc7e:	2201      	movs	r2, #1
 800cc80:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	785a      	ldrb	r2, [r3, #1]
 800cc86:	4b13      	ldr	r3, [pc, #76]	; (800ccd4 <McpsConfirm+0x60>)
 800cc88:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	789b      	ldrb	r3, [r3, #2]
 800cc8e:	b25a      	sxtb	r2, r3
 800cc90:	4b10      	ldr	r3, [pc, #64]	; (800ccd4 <McpsConfirm+0x60>)
 800cc92:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	4a0e      	ldr	r2, [pc, #56]	; (800ccd4 <McpsConfirm+0x60>)
 800cc9a:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <McpsConfirm+0x60>)
 800cca4:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	4b09      	ldr	r3, [pc, #36]	; (800ccd4 <McpsConfirm+0x60>)
 800ccae:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	791b      	ldrb	r3, [r3, #4]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4b07      	ldr	r3, [pc, #28]	; (800ccd4 <McpsConfirm+0x60>)
 800ccb8:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800ccba:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <McpsConfirm+0x64>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6a1b      	ldr	r3, [r3, #32]
 800ccc0:	4804      	ldr	r0, [pc, #16]	; (800ccd4 <McpsConfirm+0x60>)
 800ccc2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	f000 f99a 	bl	800d000 <LmHandlerPackagesNotify>
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	20000410 	.word	0x20000410
 800ccd8:	200003e8 	.word	0x200003e8

0800ccdc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b088      	sub	sp, #32
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800cce6:	2300      	movs	r3, #0
 800cce8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ccea:	4b32      	ldr	r3, [pc, #200]	; (800cdb4 <McpsIndication+0xd8>)
 800ccec:	2201      	movs	r2, #1
 800ccee:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	785a      	ldrb	r2, [r3, #1]
 800ccf4:	4b2f      	ldr	r3, [pc, #188]	; (800cdb4 <McpsIndication+0xd8>)
 800ccf6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ccf8:	4b2e      	ldr	r3, [pc, #184]	; (800cdb4 <McpsIndication+0xd8>)
 800ccfa:	785b      	ldrb	r3, [r3, #1]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d154      	bne.n	800cdaa <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	791b      	ldrb	r3, [r3, #4]
 800cd04:	b25a      	sxtb	r2, r3
 800cd06:	4b2b      	ldr	r3, [pc, #172]	; (800cdb4 <McpsIndication+0xd8>)
 800cd08:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd10:	b25a      	sxtb	r2, r3
 800cd12:	4b28      	ldr	r3, [pc, #160]	; (800cdb4 <McpsIndication+0xd8>)
 800cd14:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cd1c:	4b25      	ldr	r3, [pc, #148]	; (800cdb4 <McpsIndication+0xd8>)
 800cd1e:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	78db      	ldrb	r3, [r3, #3]
 800cd24:	b25a      	sxtb	r2, r3
 800cd26:	4b23      	ldr	r3, [pc, #140]	; (800cdb4 <McpsIndication+0xd8>)
 800cd28:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	4a21      	ldr	r2, [pc, #132]	; (800cdb4 <McpsIndication+0xd8>)
 800cd30:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	78db      	ldrb	r3, [r3, #3]
 800cd36:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7b1b      	ldrb	r3, [r3, #12]
 800cd3c:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800cd44:	4b1c      	ldr	r3, [pc, #112]	; (800cdb8 <McpsIndication+0xdc>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4a:	f107 0218 	add.w	r2, r7, #24
 800cd4e:	4919      	ldr	r1, [pc, #100]	; (800cdb4 <McpsIndication+0xd8>)
 800cd50:	4610      	mov	r0, r2
 800cd52:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cd54:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <McpsIndication+0xdc>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d007      	beq.n	800cd6e <McpsIndication+0x92>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	7e1b      	ldrb	r3, [r3, #24]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cd66:	4b14      	ldr	r3, [pc, #80]	; (800cdb8 <McpsIndication+0xdc>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6c:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	2001      	movs	r0, #1
 800cd72:	f000 f945 	bl	800d000 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800cd76:	f107 0317 	add.w	r3, r7, #23
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff ff1a 	bl	800cbb4 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	795b      	ldrb	r3, [r3, #5]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d111      	bne.n	800cdac <McpsIndication+0xd0>
 800cd88:	7dfb      	ldrb	r3, [r7, #23]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10e      	bne.n	800cdac <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cd8e:	2300      	movs	r3, #0
 800cd90:	733b      	strb	r3, [r7, #12]
 800cd92:	2300      	movs	r3, #0
 800cd94:	737b      	strb	r3, [r7, #13]
 800cd96:	2300      	movs	r3, #0
 800cd98:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cd9a:	f107 000c 	add.w	r0, r7, #12
 800cd9e:	2301      	movs	r3, #1
 800cda0:	2200      	movs	r2, #0
 800cda2:	2100      	movs	r1, #0
 800cda4:	f7ff fd88 	bl	800c8b8 <LmHandlerSend>
 800cda8:	e000      	b.n	800cdac <McpsIndication+0xd0>
        return;
 800cdaa:	bf00      	nop
    }
}
 800cdac:	3720      	adds	r7, #32
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	200000c8 	.word	0x200000c8
 800cdb8:	200003e8 	.word	0x200003e8

0800cdbc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08c      	sub	sp, #48	; 0x30
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cdc4:	4b28      	ldr	r3, [pc, #160]	; (800ce68 <MlmeConfirm+0xac>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	785a      	ldrb	r2, [r3, #1]
 800cdce:	4b26      	ldr	r3, [pc, #152]	; (800ce68 <MlmeConfirm+0xac>)
 800cdd0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cdd2:	4b26      	ldr	r3, [pc, #152]	; (800ce6c <MlmeConfirm+0xb0>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	4823      	ldr	r0, [pc, #140]	; (800ce68 <MlmeConfirm+0xac>)
 800cdda:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	2002      	movs	r0, #2
 800cde0:	f000 f90e 	bl	800d000 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b0a      	cmp	r3, #10
 800cdea:	d035      	beq.n	800ce58 <MlmeConfirm+0x9c>
 800cdec:	2b0a      	cmp	r3, #10
 800cdee:	dc35      	bgt.n	800ce5c <MlmeConfirm+0xa0>
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d002      	beq.n	800cdfa <MlmeConfirm+0x3e>
 800cdf4:	2b04      	cmp	r3, #4
 800cdf6:	d023      	beq.n	800ce40 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cdf8:	e030      	b.n	800ce5c <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cdfa:	2306      	movs	r3, #6
 800cdfc:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cdfe:	f107 030c 	add.w	r3, r7, #12
 800ce02:	4618      	mov	r0, r3
 800ce04:	f004 fa30 	bl	8011268 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	4a19      	ldr	r2, [pc, #100]	; (800ce70 <MlmeConfirm+0xb4>)
 800ce0c:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ce0e:	4819      	ldr	r0, [pc, #100]	; (800ce74 <MlmeConfirm+0xb8>)
 800ce10:	f7ff fef0 	bl	800cbf4 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	785b      	ldrb	r3, [r3, #1]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d108      	bne.n	800ce2e <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ce1c:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <MlmeConfirm+0xb8>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ce22:	4b15      	ldr	r3, [pc, #84]	; (800ce78 <MlmeConfirm+0xbc>)
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fe32 	bl	800ca90 <LmHandlerRequestClass>
 800ce2c:	e002      	b.n	800ce34 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ce2e:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <MlmeConfirm+0xb8>)
 800ce30:	22ff      	movs	r2, #255	; 0xff
 800ce32:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ce34:	4b0d      	ldr	r3, [pc, #52]	; (800ce6c <MlmeConfirm+0xb0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	480e      	ldr	r0, [pc, #56]	; (800ce74 <MlmeConfirm+0xb8>)
 800ce3c:	4798      	blx	r3
        break;
 800ce3e:	e00e      	b.n	800ce5e <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800ce40:	4b0e      	ldr	r3, [pc, #56]	; (800ce7c <MlmeConfirm+0xc0>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7a1a      	ldrb	r2, [r3, #8]
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <MlmeConfirm+0xc0>)
 800ce4c:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7a5a      	ldrb	r2, [r3, #9]
 800ce52:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <MlmeConfirm+0xc0>)
 800ce54:	73da      	strb	r2, [r3, #15]
        break;
 800ce56:	e002      	b.n	800ce5e <MlmeConfirm+0xa2>
        break;
 800ce58:	bf00      	nop
 800ce5a:	e000      	b.n	800ce5e <MlmeConfirm+0xa2>
        break;
 800ce5c:	bf00      	nop
    }
}
 800ce5e:	bf00      	nop
 800ce60:	3730      	adds	r7, #48	; 0x30
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20000410 	.word	0x20000410
 800ce6c:	200003e8 	.word	0x200003e8
 800ce70:	200000a0 	.word	0x200000a0
 800ce74:	200000c4 	.word	0x200000c4
 800ce78:	200003d8 	.word	0x200003d8
 800ce7c:	200000c8 	.word	0x200000c8

0800ce80 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800ce8a:	4b22      	ldr	r3, [pc, #136]	; (800cf14 <MlmeIndication+0x94>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	785a      	ldrb	r2, [r3, #1]
 800ce94:	4b1f      	ldr	r3, [pc, #124]	; (800cf14 <MlmeIndication+0x94>)
 800ce96:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce9e:	b25a      	sxtb	r2, r3
 800cea0:	4b1c      	ldr	r3, [pc, #112]	; (800cf14 <MlmeIndication+0x94>)
 800cea2:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ceaa:	4b1a      	ldr	r3, [pc, #104]	; (800cf14 <MlmeIndication+0x94>)
 800ceac:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	78db      	ldrb	r3, [r3, #3]
 800ceb2:	b25a      	sxtb	r2, r3
 800ceb4:	4b17      	ldr	r3, [pc, #92]	; (800cf14 <MlmeIndication+0x94>)
 800ceb6:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800ceb8:	4b16      	ldr	r3, [pc, #88]	; (800cf14 <MlmeIndication+0x94>)
 800ceba:	785b      	ldrb	r3, [r3, #1]
 800cebc:	2b0e      	cmp	r3, #14
 800cebe:	d005      	beq.n	800cecc <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cec0:	4b15      	ldr	r3, [pc, #84]	; (800cf18 <MlmeIndication+0x98>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec6:	4913      	ldr	r1, [pc, #76]	; (800cf14 <MlmeIndication+0x94>)
 800cec8:	2000      	movs	r0, #0
 800ceca:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	2b07      	cmp	r3, #7
 800ced2:	d117      	bne.n	800cf04 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800ced4:	2300      	movs	r3, #0
 800ced6:	723b      	strb	r3, [r7, #8]
 800ced8:	2300      	movs	r3, #0
 800ceda:	727b      	strb	r3, [r7, #9]
 800cedc:	2300      	movs	r3, #0
 800cede:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cee0:	4b0e      	ldr	r3, [pc, #56]	; (800cf1c <MlmeIndication+0x9c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	4798      	blx	r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	f083 0301 	eor.w	r3, r3, #1
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d009      	beq.n	800cf08 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cef4:	f107 0008 	add.w	r0, r7, #8
 800cef8:	2301      	movs	r3, #1
 800cefa:	2200      	movs	r2, #0
 800cefc:	2100      	movs	r1, #0
 800cefe:	f7ff fcdb 	bl	800c8b8 <LmHandlerSend>
            }
        }
        break;
 800cf02:	e001      	b.n	800cf08 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cf04:	bf00      	nop
 800cf06:	e000      	b.n	800cf0a <MlmeIndication+0x8a>
        break;
 800cf08:	bf00      	nop
    }
}
 800cf0a:	bf00      	nop
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	200000c8 	.word	0x200000c8
 800cf18:	200003e8 	.word	0x200003e8
 800cf1c:	200003c4 	.word	0x200003c4

0800cf20 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	6039      	str	r1, [r7, #0]
 800cf2a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cf30:	79fb      	ldrb	r3, [r7, #7]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d103      	bne.n	800cf3e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cf36:	f000 f943 	bl	800d1c0 <LmhpCompliancePackageFactory>
 800cf3a:	60f8      	str	r0, [r7, #12]
            break;
 800cf3c:	e000      	b.n	800cf40 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cf3e:	bf00      	nop
        }
    }
    if( package != NULL )
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d02b      	beq.n	800cf9e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	4918      	ldr	r1, [pc, #96]	; (800cfac <LmHandlerPackageRegister+0x8c>)
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	4a16      	ldr	r2, [pc, #88]	; (800cfac <LmHandlerPackageRegister+0x8c>)
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	4a15      	ldr	r2, [pc, #84]	; (800cfb0 <LmHandlerPackageRegister+0x90>)
 800cf5a:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	4a13      	ldr	r2, [pc, #76]	; (800cfac <LmHandlerPackageRegister+0x8c>)
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	4a13      	ldr	r2, [pc, #76]	; (800cfb4 <LmHandlerPackageRegister+0x94>)
 800cf66:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	4a10      	ldr	r2, [pc, #64]	; (800cfac <LmHandlerPackageRegister+0x8c>)
 800cf6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf70:	4a11      	ldr	r2, [pc, #68]	; (800cfb8 <LmHandlerPackageRegister+0x98>)
 800cf72:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cf74:	4b11      	ldr	r3, [pc, #68]	; (800cfbc <LmHandlerPackageRegister+0x9c>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	490c      	ldr	r1, [pc, #48]	; (800cfac <LmHandlerPackageRegister+0x8c>)
 800cf7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cf80:	6912      	ldr	r2, [r2, #16]
 800cf82:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	4a09      	ldr	r2, [pc, #36]	; (800cfac <LmHandlerPackageRegister+0x8c>)
 800cf88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	4a0c      	ldr	r2, [pc, #48]	; (800cfc0 <LmHandlerPackageRegister+0xa0>)
 800cf90:	6851      	ldr	r1, [r2, #4]
 800cf92:	4a0b      	ldr	r2, [pc, #44]	; (800cfc0 <LmHandlerPackageRegister+0xa0>)
 800cf94:	7852      	ldrb	r2, [r2, #1]
 800cf96:	6838      	ldr	r0, [r7, #0]
 800cf98:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e001      	b.n	800cfa2 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf9e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	200003c4 	.word	0x200003c4
 800cfb0:	0800c7cd 	.word	0x0800c7cd
 800cfb4:	0800c8b9 	.word	0x0800c8b9
 800cfb8:	0800ca65 	.word	0x0800ca65
 800cfbc:	200003e8 	.word	0x200003e8
 800cfc0:	200000d8 	.word	0x200000d8

0800cfc4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	2b04      	cmp	r3, #4
 800cfd2:	d80e      	bhi.n	800cff2 <LmHandlerPackageIsInitialized+0x2e>
 800cfd4:	79fb      	ldrb	r3, [r7, #7]
 800cfd6:	4a09      	ldr	r2, [pc, #36]	; (800cffc <LmHandlerPackageIsInitialized+0x38>)
 800cfd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d007      	beq.n	800cff2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	4a05      	ldr	r2, [pc, #20]	; (800cffc <LmHandlerPackageIsInitialized+0x38>)
 800cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	4798      	blx	r3
 800cfee:	4603      	mov	r3, r0
 800cff0:	e000      	b.n	800cff4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cff2:	2300      	movs	r3, #0
    }
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	200003c4 	.word	0x200003c4

0800d000 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	4603      	mov	r3, r0
 800d008:	6039      	str	r1, [r7, #0]
 800d00a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d00c:	2300      	movs	r3, #0
 800d00e:	73fb      	strb	r3, [r7, #15]
 800d010:	e067      	b.n	800d0e2 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d016:	4a37      	ldr	r2, [pc, #220]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d051      	beq.n	800d0c4 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	2b02      	cmp	r3, #2
 800d024:	d03d      	beq.n	800d0a2 <LmHandlerPackagesNotify+0xa2>
 800d026:	2b02      	cmp	r3, #2
 800d028:	dc4e      	bgt.n	800d0c8 <LmHandlerPackagesNotify+0xc8>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <LmHandlerPackagesNotify+0x34>
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d011      	beq.n	800d056 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800d032:	e049      	b.n	800d0c8 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d038:	4a2e      	ldr	r2, [pc, #184]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d043      	beq.n	800d0cc <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d048:	4a2a      	ldr	r2, [pc, #168]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	6838      	ldr	r0, [r7, #0]
 800d052:	4798      	blx	r3
                    break;
 800d054:	e03a      	b.n	800d0cc <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d05a:	4a26      	ldr	r2, [pc, #152]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d060:	69db      	ldr	r3, [r3, #28]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d034      	beq.n	800d0d0 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d06a:	4a22      	ldr	r2, [pc, #136]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d070:	781a      	ldrb	r2, [r3, #0]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800d076:	429a      	cmp	r2, r3
 800d078:	d00a      	beq.n	800d090 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800d07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d126      	bne.n	800d0d0 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800d082:	4b1c      	ldr	r3, [pc, #112]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	4798      	blx	r3
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01f      	beq.n	800d0d0 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d094:	4a17      	ldr	r2, [pc, #92]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d09a:	69db      	ldr	r3, [r3, #28]
 800d09c:	6838      	ldr	r0, [r7, #0]
 800d09e:	4798      	blx	r3
                    break;
 800d0a0:	e016      	b.n	800d0d0 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d0a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0a6:	4a13      	ldr	r2, [pc, #76]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d010      	beq.n	800d0d4 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b6:	4a0f      	ldr	r2, [pc, #60]	; (800d0f4 <LmHandlerPackagesNotify+0xf4>)
 800d0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0bc:	6a1b      	ldr	r3, [r3, #32]
 800d0be:	6838      	ldr	r0, [r7, #0]
 800d0c0:	4798      	blx	r3
                    break;
 800d0c2:	e007      	b.n	800d0d4 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800d0c4:	bf00      	nop
 800d0c6:	e006      	b.n	800d0d6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0c8:	bf00      	nop
 800d0ca:	e004      	b.n	800d0d6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0cc:	bf00      	nop
 800d0ce:	e002      	b.n	800d0d6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0d0:	bf00      	nop
 800d0d2:	e000      	b.n	800d0d6 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d0d4:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	3301      	adds	r3, #1
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	73fb      	strb	r3, [r7, #15]
 800d0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	dd93      	ble.n	800d012 <LmHandlerPackagesNotify+0x12>
    }
}
 800d0ea:	bf00      	nop
 800d0ec:	bf00      	nop
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	200003c4 	.word	0x200003c4

0800d0f8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d0fe:	2300      	movs	r3, #0
 800d100:	71fb      	strb	r3, [r7, #7]
 800d102:	e022      	b.n	800d14a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d108:	4a14      	ldr	r2, [pc, #80]	; (800d15c <LmHandlerPackagesProcess+0x64>)
 800d10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d015      	beq.n	800d13e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d116:	4a11      	ldr	r2, [pc, #68]	; (800d15c <LmHandlerPackagesProcess+0x64>)
 800d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d11c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00d      	beq.n	800d13e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d122:	79fb      	ldrb	r3, [r7, #7]
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff ff4d 	bl	800cfc4 <LmHandlerPackageIsInitialized>
 800d12a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d006      	beq.n	800d13e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d134:	4a09      	ldr	r2, [pc, #36]	; (800d15c <LmHandlerPackagesProcess+0x64>)
 800d136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d13e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d142:	b2db      	uxtb	r3, r3
 800d144:	3301      	adds	r3, #1
 800d146:	b2db      	uxtb	r3, r3
 800d148:	71fb      	strb	r3, [r7, #7]
 800d14a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d14e:	2b04      	cmp	r3, #4
 800d150:	ddd8      	ble.n	800d104 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d152:	bf00      	nop
 800d154:	bf00      	nop
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	200003c4 	.word	0x200003c4

0800d160 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af02      	add	r7, sp, #8
 800d166:	4603      	mov	r3, r0
 800d168:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	4a06      	ldr	r2, [pc, #24]	; (800d188 <DisplayClassUpdate+0x28>)
 800d16e:	5cd3      	ldrb	r3, [r2, r3]
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	4b06      	ldr	r3, [pc, #24]	; (800d18c <DisplayClassUpdate+0x2c>)
 800d174:	2200      	movs	r2, #0
 800d176:	2100      	movs	r1, #0
 800d178:	2002      	movs	r0, #2
 800d17a:	f00d fcf9 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	0801b874 	.word	0x0801b874
 800d18c:	0801b858 	.word	0x0801b858

0800d190 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d19a:	bf00      	nop
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bc80      	pop	{r7}
 800d1a2:	4770      	bx	lr

0800d1a4 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800d1a8:	2300      	movs	r3, #0
#endif
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bc80      	pop	{r7}
 800d1b0:	4770      	bx	lr

0800d1b2 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800d1b2:	b480      	push	{r7}
 800d1b4:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bc80      	pop	{r7}
 800d1be:	4770      	bx	lr

0800d1c0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d1c4:	4b02      	ldr	r3, [pc, #8]	; (800d1d0 <LmhpCompliancePackageFactory+0x10>)
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bc80      	pop	{r7}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	200000e0 	.word	0x200000e0

0800d1d4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	4613      	mov	r3, r2
 800d1e0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00f      	beq.n	800d208 <LmhpComplianceInit+0x34>
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00c      	beq.n	800d208 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800d1ee:	4a0c      	ldr	r2, [pc, #48]	; (800d220 <LmhpComplianceInit+0x4c>)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d1f4:	4a0b      	ldr	r2, [pc, #44]	; (800d224 <LmhpComplianceInit+0x50>)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d1fa:	4a0a      	ldr	r2, [pc, #40]	; (800d224 <LmhpComplianceInit+0x50>)
 800d1fc:	79fb      	ldrb	r3, [r7, #7]
 800d1fe:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d200:	4b08      	ldr	r3, [pc, #32]	; (800d224 <LmhpComplianceInit+0x50>)
 800d202:	2201      	movs	r2, #1
 800d204:	701a      	strb	r2, [r3, #0]
 800d206:	e006      	b.n	800d216 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d208:	4b05      	ldr	r3, [pc, #20]	; (800d220 <LmhpComplianceInit+0x4c>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d20e:	4b05      	ldr	r3, [pc, #20]	; (800d224 <LmhpComplianceInit+0x50>)
 800d210:	2200      	movs	r2, #0
 800d212:	701a      	strb	r2, [r3, #0]
    }
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bc80      	pop	{r7}
 800d21e:	4770      	bx	lr
 800d220:	20000548 	.word	0x20000548
 800d224:	20000534 	.word	0x20000534

0800d228 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d228:	b480      	push	{r7}
 800d22a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d22c:	4b02      	ldr	r3, [pc, #8]	; (800d238 <LmhpComplianceIsInitialized+0x10>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
}
 800d230:	4618      	mov	r0, r3
 800d232:	46bd      	mov	sp, r7
 800d234:	bc80      	pop	{r7}
 800d236:	4770      	bx	lr
 800d238:	20000534 	.word	0x20000534

0800d23c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d23c:	b480      	push	{r7}
 800d23e:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d240:	4b07      	ldr	r3, [pc, #28]	; (800d260 <LmhpComplianceIsRunning+0x24>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	f083 0301 	eor.w	r3, r3, #1
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d24e:	2300      	movs	r3, #0
 800d250:	e001      	b.n	800d256 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d252:	4b03      	ldr	r3, [pc, #12]	; (800d260 <LmhpComplianceIsRunning+0x24>)
 800d254:	785b      	ldrb	r3, [r3, #1]
}
 800d256:	4618      	mov	r0, r3
 800d258:	46bd      	mov	sp, r7
 800d25a:	bc80      	pop	{r7}
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	20000534 	.word	0x20000534

0800d264 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800d26c:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <LmhpComplianceOnMcpsConfirm+0x48>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	f083 0301 	eor.w	r3, r3, #1
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d112      	bne.n	800d2a0 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d27a:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <LmhpComplianceOnMcpsConfirm+0x48>)
 800d27c:	785b      	ldrb	r3, [r3, #1]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00f      	beq.n	800d2a2 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d286:	2b01      	cmp	r3, #1
 800d288:	d10b      	bne.n	800d2a2 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d007      	beq.n	800d2a2 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d292:	4b06      	ldr	r3, [pc, #24]	; (800d2ac <LmhpComplianceOnMcpsConfirm+0x48>)
 800d294:	899b      	ldrh	r3, [r3, #12]
 800d296:	3301      	adds	r3, #1
 800d298:	b29a      	uxth	r2, r3
 800d29a:	4b04      	ldr	r3, [pc, #16]	; (800d2ac <LmhpComplianceOnMcpsConfirm+0x48>)
 800d29c:	819a      	strh	r2, [r3, #12]
 800d29e:	e000      	b.n	800d2a2 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d2a0:	bf00      	nop
    }
}
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bc80      	pop	{r7}
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	20000534 	.word	0x20000534

0800d2b0 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d2b8:	4b12      	ldr	r3, [pc, #72]	; (800d304 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	f083 0301 	eor.w	r3, r3, #1
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d116      	bne.n	800d2f4 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d2c6:	4b0f      	ldr	r3, [pc, #60]	; (800d304 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2c8:	785b      	ldrb	r3, [r3, #1]
 800d2ca:	f083 0301 	eor.w	r3, r3, #1
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d111      	bne.n	800d2f8 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b04      	cmp	r3, #4
 800d2da:	d10e      	bne.n	800d2fa <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d2dc:	4b09      	ldr	r3, [pc, #36]	; (800d304 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2de:	2201      	movs	r2, #1
 800d2e0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	7a1a      	ldrb	r2, [r3, #8]
 800d2e6:	4b07      	ldr	r3, [pc, #28]	; (800d304 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2e8:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7a5a      	ldrb	r2, [r3, #9]
 800d2ee:	4b05      	ldr	r3, [pc, #20]	; (800d304 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d2f0:	741a      	strb	r2, [r3, #16]
 800d2f2:	e002      	b.n	800d2fa <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2f4:	bf00      	nop
 800d2f6:	e000      	b.n	800d2fa <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d2f8:	bf00      	nop
    }
}
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bc80      	pop	{r7}
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000534 	.word	0x20000534

0800d308 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d308:	b590      	push	{r4, r7, lr}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d30e:	4b33      	ldr	r3, [pc, #204]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	f083 0301 	eor.w	r3, r3, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d31c:	f04f 33ff 	mov.w	r3, #4294967295
 800d320:	e058      	b.n	800d3d4 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d322:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d324:	785b      	ldrb	r3, [r3, #1]
 800d326:	f083 0301 	eor.w	r3, r3, #1
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d330:	2300      	movs	r3, #0
 800d332:	e04f      	b.n	800d3d4 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d334:	4b29      	ldr	r3, [pc, #164]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d336:	7b9b      	ldrb	r3, [r3, #14]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d019      	beq.n	800d370 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d33c:	4b27      	ldr	r3, [pc, #156]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d33e:	2200      	movs	r2, #0
 800d340:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d342:	4b26      	ldr	r3, [pc, #152]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d344:	2203      	movs	r2, #3
 800d346:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d348:	4b24      	ldr	r3, [pc, #144]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	2205      	movs	r2, #5
 800d34e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d350:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	3301      	adds	r3, #1
 800d356:	4a21      	ldr	r2, [pc, #132]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d358:	7bd2      	ldrb	r2, [r2, #15]
 800d35a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d35c:	4b1f      	ldr	r3, [pc, #124]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	3302      	adds	r3, #2
 800d362:	4a1e      	ldr	r2, [pc, #120]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d364:	7c12      	ldrb	r2, [r2, #16]
 800d366:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d368:	4b1c      	ldr	r3, [pc, #112]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d36a:	2201      	movs	r2, #1
 800d36c:	709a      	strb	r2, [r3, #2]
 800d36e:	e01c      	b.n	800d3aa <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d370:	4b1a      	ldr	r3, [pc, #104]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d372:	789b      	ldrb	r3, [r3, #2]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d005      	beq.n	800d384 <LmhpComplianceTxProcess+0x7c>
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d116      	bne.n	800d3aa <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d37c:	4b17      	ldr	r3, [pc, #92]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d37e:	2201      	movs	r2, #1
 800d380:	709a      	strb	r2, [r3, #2]
            break;
 800d382:	e012      	b.n	800d3aa <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d384:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d386:	2202      	movs	r2, #2
 800d388:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d38a:	4b14      	ldr	r3, [pc, #80]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d38c:	899b      	ldrh	r3, [r3, #12]
 800d38e:	0a1b      	lsrs	r3, r3, #8
 800d390:	b29a      	uxth	r2, r3
 800d392:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	b2d2      	uxtb	r2, r2
 800d398:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d39a:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d39c:	899a      	ldrh	r2, [r3, #12]
 800d39e:	4b0f      	ldr	r3, [pc, #60]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	b2d2      	uxtb	r2, r2
 800d3a6:	701a      	strb	r2, [r3, #0]
            break;
 800d3a8:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d3aa:	23e0      	movs	r3, #224	; 0xe0
 800d3ac:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d3ae:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d3b0:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d3b2:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d3b4:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d3b6:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d3b8:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d3ba:	4809      	ldr	r0, [pc, #36]	; (800d3e0 <LmhpComplianceTxProcess+0xd8>)
 800d3bc:	f00d f960 	bl	801a680 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d3c0:	4b08      	ldr	r3, [pc, #32]	; (800d3e4 <LmhpComplianceTxProcess+0xdc>)
 800d3c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d3c4:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <LmhpComplianceTxProcess+0xd4>)
 800d3c6:	78db      	ldrb	r3, [r3, #3]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4638      	mov	r0, r7
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	47a0      	blx	r4
 800d3d2:	4603      	mov	r3, r0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd90      	pop	{r4, r7, pc}
 800d3dc:	20000534 	.word	0x20000534
 800d3e0:	2000051c 	.word	0x2000051c
 800d3e4:	200000e0 	.word	0x200000e0

0800d3e8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b0a2      	sub	sp, #136	; 0x88
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d3f0:	4bae      	ldr	r3, [pc, #696]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f083 0301 	eor.w	r3, r3, #1
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f040 81c0 	bne.w	800d780 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	7b5b      	ldrb	r3, [r3, #13]
 800d404:	f083 0301 	eor.w	r3, r3, #1
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f040 81ba 	bne.w	800d784 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d410:	4ba6      	ldr	r3, [pc, #664]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00c      	beq.n	800d432 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7b9b      	ldrb	r3, [r3, #14]
 800d41c:	f083 0301 	eor.w	r3, r3, #1
 800d420:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d422:	2b00      	cmp	r3, #0
 800d424:	d005      	beq.n	800d432 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d426:	4ba1      	ldr	r3, [pc, #644]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d428:	899b      	ldrh	r3, [r3, #12]
 800d42a:	3301      	adds	r3, #1
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	4b9f      	ldr	r3, [pc, #636]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d430:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	78db      	ldrb	r3, [r3, #3]
 800d436:	2be0      	cmp	r3, #224	; 0xe0
 800d438:	f040 81a6 	bne.w	800d788 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d43c:	4b9b      	ldr	r3, [pc, #620]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	f083 0301 	eor.w	r3, r3, #1
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d060      	beq.n	800d50c <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7b1b      	ldrb	r3, [r3, #12]
 800d44e:	2b04      	cmp	r3, #4
 800d450:	f040 819f 	bne.w	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	f040 8199 	bne.w	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	3301      	adds	r3, #1
 800d466:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d468:	2b01      	cmp	r3, #1
 800d46a:	f040 8192 	bne.w	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	3302      	adds	r3, #2
 800d474:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d476:	2b01      	cmp	r3, #1
 800d478:	f040 818b 	bne.w	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	3303      	adds	r3, #3
 800d482:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d484:	2b01      	cmp	r3, #1
 800d486:	f040 8184 	bne.w	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d48a:	4b88      	ldr	r3, [pc, #544]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d490:	4b86      	ldr	r3, [pc, #536]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d492:	22e0      	movs	r2, #224	; 0xe0
 800d494:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d496:	4b85      	ldr	r3, [pc, #532]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d498:	2202      	movs	r2, #2
 800d49a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d49c:	4b83      	ldr	r3, [pc, #524]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d4a2:	4b82      	ldr	r3, [pc, #520]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d4a8:	4b80      	ldr	r3, [pc, #512]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d4ae:	4b7f      	ldr	r3, [pc, #508]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d4b4:	4b7d      	ldr	r3, [pc, #500]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d4ba:	4b7c      	ldr	r3, [pc, #496]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d4c0:	2304      	movs	r3, #4
 800d4c2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d4c8:	f107 0308 	add.w	r3, r7, #8
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f004 f829 	bl	8011524 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	f004 fd9a 	bl	801200c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d4d8:	4b75      	ldr	r3, [pc, #468]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d4e2:	4b73      	ldr	r3, [pc, #460]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	4b71      	ldr	r3, [pc, #452]	; (800d6b4 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f04f 31ff 	mov.w	r1, #4294967295
 800d4f6:	4870      	ldr	r0, [pc, #448]	; (800d6b8 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d4f8:	f00d f88c 	bl	801a614 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d4fc:	f241 3188 	movw	r1, #5000	; 0x1388
 800d500:	486d      	ldr	r0, [pc, #436]	; (800d6b8 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d502:	f00d f99b 	bl	801a83c <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d506:	f7ff feff 	bl	800d308 <LmhpComplianceTxProcess>
 800d50a:	e142      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	781a      	ldrb	r2, [r3, #0]
 800d512:	4b66      	ldr	r3, [pc, #408]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d514:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d516:	4b65      	ldr	r3, [pc, #404]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d518:	789b      	ldrb	r3, [r3, #2]
 800d51a:	2b0a      	cmp	r3, #10
 800d51c:	f200 8136 	bhi.w	800d78c <LmhpComplianceOnMcpsIndication+0x3a4>
 800d520:	a201      	add	r2, pc, #4	; (adr r2, 800d528 <LmhpComplianceOnMcpsIndication+0x140>)
 800d522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d526:	bf00      	nop
 800d528:	0800d555 	.word	0x0800d555
 800d52c:	0800d59f 	.word	0x0800d59f
 800d530:	0800d5a7 	.word	0x0800d5a7
 800d534:	0800d5b5 	.word	0x0800d5b5
 800d538:	0800d5c3 	.word	0x0800d5c3
 800d53c:	0800d61b 	.word	0x0800d61b
 800d540:	0800d62d 	.word	0x0800d62d
 800d544:	0800d67d 	.word	0x0800d67d
 800d548:	0800d739 	.word	0x0800d739
 800d54c:	0800d74b 	.word	0x0800d74b
 800d550:	0800d765 	.word	0x0800d765
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d554:	4858      	ldr	r0, [pc, #352]	; (800d6b8 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d556:	f00d f901 	bl	801a75c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d55a:	4b54      	ldr	r3, [pc, #336]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d560:	4b52      	ldr	r3, [pc, #328]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d562:	2200      	movs	r2, #0
 800d564:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d566:	2304      	movs	r3, #4
 800d568:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d56a:	4b51      	ldr	r3, [pc, #324]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d572:	f107 0308 	add.w	r3, r7, #8
 800d576:	4618      	mov	r0, r3
 800d578:	f003 ffd4 	bl	8011524 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d57c:	4b4c      	ldr	r3, [pc, #304]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	785b      	ldrb	r3, [r3, #1]
 800d582:	4618      	mov	r0, r3
 800d584:	f004 fd42 	bl	801200c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d588:	4b49      	ldr	r3, [pc, #292]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 80fe 	beq.w	800d790 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d594:	4b46      	ldr	r3, [pc, #280]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	4798      	blx	r3
                }
            }
            break;
 800d59c:	e0f8      	b.n	800d790 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d59e:	4b43      	ldr	r3, [pc, #268]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	719a      	strb	r2, [r3, #6]
            break;
 800d5a4:	e0f5      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d5a6:	4b41      	ldr	r3, [pc, #260]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d5ac:	4b3f      	ldr	r3, [pc, #252]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	709a      	strb	r2, [r3, #2]
            break;
 800d5b2:	e0ee      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d5b4:	4b3d      	ldr	r3, [pc, #244]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d5ba:	4b3c      	ldr	r3, [pc, #240]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5bc:	2201      	movs	r2, #1
 800d5be:	709a      	strb	r2, [r3, #2]
            break;
 800d5c0:	e0e7      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	7b1a      	ldrb	r2, [r3, #12]
 800d5c6:	4b39      	ldr	r3, [pc, #228]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5c8:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d5ca:	4b38      	ldr	r3, [pc, #224]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	2204      	movs	r2, #4
 800d5d0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d5d8:	e012      	b.n	800d600 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5e2:	4413      	add	r3, r2
 800d5e4:	781a      	ldrb	r2, [r3, #0]
 800d5e6:	4b31      	ldr	r3, [pc, #196]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d5e8:	6899      	ldr	r1, [r3, #8]
 800d5ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5ee:	440b      	add	r3, r1
 800d5f0:	3201      	adds	r2, #1
 800d5f2:	b2d2      	uxtb	r2, r2
 800d5f4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d5f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d600:	4b2a      	ldr	r3, [pc, #168]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d602:	795a      	ldrb	r2, [r3, #5]
 800d604:	4b29      	ldr	r3, [pc, #164]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d606:	799b      	ldrb	r3, [r3, #6]
 800d608:	4293      	cmp	r3, r2
 800d60a:	bf28      	it	cs
 800d60c:	4613      	movcs	r3, r2
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d614:	429a      	cmp	r2, r3
 800d616:	d3e0      	bcc.n	800d5da <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d618:	e0bb      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d61a:	2304      	movs	r3, #4
 800d61c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d620:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d624:	4618      	mov	r0, r3
 800d626:	f004 fabb 	bl	8011ba0 <LoRaMacMlmeRequest>
            }
            break;
 800d62a:	e0b2      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d62c:	4822      	ldr	r0, [pc, #136]	; (800d6b8 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d62e:	f00d f895 	bl	801a75c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d632:	4b1e      	ldr	r3, [pc, #120]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d634:	2200      	movs	r2, #0
 800d636:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d638:	4b1c      	ldr	r3, [pc, #112]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d63e:	2304      	movs	r3, #4
 800d640:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d642:	4b1b      	ldr	r3, [pc, #108]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d64a:	f107 0308 	add.w	r3, r7, #8
 800d64e:	4618      	mov	r0, r3
 800d650:	f003 ff68 	bl	8011524 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d654:	4b16      	ldr	r3, [pc, #88]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	785b      	ldrb	r3, [r3, #1]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f004 fcd6 	bl	801200c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d660:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d003      	beq.n	800d672 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d66a:	4b11      	ldr	r3, [pc, #68]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d672:	4b12      	ldr	r3, [pc, #72]	; (800d6bc <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d676:	2002      	movs	r0, #2
 800d678:	4798      	blx	r3
            }
            break;
 800d67a:	e08a      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	7b1b      	ldrb	r3, [r3, #12]
 800d680:	2b03      	cmp	r3, #3
 800d682:	d11d      	bne.n	800d6c0 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d684:	2305      	movs	r3, #5
 800d686:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	3301      	adds	r3, #1
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	021b      	lsls	r3, r3, #8
 800d694:	b21a      	sxth	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	3302      	adds	r3, #2
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	b21b      	sxth	r3, r3
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d6aa:	e03c      	b.n	800d726 <LmhpComplianceOnMcpsIndication+0x33e>
 800d6ac:	20000534 	.word	0x20000534
 800d6b0:	20000548 	.word	0x20000548
 800d6b4:	0800d7a9 	.word	0x0800d7a9
 800d6b8:	2000051c 	.word	0x2000051c
 800d6bc:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7b1b      	ldrb	r3, [r3, #12]
 800d6c4:	2b07      	cmp	r3, #7
 800d6c6:	d12e      	bne.n	800d726 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d6c8:	2306      	movs	r3, #6
 800d6ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	021b      	lsls	r3, r3, #8
 800d6d8:	b21a      	sxth	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	3302      	adds	r3, #2
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	b21b      	sxth	r3, r3
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	b21b      	sxth	r3, r3
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	3303      	adds	r3, #3
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	041a      	lsls	r2, r3, #16
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	021b      	lsls	r3, r3, #8
 800d702:	4313      	orrs	r3, r2
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	6892      	ldr	r2, [r2, #8]
 800d708:	3205      	adds	r2, #5
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	461a      	mov	r2, r3
 800d710:	2364      	movs	r3, #100	; 0x64
 800d712:	fb03 f302 	mul.w	r3, r3, r2
 800d716:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	3306      	adds	r3, #6
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	b25b      	sxtb	r3, r3
 800d722:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d72a:	4618      	mov	r0, r3
 800d72c:	f004 fa38 	bl	8011ba0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d730:	4b19      	ldr	r3, [pc, #100]	; (800d798 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d732:	2201      	movs	r2, #1
 800d734:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d736:	e02c      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d738:	230a      	movs	r3, #10
 800d73a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d73e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d742:	4618      	mov	r0, r3
 800d744:	f004 fa2c 	bl	8011ba0 <LoRaMacMlmeRequest>
            }
            break;
 800d748:	e023      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d74a:	2300      	movs	r3, #0
 800d74c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	3301      	adds	r3, #1
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d758:	f107 0308 	add.w	r3, r7, #8
 800d75c:	4618      	mov	r0, r3
 800d75e:	f003 fee1 	bl	8011524 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d762:	e016      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d764:	230d      	movs	r3, #13
 800d766:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	785b      	ldrb	r3, [r3, #1]
 800d770:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d778:	4618      	mov	r0, r3
 800d77a:	f004 fa11 	bl	8011ba0 <LoRaMacMlmeRequest>
            }
            break;
 800d77e:	e008      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d780:	bf00      	nop
 800d782:	e006      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d784:	bf00      	nop
 800d786:	e004      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d788:	bf00      	nop
 800d78a:	e002      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d78c:	bf00      	nop
 800d78e:	e000      	b.n	800d792 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d790:	bf00      	nop
        }
    }
}
 800d792:	3780      	adds	r7, #128	; 0x80
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	20000534 	.word	0x20000534

0800d79c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d7a0:	bf00      	nop
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bc80      	pop	{r7}
 800d7a6:	4770      	bx	lr

0800d7a8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d7b0:	f7ff fdaa 	bl	800d308 <LmhpComplianceTxProcess>
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d7bc:	b590      	push	{r4, r7, lr}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d7c2:	f00d f8e5 	bl	801a990 <UTIL_TIMER_GetCurrentTime>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	4a16      	ldr	r2, [pc, #88]	; (800d824 <OnRadioTxDone+0x68>)
 800d7ca:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d7cc:	4c16      	ldr	r4, [pc, #88]	; (800d828 <OnRadioTxDone+0x6c>)
 800d7ce:	463b      	mov	r3, r7
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f00c fa6f 	bl	8019cb4 <SysTimeGet>
 800d7d6:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d7da:	463a      	mov	r2, r7
 800d7dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7e0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7e4:	4a11      	ldr	r2, [pc, #68]	; (800d82c <OnRadioTxDone+0x70>)
 800d7e6:	7813      	ldrb	r3, [r2, #0]
 800d7e8:	f043 0310 	orr.w	r3, r3, #16
 800d7ec:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d7ee:	4b0e      	ldr	r3, [pc, #56]	; (800d828 <OnRadioTxDone+0x6c>)
 800d7f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d00a      	beq.n	800d80e <OnRadioTxDone+0x52>
 800d7f8:	4b0b      	ldr	r3, [pc, #44]	; (800d828 <OnRadioTxDone+0x6c>)
 800d7fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d004      	beq.n	800d80e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d804:	4b08      	ldr	r3, [pc, #32]	; (800d828 <OnRadioTxDone+0x6c>)
 800d806:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d80e:	4b08      	ldr	r3, [pc, #32]	; (800d830 <OnRadioTxDone+0x74>)
 800d810:	2201      	movs	r2, #1
 800d812:	2100      	movs	r1, #0
 800d814:	2002      	movs	r0, #2
 800d816:	f00d f9ab 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800d81a:	bf00      	nop
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd90      	pop	{r4, r7, pc}
 800d822:	bf00      	nop
 800d824:	200018a8 	.word	0x200018a8
 800d828:	2000054c 	.word	0x2000054c
 800d82c:	20000da0 	.word	0x20000da0
 800d830:	0801b878 	.word	0x0801b878

0800d834 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	4608      	mov	r0, r1
 800d83e:	4611      	mov	r1, r2
 800d840:	461a      	mov	r2, r3
 800d842:	4603      	mov	r3, r0
 800d844:	817b      	strh	r3, [r7, #10]
 800d846:	460b      	mov	r3, r1
 800d848:	813b      	strh	r3, [r7, #8]
 800d84a:	4613      	mov	r3, r2
 800d84c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d84e:	f00d f89f 	bl	801a990 <UTIL_TIMER_GetCurrentTime>
 800d852:	4603      	mov	r3, r0
 800d854:	4a16      	ldr	r2, [pc, #88]	; (800d8b0 <OnRadioRxDone+0x7c>)
 800d856:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d858:	4a15      	ldr	r2, [pc, #84]	; (800d8b0 <OnRadioRxDone+0x7c>)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d85e:	4a14      	ldr	r2, [pc, #80]	; (800d8b0 <OnRadioRxDone+0x7c>)
 800d860:	897b      	ldrh	r3, [r7, #10]
 800d862:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d864:	4a12      	ldr	r2, [pc, #72]	; (800d8b0 <OnRadioRxDone+0x7c>)
 800d866:	893b      	ldrh	r3, [r7, #8]
 800d868:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d86a:	4a11      	ldr	r2, [pc, #68]	; (800d8b0 <OnRadioRxDone+0x7c>)
 800d86c:	79fb      	ldrb	r3, [r7, #7]
 800d86e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d870:	4a10      	ldr	r2, [pc, #64]	; (800d8b4 <OnRadioRxDone+0x80>)
 800d872:	7813      	ldrb	r3, [r2, #0]
 800d874:	f043 0308 	orr.w	r3, r3, #8
 800d878:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d87a:	4b0f      	ldr	r3, [pc, #60]	; (800d8b8 <OnRadioRxDone+0x84>)
 800d87c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d880:	2b00      	cmp	r3, #0
 800d882:	d00a      	beq.n	800d89a <OnRadioRxDone+0x66>
 800d884:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <OnRadioRxDone+0x84>)
 800d886:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d004      	beq.n	800d89a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d890:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <OnRadioRxDone+0x84>)
 800d892:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d896:	691b      	ldr	r3, [r3, #16]
 800d898:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d89a:	4b08      	ldr	r3, [pc, #32]	; (800d8bc <OnRadioRxDone+0x88>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	2100      	movs	r1, #0
 800d8a0:	2002      	movs	r0, #2
 800d8a2:	f00d f965 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200018ac 	.word	0x200018ac
 800d8b4:	20000da0 	.word	0x20000da0
 800d8b8:	2000054c 	.word	0x2000054c
 800d8bc:	0801b888 	.word	0x0801b888

0800d8c0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d8c4:	4a0e      	ldr	r2, [pc, #56]	; (800d900 <OnRadioTxTimeout+0x40>)
 800d8c6:	7813      	ldrb	r3, [r2, #0]
 800d8c8:	f043 0304 	orr.w	r3, r3, #4
 800d8cc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <OnRadioTxTimeout+0x44>)
 800d8d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00a      	beq.n	800d8ee <OnRadioTxTimeout+0x2e>
 800d8d8:	4b0a      	ldr	r3, [pc, #40]	; (800d904 <OnRadioTxTimeout+0x44>)
 800d8da:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d004      	beq.n	800d8ee <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8e4:	4b07      	ldr	r3, [pc, #28]	; (800d904 <OnRadioTxTimeout+0x44>)
 800d8e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d8ee:	4b06      	ldr	r3, [pc, #24]	; (800d908 <OnRadioTxTimeout+0x48>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	2002      	movs	r0, #2
 800d8f6:	f00d f93b 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8fa:	bf00      	nop
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20000da0 	.word	0x20000da0
 800d904:	2000054c 	.word	0x2000054c
 800d908:	0801b898 	.word	0x0801b898

0800d90c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d910:	4a0b      	ldr	r2, [pc, #44]	; (800d940 <OnRadioRxError+0x34>)
 800d912:	7813      	ldrb	r3, [r2, #0]
 800d914:	f043 0302 	orr.w	r3, r3, #2
 800d918:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d91a:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <OnRadioRxError+0x38>)
 800d91c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00a      	beq.n	800d93a <OnRadioRxError+0x2e>
 800d924:	4b07      	ldr	r3, [pc, #28]	; (800d944 <OnRadioRxError+0x38>)
 800d926:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d004      	beq.n	800d93a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d930:	4b04      	ldr	r3, [pc, #16]	; (800d944 <OnRadioRxError+0x38>)
 800d932:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	4798      	blx	r3
    }
}
 800d93a:	bf00      	nop
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20000da0 	.word	0x20000da0
 800d944:	2000054c 	.word	0x2000054c

0800d948 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d94c:	4a0e      	ldr	r2, [pc, #56]	; (800d988 <OnRadioRxTimeout+0x40>)
 800d94e:	7813      	ldrb	r3, [r2, #0]
 800d950:	f043 0301 	orr.w	r3, r3, #1
 800d954:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d956:	4b0d      	ldr	r3, [pc, #52]	; (800d98c <OnRadioRxTimeout+0x44>)
 800d958:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00a      	beq.n	800d976 <OnRadioRxTimeout+0x2e>
 800d960:	4b0a      	ldr	r3, [pc, #40]	; (800d98c <OnRadioRxTimeout+0x44>)
 800d962:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d004      	beq.n	800d976 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d96c:	4b07      	ldr	r3, [pc, #28]	; (800d98c <OnRadioRxTimeout+0x44>)
 800d96e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d976:	4b06      	ldr	r3, [pc, #24]	; (800d990 <OnRadioRxTimeout+0x48>)
 800d978:	2201      	movs	r2, #1
 800d97a:	2100      	movs	r1, #0
 800d97c:	2002      	movs	r0, #2
 800d97e:	f00d f8f7 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 800d982:	bf00      	nop
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	20000da0 	.word	0x20000da0
 800d98c:	2000054c 	.word	0x2000054c
 800d990:	0801b8a8 	.word	0x0801b8a8

0800d994 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d994:	b480      	push	{r7}
 800d996:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d998:	4b08      	ldr	r3, [pc, #32]	; (800d9bc <UpdateRxSlotIdleState+0x28>)
 800d99a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d004      	beq.n	800d9ac <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d9a2:	4b07      	ldr	r3, [pc, #28]	; (800d9c0 <UpdateRxSlotIdleState+0x2c>)
 800d9a4:	2206      	movs	r2, #6
 800d9a6:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d9aa:	e003      	b.n	800d9b4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d9ac:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <UpdateRxSlotIdleState+0x2c>)
 800d9ae:	2202      	movs	r2, #2
 800d9b0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d9b4:	bf00      	nop
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bc80      	pop	{r7}
 800d9ba:	4770      	bx	lr
 800d9bc:	20000a54 	.word	0x20000a54
 800d9c0:	2000054c 	.word	0x2000054c

0800d9c4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	; 0x38
 800d9c8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9ca:	4b44      	ldr	r3, [pc, #272]	; (800dadc <ProcessRadioTxDone+0x118>)
 800d9cc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	d002      	beq.n	800d9da <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d9d4:	4b42      	ldr	r3, [pc, #264]	; (800dae0 <ProcessRadioTxDone+0x11c>)
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d9da:	4b42      	ldr	r3, [pc, #264]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800d9dc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4841      	ldr	r0, [pc, #260]	; (800dae8 <ProcessRadioTxDone+0x124>)
 800d9e4:	f00c ff2a 	bl	801a83c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d9e8:	483f      	ldr	r0, [pc, #252]	; (800dae8 <ProcessRadioTxDone+0x124>)
 800d9ea:	f00c fe49 	bl	801a680 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d9ee:	4b3d      	ldr	r3, [pc, #244]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800d9f0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	483d      	ldr	r0, [pc, #244]	; (800daec <ProcessRadioTxDone+0x128>)
 800d9f8:	f00c ff20 	bl	801a83c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d9fc:	483b      	ldr	r0, [pc, #236]	; (800daec <ProcessRadioTxDone+0x128>)
 800d9fe:	f00c fe3f 	bl	801a680 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800da02:	4b36      	ldr	r3, [pc, #216]	; (800dadc <ProcessRadioTxDone+0x118>)
 800da04:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d004      	beq.n	800da16 <ProcessRadioTxDone+0x52>
 800da0c:	4b35      	ldr	r3, [pc, #212]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800da0e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800da12:	2b00      	cmp	r3, #0
 800da14:	d019      	beq.n	800da4a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800da16:	2316      	movs	r3, #22
 800da18:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da1c:	4b2f      	ldr	r3, [pc, #188]	; (800dadc <ProcessRadioTxDone+0x118>)
 800da1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da22:	f107 0220 	add.w	r2, r7, #32
 800da26:	4611      	mov	r1, r2
 800da28:	4618      	mov	r0, r3
 800da2a:	f006 fb55 	bl	80140d8 <RegionGetPhyParam>
 800da2e:	4603      	mov	r3, r0
 800da30:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800da32:	4b2c      	ldr	r3, [pc, #176]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800da34:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	4413      	add	r3, r2
 800da3c:	4619      	mov	r1, r3
 800da3e:	482c      	ldr	r0, [pc, #176]	; (800daf0 <ProcessRadioTxDone+0x12c>)
 800da40:	f00c fefc 	bl	801a83c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800da44:	482a      	ldr	r0, [pc, #168]	; (800daf0 <ProcessRadioTxDone+0x12c>)
 800da46:	f00c fe1b 	bl	801a680 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800da4a:	4b2a      	ldr	r3, [pc, #168]	; (800daf4 <ProcessRadioTxDone+0x130>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a23      	ldr	r2, [pc, #140]	; (800dadc <ProcessRadioTxDone+0x118>)
 800da50:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800da52:	4b24      	ldr	r3, [pc, #144]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800da54:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800da58:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800da5a:	4b26      	ldr	r3, [pc, #152]	; (800daf4 <ProcessRadioTxDone+0x130>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800da60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da64:	4618      	mov	r0, r3
 800da66:	f00c f95d 	bl	8019d24 <SysTimeGetMcuTime>
 800da6a:	4638      	mov	r0, r7
 800da6c:	4b1b      	ldr	r3, [pc, #108]	; (800dadc <ProcessRadioTxDone+0x118>)
 800da6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800da72:	9200      	str	r2, [sp, #0]
 800da74:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800da78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800da7c:	ca06      	ldmia	r2, {r1, r2}
 800da7e:	f00c f8b2 	bl	8019be6 <SysTimeSub>
 800da82:	f107 0314 	add.w	r3, r7, #20
 800da86:	463a      	mov	r2, r7
 800da88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da8c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800da90:	4b14      	ldr	r3, [pc, #80]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800da92:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800da96:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800da98:	2301      	movs	r3, #1
 800da9a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800da9c:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <ProcessRadioTxDone+0x118>)
 800da9e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800daa6:	2300      	movs	r3, #0
 800daa8:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800daaa:	4b0c      	ldr	r3, [pc, #48]	; (800dadc <ProcessRadioTxDone+0x118>)
 800daac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dab0:	f107 0208 	add.w	r2, r7, #8
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f006 fb27 	bl	801410a <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800dabc:	4b09      	ldr	r3, [pc, #36]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800dabe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dac2:	f083 0301 	eor.w	r3, r3, #1
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dacc:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <ProcessRadioTxDone+0x120>)
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800dad4:	bf00      	nop
 800dad6:	3730      	adds	r7, #48	; 0x30
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20000a54 	.word	0x20000a54
 800dae0:	0801bf10 	.word	0x0801bf10
 800dae4:	2000054c 	.word	0x2000054c
 800dae8:	200008cc 	.word	0x200008cc
 800daec:	200008e4 	.word	0x200008e4
 800daf0:	20000944 	.word	0x20000944
 800daf4:	200018a8 	.word	0x200018a8

0800daf8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dafc:	4b10      	ldr	r3, [pc, #64]	; (800db40 <PrepareRxDoneAbort+0x48>)
 800dafe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db06:	4a0e      	ldr	r2, [pc, #56]	; (800db40 <PrepareRxDoneAbort+0x48>)
 800db08:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800db0c:	4b0c      	ldr	r3, [pc, #48]	; (800db40 <PrepareRxDoneAbort+0x48>)
 800db0e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800db12:	2b00      	cmp	r3, #0
 800db14:	d002      	beq.n	800db1c <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800db16:	2000      	movs	r0, #0
 800db18:	f001 f8f8 	bl	800ed0c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800db1c:	4a08      	ldr	r2, [pc, #32]	; (800db40 <PrepareRxDoneAbort+0x48>)
 800db1e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db22:	f043 0302 	orr.w	r3, r3, #2
 800db26:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800db2a:	4a05      	ldr	r2, [pc, #20]	; (800db40 <PrepareRxDoneAbort+0x48>)
 800db2c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800db30:	f043 0320 	orr.w	r3, r3, #32
 800db34:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800db38:	f7ff ff2c 	bl	800d994 <UpdateRxSlotIdleState>
}
 800db3c:	bf00      	nop
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	2000054c 	.word	0x2000054c

0800db44 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800db44:	b5b0      	push	{r4, r5, r7, lr}
 800db46:	b0a6      	sub	sp, #152	; 0x98
 800db48:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800db4a:	2313      	movs	r3, #19
 800db4c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800db50:	4bb9      	ldr	r3, [pc, #740]	; (800de38 <ProcessRadioRxDone+0x2f4>)
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800db56:	4bb8      	ldr	r3, [pc, #736]	; (800de38 <ProcessRadioRxDone+0x2f4>)
 800db58:	891b      	ldrh	r3, [r3, #8]
 800db5a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800db5e:	4bb6      	ldr	r3, [pc, #728]	; (800de38 <ProcessRadioRxDone+0x2f4>)
 800db60:	895b      	ldrh	r3, [r3, #10]
 800db62:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800db66:	4bb4      	ldr	r3, [pc, #720]	; (800de38 <ProcessRadioRxDone+0x2f4>)
 800db68:	7b1b      	ldrb	r3, [r3, #12]
 800db6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800db78:	4bb0      	ldr	r3, [pc, #704]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800db7a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800db88:	2301      	movs	r3, #1
 800db8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800db8e:	4bac      	ldr	r3, [pc, #688]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800db90:	2200      	movs	r2, #0
 800db92:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800db96:	4aaa      	ldr	r2, [pc, #680]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800db98:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800db9c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800dba0:	4aa7      	ldr	r2, [pc, #668]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dba2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dba6:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800dbaa:	4ba5      	ldr	r3, [pc, #660]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbac:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800dbb0:	4ba3      	ldr	r3, [pc, #652]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbb2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800dbb6:	4ba2      	ldr	r3, [pc, #648]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800dbbe:	4ba0      	ldr	r3, [pc, #640]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800dbc6:	4b9e      	ldr	r3, [pc, #632]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800dbce:	4b9c      	ldr	r3, [pc, #624]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800dbd6:	4b9a      	ldr	r3, [pc, #616]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800dbde:	4b98      	ldr	r3, [pc, #608]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800dbe6:	4b96      	ldr	r3, [pc, #600]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dbee:	4b94      	ldr	r3, [pc, #592]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dbf6:	4b92      	ldr	r3, [pc, #584]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800dbfe:	4b90      	ldr	r3, [pc, #576]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dc06:	4b8e      	ldr	r3, [pc, #568]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800dc0e:	4b8d      	ldr	r3, [pc, #564]	; (800de44 <ProcessRadioRxDone+0x300>)
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dc14:	488c      	ldr	r0, [pc, #560]	; (800de48 <ProcessRadioRxDone+0x304>)
 800dc16:	f00c fda1 	bl	801a75c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dc1a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc22:	f004 fb28 	bl	8012276 <LoRaMacClassBRxBeacon>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00a      	beq.n	800dc42 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dc2c:	4a84      	ldr	r2, [pc, #528]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dc2e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800dc32:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dc36:	4a82      	ldr	r2, [pc, #520]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dc38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc3c:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800dc40:	e3bf      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dc42:	4b7e      	ldr	r3, [pc, #504]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dc44:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d11e      	bne.n	800dc8a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dc4c:	f004 fb26 	bl	801229c <LoRaMacClassBIsPingExpected>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00a      	beq.n	800dc6c <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc56:	2000      	movs	r0, #0
 800dc58:	f004 fad7 	bl	801220a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	f004 faf8 	bl	8012252 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dc62:	4b77      	ldr	r3, [pc, #476]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dc64:	2204      	movs	r2, #4
 800dc66:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800dc6a:	e00e      	b.n	800dc8a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dc6c:	f004 fb1d 	bl	80122aa <LoRaMacClassBIsMulticastExpected>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d009      	beq.n	800dc8a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dc76:	2000      	movs	r0, #0
 800dc78:	f004 fad1 	bl	801221e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	f004 faf1 	bl	8012264 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dc82:	4b6f      	ldr	r3, [pc, #444]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dc84:	2205      	movs	r2, #5
 800dc86:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dc8a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800dc94:	461a      	mov	r2, r3
 800dc96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc98:	4413      	add	r3, r2
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800dca0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dca4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	3b01      	subs	r3, #1
 800dcac:	2b06      	cmp	r3, #6
 800dcae:	f200 8362 	bhi.w	800e376 <ProcessRadioRxDone+0x832>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <ProcessRadioRxDone+0x174>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dcd5 	.word	0x0800dcd5
 800dcbc:	0800e377 	.word	0x0800e377
 800dcc0:	0800de55 	.word	0x0800de55
 800dcc4:	0800e377 	.word	0x0800e377
 800dcc8:	0800de4d 	.word	0x0800de4d
 800dccc:	0800e377 	.word	0x0800e377
 800dcd0:	0800e31d 	.word	0x0800e31d
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dcd4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcd8:	2b10      	cmp	r3, #16
 800dcda:	d806      	bhi.n	800dcea <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcdc:	4b58      	ldr	r3, [pc, #352]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dce4:	f7ff ff08 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800dce8:	e36b      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800dcea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcec:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800dcee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dcf6:	4b51      	ldr	r3, [pc, #324]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dcf8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d006      	beq.n	800dd0e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd00:	4b4f      	ldr	r3, [pc, #316]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dd08:	f7ff fef6 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800dd0c:	e359      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800dd0e:	f7fe fbcf 	bl	800c4b0 <SecureElementGetJoinEui>
 800dd12:	4601      	mov	r1, r0
 800dd14:	f107 0308 	add.w	r3, r7, #8
 800dd18:	461a      	mov	r2, r3
 800dd1a:	20ff      	movs	r0, #255	; 0xff
 800dd1c:	f005 fc60 	bl	80135e0 <LoRaMacCryptoHandleJoinAccept>
 800dd20:	4603      	mov	r3, r0
 800dd22:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dd26:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d172      	bne.n	800de14 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dd2e:	7c7b      	ldrb	r3, [r7, #17]
 800dd30:	461a      	mov	r2, r3
 800dd32:	4b42      	ldr	r3, [pc, #264]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd34:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dd38:	4b40      	ldr	r3, [pc, #256]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd3a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd3e:	7cbb      	ldrb	r3, [r7, #18]
 800dd40:	021b      	lsls	r3, r3, #8
 800dd42:	4313      	orrs	r3, r2
 800dd44:	4a3d      	ldr	r2, [pc, #244]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd46:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dd4a:	4b3c      	ldr	r3, [pc, #240]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd4c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dd50:	7cfb      	ldrb	r3, [r7, #19]
 800dd52:	041b      	lsls	r3, r3, #16
 800dd54:	4313      	orrs	r3, r2
 800dd56:	4a39      	ldr	r2, [pc, #228]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd58:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	4a37      	ldr	r2, [pc, #220]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd60:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dd64:	7e3b      	ldrb	r3, [r7, #24]
 800dd66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4b33      	ldr	r3, [pc, #204]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd74:	7e3b      	ldrb	r3, [r7, #24]
 800dd76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	4b2f      	ldr	r3, [pc, #188]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd80:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd84:	7e3b      	ldrb	r3, [r7, #24]
 800dd86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4b2b      	ldr	r3, [pc, #172]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd94:	7e7b      	ldrb	r3, [r7, #25]
 800dd96:	461a      	mov	r2, r3
 800dd98:	4b28      	ldr	r3, [pc, #160]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd9a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd9c:	4b27      	ldr	r3, [pc, #156]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d102      	bne.n	800ddaa <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dda4:	4b25      	ldr	r3, [pc, #148]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dda6:	2201      	movs	r2, #1
 800dda8:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800ddaa:	4b24      	ldr	r3, [pc, #144]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800ddac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ddb2:	fb02 f303 	mul.w	r3, r2, r3
 800ddb6:	4a21      	ldr	r2, [pc, #132]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800ddb8:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ddba:	4b20      	ldr	r3, [pc, #128]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800ddbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddbe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800ddc2:	4a1e      	ldr	r2, [pc, #120]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800ddc4:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ddc6:	4b1d      	ldr	r3, [pc, #116]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ddce:	f107 0308 	add.w	r3, r7, #8
 800ddd2:	3312      	adds	r3, #18
 800ddd4:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ddd6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	3b11      	subs	r3, #17
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800dde4:	4b15      	ldr	r3, [pc, #84]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800dde6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddea:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f006 f9c4 	bl	801417e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddf6:	4b11      	ldr	r3, [pc, #68]	; (800de3c <ProcessRadioRxDone+0x2f8>)
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ddfe:	2001      	movs	r0, #1
 800de00:	f004 ff18 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d00e      	beq.n	800de28 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800de0a:	2101      	movs	r1, #1
 800de0c:	2000      	movs	r0, #0
 800de0e:	f004 fe85 	bl	8012b1c <LoRaMacConfirmQueueSetStatus>
 800de12:	e009      	b.n	800de28 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800de14:	2001      	movs	r0, #1
 800de16:	f004 ff0d 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d003      	beq.n	800de28 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800de20:	2101      	movs	r1, #1
 800de22:	2007      	movs	r0, #7
 800de24:	f004 fe7a 	bl	8012b1c <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800de28:	4a05      	ldr	r2, [pc, #20]	; (800de40 <ProcessRadioRxDone+0x2fc>)
 800de2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800de2e:	f043 0308 	orr.w	r3, r3, #8
 800de32:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800de36:	e2a5      	b.n	800e384 <ProcessRadioRxDone+0x840>
 800de38:	200018ac 	.word	0x200018ac
 800de3c:	20000a54 	.word	0x20000a54
 800de40:	2000054c 	.word	0x2000054c
 800de44:	0801bf10 	.word	0x0801bf10
 800de48:	200008e4 	.word	0x200008e4
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de4c:	4bae      	ldr	r3, [pc, #696]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de54:	4bad      	ldr	r3, [pc, #692]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800de56:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800de5a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800de5e:	4baa      	ldr	r3, [pc, #680]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800de60:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800de64:	b25b      	sxtb	r3, r3
 800de66:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de6a:	230d      	movs	r3, #13
 800de6c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de70:	4ba6      	ldr	r3, [pc, #664]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800de72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de76:	2b00      	cmp	r3, #0
 800de78:	d002      	beq.n	800de80 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de7a:	230e      	movs	r3, #14
 800de7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de80:	4ba2      	ldr	r3, [pc, #648]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800de82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de86:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f006 f923 	bl	80140d8 <RegionGetPhyParam>
 800de92:	4603      	mov	r3, r0
 800de94:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800de9a:	3b0d      	subs	r3, #13
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	b21b      	sxth	r3, r3
 800dea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dea4:	b21a      	sxth	r2, r3
 800dea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dea8:	b21b      	sxth	r3, r3
 800deaa:	429a      	cmp	r2, r3
 800deac:	dc03      	bgt.n	800deb6 <ProcessRadioRxDone+0x372>
 800deae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800deb2:	2b0b      	cmp	r3, #11
 800deb4:	d806      	bhi.n	800dec4 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800deb6:	4b94      	ldr	r3, [pc, #592]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800deb8:	2201      	movs	r2, #1
 800deba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800debe:	f7ff fe1b 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800dec2:	e27e      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dec6:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dec8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800decc:	b2db      	uxtb	r3, r3
 800dece:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ded2:	4b8f      	ldr	r3, [pc, #572]	; (800e110 <ProcessRadioRxDone+0x5cc>)
 800ded4:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ded6:	23ff      	movs	r3, #255	; 0xff
 800ded8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dedc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dee0:	4618      	mov	r0, r3
 800dee2:	f005 fe7c 	bl	8013bde <LoRaMacParserData>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d006      	beq.n	800defa <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800deec:	4b86      	ldr	r3, [pc, #536]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800deee:	2201      	movs	r2, #1
 800def0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800def4:	f7ff fe00 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800def8:	e263      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800defa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defc:	4a82      	ldr	r2, [pc, #520]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800defe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800df02:	1cba      	adds	r2, r7, #2
 800df04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df08:	4611      	mov	r1, r2
 800df0a:	4618      	mov	r0, r3
 800df0c:	f002 fcde 	bl	80108cc <DetermineFrameType>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d006      	beq.n	800df24 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df16:	4b7c      	ldr	r3, [pc, #496]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800df1e:	f7ff fdeb 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800df22:	e24e      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df2e:	2300      	movs	r3, #0
 800df30:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800df34:	e049      	b.n	800dfca <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df36:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df3a:	4a74      	ldr	r2, [pc, #464]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800df3c:	212c      	movs	r1, #44	; 0x2c
 800df3e:	fb01 f303 	mul.w	r3, r1, r3
 800df42:	4413      	add	r3, r2
 800df44:	33d4      	adds	r3, #212	; 0xd4
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d138      	bne.n	800dfc0 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df4e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df52:	4a6e      	ldr	r2, [pc, #440]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800df54:	212c      	movs	r1, #44	; 0x2c
 800df56:	fb01 f303 	mul.w	r3, r1, r3
 800df5a:	4413      	add	r3, r2
 800df5c:	33d2      	adds	r3, #210	; 0xd2
 800df5e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df60:	2b00      	cmp	r3, #0
 800df62:	d02d      	beq.n	800dfc0 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800df64:	2301      	movs	r3, #1
 800df66:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df6a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df6e:	4a67      	ldr	r2, [pc, #412]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800df70:	212c      	movs	r1, #44	; 0x2c
 800df72:	fb01 f303 	mul.w	r3, r1, r3
 800df76:	4413      	add	r3, r2
 800df78:	33d3      	adds	r3, #211	; 0xd3
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df80:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df84:	4a61      	ldr	r2, [pc, #388]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800df86:	212c      	movs	r1, #44	; 0x2c
 800df88:	fb01 f303 	mul.w	r3, r1, r3
 800df8c:	4413      	add	r3, r2
 800df8e:	33f0      	adds	r3, #240	; 0xf0
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800df96:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800df9a:	4a5c      	ldr	r2, [pc, #368]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800df9c:	212c      	movs	r1, #44	; 0x2c
 800df9e:	fb01 f303 	mul.w	r3, r1, r3
 800dfa2:	4413      	add	r3, r2
 800dfa4:	33d4      	adds	r3, #212	; 0xd4
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dfac:	4b57      	ldr	r3, [pc, #348]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800dfae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	d10e      	bne.n	800dfd4 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dfb6:	4b54      	ldr	r3, [pc, #336]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800dfb8:	2203      	movs	r2, #3
 800dfba:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dfbe:	e009      	b.n	800dfd4 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dfc0:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dfca:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0b1      	beq.n	800df36 <ProcessRadioRxDone+0x3f2>
 800dfd2:	e000      	b.n	800dfd6 <ProcessRadioRxDone+0x492>
                    break;
 800dfd4:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfd6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d117      	bne.n	800e00e <ProcessRadioRxDone+0x4ca>
 800dfde:	78bb      	ldrb	r3, [r7, #2]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d10d      	bne.n	800e000 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfe4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfe8:	f003 0320 	and.w	r3, r3, #32
 800dfec:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dff2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffa:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d006      	beq.n	800e00e <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e000:	4b41      	ldr	r3, [pc, #260]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e002:	2201      	movs	r2, #1
 800e004:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800e008:	f7ff fd76 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800e00c:	e1d9      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800e00e:	2315      	movs	r3, #21
 800e010:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e014:	4b3d      	ldr	r3, [pc, #244]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800e016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e01a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e01e:	4611      	mov	r1, r2
 800e020:	4618      	mov	r0, r3
 800e022:	f006 f859 	bl	80140d8 <RegionGetPhyParam>
 800e026:	4603      	mov	r3, r0
 800e028:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e02a:	78b9      	ldrb	r1, [r7, #2]
 800e02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e02e:	b29b      	uxth	r3, r3
 800e030:	4d36      	ldr	r5, [pc, #216]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800e032:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e036:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e03a:	1d3a      	adds	r2, r7, #4
 800e03c:	9202      	str	r2, [sp, #8]
 800e03e:	1cfa      	adds	r2, r7, #3
 800e040:	9201      	str	r2, [sp, #4]
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800e048:	4622      	mov	r2, r4
 800e04a:	f000 fe95 	bl	800ed78 <GetFCntDown>
 800e04e:	4603      	mov	r3, r0
 800e050:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e054:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d031      	beq.n	800e0c0 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e05c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e060:	2b07      	cmp	r3, #7
 800e062:	d119      	bne.n	800e098 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e064:	4b28      	ldr	r3, [pc, #160]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e066:	2208      	movs	r2, #8
 800e068:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e06c:	4b27      	ldr	r3, [pc, #156]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800e06e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e072:	2b00      	cmp	r3, #0
 800e074:	d11d      	bne.n	800e0b2 <ProcessRadioRxDone+0x56e>
 800e076:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e07a:	f023 031f 	bic.w	r3, r3, #31
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2ba0      	cmp	r3, #160	; 0xa0
 800e082:	d116      	bne.n	800e0b2 <ProcessRadioRxDone+0x56e>
 800e084:	4b21      	ldr	r3, [pc, #132]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800e086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d111      	bne.n	800e0b2 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e08e:	4b1f      	ldr	r3, [pc, #124]	; (800e10c <ProcessRadioRxDone+0x5c8>)
 800e090:	2201      	movs	r2, #1
 800e092:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e096:	e00c      	b.n	800e0b2 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e098:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e09c:	2b08      	cmp	r3, #8
 800e09e:	d104      	bne.n	800e0aa <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e0a0:	4b19      	ldr	r3, [pc, #100]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e0a2:	220a      	movs	r2, #10
 800e0a4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e0a8:	e003      	b.n	800e0b2 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0aa:	4b17      	ldr	r3, [pc, #92]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a14      	ldr	r2, [pc, #80]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e0b6:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800e0ba:	f7ff fd1d 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800e0be:	e180      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e0c0:	78fa      	ldrb	r2, [r7, #3]
 800e0c2:	6879      	ldr	r1, [r7, #4]
 800e0c4:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800e0c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0d4:	f005 fbd0 	bl	8013878 <LoRaMacCryptoUnsecureMessage>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e0de:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d016      	beq.n	800e114 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0e6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d104      	bne.n	800e0f8 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0ee:	4b06      	ldr	r3, [pc, #24]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e0f0:	220b      	movs	r2, #11
 800e0f2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800e0f6:	e003      	b.n	800e100 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e0f8:	4b03      	ldr	r3, [pc, #12]	; (800e108 <ProcessRadioRxDone+0x5c4>)
 800e0fa:	220c      	movs	r2, #12
 800e0fc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800e100:	f7ff fcfa 	bl	800daf8 <PrepareRxDoneAbort>
                return;
 800e104:	e15d      	b.n	800e3c2 <ProcessRadioRxDone+0x87e>
 800e106:	bf00      	nop
 800e108:	2000054c 	.word	0x2000054c
 800e10c:	20000a54 	.word	0x20000a54
 800e110:	20000784 	.word	0x20000784
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e114:	4bac      	ldr	r3, [pc, #688]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e116:	2200      	movs	r2, #0
 800e118:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800e11c:	4aaa      	ldr	r2, [pc, #680]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e11e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e122:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e126:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e12a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	461a      	mov	r2, r3
 800e132:	4ba5      	ldr	r3, [pc, #660]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e134:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800e138:	4ba3      	ldr	r3, [pc, #652]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800e140:	4ba1      	ldr	r3, [pc, #644]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a9f      	ldr	r2, [pc, #636]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e14c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e150:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e154:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	bf14      	ite	ne
 800e15e:	2301      	movne	r3, #1
 800e160:	2300      	moveq	r3, #0
 800e162:	b2da      	uxtb	r2, r3
 800e164:	4b98      	ldr	r3, [pc, #608]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e166:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e16a:	4b97      	ldr	r3, [pc, #604]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e172:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e176:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bf14      	ite	ne
 800e180:	2301      	movne	r3, #1
 800e182:	2300      	moveq	r3, #0
 800e184:	b2da      	uxtb	r2, r3
 800e186:	4b90      	ldr	r3, [pc, #576]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e188:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e18c:	4b8e      	ldr	r3, [pc, #568]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e18e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e192:	2b00      	cmp	r3, #0
 800e194:	d004      	beq.n	800e1a0 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e196:	4b8c      	ldr	r3, [pc, #560]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e198:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d102      	bne.n	800e1a6 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e1a0:	4b8a      	ldr	r3, [pc, #552]	; (800e3cc <ProcessRadioRxDone+0x888>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e1a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d104      	bne.n	800e1b8 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e1ae:	4b86      	ldr	r3, [pc, #536]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1b6:	e01f      	b.n	800e1f8 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e1b8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800e1bc:	f023 031f 	bic.w	r3, r3, #31
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2ba0      	cmp	r3, #160	; 0xa0
 800e1c4:	d110      	bne.n	800e1e8 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e1c6:	4b81      	ldr	r3, [pc, #516]	; (800e3cc <ProcessRadioRxDone+0x888>)
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e1ce:	4b7f      	ldr	r3, [pc, #508]	; (800e3cc <ProcessRadioRxDone+0x888>)
 800e1d0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d102      	bne.n	800e1de <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e1d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1da:	4a7c      	ldr	r2, [pc, #496]	; (800e3cc <ProcessRadioRxDone+0x888>)
 800e1dc:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1de:	4b7a      	ldr	r3, [pc, #488]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800e1e6:	e007      	b.n	800e1f8 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1e8:	4b78      	ldr	r3, [pc, #480]	; (800e3cc <ProcessRadioRxDone+0x888>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1f0:	4b75      	ldr	r3, [pc, #468]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e1f8:	4b73      	ldr	r3, [pc, #460]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e1fa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e1fe:	4a72      	ldr	r2, [pc, #456]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e200:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800e204:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 ff0d 	bl	8010028 <RemoveMacCommands>

            switch( fType )
 800e20e:	78bb      	ldrb	r3, [r7, #2]
 800e210:	2b03      	cmp	r3, #3
 800e212:	d874      	bhi.n	800e2fe <ProcessRadioRxDone+0x7ba>
 800e214:	a201      	add	r2, pc, #4	; (adr r2, 800e21c <ProcessRadioRxDone+0x6d8>)
 800e216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21a:	bf00      	nop
 800e21c:	0800e22d 	.word	0x0800e22d
 800e220:	0800e27d 	.word	0x0800e27d
 800e224:	0800e2b3 	.word	0x0800e2b3
 800e228:	0800e2d9 	.word	0x0800e2d9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e22c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e230:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e234:	b2db      	uxtb	r3, r3
 800e236:	461c      	mov	r4, r3
 800e238:	4b63      	ldr	r3, [pc, #396]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e23a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e23e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e242:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e246:	f102 0010 	add.w	r0, r2, #16
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	460b      	mov	r3, r1
 800e24e:	4622      	mov	r2, r4
 800e250:	2100      	movs	r1, #0
 800e252:	f000 ff03 	bl	800f05c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e256:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e25a:	4b5b      	ldr	r3, [pc, #364]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e25c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e262:	4a59      	ldr	r2, [pc, #356]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e264:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e268:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e26c:	4b56      	ldr	r3, [pc, #344]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e26e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e272:	4b55      	ldr	r3, [pc, #340]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e27a:	e047      	b.n	800e30c <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e27c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e280:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e284:	b2db      	uxtb	r3, r3
 800e286:	461c      	mov	r4, r3
 800e288:	4b4f      	ldr	r3, [pc, #316]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e28a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e28e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e292:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e296:	f102 0010 	add.w	r0, r2, #16
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	460b      	mov	r3, r1
 800e29e:	4622      	mov	r2, r4
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	f000 fedb 	bl	800f05c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2a6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2aa:	4b47      	ldr	r3, [pc, #284]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2ac:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2b0:	e02c      	b.n	800e30c <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e2b2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e2b4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2b8:	4b43      	ldr	r3, [pc, #268]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2ba:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e2be:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	f000 fec8 	bl	800f05c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2cc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2d0:	4b3d      	ldr	r3, [pc, #244]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2d2:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e2d6:	e019      	b.n	800e30c <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2d8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e2dc:	4b3a      	ldr	r3, [pc, #232]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2de:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2e4:	4a38      	ldr	r2, [pc, #224]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2e6:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e2ea:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e2ee:	4b36      	ldr	r3, [pc, #216]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2f0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e2f4:	4b34      	ldr	r3, [pc, #208]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e2fc:	e006      	b.n	800e30c <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2fe:	4b32      	ldr	r3, [pc, #200]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e300:	2201      	movs	r2, #1
 800e302:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e306:	f7ff fbf7 	bl	800daf8 <PrepareRxDoneAbort>
                    break;
 800e30a:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e30c:	4a2e      	ldr	r2, [pc, #184]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e30e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e312:	f043 0302 	orr.w	r3, r3, #2
 800e316:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e31a:	e033      	b.n	800e384 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e31c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e320:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e322:	18d1      	adds	r1, r2, r3
 800e324:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e328:	b29b      	uxth	r3, r3
 800e32a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	b29b      	uxth	r3, r3
 800e332:	461a      	mov	r2, r3
 800e334:	4826      	ldr	r0, [pc, #152]	; (800e3d0 <ProcessRadioRxDone+0x88c>)
 800e336:	f008 f9da 	bl	80166ee <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e33a:	4b23      	ldr	r3, [pc, #140]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e33c:	2203      	movs	r2, #3
 800e33e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e342:	4b21      	ldr	r3, [pc, #132]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e344:	2200      	movs	r2, #0
 800e346:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e34a:	4b1f      	ldr	r3, [pc, #124]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e34c:	4a20      	ldr	r2, [pc, #128]	; (800e3d0 <ProcessRadioRxDone+0x88c>)
 800e34e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e352:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e356:	b2da      	uxtb	r2, r3
 800e358:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	4b19      	ldr	r3, [pc, #100]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e362:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e366:	4a18      	ldr	r2, [pc, #96]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e368:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e36c:	f043 0302 	orr.w	r3, r3, #2
 800e370:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e374:	e006      	b.n	800e384 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e376:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e378:	2201      	movs	r2, #1
 800e37a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e37e:	f7ff fbbb 	bl	800daf8 <PrepareRxDoneAbort>
            break;
 800e382:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e384:	4b10      	ldr	r3, [pc, #64]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e386:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d008      	beq.n	800e3a0 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e38e:	4b0e      	ldr	r3, [pc, #56]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e390:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00b      	beq.n	800e3b0 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e398:	2000      	movs	r0, #0
 800e39a:	f000 fcb7 	bl	800ed0c <OnAckTimeoutTimerEvent>
 800e39e:	e007      	b.n	800e3b0 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e3a0:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <ProcessRadioRxDone+0x888>)
 800e3a2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d102      	bne.n	800e3b0 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e3aa:	2000      	movs	r0, #0
 800e3ac:	f000 fcae 	bl	800ed0c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e3b0:	4a05      	ldr	r2, [pc, #20]	; (800e3c8 <ProcessRadioRxDone+0x884>)
 800e3b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3b6:	f043 0320 	orr.w	r3, r3, #32
 800e3ba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e3be:	f7ff fae9 	bl	800d994 <UpdateRxSlotIdleState>
}
 800e3c2:	3788      	adds	r7, #136	; 0x88
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e3c8:	2000054c 	.word	0x2000054c
 800e3cc:	20000a54 	.word	0x20000a54
 800e3d0:	20000784 	.word	0x20000784

0800e3d4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e3d8:	4b11      	ldr	r3, [pc, #68]	; (800e420 <ProcessRadioTxTimeout+0x4c>)
 800e3da:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	d002      	beq.n	800e3e8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e3e2:	4b10      	ldr	r3, [pc, #64]	; (800e424 <ProcessRadioTxTimeout+0x50>)
 800e3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e3e8:	f7ff fad4 	bl	800d994 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e3ec:	4b0e      	ldr	r3, [pc, #56]	; (800e428 <ProcessRadioTxTimeout+0x54>)
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e3f4:	2002      	movs	r0, #2
 800e3f6:	f004 fbe9 	bl	8012bcc <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e3fa:	4b0b      	ldr	r3, [pc, #44]	; (800e428 <ProcessRadioTxTimeout+0x54>)
 800e3fc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e400:	2b00      	cmp	r3, #0
 800e402:	d003      	beq.n	800e40c <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e404:	4b08      	ldr	r3, [pc, #32]	; (800e428 <ProcessRadioTxTimeout+0x54>)
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e40c:	4a06      	ldr	r2, [pc, #24]	; (800e428 <ProcessRadioTxTimeout+0x54>)
 800e40e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e412:	f043 0320 	orr.w	r3, r3, #32
 800e416:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e41a:	bf00      	nop
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	20000a54 	.word	0x20000a54
 800e424:	0801bf10 	.word	0x0801bf10
 800e428:	2000054c 	.word	0x2000054c

0800e42c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	4603      	mov	r3, r0
 800e434:	460a      	mov	r2, r1
 800e436:	71fb      	strb	r3, [r7, #7]
 800e438:	4613      	mov	r3, r2
 800e43a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e43c:	2300      	movs	r3, #0
 800e43e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e440:	4b40      	ldr	r3, [pc, #256]	; (800e544 <HandleRadioRxErrorTimeout+0x118>)
 800e442:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e446:	2b02      	cmp	r3, #2
 800e448:	d002      	beq.n	800e450 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e44a:	4b3f      	ldr	r3, [pc, #252]	; (800e548 <HandleRadioRxErrorTimeout+0x11c>)
 800e44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e450:	f003 ff1d 	bl	801228e <LoRaMacClassBIsBeaconExpected>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d007      	beq.n	800e46a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e45a:	2002      	movs	r0, #2
 800e45c:	f003 fecb 	bl	80121f6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e460:	2000      	movs	r0, #0
 800e462:	f003 feed 	bl	8012240 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e466:	2301      	movs	r3, #1
 800e468:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e46a:	4b36      	ldr	r3, [pc, #216]	; (800e544 <HandleRadioRxErrorTimeout+0x118>)
 800e46c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e470:	2b01      	cmp	r3, #1
 800e472:	d119      	bne.n	800e4a8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e474:	f003 ff12 	bl	801229c <LoRaMacClassBIsPingExpected>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d007      	beq.n	800e48e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e47e:	2000      	movs	r0, #0
 800e480:	f003 fec3 	bl	801220a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e484:	2000      	movs	r0, #0
 800e486:	f003 fee4 	bl	8012252 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e48a:	2301      	movs	r3, #1
 800e48c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e48e:	f003 ff0c 	bl	80122aa <LoRaMacClassBIsMulticastExpected>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d007      	beq.n	800e4a8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e498:	2000      	movs	r0, #0
 800e49a:	f003 fec0 	bl	801221e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e49e:	2000      	movs	r0, #0
 800e4a0:	f003 fee0 	bl	8012264 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e4a8:	7bfb      	ldrb	r3, [r7, #15]
 800e4aa:	f083 0301 	eor.w	r3, r3, #1
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d040      	beq.n	800e536 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e4b4:	4b25      	ldr	r3, [pc, #148]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e4b6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d122      	bne.n	800e504 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e4be:	4b23      	ldr	r3, [pc, #140]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e4c0:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d003      	beq.n	800e4d0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e4c8:	4a20      	ldr	r2, [pc, #128]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e4d0:	79fb      	ldrb	r3, [r7, #7]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f004 fb7a 	bl	8012bcc <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <HandleRadioRxErrorTimeout+0x118>)
 800e4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f00c fa69 	bl	801a9b4 <UTIL_TIMER_GetElapsedTime>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4b19      	ldr	r3, [pc, #100]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e4e6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d323      	bcc.n	800e536 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e4ee:	4818      	ldr	r0, [pc, #96]	; (800e550 <HandleRadioRxErrorTimeout+0x124>)
 800e4f0:	f00c f934 	bl	801a75c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e4f4:	4a15      	ldr	r2, [pc, #84]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e4f6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4fa:	f043 0320 	orr.w	r3, r3, #32
 800e4fe:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e502:	e018      	b.n	800e536 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e504:	4b11      	ldr	r3, [pc, #68]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e506:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d003      	beq.n	800e516 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e50e:	4a0f      	ldr	r2, [pc, #60]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e510:	79bb      	ldrb	r3, [r7, #6]
 800e512:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e516:	79bb      	ldrb	r3, [r7, #6]
 800e518:	4618      	mov	r0, r3
 800e51a:	f004 fb57 	bl	8012bcc <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e51e:	4b09      	ldr	r3, [pc, #36]	; (800e544 <HandleRadioRxErrorTimeout+0x118>)
 800e520:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e524:	2b02      	cmp	r3, #2
 800e526:	d006      	beq.n	800e536 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e528:	4a08      	ldr	r2, [pc, #32]	; (800e54c <HandleRadioRxErrorTimeout+0x120>)
 800e52a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e52e:	f043 0320 	orr.w	r3, r3, #32
 800e532:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e536:	f7ff fa2d 	bl	800d994 <UpdateRxSlotIdleState>
}
 800e53a:	bf00      	nop
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20000a54 	.word	0x20000a54
 800e548:	0801bf10 	.word	0x0801bf10
 800e54c:	2000054c 	.word	0x2000054c
 800e550:	200008e4 	.word	0x200008e4

0800e554 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e558:	2106      	movs	r1, #6
 800e55a:	2005      	movs	r0, #5
 800e55c:	f7ff ff66 	bl	800e42c <HandleRadioRxErrorTimeout>
}
 800e560:	bf00      	nop
 800e562:	bd80      	pop	{r7, pc}

0800e564 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e568:	2104      	movs	r1, #4
 800e56a:	2003      	movs	r0, #3
 800e56c:	f7ff ff5e 	bl	800e42c <HandleRadioRxErrorTimeout>
}
 800e570:	bf00      	nop
 800e572:	bd80      	pop	{r7, pc}

0800e574 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e57a:	f3ef 8310 	mrs	r3, PRIMASK
 800e57e:	607b      	str	r3, [r7, #4]
  return(result);
 800e580:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e582:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e584:	b672      	cpsid	i
}
 800e586:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e588:	4b1d      	ldr	r3, [pc, #116]	; (800e600 <LoRaMacHandleIrqEvents+0x8c>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e58e:	4b1c      	ldr	r3, [pc, #112]	; (800e600 <LoRaMacHandleIrqEvents+0x8c>)
 800e590:	2200      	movs	r2, #0
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	f383 8810 	msr	PRIMASK, r3
}
 800e59e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d027      	beq.n	800e5f6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e5a6:	783b      	ldrb	r3, [r7, #0]
 800e5a8:	f003 0310 	and.w	r3, r3, #16
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e5b2:	f7ff fa07 	bl	800d9c4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e5b6:	783b      	ldrb	r3, [r7, #0]
 800e5b8:	f003 0308 	and.w	r3, r3, #8
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e5c2:	f7ff fabf 	bl	800db44 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e5c6:	783b      	ldrb	r3, [r7, #0]
 800e5c8:	f003 0304 	and.w	r3, r3, #4
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e5d2:	f7ff feff 	bl	800e3d4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e5d6:	783b      	ldrb	r3, [r7, #0]
 800e5d8:	f003 0302 	and.w	r3, r3, #2
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e5e2:	f7ff ffb7 	bl	800e554 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e5e6:	783b      	ldrb	r3, [r7, #0]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e5f2:	f7ff ffb7 	bl	800e564 <ProcessRadioRxTimeout>
        }
    }
}
 800e5f6:	bf00      	nop
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20000da0 	.word	0x20000da0

0800e604 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e604:	b480      	push	{r7}
 800e606:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e608:	4b08      	ldr	r3, [pc, #32]	; (800e62c <LoRaMacIsBusy+0x28>)
 800e60a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d106      	bne.n	800e620 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e612:	4b06      	ldr	r3, [pc, #24]	; (800e62c <LoRaMacIsBusy+0x28>)
 800e614:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d101      	bne.n	800e620 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e61c:	2300      	movs	r3, #0
 800e61e:	e000      	b.n	800e622 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e620:	2301      	movs	r3, #1
}
 800e622:	4618      	mov	r0, r3
 800e624:	46bd      	mov	sp, r7
 800e626:	bc80      	pop	{r7}
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	2000054c 	.word	0x2000054c

0800e630 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e63a:	4a04      	ldr	r2, [pc, #16]	; (800e64c <LoRaMacEnableRequests+0x1c>)
 800e63c:	79fb      	ldrb	r3, [r7, #7]
 800e63e:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e642:	bf00      	nop
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	bc80      	pop	{r7}
 800e64a:	4770      	bx	lr
 800e64c:	2000054c 	.word	0x2000054c

0800e650 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e656:	4b2c      	ldr	r3, [pc, #176]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e658:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e65c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e65e:	4b2a      	ldr	r3, [pc, #168]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e660:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e664:	2b00      	cmp	r3, #0
 800e666:	d14a      	bne.n	800e6fe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e668:	4b27      	ldr	r3, [pc, #156]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e66a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	b2db      	uxtb	r3, r3
 800e674:	2b00      	cmp	r3, #0
 800e676:	d006      	beq.n	800e686 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e678:	4a23      	ldr	r2, [pc, #140]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e67a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e67e:	f36f 0300 	bfc	r3, #0, #1
 800e682:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e686:	4b20      	ldr	r3, [pc, #128]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e688:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e68c:	f003 0304 	and.w	r3, r3, #4
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2b00      	cmp	r3, #0
 800e694:	d006      	beq.n	800e6a4 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e696:	4a1c      	ldr	r2, [pc, #112]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e698:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e69c:	f36f 0382 	bfc	r3, #2, #1
 800e6a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e6a4:	2001      	movs	r0, #1
 800e6a6:	f7ff ffc3 	bl	800e630 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e6aa:	793b      	ldrb	r3, [r7, #4]
 800e6ac:	f003 0301 	and.w	r3, r3, #1
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d005      	beq.n	800e6c2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e6b6:	4b14      	ldr	r3, [pc, #80]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e6b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	4813      	ldr	r0, [pc, #76]	; (800e70c <LoRaMacHandleRequestEvents+0xbc>)
 800e6c0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e6c2:	793b      	ldrb	r3, [r7, #4]
 800e6c4:	f003 0304 	and.w	r3, r3, #4
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d00e      	beq.n	800e6ec <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e6ce:	4810      	ldr	r0, [pc, #64]	; (800e710 <LoRaMacHandleRequestEvents+0xc0>)
 800e6d0:	f004 faca 	bl	8012c68 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e6d4:	f004 fb14 	bl	8012d00 <LoRaMacConfirmQueueGetCnt>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d006      	beq.n	800e6ec <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e6de:	4a0a      	ldr	r2, [pc, #40]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e6e0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6e4:	f043 0304 	orr.w	r3, r3, #4
 800e6e8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e6ec:	f003 fdfb 	bl	80122e6 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e6f0:	4a05      	ldr	r2, [pc, #20]	; (800e708 <LoRaMacHandleRequestEvents+0xb8>)
 800e6f2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e6f6:	f36f 1345 	bfc	r3, #5, #1
 800e6fa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	2000054c 	.word	0x2000054c
 800e70c:	20000984 	.word	0x20000984
 800e710:	20000998 	.word	0x20000998

0800e714 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e71a:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e71c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10a      	bne.n	800e73a <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e724:	2300      	movs	r3, #0
 800e726:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e728:	1dfb      	adds	r3, r7, #7
 800e72a:	4618      	mov	r0, r3
 800e72c:	f004 f882 	bl	8012834 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e730:	79fb      	ldrb	r3, [r7, #7]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e736:	f000 fc81 	bl	800f03c <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	2000054c 	.word	0x2000054c

0800e748 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b088      	sub	sp, #32
 800e74c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e74e:	4b25      	ldr	r3, [pc, #148]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e750:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e754:	f003 0308 	and.w	r3, r3, #8
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00d      	beq.n	800e77a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e75e:	4a21      	ldr	r2, [pc, #132]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e760:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e764:	f36f 03c3 	bfc	r3, #3, #1
 800e768:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e76c:	4b1d      	ldr	r3, [pc, #116]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e76e:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	491c      	ldr	r1, [pc, #112]	; (800e7e8 <LoRaMacHandleIndicationEvents+0xa0>)
 800e776:	481d      	ldr	r0, [pc, #116]	; (800e7ec <LoRaMacHandleIndicationEvents+0xa4>)
 800e778:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e77a:	4b1a      	ldr	r3, [pc, #104]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e77c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e780:	f003 0310 	and.w	r3, r3, #16
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d012      	beq.n	800e7b0 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e78a:	2307      	movs	r3, #7
 800e78c:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e78e:	2300      	movs	r3, #0
 800e790:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e792:	4b14      	ldr	r3, [pc, #80]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e794:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	1d3a      	adds	r2, r7, #4
 800e79c:	4912      	ldr	r1, [pc, #72]	; (800e7e8 <LoRaMacHandleIndicationEvents+0xa0>)
 800e79e:	4610      	mov	r0, r2
 800e7a0:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e7a2:	4a10      	ldr	r2, [pc, #64]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7a4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e7a8:	f36f 1304 	bfc	r3, #4, #1
 800e7ac:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e7b0:	4b0c      	ldr	r3, [pc, #48]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7b2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e7b6:	f003 0302 	and.w	r3, r3, #2
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00d      	beq.n	800e7dc <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e7c0:	4a08      	ldr	r2, [pc, #32]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7c2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e7c6:	f36f 0341 	bfc	r3, #1, #1
 800e7ca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e7ce:	4b05      	ldr	r3, [pc, #20]	; (800e7e4 <LoRaMacHandleIndicationEvents+0x9c>)
 800e7d0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	4904      	ldr	r1, [pc, #16]	; (800e7e8 <LoRaMacHandleIndicationEvents+0xa0>)
 800e7d8:	4805      	ldr	r0, [pc, #20]	; (800e7f0 <LoRaMacHandleIndicationEvents+0xa8>)
 800e7da:	4798      	blx	r3
    }
}
 800e7dc:	bf00      	nop
 800e7de:	3720      	adds	r7, #32
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	2000054c 	.word	0x2000054c
 800e7e8:	200009c8 	.word	0x200009c8
 800e7ec:	200009ac 	.word	0x200009ac
 800e7f0:	20000968 	.word	0x20000968

0800e7f4 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7fa:	4b32      	ldr	r3, [pc, #200]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e7fc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e800:	f003 0301 	and.w	r3, r3, #1
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d058      	beq.n	800e8bc <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e80a:	2300      	movs	r3, #0
 800e80c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e80e:	2300      	movs	r3, #0
 800e810:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e812:	4b2c      	ldr	r3, [pc, #176]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e814:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d004      	beq.n	800e826 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e81c:	4b29      	ldr	r3, [pc, #164]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e81e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e822:	2b03      	cmp	r3, #3
 800e824:	d104      	bne.n	800e830 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e826:	f002 f89f 	bl	8010968 <CheckRetransUnconfirmedUplink>
 800e82a:	4603      	mov	r3, r0
 800e82c:	71fb      	strb	r3, [r7, #7]
 800e82e:	e020      	b.n	800e872 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e830:	4b24      	ldr	r3, [pc, #144]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e832:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e836:	2b01      	cmp	r3, #1
 800e838:	d11b      	bne.n	800e872 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e83a:	4b22      	ldr	r3, [pc, #136]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e83c:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e840:	2b00      	cmp	r3, #0
 800e842:	d014      	beq.n	800e86e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e844:	f002 f8bc 	bl	80109c0 <CheckRetransConfirmedUplink>
 800e848:	4603      	mov	r3, r0
 800e84a:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e84c:	4b1e      	ldr	r3, [pc, #120]	; (800e8c8 <LoRaMacHandleMcpsRequest+0xd4>)
 800e84e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10d      	bne.n	800e872 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	f083 0301 	eor.w	r3, r3, #1
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d002      	beq.n	800e868 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e862:	f002 f929 	bl	8010ab8 <AckTimeoutRetriesProcess>
 800e866:	e004      	b.n	800e872 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e868:	f002 f964 	bl	8010b34 <AckTimeoutRetriesFinalize>
 800e86c:	e001      	b.n	800e872 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e86e:	2301      	movs	r3, #1
 800e870:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e872:	79fb      	ldrb	r3, [r7, #7]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00d      	beq.n	800e894 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e878:	4814      	ldr	r0, [pc, #80]	; (800e8cc <LoRaMacHandleMcpsRequest+0xd8>)
 800e87a:	f00b ff6f 	bl	801a75c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e87e:	4b11      	ldr	r3, [pc, #68]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e880:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e884:	f023 0320 	bic.w	r3, r3, #32
 800e888:	4a0e      	ldr	r2, [pc, #56]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e88a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e88e:	f002 f8b9 	bl	8010a04 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e892:	e013      	b.n	800e8bc <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e894:	79bb      	ldrb	r3, [r7, #6]
 800e896:	f083 0301 	eor.w	r3, r3, #1
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00d      	beq.n	800e8bc <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e8a0:	4a08      	ldr	r2, [pc, #32]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e8a2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e8a6:	f36f 1345 	bfc	r3, #5, #1
 800e8aa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e8ae:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	f000 f97e 	bl	800ebb8 <OnTxDelayedTimerEvent>
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	2000054c 	.word	0x2000054c
 800e8c8:	20000a54 	.word	0x20000a54
 800e8cc:	200008b4 	.word	0x200008b4

0800e8d0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e8d4:	4b1b      	ldr	r3, [pc, #108]	; (800e944 <LoRaMacHandleMlmeRequest+0x74>)
 800e8d6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e8da:	f003 0304 	and.w	r3, r3, #4
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d02c      	beq.n	800e93e <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f004 f9a5 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d012      	beq.n	800e916 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	f004 f941 	bl	8012b78 <LoRaMacConfirmQueueGetStatus>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d103      	bne.n	800e904 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e8fc:	4b11      	ldr	r3, [pc, #68]	; (800e944 <LoRaMacHandleMlmeRequest+0x74>)
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e904:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <LoRaMacHandleMlmeRequest+0x74>)
 800e906:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e90a:	f023 0302 	bic.w	r3, r3, #2
 800e90e:	4a0d      	ldr	r2, [pc, #52]	; (800e944 <LoRaMacHandleMlmeRequest+0x74>)
 800e910:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e914:	e013      	b.n	800e93e <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e916:	2005      	movs	r0, #5
 800e918:	f004 f98c 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800e91c:	4603      	mov	r3, r0
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d105      	bne.n	800e92e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e922:	2006      	movs	r0, #6
 800e924:	f004 f986 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800e928:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d007      	beq.n	800e93e <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e92e:	4b05      	ldr	r3, [pc, #20]	; (800e944 <LoRaMacHandleMlmeRequest+0x74>)
 800e930:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e934:	f023 0302 	bic.w	r3, r3, #2
 800e938:	4a02      	ldr	r2, [pc, #8]	; (800e944 <LoRaMacHandleMlmeRequest+0x74>)
 800e93a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e93e:	bf00      	nop
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	2000054c 	.word	0x2000054c

0800e948 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e94c:	200c      	movs	r0, #12
 800e94e:	f004 f971 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d019      	beq.n	800e98c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e958:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e95a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e95e:	f003 0301 	and.w	r3, r3, #1
 800e962:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e964:	2b00      	cmp	r3, #0
 800e966:	d111      	bne.n	800e98c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e968:	4b0a      	ldr	r3, [pc, #40]	; (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e96a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e96e:	f003 0304 	and.w	r3, r3, #4
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d009      	beq.n	800e98c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e978:	4b06      	ldr	r3, [pc, #24]	; (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e97a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e97e:	f023 0302 	bic.w	r3, r3, #2
 800e982:	4a04      	ldr	r2, [pc, #16]	; (800e994 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e984:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e988:	2301      	movs	r3, #1
 800e98a:	e000      	b.n	800e98e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	2000054c 	.word	0x2000054c

0800e998 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e998:	b480      	push	{r7}
 800e99a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e99c:	4b0d      	ldr	r3, [pc, #52]	; (800e9d4 <LoRaMacCheckForRxAbort+0x3c>)
 800e99e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00f      	beq.n	800e9ca <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <LoRaMacCheckForRxAbort+0x3c>)
 800e9ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9b4:	4a07      	ldr	r2, [pc, #28]	; (800e9d4 <LoRaMacCheckForRxAbort+0x3c>)
 800e9b6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9ba:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <LoRaMacCheckForRxAbort+0x3c>)
 800e9bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9c0:	f023 0302 	bic.w	r3, r3, #2
 800e9c4:	4a03      	ldr	r2, [pc, #12]	; (800e9d4 <LoRaMacCheckForRxAbort+0x3c>)
 800e9c6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e9ca:	bf00      	nop
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bc80      	pop	{r7}
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	2000054c 	.word	0x2000054c

0800e9d8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e9e8:	4b50      	ldr	r3, [pc, #320]	; (800eb2c <LoRaMacHandleNvm+0x154>)
 800e9ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f040 8097 	bne.w	800eb22 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2124      	movs	r1, #36	; 0x24
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f007 fecd 	bl	8016798 <Crc32>
 800e9fe:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d006      	beq.n	800ea18 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ea10:	89fb      	ldrh	r3, [r7, #14]
 800ea12:	f043 0301 	orr.w	r3, r3, #1
 800ea16:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	3328      	adds	r3, #40	; 0x28
 800ea1c:	2114      	movs	r1, #20
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f007 feba 	bl	8016798 <Crc32>
 800ea24:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d006      	beq.n	800ea3e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	68ba      	ldr	r2, [r7, #8]
 800ea34:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ea36:	89fb      	ldrh	r3, [r7, #14]
 800ea38:	f043 0302 	orr.w	r3, r3, #2
 800ea3c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3340      	adds	r3, #64	; 0x40
 800ea42:	21d4      	movs	r1, #212	; 0xd4
 800ea44:	4618      	mov	r0, r3
 800ea46:	f007 fea7 	bl	8016798 <Crc32>
 800ea4a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d007      	beq.n	800ea68 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	68ba      	ldr	r2, [r7, #8]
 800ea5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea60:	89fb      	ldrh	r3, [r7, #14]
 800ea62:	f043 0304 	orr.w	r3, r3, #4
 800ea66:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800ea6e:	21bc      	movs	r1, #188	; 0xbc
 800ea70:	4618      	mov	r0, r3
 800ea72:	f007 fe91 	bl	8016798 <Crc32>
 800ea76:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d007      	beq.n	800ea94 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	68ba      	ldr	r2, [r7, #8]
 800ea88:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ea8c:	89fb      	ldrh	r3, [r7, #14]
 800ea8e:	f043 0308 	orr.w	r3, r3, #8
 800ea92:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ea9a:	2190      	movs	r1, #144	; 0x90
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f007 fe7b 	bl	8016798 <Crc32>
 800eaa2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d007      	beq.n	800eac0 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800eab8:	89fb      	ldrh	r3, [r7, #14]
 800eaba:	f043 0310 	orr.w	r3, r3, #16
 800eabe:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800eac6:	21c4      	movs	r1, #196	; 0xc4
 800eac8:	4618      	mov	r0, r3
 800eaca:	f007 fe65 	bl	8016798 <Crc32>
 800eace:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d007      	beq.n	800eaec <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800eae4:	89fb      	ldrh	r3, [r7, #14]
 800eae6:	f043 0320 	orr.w	r3, r3, #32
 800eaea:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800eaf2:	2114      	movs	r1, #20
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f007 fe4f 	bl	8016798 <Crc32>
 800eafa:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb02:	68ba      	ldr	r2, [r7, #8]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d007      	beq.n	800eb18 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eb10:	89fb      	ldrh	r3, [r7, #14]
 800eb12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb16:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eb18:	89fb      	ldrh	r3, [r7, #14]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f001 ffae 	bl	8010a7c <CallNvmDataChangeCallback>
 800eb20:	e000      	b.n	800eb24 <LoRaMacHandleNvm+0x14c>
        return;
 800eb22:	bf00      	nop
}
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	2000054c 	.word	0x2000054c

0800eb30 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800eb36:	2300      	movs	r3, #0
 800eb38:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800eb3a:	f7ff fd1b 	bl	800e574 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eb3e:	f003 fc36 	bl	80123ae <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eb42:	4b1b      	ldr	r3, [pc, #108]	; (800ebb0 <LoRaMacProcess+0x80>)
 800eb44:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800eb48:	f003 0320 	and.w	r3, r3, #32
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d021      	beq.n	800eb96 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800eb52:	2000      	movs	r0, #0
 800eb54:	f7ff fd6c 	bl	800e630 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800eb58:	f7ff ff1e 	bl	800e998 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eb5c:	f002 f81e 	bl	8010b9c <IsRequestPending>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d006      	beq.n	800eb74 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800eb66:	f7ff feef 	bl	800e948 <LoRaMacCheckForBeaconAcquisition>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	79fb      	ldrb	r3, [r7, #7]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d103      	bne.n	800eb82 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800eb7a:	f7ff fea9 	bl	800e8d0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800eb7e:	f7ff fe39 	bl	800e7f4 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800eb82:	f7ff fd65 	bl	800e650 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800eb86:	f7ff fdc5 	bl	800e714 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800eb8a:	480a      	ldr	r0, [pc, #40]	; (800ebb4 <LoRaMacProcess+0x84>)
 800eb8c:	f7ff ff24 	bl	800e9d8 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb90:	2001      	movs	r0, #1
 800eb92:	f7ff fd4d 	bl	800e630 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800eb96:	f7ff fdd7 	bl	800e748 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eb9a:	4b05      	ldr	r3, [pc, #20]	; (800ebb0 <LoRaMacProcess+0x80>)
 800eb9c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	d101      	bne.n	800eba8 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800eba4:	f001 fb7c 	bl	80102a0 <OpenContinuousRxCWindow>
    }
}
 800eba8:	bf00      	nop
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	2000054c 	.word	0x2000054c
 800ebb4:	20000a54 	.word	0x20000a54

0800ebb8 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ebc0:	4817      	ldr	r0, [pc, #92]	; (800ec20 <OnTxDelayedTimerEvent+0x68>)
 800ebc2:	f00b fdcb 	bl	801a75c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ebc6:	4b17      	ldr	r3, [pc, #92]	; (800ec24 <OnTxDelayedTimerEvent+0x6c>)
 800ebc8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ebcc:	f023 0320 	bic.w	r3, r3, #32
 800ebd0:	4a14      	ldr	r2, [pc, #80]	; (800ec24 <OnTxDelayedTimerEvent+0x6c>)
 800ebd2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	f001 f8fc 	bl	800fdd4 <ScheduleTx>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d018      	beq.n	800ec14 <OnTxDelayedTimerEvent+0x5c>
 800ebe2:	2b0b      	cmp	r3, #11
 800ebe4:	d016      	beq.n	800ec14 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebe6:	4b10      	ldr	r3, [pc, #64]	; (800ec28 <OnTxDelayedTimerEvent+0x70>)
 800ebe8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ebec:	b2da      	uxtb	r2, r3
 800ebee:	4b0d      	ldr	r3, [pc, #52]	; (800ec24 <OnTxDelayedTimerEvent+0x6c>)
 800ebf0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ebf4:	4b0b      	ldr	r3, [pc, #44]	; (800ec24 <OnTxDelayedTimerEvent+0x6c>)
 800ebf6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800ebfa:	4b0a      	ldr	r3, [pc, #40]	; (800ec24 <OnTxDelayedTimerEvent+0x6c>)
 800ebfc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ec00:	4b08      	ldr	r3, [pc, #32]	; (800ec24 <OnTxDelayedTimerEvent+0x6c>)
 800ec02:	2209      	movs	r2, #9
 800ec04:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ec08:	2009      	movs	r0, #9
 800ec0a:	f003 ffdf 	bl	8012bcc <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ec0e:	f001 fef9 	bl	8010a04 <StopRetransmission>
            break;
 800ec12:	e000      	b.n	800ec16 <OnTxDelayedTimerEvent+0x5e>
            break;
 800ec14:	bf00      	nop
        }
    }
}
 800ec16:	bf00      	nop
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	200008b4 	.word	0x200008b4
 800ec24:	2000054c 	.word	0x2000054c
 800ec28:	20000a54 	.word	0x20000a54

0800ec2c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ec34:	4b14      	ldr	r3, [pc, #80]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec36:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec3a:	4b13      	ldr	r3, [pc, #76]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec3c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ec40:	4b12      	ldr	r3, [pc, #72]	; (800ec8c <OnRxWindow1TimerEvent+0x60>)
 800ec42:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec46:	b25a      	sxtb	r2, r3
 800ec48:	4b0f      	ldr	r3, [pc, #60]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec4a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec4e:	4b0f      	ldr	r3, [pc, #60]	; (800ec8c <OnRxWindow1TimerEvent+0x60>)
 800ec50:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec54:	4b0c      	ldr	r3, [pc, #48]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec56:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec5a:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <OnRxWindow1TimerEvent+0x60>)
 800ec5c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec60:	4b09      	ldr	r3, [pc, #36]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec62:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ec66:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ec6e:	4b06      	ldr	r3, [pc, #24]	; (800ec88 <OnRxWindow1TimerEvent+0x5c>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ec76:	4906      	ldr	r1, [pc, #24]	; (800ec90 <OnRxWindow1TimerEvent+0x64>)
 800ec78:	4806      	ldr	r0, [pc, #24]	; (800ec94 <OnRxWindow1TimerEvent+0x68>)
 800ec7a:	f001 fae3 	bl	8010244 <RxWindowSetup>
}
 800ec7e:	bf00      	nop
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	2000054c 	.word	0x2000054c
 800ec8c:	20000a54 	.word	0x20000a54
 800ec90:	20000904 	.word	0x20000904
 800ec94:	200008cc 	.word	0x200008cc

0800ec98 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800eca0:	4b16      	ldr	r3, [pc, #88]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800eca2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d023      	beq.n	800ecf2 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ecaa:	4b14      	ldr	r3, [pc, #80]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ecac:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ecb0:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ecb2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ecb6:	4b12      	ldr	r3, [pc, #72]	; (800ed00 <OnRxWindow2TimerEvent+0x68>)
 800ecb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecba:	4a10      	ldr	r2, [pc, #64]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ecbc:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ecc0:	4b0f      	ldr	r3, [pc, #60]	; (800ed00 <OnRxWindow2TimerEvent+0x68>)
 800ecc2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ecc6:	4b0d      	ldr	r3, [pc, #52]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ecc8:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eccc:	4b0c      	ldr	r3, [pc, #48]	; (800ed00 <OnRxWindow2TimerEvent+0x68>)
 800ecce:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ecd4:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ecd8:	4b08      	ldr	r3, [pc, #32]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ece0:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <OnRxWindow2TimerEvent+0x64>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ece8:	4906      	ldr	r1, [pc, #24]	; (800ed04 <OnRxWindow2TimerEvent+0x6c>)
 800ecea:	4807      	ldr	r0, [pc, #28]	; (800ed08 <OnRxWindow2TimerEvent+0x70>)
 800ecec:	f001 faaa 	bl	8010244 <RxWindowSetup>
 800ecf0:	e000      	b.n	800ecf4 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ecf2:	bf00      	nop
}
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	2000054c 	.word	0x2000054c
 800ed00:	20000a54 	.word	0x20000a54
 800ed04:	20000918 	.word	0x20000918
 800ed08:	200008e4 	.word	0x200008e4

0800ed0c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ed14:	4815      	ldr	r0, [pc, #84]	; (800ed6c <OnAckTimeoutTimerEvent+0x60>)
 800ed16:	f00b fd21 	bl	801a75c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ed1a:	4b15      	ldr	r3, [pc, #84]	; (800ed70 <OnAckTimeoutTimerEvent+0x64>)
 800ed1c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ed24:	4b12      	ldr	r3, [pc, #72]	; (800ed70 <OnAckTimeoutTimerEvent+0x64>)
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed2c:	4b11      	ldr	r3, [pc, #68]	; (800ed74 <OnAckTimeoutTimerEvent+0x68>)
 800ed2e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d106      	bne.n	800ed44 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed36:	4a0e      	ldr	r2, [pc, #56]	; (800ed70 <OnAckTimeoutTimerEvent+0x64>)
 800ed38:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed3c:	f043 0320 	orr.w	r3, r3, #32
 800ed40:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ed44:	4b0a      	ldr	r3, [pc, #40]	; (800ed70 <OnAckTimeoutTimerEvent+0x64>)
 800ed46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00a      	beq.n	800ed64 <OnAckTimeoutTimerEvent+0x58>
 800ed4e:	4b08      	ldr	r3, [pc, #32]	; (800ed70 <OnAckTimeoutTimerEvent+0x64>)
 800ed50:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed54:	691b      	ldr	r3, [r3, #16]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d004      	beq.n	800ed64 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ed5a:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <OnAckTimeoutTimerEvent+0x64>)
 800ed5c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	4798      	blx	r3
    }
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	20000944 	.word	0x20000944
 800ed70:	2000054c 	.word	0x2000054c
 800ed74:	20000a54 	.word	0x20000a54

0800ed78 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	60ba      	str	r2, [r7, #8]
 800ed80:	607b      	str	r3, [r7, #4]
 800ed82:	4603      	mov	r3, r0
 800ed84:	73fb      	strb	r3, [r7, #15]
 800ed86:	460b      	mov	r3, r1
 800ed88:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d005      	beq.n	800ed9c <GetFCntDown+0x24>
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <GetFCntDown+0x24>
 800ed96:	6a3b      	ldr	r3, [r7, #32]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed9c:	230a      	movs	r3, #10
 800ed9e:	e029      	b.n	800edf4 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d016      	beq.n	800edd4 <GetFCntDown+0x5c>
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d118      	bne.n	800eddc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800edaa:	79bb      	ldrb	r3, [r7, #6]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d10d      	bne.n	800edcc <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d002      	beq.n	800edbc <GetFCntDown+0x44>
 800edb6:	7bbb      	ldrb	r3, [r7, #14]
 800edb8:	2b03      	cmp	r3, #3
 800edba:	d103      	bne.n	800edc4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	2202      	movs	r2, #2
 800edc0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800edc2:	e00d      	b.n	800ede0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	2201      	movs	r2, #1
 800edc8:	701a      	strb	r2, [r3, #0]
            break;
 800edca:	e009      	b.n	800ede0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	2203      	movs	r2, #3
 800edd0:	701a      	strb	r2, [r3, #0]
            break;
 800edd2:	e005      	b.n	800ede0 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	2204      	movs	r2, #4
 800edd8:	701a      	strb	r2, [r3, #0]
            break;
 800edda:	e001      	b.n	800ede0 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800eddc:	2305      	movs	r3, #5
 800edde:	e009      	b.n	800edf4 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	7818      	ldrb	r0, [r3, #0]
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	89db      	ldrh	r3, [r3, #14]
 800ede8:	461a      	mov	r2, r3
 800edea:	8b39      	ldrh	r1, [r7, #24]
 800edec:	6a3b      	ldr	r3, [r7, #32]
 800edee:	f004 faf1 	bl	80133d4 <LoRaMacCryptoGetFCntDown>
 800edf2:	4603      	mov	r3, r0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800edfc:	b5b0      	push	{r4, r5, r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee06:	2303      	movs	r3, #3
 800ee08:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ee0a:	4b61      	ldr	r3, [pc, #388]	; (800ef90 <SwitchClass+0x194>)
 800ee0c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	f000 80a5 	beq.w	800ef60 <SwitchClass+0x164>
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	f300 80b4 	bgt.w	800ef84 <SwitchClass+0x188>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <SwitchClass+0x2c>
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	f000 808f 	beq.w	800ef44 <SwitchClass+0x148>
 800ee26:	e0ad      	b.n	800ef84 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ee28:	79fb      	ldrb	r3, [r7, #7]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d107      	bne.n	800ee3e <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ee2e:	4b58      	ldr	r3, [pc, #352]	; (800ef90 <SwitchClass+0x194>)
 800ee30:	4a57      	ldr	r2, [pc, #348]	; (800ef90 <SwitchClass+0x194>)
 800ee32:	336c      	adds	r3, #108	; 0x6c
 800ee34:	3264      	adds	r2, #100	; 0x64
 800ee36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee3a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ee3e:	79fb      	ldrb	r3, [r7, #7]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d10c      	bne.n	800ee5e <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f003 fa53 	bl	80122f2 <LoRaMacClassBSwitchClass>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d103      	bne.n	800ee5e <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee56:	4a4e      	ldr	r2, [pc, #312]	; (800ef90 <SwitchClass+0x194>)
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	f040 808a 	bne.w	800ef7a <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee66:	4a4a      	ldr	r2, [pc, #296]	; (800ef90 <SwitchClass+0x194>)
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ee6e:	4a49      	ldr	r2, [pc, #292]	; (800ef94 <SwitchClass+0x198>)
 800ee70:	4b48      	ldr	r3, [pc, #288]	; (800ef94 <SwitchClass+0x198>)
 800ee72:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ee76:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ee7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee7e:	682b      	ldr	r3, [r5, #0]
 800ee80:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee82:	4b44      	ldr	r3, [pc, #272]	; (800ef94 <SwitchClass+0x198>)
 800ee84:	2202      	movs	r2, #2
 800ee86:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73bb      	strb	r3, [r7, #14]
 800ee8e:	e049      	b.n	800ef24 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ee90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee94:	4a3e      	ldr	r2, [pc, #248]	; (800ef90 <SwitchClass+0x194>)
 800ee96:	212c      	movs	r1, #44	; 0x2c
 800ee98:	fb01 f303 	mul.w	r3, r1, r3
 800ee9c:	4413      	add	r3, r2
 800ee9e:	33d2      	adds	r3, #210	; 0xd2
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d038      	beq.n	800ef18 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800eea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeaa:	4a39      	ldr	r2, [pc, #228]	; (800ef90 <SwitchClass+0x194>)
 800eeac:	212c      	movs	r1, #44	; 0x2c
 800eeae:	fb01 f303 	mul.w	r3, r1, r3
 800eeb2:	4413      	add	r3, r2
 800eeb4:	33e8      	adds	r3, #232	; 0xe8
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a35      	ldr	r2, [pc, #212]	; (800ef90 <SwitchClass+0x194>)
 800eeba:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800eebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eec0:	4a33      	ldr	r2, [pc, #204]	; (800ef90 <SwitchClass+0x194>)
 800eec2:	212c      	movs	r1, #44	; 0x2c
 800eec4:	fb01 f303 	mul.w	r3, r1, r3
 800eec8:	4413      	add	r3, r2
 800eeca:	33ec      	adds	r3, #236	; 0xec
 800eecc:	f993 3000 	ldrsb.w	r3, [r3]
 800eed0:	b2da      	uxtb	r2, r3
 800eed2:	4b2f      	ldr	r3, [pc, #188]	; (800ef90 <SwitchClass+0x194>)
 800eed4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eed8:	4b2e      	ldr	r3, [pc, #184]	; (800ef94 <SwitchClass+0x198>)
 800eeda:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eede:	4b2d      	ldr	r3, [pc, #180]	; (800ef94 <SwitchClass+0x198>)
 800eee0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eee4:	4b2a      	ldr	r3, [pc, #168]	; (800ef90 <SwitchClass+0x194>)
 800eee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee8:	4a2a      	ldr	r2, [pc, #168]	; (800ef94 <SwitchClass+0x198>)
 800eeea:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eeee:	4b28      	ldr	r3, [pc, #160]	; (800ef90 <SwitchClass+0x194>)
 800eef0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eef4:	4b27      	ldr	r3, [pc, #156]	; (800ef94 <SwitchClass+0x198>)
 800eef6:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800eefa:	4b25      	ldr	r3, [pc, #148]	; (800ef90 <SwitchClass+0x194>)
 800eefc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ef00:	4b24      	ldr	r3, [pc, #144]	; (800ef94 <SwitchClass+0x198>)
 800ef02:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ef06:	4b23      	ldr	r3, [pc, #140]	; (800ef94 <SwitchClass+0x198>)
 800ef08:	2203      	movs	r2, #3
 800ef0a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ef0e:	4b21      	ldr	r3, [pc, #132]	; (800ef94 <SwitchClass+0x198>)
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ef16:	e009      	b.n	800ef2c <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	3301      	adds	r3, #1
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	73bb      	strb	r3, [r7, #14]
 800ef24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	ddb1      	ble.n	800ee90 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ef2c:	4b19      	ldr	r3, [pc, #100]	; (800ef94 <SwitchClass+0x198>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ef34:	4b18      	ldr	r3, [pc, #96]	; (800ef98 <SwitchClass+0x19c>)
 800ef36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef38:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ef3a:	f001 f9b1 	bl	80102a0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef42:	e01a      	b.n	800ef7a <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ef44:	79fb      	ldrb	r3, [r7, #7]
 800ef46:	4618      	mov	r0, r3
 800ef48:	f003 f9d3 	bl	80122f2 <LoRaMacClassBSwitchClass>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ef50:	7bfb      	ldrb	r3, [r7, #15]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d113      	bne.n	800ef7e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef56:	4a0e      	ldr	r2, [pc, #56]	; (800ef90 <SwitchClass+0x194>)
 800ef58:	79fb      	ldrb	r3, [r7, #7]
 800ef5a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ef5e:	e00e      	b.n	800ef7e <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ef60:	79fb      	ldrb	r3, [r7, #7]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d10d      	bne.n	800ef82 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef66:	4a0a      	ldr	r2, [pc, #40]	; (800ef90 <SwitchClass+0x194>)
 800ef68:	79fb      	ldrb	r3, [r7, #7]
 800ef6a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <SwitchClass+0x19c>)
 800ef70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef72:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef78:	e003      	b.n	800ef82 <SwitchClass+0x186>
            break;
 800ef7a:	bf00      	nop
 800ef7c:	e002      	b.n	800ef84 <SwitchClass+0x188>
            break;
 800ef7e:	bf00      	nop
 800ef80:	e000      	b.n	800ef84 <SwitchClass+0x188>
            break;
 800ef82:	bf00      	nop
        }
    }

    return status;
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20000a54 	.word	0x20000a54
 800ef94:	2000054c 	.word	0x2000054c
 800ef98:	0801bf10 	.word	0x0801bf10

0800ef9c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b086      	sub	sp, #24
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800efa6:	4b10      	ldr	r3, [pc, #64]	; (800efe8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800efac:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800efb2:	230d      	movs	r3, #13
 800efb4:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800efb6:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800efc0:	230e      	movs	r3, #14
 800efc2:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efc4:	4b08      	ldr	r3, [pc, #32]	; (800efe8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efca:	f107 0210 	add.w	r2, r7, #16
 800efce:	4611      	mov	r1, r2
 800efd0:	4618      	mov	r0, r3
 800efd2:	f005 f881 	bl	80140d8 <RegionGetPhyParam>
 800efd6:	4603      	mov	r3, r0
 800efd8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	b2db      	uxtb	r3, r3
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20000a54 	.word	0x20000a54

0800efec <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	4603      	mov	r3, r0
 800eff4:	71fb      	strb	r3, [r7, #7]
 800eff6:	460b      	mov	r3, r1
 800eff8:	71bb      	strb	r3, [r7, #6]
 800effa:	4613      	mov	r3, r2
 800effc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f006:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7ff ffc6 	bl	800ef9c <GetMaxAppPayloadWithoutFOptsLength>
 800f010:	4603      	mov	r3, r0
 800f012:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f014:	79fb      	ldrb	r3, [r7, #7]
 800f016:	b29a      	uxth	r2, r3
 800f018:	797b      	ldrb	r3, [r7, #5]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4413      	add	r3, r2
 800f01e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f020:	89ba      	ldrh	r2, [r7, #12]
 800f022:	89fb      	ldrh	r3, [r7, #14]
 800f024:	429a      	cmp	r2, r3
 800f026:	d804      	bhi.n	800f032 <ValidatePayloadLength+0x46>
 800f028:	89bb      	ldrh	r3, [r7, #12]
 800f02a:	2bff      	cmp	r3, #255	; 0xff
 800f02c:	d801      	bhi.n	800f032 <ValidatePayloadLength+0x46>
    {
        return true;
 800f02e:	2301      	movs	r3, #1
 800f030:	e000      	b.n	800f034 <ValidatePayloadLength+0x48>
    }
    return false;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800f03c:	b480      	push	{r7}
 800f03e:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800f040:	4a05      	ldr	r2, [pc, #20]	; (800f058 <SetMlmeScheduleUplinkIndication+0x1c>)
 800f042:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800f046:	f043 0310 	orr.w	r3, r3, #16
 800f04a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800f04e:	bf00      	nop
 800f050:	46bd      	mov	sp, r7
 800f052:	bc80      	pop	{r7}
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	2000054c 	.word	0x2000054c

0800f05c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f05c:	b590      	push	{r4, r7, lr}
 800f05e:	b0a5      	sub	sp, #148	; 0x94
 800f060:	af02      	add	r7, sp, #8
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	4608      	mov	r0, r1
 800f066:	4611      	mov	r1, r2
 800f068:	461a      	mov	r2, r3
 800f06a:	4603      	mov	r3, r0
 800f06c:	70fb      	strb	r3, [r7, #3]
 800f06e:	460b      	mov	r3, r1
 800f070:	70bb      	strb	r3, [r7, #2]
 800f072:	4613      	mov	r3, r2
 800f074:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f07c:	2300      	movs	r3, #0
 800f07e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f082:	2300      	movs	r3, #0
 800f084:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800f088:	f000 bc73 	b.w	800f972 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f08c:	78fb      	ldrb	r3, [r7, #3]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	4413      	add	r3, r2
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	4618      	mov	r0, r3
 800f096:	f003 fbf5 	bl	8012884 <LoRaMacCommandsGetCmdSize>
 800f09a:	4603      	mov	r3, r0
 800f09c:	461a      	mov	r2, r3
 800f09e:	78fb      	ldrb	r3, [r7, #3]
 800f0a0:	441a      	add	r2, r3
 800f0a2:	78bb      	ldrb	r3, [r7, #2]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	f300 846a 	bgt.w	800f97e <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f0aa:	78fb      	ldrb	r3, [r7, #3]
 800f0ac:	1c5a      	adds	r2, r3, #1
 800f0ae:	70fa      	strb	r2, [r7, #3]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	3b02      	subs	r3, #2
 800f0ba:	2b11      	cmp	r3, #17
 800f0bc:	f200 8461 	bhi.w	800f982 <ProcessMacCommands+0x926>
 800f0c0:	a201      	add	r2, pc, #4	; (adr r2, 800f0c8 <ProcessMacCommands+0x6c>)
 800f0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c6:	bf00      	nop
 800f0c8:	0800f111 	.word	0x0800f111
 800f0cc:	0800f153 	.word	0x0800f153
 800f0d0:	0800f26f 	.word	0x0800f26f
 800f0d4:	0800f2ad 	.word	0x0800f2ad
 800f0d8:	0800f39d 	.word	0x0800f39d
 800f0dc:	0800f3f9 	.word	0x0800f3f9
 800f0e0:	0800f4b5 	.word	0x0800f4b5
 800f0e4:	0800f50f 	.word	0x0800f50f
 800f0e8:	0800f5f3 	.word	0x0800f5f3
 800f0ec:	0800f983 	.word	0x0800f983
 800f0f0:	0800f983 	.word	0x0800f983
 800f0f4:	0800f69d 	.word	0x0800f69d
 800f0f8:	0800f983 	.word	0x0800f983
 800f0fc:	0800f983 	.word	0x0800f983
 800f100:	0800f7b3 	.word	0x0800f7b3
 800f104:	0800f7e7 	.word	0x0800f7e7
 800f108:	0800f877 	.word	0x0800f877
 800f10c:	0800f8ed 	.word	0x0800f8ed
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f110:	2004      	movs	r0, #4
 800f112:	f003 fd8f 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 842a 	beq.w	800f972 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f11e:	2104      	movs	r1, #4
 800f120:	2000      	movs	r0, #0
 800f122:	f003 fcfb 	bl	8012b1c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f126:	78fb      	ldrb	r3, [r7, #3]
 800f128:	1c5a      	adds	r2, r3, #1
 800f12a:	70fa      	strb	r2, [r7, #3]
 800f12c:	461a      	mov	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4413      	add	r3, r2
 800f132:	781a      	ldrb	r2, [r3, #0]
 800f134:	4bad      	ldr	r3, [pc, #692]	; (800f3ec <ProcessMacCommands+0x390>)
 800f136:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	70fa      	strb	r2, [r7, #3]
 800f140:	461a      	mov	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4413      	add	r3, r2
 800f146:	781a      	ldrb	r2, [r3, #0]
 800f148:	4ba8      	ldr	r3, [pc, #672]	; (800f3ec <ProcessMacCommands+0x390>)
 800f14a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800f14e:	f000 bc10 	b.w	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f152:	2300      	movs	r3, #0
 800f154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f158:	2300      	movs	r3, #0
 800f15a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800f16a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f16e:	f083 0301 	eor.w	r3, r3, #1
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d078      	beq.n	800f26a <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800f178:	2301      	movs	r3, #1
 800f17a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f17e:	78fb      	ldrb	r3, [r7, #3]
 800f180:	3b01      	subs	r3, #1
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	4413      	add	r3, r2
 800f186:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f188:	78ba      	ldrb	r2, [r7, #2]
 800f18a:	78fb      	ldrb	r3, [r7, #3]
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	3301      	adds	r3, #1
 800f192:	b2db      	uxtb	r3, r3
 800f194:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f198:	4b95      	ldr	r3, [pc, #596]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f19a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f19e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f1a2:	4b93      	ldr	r3, [pc, #588]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f1a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f1a8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f1ac:	4b90      	ldr	r3, [pc, #576]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f1ae:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f1b2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f1b6:	4b8e      	ldr	r3, [pc, #568]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f1b8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f1bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f1c0:	4b8b      	ldr	r3, [pc, #556]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f1c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f1c6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f1ca:	4b89      	ldr	r3, [pc, #548]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f1cc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f1d0:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f1d2:	4b87      	ldr	r3, [pc, #540]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f1d4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f1d8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f1dc:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f1e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f1e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	4623      	mov	r3, r4
 800f1f2:	f005 f82f 	bl	8014254 <RegionLinkAdrReq>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f1fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f200:	f003 0307 	and.w	r3, r3, #7
 800f204:	2b07      	cmp	r3, #7
 800f206:	d10e      	bne.n	800f226 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f208:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f20c:	4b78      	ldr	r3, [pc, #480]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f20e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f212:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f216:	4b76      	ldr	r3, [pc, #472]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f21c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f220:	4b73      	ldr	r3, [pc, #460]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f222:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f226:	2300      	movs	r3, #0
 800f228:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f22c:	e00b      	b.n	800f246 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f22e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f232:	2201      	movs	r2, #1
 800f234:	4619      	mov	r1, r3
 800f236:	2003      	movs	r0, #3
 800f238:	f003 f9d4 	bl	80125e4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f23c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f240:	3301      	adds	r3, #1
 800f242:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f246:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f24a:	4a6a      	ldr	r2, [pc, #424]	; (800f3f4 <ProcessMacCommands+0x398>)
 800f24c:	fba2 2303 	umull	r2, r3, r2, r3
 800f250:	089b      	lsrs	r3, r3, #2
 800f252:	b2db      	uxtb	r3, r3
 800f254:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f258:	429a      	cmp	r2, r3
 800f25a:	d3e8      	bcc.n	800f22e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f25c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f260:	78fb      	ldrb	r3, [r7, #3]
 800f262:	4413      	add	r3, r2
 800f264:	b2db      	uxtb	r3, r3
 800f266:	3b01      	subs	r3, #1
 800f268:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800f26a:	bf00      	nop
 800f26c:	e381      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f26e:	78fb      	ldrb	r3, [r7, #3]
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	70fa      	strb	r2, [r7, #3]
 800f274:	461a      	mov	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4413      	add	r3, r2
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	f003 030f 	and.w	r3, r3, #15
 800f280:	b2da      	uxtb	r2, r3
 800f282:	4b5b      	ldr	r3, [pc, #364]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f284:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f288:	4b59      	ldr	r3, [pc, #356]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f28a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f28e:	461a      	mov	r2, r3
 800f290:	2301      	movs	r3, #1
 800f292:	4093      	lsls	r3, r2
 800f294:	b29a      	uxth	r2, r3
 800f296:	4b56      	ldr	r3, [pc, #344]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f298:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f29c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	2004      	movs	r0, #4
 800f2a6:	f003 f99d 	bl	80125e4 <LoRaMacCommandsAddCmd>
                break;
 800f2aa:	e362      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f2ac:	2307      	movs	r3, #7
 800f2ae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f2b2:	78fb      	ldrb	r3, [r7, #3]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	091b      	lsrs	r3, r3, #4
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	b25b      	sxtb	r3, r3
 800f2c0:	f003 0307 	and.w	r3, r3, #7
 800f2c4:	b25b      	sxtb	r3, r3
 800f2c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f2ca:	78fb      	ldrb	r3, [r7, #3]
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	b25b      	sxtb	r3, r3
 800f2d4:	f003 030f 	and.w	r3, r3, #15
 800f2d8:	b25b      	sxtb	r3, r3
 800f2da:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f2de:	78fb      	ldrb	r3, [r7, #3]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f2e4:	78fb      	ldrb	r3, [r7, #3]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	70fa      	strb	r2, [r7, #3]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2f4:	78fb      	ldrb	r3, [r7, #3]
 800f2f6:	1c5a      	adds	r2, r3, #1
 800f2f8:	70fa      	strb	r2, [r7, #3]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4413      	add	r3, r2
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	021a      	lsls	r2, r3, #8
 800f304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f306:	4313      	orrs	r3, r2
 800f308:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f30a:	78fb      	ldrb	r3, [r7, #3]
 800f30c:	1c5a      	adds	r2, r3, #1
 800f30e:	70fa      	strb	r2, [r7, #3]
 800f310:	461a      	mov	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4413      	add	r3, r2
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	041a      	lsls	r2, r3, #16
 800f31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f31c:	4313      	orrs	r3, r2
 800f31e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f322:	2264      	movs	r2, #100	; 0x64
 800f324:	fb02 f303 	mul.w	r3, r2, r3
 800f328:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f32a:	4b31      	ldr	r3, [pc, #196]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f32c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f330:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f334:	4611      	mov	r1, r2
 800f336:	4618      	mov	r0, r3
 800f338:	f004 ffa6 	bl	8014288 <RegionRxParamSetupReq>
 800f33c:	4603      	mov	r3, r0
 800f33e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f342:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f346:	f003 0307 	and.w	r3, r3, #7
 800f34a:	2b07      	cmp	r3, #7
 800f34c:	d117      	bne.n	800f37e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f34e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f352:	b2da      	uxtb	r2, r3
 800f354:	4b26      	ldr	r3, [pc, #152]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f356:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f35a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	4b23      	ldr	r3, [pc, #140]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f362:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f368:	4a21      	ldr	r2, [pc, #132]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f36a:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f36e:	4a20      	ldr	r2, [pc, #128]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f370:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f372:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f376:	b2da      	uxtb	r2, r3
 800f378:	4b1d      	ldr	r3, [pc, #116]	; (800f3f0 <ProcessMacCommands+0x394>)
 800f37a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f37e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f382:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f386:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f38a:	2201      	movs	r2, #1
 800f38c:	4619      	mov	r1, r3
 800f38e:	2005      	movs	r0, #5
 800f390:	f003 f928 	bl	80125e4 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f394:	f7ff fe52 	bl	800f03c <SetMlmeScheduleUplinkIndication>
                break;
 800f398:	bf00      	nop
 800f39a:	e2ea      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f39c:	23ff      	movs	r3, #255	; 0xff
 800f39e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f3a2:	4b12      	ldr	r3, [pc, #72]	; (800f3ec <ProcessMacCommands+0x390>)
 800f3a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d00d      	beq.n	800f3c8 <ProcessMacCommands+0x36c>
 800f3ac:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <ProcessMacCommands+0x390>)
 800f3ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d007      	beq.n	800f3c8 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f3b8:	4b0c      	ldr	r3, [pc, #48]	; (800f3ec <ProcessMacCommands+0x390>)
 800f3ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4798      	blx	r3
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f3c8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f3cc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f3d0:	787b      	ldrb	r3, [r7, #1]
 800f3d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f3dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3e0:	2202      	movs	r2, #2
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	2006      	movs	r0, #6
 800f3e6:	f003 f8fd 	bl	80125e4 <LoRaMacCommandsAddCmd>
                break;
 800f3ea:	e2c2      	b.n	800f972 <ProcessMacCommands+0x916>
 800f3ec:	2000054c 	.word	0x2000054c
 800f3f0:	20000a54 	.word	0x20000a54
 800f3f4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	70fa      	strb	r2, [r7, #3]
 800f404:	461a      	mov	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4413      	add	r3, r2
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	b25b      	sxtb	r3, r3
 800f40e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f412:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f416:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	70fa      	strb	r2, [r7, #3]
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4413      	add	r3, r2
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f428:	78fb      	ldrb	r3, [r7, #3]
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	70fa      	strb	r2, [r7, #3]
 800f42e:	461a      	mov	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4413      	add	r3, r2
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	021a      	lsls	r2, r3, #8
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	4313      	orrs	r3, r2
 800f43c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	70fa      	strb	r2, [r7, #3]
 800f444:	461a      	mov	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	041a      	lsls	r2, r3, #16
 800f44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f450:	4313      	orrs	r3, r2
 800f452:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	2264      	movs	r2, #100	; 0x64
 800f458:	fb02 f303 	mul.w	r3, r2, r3
 800f45c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f45e:	2300      	movs	r3, #0
 800f460:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f462:	78fb      	ldrb	r3, [r7, #3]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	70fa      	strb	r2, [r7, #3]
 800f468:	461a      	mov	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4413      	add	r3, r2
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	b25b      	sxtb	r3, r3
 800f472:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f476:	4b87      	ldr	r3, [pc, #540]	; (800f694 <ProcessMacCommands+0x638>)
 800f478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f47c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f480:	4611      	mov	r1, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f004 ff13 	bl	80142ae <RegionNewChannelReq>
 800f488:	4603      	mov	r3, r0
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f490:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f494:	b25b      	sxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	db0a      	blt.n	800f4b0 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f49a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f49e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f4a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	2007      	movs	r0, #7
 800f4ac:	f003 f89a 	bl	80125e4 <LoRaMacCommandsAddCmd>
                }
                break;
 800f4b0:	bf00      	nop
 800f4b2:	e25e      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f4b4:	78fb      	ldrb	r3, [r7, #3]
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	70fa      	strb	r2, [r7, #3]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	f003 030f 	and.w	r3, r3, #15
 800f4c6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f4ca:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d104      	bne.n	800f4dc <ProcessMacCommands+0x480>
                {
                    delay++;
 800f4d2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f4dc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f4e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4e4:	fb02 f303 	mul.w	r3, r2, r3
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b6a      	ldr	r3, [pc, #424]	; (800f694 <ProcessMacCommands+0x638>)
 800f4ec:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4ee:	4b69      	ldr	r3, [pc, #420]	; (800f694 <ProcessMacCommands+0x638>)
 800f4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f4f6:	4a67      	ldr	r2, [pc, #412]	; (800f694 <ProcessMacCommands+0x638>)
 800f4f8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f4fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4fe:	2200      	movs	r2, #0
 800f500:	4619      	mov	r1, r3
 800f502:	2008      	movs	r0, #8
 800f504:	f003 f86e 	bl	80125e4 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f508:	f7ff fd98 	bl	800f03c <SetMlmeScheduleUplinkIndication>
                break;
 800f50c:	e231      	b.n	800f972 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f50e:	78fb      	ldrb	r3, [r7, #3]
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	70fa      	strb	r2, [r7, #3]
 800f514:	461a      	mov	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4413      	add	r3, r2
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f520:	2300      	movs	r3, #0
 800f522:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f52c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f530:	f003 0320 	and.w	r3, r3, #32
 800f534:	2b00      	cmp	r3, #0
 800f536:	d002      	beq.n	800f53e <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f538:	2301      	movs	r3, #1
 800f53a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f53e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f542:	f003 0310 	and.w	r3, r3, #16
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f54a:	2301      	movs	r3, #1
 800f54c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f550:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f554:	f003 030f 	and.w	r3, r3, #15
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f55e:	4b4d      	ldr	r3, [pc, #308]	; (800f694 <ProcessMacCommands+0x638>)
 800f560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f564:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f568:	4611      	mov	r1, r2
 800f56a:	4618      	mov	r0, r3
 800f56c:	f004 feb2 	bl	80142d4 <RegionTxParamSetupReq>
 800f570:	4603      	mov	r3, r0
 800f572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f576:	d03a      	beq.n	800f5ee <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f578:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f57c:	4b45      	ldr	r3, [pc, #276]	; (800f694 <ProcessMacCommands+0x638>)
 800f57e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f582:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f586:	4b43      	ldr	r3, [pc, #268]	; (800f694 <ProcessMacCommands+0x638>)
 800f588:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f58c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f590:	461a      	mov	r2, r3
 800f592:	4b41      	ldr	r3, [pc, #260]	; (800f698 <ProcessMacCommands+0x63c>)
 800f594:	5c9b      	ldrb	r3, [r3, r2]
 800f596:	4618      	mov	r0, r3
 800f598:	f7f1 f918 	bl	80007cc <__aeabi_ui2f>
 800f59c:	4603      	mov	r3, r0
 800f59e:	4a3d      	ldr	r2, [pc, #244]	; (800f694 <ProcessMacCommands+0x638>)
 800f5a0:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f5a8:	4b3a      	ldr	r3, [pc, #232]	; (800f694 <ProcessMacCommands+0x638>)
 800f5aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f5ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f5b2:	4b38      	ldr	r3, [pc, #224]	; (800f694 <ProcessMacCommands+0x638>)
 800f5b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f5bc:	4611      	mov	r1, r2
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f004 fd8a 	bl	80140d8 <RegionGetPhyParam>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	b25a      	sxtb	r2, r3
 800f5cc:	4b31      	ldr	r3, [pc, #196]	; (800f694 <ProcessMacCommands+0x638>)
 800f5ce:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	bfb8      	it	lt
 800f5d6:	4613      	movlt	r3, r2
 800f5d8:	b25a      	sxtb	r2, r3
 800f5da:	4b2e      	ldr	r3, [pc, #184]	; (800f694 <ProcessMacCommands+0x638>)
 800f5dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	2009      	movs	r0, #9
 800f5ea:	f002 fffb 	bl	80125e4 <LoRaMacCommandsAddCmd>
                }
                break;
 800f5ee:	bf00      	nop
 800f5f0:	e1bf      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f5f8:	78fb      	ldrb	r3, [r7, #3]
 800f5fa:	1c5a      	adds	r2, r3, #1
 800f5fc:	70fa      	strb	r2, [r7, #3]
 800f5fe:	461a      	mov	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4413      	add	r3, r2
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f60a:	78fb      	ldrb	r3, [r7, #3]
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	70fa      	strb	r2, [r7, #3]
 800f610:	461a      	mov	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4413      	add	r3, r2
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f61a:	78fb      	ldrb	r3, [r7, #3]
 800f61c:	1c5a      	adds	r2, r3, #1
 800f61e:	70fa      	strb	r2, [r7, #3]
 800f620:	461a      	mov	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4413      	add	r3, r2
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	021a      	lsls	r2, r3, #8
 800f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62c:	4313      	orrs	r3, r2
 800f62e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f630:	78fb      	ldrb	r3, [r7, #3]
 800f632:	1c5a      	adds	r2, r3, #1
 800f634:	70fa      	strb	r2, [r7, #3]
 800f636:	461a      	mov	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4413      	add	r3, r2
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	041a      	lsls	r2, r3, #16
 800f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f642:	4313      	orrs	r3, r2
 800f644:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	2264      	movs	r2, #100	; 0x64
 800f64a:	fb02 f303 	mul.w	r3, r2, r3
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f650:	4b10      	ldr	r3, [pc, #64]	; (800f694 <ProcessMacCommands+0x638>)
 800f652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f656:	f107 0220 	add.w	r2, r7, #32
 800f65a:	4611      	mov	r1, r2
 800f65c:	4618      	mov	r0, r3
 800f65e:	f004 fe4c 	bl	80142fa <RegionDlChannelReq>
 800f662:	4603      	mov	r3, r0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f66a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f66e:	b25b      	sxtb	r3, r3
 800f670:	2b00      	cmp	r3, #0
 800f672:	db0c      	blt.n	800f68e <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f674:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f678:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f67c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f680:	2201      	movs	r2, #1
 800f682:	4619      	mov	r1, r3
 800f684:	200a      	movs	r0, #10
 800f686:	f002 ffad 	bl	80125e4 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f68a:	f7ff fcd7 	bl	800f03c <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f68e:	bf00      	nop
 800f690:	e16f      	b.n	800f972 <ProcessMacCommands+0x916>
 800f692:	bf00      	nop
 800f694:	20000a54 	.word	0x20000a54
 800f698:	0801bec8 	.word	0x0801bec8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f69c:	200a      	movs	r0, #10
 800f69e:	f003 fac9 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f000 8164 	beq.w	800f972 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f6aa:	210a      	movs	r1, #10
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	f003 fa35 	bl	8012b1c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f6b2:	f107 0318 	add.w	r3, r7, #24
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f6bc:	f107 0310 	add.w	r3, r7, #16
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f6c6:	f107 0308 	add.w	r3, r7, #8
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	70fa      	strb	r2, [r7, #3]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4413      	add	r3, r2
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	1c5a      	adds	r2, r3, #1
 800f6e4:	70fa      	strb	r2, [r7, #3]
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	021a      	lsls	r2, r3, #8
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f6f6:	78fb      	ldrb	r3, [r7, #3]
 800f6f8:	1c5a      	adds	r2, r3, #1
 800f6fa:	70fa      	strb	r2, [r7, #3]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4413      	add	r3, r2
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	041a      	lsls	r2, r3, #16
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	4313      	orrs	r3, r2
 800f70a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f70c:	78fb      	ldrb	r3, [r7, #3]
 800f70e:	1c5a      	adds	r2, r3, #1
 800f710:	70fa      	strb	r2, [r7, #3]
 800f712:	461a      	mov	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4413      	add	r3, r2
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	061a      	lsls	r2, r3, #24
 800f71c:	69bb      	ldr	r3, [r7, #24]
 800f71e:	4313      	orrs	r3, r2
 800f720:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f722:	78fb      	ldrb	r3, [r7, #3]
 800f724:	1c5a      	adds	r2, r3, #1
 800f726:	70fa      	strb	r2, [r7, #3]
 800f728:	461a      	mov	r2, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4413      	add	r3, r2
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	b21b      	sxth	r3, r3
 800f732:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f734:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f738:	461a      	mov	r2, r3
 800f73a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f73e:	fb03 f302 	mul.w	r3, r3, r2
 800f742:	121b      	asrs	r3, r3, #8
 800f744:	b21b      	sxth	r3, r3
 800f746:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f748:	f107 0310 	add.w	r3, r7, #16
 800f74c:	f107 0218 	add.w	r2, r7, #24
 800f750:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f754:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f758:	693a      	ldr	r2, [r7, #16]
 800f75a:	4b8c      	ldr	r3, [pc, #560]	; (800f98c <ProcessMacCommands+0x930>)
 800f75c:	4413      	add	r3, r2
 800f75e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f760:	f107 0308 	add.w	r3, r7, #8
 800f764:	4618      	mov	r0, r3
 800f766:	f00a faa5 	bl	8019cb4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f76a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f76e:	4b88      	ldr	r3, [pc, #544]	; (800f990 <ProcessMacCommands+0x934>)
 800f770:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f774:	9200      	str	r2, [sp, #0]
 800f776:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f77a:	f107 0210 	add.w	r2, r7, #16
 800f77e:	ca06      	ldmia	r2, {r1, r2}
 800f780:	f00a fa31 	bl	8019be6 <SysTimeSub>
 800f784:	f107 0010 	add.w	r0, r7, #16
 800f788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f78e:	f107 0208 	add.w	r2, r7, #8
 800f792:	ca06      	ldmia	r2, {r1, r2}
 800f794:	f00a f9ee 	bl	8019b74 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f798:	f107 0310 	add.w	r3, r7, #16
 800f79c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7a0:	f00a fa5a 	bl	8019c58 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f7a4:	f002 fde3 	bl	801236e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f7a8:	4b79      	ldr	r3, [pc, #484]	; (800f990 <ProcessMacCommands+0x934>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f7b0:	e0df      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f7b2:	200d      	movs	r0, #13
 800f7b4:	f003 fa3e 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80d9 	beq.w	800f972 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f7c0:	210d      	movs	r1, #13
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	f003 f9aa 	bl	8012b1c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f7c8:	4b71      	ldr	r3, [pc, #452]	; (800f990 <ProcessMacCommands+0x934>)
 800f7ca:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7ce:	2b04      	cmp	r3, #4
 800f7d0:	f000 80cf 	beq.w	800f972 <ProcessMacCommands+0x916>
 800f7d4:	4b6e      	ldr	r3, [pc, #440]	; (800f990 <ProcessMacCommands+0x934>)
 800f7d6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f7da:	2b05      	cmp	r3, #5
 800f7dc:	f000 80c9 	beq.w	800f972 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f7e0:	f002 fda6 	bl	8012330 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f7e4:	e0c5      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f7f0:	78fb      	ldrb	r3, [r7, #3]
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	70fa      	strb	r2, [r7, #3]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4413      	add	r3, r2
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f800:	78fb      	ldrb	r3, [r7, #3]
 800f802:	1c5a      	adds	r2, r3, #1
 800f804:	70fa      	strb	r2, [r7, #3]
 800f806:	461a      	mov	r2, r3
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4413      	add	r3, r2
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	021b      	lsls	r3, r3, #8
 800f810:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f812:	4313      	orrs	r3, r2
 800f814:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f816:	78fb      	ldrb	r3, [r7, #3]
 800f818:	1c5a      	adds	r2, r3, #1
 800f81a:	70fa      	strb	r2, [r7, #3]
 800f81c:	461a      	mov	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4413      	add	r3, r2
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	041b      	lsls	r3, r3, #16
 800f826:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f828:	4313      	orrs	r3, r2
 800f82a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f82c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f82e:	2264      	movs	r2, #100	; 0x64
 800f830:	fb02 f303 	mul.w	r3, r2, r3
 800f834:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f836:	78fb      	ldrb	r3, [r7, #3]
 800f838:	1c5a      	adds	r2, r3, #1
 800f83a:	70fa      	strb	r2, [r7, #3]
 800f83c:	461a      	mov	r2, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4413      	add	r3, r2
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	f003 030f 	and.w	r3, r3, #15
 800f848:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f84c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f850:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f852:	4618      	mov	r0, r3
 800f854:	f002 fd72 	bl	801233c <LoRaMacClassBPingSlotChannelReq>
 800f858:	4603      	mov	r3, r0
 800f85a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f85e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f862:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f866:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f86a:	2201      	movs	r2, #1
 800f86c:	4619      	mov	r1, r3
 800f86e:	2011      	movs	r0, #17
 800f870:	f002 feb8 	bl	80125e4 <LoRaMacCommandsAddCmd>
                break;
 800f874:	e07d      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f876:	200e      	movs	r0, #14
 800f878:	f003 f9dc 	bl	8012c34 <LoRaMacConfirmQueueIsCmdActive>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d077      	beq.n	800f972 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f882:	210e      	movs	r1, #14
 800f884:	2000      	movs	r0, #0
 800f886:	f003 f949 	bl	8012b1c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f896:	78fb      	ldrb	r3, [r7, #3]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	70fa      	strb	r2, [r7, #3]
 800f89c:	461a      	mov	r2, r3
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f8a8:	78fb      	ldrb	r3, [r7, #3]
 800f8aa:	1c5a      	adds	r2, r3, #1
 800f8ac:	70fa      	strb	r2, [r7, #3]
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	021b      	lsls	r3, r3, #8
 800f8b8:	b21a      	sxth	r2, r3
 800f8ba:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	b21b      	sxth	r3, r3
 800f8c2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f8c6:	78fb      	ldrb	r3, [r7, #3]
 800f8c8:	1c5a      	adds	r2, r3, #1
 800f8ca:	70fa      	strb	r2, [r7, #3]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f8d8:	4b2e      	ldr	r3, [pc, #184]	; (800f994 <ProcessMacCommands+0x938>)
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f8e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f002 fd35 	bl	8012354 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f8ea:	e042      	b.n	800f972 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f8f2:	78fb      	ldrb	r3, [r7, #3]
 800f8f4:	1c5a      	adds	r2, r3, #1
 800f8f6:	70fa      	strb	r2, [r7, #3]
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f904:	78fb      	ldrb	r3, [r7, #3]
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	70fa      	strb	r2, [r7, #3]
 800f90a:	461a      	mov	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4413      	add	r3, r2
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	021b      	lsls	r3, r3, #8
 800f914:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f918:	4313      	orrs	r3, r2
 800f91a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f91e:	78fb      	ldrb	r3, [r7, #3]
 800f920:	1c5a      	adds	r2, r3, #1
 800f922:	70fa      	strb	r2, [r7, #3]
 800f924:	461a      	mov	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4413      	add	r3, r2
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	041b      	lsls	r3, r3, #16
 800f92e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f932:	4313      	orrs	r3, r2
 800f934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f93c:	2264      	movs	r2, #100	; 0x64
 800f93e:	fb02 f303 	mul.w	r3, r2, r3
 800f942:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f946:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f94a:	f002 fd16 	bl	801237a <LoRaMacClassBBeaconFreqReq>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d003      	beq.n	800f95c <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f954:	2301      	movs	r3, #1
 800f956:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f95a:	e002      	b.n	800f962 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f962:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f966:	2201      	movs	r2, #1
 800f968:	4619      	mov	r1, r3
 800f96a:	2013      	movs	r0, #19
 800f96c:	f002 fe3a 	bl	80125e4 <LoRaMacCommandsAddCmd>
                }
                break;
 800f970:	bf00      	nop
    while( macIndex < commandsSize )
 800f972:	78fa      	ldrb	r2, [r7, #3]
 800f974:	78bb      	ldrb	r3, [r7, #2]
 800f976:	429a      	cmp	r2, r3
 800f978:	f4ff ab88 	bcc.w	800f08c <ProcessMacCommands+0x30>
 800f97c:	e002      	b.n	800f984 <ProcessMacCommands+0x928>
            return;
 800f97e:	bf00      	nop
 800f980:	e000      	b.n	800f984 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f982:	bf00      	nop
        }
    }
}
 800f984:	378c      	adds	r7, #140	; 0x8c
 800f986:	46bd      	mov	sp, r7
 800f988:	bd90      	pop	{r4, r7, pc}
 800f98a:	bf00      	nop
 800f98c:	12d53d80 	.word	0x12d53d80
 800f990:	2000054c 	.word	0x2000054c
 800f994:	200018ac 	.word	0x200018ac

0800f998 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b08e      	sub	sp, #56	; 0x38
 800f99c:	af02      	add	r7, sp, #8
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	607a      	str	r2, [r7, #4]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	72fb      	strb	r3, [r7, #11]
 800f9a8:	4613      	mov	r3, r2
 800f9aa:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9b2:	4b65      	ldr	r3, [pc, #404]	; (800fb48 <Send+0x1b0>)
 800f9b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f9bc:	4b62      	ldr	r3, [pc, #392]	; (800fb48 <Send+0x1b0>)
 800f9be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f9c6:	4b60      	ldr	r3, [pc, #384]	; (800fb48 <Send+0x1b0>)
 800f9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ca:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f9cc:	4b5e      	ldr	r3, [pc, #376]	; (800fb48 <Send+0x1b0>)
 800f9ce:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d101      	bne.n	800f9da <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f9d6:	2307      	movs	r3, #7
 800f9d8:	e0b1      	b.n	800fb3e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f9da:	4b5b      	ldr	r3, [pc, #364]	; (800fb48 <Send+0x1b0>)
 800f9dc:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d102      	bne.n	800f9ea <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f9e4:	4b58      	ldr	r3, [pc, #352]	; (800fb48 <Send+0x1b0>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f9f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f9f4:	f36f 0303 	bfc	r3, #0, #4
 800f9f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f9fc:	4b52      	ldr	r3, [pc, #328]	; (800fb48 <Send+0x1b0>)
 800f9fe:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800fa02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa06:	f362 13c7 	bfi	r3, r2, #7, #1
 800fa0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fa0e:	4b4e      	ldr	r3, [pc, #312]	; (800fb48 <Send+0x1b0>)
 800fa10:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d106      	bne.n	800fa26 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fa18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa1c:	f043 0310 	orr.w	r3, r3, #16
 800fa20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800fa24:	e005      	b.n	800fa32 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fa26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa2a:	f36f 1304 	bfc	r3, #4, #1
 800fa2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fa32:	4b45      	ldr	r3, [pc, #276]	; (800fb48 <Send+0x1b0>)
 800fa34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d005      	beq.n	800fa48 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fa3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa40:	f043 0320 	orr.w	r3, r3, #32
 800fa44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800fa48:	4b3f      	ldr	r3, [pc, #252]	; (800fb48 <Send+0x1b0>)
 800fa4a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800fa4e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800fa50:	2301      	movs	r3, #1
 800fa52:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fa54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fa58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	bf14      	ite	ne
 800fa62:	2301      	movne	r3, #1
 800fa64:	2300      	moveq	r3, #0
 800fa66:	b2db      	uxtb	r3, r3
 800fa68:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fa6a:	4b37      	ldr	r3, [pc, #220]	; (800fb48 <Send+0x1b0>)
 800fa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa6e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fa70:	4b36      	ldr	r3, [pc, #216]	; (800fb4c <Send+0x1b4>)
 800fa72:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800fa76:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fa78:	4b34      	ldr	r3, [pc, #208]	; (800fb4c <Send+0x1b4>)
 800fa7a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800fa7e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa80:	4b31      	ldr	r3, [pc, #196]	; (800fb48 <Send+0x1b0>)
 800fa82:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fa86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa8a:	4b2f      	ldr	r3, [pc, #188]	; (800fb48 <Send+0x1b0>)
 800fa8c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fa90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fa94:	4b2c      	ldr	r3, [pc, #176]	; (800fb48 <Send+0x1b0>)
 800fa96:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fa9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800fa9e:	4b2a      	ldr	r3, [pc, #168]	; (800fb48 <Send+0x1b0>)
 800faa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800faa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800faa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800faac:	f107 0014 	add.w	r0, r7, #20
 800fab0:	4a27      	ldr	r2, [pc, #156]	; (800fb50 <Send+0x1b8>)
 800fab2:	4928      	ldr	r1, [pc, #160]	; (800fb54 <Send+0x1bc>)
 800fab4:	f002 fb7c 	bl	80121b0 <LoRaMacAdrCalcNext>
 800fab8:	4603      	mov	r3, r0
 800faba:	461a      	mov	r2, r3
 800fabc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fac0:	f362 1386 	bfi	r3, r2, #6, #1
 800fac4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fac8:	7afa      	ldrb	r2, [r7, #11]
 800faca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800face:	893b      	ldrh	r3, [r7, #8]
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f000 fc21 	bl	801031c <PrepareFrame>
 800fada:	4603      	mov	r3, r0
 800fadc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d003      	beq.n	800faf0 <Send+0x158>
 800fae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800faec:	2b0a      	cmp	r3, #10
 800faee:	d107      	bne.n	800fb00 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800faf0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 f96d 	bl	800fdd4 <ScheduleTx>
 800fafa:	4603      	mov	r3, r0
 800fafc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fb00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00a      	beq.n	800fb1e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fb08:	4a0f      	ldr	r2, [pc, #60]	; (800fb48 <Send+0x1b0>)
 800fb0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fb0e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fb12:	4a0d      	ldr	r2, [pc, #52]	; (800fb48 <Send+0x1b0>)
 800fb14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb18:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800fb1c:	e00d      	b.n	800fb3a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fb1e:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <Send+0x1b0>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb28:	4a07      	ldr	r2, [pc, #28]	; (800fb48 <Send+0x1b0>)
 800fb2a:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fb2c:	f002 fdd2 	bl	80126d4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb36:	2313      	movs	r3, #19
 800fb38:	e001      	b.n	800fb3e <Send+0x1a6>
        }
    }
    return status;
 800fb3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3730      	adds	r7, #48	; 0x30
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20000a54 	.word	0x20000a54
 800fb4c:	2000054c 	.word	0x2000054c
 800fb50:	20000a8c 	.word	0x20000a8c
 800fb54:	20000a8d 	.word	0x20000a8d

0800fb58 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	4603      	mov	r3, r0
 800fb60:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fb62:	2300      	movs	r3, #0
 800fb64:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fb6e:	79fb      	ldrb	r3, [r7, #7]
 800fb70:	2bff      	cmp	r3, #255	; 0xff
 800fb72:	d129      	bne.n	800fbc8 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fb74:	2000      	movs	r0, #0
 800fb76:	f7ff f941 	bl	800edfc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fb7a:	4b1a      	ldr	r3, [pc, #104]	; (800fbe4 <SendReJoinReq+0x8c>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fb82:	4b18      	ldr	r3, [pc, #96]	; (800fbe4 <SendReJoinReq+0x8c>)
 800fb84:	4a18      	ldr	r2, [pc, #96]	; (800fbe8 <SendReJoinReq+0x90>)
 800fb86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb8a:	4b16      	ldr	r3, [pc, #88]	; (800fbe4 <SendReJoinReq+0x8c>)
 800fb8c:	22ff      	movs	r2, #255	; 0xff
 800fb8e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fb92:	7b3b      	ldrb	r3, [r7, #12]
 800fb94:	f36f 1347 	bfc	r3, #5, #3
 800fb98:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fb9a:	7b3a      	ldrb	r2, [r7, #12]
 800fb9c:	4b11      	ldr	r3, [pc, #68]	; (800fbe4 <SendReJoinReq+0x8c>)
 800fb9e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fba2:	f7fc fc85 	bl	800c4b0 <SecureElementGetJoinEui>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2208      	movs	r2, #8
 800fbaa:	4619      	mov	r1, r3
 800fbac:	480f      	ldr	r0, [pc, #60]	; (800fbec <SendReJoinReq+0x94>)
 800fbae:	f006 fd9e 	bl	80166ee <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fbb2:	f7fc fc5b 	bl	800c46c <SecureElementGetDevEui>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2208      	movs	r2, #8
 800fbba:	4619      	mov	r1, r3
 800fbbc:	480c      	ldr	r0, [pc, #48]	; (800fbf0 <SendReJoinReq+0x98>)
 800fbbe:	f006 fd96 	bl	80166ee <memcpy1>

            allowDelayedTx = false;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	73fb      	strb	r3, [r7, #15]

            break;
 800fbc6:	e002      	b.n	800fbce <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fbc8:	2302      	movs	r3, #2
 800fbca:	73bb      	strb	r3, [r7, #14]
            break;
 800fbcc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fbce:	7bfb      	ldrb	r3, [r7, #15]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 f8ff 	bl	800fdd4 <ScheduleTx>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73bb      	strb	r3, [r7, #14]
    return status;
 800fbda:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	2000054c 	.word	0x2000054c
 800fbe8:	2000054e 	.word	0x2000054e
 800fbec:	2000065a 	.word	0x2000065a
 800fbf0:	20000662 	.word	0x20000662

0800fbf4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fbf8:	f002 fb49 	bl	801228e <LoRaMacClassBIsBeaconExpected>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fc02:	230e      	movs	r3, #14
 800fc04:	e013      	b.n	800fc2e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc06:	4b0b      	ldr	r3, [pc, #44]	; (800fc34 <CheckForClassBCollision+0x40>)
 800fc08:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d10d      	bne.n	800fc2c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fc10:	f002 fb44 	bl	801229c <LoRaMacClassBIsPingExpected>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc1a:	230f      	movs	r3, #15
 800fc1c:	e007      	b.n	800fc2e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc1e:	f002 fb44 	bl	80122aa <LoRaMacClassBIsMulticastExpected>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d001      	beq.n	800fc2c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc28:	230f      	movs	r3, #15
 800fc2a:	e000      	b.n	800fc2e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20000a54 	.word	0x20000a54

0800fc38 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fc38:	b590      	push	{r4, r7, lr}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc3e:	4b2d      	ldr	r3, [pc, #180]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc40:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc44:	4b2b      	ldr	r3, [pc, #172]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc46:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fc4a:	4b2a      	ldr	r3, [pc, #168]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc4c:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800fc50:	4b28      	ldr	r3, [pc, #160]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc52:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fc56:	4b27      	ldr	r3, [pc, #156]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc58:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	f004 fba3 	bl	80143a8 <RegionApplyDrOffset>
 800fc62:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc64:	b259      	sxtb	r1, r3
 800fc66:	4b23      	ldr	r3, [pc, #140]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc6c:	4b21      	ldr	r3, [pc, #132]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc70:	4821      	ldr	r0, [pc, #132]	; (800fcf8 <ComputeRxWindowParameters+0xc0>)
 800fc72:	9000      	str	r0, [sp, #0]
 800fc74:	4620      	mov	r0, r4
 800fc76:	f004 faa7 	bl	80141c8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc7a:	4b1e      	ldr	r3, [pc, #120]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc7c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fc80:	4b1c      	ldr	r3, [pc, #112]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc82:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc86:	b259      	sxtb	r1, r3
 800fc88:	4b1a      	ldr	r3, [pc, #104]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc8a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fc8e:	4b19      	ldr	r3, [pc, #100]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc92:	4c1a      	ldr	r4, [pc, #104]	; (800fcfc <ComputeRxWindowParameters+0xc4>)
 800fc94:	9400      	str	r4, [sp, #0]
 800fc96:	f004 fa97 	bl	80141c8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc9a:	4b16      	ldr	r3, [pc, #88]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc9e:	4a18      	ldr	r2, [pc, #96]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fca0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fca4:	4413      	add	r3, r2
 800fca6:	4a16      	ldr	r2, [pc, #88]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fca8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcac:	4b11      	ldr	r3, [pc, #68]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcb0:	4a13      	ldr	r2, [pc, #76]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcb2:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fcb6:	4413      	add	r3, r2
 800fcb8:	4a11      	ldr	r2, [pc, #68]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcba:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fcbe:	4b0d      	ldr	r3, [pc, #52]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcc0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d111      	bne.n	800fcec <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fcc8:	4b0a      	ldr	r3, [pc, #40]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fccc:	4a0c      	ldr	r2, [pc, #48]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcce:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fcd2:	4413      	add	r3, r2
 800fcd4:	4a0a      	ldr	r2, [pc, #40]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcd6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcda:	4b06      	ldr	r3, [pc, #24]	; (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcde:	4a08      	ldr	r2, [pc, #32]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fce0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fce4:	4413      	add	r3, r2
 800fce6:	4a06      	ldr	r2, [pc, #24]	; (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fce8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fcec:	bf00      	nop
 800fcee:	3704      	adds	r7, #4
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd90      	pop	{r4, r7, pc}
 800fcf4:	20000a54 	.word	0x20000a54
 800fcf8:	20000904 	.word	0x20000904
 800fcfc:	20000918 	.word	0x20000918
 800fd00:	2000054c 	.word	0x2000054c

0800fd04 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fd0e:	4b13      	ldr	r3, [pc, #76]	; (800fd5c <VerifyTxFrame+0x58>)
 800fd10:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01b      	beq.n	800fd50 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fd18:	1d3b      	adds	r3, r7, #4
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f002 fd20 	bl	8012760 <LoRaMacCommandsGetSizeSerializedCmds>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd26:	2313      	movs	r3, #19
 800fd28:	e013      	b.n	800fd52 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	; (800fd60 <VerifyTxFrame+0x5c>)
 800fd2c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fd30:	4a0a      	ldr	r2, [pc, #40]	; (800fd5c <VerifyTxFrame+0x58>)
 800fd32:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	b2d2      	uxtb	r2, r2
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff f956 	bl	800efec <ValidatePayloadLength>
 800fd40:	4603      	mov	r3, r0
 800fd42:	f083 0301 	eor.w	r3, r3, #1
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fd4c:	2308      	movs	r3, #8
 800fd4e:	e000      	b.n	800fd52 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20000a54 	.word	0x20000a54
 800fd60:	2000054c 	.word	0x2000054c

0800fd64 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fd6a:	4b18      	ldr	r3, [pc, #96]	; (800fdcc <SerializeTxFrame+0x68>)
 800fd6c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d002      	beq.n	800fd7a <SerializeTxFrame+0x16>
 800fd74:	2b04      	cmp	r3, #4
 800fd76:	d011      	beq.n	800fd9c <SerializeTxFrame+0x38>
 800fd78:	e021      	b.n	800fdbe <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fd7a:	4815      	ldr	r0, [pc, #84]	; (800fdd0 <SerializeTxFrame+0x6c>)
 800fd7c:	f004 f823 	bl	8013dc6 <LoRaMacSerializerJoinRequest>
 800fd80:	4603      	mov	r3, r0
 800fd82:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd8a:	2311      	movs	r3, #17
 800fd8c:	e01a      	b.n	800fdc4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <SerializeTxFrame+0x68>)
 800fd90:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	4b0d      	ldr	r3, [pc, #52]	; (800fdcc <SerializeTxFrame+0x68>)
 800fd98:	801a      	strh	r2, [r3, #0]
            break;
 800fd9a:	e012      	b.n	800fdc2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd9c:	480c      	ldr	r0, [pc, #48]	; (800fdd0 <SerializeTxFrame+0x6c>)
 800fd9e:	f004 f894 	bl	8013eca <LoRaMacSerializerData>
 800fda2:	4603      	mov	r3, r0
 800fda4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fdac:	2311      	movs	r3, #17
 800fdae:	e009      	b.n	800fdc4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fdb0:	4b06      	ldr	r3, [pc, #24]	; (800fdcc <SerializeTxFrame+0x68>)
 800fdb2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	4b04      	ldr	r3, [pc, #16]	; (800fdcc <SerializeTxFrame+0x68>)
 800fdba:	801a      	strh	r2, [r3, #0]
            break;
 800fdbc:	e001      	b.n	800fdc2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdbe:	2303      	movs	r3, #3
 800fdc0:	e000      	b.n	800fdc4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	2000054c 	.word	0x2000054c
 800fdd0:	20000654 	.word	0x20000654

0800fdd4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b090      	sub	sp, #64	; 0x40
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fdde:	2303      	movs	r3, #3
 800fde0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fde4:	f7ff ff06 	bl	800fbf4 <CheckForClassBCollision>
 800fde8:	4603      	mov	r3, r0
 800fdea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <ScheduleTx+0x28>
    {
        return status;
 800fdf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdfa:	e08f      	b.n	800ff1c <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fdfc:	f000 f8fa 	bl	800fff4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fe00:	f7ff ffb0 	bl	800fd64 <SerializeTxFrame>
 800fe04:	4603      	mov	r3, r0
 800fe06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fe0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d002      	beq.n	800fe18 <ScheduleTx+0x44>
    {
        return status;
 800fe12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe16:	e081      	b.n	800ff1c <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fe18:	4b42      	ldr	r3, [pc, #264]	; (800ff24 <ScheduleTx+0x150>)
 800fe1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fe1e:	4b41      	ldr	r3, [pc, #260]	; (800ff24 <ScheduleTx+0x150>)
 800fe20:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fe24:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fe26:	4b3f      	ldr	r3, [pc, #252]	; (800ff24 <ScheduleTx+0x150>)
 800fe28:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fe2c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fe2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe32:	4618      	mov	r0, r3
 800fe34:	f009 ff76 	bl	8019d24 <SysTimeGetMcuTime>
 800fe38:	4638      	mov	r0, r7
 800fe3a:	4b3a      	ldr	r3, [pc, #232]	; (800ff24 <ScheduleTx+0x150>)
 800fe3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fe40:	9200      	str	r2, [sp, #0]
 800fe42:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fe46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fe4a:	ca06      	ldmia	r2, {r1, r2}
 800fe4c:	f009 fecb 	bl	8019be6 <SysTimeSub>
 800fe50:	f107 0320 	add.w	r3, r7, #32
 800fe54:	463a      	mov	r2, r7
 800fe56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe5a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fe5e:	4b31      	ldr	r3, [pc, #196]	; (800ff24 <ScheduleTx+0x150>)
 800fe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe62:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fe64:	2300      	movs	r3, #0
 800fe66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fe6e:	4b2e      	ldr	r3, [pc, #184]	; (800ff28 <ScheduleTx+0x154>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fe74:	4b2b      	ldr	r3, [pc, #172]	; (800ff24 <ScheduleTx+0x150>)
 800fe76:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d104      	bne.n	800fe88 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fe84:	2300      	movs	r3, #0
 800fe86:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe88:	4b26      	ldr	r3, [pc, #152]	; (800ff24 <ScheduleTx+0x150>)
 800fe8a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fe8e:	f107 0114 	add.w	r1, r7, #20
 800fe92:	4b26      	ldr	r3, [pc, #152]	; (800ff2c <ScheduleTx+0x158>)
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4b26      	ldr	r3, [pc, #152]	; (800ff30 <ScheduleTx+0x15c>)
 800fe98:	4a26      	ldr	r2, [pc, #152]	; (800ff34 <ScheduleTx+0x160>)
 800fe9a:	f004 fa5b 	bl	8014354 <RegionNextChannel>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fea4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d022      	beq.n	800fef2 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800feac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feb0:	2b0b      	cmp	r3, #11
 800feb2:	d11b      	bne.n	800feec <ScheduleTx+0x118>
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d018      	beq.n	800feec <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800feba:	4b1b      	ldr	r3, [pc, #108]	; (800ff28 <ScheduleTx+0x154>)
 800febc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d011      	beq.n	800fee8 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fec4:	4b18      	ldr	r3, [pc, #96]	; (800ff28 <ScheduleTx+0x154>)
 800fec6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800feca:	f043 0320 	orr.w	r3, r3, #32
 800fece:	4a16      	ldr	r2, [pc, #88]	; (800ff28 <ScheduleTx+0x154>)
 800fed0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fed4:	4b14      	ldr	r3, [pc, #80]	; (800ff28 <ScheduleTx+0x154>)
 800fed6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800feda:	4619      	mov	r1, r3
 800fedc:	4816      	ldr	r0, [pc, #88]	; (800ff38 <ScheduleTx+0x164>)
 800fede:	f00a fcad 	bl	801a83c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fee2:	4815      	ldr	r0, [pc, #84]	; (800ff38 <ScheduleTx+0x164>)
 800fee4:	f00a fbcc 	bl	801a680 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fee8:	2300      	movs	r3, #0
 800feea:	e017      	b.n	800ff1c <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800feec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fef0:	e014      	b.n	800ff1c <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fef2:	f7ff fea1 	bl	800fc38 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fef6:	f7ff ff05 	bl	800fd04 <VerifyTxFrame>
 800fefa:	4603      	mov	r3, r0
 800fefc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ff00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d002      	beq.n	800ff0e <ScheduleTx+0x13a>
    {
        return status;
 800ff08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff0c:	e006      	b.n	800ff1c <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800ff0e:	4b06      	ldr	r3, [pc, #24]	; (800ff28 <ScheduleTx+0x154>)
 800ff10:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 fb1d 	bl	8010554 <SendFrameOnChannel>
 800ff1a:	4603      	mov	r3, r0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3738      	adds	r7, #56	; 0x38
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	20000a54 	.word	0x20000a54
 800ff28:	2000054c 	.word	0x2000054c
 800ff2c:	20000a84 	.word	0x20000a84
 800ff30:	200009d0 	.word	0x200009d0
 800ff34:	20000961 	.word	0x20000961
 800ff38:	200008b4 	.word	0x200008b4

0800ff3c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	4603      	mov	r3, r0
 800ff44:	460a      	mov	r2, r1
 800ff46:	71fb      	strb	r3, [r7, #7]
 800ff48:	4613      	mov	r3, r2
 800ff4a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ff4c:	2313      	movs	r3, #19
 800ff4e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ff54:	4b25      	ldr	r3, [pc, #148]	; (800ffec <SecureFrame+0xb0>)
 800ff56:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d002      	beq.n	800ff64 <SecureFrame+0x28>
 800ff5e:	2b04      	cmp	r3, #4
 800ff60:	d011      	beq.n	800ff86 <SecureFrame+0x4a>
 800ff62:	e03b      	b.n	800ffdc <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff64:	4822      	ldr	r0, [pc, #136]	; (800fff0 <SecureFrame+0xb4>)
 800ff66:	f003 faf7 	bl	8013558 <LoRaMacCryptoPrepareJoinRequest>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff74:	2311      	movs	r3, #17
 800ff76:	e034      	b.n	800ffe2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ff78:	4b1c      	ldr	r3, [pc, #112]	; (800ffec <SecureFrame+0xb0>)
 800ff7a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	4b1a      	ldr	r3, [pc, #104]	; (800ffec <SecureFrame+0xb0>)
 800ff82:	801a      	strh	r2, [r3, #0]
            break;
 800ff84:	e02c      	b.n	800ffe0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff86:	f107 0308 	add.w	r3, r7, #8
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f003 fa0a 	bl	80133a4 <LoRaMacCryptoGetFCntUp>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff96:	2312      	movs	r3, #18
 800ff98:	e023      	b.n	800ffe2 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ff9a:	4b14      	ldr	r3, [pc, #80]	; (800ffec <SecureFrame+0xb0>)
 800ff9c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d104      	bne.n	800ffae <SecureFrame+0x72>
 800ffa4:	4b11      	ldr	r3, [pc, #68]	; (800ffec <SecureFrame+0xb0>)
 800ffa6:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d902      	bls.n	800ffb4 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	3b01      	subs	r3, #1
 800ffb2:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ffb4:	68b8      	ldr	r0, [r7, #8]
 800ffb6:	79ba      	ldrb	r2, [r7, #6]
 800ffb8:	79f9      	ldrb	r1, [r7, #7]
 800ffba:	4b0d      	ldr	r3, [pc, #52]	; (800fff0 <SecureFrame+0xb4>)
 800ffbc:	f003 fbe4 	bl	8013788 <LoRaMacCryptoSecureMessage>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ffc4:	7bfb      	ldrb	r3, [r7, #15]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffca:	2311      	movs	r3, #17
 800ffcc:	e009      	b.n	800ffe2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffce:	4b07      	ldr	r3, [pc, #28]	; (800ffec <SecureFrame+0xb0>)
 800ffd0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	4b05      	ldr	r3, [pc, #20]	; (800ffec <SecureFrame+0xb0>)
 800ffd8:	801a      	strh	r2, [r3, #0]
            break;
 800ffda:	e001      	b.n	800ffe0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e000      	b.n	800ffe2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ffe0:	2300      	movs	r3, #0
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	2000054c 	.word	0x2000054c
 800fff0:	20000654 	.word	0x20000654

0800fff4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fff8:	4b09      	ldr	r3, [pc, #36]	; (8010020 <CalculateBackOff+0x2c>)
 800fffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10a      	bne.n	8010016 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <CalculateBackOff+0x2c>)
 8010002:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8010006:	3b01      	subs	r3, #1
 8010008:	4a06      	ldr	r2, [pc, #24]	; (8010024 <CalculateBackOff+0x30>)
 801000a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 801000e:	fb02 f303 	mul.w	r3, r2, r3
 8010012:	4a03      	ldr	r2, [pc, #12]	; (8010020 <CalculateBackOff+0x2c>)
 8010014:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010016:	bf00      	nop
 8010018:	46bd      	mov	sp, r7
 801001a:	bc80      	pop	{r7}
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	20000a54 	.word	0x20000a54
 8010024:	2000054c 	.word	0x2000054c

08010028 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	4603      	mov	r3, r0
 8010030:	7139      	strb	r1, [r7, #4]
 8010032:	71fb      	strb	r3, [r7, #7]
 8010034:	4613      	mov	r3, r2
 8010036:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010038:	79fb      	ldrb	r3, [r7, #7]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d002      	beq.n	8010044 <RemoveMacCommands+0x1c>
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	2b01      	cmp	r3, #1
 8010042:	d10d      	bne.n	8010060 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010044:	79bb      	ldrb	r3, [r7, #6]
 8010046:	2b01      	cmp	r3, #1
 8010048:	d108      	bne.n	801005c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801004a:	793b      	ldrb	r3, [r7, #4]
 801004c:	f003 0320 	and.w	r3, r3, #32
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	d004      	beq.n	8010060 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010056:	f002 fb61 	bl	801271c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801005a:	e001      	b.n	8010060 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801005c:	f002 fb5e 	bl	801271c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010060:	bf00      	nop
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8010068:	b5b0      	push	{r4, r5, r7, lr}
 801006a:	b08e      	sub	sp, #56	; 0x38
 801006c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801006e:	4b68      	ldr	r3, [pc, #416]	; (8010210 <ResetMacParameters+0x1a8>)
 8010070:	2200      	movs	r2, #0
 8010072:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010076:	4b66      	ldr	r3, [pc, #408]	; (8010210 <ResetMacParameters+0x1a8>)
 8010078:	2200      	movs	r2, #0
 801007a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801007c:	4b65      	ldr	r3, [pc, #404]	; (8010214 <ResetMacParameters+0x1ac>)
 801007e:	2200      	movs	r2, #0
 8010080:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8010084:	4b63      	ldr	r3, [pc, #396]	; (8010214 <ResetMacParameters+0x1ac>)
 8010086:	2201      	movs	r2, #1
 8010088:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 801008c:	4b61      	ldr	r3, [pc, #388]	; (8010214 <ResetMacParameters+0x1ac>)
 801008e:	2201      	movs	r2, #1
 8010090:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8010094:	4b5f      	ldr	r3, [pc, #380]	; (8010214 <ResetMacParameters+0x1ac>)
 8010096:	2200      	movs	r2, #0
 8010098:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 801009c:	4b5c      	ldr	r3, [pc, #368]	; (8010210 <ResetMacParameters+0x1a8>)
 801009e:	2200      	movs	r2, #0
 80100a0:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80100a4:	4b5a      	ldr	r3, [pc, #360]	; (8010210 <ResetMacParameters+0x1a8>)
 80100a6:	2201      	movs	r2, #1
 80100a8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80100ac:	4b58      	ldr	r3, [pc, #352]	; (8010210 <ResetMacParameters+0x1a8>)
 80100ae:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 80100b2:	4b57      	ldr	r3, [pc, #348]	; (8010210 <ResetMacParameters+0x1a8>)
 80100b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80100b8:	4b55      	ldr	r3, [pc, #340]	; (8010210 <ResetMacParameters+0x1a8>)
 80100ba:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 80100be:	4b54      	ldr	r3, [pc, #336]	; (8010210 <ResetMacParameters+0x1a8>)
 80100c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80100c4:	4b52      	ldr	r3, [pc, #328]	; (8010210 <ResetMacParameters+0x1a8>)
 80100c6:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 80100ca:	4b51      	ldr	r3, [pc, #324]	; (8010210 <ResetMacParameters+0x1a8>)
 80100cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80100d0:	4b4f      	ldr	r3, [pc, #316]	; (8010210 <ResetMacParameters+0x1a8>)
 80100d2:	4a4f      	ldr	r2, [pc, #316]	; (8010210 <ResetMacParameters+0x1a8>)
 80100d4:	3364      	adds	r3, #100	; 0x64
 80100d6:	32a4      	adds	r2, #164	; 0xa4
 80100d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100dc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80100e0:	4b4b      	ldr	r3, [pc, #300]	; (8010210 <ResetMacParameters+0x1a8>)
 80100e2:	4a4b      	ldr	r2, [pc, #300]	; (8010210 <ResetMacParameters+0x1a8>)
 80100e4:	336c      	adds	r3, #108	; 0x6c
 80100e6:	32ac      	adds	r2, #172	; 0xac
 80100e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100ec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80100f0:	4b47      	ldr	r3, [pc, #284]	; (8010210 <ResetMacParameters+0x1a8>)
 80100f2:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80100f6:	4b46      	ldr	r3, [pc, #280]	; (8010210 <ResetMacParameters+0x1a8>)
 80100f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80100fc:	4b44      	ldr	r3, [pc, #272]	; (8010210 <ResetMacParameters+0x1a8>)
 80100fe:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8010102:	4b43      	ldr	r3, [pc, #268]	; (8010210 <ResetMacParameters+0x1a8>)
 8010104:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010108:	4b41      	ldr	r3, [pc, #260]	; (8010210 <ResetMacParameters+0x1a8>)
 801010a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801010e:	4a40      	ldr	r2, [pc, #256]	; (8010210 <ResetMacParameters+0x1a8>)
 8010110:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010112:	4b3f      	ldr	r3, [pc, #252]	; (8010210 <ResetMacParameters+0x1a8>)
 8010114:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010118:	4a3d      	ldr	r2, [pc, #244]	; (8010210 <ResetMacParameters+0x1a8>)
 801011a:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 801011c:	4b3d      	ldr	r3, [pc, #244]	; (8010214 <ResetMacParameters+0x1ac>)
 801011e:	2200      	movs	r2, #0
 8010120:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 8010124:	4b3a      	ldr	r3, [pc, #232]	; (8010210 <ResetMacParameters+0x1a8>)
 8010126:	2200      	movs	r2, #0
 8010128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801012c:	2301      	movs	r3, #1
 801012e:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010130:	4b39      	ldr	r3, [pc, #228]	; (8010218 <ResetMacParameters+0x1b0>)
 8010132:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010134:	4b39      	ldr	r3, [pc, #228]	; (801021c <ResetMacParameters+0x1b4>)
 8010136:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010138:	4b35      	ldr	r3, [pc, #212]	; (8010210 <ResetMacParameters+0x1a8>)
 801013a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801013e:	1d3a      	adds	r2, r7, #4
 8010140:	4611      	mov	r1, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f003 fff2 	bl	801412c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010148:	4b32      	ldr	r3, [pc, #200]	; (8010214 <ResetMacParameters+0x1ac>)
 801014a:	2200      	movs	r2, #0
 801014c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010150:	4b30      	ldr	r3, [pc, #192]	; (8010214 <ResetMacParameters+0x1ac>)
 8010152:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010156:	4b2f      	ldr	r3, [pc, #188]	; (8010214 <ResetMacParameters+0x1ac>)
 8010158:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801015c:	4b2c      	ldr	r3, [pc, #176]	; (8010210 <ResetMacParameters+0x1a8>)
 801015e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010160:	4a2c      	ldr	r2, [pc, #176]	; (8010214 <ResetMacParameters+0x1ac>)
 8010162:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010166:	4b2a      	ldr	r3, [pc, #168]	; (8010210 <ResetMacParameters+0x1a8>)
 8010168:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801016c:	4b29      	ldr	r3, [pc, #164]	; (8010214 <ResetMacParameters+0x1ac>)
 801016e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010172:	4b27      	ldr	r3, [pc, #156]	; (8010210 <ResetMacParameters+0x1a8>)
 8010174:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010178:	4b26      	ldr	r3, [pc, #152]	; (8010214 <ResetMacParameters+0x1ac>)
 801017a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801017e:	4b25      	ldr	r3, [pc, #148]	; (8010214 <ResetMacParameters+0x1ac>)
 8010180:	2200      	movs	r2, #0
 8010182:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010186:	4b23      	ldr	r3, [pc, #140]	; (8010214 <ResetMacParameters+0x1ac>)
 8010188:	2201      	movs	r2, #1
 801018a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801018e:	4a21      	ldr	r2, [pc, #132]	; (8010214 <ResetMacParameters+0x1ac>)
 8010190:	4b20      	ldr	r3, [pc, #128]	; (8010214 <ResetMacParameters+0x1ac>)
 8010192:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8010196:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801019e:	682b      	ldr	r3, [r5, #0]
 80101a0:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80101a2:	4b1c      	ldr	r3, [pc, #112]	; (8010214 <ResetMacParameters+0x1ac>)
 80101a4:	2201      	movs	r2, #1
 80101a6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80101aa:	4b1a      	ldr	r3, [pc, #104]	; (8010214 <ResetMacParameters+0x1ac>)
 80101ac:	2202      	movs	r2, #2
 80101ae:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 80101ba:	4b16      	ldr	r3, [pc, #88]	; (8010214 <ResetMacParameters+0x1ac>)
 80101bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d009      	beq.n	80101d8 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80101c4:	4b13      	ldr	r3, [pc, #76]	; (8010214 <ResetMacParameters+0x1ac>)
 80101c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80101ce:	4b11      	ldr	r3, [pc, #68]	; (8010214 <ResetMacParameters+0x1ac>)
 80101d0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <ResetMacParameters+0x1b8>)
 80101da:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80101dc:	4b11      	ldr	r3, [pc, #68]	; (8010224 <ResetMacParameters+0x1bc>)
 80101de:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80101e0:	4b11      	ldr	r3, [pc, #68]	; (8010228 <ResetMacParameters+0x1c0>)
 80101e2:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80101e4:	4b11      	ldr	r3, [pc, #68]	; (801022c <ResetMacParameters+0x1c4>)
 80101e6:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80101e8:	4b11      	ldr	r3, [pc, #68]	; (8010230 <ResetMacParameters+0x1c8>)
 80101ea:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80101ec:	4b11      	ldr	r3, [pc, #68]	; (8010234 <ResetMacParameters+0x1cc>)
 80101ee:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80101f0:	4b11      	ldr	r3, [pc, #68]	; (8010238 <ResetMacParameters+0x1d0>)
 80101f2:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80101f4:	4b11      	ldr	r3, [pc, #68]	; (801023c <ResetMacParameters+0x1d4>)
 80101f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80101f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80101fc:	f107 0310 	add.w	r3, r7, #16
 8010200:	4a0f      	ldr	r2, [pc, #60]	; (8010240 <ResetMacParameters+0x1d8>)
 8010202:	4618      	mov	r0, r3
 8010204:	f001 ffec 	bl	80121e0 <LoRaMacClassBInit>
}
 8010208:	bf00      	nop
 801020a:	3738      	adds	r7, #56	; 0x38
 801020c:	46bd      	mov	sp, r7
 801020e:	bdb0      	pop	{r4, r5, r7, pc}
 8010210:	20000a54 	.word	0x20000a54
 8010214:	2000054c 	.word	0x2000054c
 8010218:	20000c2c 	.word	0x20000c2c
 801021c:	20000cc0 	.word	0x20000cc0
 8010220:	200009ac 	.word	0x200009ac
 8010224:	20000968 	.word	0x20000968
 8010228:	20000998 	.word	0x20000998
 801022c:	200009cd 	.word	0x200009cd
 8010230:	20000b20 	.word	0x20000b20
 8010234:	20000a94 	.word	0x20000a94
 8010238:	20000a98 	.word	0x20000a98
 801023c:	20000b24 	.word	0x20000b24
 8010240:	20000d88 	.word	0x20000d88

08010244 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f00a fa84 	bl	801a75c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010254:	4b0e      	ldr	r3, [pc, #56]	; (8010290 <RxWindowSetup+0x4c>)
 8010256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010258:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801025a:	4b0e      	ldr	r3, [pc, #56]	; (8010294 <RxWindowSetup+0x50>)
 801025c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010260:	4a0d      	ldr	r2, [pc, #52]	; (8010298 <RxWindowSetup+0x54>)
 8010262:	6839      	ldr	r1, [r7, #0]
 8010264:	4618      	mov	r0, r3
 8010266:	f003 ffc9 	bl	80141fc <RegionRxConfig>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d00a      	beq.n	8010286 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010270:	4b07      	ldr	r3, [pc, #28]	; (8010290 <RxWindowSetup+0x4c>)
 8010272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010274:	4a07      	ldr	r2, [pc, #28]	; (8010294 <RxWindowSetup+0x50>)
 8010276:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010278:	4610      	mov	r0, r2
 801027a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	7cda      	ldrb	r2, [r3, #19]
 8010280:	4b06      	ldr	r3, [pc, #24]	; (801029c <RxWindowSetup+0x58>)
 8010282:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	0801bf10 	.word	0x0801bf10
 8010294:	20000a54 	.word	0x20000a54
 8010298:	2000096c 	.word	0x2000096c
 801029c:	2000054c 	.word	0x2000054c

080102a0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80102a0:	b590      	push	{r4, r7, lr}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80102a6:	4b18      	ldr	r3, [pc, #96]	; (8010308 <OpenContinuousRxCWindow+0x68>)
 80102a8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80102ac:	4b16      	ldr	r3, [pc, #88]	; (8010308 <OpenContinuousRxCWindow+0x68>)
 80102ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80102b2:	b259      	sxtb	r1, r3
 80102b4:	4b14      	ldr	r3, [pc, #80]	; (8010308 <OpenContinuousRxCWindow+0x68>)
 80102b6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80102ba:	4b13      	ldr	r3, [pc, #76]	; (8010308 <OpenContinuousRxCWindow+0x68>)
 80102bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102be:	4c13      	ldr	r4, [pc, #76]	; (801030c <OpenContinuousRxCWindow+0x6c>)
 80102c0:	9400      	str	r4, [sp, #0]
 80102c2:	f003 ff81 	bl	80141c8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80102c6:	4b12      	ldr	r3, [pc, #72]	; (8010310 <OpenContinuousRxCWindow+0x70>)
 80102c8:	2202      	movs	r2, #2
 80102ca:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80102ce:	4b10      	ldr	r3, [pc, #64]	; (8010310 <OpenContinuousRxCWindow+0x70>)
 80102d0:	2201      	movs	r2, #1
 80102d2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80102d6:	4b0c      	ldr	r3, [pc, #48]	; (8010308 <OpenContinuousRxCWindow+0x68>)
 80102d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102dc:	4a0d      	ldr	r2, [pc, #52]	; (8010314 <OpenContinuousRxCWindow+0x74>)
 80102de:	490b      	ldr	r1, [pc, #44]	; (801030c <OpenContinuousRxCWindow+0x6c>)
 80102e0:	4618      	mov	r0, r3
 80102e2:	f003 ff8b 	bl	80141fc <RegionRxConfig>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d009      	beq.n	8010300 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 80102ec:	4b0a      	ldr	r3, [pc, #40]	; (8010318 <OpenContinuousRxCWindow+0x78>)
 80102ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102f0:	2000      	movs	r0, #0
 80102f2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80102f4:	4b06      	ldr	r3, [pc, #24]	; (8010310 <OpenContinuousRxCWindow+0x70>)
 80102f6:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80102fa:	4b05      	ldr	r3, [pc, #20]	; (8010310 <OpenContinuousRxCWindow+0x70>)
 80102fc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010300:	bf00      	nop
 8010302:	3704      	adds	r7, #4
 8010304:	46bd      	mov	sp, r7
 8010306:	bd90      	pop	{r4, r7, pc}
 8010308:	20000a54 	.word	0x20000a54
 801030c:	2000092c 	.word	0x2000092c
 8010310:	2000054c 	.word	0x2000054c
 8010314:	2000096c 	.word	0x2000096c
 8010318:	0801bf10 	.word	0x0801bf10

0801031c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b088      	sub	sp, #32
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	603b      	str	r3, [r7, #0]
 8010328:	4613      	mov	r3, r2
 801032a:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 801032c:	4b82      	ldr	r3, [pc, #520]	; (8010538 <PrepareFrame+0x21c>)
 801032e:	2200      	movs	r2, #0
 8010330:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010332:	4b81      	ldr	r3, [pc, #516]	; (8010538 <PrepareFrame+0x21c>)
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d101      	bne.n	8010350 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 801034c:	2300      	movs	r3, #0
 801034e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010350:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010352:	461a      	mov	r2, r3
 8010354:	6839      	ldr	r1, [r7, #0]
 8010356:	4879      	ldr	r0, [pc, #484]	; (801053c <PrepareFrame+0x220>)
 8010358:	f006 f9c9 	bl	80166ee <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801035c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801035e:	b2da      	uxtb	r2, r3
 8010360:	4b75      	ldr	r3, [pc, #468]	; (8010538 <PrepareFrame+0x21c>)
 8010362:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	781a      	ldrb	r2, [r3, #0]
 801036a:	4b73      	ldr	r3, [pc, #460]	; (8010538 <PrepareFrame+0x21c>)
 801036c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b07      	cmp	r3, #7
 801037a:	f000 80b9 	beq.w	80104f0 <PrepareFrame+0x1d4>
 801037e:	2b07      	cmp	r3, #7
 8010380:	f300 80d0 	bgt.w	8010524 <PrepareFrame+0x208>
 8010384:	2b02      	cmp	r3, #2
 8010386:	d006      	beq.n	8010396 <PrepareFrame+0x7a>
 8010388:	2b04      	cmp	r3, #4
 801038a:	f040 80cb 	bne.w	8010524 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801038e:	4b6a      	ldr	r3, [pc, #424]	; (8010538 <PrepareFrame+0x21c>)
 8010390:	2201      	movs	r2, #1
 8010392:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010396:	4b68      	ldr	r3, [pc, #416]	; (8010538 <PrepareFrame+0x21c>)
 8010398:	2204      	movs	r2, #4
 801039a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801039e:	4b66      	ldr	r3, [pc, #408]	; (8010538 <PrepareFrame+0x21c>)
 80103a0:	4a67      	ldr	r2, [pc, #412]	; (8010540 <PrepareFrame+0x224>)
 80103a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80103a6:	4b64      	ldr	r3, [pc, #400]	; (8010538 <PrepareFrame+0x21c>)
 80103a8:	22ff      	movs	r2, #255	; 0xff
 80103aa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	781a      	ldrb	r2, [r3, #0]
 80103b2:	4b61      	ldr	r3, [pc, #388]	; (8010538 <PrepareFrame+0x21c>)
 80103b4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80103b8:	4a5f      	ldr	r2, [pc, #380]	; (8010538 <PrepareFrame+0x21c>)
 80103ba:	79fb      	ldrb	r3, [r7, #7]
 80103bc:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80103c0:	4b60      	ldr	r3, [pc, #384]	; (8010544 <PrepareFrame+0x228>)
 80103c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80103c6:	4a5c      	ldr	r2, [pc, #368]	; (8010538 <PrepareFrame+0x21c>)
 80103c8:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	781a      	ldrb	r2, [r3, #0]
 80103d0:	4b59      	ldr	r3, [pc, #356]	; (8010538 <PrepareFrame+0x21c>)
 80103d2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80103d6:	4b58      	ldr	r3, [pc, #352]	; (8010538 <PrepareFrame+0x21c>)
 80103d8:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80103dc:	4b56      	ldr	r3, [pc, #344]	; (8010538 <PrepareFrame+0x21c>)
 80103de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80103e2:	4b55      	ldr	r3, [pc, #340]	; (8010538 <PrepareFrame+0x21c>)
 80103e4:	4a55      	ldr	r2, [pc, #340]	; (801053c <PrepareFrame+0x220>)
 80103e6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80103ea:	f107 0318 	add.w	r3, r7, #24
 80103ee:	4618      	mov	r0, r3
 80103f0:	f002 ffd8 	bl	80133a4 <LoRaMacCryptoGetFCntUp>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80103fa:	2312      	movs	r3, #18
 80103fc:	e098      	b.n	8010530 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	b29a      	uxth	r2, r3
 8010402:	4b4d      	ldr	r3, [pc, #308]	; (8010538 <PrepareFrame+0x21c>)
 8010404:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8010408:	4b4b      	ldr	r3, [pc, #300]	; (8010538 <PrepareFrame+0x21c>)
 801040a:	2200      	movs	r2, #0
 801040c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8010410:	4b49      	ldr	r3, [pc, #292]	; (8010538 <PrepareFrame+0x21c>)
 8010412:	2200      	movs	r2, #0
 8010414:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	4a47      	ldr	r2, [pc, #284]	; (8010538 <PrepareFrame+0x21c>)
 801041c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010420:	f107 0314 	add.w	r3, r7, #20
 8010424:	4618      	mov	r0, r3
 8010426:	f002 f99b 	bl	8012760 <LoRaMacCommandsGetSizeSerializedCmds>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d001      	beq.n	8010434 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010430:	2313      	movs	r3, #19
 8010432:	e07d      	b.n	8010530 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d076      	beq.n	8010528 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801043a:	4b42      	ldr	r3, [pc, #264]	; (8010544 <PrepareFrame+0x228>)
 801043c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010440:	4618      	mov	r0, r3
 8010442:	f7fe fdab 	bl	800ef9c <GetMaxAppPayloadWithoutFOptsLength>
 8010446:	4603      	mov	r3, r0
 8010448:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801044a:	4b3b      	ldr	r3, [pc, #236]	; (8010538 <PrepareFrame+0x21c>)
 801044c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010450:	2b00      	cmp	r3, #0
 8010452:	d01d      	beq.n	8010490 <PrepareFrame+0x174>
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	2b0f      	cmp	r3, #15
 8010458:	d81a      	bhi.n	8010490 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801045a:	f107 0314 	add.w	r3, r7, #20
 801045e:	4a3a      	ldr	r2, [pc, #232]	; (8010548 <PrepareFrame+0x22c>)
 8010460:	4619      	mov	r1, r3
 8010462:	200f      	movs	r0, #15
 8010464:	f002 f992 	bl	801278c <LoRaMacCommandsSerializeCmds>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d001      	beq.n	8010472 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801046e:	2313      	movs	r3, #19
 8010470:	e05e      	b.n	8010530 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	f003 030f 	and.w	r3, r3, #15
 8010478:	b2d9      	uxtb	r1, r3
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	7813      	ldrb	r3, [r2, #0]
 801047e:	f361 0303 	bfi	r3, r1, #0, #4
 8010482:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	781a      	ldrb	r2, [r3, #0]
 8010488:	4b2b      	ldr	r3, [pc, #172]	; (8010538 <PrepareFrame+0x21c>)
 801048a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801048e:	e04b      	b.n	8010528 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010490:	4b29      	ldr	r3, [pc, #164]	; (8010538 <PrepareFrame+0x21c>)
 8010492:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010496:	2b00      	cmp	r3, #0
 8010498:	d010      	beq.n	80104bc <PrepareFrame+0x1a0>
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	2b0f      	cmp	r3, #15
 801049e:	d90d      	bls.n	80104bc <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80104a0:	7ffb      	ldrb	r3, [r7, #31]
 80104a2:	f107 0114 	add.w	r1, r7, #20
 80104a6:	4a29      	ldr	r2, [pc, #164]	; (801054c <PrepareFrame+0x230>)
 80104a8:	4618      	mov	r0, r3
 80104aa:	f002 f96f 	bl	801278c <LoRaMacCommandsSerializeCmds>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104b4:	2313      	movs	r3, #19
 80104b6:	e03b      	b.n	8010530 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80104b8:	230a      	movs	r3, #10
 80104ba:	e039      	b.n	8010530 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80104bc:	7ffb      	ldrb	r3, [r7, #31]
 80104be:	f107 0114 	add.w	r1, r7, #20
 80104c2:	4a22      	ldr	r2, [pc, #136]	; (801054c <PrepareFrame+0x230>)
 80104c4:	4618      	mov	r0, r3
 80104c6:	f002 f961 	bl	801278c <LoRaMacCommandsSerializeCmds>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104d0:	2313      	movs	r3, #19
 80104d2:	e02d      	b.n	8010530 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80104d4:	4b18      	ldr	r3, [pc, #96]	; (8010538 <PrepareFrame+0x21c>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80104dc:	4b16      	ldr	r3, [pc, #88]	; (8010538 <PrepareFrame+0x21c>)
 80104de:	4a1b      	ldr	r2, [pc, #108]	; (801054c <PrepareFrame+0x230>)
 80104e0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	4b13      	ldr	r3, [pc, #76]	; (8010538 <PrepareFrame+0x21c>)
 80104ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80104ee:	e01b      	b.n	8010528 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d01a      	beq.n	801052c <PrepareFrame+0x210>
 80104f6:	4b10      	ldr	r3, [pc, #64]	; (8010538 <PrepareFrame+0x21c>)
 80104f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d015      	beq.n	801052c <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010500:	4813      	ldr	r0, [pc, #76]	; (8010550 <PrepareFrame+0x234>)
 8010502:	4b0d      	ldr	r3, [pc, #52]	; (8010538 <PrepareFrame+0x21c>)
 8010504:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010508:	b29b      	uxth	r3, r3
 801050a:	461a      	mov	r2, r3
 801050c:	6839      	ldr	r1, [r7, #0]
 801050e:	f006 f8ee 	bl	80166ee <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010512:	4b09      	ldr	r3, [pc, #36]	; (8010538 <PrepareFrame+0x21c>)
 8010514:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010518:	b29b      	uxth	r3, r3
 801051a:	3301      	adds	r3, #1
 801051c:	b29a      	uxth	r2, r3
 801051e:	4b06      	ldr	r3, [pc, #24]	; (8010538 <PrepareFrame+0x21c>)
 8010520:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010522:	e003      	b.n	801052c <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010524:	2302      	movs	r3, #2
 8010526:	e003      	b.n	8010530 <PrepareFrame+0x214>
            break;
 8010528:	bf00      	nop
 801052a:	e000      	b.n	801052e <PrepareFrame+0x212>
            break;
 801052c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801052e:	2300      	movs	r3, #0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}
 8010538:	2000054c 	.word	0x2000054c
 801053c:	20000684 	.word	0x20000684
 8010540:	2000054e 	.word	0x2000054e
 8010544:	20000a54 	.word	0x20000a54
 8010548:	20000664 	.word	0x20000664
 801054c:	200009d4 	.word	0x200009d4
 8010550:	2000054f 	.word	0x2000054f

08010554 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b08a      	sub	sp, #40	; 0x28
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801055e:	2303      	movs	r3, #3
 8010560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010564:	2300      	movs	r3, #0
 8010566:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010568:	79fb      	ldrb	r3, [r7, #7]
 801056a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801056c:	4b47      	ldr	r3, [pc, #284]	; (801068c <SendFrameOnChannel+0x138>)
 801056e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010572:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010574:	4b45      	ldr	r3, [pc, #276]	; (801068c <SendFrameOnChannel+0x138>)
 8010576:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801057a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801057c:	4b43      	ldr	r3, [pc, #268]	; (801068c <SendFrameOnChannel+0x138>)
 801057e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010580:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010582:	4b42      	ldr	r3, [pc, #264]	; (801068c <SendFrameOnChannel+0x138>)
 8010584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010586:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010588:	4b41      	ldr	r3, [pc, #260]	; (8010690 <SendFrameOnChannel+0x13c>)
 801058a:	881b      	ldrh	r3, [r3, #0]
 801058c:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801058e:	4b3f      	ldr	r3, [pc, #252]	; (801068c <SendFrameOnChannel+0x138>)
 8010590:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010594:	f107 020f 	add.w	r2, r7, #15
 8010598:	f107 0110 	add.w	r1, r7, #16
 801059c:	4b3d      	ldr	r3, [pc, #244]	; (8010694 <SendFrameOnChannel+0x140>)
 801059e:	f003 fe42 	bl	8014226 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80105a2:	4b3b      	ldr	r3, [pc, #236]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105a4:	2201      	movs	r2, #1
 80105a6:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80105aa:	4b38      	ldr	r3, [pc, #224]	; (801068c <SendFrameOnChannel+0x138>)
 80105ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80105b0:	b2da      	uxtb	r2, r3
 80105b2:	4b37      	ldr	r3, [pc, #220]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105b4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 80105b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80105bc:	4b34      	ldr	r3, [pc, #208]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105be:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 80105c2:	79fb      	ldrb	r3, [r7, #7]
 80105c4:	4a32      	ldr	r2, [pc, #200]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105c6:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105ca:	4b31      	ldr	r3, [pc, #196]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105cc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105d0:	4a2f      	ldr	r2, [pc, #188]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105d2:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80105d6:	4b2e      	ldr	r3, [pc, #184]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105d8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105dc:	4a2c      	ldr	r2, [pc, #176]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105de:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80105e2:	f001 fe69 	bl	80122b8 <LoRaMacClassBIsBeaconModeActive>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00b      	beq.n	8010604 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80105ec:	4b28      	ldr	r3, [pc, #160]	; (8010690 <SendFrameOnChannel+0x13c>)
 80105ee:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80105f2:	4618      	mov	r0, r3
 80105f4:	f001 fecb 	bl	801238e <LoRaMacClassBIsUplinkCollision>
 80105f8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d001      	beq.n	8010604 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010600:	2310      	movs	r3, #16
 8010602:	e03e      	b.n	8010682 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010604:	4b21      	ldr	r3, [pc, #132]	; (801068c <SendFrameOnChannel+0x138>)
 8010606:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801060a:	2b01      	cmp	r3, #1
 801060c:	d101      	bne.n	8010612 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801060e:	f001 fec8 	bl	80123a2 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010612:	f001 fe62 	bl	80122da <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010616:	4b1d      	ldr	r3, [pc, #116]	; (801068c <SendFrameOnChannel+0x138>)
 8010618:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801061c:	b2db      	uxtb	r3, r3
 801061e:	4a1c      	ldr	r2, [pc, #112]	; (8010690 <SendFrameOnChannel+0x13c>)
 8010620:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8010624:	4611      	mov	r1, r2
 8010626:	4618      	mov	r0, r3
 8010628:	f7ff fc88 	bl	800ff3c <SecureFrame>
 801062c:	4603      	mov	r3, r0
 801062e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8010632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010636:	2b00      	cmp	r3, #0
 8010638:	d002      	beq.n	8010640 <SendFrameOnChannel+0xec>
    {
        return status;
 801063a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801063e:	e020      	b.n	8010682 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010640:	4b13      	ldr	r3, [pc, #76]	; (8010690 <SendFrameOnChannel+0x13c>)
 8010642:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010646:	f043 0302 	orr.w	r3, r3, #2
 801064a:	4a11      	ldr	r2, [pc, #68]	; (8010690 <SendFrameOnChannel+0x13c>)
 801064c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8010650:	4b0f      	ldr	r3, [pc, #60]	; (8010690 <SendFrameOnChannel+0x13c>)
 8010652:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010656:	f083 0301 	eor.w	r3, r3, #1
 801065a:	b2db      	uxtb	r3, r3
 801065c:	2b00      	cmp	r3, #0
 801065e:	d007      	beq.n	8010670 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010660:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <SendFrameOnChannel+0x13c>)
 8010662:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010666:	3301      	adds	r3, #1
 8010668:	b2da      	uxtb	r2, r3
 801066a:	4b09      	ldr	r3, [pc, #36]	; (8010690 <SendFrameOnChannel+0x13c>)
 801066c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010670:	4b09      	ldr	r3, [pc, #36]	; (8010698 <SendFrameOnChannel+0x144>)
 8010672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010674:	4a06      	ldr	r2, [pc, #24]	; (8010690 <SendFrameOnChannel+0x13c>)
 8010676:	8812      	ldrh	r2, [r2, #0]
 8010678:	b2d2      	uxtb	r2, r2
 801067a:	4611      	mov	r1, r2
 801067c:	4807      	ldr	r0, [pc, #28]	; (801069c <SendFrameOnChannel+0x148>)
 801067e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3728      	adds	r7, #40	; 0x28
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	20000a54 	.word	0x20000a54
 8010690:	2000054c 	.word	0x2000054c
 8010694:	20000964 	.word	0x20000964
 8010698:	0801bf10 	.word	0x0801bf10
 801069c:	2000054e 	.word	0x2000054e

080106a0 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b086      	sub	sp, #24
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	4603      	mov	r3, r0
 80106a8:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80106aa:	4b15      	ldr	r3, [pc, #84]	; (8010700 <SetTxContinuousWave+0x60>)
 80106ac:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80106b0:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80106b2:	4b14      	ldr	r3, [pc, #80]	; (8010704 <SetTxContinuousWave+0x64>)
 80106b4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80106b8:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80106ba:	4b12      	ldr	r3, [pc, #72]	; (8010704 <SetTxContinuousWave+0x64>)
 80106bc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80106c0:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80106c2:	4b10      	ldr	r3, [pc, #64]	; (8010704 <SetTxContinuousWave+0x64>)
 80106c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106c6:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80106c8:	4b0e      	ldr	r3, [pc, #56]	; (8010704 <SetTxContinuousWave+0x64>)
 80106ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106cc:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 80106ce:	88fb      	ldrh	r3, [r7, #6]
 80106d0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 80106d2:	4b0c      	ldr	r3, [pc, #48]	; (8010704 <SetTxContinuousWave+0x64>)
 80106d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106d8:	f107 0208 	add.w	r2, r7, #8
 80106dc:	4611      	mov	r1, r2
 80106de:	4618      	mov	r0, r3
 80106e0:	f003 fe50 	bl	8014384 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106e4:	4b06      	ldr	r3, [pc, #24]	; (8010700 <SetTxContinuousWave+0x60>)
 80106e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80106ea:	f043 0302 	orr.w	r3, r3, #2
 80106ee:	4a04      	ldr	r2, [pc, #16]	; (8010700 <SetTxContinuousWave+0x60>)
 80106f0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80106f4:	2300      	movs	r3, #0
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3718      	adds	r7, #24
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	2000054c 	.word	0x2000054c
 8010704:	20000a54 	.word	0x20000a54

08010708 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	4603      	mov	r3, r0
 8010710:	6039      	str	r1, [r7, #0]
 8010712:	80fb      	strh	r3, [r7, #6]
 8010714:	4613      	mov	r3, r2
 8010716:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010718:	4b09      	ldr	r3, [pc, #36]	; (8010740 <SetTxContinuousWave1+0x38>)
 801071a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010720:	88fa      	ldrh	r2, [r7, #6]
 8010722:	6838      	ldr	r0, [r7, #0]
 8010724:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010726:	4b07      	ldr	r3, [pc, #28]	; (8010744 <SetTxContinuousWave1+0x3c>)
 8010728:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801072c:	f043 0302 	orr.w	r3, r3, #2
 8010730:	4a04      	ldr	r2, [pc, #16]	; (8010744 <SetTxContinuousWave1+0x3c>)
 8010732:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010736:	2300      	movs	r3, #0
}
 8010738:	4618      	mov	r0, r3
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	0801bf10 	.word	0x0801bf10
 8010744:	2000054c 	.word	0x2000054c

08010748 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8010748:	b480      	push	{r7}
 801074a:	af00      	add	r7, sp, #0
    return &Nvm;
 801074c:	4b02      	ldr	r3, [pc, #8]	; (8010758 <GetNvmData+0x10>)
}
 801074e:	4618      	mov	r0, r3
 8010750:	46bd      	mov	sp, r7
 8010752:	bc80      	pop	{r7}
 8010754:	4770      	bx	lr
 8010756:	bf00      	nop
 8010758:	20000a54 	.word	0x20000a54

0801075c <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010764:	2300      	movs	r3, #0
 8010766:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d101      	bne.n	8010772 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801076e:	2303      	movs	r3, #3
 8010770:	e09a      	b.n	80108a8 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010772:	4b4f      	ldr	r3, [pc, #316]	; (80108b0 <RestoreNvmData+0x154>)
 8010774:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010778:	2b01      	cmp	r3, #1
 801077a:	d001      	beq.n	8010780 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 801077c:	2301      	movs	r3, #1
 801077e:	e093      	b.n	80108a8 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2124      	movs	r1, #36	; 0x24
 8010784:	4618      	mov	r0, r3
 8010786:	f006 f807 	bl	8016798 <Crc32>
 801078a:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	429a      	cmp	r2, r3
 8010794:	d105      	bne.n	80107a2 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2228      	movs	r2, #40	; 0x28
 801079a:	4619      	mov	r1, r3
 801079c:	4845      	ldr	r0, [pc, #276]	; (80108b4 <RestoreNvmData+0x158>)
 801079e:	f005 ffa6 	bl	80166ee <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	3328      	adds	r3, #40	; 0x28
 80107a6:	2114      	movs	r1, #20
 80107a8:	4618      	mov	r0, r3
 80107aa:	f005 fff5 	bl	8016798 <Crc32>
 80107ae:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d106      	bne.n	80107c8 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	3328      	adds	r3, #40	; 0x28
 80107be:	2218      	movs	r2, #24
 80107c0:	4619      	mov	r1, r3
 80107c2:	483d      	ldr	r0, [pc, #244]	; (80108b8 <RestoreNvmData+0x15c>)
 80107c4:	f005 ff93 	bl	80166ee <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	3340      	adds	r3, #64	; 0x40
 80107cc:	21d4      	movs	r1, #212	; 0xd4
 80107ce:	4618      	mov	r0, r3
 80107d0:	f005 ffe2 	bl	8016798 <Crc32>
 80107d4:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d11f      	bne.n	8010822 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	3340      	adds	r3, #64	; 0x40
 80107e6:	22d8      	movs	r2, #216	; 0xd8
 80107e8:	4619      	mov	r1, r3
 80107ea:	4834      	ldr	r0, [pc, #208]	; (80108bc <RestoreNvmData+0x160>)
 80107ec:	f005 ff7f 	bl	80166ee <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80107f0:	4b2f      	ldr	r3, [pc, #188]	; (80108b0 <RestoreNvmData+0x154>)
 80107f2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80107f6:	4b2e      	ldr	r3, [pc, #184]	; (80108b0 <RestoreNvmData+0x154>)
 80107f8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80107fc:	4b2d      	ldr	r3, [pc, #180]	; (80108b4 <RestoreNvmData+0x158>)
 80107fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010800:	4a2b      	ldr	r2, [pc, #172]	; (80108b0 <RestoreNvmData+0x154>)
 8010802:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010806:	4b2b      	ldr	r3, [pc, #172]	; (80108b4 <RestoreNvmData+0x158>)
 8010808:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801080c:	4b28      	ldr	r3, [pc, #160]	; (80108b0 <RestoreNvmData+0x154>)
 801080e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010812:	4b27      	ldr	r3, [pc, #156]	; (80108b0 <RestoreNvmData+0x154>)
 8010814:	2201      	movs	r2, #1
 8010816:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801081a:	4b25      	ldr	r3, [pc, #148]	; (80108b0 <RestoreNvmData+0x154>)
 801081c:	2202      	movs	r2, #2
 801081e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010828:	21bc      	movs	r1, #188	; 0xbc
 801082a:	4618      	mov	r0, r3
 801082c:	f005 ffb4 	bl	8016798 <Crc32>
 8010830:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	429a      	cmp	r2, r3
 801083c:	d107      	bne.n	801084e <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010844:	22c0      	movs	r2, #192	; 0xc0
 8010846:	4619      	mov	r1, r3
 8010848:	481d      	ldr	r0, [pc, #116]	; (80108c0 <RestoreNvmData+0x164>)
 801084a:	f005 ff50 	bl	80166ee <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010854:	2190      	movs	r1, #144	; 0x90
 8010856:	4618      	mov	r0, r3
 8010858:	f005 ff9e 	bl	8016798 <Crc32>
 801085c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	429a      	cmp	r2, r3
 8010868:	d107      	bne.n	801087a <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010870:	2294      	movs	r2, #148	; 0x94
 8010872:	4619      	mov	r1, r3
 8010874:	4813      	ldr	r0, [pc, #76]	; (80108c4 <RestoreNvmData+0x168>)
 8010876:	f005 ff3a 	bl	80166ee <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010880:	2114      	movs	r1, #20
 8010882:	4618      	mov	r0, r3
 8010884:	f005 ff88 	bl	8016798 <Crc32>
 8010888:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	429a      	cmp	r2, r3
 8010894:	d107      	bne.n	80108a6 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801089c:	2218      	movs	r2, #24
 801089e:	4619      	mov	r1, r3
 80108a0:	4809      	ldr	r0, [pc, #36]	; (80108c8 <RestoreNvmData+0x16c>)
 80108a2:	f005 ff24 	bl	80166ee <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	2000054c 	.word	0x2000054c
 80108b4:	20000a54 	.word	0x20000a54
 80108b8:	20000a7c 	.word	0x20000a7c
 80108bc:	20000a94 	.word	0x20000a94
 80108c0:	20000b6c 	.word	0x20000b6c
 80108c4:	20000c2c 	.word	0x20000c2c
 80108c8:	20000d88 	.word	0x20000d88

080108cc <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <DetermineFrameType+0x16>
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108e2:	2303      	movs	r3, #3
 80108e4:	e03b      	b.n	801095e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	7b1b      	ldrb	r3, [r3, #12]
 80108ea:	f003 030f 	and.w	r3, r3, #15
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d008      	beq.n	8010906 <DetermineFrameType+0x3a>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d003      	beq.n	8010906 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	2200      	movs	r2, #0
 8010902:	701a      	strb	r2, [r3, #0]
 8010904:	e02a      	b.n	801095c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801090c:	2b00      	cmp	r3, #0
 801090e:	d103      	bne.n	8010918 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	2201      	movs	r2, #1
 8010914:	701a      	strb	r2, [r3, #0]
 8010916:	e021      	b.n	801095c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	7b1b      	ldrb	r3, [r3, #12]
 801091c:	f003 030f 	and.w	r3, r3, #15
 8010920:	b2db      	uxtb	r3, r3
 8010922:	2b00      	cmp	r3, #0
 8010924:	d108      	bne.n	8010938 <DetermineFrameType+0x6c>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f893 3020 	ldrb.w	r3, [r3, #32]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d103      	bne.n	8010938 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2202      	movs	r2, #2
 8010934:	701a      	strb	r2, [r3, #0]
 8010936:	e011      	b.n	801095c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	7b1b      	ldrb	r3, [r3, #12]
 801093c:	f003 030f 	and.w	r3, r3, #15
 8010940:	b2db      	uxtb	r3, r3
 8010942:	2b00      	cmp	r3, #0
 8010944:	d108      	bne.n	8010958 <DetermineFrameType+0x8c>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f893 3020 	ldrb.w	r3, [r3, #32]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d003      	beq.n	8010958 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2203      	movs	r2, #3
 8010954:	701a      	strb	r2, [r3, #0]
 8010956:	e001      	b.n	801095c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010958:	2317      	movs	r3, #23
 801095a:	e000      	b.n	801095e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	370c      	adds	r7, #12
 8010962:	46bd      	mov	sp, r7
 8010964:	bc80      	pop	{r7}
 8010966:	4770      	bx	lr

08010968 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010968:	b480      	push	{r7}
 801096a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801096c:	4b12      	ldr	r3, [pc, #72]	; (80109b8 <CheckRetransUnconfirmedUplink+0x50>)
 801096e:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010972:	4b12      	ldr	r3, [pc, #72]	; (80109bc <CheckRetransUnconfirmedUplink+0x54>)
 8010974:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010978:	429a      	cmp	r2, r3
 801097a:	d301      	bcc.n	8010980 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801097c:	2301      	movs	r3, #1
 801097e:	e016      	b.n	80109ae <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010980:	4b0d      	ldr	r3, [pc, #52]	; (80109b8 <CheckRetransUnconfirmedUplink+0x50>)
 8010982:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010986:	f003 0302 	and.w	r3, r3, #2
 801098a:	b2db      	uxtb	r3, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00d      	beq.n	80109ac <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010990:	4b0a      	ldr	r3, [pc, #40]	; (80109bc <CheckRetransUnconfirmedUplink+0x54>)
 8010992:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010996:	2b00      	cmp	r3, #0
 8010998:	d101      	bne.n	801099e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801099a:	2301      	movs	r3, #1
 801099c:	e007      	b.n	80109ae <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801099e:	4b06      	ldr	r3, [pc, #24]	; (80109b8 <CheckRetransUnconfirmedUplink+0x50>)
 80109a0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80109a8:	2301      	movs	r3, #1
 80109aa:	e000      	b.n	80109ae <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80109ac:	2300      	movs	r3, #0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bc80      	pop	{r7}
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop
 80109b8:	2000054c 	.word	0x2000054c
 80109bc:	20000a54 	.word	0x20000a54

080109c0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80109c0:	b480      	push	{r7}
 80109c2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109c4:	4b0e      	ldr	r3, [pc, #56]	; (8010a00 <CheckRetransConfirmedUplink+0x40>)
 80109c6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 80109ca:	4b0d      	ldr	r3, [pc, #52]	; (8010a00 <CheckRetransConfirmedUplink+0x40>)
 80109cc:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d301      	bcc.n	80109d8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80109d4:	2301      	movs	r3, #1
 80109d6:	e00f      	b.n	80109f8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80109d8:	4b09      	ldr	r3, [pc, #36]	; (8010a00 <CheckRetransConfirmedUplink+0x40>)
 80109da:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80109de:	f003 0302 	and.w	r3, r3, #2
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d006      	beq.n	80109f6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80109e8:	4b05      	ldr	r3, [pc, #20]	; (8010a00 <CheckRetransConfirmedUplink+0x40>)
 80109ea:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d001      	beq.n	80109f6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80109f2:	2301      	movs	r3, #1
 80109f4:	e000      	b.n	80109f8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80109f6:	2300      	movs	r3, #0
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bc80      	pop	{r7}
 80109fe:	4770      	bx	lr
 8010a00:	2000054c 	.word	0x2000054c

08010a04 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8010a04:	b480      	push	{r7}
 8010a06:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010a08:	4b1a      	ldr	r3, [pc, #104]	; (8010a74 <StopRetransmission+0x70>)
 8010a0a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010a0e:	f003 0302 	and.w	r3, r3, #2
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d009      	beq.n	8010a2c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010a18:	4b16      	ldr	r3, [pc, #88]	; (8010a74 <StopRetransmission+0x70>)
 8010a1a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00e      	beq.n	8010a40 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010a22:	4b14      	ldr	r3, [pc, #80]	; (8010a74 <StopRetransmission+0x70>)
 8010a24:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d009      	beq.n	8010a40 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010a2c:	4b12      	ldr	r3, [pc, #72]	; (8010a78 <StopRetransmission+0x74>)
 8010a2e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8010a36:	4b10      	ldr	r3, [pc, #64]	; (8010a78 <StopRetransmission+0x74>)
 8010a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	4a0e      	ldr	r2, [pc, #56]	; (8010a78 <StopRetransmission+0x74>)
 8010a3e:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010a40:	4b0c      	ldr	r3, [pc, #48]	; (8010a74 <StopRetransmission+0x70>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010a48:	4b0a      	ldr	r3, [pc, #40]	; (8010a74 <StopRetransmission+0x70>)
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8010a50:	4b08      	ldr	r3, [pc, #32]	; (8010a74 <StopRetransmission+0x70>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a58:	4b06      	ldr	r3, [pc, #24]	; (8010a74 <StopRetransmission+0x70>)
 8010a5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a5e:	f023 0302 	bic.w	r3, r3, #2
 8010a62:	4a04      	ldr	r2, [pc, #16]	; (8010a74 <StopRetransmission+0x70>)
 8010a64:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010a68:	2301      	movs	r3, #1
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bc80      	pop	{r7}
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	2000054c 	.word	0x2000054c
 8010a78:	20000a54 	.word	0x20000a54

08010a7c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a86:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <CallNvmDataChangeCallback+0x38>)
 8010a88:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00c      	beq.n	8010aaa <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010a90:	4b08      	ldr	r3, [pc, #32]	; (8010ab4 <CallNvmDataChangeCallback+0x38>)
 8010a92:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010a96:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d006      	beq.n	8010aaa <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010a9c:	4b05      	ldr	r3, [pc, #20]	; (8010ab4 <CallNvmDataChangeCallback+0x38>)
 8010a9e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	88fa      	ldrh	r2, [r7, #6]
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	4798      	blx	r3
    }
}
 8010aaa:	bf00      	nop
 8010aac:	3708      	adds	r7, #8
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
 8010ab2:	bf00      	nop
 8010ab4:	2000054c 	.word	0x2000054c

08010ab8 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010abe:	4b1b      	ldr	r3, [pc, #108]	; (8010b2c <AckTimeoutRetriesProcess+0x74>)
 8010ac0:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010ac4:	4b19      	ldr	r3, [pc, #100]	; (8010b2c <AckTimeoutRetriesProcess+0x74>)
 8010ac6:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d229      	bcs.n	8010b22 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010ace:	4b17      	ldr	r3, [pc, #92]	; (8010b2c <AckTimeoutRetriesProcess+0x74>)
 8010ad0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	4b14      	ldr	r3, [pc, #80]	; (8010b2c <AckTimeoutRetriesProcess+0x74>)
 8010ada:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010ade:	4b13      	ldr	r3, [pc, #76]	; (8010b2c <AckTimeoutRetriesProcess+0x74>)
 8010ae0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010ae4:	f003 0301 	and.w	r3, r3, #1
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d019      	beq.n	8010b22 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010aee:	2322      	movs	r3, #34	; 0x22
 8010af0:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010af2:	4b0f      	ldr	r3, [pc, #60]	; (8010b30 <AckTimeoutRetriesProcess+0x78>)
 8010af4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010af8:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010afa:	4b0d      	ldr	r3, [pc, #52]	; (8010b30 <AckTimeoutRetriesProcess+0x78>)
 8010afc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010b00:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b02:	4b0b      	ldr	r3, [pc, #44]	; (8010b30 <AckTimeoutRetriesProcess+0x78>)
 8010b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b08:	f107 0208 	add.w	r2, r7, #8
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f003 fae2 	bl	80140d8 <RegionGetPhyParam>
 8010b14:	4603      	mov	r3, r0
 8010b16:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	b25a      	sxtb	r2, r3
 8010b1c:	4b04      	ldr	r3, [pc, #16]	; (8010b30 <AckTimeoutRetriesProcess+0x78>)
 8010b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010b22:	bf00      	nop
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	2000054c 	.word	0x2000054c
 8010b30:	20000a54 	.word	0x20000a54

08010b34 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010b3a:	4b14      	ldr	r3, [pc, #80]	; (8010b8c <AckTimeoutRetriesFinalize+0x58>)
 8010b3c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010b40:	f083 0301 	eor.w	r3, r3, #1
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d015      	beq.n	8010b76 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b4e:	4b10      	ldr	r3, [pc, #64]	; (8010b90 <AckTimeoutRetriesFinalize+0x5c>)
 8010b50:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b52:	4b10      	ldr	r3, [pc, #64]	; (8010b94 <AckTimeoutRetriesFinalize+0x60>)
 8010b54:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b56:	4b10      	ldr	r3, [pc, #64]	; (8010b98 <AckTimeoutRetriesFinalize+0x64>)
 8010b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b5c:	1d3a      	adds	r2, r7, #4
 8010b5e:	4611      	mov	r1, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f003 fae3 	bl	801412c <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010b66:	4b09      	ldr	r3, [pc, #36]	; (8010b8c <AckTimeoutRetriesFinalize+0x58>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 8010b6e:	4b07      	ldr	r3, [pc, #28]	; (8010b8c <AckTimeoutRetriesFinalize+0x58>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010b76:	4b05      	ldr	r3, [pc, #20]	; (8010b8c <AckTimeoutRetriesFinalize+0x58>)
 8010b78:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010b7c:	4b03      	ldr	r3, [pc, #12]	; (8010b8c <AckTimeoutRetriesFinalize+0x58>)
 8010b7e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010b82:	bf00      	nop
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	2000054c 	.word	0x2000054c
 8010b90:	20000c2c 	.word	0x20000c2c
 8010b94:	20000cc0 	.word	0x20000cc0
 8010b98:	20000a54 	.word	0x20000a54

08010b9c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010ba0:	4b0b      	ldr	r3, [pc, #44]	; (8010bd0 <IsRequestPending+0x34>)
 8010ba2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010ba6:	f003 0304 	and.w	r3, r3, #4
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d107      	bne.n	8010bc0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010bb0:	4b07      	ldr	r3, [pc, #28]	; (8010bd0 <IsRequestPending+0x34>)
 8010bb2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010bb6:	f003 0301 	and.w	r3, r3, #1
 8010bba:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d001      	beq.n	8010bc4 <IsRequestPending+0x28>
    {
        return 1;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e000      	b.n	8010bc6 <IsRequestPending+0x2a>
    }
    return 0;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bc80      	pop	{r7}
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop
 8010bd0:	2000054c 	.word	0x2000054c

08010bd4 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010bd4:	b590      	push	{r4, r7, lr}
 8010bd6:	b08f      	sub	sp, #60	; 0x3c
 8010bd8:	af02      	add	r7, sp, #8
 8010bda:	6178      	str	r0, [r7, #20]
 8010bdc:	6139      	str	r1, [r7, #16]
 8010bde:	4613      	mov	r3, r2
 8010be0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <LoRaMacInitialization+0x1a>
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d101      	bne.n	8010bf2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bee:	2303      	movs	r3, #3
 8010bf0:	e275      	b.n	80110de <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00b      	beq.n	8010c12 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d007      	beq.n	8010c12 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d003      	beq.n	8010c12 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d101      	bne.n	8010c16 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010c12:	2303      	movs	r3, #3
 8010c14:	e263      	b.n	80110de <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f003 fa4d 	bl	80140b8 <RegionIsActive>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	f083 0301 	eor.w	r3, r3, #1
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d001      	beq.n	8010c2e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010c2a:	2309      	movs	r3, #9
 8010c2c:	e257      	b.n	80110de <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010c2e:	6978      	ldr	r0, [r7, #20]
 8010c30:	f001 fef6 	bl	8012a20 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010c34:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8010c38:	2100      	movs	r1, #0
 8010c3a:	48c7      	ldr	r0, [pc, #796]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010c3c:	f005 fd92 	bl	8016764 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010c40:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010c44:	2100      	movs	r1, #0
 8010c46:	48c5      	ldr	r0, [pc, #788]	; (8010f5c <LoRaMacInitialization+0x388>)
 8010c48:	f005 fd8c 	bl	8016764 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010c4c:	4bc3      	ldr	r3, [pc, #780]	; (8010f5c <LoRaMacInitialization+0x388>)
 8010c4e:	2201      	movs	r2, #1
 8010c50:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010c54:	4bc1      	ldr	r3, [pc, #772]	; (8010f5c <LoRaMacInitialization+0x388>)
 8010c56:	2201      	movs	r2, #1
 8010c58:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010c5c:	4abe      	ldr	r2, [pc, #760]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010c5e:	7bfb      	ldrb	r3, [r7, #15]
 8010c60:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010c64:	4bbc      	ldr	r3, [pc, #752]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010c6c:	4bba      	ldr	r3, [pc, #744]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010c74:	4bb8      	ldr	r3, [pc, #736]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010c76:	4aba      	ldr	r2, [pc, #744]	; (8010f60 <LoRaMacInitialization+0x38c>)
 8010c78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010c7c:	230f      	movs	r3, #15
 8010c7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c82:	4bb5      	ldr	r3, [pc, #724]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f003 fa22 	bl	80140d8 <RegionGetPhyParam>
 8010c94:	4603      	mov	r3, r0
 8010c96:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	bf14      	ite	ne
 8010c9e:	2301      	movne	r3, #1
 8010ca0:	2300      	moveq	r3, #0
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	4bac      	ldr	r3, [pc, #688]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010ca6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010caa:	230a      	movs	r3, #10
 8010cac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cb0:	4ba9      	ldr	r3, [pc, #676]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010cba:	4611      	mov	r1, r2
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f003 fa0b 	bl	80140d8 <RegionGetPhyParam>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	b25a      	sxtb	r2, r3
 8010cca:	4ba3      	ldr	r3, [pc, #652]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010ccc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010cd0:	2306      	movs	r3, #6
 8010cd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cd6:	4ba0      	ldr	r3, [pc, #640]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f003 f9f8 	bl	80140d8 <RegionGetPhyParam>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cee:	b25a      	sxtb	r2, r3
 8010cf0:	4b99      	ldr	r3, [pc, #612]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010cf2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010cf6:	2310      	movs	r3, #16
 8010cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cfc:	4b96      	ldr	r3, [pc, #600]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d06:	4611      	mov	r1, r2
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f003 f9e5 	bl	80140d8 <RegionGetPhyParam>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	4a90      	ldr	r2, [pc, #576]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010d1a:	2311      	movs	r3, #17
 8010d1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d20:	4b8d      	ldr	r3, [pc, #564]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d2a:	4611      	mov	r1, r2
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f003 f9d3 	bl	80140d8 <RegionGetPhyParam>
 8010d32:	4603      	mov	r3, r0
 8010d34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d38:	4a87      	ldr	r2, [pc, #540]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010d3e:	2312      	movs	r3, #18
 8010d40:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d44:	4b84      	ldr	r3, [pc, #528]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d4e:	4611      	mov	r1, r2
 8010d50:	4618      	mov	r0, r3
 8010d52:	f003 f9c1 	bl	80140d8 <RegionGetPhyParam>
 8010d56:	4603      	mov	r3, r0
 8010d58:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	4a7e      	ldr	r2, [pc, #504]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010d62:	2313      	movs	r3, #19
 8010d64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d68:	4b7b      	ldr	r3, [pc, #492]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d72:	4611      	mov	r1, r2
 8010d74:	4618      	mov	r0, r3
 8010d76:	f003 f9af 	bl	80140d8 <RegionGetPhyParam>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d80:	4a75      	ldr	r2, [pc, #468]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010d86:	2314      	movs	r3, #20
 8010d88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d8c:	4b72      	ldr	r3, [pc, #456]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010d96:	4611      	mov	r1, r2
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f003 f99d 	bl	80140d8 <RegionGetPhyParam>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da4:	4a6c      	ldr	r2, [pc, #432]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010da6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010daa:	2317      	movs	r3, #23
 8010dac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010db0:	4b69      	ldr	r3, [pc, #420]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010db6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010dba:	4611      	mov	r1, r2
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f003 f98b 	bl	80140d8 <RegionGetPhyParam>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	b2da      	uxtb	r2, r3
 8010dca:	4b63      	ldr	r3, [pc, #396]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010dcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010dd0:	2318      	movs	r3, #24
 8010dd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dd6:	4b60      	ldr	r3, [pc, #384]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ddc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010de0:	4611      	mov	r1, r2
 8010de2:	4618      	mov	r0, r3
 8010de4:	f003 f978 	bl	80140d8 <RegionGetPhyParam>
 8010de8:	4603      	mov	r3, r0
 8010dea:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dee:	4a5a      	ldr	r2, [pc, #360]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010df0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	4a58      	ldr	r2, [pc, #352]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010df8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010dfc:	2319      	movs	r3, #25
 8010dfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e02:	4b55      	ldr	r3, [pc, #340]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e08:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f003 f962 	bl	80140d8 <RegionGetPhyParam>
 8010e14:	4603      	mov	r3, r0
 8010e16:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	4b4e      	ldr	r3, [pc, #312]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e1e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	b2da      	uxtb	r2, r3
 8010e26:	4b4c      	ldr	r3, [pc, #304]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e28:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010e2c:	231e      	movs	r3, #30
 8010e2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e32:	4b49      	ldr	r3, [pc, #292]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f003 f94a 	bl	80140d8 <RegionGetPhyParam>
 8010e44:	4603      	mov	r3, r0
 8010e46:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	4b42      	ldr	r3, [pc, #264]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010e52:	231f      	movs	r3, #31
 8010e54:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e58:	4b3f      	ldr	r3, [pc, #252]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e62:	4611      	mov	r1, r2
 8010e64:	4618      	mov	r0, r3
 8010e66:	f003 f937 	bl	80140d8 <RegionGetPhyParam>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	b2da      	uxtb	r2, r3
 8010e72:	4b39      	ldr	r3, [pc, #228]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e74:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e7e:	4b36      	ldr	r3, [pc, #216]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e88:	4611      	mov	r1, r2
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f003 f924 	bl	80140d8 <RegionGetPhyParam>
 8010e90:	4603      	mov	r3, r0
 8010e92:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e96:	4a30      	ldr	r2, [pc, #192]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010e98:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010e9c:	2321      	movs	r3, #33	; 0x21
 8010e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ea2:	4b2d      	ldr	r3, [pc, #180]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ea8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010eac:	4611      	mov	r1, r2
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f003 f912 	bl	80140d8 <RegionGetPhyParam>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eba:	4a27      	ldr	r2, [pc, #156]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010ebc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010ec0:	230b      	movs	r3, #11
 8010ec2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ec6:	4b24      	ldr	r3, [pc, #144]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ecc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ed0:	4611      	mov	r1, r2
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f003 f900 	bl	80140d8 <RegionGetPhyParam>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	4b1e      	ldr	r3, [pc, #120]	; (8010f5c <LoRaMacInitialization+0x388>)
 8010ee2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010ee6:	230c      	movs	r3, #12
 8010ee8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eec:	4b1a      	ldr	r3, [pc, #104]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f003 f8ed 	bl	80140d8 <RegionGetPhyParam>
 8010efe:	4603      	mov	r3, r0
 8010f00:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	4b15      	ldr	r3, [pc, #84]	; (8010f5c <LoRaMacInitialization+0x388>)
 8010f08:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010f0c:	4b12      	ldr	r3, [pc, #72]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f0e:	2201      	movs	r2, #1
 8010f10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010f14:	4b10      	ldr	r3, [pc, #64]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f16:	220a      	movs	r2, #10
 8010f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010f1c:	4b0e      	ldr	r3, [pc, #56]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f1e:	2206      	movs	r2, #6
 8010f20:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010f24:	4b0c      	ldr	r3, [pc, #48]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f2a:	4a0b      	ldr	r2, [pc, #44]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f2c:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010f2e:	4b0a      	ldr	r3, [pc, #40]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f30:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010f34:	4b08      	ldr	r3, [pc, #32]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010f3a:	4b07      	ldr	r3, [pc, #28]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f40:	4a05      	ldr	r2, [pc, #20]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f42:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010f44:	4b04      	ldr	r3, [pc, #16]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f4a:	4a03      	ldr	r2, [pc, #12]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f4c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010f4e:	4b02      	ldr	r3, [pc, #8]	; (8010f58 <LoRaMacInitialization+0x384>)
 8010f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f54:	e006      	b.n	8010f64 <LoRaMacInitialization+0x390>
 8010f56:	bf00      	nop
 8010f58:	20000a54 	.word	0x20000a54
 8010f5c:	2000054c 	.word	0x2000054c
 8010f60:	01000300 	.word	0x01000300
 8010f64:	4a60      	ldr	r2, [pc, #384]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f66:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010f68:	4b5f      	ldr	r3, [pc, #380]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f6e:	4a5e      	ldr	r2, [pc, #376]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f70:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010f72:	4b5d      	ldr	r3, [pc, #372]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010f78:	4a5b      	ldr	r2, [pc, #364]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f7a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010f7c:	4b5a      	ldr	r3, [pc, #360]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f7e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010f82:	4b59      	ldr	r3, [pc, #356]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f8e:	4b57      	ldr	r3, [pc, #348]	; (80110ec <LoRaMacInitialization+0x518>)
 8010f90:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f92:	4b57      	ldr	r3, [pc, #348]	; (80110f0 <LoRaMacInitialization+0x51c>)
 8010f94:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010f96:	4b54      	ldr	r3, [pc, #336]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f9c:	f107 0218 	add.w	r2, r7, #24
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f003 f8c2 	bl	801412c <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010fa8:	4a52      	ldr	r2, [pc, #328]	; (80110f4 <LoRaMacInitialization+0x520>)
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010fb0:	f7ff f85a 	bl	8010068 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010fb4:	4b4c      	ldr	r3, [pc, #304]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010fbc:	4a4d      	ldr	r2, [pc, #308]	; (80110f4 <LoRaMacInitialization+0x520>)
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010fc4:	4b4b      	ldr	r3, [pc, #300]	; (80110f4 <LoRaMacInitialization+0x520>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010fcc:	4b49      	ldr	r3, [pc, #292]	; (80110f4 <LoRaMacInitialization+0x520>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010fd4:	4b44      	ldr	r3, [pc, #272]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010fda:	4b43      	ldr	r3, [pc, #268]	; (80110e8 <LoRaMacInitialization+0x514>)
 8010fdc:	2200      	movs	r2, #0
 8010fde:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	4b44      	ldr	r3, [pc, #272]	; (80110f8 <LoRaMacInitialization+0x524>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8010fec:	4843      	ldr	r0, [pc, #268]	; (80110fc <LoRaMacInitialization+0x528>)
 8010fee:	f009 fb11 	bl	801a614 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	4b42      	ldr	r3, [pc, #264]	; (8011100 <LoRaMacInitialization+0x52c>)
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8010ffe:	4841      	ldr	r0, [pc, #260]	; (8011104 <LoRaMacInitialization+0x530>)
 8011000:	f009 fb08 	bl	801a614 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011004:	2300      	movs	r3, #0
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	4b3f      	ldr	r3, [pc, #252]	; (8011108 <LoRaMacInitialization+0x534>)
 801100a:	2200      	movs	r2, #0
 801100c:	f04f 31ff 	mov.w	r1, #4294967295
 8011010:	483e      	ldr	r0, [pc, #248]	; (801110c <LoRaMacInitialization+0x538>)
 8011012:	f009 faff 	bl	801a614 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011016:	2300      	movs	r3, #0
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	4b3d      	ldr	r3, [pc, #244]	; (8011110 <LoRaMacInitialization+0x53c>)
 801101c:	2200      	movs	r2, #0
 801101e:	f04f 31ff 	mov.w	r1, #4294967295
 8011022:	483c      	ldr	r0, [pc, #240]	; (8011114 <LoRaMacInitialization+0x540>)
 8011024:	f009 faf6 	bl	801a614 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011028:	4c2f      	ldr	r4, [pc, #188]	; (80110e8 <LoRaMacInitialization+0x514>)
 801102a:	463b      	mov	r3, r7
 801102c:	4618      	mov	r0, r3
 801102e:	f008 fe79 	bl	8019d24 <SysTimeGetMcuTime>
 8011032:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8011036:	463a      	mov	r2, r7
 8011038:	e892 0003 	ldmia.w	r2, {r0, r1}
 801103c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011040:	4b2c      	ldr	r3, [pc, #176]	; (80110f4 <LoRaMacInitialization+0x520>)
 8011042:	4a35      	ldr	r2, [pc, #212]	; (8011118 <LoRaMacInitialization+0x544>)
 8011044:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011048:	4b2a      	ldr	r3, [pc, #168]	; (80110f4 <LoRaMacInitialization+0x520>)
 801104a:	4a34      	ldr	r2, [pc, #208]	; (801111c <LoRaMacInitialization+0x548>)
 801104c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011050:	4b28      	ldr	r3, [pc, #160]	; (80110f4 <LoRaMacInitialization+0x520>)
 8011052:	4a33      	ldr	r2, [pc, #204]	; (8011120 <LoRaMacInitialization+0x54c>)
 8011054:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011058:	4b26      	ldr	r3, [pc, #152]	; (80110f4 <LoRaMacInitialization+0x520>)
 801105a:	4a32      	ldr	r2, [pc, #200]	; (8011124 <LoRaMacInitialization+0x550>)
 801105c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011060:	4b24      	ldr	r3, [pc, #144]	; (80110f4 <LoRaMacInitialization+0x520>)
 8011062:	4a31      	ldr	r2, [pc, #196]	; (8011128 <LoRaMacInitialization+0x554>)
 8011064:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011068:	4b30      	ldr	r3, [pc, #192]	; (801112c <LoRaMacInitialization+0x558>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	4830      	ldr	r0, [pc, #192]	; (8011130 <LoRaMacInitialization+0x55c>)
 801106e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	4619      	mov	r1, r3
 8011076:	482f      	ldr	r0, [pc, #188]	; (8011134 <LoRaMacInitialization+0x560>)
 8011078:	f7fa ff52 	bl	800bf20 <SecureElementInit>
 801107c:	4603      	mov	r3, r0
 801107e:	2b00      	cmp	r3, #0
 8011080:	d001      	beq.n	8011086 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011082:	2311      	movs	r3, #17
 8011084:	e02b      	b.n	80110de <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011086:	4818      	ldr	r0, [pc, #96]	; (80110e8 <LoRaMacInitialization+0x514>)
 8011088:	f002 f950 	bl	801332c <LoRaMacCryptoInit>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011092:	2311      	movs	r3, #17
 8011094:	e023      	b.n	80110de <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011096:	f001 fa95 	bl	80125c4 <LoRaMacCommandsInit>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80110a0:	2313      	movs	r3, #19
 80110a2:	e01c      	b.n	80110de <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80110a4:	4824      	ldr	r0, [pc, #144]	; (8011138 <LoRaMacInitialization+0x564>)
 80110a6:	f002 f9ff 	bl	80134a8 <LoRaMacCryptoSetMulticastReference>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d001      	beq.n	80110b4 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80110b0:	2311      	movs	r3, #17
 80110b2:	e014      	b.n	80110de <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80110b4:	4b1d      	ldr	r3, [pc, #116]	; (801112c <LoRaMacInitialization+0x558>)
 80110b6:	695b      	ldr	r3, [r3, #20]
 80110b8:	4798      	blx	r3
 80110ba:	4603      	mov	r3, r0
 80110bc:	4618      	mov	r0, r3
 80110be:	f005 faf1 	bl	80166a4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80110c2:	4b1a      	ldr	r3, [pc, #104]	; (801112c <LoRaMacInitialization+0x558>)
 80110c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110c6:	4a08      	ldr	r2, [pc, #32]	; (80110e8 <LoRaMacInitialization+0x514>)
 80110c8:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80110cc:	4610      	mov	r0, r2
 80110ce:	4798      	blx	r3
    Radio.Sleep( );
 80110d0:	4b16      	ldr	r3, [pc, #88]	; (801112c <LoRaMacInitialization+0x558>)
 80110d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d4:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80110d6:	2001      	movs	r0, #1
 80110d8:	f7fd faaa 	bl	800e630 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80110dc:	2300      	movs	r3, #0
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3734      	adds	r7, #52	; 0x34
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd90      	pop	{r4, r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000a54 	.word	0x20000a54
 80110ec:	20000c2c 	.word	0x20000c2c
 80110f0:	20000cc0 	.word	0x20000cc0
 80110f4:	2000054c 	.word	0x2000054c
 80110f8:	0800ebb9 	.word	0x0800ebb9
 80110fc:	200008b4 	.word	0x200008b4
 8011100:	0800ec2d 	.word	0x0800ec2d
 8011104:	200008cc 	.word	0x200008cc
 8011108:	0800ec99 	.word	0x0800ec99
 801110c:	200008e4 	.word	0x200008e4
 8011110:	0800ed0d 	.word	0x0800ed0d
 8011114:	20000944 	.word	0x20000944
 8011118:	0800d7bd 	.word	0x0800d7bd
 801111c:	0800d835 	.word	0x0800d835
 8011120:	0800d90d 	.word	0x0800d90d
 8011124:	0800d8c1 	.word	0x0800d8c1
 8011128:	0800d949 	.word	0x0800d949
 801112c:	0801bf10 	.word	0x0801bf10
 8011130:	20000898 	.word	0x20000898
 8011134:	20000b6c 	.word	0x20000b6c
 8011138:	20000b24 	.word	0x20000b24

0801113c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801113c:	b480      	push	{r7}
 801113e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011140:	4b04      	ldr	r3, [pc, #16]	; (8011154 <LoRaMacStart+0x18>)
 8011142:	2200      	movs	r2, #0
 8011144:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8011148:	2300      	movs	r3, #0
}
 801114a:	4618      	mov	r0, r3
 801114c:	46bd      	mov	sp, r7
 801114e:	bc80      	pop	{r7}
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop
 8011154:	2000054c 	.word	0x2000054c

08011158 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08a      	sub	sp, #40	; 0x28
 801115c:	af00      	add	r7, sp, #0
 801115e:	4603      	mov	r3, r0
 8011160:	6039      	str	r1, [r7, #0]
 8011162:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011164:	4b3e      	ldr	r3, [pc, #248]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 8011166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011168:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801116a:	4b3d      	ldr	r3, [pc, #244]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 801116c:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8011170:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011172:	4b3b      	ldr	r3, [pc, #236]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 8011174:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8011178:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 801117a:	2300      	movs	r3, #0
 801117c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011184:	2303      	movs	r3, #3
 8011186:	e066      	b.n	8011256 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8011188:	4b35      	ldr	r3, [pc, #212]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 801118a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801118e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8011190:	2300      	movs	r3, #0
 8011192:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011194:	4b32      	ldr	r3, [pc, #200]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 8011196:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801119a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801119c:	4b30      	ldr	r3, [pc, #192]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 801119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a0:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80111a2:	4b30      	ldr	r3, [pc, #192]	; (8011264 <LoRaMacQueryTxPossible+0x10c>)
 80111a4:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 80111a8:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80111aa:	4b2e      	ldr	r3, [pc, #184]	; (8011264 <LoRaMacQueryTxPossible+0x10c>)
 80111ac:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 80111b0:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80111b2:	4b2b      	ldr	r3, [pc, #172]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 80111b4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80111b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111bc:	4b28      	ldr	r3, [pc, #160]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 80111be:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80111c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111c6:	4b26      	ldr	r3, [pc, #152]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 80111c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80111cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80111d0:	4b23      	ldr	r3, [pc, #140]	; (8011260 <LoRaMacQueryTxPossible+0x108>)
 80111d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80111da:	f107 0310 	add.w	r3, r7, #16
 80111de:	f107 020e 	add.w	r2, r7, #14
 80111e2:	f107 010f 	add.w	r1, r7, #15
 80111e6:	f107 0014 	add.w	r0, r7, #20
 80111ea:	f000 ffe1 	bl	80121b0 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80111ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fd fed2 	bl	800ef9c <GetMaxAppPayloadWithoutFOptsLength>
 80111f8:	4603      	mov	r3, r0
 80111fa:	461a      	mov	r2, r3
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011200:	f107 0308 	add.w	r3, r7, #8
 8011204:	4618      	mov	r0, r3
 8011206:	f001 faab 	bl	8012760 <LoRaMacCommandsGetSizeSerializedCmds>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011210:	2313      	movs	r3, #19
 8011212:	e020      	b.n	8011256 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	2b0f      	cmp	r3, #15
 8011218:	d819      	bhi.n	801124e <LoRaMacQueryTxPossible+0xf6>
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	785b      	ldrb	r3, [r3, #1]
 801121e:	461a      	mov	r2, r3
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	429a      	cmp	r2, r3
 8011224:	d313      	bcc.n	801124e <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	785a      	ldrb	r2, [r3, #1]
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	b2db      	uxtb	r3, r3
 801122e:	1ad3      	subs	r3, r2, r3
 8011230:	b2da      	uxtb	r2, r3
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	785b      	ldrb	r3, [r3, #1]
 801123a:	4619      	mov	r1, r3
 801123c:	79fa      	ldrb	r2, [r7, #7]
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	4413      	add	r3, r2
 8011242:	4299      	cmp	r1, r3
 8011244:	d301      	bcc.n	801124a <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	e005      	b.n	8011256 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801124a:	2308      	movs	r3, #8
 801124c:	e003      	b.n	8011256 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	2200      	movs	r2, #0
 8011252:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011254:	2308      	movs	r3, #8
    }
}
 8011256:	4618      	mov	r0, r3
 8011258:	3728      	adds	r7, #40	; 0x28
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	20000a54 	.word	0x20000a54
 8011264:	2000054c 	.word	0x2000054c

08011268 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b087      	sub	sp, #28
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d101      	bne.n	801127e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801127a:	2303      	movs	r3, #3
 801127c:	e14b      	b.n	8011516 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	2b28      	cmp	r3, #40	; 0x28
 8011284:	f200 8140 	bhi.w	8011508 <LoRaMacMibGetRequestConfirm+0x2a0>
 8011288:	a201      	add	r2, pc, #4	; (adr r2, 8011290 <LoRaMacMibGetRequestConfirm+0x28>)
 801128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128e:	bf00      	nop
 8011290:	08011335 	.word	0x08011335
 8011294:	08011341 	.word	0x08011341
 8011298:	0801134d 	.word	0x0801134d
 801129c:	08011359 	.word	0x08011359
 80112a0:	08011365 	.word	0x08011365
 80112a4:	08011371 	.word	0x08011371
 80112a8:	0801137d 	.word	0x0801137d
 80112ac:	08011509 	.word	0x08011509
 80112b0:	08011509 	.word	0x08011509
 80112b4:	08011509 	.word	0x08011509
 80112b8:	08011509 	.word	0x08011509
 80112bc:	08011509 	.word	0x08011509
 80112c0:	08011509 	.word	0x08011509
 80112c4:	08011509 	.word	0x08011509
 80112c8:	08011509 	.word	0x08011509
 80112cc:	08011389 	.word	0x08011389
 80112d0:	08011395 	.word	0x08011395
 80112d4:	080113a1 	.word	0x080113a1
 80112d8:	080113c3 	.word	0x080113c3
 80112dc:	080113d5 	.word	0x080113d5
 80112e0:	080113e7 	.word	0x080113e7
 80112e4:	080113f9 	.word	0x080113f9
 80112e8:	0801142d 	.word	0x0801142d
 80112ec:	0801140b 	.word	0x0801140b
 80112f0:	0801144f 	.word	0x0801144f
 80112f4:	0801145b 	.word	0x0801145b
 80112f8:	08011465 	.word	0x08011465
 80112fc:	0801146f 	.word	0x0801146f
 8011300:	08011479 	.word	0x08011479
 8011304:	08011483 	.word	0x08011483
 8011308:	0801148d 	.word	0x0801148d
 801130c:	08011499 	.word	0x08011499
 8011310:	080114b1 	.word	0x080114b1
 8011314:	080114a5 	.word	0x080114a5
 8011318:	080114bd 	.word	0x080114bd
 801131c:	080114c7 	.word	0x080114c7
 8011320:	080114d3 	.word	0x080114d3
 8011324:	080114e9 	.word	0x080114e9
 8011328:	080114dd 	.word	0x080114dd
 801132c:	08011509 	.word	0x08011509
 8011330:	080114f5 	.word	0x080114f5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011334:	4b7a      	ldr	r3, [pc, #488]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011336:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	711a      	strb	r2, [r3, #4]
            break;
 801133e:	e0e9      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011340:	4b77      	ldr	r3, [pc, #476]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011342:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	711a      	strb	r2, [r3, #4]
            break;
 801134a:	e0e3      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801134c:	f7fb f88e 	bl	800c46c <SecureElementGetDevEui>
 8011350:	4602      	mov	r2, r0
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	605a      	str	r2, [r3, #4]
            break;
 8011356:	e0dd      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011358:	f7fb f8aa 	bl	800c4b0 <SecureElementGetJoinEui>
 801135c:	4602      	mov	r2, r0
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	605a      	str	r2, [r3, #4]
            break;
 8011362:	e0d7      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011364:	4b6e      	ldr	r3, [pc, #440]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011366:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	711a      	strb	r2, [r3, #4]
            break;
 801136e:	e0d1      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011370:	4b6b      	ldr	r3, [pc, #428]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011372:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	605a      	str	r2, [r3, #4]
            break;
 801137a:	e0cb      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 801137c:	4b68      	ldr	r3, [pc, #416]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801137e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	605a      	str	r2, [r3, #4]
            break;
 8011386:	e0c5      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011388:	4b65      	ldr	r3, [pc, #404]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801138a:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	711a      	strb	r2, [r3, #4]
            break;
 8011392:	e0bf      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011394:	4b62      	ldr	r3, [pc, #392]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011396:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	711a      	strb	r2, [r3, #4]
            break;
 801139e:	e0b9      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80113a0:	231d      	movs	r3, #29
 80113a2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113a4:	4b5e      	ldr	r3, [pc, #376]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113aa:	f107 0210 	add.w	r2, r7, #16
 80113ae:	4611      	mov	r1, r2
 80113b0:	4618      	mov	r0, r3
 80113b2:	f002 fe91 	bl	80140d8 <RegionGetPhyParam>
 80113b6:	4603      	mov	r3, r0
 80113b8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	605a      	str	r2, [r3, #4]
            break;
 80113c0:	e0a8      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4a56      	ldr	r2, [pc, #344]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113c6:	3304      	adds	r3, #4
 80113c8:	3264      	adds	r2, #100	; 0x64
 80113ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113ce:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113d2:	e09f      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a52      	ldr	r2, [pc, #328]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113d8:	3304      	adds	r3, #4
 80113da:	32a4      	adds	r2, #164	; 0xa4
 80113dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113e0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113e4:	e096      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4a4d      	ldr	r2, [pc, #308]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113ea:	3304      	adds	r3, #4
 80113ec:	326c      	adds	r2, #108	; 0x6c
 80113ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80113f6:	e08d      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	4a49      	ldr	r2, [pc, #292]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80113fc:	3304      	adds	r3, #4
 80113fe:	32ac      	adds	r2, #172	; 0xac
 8011400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011404:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011408:	e084      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801140a:	231b      	movs	r3, #27
 801140c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801140e:	4b44      	ldr	r3, [pc, #272]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011414:	f107 0210 	add.w	r2, r7, #16
 8011418:	4611      	mov	r1, r2
 801141a:	4618      	mov	r0, r3
 801141c:	f002 fe5c 	bl	80140d8 <RegionGetPhyParam>
 8011420:	4603      	mov	r3, r0
 8011422:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	605a      	str	r2, [r3, #4]
            break;
 801142a:	e073      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801142c:	231a      	movs	r3, #26
 801142e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011430:	4b3b      	ldr	r3, [pc, #236]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011436:	f107 0210 	add.w	r2, r7, #16
 801143a:	4611      	mov	r1, r2
 801143c:	4618      	mov	r0, r3
 801143e:	f002 fe4b 	bl	80140d8 <RegionGetPhyParam>
 8011442:	4603      	mov	r3, r0
 8011444:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	605a      	str	r2, [r3, #4]
            break;
 801144c:	e062      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801144e:	4b34      	ldr	r3, [pc, #208]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011450:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	711a      	strb	r2, [r3, #4]
            break;
 8011458:	e05c      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801145a:	4b31      	ldr	r3, [pc, #196]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801145c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	605a      	str	r2, [r3, #4]
            break;
 8011462:	e057      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011464:	4b2e      	ldr	r3, [pc, #184]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	605a      	str	r2, [r3, #4]
            break;
 801146c:	e052      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801146e:	4b2c      	ldr	r3, [pc, #176]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	605a      	str	r2, [r3, #4]
            break;
 8011476:	e04d      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011478:	4b29      	ldr	r3, [pc, #164]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801147a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	605a      	str	r2, [r3, #4]
            break;
 8011480:	e048      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011482:	4b27      	ldr	r3, [pc, #156]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	605a      	str	r2, [r3, #4]
            break;
 801148a:	e043      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801148c:	4b24      	ldr	r3, [pc, #144]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801148e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	711a      	strb	r2, [r3, #4]
            break;
 8011496:	e03d      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011498:	4b21      	ldr	r3, [pc, #132]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801149a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	711a      	strb	r2, [r3, #4]
            break;
 80114a2:	e037      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80114a4:	4b1e      	ldr	r3, [pc, #120]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114a6:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	711a      	strb	r2, [r3, #4]
            break;
 80114ae:	e031      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80114b0:	4b1b      	ldr	r3, [pc, #108]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114b2:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	711a      	strb	r2, [r3, #4]
            break;
 80114ba:	e02b      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80114bc:	4b18      	ldr	r3, [pc, #96]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	605a      	str	r2, [r3, #4]
            break;
 80114c4:	e026      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80114c6:	4b16      	ldr	r3, [pc, #88]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114c8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	711a      	strb	r2, [r3, #4]
            break;
 80114d0:	e020      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80114d2:	4b13      	ldr	r3, [pc, #76]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	605a      	str	r2, [r3, #4]
            break;
 80114da:	e01b      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 80114dc:	f7ff f934 	bl	8010748 <GetNvmData>
 80114e0:	4602      	mov	r2, r0
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	605a      	str	r2, [r3, #4]
            break;
 80114e6:	e015      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80114e8:	4b0d      	ldr	r3, [pc, #52]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114ea:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	605a      	str	r2, [r3, #4]
            break;
 80114f2:	e00f      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a0a      	ldr	r2, [pc, #40]	; (8011520 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80114f8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80114fc:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80114fe:	687c      	ldr	r4, [r7, #4]
 8011500:	f002 ff74 	bl	80143ec <RegionGetVersion>
 8011504:	60a0      	str	r0, [r4, #8]
            break;
 8011506:	e005      	b.n	8011514 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f000 fefd 	bl	8012308 <LoRaMacClassBMibGetRequestConfirm>
 801150e:	4603      	mov	r3, r0
 8011510:	75fb      	strb	r3, [r7, #23]
            break;
 8011512:	bf00      	nop
        }
    }
    return status;
 8011514:	7dfb      	ldrb	r3, [r7, #23]
}
 8011516:	4618      	mov	r0, r3
 8011518:	371c      	adds	r7, #28
 801151a:	46bd      	mov	sp, r7
 801151c:	bd90      	pop	{r4, r7, pc}
 801151e:	bf00      	nop
 8011520:	20000a54 	.word	0x20000a54

08011524 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b086      	sub	sp, #24
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801152c:	2300      	movs	r3, #0
 801152e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d101      	bne.n	801153a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011536:	2303      	movs	r3, #3
 8011538:	e32b      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801153a:	4bbe      	ldr	r3, [pc, #760]	; (8011834 <LoRaMacMibSetRequestConfirm+0x310>)
 801153c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011540:	f003 0302 	and.w	r3, r3, #2
 8011544:	2b00      	cmp	r3, #0
 8011546:	d001      	beq.n	801154c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011548:	2301      	movs	r3, #1
 801154a:	e322      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	2b27      	cmp	r3, #39	; 0x27
 8011552:	f200 82fc 	bhi.w	8011b4e <LoRaMacMibSetRequestConfirm+0x62a>
 8011556:	a201      	add	r2, pc, #4	; (adr r2, 801155c <LoRaMacMibSetRequestConfirm+0x38>)
 8011558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801155c:	080115fd 	.word	0x080115fd
 8011560:	0801160d 	.word	0x0801160d
 8011564:	08011627 	.word	0x08011627
 8011568:	0801163f 	.word	0x0801163f
 801156c:	08011657 	.word	0x08011657
 8011570:	08011663 	.word	0x08011663
 8011574:	0801166f 	.word	0x0801166f
 8011578:	0801167b 	.word	0x0801167b
 801157c:	080116a1 	.word	0x080116a1
 8011580:	080116c7 	.word	0x080116c7
 8011584:	080116ed 	.word	0x080116ed
 8011588:	08011713 	.word	0x08011713
 801158c:	08011739 	.word	0x08011739
 8011590:	0801175f 	.word	0x0801175f
 8011594:	08011785 	.word	0x08011785
 8011598:	080117ab 	.word	0x080117ab
 801159c:	080117cb 	.word	0x080117cb
 80115a0:	08011b4f 	.word	0x08011b4f
 80115a4:	080117d7 	.word	0x080117d7
 80115a8:	08011853 	.word	0x08011853
 80115ac:	08011893 	.word	0x08011893
 80115b0:	080118f5 	.word	0x080118f5
 80115b4:	08011965 	.word	0x08011965
 80115b8:	08011935 	.word	0x08011935
 80115bc:	08011995 	.word	0x08011995
 80115c0:	080119b7 	.word	0x080119b7
 80115c4:	080119c1 	.word	0x080119c1
 80115c8:	080119cb 	.word	0x080119cb
 80115cc:	080119d5 	.word	0x080119d5
 80115d0:	080119df 	.word	0x080119df
 80115d4:	080119e9 	.word	0x080119e9
 80115d8:	08011a1b 	.word	0x08011a1b
 80115dc:	08011a87 	.word	0x08011a87
 80115e0:	08011a55 	.word	0x08011a55
 80115e4:	08011ab9 	.word	0x08011ab9
 80115e8:	08011acf 	.word	0x08011acf
 80115ec:	08011ae7 	.word	0x08011ae7
 80115f0:	08011af1 	.word	0x08011af1
 80115f4:	08011afd 	.word	0x08011afd
 80115f8:	08011b25 	.word	0x08011b25
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	791b      	ldrb	r3, [r3, #4]
 8011600:	4618      	mov	r0, r3
 8011602:	f7fd fbfb 	bl	800edfc <SwitchClass>
 8011606:	4603      	mov	r3, r0
 8011608:	75fb      	strb	r3, [r7, #23]
            break;
 801160a:	e2c1      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	791b      	ldrb	r3, [r3, #4]
 8011610:	2b02      	cmp	r3, #2
 8011612:	d005      	beq.n	8011620 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	791a      	ldrb	r2, [r3, #4]
 8011618:	4b87      	ldr	r3, [pc, #540]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 801161a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801161e:	e2b7      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011620:	2303      	movs	r3, #3
 8011622:	75fb      	strb	r3, [r7, #23]
            break;
 8011624:	e2b4      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	4618      	mov	r0, r3
 801162c:	f7fa ff06 	bl	800c43c <SecureElementSetDevEui>
 8011630:	4603      	mov	r3, r0
 8011632:	2b00      	cmp	r3, #0
 8011634:	f000 8291 	beq.w	8011b5a <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011638:	2303      	movs	r3, #3
 801163a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801163c:	e28d      	b.n	8011b5a <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	4618      	mov	r0, r3
 8011644:	f7fa ff1c 	bl	800c480 <SecureElementSetJoinEui>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	f000 8287 	beq.w	8011b5e <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011650:	2303      	movs	r3, #3
 8011652:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011654:	e283      	b.n	8011b5e <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	791a      	ldrb	r2, [r3, #4]
 801165a:	4b77      	ldr	r3, [pc, #476]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 801165c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8011660:	e296      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	4a74      	ldr	r2, [pc, #464]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 8011668:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 801166c:	e290      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	4a71      	ldr	r2, [pc, #452]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 8011674:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8011678:	e28a      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00b      	beq.n	801169a <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	4619      	mov	r1, r3
 8011688:	2000      	movs	r0, #0
 801168a:	f001 ff35 	bl	80134f8 <LoRaMacCryptoSetKey>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	f000 8266 	beq.w	8011b62 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011696:	2311      	movs	r3, #17
 8011698:	e27b      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801169a:	2303      	movs	r3, #3
 801169c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801169e:	e260      	b.n	8011b62 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00b      	beq.n	80116c0 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	4619      	mov	r1, r3
 80116ae:	2001      	movs	r0, #1
 80116b0:	f001 ff22 	bl	80134f8 <LoRaMacCryptoSetKey>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f000 8255 	beq.w	8011b66 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116bc:	2311      	movs	r3, #17
 80116be:	e268      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116c0:	2303      	movs	r3, #3
 80116c2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116c4:	e24f      	b.n	8011b66 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00b      	beq.n	80116e6 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	4619      	mov	r1, r3
 80116d4:	2002      	movs	r0, #2
 80116d6:	f001 ff0f 	bl	80134f8 <LoRaMacCryptoSetKey>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f000 8244 	beq.w	8011b6a <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80116e2:	2311      	movs	r3, #17
 80116e4:	e255      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116e6:	2303      	movs	r3, #3
 80116e8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116ea:	e23e      	b.n	8011b6a <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00b      	beq.n	801170c <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	4619      	mov	r1, r3
 80116fa:	2003      	movs	r0, #3
 80116fc:	f001 fefc 	bl	80134f8 <LoRaMacCryptoSetKey>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 8233 	beq.w	8011b6e <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011708:	2311      	movs	r3, #17
 801170a:	e242      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801170c:	2303      	movs	r3, #3
 801170e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011710:	e22d      	b.n	8011b6e <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00b      	beq.n	8011732 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	4619      	mov	r1, r3
 8011720:	207f      	movs	r0, #127	; 0x7f
 8011722:	f001 fee9 	bl	80134f8 <LoRaMacCryptoSetKey>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	f000 8222 	beq.w	8011b72 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801172e:	2311      	movs	r3, #17
 8011730:	e22f      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011732:	2303      	movs	r3, #3
 8011734:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011736:	e21c      	b.n	8011b72 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d00b      	beq.n	8011758 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	4619      	mov	r1, r3
 8011746:	2080      	movs	r0, #128	; 0x80
 8011748:	f001 fed6 	bl	80134f8 <LoRaMacCryptoSetKey>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	f000 8211 	beq.w	8011b76 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011754:	2311      	movs	r3, #17
 8011756:	e21c      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011758:	2303      	movs	r3, #3
 801175a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801175c:	e20b      	b.n	8011b76 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00b      	beq.n	801177e <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	4619      	mov	r1, r3
 801176c:	2081      	movs	r0, #129	; 0x81
 801176e:	f001 fec3 	bl	80134f8 <LoRaMacCryptoSetKey>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	f000 8200 	beq.w	8011b7a <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801177a:	2311      	movs	r3, #17
 801177c:	e209      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801177e:	2303      	movs	r3, #3
 8011780:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011782:	e1fa      	b.n	8011b7a <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d00b      	beq.n	80117a4 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	4619      	mov	r1, r3
 8011792:	2082      	movs	r0, #130	; 0x82
 8011794:	f001 feb0 	bl	80134f8 <LoRaMacCryptoSetKey>
 8011798:	4603      	mov	r3, r0
 801179a:	2b00      	cmp	r3, #0
 801179c:	f000 81ef 	beq.w	8011b7e <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117a0:	2311      	movs	r3, #17
 80117a2:	e1f6      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117a4:	2303      	movs	r3, #3
 80117a6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117a8:	e1e9      	b.n	8011b7e <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	791a      	ldrb	r2, [r3, #4]
 80117ae:	4b22      	ldr	r3, [pc, #136]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 80117b0:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80117b4:	4b21      	ldr	r3, [pc, #132]	; (801183c <LoRaMacMibSetRequestConfirm+0x318>)
 80117b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117b8:	4a1f      	ldr	r2, [pc, #124]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 80117ba:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 80117be:	4610      	mov	r0, r2
 80117c0:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80117c2:	4b1e      	ldr	r3, [pc, #120]	; (801183c <LoRaMacMibSetRequestConfirm+0x318>)
 80117c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c6:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80117c8:	e1e2      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	791a      	ldrb	r2, [r3, #4]
 80117ce:	4b1a      	ldr	r3, [pc, #104]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 80117d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80117d4:	e1dc      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	7a1b      	ldrb	r3, [r3, #8]
 80117da:	b25b      	sxtb	r3, r3
 80117dc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80117de:	4b16      	ldr	r3, [pc, #88]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 80117e0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80117e4:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80117e6:	4b14      	ldr	r3, [pc, #80]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 80117e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117ec:	f107 0108 	add.w	r1, r7, #8
 80117f0:	2207      	movs	r2, #7
 80117f2:	4618      	mov	r0, r3
 80117f4:	f002 fcac 	bl	8014150 <RegionVerify>
 80117f8:	4603      	mov	r3, r0
 80117fa:	f083 0301 	eor.w	r3, r3, #1
 80117fe:	b2db      	uxtb	r3, r3
 8011800:	2b00      	cmp	r3, #0
 8011802:	d002      	beq.n	801180a <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011804:	2303      	movs	r3, #3
 8011806:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011808:	e1c2      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011810:	4b09      	ldr	r3, [pc, #36]	; (8011838 <LoRaMacMibSetRequestConfirm+0x314>)
 8011812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011816:	f107 0108 	add.w	r1, r7, #8
 801181a:	2200      	movs	r2, #0
 801181c:	4618      	mov	r0, r3
 801181e:	f002 fc97 	bl	8014150 <RegionVerify>
 8011822:	4603      	mov	r3, r0
 8011824:	f083 0301 	eor.w	r3, r3, #1
 8011828:	b2db      	uxtb	r3, r3
 801182a:	2b00      	cmp	r3, #0
 801182c:	d008      	beq.n	8011840 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801182e:	2303      	movs	r3, #3
 8011830:	75fb      	strb	r3, [r7, #23]
            break;
 8011832:	e1ad      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
 8011834:	2000054c 	.word	0x2000054c
 8011838:	20000a54 	.word	0x20000a54
 801183c:	0801bf10 	.word	0x0801bf10
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011840:	4bb6      	ldr	r3, [pc, #728]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	3364      	adds	r3, #100	; 0x64
 8011846:	3204      	adds	r2, #4
 8011848:	e892 0003 	ldmia.w	r2, {r0, r1}
 801184c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011850:	e19e      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	7a1b      	ldrb	r3, [r3, #8]
 8011856:	b25b      	sxtb	r3, r3
 8011858:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801185a:	4bb0      	ldr	r3, [pc, #704]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 801185c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011860:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011862:	4bae      	ldr	r3, [pc, #696]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011868:	f107 0108 	add.w	r1, r7, #8
 801186c:	2207      	movs	r2, #7
 801186e:	4618      	mov	r0, r3
 8011870:	f002 fc6e 	bl	8014150 <RegionVerify>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d008      	beq.n	801188c <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801187a:	4ba8      	ldr	r3, [pc, #672]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	33a4      	adds	r3, #164	; 0xa4
 8011880:	3204      	adds	r2, #4
 8011882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011886:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801188a:	e181      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801188c:	2303      	movs	r3, #3
 801188e:	75fb      	strb	r3, [r7, #23]
            break;
 8011890:	e17e      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	7a1b      	ldrb	r3, [r3, #8]
 8011896:	b25b      	sxtb	r3, r3
 8011898:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801189a:	4ba0      	ldr	r3, [pc, #640]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 801189c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80118a0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80118a2:	4b9e      	ldr	r3, [pc, #632]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80118a8:	f107 0108 	add.w	r1, r7, #8
 80118ac:	2207      	movs	r2, #7
 80118ae:	4618      	mov	r0, r3
 80118b0:	f002 fc4e 	bl	8014150 <RegionVerify>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d019      	beq.n	80118ee <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80118ba:	4b98      	ldr	r3, [pc, #608]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	336c      	adds	r3, #108	; 0x6c
 80118c0:	3204      	adds	r2, #4
 80118c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118c6:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80118ca:	4b94      	ldr	r3, [pc, #592]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118cc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80118d0:	2b02      	cmp	r3, #2
 80118d2:	f040 8156 	bne.w	8011b82 <LoRaMacMibSetRequestConfirm+0x65e>
 80118d6:	4b91      	ldr	r3, [pc, #580]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118d8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 8150 	beq.w	8011b82 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80118e2:	4b8f      	ldr	r3, [pc, #572]	; (8011b20 <LoRaMacMibSetRequestConfirm+0x5fc>)
 80118e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e6:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80118e8:	f7fe fcda 	bl	80102a0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118ec:	e149      	b.n	8011b82 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118ee:	2303      	movs	r3, #3
 80118f0:	75fb      	strb	r3, [r7, #23]
            break;
 80118f2:	e146      	b.n	8011b82 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	7a1b      	ldrb	r3, [r3, #8]
 80118f8:	b25b      	sxtb	r3, r3
 80118fa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80118fc:	4b87      	ldr	r3, [pc, #540]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80118fe:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011902:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011904:	4b85      	ldr	r3, [pc, #532]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801190a:	f107 0108 	add.w	r1, r7, #8
 801190e:	2207      	movs	r2, #7
 8011910:	4618      	mov	r0, r3
 8011912:	f002 fc1d 	bl	8014150 <RegionVerify>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d008      	beq.n	801192e <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801191c:	4b7f      	ldr	r3, [pc, #508]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	33ac      	adds	r3, #172	; 0xac
 8011922:	3204      	adds	r2, #4
 8011924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011928:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801192c:	e130      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801192e:	2303      	movs	r3, #3
 8011930:	75fb      	strb	r3, [r7, #23]
            break;
 8011932:	e12d      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801193a:	2301      	movs	r3, #1
 801193c:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801193e:	4b77      	ldr	r3, [pc, #476]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011944:	f107 020c 	add.w	r2, r7, #12
 8011948:	4611      	mov	r1, r2
 801194a:	4618      	mov	r0, r3
 801194c:	f002 fc29 	bl	80141a2 <RegionChanMaskSet>
 8011950:	4603      	mov	r3, r0
 8011952:	f083 0301 	eor.w	r3, r3, #1
 8011956:	b2db      	uxtb	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	f000 8114 	beq.w	8011b86 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801195e:	2303      	movs	r3, #3
 8011960:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011962:	e110      	b.n	8011b86 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801196a:	2300      	movs	r3, #0
 801196c:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801196e:	4b6b      	ldr	r3, [pc, #428]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011974:	f107 020c 	add.w	r2, r7, #12
 8011978:	4611      	mov	r1, r2
 801197a:	4618      	mov	r0, r3
 801197c:	f002 fc11 	bl	80141a2 <RegionChanMaskSet>
 8011980:	4603      	mov	r3, r0
 8011982:	f083 0301 	eor.w	r3, r3, #1
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 80fe 	beq.w	8011b8a <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801198e:	2303      	movs	r3, #3
 8011990:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011992:	e0fa      	b.n	8011b8a <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	791b      	ldrb	r3, [r3, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d009      	beq.n	80119b0 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80119a0:	2b0f      	cmp	r3, #15
 80119a2:	d805      	bhi.n	80119b0 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	791a      	ldrb	r2, [r3, #4]
 80119a8:	4b5c      	ldr	r3, [pc, #368]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119ae:	e0ef      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119b0:	2303      	movs	r3, #3
 80119b2:	75fb      	strb	r3, [r7, #23]
            break;
 80119b4:	e0ec      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	4a58      	ldr	r2, [pc, #352]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119bc:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80119be:	e0e7      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	4a55      	ldr	r2, [pc, #340]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119c6:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80119c8:	e0e2      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	4a53      	ldr	r2, [pc, #332]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119d0:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80119d2:	e0dd      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	4a50      	ldr	r2, [pc, #320]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119da:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80119dc:	e0d8      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	4a4e      	ldr	r2, [pc, #312]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119e4:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80119e6:	e0d3      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80119ee:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80119f0:	4b4a      	ldr	r3, [pc, #296]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 80119f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119f6:	f107 0108 	add.w	r1, r7, #8
 80119fa:	2206      	movs	r2, #6
 80119fc:	4618      	mov	r0, r3
 80119fe:	f002 fba7 	bl	8014150 <RegionVerify>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d005      	beq.n	8011a14 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011a08:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a0c:	4b43      	ldr	r3, [pc, #268]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a0e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a12:	e0bd      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a14:	2303      	movs	r3, #3
 8011a16:	75fb      	strb	r3, [r7, #23]
            break;
 8011a18:	e0ba      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a20:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011a22:	4b3e      	ldr	r3, [pc, #248]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011a28:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011a2a:	4b3c      	ldr	r3, [pc, #240]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a30:	f107 0108 	add.w	r1, r7, #8
 8011a34:	2205      	movs	r2, #5
 8011a36:	4618      	mov	r0, r3
 8011a38:	f002 fb8a 	bl	8014150 <RegionVerify>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d005      	beq.n	8011a4e <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011a42:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a46:	4b35      	ldr	r3, [pc, #212]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a4c:	e0a0      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a4e:	2303      	movs	r3, #3
 8011a50:	75fb      	strb	r3, [r7, #23]
            break;
 8011a52:	e09d      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a5a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011a5c:	4b2f      	ldr	r3, [pc, #188]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a62:	f107 0108 	add.w	r1, r7, #8
 8011a66:	220a      	movs	r2, #10
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f002 fb71 	bl	8014150 <RegionVerify>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d005      	beq.n	8011a80 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011a74:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011a78:	4b28      	ldr	r3, [pc, #160]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a7a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a7e:	e087      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a80:	2303      	movs	r3, #3
 8011a82:	75fb      	strb	r3, [r7, #23]
            break;
 8011a84:	e084      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011a8c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011a8e:	4b23      	ldr	r3, [pc, #140]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011a90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a94:	f107 0108 	add.w	r1, r7, #8
 8011a98:	2209      	movs	r2, #9
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f002 fb58 	bl	8014150 <RegionVerify>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d005      	beq.n	8011ab2 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011aa6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011aaa:	4b1c      	ldr	r3, [pc, #112]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011ab0:	e06e      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ab2:	2303      	movs	r3, #3
 8011ab4:	75fb      	strb	r3, [r7, #23]
            break;
 8011ab6:	e06b      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	4a17      	ldr	r2, [pc, #92]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011abe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011ac2:	4b16      	ldr	r3, [pc, #88]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ac8:	4a14      	ldr	r2, [pc, #80]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aca:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011acc:	e060      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	791a      	ldrb	r2, [r3, #4]
 8011ad2:	4b12      	ldr	r3, [pc, #72]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ad4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011ad8:	4b10      	ldr	r3, [pc, #64]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ada:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011ade:	4b0f      	ldr	r3, [pc, #60]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011ae4:	e054      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	4a0c      	ldr	r2, [pc, #48]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011aec:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011aee:	e04f      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	4a09      	ldr	r2, [pc, #36]	; (8011b1c <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011af6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 8011afa:	e049      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d007      	beq.n	8011b14 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fe fe27 	bl	801075c <RestoreNvmData>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b12:	e03d      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b14:	2303      	movs	r3, #3
 8011b16:	75fb      	strb	r3, [r7, #23]
            break;
 8011b18:	e03a      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
 8011b1a:	bf00      	nop
 8011b1c:	20000a54 	.word	0x20000a54
 8011b20:	0801bf10 	.word	0x0801bf10
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	799b      	ldrb	r3, [r3, #6]
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d80d      	bhi.n	8011b48 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011b2c:	4a1b      	ldr	r2, [pc, #108]	; (8011b9c <LoRaMacMibSetRequestConfirm+0x678>)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6858      	ldr	r0, [r3, #4]
 8011b3a:	f001 fc23 	bl	8013384 <LoRaMacCryptoSetLrWanVersion>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d024      	beq.n	8011b8e <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b44:	2311      	movs	r3, #17
 8011b46:	e024      	b.n	8011b92 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b48:	2303      	movs	r3, #3
 8011b4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b4c:	e01f      	b.n	8011b8e <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 fbe4 	bl	801231c <LoRaMacMibClassBSetRequestConfirm>
 8011b54:	4603      	mov	r3, r0
 8011b56:	75fb      	strb	r3, [r7, #23]
            break;
 8011b58:	e01a      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5a:	bf00      	nop
 8011b5c:	e018      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b5e:	bf00      	nop
 8011b60:	e016      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b62:	bf00      	nop
 8011b64:	e014      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b66:	bf00      	nop
 8011b68:	e012      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b6a:	bf00      	nop
 8011b6c:	e010      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b6e:	bf00      	nop
 8011b70:	e00e      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b72:	bf00      	nop
 8011b74:	e00c      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b76:	bf00      	nop
 8011b78:	e00a      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b7a:	bf00      	nop
 8011b7c:	e008      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b7e:	bf00      	nop
 8011b80:	e006      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b82:	bf00      	nop
 8011b84:	e004      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b86:	bf00      	nop
 8011b88:	e002      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b8a:	bf00      	nop
 8011b8c:	e000      	b.n	8011b90 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011b8e:	bf00      	nop
        }
    }
    return status;
 8011b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3718      	adds	r7, #24
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	20000a54 	.word	0x20000a54

08011ba0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ba8:	2302      	movs	r3, #2
 8011baa:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011bac:	2300      	movs	r3, #0
 8011bae:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d101      	bne.n	8011bba <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bb6:	2303      	movs	r3, #3
 8011bb8:	e127      	b.n	8011e0a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011bba:	f7fc fd23 	bl	800e604 <LoRaMacIsBusy>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d001      	beq.n	8011bc8 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	e120      	b.n	8011e0a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011bc8:	f001 f8a6 	bl	8012d18 <LoRaMacConfirmQueueIsFull>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d001      	beq.n	8011bd6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	e119      	b.n	8011e0a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011bd6:	f001 f893 	bl	8012d00 <LoRaMacConfirmQueueGetCnt>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d104      	bne.n	8011bea <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011be0:	2214      	movs	r2, #20
 8011be2:	2100      	movs	r1, #0
 8011be4:	488b      	ldr	r0, [pc, #556]	; (8011e14 <LoRaMacMlmeRequest+0x274>)
 8011be6:	f004 fdbd 	bl	8016764 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bea:	4b8b      	ldr	r3, [pc, #556]	; (8011e18 <LoRaMacMlmeRequest+0x278>)
 8011bec:	2201      	movs	r2, #1
 8011bee:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bf2:	4a89      	ldr	r2, [pc, #548]	; (8011e18 <LoRaMacMlmeRequest+0x278>)
 8011bf4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bf8:	f043 0304 	orr.w	r3, r3, #4
 8011bfc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c06:	2301      	movs	r3, #1
 8011c08:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	3b01      	subs	r3, #1
 8011c14:	2b0d      	cmp	r3, #13
 8011c16:	f200 80ce 	bhi.w	8011db6 <LoRaMacMlmeRequest+0x216>
 8011c1a:	a201      	add	r2, pc, #4	; (adr r2, 8011c20 <LoRaMacMlmeRequest+0x80>)
 8011c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c20:	08011c59 	.word	0x08011c59
 8011c24:	08011db7 	.word	0x08011db7
 8011c28:	08011db7 	.word	0x08011db7
 8011c2c:	08011cc3 	.word	0x08011cc3
 8011c30:	08011ce1 	.word	0x08011ce1
 8011c34:	08011cf1 	.word	0x08011cf1
 8011c38:	08011db7 	.word	0x08011db7
 8011c3c:	08011db7 	.word	0x08011db7
 8011c40:	08011db7 	.word	0x08011db7
 8011c44:	08011d0d 	.word	0x08011d0d
 8011c48:	08011db7 	.word	0x08011db7
 8011c4c:	08011d8b 	.word	0x08011d8b
 8011c50:	08011d2b 	.word	0x08011d2b
 8011c54:	08011d6d 	.word	0x08011d6d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011c58:	4b6f      	ldr	r3, [pc, #444]	; (8011e18 <LoRaMacMlmeRequest+0x278>)
 8011c5a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c5e:	f003 0320 	and.w	r3, r3, #32
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d001      	beq.n	8011c6a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011c66:	2301      	movs	r3, #1
 8011c68:	e0cf      	b.n	8011e0a <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8011c6a:	f7fe f9fd 	bl	8010068 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011c6e:	4b6b      	ldr	r3, [pc, #428]	; (8011e1c <LoRaMacMlmeRequest+0x27c>)
 8011c70:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	791b      	ldrb	r3, [r3, #4]
 8011c78:	b25b      	sxtb	r3, r3
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	f002 fb4f 	bl	8014320 <RegionAlternateDr>
 8011c82:	4603      	mov	r3, r0
 8011c84:	461a      	mov	r2, r3
 8011c86:	4b65      	ldr	r3, [pc, #404]	; (8011e1c <LoRaMacMlmeRequest+0x27c>)
 8011c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011c8c:	2307      	movs	r3, #7
 8011c8e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011c90:	20ff      	movs	r0, #255	; 0xff
 8011c92:	f7fd ff61 	bl	800fb58 <SendReJoinReq>
 8011c96:	4603      	mov	r3, r0
 8011c98:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011c9a:	7dfb      	ldrb	r3, [r7, #23]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f000 808c 	beq.w	8011dba <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011ca2:	4b5e      	ldr	r3, [pc, #376]	; (8011e1c <LoRaMacMlmeRequest+0x27c>)
 8011ca4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	791b      	ldrb	r3, [r3, #4]
 8011cac:	b25b      	sxtb	r3, r3
 8011cae:	2201      	movs	r2, #1
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	f002 fb35 	bl	8014320 <RegionAlternateDr>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	461a      	mov	r2, r3
 8011cba:	4b58      	ldr	r3, [pc, #352]	; (8011e1c <LoRaMacMlmeRequest+0x27c>)
 8011cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011cc0:	e07b      	b.n	8011dba <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011cc6:	f107 030c 	add.w	r3, r7, #12
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4619      	mov	r1, r3
 8011cce:	2002      	movs	r0, #2
 8011cd0:	f000 fc88 	bl	80125e4 <LoRaMacCommandsAddCmd>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d071      	beq.n	8011dbe <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011cda:	2313      	movs	r3, #19
 8011cdc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011cde:	e06e      	b.n	8011dbe <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	889b      	ldrh	r3, [r3, #4]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fe fcdb 	bl	80106a0 <SetTxContinuousWave>
 8011cea:	4603      	mov	r3, r0
 8011cec:	75fb      	strb	r3, [r7, #23]
            break;
 8011cee:	e06d      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	8898      	ldrh	r0, [r3, #4]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6899      	ldr	r1, [r3, #8]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	461a      	mov	r2, r3
 8011d02:	f7fe fd01 	bl	8010708 <SetTxContinuousWave1>
 8011d06:	4603      	mov	r3, r0
 8011d08:	75fb      	strb	r3, [r7, #23]
            break;
 8011d0a:	e05f      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d10:	f107 030c 	add.w	r3, r7, #12
 8011d14:	2200      	movs	r2, #0
 8011d16:	4619      	mov	r1, r3
 8011d18:	200d      	movs	r0, #13
 8011d1a:	f000 fc63 	bl	80125e4 <LoRaMacCommandsAddCmd>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d04e      	beq.n	8011dc2 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d24:	2313      	movs	r3, #19
 8011d26:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d28:	e04b      	b.n	8011dc2 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011d2a:	4b3c      	ldr	r3, [pc, #240]	; (8011e1c <LoRaMacMlmeRequest+0x27c>)
 8011d2c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d148      	bne.n	8011dc6 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	791b      	ldrb	r3, [r3, #4]
 8011d38:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	791b      	ldrb	r3, [r3, #4]
 8011d3e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 fabe 	bl	80122c6 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011d4a:	7dbb      	ldrb	r3, [r7, #22]
 8011d4c:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d52:	f107 030c 	add.w	r3, r7, #12
 8011d56:	2201      	movs	r2, #1
 8011d58:	4619      	mov	r1, r3
 8011d5a:	2010      	movs	r0, #16
 8011d5c:	f000 fc42 	bl	80125e4 <LoRaMacCommandsAddCmd>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d02f      	beq.n	8011dc6 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d66:	2313      	movs	r3, #19
 8011d68:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011d6a:	e02c      	b.n	8011dc6 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011d70:	f107 030c 	add.w	r3, r7, #12
 8011d74:	2200      	movs	r2, #0
 8011d76:	4619      	mov	r1, r3
 8011d78:	2012      	movs	r0, #18
 8011d7a:	f000 fc33 	bl	80125e4 <LoRaMacCommandsAddCmd>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d022      	beq.n	8011dca <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d84:	2313      	movs	r3, #19
 8011d86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d88:	e01f      	b.n	8011dca <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011d8e:	f000 fa50 	bl	8012232 <LoRaMacClassBIsAcquisitionInProgress>
 8011d92:	4603      	mov	r3, r0
 8011d94:	f083 0301 	eor.w	r3, r3, #1
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d008      	beq.n	8011db0 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011d9e:	2000      	movs	r0, #0
 8011da0:	f000 fa29 	bl	80121f6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011da4:	2000      	movs	r0, #0
 8011da6:	f000 fa4b 	bl	8012240 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011daa:	2300      	movs	r3, #0
 8011dac:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011dae:	e00d      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011db0:	2301      	movs	r3, #1
 8011db2:	75fb      	strb	r3, [r7, #23]
            break;
 8011db4:	e00a      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011db6:	bf00      	nop
 8011db8:	e008      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
            break;
 8011dba:	bf00      	nop
 8011dbc:	e006      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
            break;
 8011dbe:	bf00      	nop
 8011dc0:	e004      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
            break;
 8011dc2:	bf00      	nop
 8011dc4:	e002      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
            break;
 8011dc6:	bf00      	nop
 8011dc8:	e000      	b.n	8011dcc <LoRaMacMlmeRequest+0x22c>
            break;
 8011dca:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011dcc:	4b12      	ldr	r3, [pc, #72]	; (8011e18 <LoRaMacMlmeRequest+0x278>)
 8011dce:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011dd6:	7dfb      	ldrb	r3, [r7, #23]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d010      	beq.n	8011dfe <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011ddc:	f000 ff90 	bl	8012d00 <LoRaMacConfirmQueueGetCnt>
 8011de0:	4603      	mov	r3, r0
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d110      	bne.n	8011e08 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011de6:	4b0c      	ldr	r3, [pc, #48]	; (8011e18 <LoRaMacMlmeRequest+0x278>)
 8011de8:	2200      	movs	r2, #0
 8011dea:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011dee:	4a0a      	ldr	r2, [pc, #40]	; (8011e18 <LoRaMacMlmeRequest+0x278>)
 8011df0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011df4:	f36f 0382 	bfc	r3, #2, #1
 8011df8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011dfc:	e004      	b.n	8011e08 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011dfe:	f107 0310 	add.w	r3, r7, #16
 8011e02:	4618      	mov	r0, r3
 8011e04:	f000 fe2e 	bl	8012a64 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3718      	adds	r7, #24
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	20000998 	.word	0x20000998
 8011e18:	2000054c 	.word	0x2000054c
 8011e1c:	20000a54 	.word	0x20000a54

08011e20 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b08c      	sub	sp, #48	; 0x30
 8011e24:	af02      	add	r7, sp, #8
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	460b      	mov	r3, r1
 8011e2a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e2c:	2302      	movs	r3, #2
 8011e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011e40:	2300      	movs	r3, #0
 8011e42:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d101      	bne.n	8011e4e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	e0d4      	b.n	8011ff8 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011e4e:	f7fc fbd9 	bl	800e604 <LoRaMacIsBusy>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d001      	beq.n	8011e5c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e0cd      	b.n	8011ff8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011e60:	2214      	movs	r2, #20
 8011e62:	2100      	movs	r1, #0
 8011e64:	4866      	ldr	r0, [pc, #408]	; (8012000 <LoRaMacMcpsRequest+0x1e0>)
 8011e66:	f004 fc7d 	bl	8016764 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011e6a:	4b66      	ldr	r3, [pc, #408]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011e72:	4b64      	ldr	r3, [pc, #400]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011e74:	2201      	movs	r2, #1
 8011e76:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	2b03      	cmp	r3, #3
 8011e80:	d03d      	beq.n	8011efe <LoRaMacMcpsRequest+0xde>
 8011e82:	2b03      	cmp	r3, #3
 8011e84:	dc4f      	bgt.n	8011f26 <LoRaMacMcpsRequest+0x106>
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d002      	beq.n	8011e90 <LoRaMacMcpsRequest+0x70>
 8011e8a:	2b01      	cmp	r3, #1
 8011e8c:	d019      	beq.n	8011ec2 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011e8e:	e04a      	b.n	8011f26 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011e90:	2301      	movs	r3, #1
 8011e92:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011e94:	4b5b      	ldr	r3, [pc, #364]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011e96:	2201      	movs	r2, #1
 8011e98:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011e9c:	7b3b      	ldrb	r3, [r7, #12]
 8011e9e:	2202      	movs	r2, #2
 8011ea0:	f362 1347 	bfi	r3, r2, #5, #3
 8011ea4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	791b      	ldrb	r3, [r3, #4]
 8011eaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	899b      	ldrh	r3, [r3, #12]
 8011eb8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	7b9b      	ldrb	r3, [r3, #14]
 8011ebe:	777b      	strb	r3, [r7, #29]
            break;
 8011ec0:	e032      	b.n	8011f28 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	7bdb      	ldrb	r3, [r3, #15]
 8011eca:	2b08      	cmp	r3, #8
 8011ecc:	bf28      	it	cs
 8011ece:	2308      	movcs	r3, #8
 8011ed0:	b2da      	uxtb	r2, r3
 8011ed2:	4b4c      	ldr	r3, [pc, #304]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011ed4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011ed8:	7b3b      	ldrb	r3, [r7, #12]
 8011eda:	2204      	movs	r2, #4
 8011edc:	f362 1347 	bfi	r3, r2, #5, #3
 8011ee0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	791b      	ldrb	r3, [r3, #4]
 8011ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	689b      	ldr	r3, [r3, #8]
 8011eee:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	899b      	ldrh	r3, [r3, #12]
 8011ef4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	7b9b      	ldrb	r3, [r3, #14]
 8011efa:	777b      	strb	r3, [r7, #29]
            break;
 8011efc:	e014      	b.n	8011f28 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011efe:	2301      	movs	r3, #1
 8011f00:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011f02:	4b40      	ldr	r3, [pc, #256]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011f0a:	7b3b      	ldrb	r3, [r7, #12]
 8011f0c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011f10:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	891b      	ldrh	r3, [r3, #8]
 8011f1c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	7a9b      	ldrb	r3, [r3, #10]
 8011f22:	777b      	strb	r3, [r7, #29]
            break;
 8011f24:	e000      	b.n	8011f28 <LoRaMacMcpsRequest+0x108>
            break;
 8011f26:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011f28:	2302      	movs	r3, #2
 8011f2a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f2c:	4b36      	ldr	r3, [pc, #216]	; (8012008 <LoRaMacMcpsRequest+0x1e8>)
 8011f2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f32:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f34:	4b34      	ldr	r3, [pc, #208]	; (8012008 <LoRaMacMcpsRequest+0x1e8>)
 8011f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f3a:	f107 0214 	add.w	r2, r7, #20
 8011f3e:	4611      	mov	r1, r2
 8011f40:	4618      	mov	r0, r3
 8011f42:	f002 f8c9 	bl	80140d8 <RegionGetPhyParam>
 8011f46:	4603      	mov	r3, r0
 8011f48:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	b25b      	sxtb	r3, r3
 8011f4e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011f52:	4293      	cmp	r3, r2
 8011f54:	bfb8      	it	lt
 8011f56:	4613      	movlt	r3, r2
 8011f58:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011f5a:	7f3b      	ldrb	r3, [r7, #28]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d044      	beq.n	8011fea <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011f60:	4b29      	ldr	r3, [pc, #164]	; (8012008 <LoRaMacMcpsRequest+0x1e8>)
 8011f62:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011f66:	f083 0301 	eor.w	r3, r3, #1
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d019      	beq.n	8011fa4 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011f70:	7f7b      	ldrb	r3, [r7, #29]
 8011f72:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011f74:	4b24      	ldr	r3, [pc, #144]	; (8012008 <LoRaMacMcpsRequest+0x1e8>)
 8011f76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011f7a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011f7c:	4b22      	ldr	r3, [pc, #136]	; (8012008 <LoRaMacMcpsRequest+0x1e8>)
 8011f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f82:	f107 0108 	add.w	r1, r7, #8
 8011f86:	2205      	movs	r2, #5
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f002 f8e1 	bl	8014150 <RegionVerify>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d005      	beq.n	8011fa0 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011f94:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011f98:	4b1b      	ldr	r3, [pc, #108]	; (8012008 <LoRaMacMcpsRequest+0x1e8>)
 8011f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011f9e:	e001      	b.n	8011fa4 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011fa0:	2303      	movs	r3, #3
 8011fa2:	e029      	b.n	8011ff8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011fa4:	8bfa      	ldrh	r2, [r7, #30]
 8011fa6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011faa:	f107 000c 	add.w	r0, r7, #12
 8011fae:	78fb      	ldrb	r3, [r7, #3]
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	6a3a      	ldr	r2, [r7, #32]
 8011fb6:	f7fd fcef 	bl	800f998 <Send>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10c      	bne.n	8011fe2 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	4b0d      	ldr	r3, [pc, #52]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011fce:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011fd2:	4a0c      	ldr	r2, [pc, #48]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011fd4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011fd8:	f043 0301 	orr.w	r3, r3, #1
 8011fdc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011fe0:	e003      	b.n	8011fea <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011fe2:	4b08      	ldr	r3, [pc, #32]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011fea:	4b06      	ldr	r3, [pc, #24]	; (8012004 <LoRaMacMcpsRequest+0x1e4>)
 8011fec:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	611a      	str	r2, [r3, #16]

    return status;
 8011ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3728      	adds	r7, #40	; 0x28
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	20000984 	.word	0x20000984
 8012004:	2000054c 	.word	0x2000054c
 8012008:	20000a54 	.word	0x20000a54

0801200c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	4603      	mov	r3, r0
 8012014:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012016:	79fb      	ldrb	r3, [r7, #7]
 8012018:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801201a:	4b0a      	ldr	r3, [pc, #40]	; (8012044 <LoRaMacTestSetDutyCycleOn+0x38>)
 801201c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012020:	f107 010c 	add.w	r1, r7, #12
 8012024:	220f      	movs	r2, #15
 8012026:	4618      	mov	r0, r3
 8012028:	f002 f892 	bl	8014150 <RegionVerify>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d003      	beq.n	801203a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012032:	4a04      	ldr	r2, [pc, #16]	; (8012044 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012034:	79fb      	ldrb	r3, [r7, #7]
 8012036:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 801203a:	bf00      	nop
 801203c:	3710      	adds	r7, #16
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	20000a54 	.word	0x20000a54

08012048 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08c      	sub	sp, #48	; 0x30
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012056:	2300      	movs	r3, #0
 8012058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	7c1b      	ldrb	r3, [r3, #16]
 8012060:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	7c5b      	ldrb	r3, [r3, #17]
 8012068:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	689a      	ldr	r2, [r3, #8]
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	795b      	ldrb	r3, [r3, #5]
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 808b 	beq.w	8012194 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801207e:	2302      	movs	r3, #2
 8012080:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	7c9b      	ldrb	r3, [r3, #18]
 8012088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	7cdb      	ldrb	r3, [r3, #19]
 8012090:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012094:	4611      	mov	r1, r2
 8012096:	4618      	mov	r0, r3
 8012098:	f002 f81e 	bl	80140d8 <RegionGetPhyParam>
 801209c:	4603      	mov	r3, r0
 801209e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80120a0:	6a3b      	ldr	r3, [r7, #32]
 80120a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80120a6:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80120aa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80120ae:	4293      	cmp	r3, r2
 80120b0:	bfb8      	it	lt
 80120b2:	4613      	movlt	r3, r2
 80120b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80120b8:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80120bc:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d106      	bne.n	80120d2 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	2200      	movs	r2, #0
 80120c8:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80120ca:	2300      	movs	r3, #0
 80120cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120d0:	e060      	b.n	8012194 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	8992      	ldrh	r2, [r2, #12]
 80120da:	4293      	cmp	r3, r2
 80120dc:	d303      	bcc.n	80120e6 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80120de:	2301      	movs	r3, #1
 80120e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120e4:	e002      	b.n	80120ec <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80120e6:	2300      	movs	r3, #0
 80120e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	68fa      	ldr	r2, [r7, #12]
 80120f2:	8992      	ldrh	r2, [r2, #12]
 80120f4:	4611      	mov	r1, r2
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	89d2      	ldrh	r2, [r2, #14]
 80120fa:	440a      	add	r2, r1
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d349      	bcc.n	8012194 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8012100:	2308      	movs	r3, #8
 8012102:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	7cdb      	ldrb	r3, [r3, #19]
 801210a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801210e:	4611      	mov	r1, r2
 8012110:	4618      	mov	r0, r3
 8012112:	f001 ffe1 	bl	80140d8 <RegionGetPhyParam>
 8012116:	4603      	mov	r3, r0
 8012118:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801211a:	6a3b      	ldr	r3, [r7, #32]
 801211c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	89d2      	ldrh	r2, [r2, #14]
 8012128:	fbb3 f1f2 	udiv	r1, r3, r2
 801212c:	fb02 f201 	mul.w	r2, r2, r1
 8012130:	1a9b      	subs	r3, r3, r2
 8012132:	2b01      	cmp	r3, #1
 8012134:	d12e      	bne.n	8012194 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012136:	2322      	movs	r3, #34	; 0x22
 8012138:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 801213c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012140:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	7c9b      	ldrb	r3, [r3, #18]
 8012148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	7cdb      	ldrb	r3, [r3, #19]
 8012150:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012154:	4611      	mov	r1, r2
 8012156:	4618      	mov	r0, r3
 8012158:	f001 ffbe 	bl	80140d8 <RegionGetPhyParam>
 801215c:	4603      	mov	r3, r0
 801215e:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8012166:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801216a:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801216e:	429a      	cmp	r2, r3
 8012170:	d110      	bne.n	8012194 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8012172:	2300      	movs	r3, #0
 8012174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	791b      	ldrb	r3, [r3, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d009      	beq.n	8012194 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012180:	2302      	movs	r3, #2
 8012182:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	7cdb      	ldrb	r3, [r3, #19]
 8012188:	f107 0214 	add.w	r2, r7, #20
 801218c:	4611      	mov	r1, r2
 801218e:	4618      	mov	r0, r3
 8012190:	f001 ffcc 	bl	801412c <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801219a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80121a2:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80121a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3730      	adds	r7, #48	; 0x30
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
 80121bc:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	789b      	ldrb	r3, [r3, #2]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d107      	bne.n	80121d6 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	687a      	ldr	r2, [r7, #4]
 80121ca:	68b9      	ldr	r1, [r7, #8]
 80121cc:	68f8      	ldr	r0, [r7, #12]
 80121ce:	f7ff ff3b 	bl	8012048 <CalcNextV10X>
 80121d2:	4603      	mov	r3, r0
 80121d4:	e000      	b.n	80121d8 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80121d6:	2300      	movs	r3, #0
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 80121e0:	b480      	push	{r7}
 80121e2:	b085      	sub	sp, #20
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121ec:	bf00      	nop
 80121ee:	3714      	adds	r7, #20
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bc80      	pop	{r7}
 80121f4:	4770      	bx	lr

080121f6 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80121f6:	b480      	push	{r7}
 80121f8:	b083      	sub	sp, #12
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	4603      	mov	r3, r0
 80121fe:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	bc80      	pop	{r7}
 8012208:	4770      	bx	lr

0801220a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801220a:	b480      	push	{r7}
 801220c:	b083      	sub	sp, #12
 801220e:	af00      	add	r7, sp, #0
 8012210:	4603      	mov	r3, r0
 8012212:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	bc80      	pop	{r7}
 801221c:	4770      	bx	lr

0801221e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801221e:	b480      	push	{r7}
 8012220:	b083      	sub	sp, #12
 8012222:	af00      	add	r7, sp, #0
 8012224:	4603      	mov	r3, r0
 8012226:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012228:	bf00      	nop
 801222a:	370c      	adds	r7, #12
 801222c:	46bd      	mov	sp, r7
 801222e:	bc80      	pop	{r7}
 8012230:	4770      	bx	lr

08012232 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012232:	b480      	push	{r7}
 8012234:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012236:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012238:	4618      	mov	r0, r3
 801223a:	46bd      	mov	sp, r7
 801223c:	bc80      	pop	{r7}
 801223e:	4770      	bx	lr

08012240 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012248:	bf00      	nop
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	bc80      	pop	{r7}
 8012250:	4770      	bx	lr

08012252 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012252:	b480      	push	{r7}
 8012254:	b083      	sub	sp, #12
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801225a:	bf00      	nop
 801225c:	370c      	adds	r7, #12
 801225e:	46bd      	mov	sp, r7
 8012260:	bc80      	pop	{r7}
 8012262:	4770      	bx	lr

08012264 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012264:	b480      	push	{r7}
 8012266:	b083      	sub	sp, #12
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801226c:	bf00      	nop
 801226e:	370c      	adds	r7, #12
 8012270:	46bd      	mov	sp, r7
 8012272:	bc80      	pop	{r7}
 8012274:	4770      	bx	lr

08012276 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012276:	b480      	push	{r7}
 8012278:	b083      	sub	sp, #12
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	460b      	mov	r3, r1
 8012280:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012282:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012284:	4618      	mov	r0, r3
 8012286:	370c      	adds	r7, #12
 8012288:	46bd      	mov	sp, r7
 801228a:	bc80      	pop	{r7}
 801228c:	4770      	bx	lr

0801228e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801228e:	b480      	push	{r7}
 8012290:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012292:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012294:	4618      	mov	r0, r3
 8012296:	46bd      	mov	sp, r7
 8012298:	bc80      	pop	{r7}
 801229a:	4770      	bx	lr

0801229c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801229c:	b480      	push	{r7}
 801229e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80122a0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bc80      	pop	{r7}
 80122a8:	4770      	bx	lr

080122aa <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80122aa:	b480      	push	{r7}
 80122ac:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80122ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bc80      	pop	{r7}
 80122b6:	4770      	bx	lr

080122b8 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80122b8:	b480      	push	{r7}
 80122ba:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80122bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122be:	4618      	mov	r0, r3
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bc80      	pop	{r7}
 80122c4:	4770      	bx	lr

080122c6 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80122c6:	b480      	push	{r7}
 80122c8:	b083      	sub	sp, #12
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	4603      	mov	r3, r0
 80122ce:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122d0:	bf00      	nop
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bc80      	pop	{r7}
 80122d8:	4770      	bx	lr

080122da <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80122da:	b480      	push	{r7}
 80122dc:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122de:	bf00      	nop
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bc80      	pop	{r7}
 80122e4:	4770      	bx	lr

080122e6 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80122e6:	b480      	push	{r7}
 80122e8:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122ea:	bf00      	nop
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bc80      	pop	{r7}
 80122f0:	4770      	bx	lr

080122f2 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80122f2:	b480      	push	{r7}
 80122f4:	b083      	sub	sp, #12
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	4603      	mov	r3, r0
 80122fa:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80122fc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80122fe:	4618      	mov	r0, r3
 8012300:	370c      	adds	r7, #12
 8012302:	46bd      	mov	sp, r7
 8012304:	bc80      	pop	{r7}
 8012306:	4770      	bx	lr

08012308 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012308:	b480      	push	{r7}
 801230a:	b083      	sub	sp, #12
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012310:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012312:	4618      	mov	r0, r3
 8012314:	370c      	adds	r7, #12
 8012316:	46bd      	mov	sp, r7
 8012318:	bc80      	pop	{r7}
 801231a:	4770      	bx	lr

0801231c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801231c:	b480      	push	{r7}
 801231e:	b083      	sub	sp, #12
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012324:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012326:	4618      	mov	r0, r3
 8012328:	370c      	adds	r7, #12
 801232a:	46bd      	mov	sp, r7
 801232c:	bc80      	pop	{r7}
 801232e:	4770      	bx	lr

08012330 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012330:	b480      	push	{r7}
 8012332:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012334:	bf00      	nop
 8012336:	46bd      	mov	sp, r7
 8012338:	bc80      	pop	{r7}
 801233a:	4770      	bx	lr

0801233c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	4603      	mov	r3, r0
 8012344:	6039      	str	r1, [r7, #0]
 8012346:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012348:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	bc80      	pop	{r7}
 8012352:	4770      	bx	lr

08012354 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	4603      	mov	r3, r0
 801235c:	603a      	str	r2, [r7, #0]
 801235e:	80fb      	strh	r3, [r7, #6]
 8012360:	460b      	mov	r3, r1
 8012362:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012364:	bf00      	nop
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	bc80      	pop	{r7}
 801236c:	4770      	bx	lr

0801236e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801236e:	b480      	push	{r7}
 8012370:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012372:	bf00      	nop
 8012374:	46bd      	mov	sp, r7
 8012376:	bc80      	pop	{r7}
 8012378:	4770      	bx	lr

0801237a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801237a:	b480      	push	{r7}
 801237c:	b083      	sub	sp, #12
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012382:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012384:	4618      	mov	r0, r3
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	bc80      	pop	{r7}
 801238c:	4770      	bx	lr

0801238e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801238e:	b480      	push	{r7}
 8012390:	b083      	sub	sp, #12
 8012392:	af00      	add	r7, sp, #0
 8012394:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012396:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012398:	4618      	mov	r0, r3
 801239a:	370c      	adds	r7, #12
 801239c:	46bd      	mov	sp, r7
 801239e:	bc80      	pop	{r7}
 80123a0:	4770      	bx	lr

080123a2 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80123a2:	b480      	push	{r7}
 80123a4:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123a6:	bf00      	nop
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bc80      	pop	{r7}
 80123ac:	4770      	bx	lr

080123ae <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 80123ae:	b480      	push	{r7}
 80123b0:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80123b2:	bf00      	nop
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bc80      	pop	{r7}
 80123b8:	4770      	bx	lr

080123ba <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80123ba:	b480      	push	{r7}
 80123bc:	b085      	sub	sp, #20
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123c6:	2300      	movs	r3, #0
 80123c8:	81fb      	strh	r3, [r7, #14]
 80123ca:	e00a      	b.n	80123e2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80123cc:	89fb      	ldrh	r3, [r7, #14]
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	4413      	add	r3, r2
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <IsSlotFree+0x22>
        {
            return false;
 80123d8:	2300      	movs	r3, #0
 80123da:	e006      	b.n	80123ea <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80123dc:	89fb      	ldrh	r3, [r7, #14]
 80123de:	3301      	adds	r3, #1
 80123e0:	81fb      	strh	r3, [r7, #14]
 80123e2:	89fb      	ldrh	r3, [r7, #14]
 80123e4:	2b0f      	cmp	r3, #15
 80123e6:	d9f1      	bls.n	80123cc <IsSlotFree+0x12>
        }
    }
    return true;
 80123e8:	2301      	movs	r3, #1
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3714      	adds	r7, #20
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bc80      	pop	{r7}
 80123f2:	4770      	bx	lr

080123f4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80123fe:	e007      	b.n	8012410 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012400:	79fb      	ldrb	r3, [r7, #7]
 8012402:	3301      	adds	r3, #1
 8012404:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	2b0f      	cmp	r3, #15
 801240a:	d101      	bne.n	8012410 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801240c:	2300      	movs	r3, #0
 801240e:	e012      	b.n	8012436 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	011b      	lsls	r3, r3, #4
 8012414:	3308      	adds	r3, #8
 8012416:	4a0a      	ldr	r2, [pc, #40]	; (8012440 <MallocNewMacCommandSlot+0x4c>)
 8012418:	4413      	add	r3, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f7ff ffcd 	bl	80123ba <IsSlotFree>
 8012420:	4603      	mov	r3, r0
 8012422:	f083 0301 	eor.w	r3, r3, #1
 8012426:	b2db      	uxtb	r3, r3
 8012428:	2b00      	cmp	r3, #0
 801242a:	d1e9      	bne.n	8012400 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801242c:	79fb      	ldrb	r3, [r7, #7]
 801242e:	011b      	lsls	r3, r3, #4
 8012430:	3308      	adds	r3, #8
 8012432:	4a03      	ldr	r2, [pc, #12]	; (8012440 <MallocNewMacCommandSlot+0x4c>)
 8012434:	4413      	add	r3, r2
}
 8012436:	4618      	mov	r0, r3
 8012438:	3708      	adds	r7, #8
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	20000da4 	.word	0x20000da4

08012444 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d101      	bne.n	8012456 <FreeMacCommandSlot+0x12>
    {
        return false;
 8012452:	2300      	movs	r3, #0
 8012454:	e005      	b.n	8012462 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012456:	2210      	movs	r2, #16
 8012458:	2100      	movs	r1, #0
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f004 f982 	bl	8016764 <memset1>

    return true;
 8012460:	2301      	movs	r3, #1
}
 8012462:	4618      	mov	r0, r3
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801246a:	b480      	push	{r7}
 801246c:	b083      	sub	sp, #12
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d101      	bne.n	801247c <LinkedListInit+0x12>
    {
        return false;
 8012478:	2300      	movs	r3, #0
 801247a:	e006      	b.n	801248a <LinkedListInit+0x20>
    }

    list->First = NULL;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2200      	movs	r2, #0
 8012486:	605a      	str	r2, [r3, #4]

    return true;
 8012488:	2301      	movs	r3, #1
}
 801248a:	4618      	mov	r0, r3
 801248c:	370c      	adds	r7, #12
 801248e:	46bd      	mov	sp, r7
 8012490:	bc80      	pop	{r7}
 8012492:	4770      	bx	lr

08012494 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <LinkedListAdd+0x16>
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d101      	bne.n	80124ae <LinkedListAdd+0x1a>
    {
        return false;
 80124aa:	2300      	movs	r3, #0
 80124ac:	e015      	b.n	80124da <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d102      	bne.n	80124bc <LinkedListAdd+0x28>
    {
        list->First = element;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	683a      	ldr	r2, [r7, #0]
 80124ba:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d003      	beq.n	80124cc <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	683a      	ldr	r2, [r7, #0]
 80124ca:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2200      	movs	r2, #0
 80124d0:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	683a      	ldr	r2, [r7, #0]
 80124d6:	605a      	str	r2, [r3, #4]

    return true;
 80124d8:	2301      	movs	r3, #1
}
 80124da:	4618      	mov	r0, r3
 80124dc:	370c      	adds	r7, #12
 80124de:	46bd      	mov	sp, r7
 80124e0:	bc80      	pop	{r7}
 80124e2:	4770      	bx	lr

080124e4 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80124e4:	b480      	push	{r7}
 80124e6:	b085      	sub	sp, #20
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d002      	beq.n	80124fa <LinkedListGetPrevious+0x16>
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d101      	bne.n	80124fe <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80124fa:	2300      	movs	r3, #0
 80124fc:	e016      	b.n	801252c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012504:	683a      	ldr	r2, [r7, #0]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	429a      	cmp	r2, r3
 801250a:	d00c      	beq.n	8012526 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801250c:	e002      	b.n	8012514 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d007      	beq.n	801252a <LinkedListGetPrevious+0x46>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	683a      	ldr	r2, [r7, #0]
 8012520:	429a      	cmp	r2, r3
 8012522:	d1f4      	bne.n	801250e <LinkedListGetPrevious+0x2a>
 8012524:	e001      	b.n	801252a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012526:	2300      	movs	r3, #0
 8012528:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801252a:	68fb      	ldr	r3, [r7, #12]
}
 801252c:	4618      	mov	r0, r3
 801252e:	3714      	adds	r7, #20
 8012530:	46bd      	mov	sp, r7
 8012532:	bc80      	pop	{r7}
 8012534:	4770      	bx	lr

08012536 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012536:	b580      	push	{r7, lr}
 8012538:	b084      	sub	sp, #16
 801253a:	af00      	add	r7, sp, #0
 801253c:	6078      	str	r0, [r7, #4]
 801253e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d002      	beq.n	801254c <LinkedListRemove+0x16>
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d101      	bne.n	8012550 <LinkedListRemove+0x1a>
    {
        return false;
 801254c:	2300      	movs	r3, #0
 801254e:	e020      	b.n	8012592 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012550:	6839      	ldr	r1, [r7, #0]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7ff ffc6 	bl	80124e4 <LinkedListGetPrevious>
 8012558:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	683a      	ldr	r2, [r7, #0]
 8012560:	429a      	cmp	r2, r3
 8012562:	d103      	bne.n	801256c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	681a      	ldr	r2, [r3, #0]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	683a      	ldr	r2, [r7, #0]
 8012572:	429a      	cmp	r2, r3
 8012574:	d102      	bne.n	801257c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d003      	beq.n	801258a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	2200      	movs	r2, #0
 801258e:	601a      	str	r2, [r3, #0]

    return true;
 8012590:	2301      	movs	r3, #1
}
 8012592:	4618      	mov	r0, r3
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801259a:	b480      	push	{r7}
 801259c:	b083      	sub	sp, #12
 801259e:	af00      	add	r7, sp, #0
 80125a0:	4603      	mov	r3, r0
 80125a2:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80125a4:	79fb      	ldrb	r3, [r7, #7]
 80125a6:	2b05      	cmp	r3, #5
 80125a8:	d004      	beq.n	80125b4 <IsSticky+0x1a>
 80125aa:	2b05      	cmp	r3, #5
 80125ac:	db04      	blt.n	80125b8 <IsSticky+0x1e>
 80125ae:	3b08      	subs	r3, #8
 80125b0:	2b02      	cmp	r3, #2
 80125b2:	d801      	bhi.n	80125b8 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80125b4:	2301      	movs	r3, #1
 80125b6:	e000      	b.n	80125ba <IsSticky+0x20>
        default:
            return false;
 80125b8:	2300      	movs	r3, #0
    }
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	370c      	adds	r7, #12
 80125be:	46bd      	mov	sp, r7
 80125c0:	bc80      	pop	{r7}
 80125c2:	4770      	bx	lr

080125c4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80125c8:	22fc      	movs	r2, #252	; 0xfc
 80125ca:	2100      	movs	r1, #0
 80125cc:	4804      	ldr	r0, [pc, #16]	; (80125e0 <LoRaMacCommandsInit+0x1c>)
 80125ce:	f004 f8c9 	bl	8016764 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80125d2:	4803      	ldr	r0, [pc, #12]	; (80125e0 <LoRaMacCommandsInit+0x1c>)
 80125d4:	f7ff ff49 	bl	801246a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80125d8:	2300      	movs	r3, #0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	bf00      	nop
 80125e0:	20000da4 	.word	0x20000da4

080125e4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b086      	sub	sp, #24
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d101      	bne.n	80125fc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80125f8:	2301      	movs	r3, #1
 80125fa:	e033      	b.n	8012664 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80125fc:	f7ff fefa 	bl	80123f4 <MallocNewMacCommandSlot>
 8012600:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d101      	bne.n	801260c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012608:	2302      	movs	r3, #2
 801260a:	e02b      	b.n	8012664 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801260c:	6979      	ldr	r1, [r7, #20]
 801260e:	4817      	ldr	r0, [pc, #92]	; (801266c <LoRaMacCommandsAddCmd+0x88>)
 8012610:	f7ff ff40 	bl	8012494 <LinkedListAdd>
 8012614:	4603      	mov	r3, r0
 8012616:	f083 0301 	eor.w	r3, r3, #1
 801261a:	b2db      	uxtb	r3, r3
 801261c:	2b00      	cmp	r3, #0
 801261e:	d001      	beq.n	8012624 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012620:	2305      	movs	r3, #5
 8012622:	e01f      	b.n	8012664 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	7bfa      	ldrb	r2, [r7, #15]
 8012628:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	3305      	adds	r3, #5
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	b292      	uxth	r2, r2
 8012638:	68b9      	ldr	r1, [r7, #8]
 801263a:	4618      	mov	r0, r3
 801263c:	f004 f857 	bl	80166ee <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012640:	7bfb      	ldrb	r3, [r7, #15]
 8012642:	4618      	mov	r0, r3
 8012644:	f7ff ffa9 	bl	801259a <IsSticky>
 8012648:	4603      	mov	r3, r0
 801264a:	461a      	mov	r2, r3
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012650:	4b06      	ldr	r3, [pc, #24]	; (801266c <LoRaMacCommandsAddCmd+0x88>)
 8012652:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4413      	add	r3, r2
 801265a:	3301      	adds	r3, #1
 801265c:	4a03      	ldr	r2, [pc, #12]	; (801266c <LoRaMacCommandsAddCmd+0x88>)
 801265e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012662:	2300      	movs	r3, #0
}
 8012664:	4618      	mov	r0, r3
 8012666:	3718      	adds	r7, #24
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	20000da4 	.word	0x20000da4

08012670 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d101      	bne.n	8012682 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801267e:	2301      	movs	r3, #1
 8012680:	e021      	b.n	80126c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012682:	6879      	ldr	r1, [r7, #4]
 8012684:	4812      	ldr	r0, [pc, #72]	; (80126d0 <LoRaMacCommandsRemoveCmd+0x60>)
 8012686:	f7ff ff56 	bl	8012536 <LinkedListRemove>
 801268a:	4603      	mov	r3, r0
 801268c:	f083 0301 	eor.w	r3, r3, #1
 8012690:	b2db      	uxtb	r3, r3
 8012692:	2b00      	cmp	r3, #0
 8012694:	d001      	beq.n	801269a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012696:	2303      	movs	r3, #3
 8012698:	e015      	b.n	80126c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801269a:	4b0d      	ldr	r3, [pc, #52]	; (80126d0 <LoRaMacCommandsRemoveCmd+0x60>)
 801269c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	689b      	ldr	r3, [r3, #8]
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	3b01      	subs	r3, #1
 80126a8:	4a09      	ldr	r2, [pc, #36]	; (80126d0 <LoRaMacCommandsRemoveCmd+0x60>)
 80126aa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7ff fec8 	bl	8012444 <FreeMacCommandSlot>
 80126b4:	4603      	mov	r3, r0
 80126b6:	f083 0301 	eor.w	r3, r3, #1
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80126c0:	2305      	movs	r3, #5
 80126c2:	e000      	b.n	80126c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3708      	adds	r7, #8
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	20000da4 	.word	0x20000da4

080126d4 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80126da:	4b0f      	ldr	r3, [pc, #60]	; (8012718 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80126e0:	e012      	b.n	8012708 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	7b1b      	ldrb	r3, [r3, #12]
 80126e6:	f083 0301 	eor.w	r3, r3, #1
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d008      	beq.n	8012702 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f7ff ffba 	bl	8012670 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	607b      	str	r3, [r7, #4]
 8012700:	e002      	b.n	8012708 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d1e9      	bne.n	80126e2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20000da4 	.word	0x20000da4

0801271c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012722:	4b0e      	ldr	r3, [pc, #56]	; (801275c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012728:	e00f      	b.n	801274a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	791b      	ldrb	r3, [r3, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff ff30 	bl	801259a <IsSticky>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d002      	beq.n	8012746 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7ff ff95 	bl	8012670 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d1ec      	bne.n	801272a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012750:	2300      	movs	r3, #0
}
 8012752:	4618      	mov	r0, r3
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	20000da4 	.word	0x20000da4

08012760 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801276e:	2301      	movs	r3, #1
 8012770:	e005      	b.n	801277e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012772:	4b05      	ldr	r3, [pc, #20]	; (8012788 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012774:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801277c:	2300      	movs	r3, #0
}
 801277e:	4618      	mov	r0, r3
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	bc80      	pop	{r7}
 8012786:	4770      	bx	lr
 8012788:	20000da4 	.word	0x20000da4

0801278c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b088      	sub	sp, #32
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012798:	4b25      	ldr	r3, [pc, #148]	; (8012830 <LoRaMacCommandsSerializeCmds+0xa4>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801279e:	2300      	movs	r3, #0
 80127a0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d002      	beq.n	80127ae <LoRaMacCommandsSerializeCmds+0x22>
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d126      	bne.n	80127fc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80127ae:	2301      	movs	r3, #1
 80127b0:	e039      	b.n	8012826 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80127b2:	7efb      	ldrb	r3, [r7, #27]
 80127b4:	68fa      	ldr	r2, [r7, #12]
 80127b6:	1ad2      	subs	r2, r2, r3
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	689b      	ldr	r3, [r3, #8]
 80127bc:	3301      	adds	r3, #1
 80127be:	429a      	cmp	r2, r3
 80127c0:	d320      	bcc.n	8012804 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80127c2:	7efb      	ldrb	r3, [r7, #27]
 80127c4:	1c5a      	adds	r2, r3, #1
 80127c6:	76fa      	strb	r2, [r7, #27]
 80127c8:	461a      	mov	r2, r3
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4413      	add	r3, r2
 80127ce:	69fa      	ldr	r2, [r7, #28]
 80127d0:	7912      	ldrb	r2, [r2, #4]
 80127d2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80127d4:	7efb      	ldrb	r3, [r7, #27]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	18d0      	adds	r0, r2, r3
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	1d59      	adds	r1, r3, #5
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	461a      	mov	r2, r3
 80127e6:	f003 ff82 	bl	80166ee <memcpy1>
            itr += curElement->PayloadSize;
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	689b      	ldr	r3, [r3, #8]
 80127ee:	b2da      	uxtb	r2, r3
 80127f0:	7efb      	ldrb	r3, [r7, #27]
 80127f2:	4413      	add	r3, r2
 80127f4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1d7      	bne.n	80127b2 <LoRaMacCommandsSerializeCmds+0x26>
 8012802:	e009      	b.n	8012818 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012804:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012806:	e007      	b.n	8012818 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801280e:	69f8      	ldr	r0, [r7, #28]
 8012810:	f7ff ff2e 	bl	8012670 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1f4      	bne.n	8012808 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801281e:	68b8      	ldr	r0, [r7, #8]
 8012820:	f7ff ff9e 	bl	8012760 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012824:	2300      	movs	r3, #0
}
 8012826:	4618      	mov	r0, r3
 8012828:	3720      	adds	r7, #32
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	20000da4 	.word	0x20000da4

08012834 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012834:	b480      	push	{r7}
 8012836:	b085      	sub	sp, #20
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012842:	2301      	movs	r3, #1
 8012844:	e016      	b.n	8012874 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012846:	4b0e      	ldr	r3, [pc, #56]	; (8012880 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2200      	movs	r2, #0
 8012850:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012852:	e00b      	b.n	801286c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	7b1b      	ldrb	r3, [r3, #12]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d004      	beq.n	8012866 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2201      	movs	r2, #1
 8012860:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012862:	2300      	movs	r3, #0
 8012864:	e006      	b.n	8012874 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1f0      	bne.n	8012854 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012872:	2300      	movs	r3, #0
}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	bc80      	pop	{r7}
 801287c:	4770      	bx	lr
 801287e:	bf00      	nop
 8012880:	20000da4 	.word	0x20000da4

08012884 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012884:	b480      	push	{r7}
 8012886:	b085      	sub	sp, #20
 8012888:	af00      	add	r7, sp, #0
 801288a:	4603      	mov	r3, r0
 801288c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801288e:	2300      	movs	r3, #0
 8012890:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012892:	79fb      	ldrb	r3, [r7, #7]
 8012894:	3b02      	subs	r3, #2
 8012896:	2b11      	cmp	r3, #17
 8012898:	d850      	bhi.n	801293c <LoRaMacCommandsGetCmdSize+0xb8>
 801289a:	a201      	add	r2, pc, #4	; (adr r2, 80128a0 <LoRaMacCommandsGetCmdSize+0x1c>)
 801289c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128a0:	080128e9 	.word	0x080128e9
 80128a4:	080128ef 	.word	0x080128ef
 80128a8:	080128f5 	.word	0x080128f5
 80128ac:	080128fb 	.word	0x080128fb
 80128b0:	08012901 	.word	0x08012901
 80128b4:	08012907 	.word	0x08012907
 80128b8:	0801290d 	.word	0x0801290d
 80128bc:	08012913 	.word	0x08012913
 80128c0:	08012919 	.word	0x08012919
 80128c4:	0801293d 	.word	0x0801293d
 80128c8:	0801293d 	.word	0x0801293d
 80128cc:	0801291f 	.word	0x0801291f
 80128d0:	0801293d 	.word	0x0801293d
 80128d4:	0801293d 	.word	0x0801293d
 80128d8:	08012925 	.word	0x08012925
 80128dc:	0801292b 	.word	0x0801292b
 80128e0:	08012931 	.word	0x08012931
 80128e4:	08012937 	.word	0x08012937
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80128e8:	2303      	movs	r3, #3
 80128ea:	73fb      	strb	r3, [r7, #15]
            break;
 80128ec:	e027      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80128ee:	2305      	movs	r3, #5
 80128f0:	73fb      	strb	r3, [r7, #15]
            break;
 80128f2:	e024      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80128f4:	2302      	movs	r3, #2
 80128f6:	73fb      	strb	r3, [r7, #15]
            break;
 80128f8:	e021      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80128fa:	2305      	movs	r3, #5
 80128fc:	73fb      	strb	r3, [r7, #15]
            break;
 80128fe:	e01e      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012900:	2301      	movs	r3, #1
 8012902:	73fb      	strb	r3, [r7, #15]
            break;
 8012904:	e01b      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012906:	2306      	movs	r3, #6
 8012908:	73fb      	strb	r3, [r7, #15]
            break;
 801290a:	e018      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801290c:	2302      	movs	r3, #2
 801290e:	73fb      	strb	r3, [r7, #15]
            break;
 8012910:	e015      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012912:	2302      	movs	r3, #2
 8012914:	73fb      	strb	r3, [r7, #15]
            break;
 8012916:	e012      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012918:	2305      	movs	r3, #5
 801291a:	73fb      	strb	r3, [r7, #15]
            break;
 801291c:	e00f      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801291e:	2306      	movs	r3, #6
 8012920:	73fb      	strb	r3, [r7, #15]
            break;
 8012922:	e00c      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012924:	2301      	movs	r3, #1
 8012926:	73fb      	strb	r3, [r7, #15]
            break;
 8012928:	e009      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801292a:	2305      	movs	r3, #5
 801292c:	73fb      	strb	r3, [r7, #15]
            break;
 801292e:	e006      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012930:	2304      	movs	r3, #4
 8012932:	73fb      	strb	r3, [r7, #15]
            break;
 8012934:	e003      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012936:	2304      	movs	r3, #4
 8012938:	73fb      	strb	r3, [r7, #15]
            break;
 801293a:	e000      	b.n	801293e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801293c:	bf00      	nop
        }
    }
    return cidSize;
 801293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	bc80      	pop	{r7}
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop

0801294c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801294c:	b480      	push	{r7}
 801294e:	b083      	sub	sp, #12
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	4a07      	ldr	r2, [pc, #28]	; (8012974 <IncreaseBufferPointer+0x28>)
 8012958:	4293      	cmp	r3, r2
 801295a:	d102      	bne.n	8012962 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801295c:	4b06      	ldr	r3, [pc, #24]	; (8012978 <IncreaseBufferPointer+0x2c>)
 801295e:	607b      	str	r3, [r7, #4]
 8012960:	e002      	b.n	8012968 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3304      	adds	r3, #4
 8012966:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012968:	687b      	ldr	r3, [r7, #4]
}
 801296a:	4618      	mov	r0, r3
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	bc80      	pop	{r7}
 8012972:	4770      	bx	lr
 8012974:	20000ebc 	.word	0x20000ebc
 8012978:	20000eac 	.word	0x20000eac

0801297c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	4603      	mov	r3, r0
 8012984:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012986:	79fb      	ldrb	r3, [r7, #7]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d101      	bne.n	8012990 <IsListEmpty+0x14>
    {
        return true;
 801298c:	2301      	movs	r3, #1
 801298e:	e000      	b.n	8012992 <IsListEmpty+0x16>
    }
    return false;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	370c      	adds	r7, #12
 8012996:	46bd      	mov	sp, r7
 8012998:	bc80      	pop	{r7}
 801299a:	4770      	bx	lr

0801299c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	4603      	mov	r3, r0
 80129a4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80129a6:	79fb      	ldrb	r3, [r7, #7]
 80129a8:	2b04      	cmp	r3, #4
 80129aa:	d901      	bls.n	80129b0 <IsListFull+0x14>
    {
        return true;
 80129ac:	2301      	movs	r3, #1
 80129ae:	e000      	b.n	80129b2 <IsListFull+0x16>
    }
    return false;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	370c      	adds	r7, #12
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bc80      	pop	{r7}
 80129ba:	4770      	bx	lr

080129bc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	4603      	mov	r3, r0
 80129c4:	60b9      	str	r1, [r7, #8]
 80129c6:	607a      	str	r2, [r7, #4]
 80129c8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80129ce:	4b13      	ldr	r3, [pc, #76]	; (8012a1c <GetElement+0x60>)
 80129d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7ff ffd1 	bl	801297c <IsListEmpty>
 80129da:	4603      	mov	r3, r0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d001      	beq.n	80129e4 <GetElement+0x28>
    {
        return NULL;
 80129e0:	2300      	movs	r3, #0
 80129e2:	e017      	b.n	8012a14 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80129e4:	2300      	movs	r3, #0
 80129e6:	74fb      	strb	r3, [r7, #19]
 80129e8:	e00d      	b.n	8012a06 <GetElement+0x4a>
    {
        if( element->Request == request )
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	7bfa      	ldrb	r2, [r7, #15]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d101      	bne.n	80129f8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	e00d      	b.n	8012a14 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80129f8:	6978      	ldr	r0, [r7, #20]
 80129fa:	f7ff ffa7 	bl	801294c <IncreaseBufferPointer>
 80129fe:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012a00:	7cfb      	ldrb	r3, [r7, #19]
 8012a02:	3301      	adds	r3, #1
 8012a04:	74fb      	strb	r3, [r7, #19]
 8012a06:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <GetElement+0x60>)
 8012a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a0c:	7cfa      	ldrb	r2, [r7, #19]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d3eb      	bcc.n	80129ea <GetElement+0x2e>
    }

    return NULL;
 8012a12:	2300      	movs	r3, #0
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3718      	adds	r7, #24
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	20000ea0 	.word	0x20000ea0

08012a20 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012a28:	4a0c      	ldr	r2, [pc, #48]	; (8012a5c <LoRaMacConfirmQueueInit+0x3c>)
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012a2e:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <LoRaMacConfirmQueueInit+0x3c>)
 8012a30:	2200      	movs	r2, #0
 8012a32:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a36:	4b09      	ldr	r3, [pc, #36]	; (8012a5c <LoRaMacConfirmQueueInit+0x3c>)
 8012a38:	4a09      	ldr	r2, [pc, #36]	; (8012a60 <LoRaMacConfirmQueueInit+0x40>)
 8012a3a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012a3c:	4b07      	ldr	r3, [pc, #28]	; (8012a5c <LoRaMacConfirmQueueInit+0x3c>)
 8012a3e:	4a08      	ldr	r2, [pc, #32]	; (8012a60 <LoRaMacConfirmQueueInit+0x40>)
 8012a40:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012a42:	2214      	movs	r2, #20
 8012a44:	21ff      	movs	r1, #255	; 0xff
 8012a46:	4806      	ldr	r0, [pc, #24]	; (8012a60 <LoRaMacConfirmQueueInit+0x40>)
 8012a48:	f003 fe8c 	bl	8016764 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a4c:	4b03      	ldr	r3, [pc, #12]	; (8012a5c <LoRaMacConfirmQueueInit+0x3c>)
 8012a4e:	2201      	movs	r2, #1
 8012a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012a54:	bf00      	nop
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	20000ea0 	.word	0x20000ea0
 8012a60:	20000eac 	.word	0x20000eac

08012a64 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b082      	sub	sp, #8
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a6c:	4b19      	ldr	r3, [pc, #100]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ff ff92 	bl	801299c <IsListFull>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	e023      	b.n	8012aca <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012a82:	4b14      	ldr	r3, [pc, #80]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012a84:	689b      	ldr	r3, [r3, #8]
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	7812      	ldrb	r2, [r2, #0]
 8012a8a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012a8c:	4b11      	ldr	r3, [pc, #68]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012a8e:	689b      	ldr	r3, [r3, #8]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	7852      	ldrb	r2, [r2, #1]
 8012a94:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012a96:	4b0f      	ldr	r3, [pc, #60]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012a98:	689b      	ldr	r3, [r3, #8]
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	78d2      	ldrb	r2, [r2, #3]
 8012a9e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012aa0:	4b0c      	ldr	r3, [pc, #48]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012aa8:	4b0a      	ldr	r3, [pc, #40]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	b2da      	uxtb	r2, r3
 8012ab2:	4b08      	ldr	r3, [pc, #32]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012ab4:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012ab8:	4b06      	ldr	r3, [pc, #24]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7ff ff45 	bl	801294c <IncreaseBufferPointer>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	4a03      	ldr	r2, [pc, #12]	; (8012ad4 <LoRaMacConfirmQueueAdd+0x70>)
 8012ac6:	6093      	str	r3, [r2, #8]

    return true;
 8012ac8:	2301      	movs	r3, #1
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3708      	adds	r7, #8
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	20000ea0 	.word	0x20000ea0

08012ad8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012adc:	4b0e      	ldr	r3, [pc, #56]	; (8012b18 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7ff ff4a 	bl	801297c <IsListEmpty>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012aee:	2300      	movs	r3, #0
 8012af0:	e010      	b.n	8012b14 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012af2:	4b09      	ldr	r3, [pc, #36]	; (8012b18 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012af8:	3b01      	subs	r3, #1
 8012afa:	b2da      	uxtb	r2, r3
 8012afc:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012afe:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012b02:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7ff ff20 	bl	801294c <IncreaseBufferPointer>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	4a02      	ldr	r2, [pc, #8]	; (8012b18 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012b10:	6053      	str	r3, [r2, #4]

    return true;
 8012b12:	2301      	movs	r3, #1
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	20000ea0 	.word	0x20000ea0

08012b1c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b084      	sub	sp, #16
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	4603      	mov	r3, r0
 8012b24:	460a      	mov	r2, r1
 8012b26:	71fb      	strb	r3, [r7, #7]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b30:	4b10      	ldr	r3, [pc, #64]	; (8012b74 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff ff20 	bl	801297c <IsListEmpty>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f083 0301 	eor.w	r3, r3, #1
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d011      	beq.n	8012b6c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b48:	4b0a      	ldr	r3, [pc, #40]	; (8012b74 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b4a:	6859      	ldr	r1, [r3, #4]
 8012b4c:	4b09      	ldr	r3, [pc, #36]	; (8012b74 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012b4e:	689a      	ldr	r2, [r3, #8]
 8012b50:	79bb      	ldrb	r3, [r7, #6]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7ff ff32 	bl	80129bc <GetElement>
 8012b58:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d005      	beq.n	8012b6c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	79fa      	ldrb	r2, [r7, #7]
 8012b64:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012b6c:	bf00      	nop
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	20000ea0 	.word	0x20000ea0

08012b78 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012b82:	2300      	movs	r3, #0
 8012b84:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012b86:	4b10      	ldr	r3, [pc, #64]	; (8012bc8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7ff fef5 	bl	801297c <IsListEmpty>
 8012b92:	4603      	mov	r3, r0
 8012b94:	f083 0301 	eor.w	r3, r3, #1
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00e      	beq.n	8012bbc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012b9e:	4b0a      	ldr	r3, [pc, #40]	; (8012bc8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012ba0:	6859      	ldr	r1, [r3, #4]
 8012ba2:	4b09      	ldr	r3, [pc, #36]	; (8012bc8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012ba4:	689a      	ldr	r2, [r3, #8]
 8012ba6:	79fb      	ldrb	r3, [r7, #7]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7ff ff07 	bl	80129bc <GetElement>
 8012bae:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d002      	beq.n	8012bbc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	785b      	ldrb	r3, [r3, #1]
 8012bba:	e000      	b.n	8012bbe <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012bbc:	2301      	movs	r3, #1
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	3710      	adds	r7, #16
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd80      	pop	{r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	20000ea0 	.word	0x20000ea0

08012bcc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012bd6:	4b16      	ldr	r3, [pc, #88]	; (8012c30 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012bdc:	4a14      	ldr	r2, [pc, #80]	; (8012c30 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012bde:	79fb      	ldrb	r3, [r7, #7]
 8012be0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012be4:	4b12      	ldr	r3, [pc, #72]	; (8012c30 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7ff fec6 	bl	801297c <IsListEmpty>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f083 0301 	eor.w	r3, r3, #1
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d015      	beq.n	8012c28 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	79fa      	ldrb	r2, [r7, #7]
 8012c00:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	78db      	ldrb	r3, [r3, #3]
 8012c06:	f083 0301 	eor.w	r3, r3, #1
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d002      	beq.n	8012c16 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2201      	movs	r2, #1
 8012c14:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f7ff fe98 	bl	801294c <IncreaseBufferPointer>
 8012c1c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012c1e:	4b04      	ldr	r3, [pc, #16]	; (8012c30 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	68fa      	ldr	r2, [r7, #12]
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d1e9      	bne.n	8012bfc <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012c28:	bf00      	nop
 8012c2a:	3710      	adds	r7, #16
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	20000ea0 	.word	0x20000ea0

08012c34 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b082      	sub	sp, #8
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012c3e:	4b09      	ldr	r3, [pc, #36]	; (8012c64 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c40:	6859      	ldr	r1, [r3, #4]
 8012c42:	4b08      	ldr	r3, [pc, #32]	; (8012c64 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012c44:	689a      	ldr	r2, [r3, #8]
 8012c46:	79fb      	ldrb	r3, [r7, #7]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff feb7 	bl	80129bc <GetElement>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012c54:	2301      	movs	r3, #1
 8012c56:	e000      	b.n	8012c5a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012c58:	2300      	movs	r3, #0
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	20000ea0 	.word	0x20000ea0

08012c68 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012c70:	4b22      	ldr	r3, [pc, #136]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c76:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	73fb      	strb	r3, [r7, #15]
 8012c80:	e032      	b.n	8012ce8 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012c82:	4b1e      	ldr	r3, [pc, #120]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	781a      	ldrb	r2, [r3, #0]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012c8c:	4b1b      	ldr	r3, [pc, #108]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	785a      	ldrb	r2, [r3, #1]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012c96:	4b19      	ldr	r3, [pc, #100]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	789b      	ldrb	r3, [r3, #2]
 8012c9c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012c9e:	7b7b      	ldrb	r3, [r7, #13]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d005      	beq.n	8012cb0 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012ca4:	4b15      	ldr	r3, [pc, #84]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	689b      	ldr	r3, [r3, #8]
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	4798      	blx	r3
 8012cae:	e00b      	b.n	8012cc8 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012cb0:	4b12      	ldr	r3, [pc, #72]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012cb8:	4b10      	ldr	r3, [pc, #64]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	785b      	ldrb	r3, [r3, #1]
 8012cbe:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012cc0:	4b0e      	ldr	r3, [pc, #56]	; (8012cfc <LoRaMacConfirmQueueHandleCb+0x94>)
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	78db      	ldrb	r3, [r3, #3]
 8012cc6:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012cc8:	f7ff ff06 	bl	8012ad8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012ccc:	7b7b      	ldrb	r3, [r7, #13]
 8012cce:	f083 0301 	eor.w	r3, r3, #1
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d004      	beq.n	8012ce2 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012cd8:	f107 0308 	add.w	r3, r7, #8
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7ff fec1 	bl	8012a64 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012ce2:	7bfb      	ldrb	r3, [r7, #15]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	73fb      	strb	r3, [r7, #15]
 8012ce8:	7bfa      	ldrb	r2, [r7, #15]
 8012cea:	7bbb      	ldrb	r3, [r7, #14]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d3c8      	bcc.n	8012c82 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012cf0:	bf00      	nop
 8012cf2:	bf00      	nop
 8012cf4:	3710      	adds	r7, #16
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	20000ea0 	.word	0x20000ea0

08012d00 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012d00:	b480      	push	{r7}
 8012d02:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012d04:	4b03      	ldr	r3, [pc, #12]	; (8012d14 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012d06:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bc80      	pop	{r7}
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	20000ea0 	.word	0x20000ea0

08012d18 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012d1c:	4b06      	ldr	r3, [pc, #24]	; (8012d38 <LoRaMacConfirmQueueIsFull+0x20>)
 8012d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7ff fe3a 	bl	801299c <IsListFull>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d001      	beq.n	8012d32 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e000      	b.n	8012d34 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012d32:	2300      	movs	r3, #0
    }
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	20000ea0 	.word	0x20000ea0

08012d3c <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b08e      	sub	sp, #56	; 0x38
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	607b      	str	r3, [r7, #4]
 8012d46:	460b      	mov	r3, r1
 8012d48:	817b      	strh	r3, [r7, #10]
 8012d4a:	4613      	mov	r3, r2
 8012d4c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d101      	bne.n	8012d58 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d54:	230a      	movs	r3, #10
 8012d56:	e087      	b.n	8012e68 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012d62:	2300      	movs	r3, #0
 8012d64:	623b      	str	r3, [r7, #32]
 8012d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	605a      	str	r2, [r3, #4]
 8012d70:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012d72:	2300      	movs	r3, #0
 8012d74:	613b      	str	r3, [r7, #16]
 8012d76:	f107 0314 	add.w	r3, r7, #20
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	601a      	str	r2, [r3, #0]
 8012d7e:	605a      	str	r2, [r3, #4]
 8012d80:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012d82:	2301      	movs	r3, #1
 8012d84:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012d86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012d8a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	0a1b      	lsrs	r3, r3, #8
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	0c1b      	lsrs	r3, r3, #16
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	0e1b      	lsrs	r3, r3, #24
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012db2:	0a1b      	lsrs	r3, r3, #8
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dba:	0c1b      	lsrs	r3, r3, #16
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc2:	0e1b      	lsrs	r3, r3, #24
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012dc8:	e049      	b.n	8012e5e <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012dca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012dd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012dd6:	f107 0320 	add.w	r3, r7, #32
 8012dda:	7a7a      	ldrb	r2, [r7, #9]
 8012ddc:	f107 0010 	add.w	r0, r7, #16
 8012de0:	2110      	movs	r1, #16
 8012de2:	f7f9 f9fa 	bl	800c1da <SecureElementAesEncrypt>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d001      	beq.n	8012df0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012dec:	230f      	movs	r3, #15
 8012dee:	e03b      	b.n	8012e68 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012df0:	2300      	movs	r3, #0
 8012df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012df6:	e01f      	b.n	8012e38 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012df8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e00:	4413      	add	r3, r2
 8012e02:	461a      	mov	r2, r3
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	4413      	add	r3, r2
 8012e08:	7819      	ldrb	r1, [r3, #0]
 8012e0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012e12:	4413      	add	r3, r2
 8012e14:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012e18:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e20:	4403      	add	r3, r0
 8012e22:	4618      	mov	r0, r3
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	4403      	add	r3, r0
 8012e28:	404a      	eors	r2, r1
 8012e2a:	b2d2      	uxtb	r2, r2
 8012e2c:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e32:	3301      	adds	r3, #1
 8012e34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012e38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e3c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012e40:	2a10      	cmp	r2, #16
 8012e42:	bfa8      	it	ge
 8012e44:	2210      	movge	r2, #16
 8012e46:	b212      	sxth	r2, r2
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	dbd5      	blt.n	8012df8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012e4c:	897b      	ldrh	r3, [r7, #10]
 8012e4e:	3b10      	subs	r3, #16
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012e54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e58:	3310      	adds	r3, #16
 8012e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012e5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	dcb1      	bgt.n	8012dca <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e66:	2300      	movs	r3, #0
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3738      	adds	r7, #56	; 0x38
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012e70:	b490      	push	{r4, r7}
 8012e72:	b082      	sub	sp, #8
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	4604      	mov	r4, r0
 8012e78:	4608      	mov	r0, r1
 8012e7a:	4611      	mov	r1, r2
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	4623      	mov	r3, r4
 8012e80:	80fb      	strh	r3, [r7, #6]
 8012e82:	4603      	mov	r3, r0
 8012e84:	717b      	strb	r3, [r7, #5]
 8012e86:	460b      	mov	r3, r1
 8012e88:	713b      	strb	r3, [r7, #4]
 8012e8a:	4613      	mov	r3, r2
 8012e8c:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d101      	bne.n	8012e98 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e94:	230a      	movs	r3, #10
 8012e96:	e04e      	b.n	8012f36 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012e98:	69bb      	ldr	r3, [r7, #24]
 8012e9a:	2249      	movs	r2, #73	; 0x49
 8012e9c:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012ea6:	69bb      	ldr	r3, [r7, #24]
 8012ea8:	3302      	adds	r3, #2
 8012eaa:	2200      	movs	r2, #0
 8012eac:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	3303      	adds	r3, #3
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	3304      	adds	r3, #4
 8012eba:	2200      	movs	r2, #0
 8012ebc:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	3305      	adds	r3, #5
 8012ec2:	78fa      	ldrb	r2, [r7, #3]
 8012ec4:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	3306      	adds	r3, #6
 8012eca:	693a      	ldr	r2, [r7, #16]
 8012ecc:	b2d2      	uxtb	r2, r2
 8012ece:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	0a1a      	lsrs	r2, r3, #8
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	3307      	adds	r3, #7
 8012ed8:	b2d2      	uxtb	r2, r2
 8012eda:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	0c1a      	lsrs	r2, r3, #16
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	3308      	adds	r3, #8
 8012ee4:	b2d2      	uxtb	r2, r2
 8012ee6:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	0e1a      	lsrs	r2, r3, #24
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	3309      	adds	r3, #9
 8012ef0:	b2d2      	uxtb	r2, r2
 8012ef2:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	330a      	adds	r3, #10
 8012ef8:	697a      	ldr	r2, [r7, #20]
 8012efa:	b2d2      	uxtb	r2, r2
 8012efc:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	0a1a      	lsrs	r2, r3, #8
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	330b      	adds	r3, #11
 8012f06:	b2d2      	uxtb	r2, r2
 8012f08:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	0c1a      	lsrs	r2, r3, #16
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	330c      	adds	r3, #12
 8012f12:	b2d2      	uxtb	r2, r2
 8012f14:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	0e1a      	lsrs	r2, r3, #24
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	330d      	adds	r3, #13
 8012f1e:	b2d2      	uxtb	r2, r2
 8012f20:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	330e      	adds	r3, #14
 8012f26:	2200      	movs	r2, #0
 8012f28:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	330f      	adds	r3, #15
 8012f2e:	88fa      	ldrh	r2, [r7, #6]
 8012f30:	b2d2      	uxtb	r2, r2
 8012f32:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012f34:	2300      	movs	r3, #0
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bc90      	pop	{r4, r7}
 8012f3e:	4770      	bx	lr

08012f40 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012f40:	b590      	push	{r4, r7, lr}
 8012f42:	b08b      	sub	sp, #44	; 0x2c
 8012f44:	af04      	add	r7, sp, #16
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	4608      	mov	r0, r1
 8012f4a:	4611      	mov	r1, r2
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	4603      	mov	r3, r0
 8012f50:	807b      	strh	r3, [r7, #2]
 8012f52:	460b      	mov	r3, r1
 8012f54:	707b      	strb	r3, [r7, #1]
 8012f56:	4613      	mov	r3, r2
 8012f58:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <ComputeCmacB0+0x26>
 8012f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f66:	230a      	movs	r3, #10
 8012f68:	e024      	b.n	8012fb4 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012f6a:	887b      	ldrh	r3, [r7, #2]
 8012f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f70:	d901      	bls.n	8012f76 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012f72:	230e      	movs	r3, #14
 8012f74:	e01e      	b.n	8012fb4 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012f76:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012f7a:	783a      	ldrb	r2, [r7, #0]
 8012f7c:	7879      	ldrb	r1, [r7, #1]
 8012f7e:	8878      	ldrh	r0, [r7, #2]
 8012f80:	f107 0308 	add.w	r3, r7, #8
 8012f84:	9302      	str	r3, [sp, #8]
 8012f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f88:	9301      	str	r3, [sp, #4]
 8012f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8c:	9300      	str	r3, [sp, #0]
 8012f8e:	4623      	mov	r3, r4
 8012f90:	f7ff ff6e 	bl	8012e70 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012f94:	7879      	ldrb	r1, [r7, #1]
 8012f96:	887a      	ldrh	r2, [r7, #2]
 8012f98:	f107 0008 	add.w	r0, r7, #8
 8012f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	460b      	mov	r3, r1
 8012fa2:	6879      	ldr	r1, [r7, #4]
 8012fa4:	f7f9 f8cc 	bl	800c140 <SecureElementComputeAesCmac>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d001      	beq.n	8012fb2 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012fae:	230f      	movs	r3, #15
 8012fb0:	e000      	b.n	8012fb4 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012fb2:	2300      	movs	r3, #0
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	371c      	adds	r7, #28
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd90      	pop	{r4, r7, pc}

08012fbc <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012fbc:	b590      	push	{r4, r7, lr}
 8012fbe:	b0cd      	sub	sp, #308	; 0x134
 8012fc0:	af04      	add	r7, sp, #16
 8012fc2:	1d3c      	adds	r4, r7, #4
 8012fc4:	6020      	str	r0, [r4, #0]
 8012fc6:	460c      	mov	r4, r1
 8012fc8:	4610      	mov	r0, r2
 8012fca:	4619      	mov	r1, r3
 8012fcc:	1cbb      	adds	r3, r7, #2
 8012fce:	4622      	mov	r2, r4
 8012fd0:	801a      	strh	r2, [r3, #0]
 8012fd2:	1c7b      	adds	r3, r7, #1
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	701a      	strb	r2, [r3, #0]
 8012fd8:	463b      	mov	r3, r7
 8012fda:	460a      	mov	r2, r1
 8012fdc:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012fde:	1d3b      	adds	r3, r7, #4
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d101      	bne.n	8012fea <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012fe6:	230a      	movs	r3, #10
 8012fe8:	e04b      	b.n	8013082 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012fea:	1cbb      	adds	r3, r7, #2
 8012fec:	881b      	ldrh	r3, [r3, #0]
 8012fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ff2:	d901      	bls.n	8012ff8 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012ff4:	230e      	movs	r3, #14
 8012ff6:	e044      	b.n	8013082 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012ff8:	f107 030c 	add.w	r3, r7, #12
 8012ffc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013000:	2100      	movs	r1, #0
 8013002:	4618      	mov	r0, r3
 8013004:	f003 fbae 	bl	8016764 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013008:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801300c:	463b      	mov	r3, r7
 801300e:	781a      	ldrb	r2, [r3, #0]
 8013010:	1c7b      	adds	r3, r7, #1
 8013012:	7819      	ldrb	r1, [r3, #0]
 8013014:	1cbb      	adds	r3, r7, #2
 8013016:	8818      	ldrh	r0, [r3, #0]
 8013018:	f107 030c 	add.w	r3, r7, #12
 801301c:	9302      	str	r3, [sp, #8]
 801301e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013022:	9301      	str	r3, [sp, #4]
 8013024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013028:	9300      	str	r3, [sp, #0]
 801302a:	4623      	mov	r3, r4
 801302c:	f7ff ff20 	bl	8012e70 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013030:	f107 030c 	add.w	r3, r7, #12
 8013034:	3310      	adds	r3, #16
 8013036:	1cba      	adds	r2, r7, #2
 8013038:	8812      	ldrh	r2, [r2, #0]
 801303a:	1d39      	adds	r1, r7, #4
 801303c:	6809      	ldr	r1, [r1, #0]
 801303e:	4618      	mov	r0, r3
 8013040:	f003 fb55 	bl	80166ee <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013044:	2306      	movs	r3, #6
 8013046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801304a:	1cbb      	adds	r3, r7, #2
 801304c:	881b      	ldrh	r3, [r3, #0]
 801304e:	3310      	adds	r3, #16
 8013050:	b299      	uxth	r1, r3
 8013052:	1c7b      	adds	r3, r7, #1
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	f107 000c 	add.w	r0, r7, #12
 801305a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801305e:	f7f9 f88d 	bl	800c17c <SecureElementVerifyAesCmac>
 8013062:	4603      	mov	r3, r0
 8013064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013070:	2300      	movs	r3, #0
 8013072:	e006      	b.n	8013082 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013074:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013078:	2b01      	cmp	r3, #1
 801307a:	d101      	bne.n	8013080 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801307c:	2301      	movs	r3, #1
 801307e:	e000      	b.n	8013082 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013080:	230f      	movs	r3, #15
}
 8013082:	4618      	mov	r0, r3
 8013084:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8013088:	46bd      	mov	sp, r7
 801308a:	bd90      	pop	{r4, r7, pc}

0801308c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	4603      	mov	r3, r0
 8013094:	6039      	str	r1, [r7, #0]
 8013096:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013098:	2300      	movs	r3, #0
 801309a:	73fb      	strb	r3, [r7, #15]
 801309c:	e011      	b.n	80130c2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801309e:	7bfb      	ldrb	r3, [r7, #15]
 80130a0:	4a0c      	ldr	r2, [pc, #48]	; (80130d4 <GetKeyAddrItem+0x48>)
 80130a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80130a6:	79fa      	ldrb	r2, [r7, #7]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d107      	bne.n	80130bc <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80130ac:	7bfb      	ldrb	r3, [r7, #15]
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	4a08      	ldr	r2, [pc, #32]	; (80130d4 <GetKeyAddrItem+0x48>)
 80130b2:	441a      	add	r2, r3
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80130b8:	2300      	movs	r3, #0
 80130ba:	e006      	b.n	80130ca <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80130bc:	7bfb      	ldrb	r3, [r7, #15]
 80130be:	3301      	adds	r3, #1
 80130c0:	73fb      	strb	r3, [r7, #15]
 80130c2:	7bfb      	ldrb	r3, [r7, #15]
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d9ea      	bls.n	801309e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80130c8:	230c      	movs	r3, #12
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bc80      	pop	{r7}
 80130d2:	4770      	bx	lr
 80130d4:	20000114 	.word	0x20000114

080130d8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b088      	sub	sp, #32
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60b9      	str	r1, [r7, #8]
 80130e0:	607a      	str	r2, [r7, #4]
 80130e2:	461a      	mov	r2, r3
 80130e4:	4603      	mov	r3, r0
 80130e6:	73fb      	strb	r3, [r7, #15]
 80130e8:	4613      	mov	r3, r2
 80130ea:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80130ec:	2300      	movs	r3, #0
 80130ee:	613b      	str	r3, [r7, #16]
 80130f0:	f107 0314 	add.w	r3, r7, #20
 80130f4:	2200      	movs	r2, #0
 80130f6:	601a      	str	r2, [r3, #0]
 80130f8:	605a      	str	r2, [r3, #4]
 80130fa:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80130fc:	7bfb      	ldrb	r3, [r7, #15]
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d002      	beq.n	8013108 <DeriveSessionKey10x+0x30>
 8013102:	2b03      	cmp	r3, #3
 8013104:	d003      	beq.n	801310e <DeriveSessionKey10x+0x36>
 8013106:	e005      	b.n	8013114 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013108:	2301      	movs	r3, #1
 801310a:	743b      	strb	r3, [r7, #16]
            break;
 801310c:	e004      	b.n	8013118 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801310e:	2302      	movs	r3, #2
 8013110:	743b      	strb	r3, [r7, #16]
            break;
 8013112:	e001      	b.n	8013118 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013114:	230b      	movs	r3, #11
 8013116:	e02a      	b.n	801316e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	b2db      	uxtb	r3, r3
 801311c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801311e:	68bb      	ldr	r3, [r7, #8]
 8013120:	0a1b      	lsrs	r3, r3, #8
 8013122:	b2db      	uxtb	r3, r3
 8013124:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	0c1b      	lsrs	r3, r3, #16
 801312a:	b2db      	uxtb	r3, r3
 801312c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	b2db      	uxtb	r3, r3
 8013132:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	0a1b      	lsrs	r3, r3, #8
 8013138:	b2db      	uxtb	r3, r3
 801313a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	0c1b      	lsrs	r3, r3, #16
 8013140:	b2db      	uxtb	r3, r3
 8013142:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013144:	89bb      	ldrh	r3, [r7, #12]
 8013146:	b2db      	uxtb	r3, r3
 8013148:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801314a:	89bb      	ldrh	r3, [r7, #12]
 801314c:	0a1b      	lsrs	r3, r3, #8
 801314e:	b29b      	uxth	r3, r3
 8013150:	b2db      	uxtb	r3, r3
 8013152:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013154:	7bfa      	ldrb	r2, [r7, #15]
 8013156:	f107 0310 	add.w	r3, r7, #16
 801315a:	2101      	movs	r1, #1
 801315c:	4618      	mov	r0, r3
 801315e:	f7f9 f89a 	bl	800c296 <SecureElementDeriveAndStoreKey>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d001      	beq.n	801316c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013168:	230f      	movs	r3, #15
 801316a:	e000      	b.n	801316e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3720      	adds	r7, #32
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
	...

08013178 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013178:	b480      	push	{r7}
 801317a:	b083      	sub	sp, #12
 801317c:	af00      	add	r7, sp, #0
 801317e:	4603      	mov	r3, r0
 8013180:	6039      	str	r1, [r7, #0]
 8013182:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d101      	bne.n	801318e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801318a:	230a      	movs	r3, #10
 801318c:	e03b      	b.n	8013206 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801318e:	79fb      	ldrb	r3, [r7, #7]
 8013190:	3b01      	subs	r3, #1
 8013192:	2b03      	cmp	r3, #3
 8013194:	d834      	bhi.n	8013200 <GetLastFcntDown+0x88>
 8013196:	a201      	add	r2, pc, #4	; (adr r2, 801319c <GetLastFcntDown+0x24>)
 8013198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801319c:	080131ad 	.word	0x080131ad
 80131a0:	080131c5 	.word	0x080131c5
 80131a4:	080131dd 	.word	0x080131dd
 80131a8:	080131f5 	.word	0x080131f5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80131ac:	4b18      	ldr	r3, [pc, #96]	; (8013210 <GetLastFcntDown+0x98>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	691a      	ldr	r2, [r3, #16]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80131b6:	4b16      	ldr	r3, [pc, #88]	; (8013210 <GetLastFcntDown+0x98>)
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	4b15      	ldr	r3, [pc, #84]	; (8013210 <GetLastFcntDown+0x98>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	6912      	ldr	r2, [r2, #16]
 80131c0:	621a      	str	r2, [r3, #32]
            break;
 80131c2:	e01f      	b.n	8013204 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80131c4:	4b12      	ldr	r3, [pc, #72]	; (8013210 <GetLastFcntDown+0x98>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	695a      	ldr	r2, [r3, #20]
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80131ce:	4b10      	ldr	r3, [pc, #64]	; (8013210 <GetLastFcntDown+0x98>)
 80131d0:	681a      	ldr	r2, [r3, #0]
 80131d2:	4b0f      	ldr	r3, [pc, #60]	; (8013210 <GetLastFcntDown+0x98>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	6952      	ldr	r2, [r2, #20]
 80131d8:	621a      	str	r2, [r3, #32]
            break;
 80131da:	e013      	b.n	8013204 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80131dc:	4b0c      	ldr	r3, [pc, #48]	; (8013210 <GetLastFcntDown+0x98>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	699a      	ldr	r2, [r3, #24]
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80131e6:	4b0a      	ldr	r3, [pc, #40]	; (8013210 <GetLastFcntDown+0x98>)
 80131e8:	681a      	ldr	r2, [r3, #0]
 80131ea:	4b09      	ldr	r3, [pc, #36]	; (8013210 <GetLastFcntDown+0x98>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	6992      	ldr	r2, [r2, #24]
 80131f0:	621a      	str	r2, [r3, #32]
            break;
 80131f2:	e007      	b.n	8013204 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80131f4:	4b06      	ldr	r3, [pc, #24]	; (8013210 <GetLastFcntDown+0x98>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	69da      	ldr	r2, [r3, #28]
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	601a      	str	r2, [r3, #0]
            break;
 80131fe:	e001      	b.n	8013204 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013200:	2305      	movs	r3, #5
 8013202:	e000      	b.n	8013206 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	370c      	adds	r7, #12
 801320a:	46bd      	mov	sp, r7
 801320c:	bc80      	pop	{r7}
 801320e:	4770      	bx	lr
 8013210:	20000ec4 	.word	0x20000ec4

08013214 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	4603      	mov	r3, r0
 801321c:	6039      	str	r1, [r7, #0]
 801321e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013220:	2300      	movs	r3, #0
 8013222:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013224:	f107 020c 	add.w	r2, r7, #12
 8013228:	79fb      	ldrb	r3, [r7, #7]
 801322a:	4611      	mov	r1, r2
 801322c:	4618      	mov	r0, r3
 801322e:	f7ff ffa3 	bl	8013178 <GetLastFcntDown>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d001      	beq.n	801323c <CheckFCntDown+0x28>
    {
        return false;
 8013238:	2300      	movs	r3, #0
 801323a:	e00a      	b.n	8013252 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	429a      	cmp	r2, r3
 8013242:	d803      	bhi.n	801324c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8013244:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324a:	d101      	bne.n	8013250 <CheckFCntDown+0x3c>
    {
        return true;
 801324c:	2301      	movs	r3, #1
 801324e:	e000      	b.n	8013252 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013250:	2300      	movs	r3, #0
    }
}
 8013252:	4618      	mov	r0, r3
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
	...

0801325c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	4603      	mov	r3, r0
 8013264:	6039      	str	r1, [r7, #0]
 8013266:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013268:	79fb      	ldrb	r3, [r7, #7]
 801326a:	3b01      	subs	r3, #1
 801326c:	2b03      	cmp	r3, #3
 801326e:	d81f      	bhi.n	80132b0 <UpdateFCntDown+0x54>
 8013270:	a201      	add	r2, pc, #4	; (adr r2, 8013278 <UpdateFCntDown+0x1c>)
 8013272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013276:	bf00      	nop
 8013278:	08013289 	.word	0x08013289
 801327c:	08013293 	.word	0x08013293
 8013280:	0801329d 	.word	0x0801329d
 8013284:	080132a7 	.word	0x080132a7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013288:	4b0c      	ldr	r3, [pc, #48]	; (80132bc <UpdateFCntDown+0x60>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	611a      	str	r2, [r3, #16]
            break;
 8013290:	e00f      	b.n	80132b2 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013292:	4b0a      	ldr	r3, [pc, #40]	; (80132bc <UpdateFCntDown+0x60>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	683a      	ldr	r2, [r7, #0]
 8013298:	615a      	str	r2, [r3, #20]
            break;
 801329a:	e00a      	b.n	80132b2 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801329c:	4b07      	ldr	r3, [pc, #28]	; (80132bc <UpdateFCntDown+0x60>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	619a      	str	r2, [r3, #24]
            break;
 80132a4:	e005      	b.n	80132b2 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80132a6:	4b05      	ldr	r3, [pc, #20]	; (80132bc <UpdateFCntDown+0x60>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	683a      	ldr	r2, [r7, #0]
 80132ac:	61da      	str	r2, [r3, #28]
            break;
 80132ae:	e000      	b.n	80132b2 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80132b0:	bf00      	nop
    }
}
 80132b2:	bf00      	nop
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bc80      	pop	{r7}
 80132ba:	4770      	bx	lr
 80132bc:	20000ec4 	.word	0x20000ec4

080132c0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80132c6:	4b18      	ldr	r3, [pc, #96]	; (8013328 <ResetFCnts+0x68>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	2200      	movs	r2, #0
 80132cc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132ce:	4b16      	ldr	r3, [pc, #88]	; (8013328 <ResetFCnts+0x68>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f04f 32ff 	mov.w	r2, #4294967295
 80132d6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80132d8:	4b13      	ldr	r3, [pc, #76]	; (8013328 <ResetFCnts+0x68>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	f04f 32ff 	mov.w	r2, #4294967295
 80132e0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80132e2:	4b11      	ldr	r3, [pc, #68]	; (8013328 <ResetFCnts+0x68>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ea:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80132ec:	4b0e      	ldr	r3, [pc, #56]	; (8013328 <ResetFCnts+0x68>)
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	4b0d      	ldr	r3, [pc, #52]	; (8013328 <ResetFCnts+0x68>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	6992      	ldr	r2, [r2, #24]
 80132f6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80132f8:	2300      	movs	r3, #0
 80132fa:	607b      	str	r3, [r7, #4]
 80132fc:	e00b      	b.n	8013316 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80132fe:	4b0a      	ldr	r3, [pc, #40]	; (8013328 <ResetFCnts+0x68>)
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	3306      	adds	r3, #6
 8013306:	009b      	lsls	r3, r3, #2
 8013308:	4413      	add	r3, r2
 801330a:	f04f 32ff 	mov.w	r2, #4294967295
 801330e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	3301      	adds	r3, #1
 8013314:	607b      	str	r3, [r7, #4]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2b00      	cmp	r3, #0
 801331a:	ddf0      	ble.n	80132fe <ResetFCnts+0x3e>
    }
}
 801331c:	bf00      	nop
 801331e:	bf00      	nop
 8013320:	370c      	adds	r7, #12
 8013322:	46bd      	mov	sp, r7
 8013324:	bc80      	pop	{r7}
 8013326:	4770      	bx	lr
 8013328:	20000ec4 	.word	0x20000ec4

0801332c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d101      	bne.n	801333e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801333a:	2309      	movs	r3, #9
 801333c:	e01c      	b.n	8013378 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801333e:	4a10      	ldr	r2, [pc, #64]	; (8013380 <LoRaMacCryptoInit+0x54>)
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013344:	4b0e      	ldr	r3, [pc, #56]	; (8013380 <LoRaMacCryptoInit+0x54>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	2228      	movs	r2, #40	; 0x28
 801334a:	2100      	movs	r1, #0
 801334c:	4618      	mov	r0, r3
 801334e:	f003 fa09 	bl	8016764 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013352:	4b0b      	ldr	r3, [pc, #44]	; (8013380 <LoRaMacCryptoInit+0x54>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2201      	movs	r2, #1
 8013358:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801335a:	4b09      	ldr	r3, [pc, #36]	; (8013380 <LoRaMacCryptoInit+0x54>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2201      	movs	r2, #1
 8013360:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013362:	4b07      	ldr	r3, [pc, #28]	; (8013380 <LoRaMacCryptoInit+0x54>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	2201      	movs	r2, #1
 8013368:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801336a:	4b05      	ldr	r3, [pc, #20]	; (8013380 <LoRaMacCryptoInit+0x54>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	2200      	movs	r2, #0
 8013370:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013372:	f7ff ffa5 	bl	80132c0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013376:	2300      	movs	r3, #0
}
 8013378:	4618      	mov	r0, r3
 801337a:	3708      	adds	r7, #8
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}
 8013380:	20000ec4 	.word	0x20000ec4

08013384 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013384:	b480      	push	{r7}
 8013386:	b083      	sub	sp, #12
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801338c:	4b04      	ldr	r3, [pc, #16]	; (80133a0 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013394:	2300      	movs	r3, #0
}
 8013396:	4618      	mov	r0, r3
 8013398:	370c      	adds	r7, #12
 801339a:	46bd      	mov	sp, r7
 801339c:	bc80      	pop	{r7}
 801339e:	4770      	bx	lr
 80133a0:	20000ec4 	.word	0x20000ec4

080133a4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133b2:	230a      	movs	r3, #10
 80133b4:	e006      	b.n	80133c4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80133b6:	4b06      	ldr	r3, [pc, #24]	; (80133d0 <LoRaMacCryptoGetFCntUp+0x2c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	1c5a      	adds	r2, r3, #1
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80133c2:	2300      	movs	r3, #0
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	370c      	adds	r7, #12
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bc80      	pop	{r7}
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	20000ec4 	.word	0x20000ec4

080133d4 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80133d4:	b5b0      	push	{r4, r5, r7, lr}
 80133d6:	b088      	sub	sp, #32
 80133d8:	af00      	add	r7, sp, #0
 80133da:	60ba      	str	r2, [r7, #8]
 80133dc:	607b      	str	r3, [r7, #4]
 80133de:	4603      	mov	r3, r0
 80133e0:	73fb      	strb	r3, [r7, #15]
 80133e2:	460b      	mov	r3, r1
 80133e4:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80133ea:	2300      	movs	r3, #0
 80133ec:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133ee:	2313      	movs	r3, #19
 80133f0:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133f8:	230a      	movs	r3, #10
 80133fa:	e04f      	b.n	801349c <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80133fc:	f107 0214 	add.w	r2, r7, #20
 8013400:	7bfb      	ldrb	r3, [r7, #15]
 8013402:	4611      	mov	r1, r2
 8013404:	4618      	mov	r0, r3
 8013406:	f7ff feb7 	bl	8013178 <GetLastFcntDown>
 801340a:	4603      	mov	r3, r0
 801340c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801340e:	7efb      	ldrb	r3, [r7, #27]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d001      	beq.n	8013418 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8013414:	7efb      	ldrb	r3, [r7, #27]
 8013416:	e041      	b.n	801349c <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341e:	d103      	bne.n	8013428 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	68ba      	ldr	r2, [r7, #8]
 8013424:	601a      	str	r2, [r3, #0]
 8013426:	e01e      	b.n	8013466 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	b29b      	uxth	r3, r3
 801342c:	68ba      	ldr	r2, [r7, #8]
 801342e:	1ad3      	subs	r3, r2, r3
 8013430:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	2b00      	cmp	r3, #0
 8013436:	dd05      	ble.n	8013444 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013438:	697a      	ldr	r2, [r7, #20]
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	441a      	add	r2, r3
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	601a      	str	r2, [r3, #0]
 8013442:	e010      	b.n	8013466 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8013444:	69fb      	ldr	r3, [r7, #28]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d104      	bne.n	8013454 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801344a:	697a      	ldr	r2, [r7, #20]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013450:	2307      	movs	r3, #7
 8013452:	e023      	b.n	801349c <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	0c1b      	lsrs	r3, r3, #16
 8013458:	041b      	lsls	r3, r3, #16
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	4413      	add	r3, r2
 801345e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013466:	4b0f      	ldr	r3, [pc, #60]	; (80134a4 <LoRaMacCryptoGetFCntDown+0xd0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	789b      	ldrb	r3, [r3, #2]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d114      	bne.n	801349a <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	4618      	mov	r0, r3
 8013476:	f04f 0100 	mov.w	r1, #0
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	461a      	mov	r2, r3
 801347e:	f04f 0300 	mov.w	r3, #0
 8013482:	1a84      	subs	r4, r0, r2
 8013484:	eb61 0503 	sbc.w	r5, r1, r3
 8013488:	89ba      	ldrh	r2, [r7, #12]
 801348a:	f04f 0300 	mov.w	r3, #0
 801348e:	4294      	cmp	r4, r2
 8013490:	eb75 0303 	sbcs.w	r3, r5, r3
 8013494:	db01      	blt.n	801349a <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013496:	2308      	movs	r3, #8
 8013498:	e000      	b.n	801349c <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801349a:	2300      	movs	r3, #0
}
 801349c:	4618      	mov	r0, r3
 801349e:	3720      	adds	r7, #32
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bdb0      	pop	{r4, r5, r7, pc}
 80134a4:	20000ec4 	.word	0x20000ec4

080134a8 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134b6:	230a      	movs	r3, #10
 80134b8:	e017      	b.n	80134ea <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134ba:	2300      	movs	r3, #0
 80134bc:	60fb      	str	r3, [r7, #12]
 80134be:	e010      	b.n	80134e2 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80134c0:	4b0c      	ldr	r3, [pc, #48]	; (80134f4 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80134c2:	6819      	ldr	r1, [r3, #0]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	222c      	movs	r2, #44	; 0x2c
 80134c8:	fb02 f303 	mul.w	r3, r2, r3
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	4413      	add	r3, r2
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	3206      	adds	r2, #6
 80134d4:	0092      	lsls	r2, r2, #2
 80134d6:	440a      	add	r2, r1
 80134d8:	3204      	adds	r2, #4
 80134da:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	3301      	adds	r3, #1
 80134e0:	60fb      	str	r3, [r7, #12]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	ddeb      	ble.n	80134c0 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3714      	adds	r7, #20
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bc80      	pop	{r7}
 80134f2:	4770      	bx	lr
 80134f4:	20000ec4 	.word	0x20000ec4

080134f8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	6039      	str	r1, [r7, #0]
 8013502:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013504:	79fb      	ldrb	r3, [r7, #7]
 8013506:	6839      	ldr	r1, [r7, #0]
 8013508:	4618      	mov	r0, r3
 801350a:	f7f8 fdbb 	bl	800c084 <SecureElementSetKey>
 801350e:	4603      	mov	r3, r0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d001      	beq.n	8013518 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013514:	230f      	movs	r3, #15
 8013516:	e018      	b.n	801354a <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013518:	79fb      	ldrb	r3, [r7, #7]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d114      	bne.n	8013548 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801351e:	4b0d      	ldr	r3, [pc, #52]	; (8013554 <LoRaMacCryptoSetKey+0x5c>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	789b      	ldrb	r3, [r3, #2]
 8013524:	79fa      	ldrb	r2, [r7, #7]
 8013526:	4611      	mov	r1, r2
 8013528:	4618      	mov	r0, r3
 801352a:	f000 fa3f 	bl	80139ac <LoRaMacCryptoDeriveMcRootKey>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d001      	beq.n	8013538 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013534:	230f      	movs	r3, #15
 8013536:	e008      	b.n	801354a <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013538:	2004      	movs	r0, #4
 801353a:	f000 fa62 	bl	8013a02 <LoRaMacCryptoDeriveMcKEKey>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d001      	beq.n	8013548 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013544:	230f      	movs	r3, #15
 8013546:	e000      	b.n	801354a <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013548:	2300      	movs	r3, #0
}
 801354a:	4618      	mov	r0, r3
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	20000ec4 	.word	0x20000ec4

08013558 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af02      	add	r7, sp, #8
 801355e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d101      	bne.n	801356a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013566:	230a      	movs	r3, #10
 8013568:	e033      	b.n	80135d2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801356a:	2301      	movs	r3, #1
 801356c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801356e:	2300      	movs	r3, #0
 8013570:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013572:	f107 0308 	add.w	r3, r7, #8
 8013576:	4618      	mov	r0, r3
 8013578:	f7f8 ff4a 	bl	800c410 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 801357c:	68ba      	ldr	r2, [r7, #8]
 801357e:	4b17      	ldr	r3, [pc, #92]	; (80135dc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	b292      	uxth	r2, r2
 8013584:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013586:	4b15      	ldr	r3, [pc, #84]	; (80135dc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	889a      	ldrh	r2, [r3, #4]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f000 fc18 	bl	8013dc6 <LoRaMacSerializerJoinRequest>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d001      	beq.n	80135a0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801359c:	2311      	movs	r3, #17
 801359e:	e018      	b.n	80135d2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6819      	ldr	r1, [r3, #0]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	3318      	adds	r3, #24
 80135a8:	7bfa      	ldrb	r2, [r7, #15]
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	4613      	mov	r3, r2
 80135ae:	2213      	movs	r2, #19
 80135b0:	2000      	movs	r0, #0
 80135b2:	f7f8 fdc5 	bl	800c140 <SecureElementComputeAesCmac>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d001      	beq.n	80135c0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135bc:	230f      	movs	r3, #15
 80135be:	e008      	b.n	80135d2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f000 fc00 	bl	8013dc6 <LoRaMacSerializerJoinRequest>
 80135c6:	4603      	mov	r3, r0
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d001      	beq.n	80135d0 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135cc:	2311      	movs	r3, #17
 80135ce:	e000      	b.n	80135d2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	20000ec4 	.word	0x20000ec4

080135e0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80135e0:	b590      	push	{r4, r7, lr}
 80135e2:	b097      	sub	sp, #92	; 0x5c
 80135e4:	af04      	add	r7, sp, #16
 80135e6:	4603      	mov	r3, r0
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
 80135ec:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <LoRaMacCryptoHandleJoinAccept+0x1a>
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d101      	bne.n	80135fe <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80135fa:	230a      	movs	r3, #10
 80135fc:	e0bd      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80135fe:	2313      	movs	r3, #19
 8013600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013604:	2300      	movs	r3, #0
 8013606:	61bb      	str	r3, [r7, #24]
 8013608:	f107 031c 	add.w	r3, r7, #28
 801360c:	221d      	movs	r2, #29
 801360e:	2100      	movs	r1, #0
 8013610:	4618      	mov	r0, r3
 8013612:	f007 fd4b 	bl	801b0ac <memset>
    uint8_t versionMinor         = 0;
 8013616:	2300      	movs	r3, #0
 8013618:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801361a:	4b5a      	ldr	r3, [pc, #360]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	889b      	ldrh	r3, [r3, #4]
 8013620:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681c      	ldr	r4, [r3, #0]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	791b      	ldrb	r3, [r3, #4]
 801362c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013630:	7bf8      	ldrb	r0, [r7, #15]
 8013632:	f107 0217 	add.w	r2, r7, #23
 8013636:	9202      	str	r2, [sp, #8]
 8013638:	f107 0218 	add.w	r2, r7, #24
 801363c:	9201      	str	r2, [sp, #4]
 801363e:	9300      	str	r3, [sp, #0]
 8013640:	4623      	mov	r3, r4
 8013642:	460a      	mov	r2, r1
 8013644:	68b9      	ldr	r1, [r7, #8]
 8013646:	f7f8 fe66 	bl	800c316 <SecureElementProcessJoinAccept>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d001      	beq.n	8013654 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013650:	230f      	movs	r3, #15
 8013652:	e092      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6818      	ldr	r0, [r3, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	791b      	ldrb	r3, [r3, #4]
 801365c:	b29a      	uxth	r2, r3
 801365e:	f107 0318 	add.w	r3, r7, #24
 8013662:	4619      	mov	r1, r3
 8013664:	f003 f843 	bl	80166ee <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f000 f9ed 	bl	8013a48 <LoRaMacParserJoinAccept>
 801366e:	4603      	mov	r3, r0
 8013670:	2b00      	cmp	r3, #0
 8013672:	d001      	beq.n	8013678 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013674:	2310      	movs	r3, #16
 8013676:	e080      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	799b      	ldrb	r3, [r3, #6]
 801367c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	79db      	ldrb	r3, [r3, #7]
 8013682:	021b      	lsls	r3, r3, #8
 8013684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013686:	4313      	orrs	r3, r2
 8013688:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	7a1b      	ldrb	r3, [r3, #8]
 801368e:	041b      	lsls	r3, r3, #16
 8013690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013692:	4313      	orrs	r3, r2
 8013694:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013696:	4b3b      	ldr	r3, [pc, #236]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801369e:	429a      	cmp	r2, r3
 80136a0:	d010      	beq.n	80136c4 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80136a2:	4b38      	ldr	r3, [pc, #224]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136a8:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80136aa:	7dfb      	ldrb	r3, [r7, #23]
 80136ac:	2100      	movs	r1, #0
 80136ae:	4618      	mov	r0, r3
 80136b0:	f000 f97c 	bl	80139ac <LoRaMacCryptoDeriveMcRootKey>
 80136b4:	4603      	mov	r3, r0
 80136b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d005      	beq.n	80136ce <LoRaMacCryptoHandleJoinAccept+0xee>
 80136c2:	e001      	b.n	80136c8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80136c4:	2303      	movs	r3, #3
 80136c6:	e058      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80136c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136cc:	e055      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80136ce:	2004      	movs	r0, #4
 80136d0:	f000 f997 	bl	8013a02 <LoRaMacCryptoDeriveMcKEKey>
 80136d4:	4603      	mov	r3, r0
 80136d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d002      	beq.n	80136e8 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 80136e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136e6:	e048      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	7a5b      	ldrb	r3, [r3, #9]
 80136ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	7a9b      	ldrb	r3, [r3, #10]
 80136f2:	021b      	lsls	r3, r3, #8
 80136f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136f6:	4313      	orrs	r3, r2
 80136f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	7adb      	ldrb	r3, [r3, #11]
 80136fe:	041b      	lsls	r3, r3, #16
 8013700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013702:	4313      	orrs	r3, r2
 8013704:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013706:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801370a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801370c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801370e:	2003      	movs	r0, #3
 8013710:	f7ff fce2 	bl	80130d8 <DeriveSessionKey10x>
 8013714:	4603      	mov	r3, r0
 8013716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801371a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801371e:	2b00      	cmp	r3, #0
 8013720:	d002      	beq.n	8013728 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013722:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013726:	e028      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801372c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801372e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013730:	2002      	movs	r0, #2
 8013732:	f7ff fcd1 	bl	80130d8 <DeriveSessionKey10x>
 8013736:	4603      	mov	r3, r0
 8013738:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801373c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013740:	2b00      	cmp	r3, #0
 8013742:	d002      	beq.n	801374a <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013748:	e017      	b.n	801377a <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801374a:	4b0e      	ldr	r3, [pc, #56]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	7dfa      	ldrb	r2, [r7, #23]
 8013750:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013752:	4b0c      	ldr	r3, [pc, #48]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	2200      	movs	r2, #0
 8013758:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801375a:	4b0a      	ldr	r3, [pc, #40]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f04f 32ff 	mov.w	r2, #4294967295
 8013762:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013764:	4b07      	ldr	r3, [pc, #28]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f04f 32ff 	mov.w	r2, #4294967295
 801376c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801376e:	4b05      	ldr	r3, [pc, #20]	; (8013784 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f04f 32ff 	mov.w	r2, #4294967295
 8013776:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013778:	2300      	movs	r3, #0
}
 801377a:	4618      	mov	r0, r3
 801377c:	374c      	adds	r7, #76	; 0x4c
 801377e:	46bd      	mov	sp, r7
 8013780:	bd90      	pop	{r4, r7, pc}
 8013782:	bf00      	nop
 8013784:	20000ec4 	.word	0x20000ec4

08013788 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013788:	b590      	push	{r4, r7, lr}
 801378a:	b08b      	sub	sp, #44	; 0x2c
 801378c:	af04      	add	r7, sp, #16
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	607b      	str	r3, [r7, #4]
 8013792:	460b      	mov	r3, r1
 8013794:	72fb      	strb	r3, [r7, #11]
 8013796:	4613      	mov	r3, r2
 8013798:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801379a:	2313      	movs	r3, #19
 801379c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801379e:	2303      	movs	r3, #3
 80137a0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d101      	bne.n	80137ac <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137a8:	230a      	movs	r3, #10
 80137aa:	e05f      	b.n	801386c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80137ac:	4b31      	ldr	r3, [pc, #196]	; (8013874 <LoRaMacCryptoSecureMessage+0xec>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	68fa      	ldr	r2, [r7, #12]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d201      	bcs.n	80137bc <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80137b8:	2306      	movs	r3, #6
 80137ba:	e057      	b.n	801386c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80137c6:	2302      	movs	r3, #2
 80137c8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80137ca:	4b2a      	ldr	r3, [pc, #168]	; (8013874 <LoRaMacCryptoSecureMessage+0xec>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	68fa      	ldr	r2, [r7, #12]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d916      	bls.n	8013804 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137e0:	b219      	sxth	r1, r3
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	689c      	ldr	r4, [r3, #8]
 80137e6:	7dfa      	ldrb	r2, [r7, #23]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	9301      	str	r3, [sp, #4]
 80137ec:	2300      	movs	r3, #0
 80137ee:	9300      	str	r3, [sp, #0]
 80137f0:	4623      	mov	r3, r4
 80137f2:	f7ff faa3 	bl	8012d3c <PayloadEncrypt>
 80137f6:	4603      	mov	r3, r0
 80137f8:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80137fa:	7dbb      	ldrb	r3, [r7, #22]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d001      	beq.n	8013804 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013800:	7dbb      	ldrb	r3, [r7, #22]
 8013802:	e033      	b.n	801386c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f000 fb60 	bl	8013eca <LoRaMacSerializerData>
 801380a:	4603      	mov	r3, r0
 801380c:	2b00      	cmp	r3, #0
 801380e:	d001      	beq.n	8013814 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013810:	2311      	movs	r3, #17
 8013812:	e02b      	b.n	801386c <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013814:	2302      	movs	r3, #2
 8013816:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6818      	ldr	r0, [r3, #0]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	791b      	ldrb	r3, [r3, #4]
 8013820:	b29b      	uxth	r3, r3
 8013822:	3b04      	subs	r3, #4
 8013824:	b299      	uxth	r1, r3
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	322c      	adds	r2, #44	; 0x2c
 801382e:	7dfc      	ldrb	r4, [r7, #23]
 8013830:	9203      	str	r2, [sp, #12]
 8013832:	68fa      	ldr	r2, [r7, #12]
 8013834:	9202      	str	r2, [sp, #8]
 8013836:	9301      	str	r3, [sp, #4]
 8013838:	2300      	movs	r3, #0
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	2300      	movs	r3, #0
 801383e:	4622      	mov	r2, r4
 8013840:	f7ff fb7e 	bl	8012f40 <ComputeCmacB0>
 8013844:	4603      	mov	r3, r0
 8013846:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013848:	7dbb      	ldrb	r3, [r7, #22]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d001      	beq.n	8013852 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801384e:	7dbb      	ldrb	r3, [r7, #22]
 8013850:	e00c      	b.n	801386c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 fb39 	bl	8013eca <LoRaMacSerializerData>
 8013858:	4603      	mov	r3, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	d001      	beq.n	8013862 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801385e:	2311      	movs	r3, #17
 8013860:	e004      	b.n	801386c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013862:	4b04      	ldr	r3, [pc, #16]	; (8013874 <LoRaMacCryptoSecureMessage+0xec>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	68fa      	ldr	r2, [r7, #12]
 8013868:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	371c      	adds	r7, #28
 8013870:	46bd      	mov	sp, r7
 8013872:	bd90      	pop	{r4, r7, pc}
 8013874:	20000ec4 	.word	0x20000ec4

08013878 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013878:	b590      	push	{r4, r7, lr}
 801387a:	b08b      	sub	sp, #44	; 0x2c
 801387c:	af04      	add	r7, sp, #16
 801387e:	60b9      	str	r1, [r7, #8]
 8013880:	607b      	str	r3, [r7, #4]
 8013882:	4603      	mov	r3, r0
 8013884:	73fb      	strb	r3, [r7, #15]
 8013886:	4613      	mov	r3, r2
 8013888:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388c:	2b00      	cmp	r3, #0
 801388e:	d101      	bne.n	8013894 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013890:	230a      	movs	r3, #10
 8013892:	e084      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013894:	7bbb      	ldrb	r3, [r7, #14]
 8013896:	6879      	ldr	r1, [r7, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	f7ff fcbb 	bl	8013214 <CheckFCntDown>
 801389e:	4603      	mov	r3, r0
 80138a0:	f083 0301 	eor.w	r3, r3, #1
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d001      	beq.n	80138ae <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80138aa:	2306      	movs	r3, #6
 80138ac:	e077      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80138ae:	2313      	movs	r3, #19
 80138b0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80138b2:	2303      	movs	r3, #3
 80138b4:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80138b6:	2302      	movs	r3, #2
 80138b8:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80138ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138bc:	f000 f98f 	bl	8013bde <LoRaMacParserData>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d001      	beq.n	80138ca <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80138c6:	2310      	movs	r3, #16
 80138c8:	e069      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80138ca:	f107 0210 	add.w	r2, r7, #16
 80138ce:	7bfb      	ldrb	r3, [r7, #15]
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7ff fbda 	bl	801308c <GetKeyAddrItem>
 80138d8:	4603      	mov	r3, r0
 80138da:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138dc:	7d7b      	ldrb	r3, [r7, #21]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d001      	beq.n	80138e6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80138e2:	7d7b      	ldrb	r3, [r7, #21]
 80138e4:	e05b      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	785b      	ldrb	r3, [r3, #1]
 80138ea:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	789b      	ldrb	r3, [r3, #2]
 80138f0:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80138f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f4:	689b      	ldr	r3, [r3, #8]
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d001      	beq.n	8013900 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80138fc:	2302      	movs	r3, #2
 80138fe:	e04e      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013902:	7b1b      	ldrb	r3, [r3, #12]
 8013904:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013908:	b2db      	uxtb	r3, r3
 801390a:	2b00      	cmp	r3, #0
 801390c:	bf14      	ite	ne
 801390e:	2301      	movne	r3, #1
 8013910:	2300      	moveq	r3, #0
 8013912:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013914:	4b24      	ldr	r3, [pc, #144]	; (80139a8 <LoRaMacCryptoUnsecureMessage+0x130>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	789b      	ldrb	r3, [r3, #2]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d101      	bne.n	8013922 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801391e:	2300      	movs	r3, #0
 8013920:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013924:	6818      	ldr	r0, [r3, #0]
 8013926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013928:	791b      	ldrb	r3, [r3, #4]
 801392a:	b29b      	uxth	r3, r3
 801392c:	3b04      	subs	r3, #4
 801392e:	b299      	uxth	r1, r3
 8013930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013934:	7dbc      	ldrb	r4, [r7, #22]
 8013936:	7d3a      	ldrb	r2, [r7, #20]
 8013938:	9303      	str	r3, [sp, #12]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	9302      	str	r3, [sp, #8]
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	9301      	str	r3, [sp, #4]
 8013942:	2301      	movs	r3, #1
 8013944:	9300      	str	r3, [sp, #0]
 8013946:	4623      	mov	r3, r4
 8013948:	f7ff fb38 	bl	8012fbc <VerifyCmacB0>
 801394c:	4603      	mov	r3, r0
 801394e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013950:	7d7b      	ldrb	r3, [r7, #21]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d001      	beq.n	801395a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013956:	7d7b      	ldrb	r3, [r7, #21]
 8013958:	e021      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d101      	bne.n	8013968 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013964:	2302      	movs	r3, #2
 8013966:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013972:	b219      	sxth	r1, r3
 8013974:	7dfa      	ldrb	r2, [r7, #23]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	2301      	movs	r3, #1
 801397c:	9300      	str	r3, [sp, #0]
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	f7ff f9dc 	bl	8012d3c <PayloadEncrypt>
 8013984:	4603      	mov	r3, r0
 8013986:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013988:	7d7b      	ldrb	r3, [r7, #21]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d001      	beq.n	8013992 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801398e:	7d7b      	ldrb	r3, [r7, #21]
 8013990:	e005      	b.n	801399e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013992:	7bbb      	ldrb	r3, [r7, #14]
 8013994:	6879      	ldr	r1, [r7, #4]
 8013996:	4618      	mov	r0, r3
 8013998:	f7ff fc60 	bl	801325c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	371c      	adds	r7, #28
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd90      	pop	{r4, r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20000ec4 	.word	0x20000ec4

080139ac <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b086      	sub	sp, #24
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	4603      	mov	r3, r0
 80139b4:	460a      	mov	r2, r1
 80139b6:	71fb      	strb	r3, [r7, #7]
 80139b8:	4613      	mov	r3, r2
 80139ba:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80139bc:	79bb      	ldrb	r3, [r7, #6]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d001      	beq.n	80139c6 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80139c2:	230b      	movs	r3, #11
 80139c4:	e019      	b.n	80139fa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80139c6:	2300      	movs	r3, #0
 80139c8:	60bb      	str	r3, [r7, #8]
 80139ca:	f107 030c 	add.w	r3, r7, #12
 80139ce:	2200      	movs	r2, #0
 80139d0:	601a      	str	r2, [r3, #0]
 80139d2:	605a      	str	r2, [r3, #4]
 80139d4:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80139d6:	79fb      	ldrb	r3, [r7, #7]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d101      	bne.n	80139e0 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 80139dc:	2320      	movs	r3, #32
 80139de:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80139e0:	79b9      	ldrb	r1, [r7, #6]
 80139e2:	f107 0308 	add.w	r3, r7, #8
 80139e6:	2204      	movs	r2, #4
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7f8 fc54 	bl	800c296 <SecureElementDeriveAndStoreKey>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d001      	beq.n	80139f8 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139f4:	230f      	movs	r3, #15
 80139f6:	e000      	b.n	80139fa <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139f8:	2300      	movs	r3, #0
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3718      	adds	r7, #24
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}

08013a02 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013a02:	b580      	push	{r7, lr}
 8013a04:	b086      	sub	sp, #24
 8013a06:	af00      	add	r7, sp, #0
 8013a08:	4603      	mov	r3, r0
 8013a0a:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	2b04      	cmp	r3, #4
 8013a10:	d001      	beq.n	8013a16 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013a12:	230b      	movs	r3, #11
 8013a14:	e014      	b.n	8013a40 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013a16:	2300      	movs	r3, #0
 8013a18:	60bb      	str	r3, [r7, #8]
 8013a1a:	f107 030c 	add.w	r3, r7, #12
 8013a1e:	2200      	movs	r2, #0
 8013a20:	601a      	str	r2, [r3, #0]
 8013a22:	605a      	str	r2, [r3, #4]
 8013a24:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013a26:	79f9      	ldrb	r1, [r7, #7]
 8013a28:	f107 0308 	add.w	r3, r7, #8
 8013a2c:	227f      	movs	r2, #127	; 0x7f
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f8 fc31 	bl	800c296 <SecureElementDeriveAndStoreKey>
 8013a34:	4603      	mov	r3, r0
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d001      	beq.n	8013a3e <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a3a:	230f      	movs	r3, #15
 8013a3c:	e000      	b.n	8013a40 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a3e:	2300      	movs	r3, #0
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3718      	adds	r7, #24
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d003      	beq.n	8013a5e <LoRaMacParserJoinAccept+0x16>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d101      	bne.n	8013a62 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013a5e:	2302      	movs	r3, #2
 8013a60:	e0b9      	b.n	8013bd6 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013a62:	2300      	movs	r3, #0
 8013a64:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	89fb      	ldrh	r3, [r7, #14]
 8013a6c:	1c59      	adds	r1, r3, #1
 8013a6e:	81f9      	strh	r1, [r7, #14]
 8013a70:	4413      	add	r3, r2
 8013a72:	781a      	ldrb	r2, [r3, #0]
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	1d98      	adds	r0, r3, #6
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	89fb      	ldrh	r3, [r7, #14]
 8013a82:	4413      	add	r3, r2
 8013a84:	2203      	movs	r2, #3
 8013a86:	4619      	mov	r1, r3
 8013a88:	f002 fe31 	bl	80166ee <memcpy1>
    bufItr = bufItr + 3;
 8013a8c:	89fb      	ldrh	r3, [r7, #14]
 8013a8e:	3303      	adds	r3, #3
 8013a90:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f103 0009 	add.w	r0, r3, #9
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	2203      	movs	r2, #3
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	f002 fe23 	bl	80166ee <memcpy1>
    bufItr = bufItr + 3;
 8013aa8:	89fb      	ldrh	r3, [r7, #14]
 8013aaa:	3303      	adds	r3, #3
 8013aac:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	89fb      	ldrh	r3, [r7, #14]
 8013ab4:	1c59      	adds	r1, r3, #1
 8013ab6:	81f9      	strh	r1, [r7, #14]
 8013ab8:	4413      	add	r3, r2
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	461a      	mov	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681a      	ldr	r2, [r3, #0]
 8013ac6:	89fb      	ldrh	r3, [r7, #14]
 8013ac8:	1c59      	adds	r1, r3, #1
 8013aca:	81f9      	strh	r1, [r7, #14]
 8013acc:	4413      	add	r3, r2
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	021a      	lsls	r2, r3, #8
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	431a      	orrs	r2, r3
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	89fb      	ldrh	r3, [r7, #14]
 8013ae2:	1c59      	adds	r1, r3, #1
 8013ae4:	81f9      	strh	r1, [r7, #14]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	041a      	lsls	r2, r3, #16
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	431a      	orrs	r2, r3
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	89fb      	ldrh	r3, [r7, #14]
 8013afc:	1c59      	adds	r1, r3, #1
 8013afe:	81f9      	strh	r1, [r7, #14]
 8013b00:	4413      	add	r3, r2
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	061a      	lsls	r2, r3, #24
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	431a      	orrs	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	681a      	ldr	r2, [r3, #0]
 8013b14:	89fb      	ldrh	r3, [r7, #14]
 8013b16:	1c59      	adds	r1, r3, #1
 8013b18:	81f9      	strh	r1, [r7, #14]
 8013b1a:	4413      	add	r3, r2
 8013b1c:	781a      	ldrb	r2, [r3, #0]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681a      	ldr	r2, [r3, #0]
 8013b26:	89fb      	ldrh	r3, [r7, #14]
 8013b28:	1c59      	adds	r1, r3, #1
 8013b2a:	81f9      	strh	r1, [r7, #14]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	781a      	ldrb	r2, [r3, #0]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	791b      	ldrb	r3, [r3, #4]
 8013b38:	1f1a      	subs	r2, r3, #4
 8013b3a:	89fb      	ldrh	r3, [r7, #14]
 8013b3c:	1ad3      	subs	r3, r2, r3
 8013b3e:	2b10      	cmp	r3, #16
 8013b40:	d10e      	bne.n	8013b60 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f103 0012 	add.w	r0, r3, #18
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	89fb      	ldrh	r3, [r7, #14]
 8013b4e:	4413      	add	r3, r2
 8013b50:	2210      	movs	r2, #16
 8013b52:	4619      	mov	r1, r3
 8013b54:	f002 fdcb 	bl	80166ee <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013b58:	89fb      	ldrh	r3, [r7, #14]
 8013b5a:	3310      	adds	r3, #16
 8013b5c:	81fb      	strh	r3, [r7, #14]
 8013b5e:	e008      	b.n	8013b72 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	791b      	ldrb	r3, [r3, #4]
 8013b64:	1f1a      	subs	r2, r3, #4
 8013b66:	89fb      	ldrh	r3, [r7, #14]
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	dd01      	ble.n	8013b72 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e031      	b.n	8013bd6 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681a      	ldr	r2, [r3, #0]
 8013b76:	89fb      	ldrh	r3, [r7, #14]
 8013b78:	1c59      	adds	r1, r3, #1
 8013b7a:	81f9      	strh	r1, [r7, #14]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	461a      	mov	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	89fb      	ldrh	r3, [r7, #14]
 8013b8c:	1c59      	adds	r1, r3, #1
 8013b8e:	81f9      	strh	r1, [r7, #14]
 8013b90:	4413      	add	r3, r2
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	021a      	lsls	r2, r3, #8
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b9a:	431a      	orrs	r2, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	89fb      	ldrh	r3, [r7, #14]
 8013ba6:	1c59      	adds	r1, r3, #1
 8013ba8:	81f9      	strh	r1, [r7, #14]
 8013baa:	4413      	add	r3, r2
 8013bac:	781b      	ldrb	r3, [r3, #0]
 8013bae:	041a      	lsls	r2, r3, #16
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb4:	431a      	orrs	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	89fb      	ldrh	r3, [r7, #14]
 8013bc0:	1c59      	adds	r1, r3, #1
 8013bc2:	81f9      	strh	r1, [r7, #14]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	061a      	lsls	r2, r3, #24
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bce:	431a      	orrs	r2, r3
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013bd4:	2300      	movs	r3, #0
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b084      	sub	sp, #16
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d003      	beq.n	8013bf4 <LoRaMacParserData+0x16>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d101      	bne.n	8013bf8 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013bf4:	2302      	movs	r3, #2
 8013bf6:	e0e2      	b.n	8013dbe <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	89fb      	ldrh	r3, [r7, #14]
 8013c02:	1c59      	adds	r1, r3, #1
 8013c04:	81f9      	strh	r1, [r7, #14]
 8013c06:	4413      	add	r3, r2
 8013c08:	781a      	ldrb	r2, [r3, #0]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	89fb      	ldrh	r3, [r7, #14]
 8013c14:	1c59      	adds	r1, r3, #1
 8013c16:	81f9      	strh	r1, [r7, #14]
 8013c18:	4413      	add	r3, r2
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	89fb      	ldrh	r3, [r7, #14]
 8013c28:	1c59      	adds	r1, r3, #1
 8013c2a:	81f9      	strh	r1, [r7, #14]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	021a      	lsls	r2, r3, #8
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	689b      	ldr	r3, [r3, #8]
 8013c36:	431a      	orrs	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	89fb      	ldrh	r3, [r7, #14]
 8013c42:	1c59      	adds	r1, r3, #1
 8013c44:	81f9      	strh	r1, [r7, #14]
 8013c46:	4413      	add	r3, r2
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	041a      	lsls	r2, r3, #16
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	689b      	ldr	r3, [r3, #8]
 8013c50:	431a      	orrs	r2, r3
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
 8013c5c:	1c59      	adds	r1, r3, #1
 8013c5e:	81f9      	strh	r1, [r7, #14]
 8013c60:	4413      	add	r3, r2
 8013c62:	781b      	ldrb	r3, [r3, #0]
 8013c64:	061a      	lsls	r2, r3, #24
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	431a      	orrs	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	89fb      	ldrh	r3, [r7, #14]
 8013c76:	1c59      	adds	r1, r3, #1
 8013c78:	81f9      	strh	r1, [r7, #14]
 8013c7a:	4413      	add	r3, r2
 8013c7c:	781a      	ldrb	r2, [r3, #0]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	89fb      	ldrh	r3, [r7, #14]
 8013c88:	1c59      	adds	r1, r3, #1
 8013c8a:	81f9      	strh	r1, [r7, #14]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	781b      	ldrb	r3, [r3, #0]
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	89fb      	ldrh	r3, [r7, #14]
 8013c9c:	1c59      	adds	r1, r3, #1
 8013c9e:	81f9      	strh	r1, [r7, #14]
 8013ca0:	4413      	add	r3, r2
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	0219      	lsls	r1, r3, #8
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	89db      	ldrh	r3, [r3, #14]
 8013caa:	b21a      	sxth	r2, r3
 8013cac:	b20b      	sxth	r3, r1
 8013cae:	4313      	orrs	r3, r2
 8013cb0:	b21b      	sxth	r3, r3
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f103 0010 	add.w	r0, r3, #16
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681a      	ldr	r2, [r3, #0]
 8013cc2:	89fb      	ldrh	r3, [r7, #14]
 8013cc4:	18d1      	adds	r1, r2, r3
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	7b1b      	ldrb	r3, [r3, #12]
 8013cca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	461a      	mov	r2, r3
 8013cd4:	f002 fd0b 	bl	80166ee <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	7b1b      	ldrb	r3, [r3, #12]
 8013cdc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	89fb      	ldrh	r3, [r7, #14]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	791b      	ldrb	r3, [r3, #4]
 8013cfe:	461a      	mov	r2, r3
 8013d00:	89fb      	ldrh	r3, [r7, #14]
 8013d02:	1ad3      	subs	r3, r2, r3
 8013d04:	2b04      	cmp	r3, #4
 8013d06:	dd28      	ble.n	8013d5a <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	89fb      	ldrh	r3, [r7, #14]
 8013d0e:	1c59      	adds	r1, r3, #1
 8013d10:	81f9      	strh	r1, [r7, #14]
 8013d12:	4413      	add	r3, r2
 8013d14:	781a      	ldrb	r2, [r3, #0]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	791a      	ldrb	r2, [r3, #4]
 8013d20:	89fb      	ldrh	r3, [r7, #14]
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	1ad3      	subs	r3, r2, r3
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	3b04      	subs	r3, #4
 8013d2a:	b2da      	uxtb	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	89fb      	ldrh	r3, [r7, #14]
 8013d3c:	18d1      	adds	r1, r2, r3
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	461a      	mov	r2, r3
 8013d48:	f002 fcd1 	bl	80166ee <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d52:	b29a      	uxth	r2, r3
 8013d54:	89fb      	ldrh	r3, [r7, #14]
 8013d56:	4413      	add	r3, r2
 8013d58:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681a      	ldr	r2, [r3, #0]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	791b      	ldrb	r3, [r3, #4]
 8013d62:	3b04      	subs	r3, #4
 8013d64:	4413      	add	r3, r2
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	461a      	mov	r2, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6819      	ldr	r1, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	791b      	ldrb	r3, [r3, #4]
 8013d7a:	3b03      	subs	r3, #3
 8013d7c:	440b      	add	r3, r1
 8013d7e:	781b      	ldrb	r3, [r3, #0]
 8013d80:	021b      	lsls	r3, r3, #8
 8013d82:	431a      	orrs	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6819      	ldr	r1, [r3, #0]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	791b      	ldrb	r3, [r3, #4]
 8013d94:	3b02      	subs	r3, #2
 8013d96:	440b      	add	r3, r1
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	041b      	lsls	r3, r3, #16
 8013d9c:	431a      	orrs	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6819      	ldr	r1, [r3, #0]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	791b      	ldrb	r3, [r3, #4]
 8013dae:	3b01      	subs	r3, #1
 8013db0:	440b      	add	r3, r1
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	061b      	lsls	r3, r3, #24
 8013db6:	431a      	orrs	r2, r3
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3710      	adds	r7, #16
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b084      	sub	sp, #16
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d003      	beq.n	8013ddc <LoRaMacSerializerJoinRequest+0x16>
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d101      	bne.n	8013de0 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e070      	b.n	8013ec2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013de0:	2300      	movs	r3, #0
 8013de2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	791b      	ldrb	r3, [r3, #4]
 8013de8:	2b16      	cmp	r3, #22
 8013dea:	d801      	bhi.n	8013df0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013dec:	2302      	movs	r3, #2
 8013dee:	e068      	b.n	8013ec2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	89fb      	ldrh	r3, [r7, #14]
 8013df6:	1c59      	adds	r1, r3, #1
 8013df8:	81f9      	strh	r1, [r7, #14]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	7952      	ldrb	r2, [r2, #5]
 8013e00:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	89fb      	ldrh	r3, [r7, #14]
 8013e08:	18d0      	adds	r0, r2, r3
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	3306      	adds	r3, #6
 8013e0e:	2208      	movs	r2, #8
 8013e10:	4619      	mov	r1, r3
 8013e12:	f002 fc87 	bl	8016724 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013e16:	89fb      	ldrh	r3, [r7, #14]
 8013e18:	3308      	adds	r3, #8
 8013e1a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681a      	ldr	r2, [r3, #0]
 8013e20:	89fb      	ldrh	r3, [r7, #14]
 8013e22:	18d0      	adds	r0, r2, r3
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	330e      	adds	r3, #14
 8013e28:	2208      	movs	r2, #8
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	f002 fc7a 	bl	8016724 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013e30:	89fb      	ldrh	r3, [r7, #14]
 8013e32:	3308      	adds	r3, #8
 8013e34:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	8ad9      	ldrh	r1, [r3, #22]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	89fb      	ldrh	r3, [r7, #14]
 8013e40:	1c58      	adds	r0, r3, #1
 8013e42:	81f8      	strh	r0, [r7, #14]
 8013e44:	4413      	add	r3, r2
 8013e46:	b2ca      	uxtb	r2, r1
 8013e48:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	8adb      	ldrh	r3, [r3, #22]
 8013e4e:	0a1b      	lsrs	r3, r3, #8
 8013e50:	b299      	uxth	r1, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681a      	ldr	r2, [r3, #0]
 8013e56:	89fb      	ldrh	r3, [r7, #14]
 8013e58:	1c58      	adds	r0, r3, #1
 8013e5a:	81f8      	strh	r0, [r7, #14]
 8013e5c:	4413      	add	r3, r2
 8013e5e:	b2ca      	uxtb	r2, r1
 8013e60:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6999      	ldr	r1, [r3, #24]
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	89fb      	ldrh	r3, [r7, #14]
 8013e6c:	1c58      	adds	r0, r3, #1
 8013e6e:	81f8      	strh	r0, [r7, #14]
 8013e70:	4413      	add	r3, r2
 8013e72:	b2ca      	uxtb	r2, r1
 8013e74:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	0a19      	lsrs	r1, r3, #8
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	89fb      	ldrh	r3, [r7, #14]
 8013e82:	1c58      	adds	r0, r3, #1
 8013e84:	81f8      	strh	r0, [r7, #14]
 8013e86:	4413      	add	r3, r2
 8013e88:	b2ca      	uxtb	r2, r1
 8013e8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	699b      	ldr	r3, [r3, #24]
 8013e90:	0c19      	lsrs	r1, r3, #16
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681a      	ldr	r2, [r3, #0]
 8013e96:	89fb      	ldrh	r3, [r7, #14]
 8013e98:	1c58      	adds	r0, r3, #1
 8013e9a:	81f8      	strh	r0, [r7, #14]
 8013e9c:	4413      	add	r3, r2
 8013e9e:	b2ca      	uxtb	r2, r1
 8013ea0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	699b      	ldr	r3, [r3, #24]
 8013ea6:	0e19      	lsrs	r1, r3, #24
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	681a      	ldr	r2, [r3, #0]
 8013eac:	89fb      	ldrh	r3, [r7, #14]
 8013eae:	1c58      	adds	r0, r3, #1
 8013eb0:	81f8      	strh	r0, [r7, #14]
 8013eb2:	4413      	add	r3, r2
 8013eb4:	b2ca      	uxtb	r2, r1
 8013eb6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013eb8:	89fb      	ldrh	r3, [r7, #14]
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013ec0:	2300      	movs	r3, #0
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3710      	adds	r7, #16
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}

08013eca <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013eca:	b580      	push	{r7, lr}
 8013ecc:	b084      	sub	sp, #16
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d003      	beq.n	8013ee0 <LoRaMacSerializerData+0x16>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d101      	bne.n	8013ee4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	e0e5      	b.n	80140b0 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013ee8:	2308      	movs	r3, #8
 8013eea:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	7b1b      	ldrb	r3, [r3, #12]
 8013ef0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	89bb      	ldrh	r3, [r7, #12]
 8013efa:	4413      	add	r3, r2
 8013efc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013f08:	89bb      	ldrh	r3, [r7, #12]
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	89bb      	ldrh	r3, [r7, #12]
 8013f18:	4413      	add	r3, r2
 8013f1a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013f1c:	89bb      	ldrh	r3, [r7, #12]
 8013f1e:	3304      	adds	r3, #4
 8013f20:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	791b      	ldrb	r3, [r3, #4]
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	89ba      	ldrh	r2, [r7, #12]
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d901      	bls.n	8013f32 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013f2e:	2302      	movs	r3, #2
 8013f30:	e0be      	b.n	80140b0 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	89fb      	ldrh	r3, [r7, #14]
 8013f38:	1c59      	adds	r1, r3, #1
 8013f3a:	81f9      	strh	r1, [r7, #14]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	7952      	ldrb	r2, [r2, #5]
 8013f42:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6899      	ldr	r1, [r3, #8]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681a      	ldr	r2, [r3, #0]
 8013f4c:	89fb      	ldrh	r3, [r7, #14]
 8013f4e:	1c58      	adds	r0, r3, #1
 8013f50:	81f8      	strh	r0, [r7, #14]
 8013f52:	4413      	add	r3, r2
 8013f54:	b2ca      	uxtb	r2, r1
 8013f56:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	0a19      	lsrs	r1, r3, #8
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681a      	ldr	r2, [r3, #0]
 8013f62:	89fb      	ldrh	r3, [r7, #14]
 8013f64:	1c58      	adds	r0, r3, #1
 8013f66:	81f8      	strh	r0, [r7, #14]
 8013f68:	4413      	add	r3, r2
 8013f6a:	b2ca      	uxtb	r2, r1
 8013f6c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	689b      	ldr	r3, [r3, #8]
 8013f72:	0c19      	lsrs	r1, r3, #16
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	89fb      	ldrh	r3, [r7, #14]
 8013f7a:	1c58      	adds	r0, r3, #1
 8013f7c:	81f8      	strh	r0, [r7, #14]
 8013f7e:	4413      	add	r3, r2
 8013f80:	b2ca      	uxtb	r2, r1
 8013f82:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	0e19      	lsrs	r1, r3, #24
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	89fb      	ldrh	r3, [r7, #14]
 8013f90:	1c58      	adds	r0, r3, #1
 8013f92:	81f8      	strh	r0, [r7, #14]
 8013f94:	4413      	add	r3, r2
 8013f96:	b2ca      	uxtb	r2, r1
 8013f98:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	89fb      	ldrh	r3, [r7, #14]
 8013fa0:	1c59      	adds	r1, r3, #1
 8013fa2:	81f9      	strh	r1, [r7, #14]
 8013fa4:	4413      	add	r3, r2
 8013fa6:	687a      	ldr	r2, [r7, #4]
 8013fa8:	7b12      	ldrb	r2, [r2, #12]
 8013faa:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	89d9      	ldrh	r1, [r3, #14]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681a      	ldr	r2, [r3, #0]
 8013fb4:	89fb      	ldrh	r3, [r7, #14]
 8013fb6:	1c58      	adds	r0, r3, #1
 8013fb8:	81f8      	strh	r0, [r7, #14]
 8013fba:	4413      	add	r3, r2
 8013fbc:	b2ca      	uxtb	r2, r1
 8013fbe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	89db      	ldrh	r3, [r3, #14]
 8013fc4:	0a1b      	lsrs	r3, r3, #8
 8013fc6:	b299      	uxth	r1, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	89fb      	ldrh	r3, [r7, #14]
 8013fce:	1c58      	adds	r0, r3, #1
 8013fd0:	81f8      	strh	r0, [r7, #14]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	b2ca      	uxtb	r2, r1
 8013fd6:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681a      	ldr	r2, [r3, #0]
 8013fdc:	89fb      	ldrh	r3, [r7, #14]
 8013fde:	18d0      	adds	r0, r2, r3
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f103 0110 	add.w	r1, r3, #16
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	7b1b      	ldrb	r3, [r3, #12]
 8013fea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	f002 fb7b 	bl	80166ee <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	7b1b      	ldrb	r3, [r3, #12]
 8013ffc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014000:	b2db      	uxtb	r3, r3
 8014002:	b29a      	uxth	r2, r3
 8014004:	89fb      	ldrh	r3, [r7, #14]
 8014006:	4413      	add	r3, r2
 8014008:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014010:	2b00      	cmp	r3, #0
 8014012:	d009      	beq.n	8014028 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	89fb      	ldrh	r3, [r7, #14]
 801401a:	1c59      	adds	r1, r3, #1
 801401c:	81f9      	strh	r1, [r7, #14]
 801401e:	4413      	add	r3, r2
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014026:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	89fb      	ldrh	r3, [r7, #14]
 801402e:	18d0      	adds	r0, r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801403a:	b29b      	uxth	r3, r3
 801403c:	461a      	mov	r2, r3
 801403e:	f002 fb56 	bl	80166ee <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014048:	b29a      	uxth	r2, r3
 801404a:	89fb      	ldrh	r3, [r7, #14]
 801404c:	4413      	add	r3, r2
 801404e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	89fb      	ldrh	r3, [r7, #14]
 801405a:	1c58      	adds	r0, r3, #1
 801405c:	81f8      	strh	r0, [r7, #14]
 801405e:	4413      	add	r3, r2
 8014060:	b2ca      	uxtb	r2, r1
 8014062:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014068:	0a19      	lsrs	r1, r3, #8
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	89fb      	ldrh	r3, [r7, #14]
 8014070:	1c58      	adds	r0, r3, #1
 8014072:	81f8      	strh	r0, [r7, #14]
 8014074:	4413      	add	r3, r2
 8014076:	b2ca      	uxtb	r2, r1
 8014078:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407e:	0c19      	lsrs	r1, r3, #16
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	89fb      	ldrh	r3, [r7, #14]
 8014086:	1c58      	adds	r0, r3, #1
 8014088:	81f8      	strh	r0, [r7, #14]
 801408a:	4413      	add	r3, r2
 801408c:	b2ca      	uxtb	r2, r1
 801408e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014094:	0e19      	lsrs	r1, r3, #24
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681a      	ldr	r2, [r3, #0]
 801409a:	89fb      	ldrh	r3, [r7, #14]
 801409c:	1c58      	adds	r0, r3, #1
 801409e:	81f8      	strh	r0, [r7, #14]
 80140a0:	4413      	add	r3, r2
 80140a2:	b2ca      	uxtb	r2, r1
 80140a4:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80140a6:	89fb      	ldrh	r3, [r7, #14]
 80140a8:	b2da      	uxtb	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80140ae:	2300      	movs	r3, #0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3710      	adds	r7, #16
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80140b8:	b480      	push	{r7}
 80140ba:	b083      	sub	sp, #12
 80140bc:	af00      	add	r7, sp, #0
 80140be:	4603      	mov	r3, r0
 80140c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140c2:	79fb      	ldrb	r3, [r7, #7]
 80140c4:	2b05      	cmp	r3, #5
 80140c6:	d101      	bne.n	80140cc <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80140c8:	2301      	movs	r3, #1
 80140ca:	e000      	b.n	80140ce <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80140cc:	2300      	movs	r3, #0
        }
    }
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	370c      	adds	r7, #12
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bc80      	pop	{r7}
 80140d6:	4770      	bx	lr

080140d8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b084      	sub	sp, #16
 80140dc:	af00      	add	r7, sp, #0
 80140de:	4603      	mov	r3, r0
 80140e0:	6039      	str	r1, [r7, #0]
 80140e2:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80140e4:	2300      	movs	r3, #0
 80140e6:	60bb      	str	r3, [r7, #8]
    switch( region )
 80140e8:	79fb      	ldrb	r3, [r7, #7]
 80140ea:	2b05      	cmp	r3, #5
 80140ec:	d105      	bne.n	80140fa <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80140ee:	6838      	ldr	r0, [r7, #0]
 80140f0:	f001 f992 	bl	8015418 <RegionEU868GetPhyParam>
 80140f4:	4603      	mov	r3, r0
 80140f6:	60fb      	str	r3, [r7, #12]
 80140f8:	e001      	b.n	80140fe <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	60fb      	str	r3, [r7, #12]
 80140fe:	2300      	movs	r3, #0
 8014100:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8014102:	4618      	mov	r0, r3
 8014104:	3710      	adds	r7, #16
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801410a:	b580      	push	{r7, lr}
 801410c:	b082      	sub	sp, #8
 801410e:	af00      	add	r7, sp, #0
 8014110:	4603      	mov	r3, r0
 8014112:	6039      	str	r1, [r7, #0]
 8014114:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	2b05      	cmp	r3, #5
 801411a:	d103      	bne.n	8014124 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801411c:	6838      	ldr	r0, [r7, #0]
 801411e:	f001 fac5 	bl	80156ac <RegionEU868SetBandTxDone>
 8014122:	e000      	b.n	8014126 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014124:	bf00      	nop
        }
    }
}
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	4603      	mov	r3, r0
 8014134:	6039      	str	r1, [r7, #0]
 8014136:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014138:	79fb      	ldrb	r3, [r7, #7]
 801413a:	2b05      	cmp	r3, #5
 801413c:	d103      	bne.n	8014146 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801413e:	6838      	ldr	r0, [r7, #0]
 8014140:	f001 fae0 	bl	8015704 <RegionEU868InitDefaults>
 8014144:	e000      	b.n	8014148 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014146:	bf00      	nop
        }
    }
}
 8014148:	bf00      	nop
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	6039      	str	r1, [r7, #0]
 801415a:	71fb      	strb	r3, [r7, #7]
 801415c:	4613      	mov	r3, r2
 801415e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014160:	79fb      	ldrb	r3, [r7, #7]
 8014162:	2b05      	cmp	r3, #5
 8014164:	d106      	bne.n	8014174 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014166:	79bb      	ldrb	r3, [r7, #6]
 8014168:	4619      	mov	r1, r3
 801416a:	6838      	ldr	r0, [r7, #0]
 801416c:	f001 fb66 	bl	801583c <RegionEU868Verify>
 8014170:	4603      	mov	r3, r0
 8014172:	e000      	b.n	8014176 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014174:	2300      	movs	r3, #0
        }
    }
}
 8014176:	4618      	mov	r0, r3
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801417e:	b580      	push	{r7, lr}
 8014180:	b082      	sub	sp, #8
 8014182:	af00      	add	r7, sp, #0
 8014184:	4603      	mov	r3, r0
 8014186:	6039      	str	r1, [r7, #0]
 8014188:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801418a:	79fb      	ldrb	r3, [r7, #7]
 801418c:	2b05      	cmp	r3, #5
 801418e:	d103      	bne.n	8014198 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8014190:	6838      	ldr	r0, [r7, #0]
 8014192:	f001 fbcf 	bl	8015934 <RegionEU868ApplyCFList>
 8014196:	e000      	b.n	801419a <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014198:	bf00      	nop
        }
    }
}
 801419a:	bf00      	nop
 801419c:	3708      	adds	r7, #8
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}

080141a2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b082      	sub	sp, #8
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	4603      	mov	r3, r0
 80141aa:	6039      	str	r1, [r7, #0]
 80141ac:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80141ae:	79fb      	ldrb	r3, [r7, #7]
 80141b0:	2b05      	cmp	r3, #5
 80141b2:	d104      	bne.n	80141be <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80141b4:	6838      	ldr	r0, [r7, #0]
 80141b6:	f001 fc31 	bl	8015a1c <RegionEU868ChanMaskSet>
 80141ba:	4603      	mov	r3, r0
 80141bc:	e000      	b.n	80141c0 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80141be:	2300      	movs	r3, #0
        }
    }
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	603b      	str	r3, [r7, #0]
 80141d0:	4603      	mov	r3, r0
 80141d2:	71fb      	strb	r3, [r7, #7]
 80141d4:	460b      	mov	r3, r1
 80141d6:	71bb      	strb	r3, [r7, #6]
 80141d8:	4613      	mov	r3, r2
 80141da:	717b      	strb	r3, [r7, #5]
    switch( region )
 80141dc:	79fb      	ldrb	r3, [r7, #7]
 80141de:	2b05      	cmp	r3, #5
 80141e0:	d107      	bne.n	80141f2 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80141e2:	7979      	ldrb	r1, [r7, #5]
 80141e4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80141e8:	693b      	ldr	r3, [r7, #16]
 80141ea:	683a      	ldr	r2, [r7, #0]
 80141ec:	f001 fc40 	bl	8015a70 <RegionEU868ComputeRxWindowParameters>
 80141f0:	e000      	b.n	80141f4 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80141f2:	bf00      	nop
        }
    }
}
 80141f4:	bf00      	nop
 80141f6:	3708      	adds	r7, #8
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}

080141fc <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	4603      	mov	r3, r0
 8014204:	60b9      	str	r1, [r7, #8]
 8014206:	607a      	str	r2, [r7, #4]
 8014208:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801420a:	7bfb      	ldrb	r3, [r7, #15]
 801420c:	2b05      	cmp	r3, #5
 801420e:	d105      	bne.n	801421c <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8014210:	6879      	ldr	r1, [r7, #4]
 8014212:	68b8      	ldr	r0, [r7, #8]
 8014214:	f001 fc86 	bl	8015b24 <RegionEU868RxConfig>
 8014218:	4603      	mov	r3, r0
 801421a:	e000      	b.n	801421e <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801421c:	2300      	movs	r3, #0
        }
    }
}
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b084      	sub	sp, #16
 801422a:	af00      	add	r7, sp, #0
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
 8014230:	603b      	str	r3, [r7, #0]
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014236:	7bfb      	ldrb	r3, [r7, #15]
 8014238:	2b05      	cmp	r3, #5
 801423a:	d106      	bne.n	801424a <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801423c:	683a      	ldr	r2, [r7, #0]
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	68b8      	ldr	r0, [r7, #8]
 8014242:	f001 fd3f 	bl	8015cc4 <RegionEU868TxConfig>
 8014246:	4603      	mov	r3, r0
 8014248:	e000      	b.n	801424c <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801424a:	2300      	movs	r3, #0
        }
    }
}
 801424c:	4618      	mov	r0, r3
 801424e:	3710      	adds	r7, #16
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}

08014254 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b086      	sub	sp, #24
 8014258:	af02      	add	r7, sp, #8
 801425a:	60b9      	str	r1, [r7, #8]
 801425c:	607a      	str	r2, [r7, #4]
 801425e:	603b      	str	r3, [r7, #0]
 8014260:	4603      	mov	r3, r0
 8014262:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014264:	7bfb      	ldrb	r3, [r7, #15]
 8014266:	2b05      	cmp	r3, #5
 8014268:	d109      	bne.n	801427e <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801426a:	69fb      	ldr	r3, [r7, #28]
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	683a      	ldr	r2, [r7, #0]
 8014272:	6879      	ldr	r1, [r7, #4]
 8014274:	68b8      	ldr	r0, [r7, #8]
 8014276:	f001 fdf5 	bl	8015e64 <RegionEU868LinkAdrReq>
 801427a:	4603      	mov	r3, r0
 801427c:	e000      	b.n	8014280 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801427e:	2300      	movs	r3, #0
        }
    }
}
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	4603      	mov	r3, r0
 8014290:	6039      	str	r1, [r7, #0]
 8014292:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014294:	79fb      	ldrb	r3, [r7, #7]
 8014296:	2b05      	cmp	r3, #5
 8014298:	d104      	bne.n	80142a4 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801429a:	6838      	ldr	r0, [r7, #0]
 801429c:	f001 ff04 	bl	80160a8 <RegionEU868RxParamSetupReq>
 80142a0:	4603      	mov	r3, r0
 80142a2:	e000      	b.n	80142a6 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80142a4:	2300      	movs	r3, #0
        }
    }
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3708      	adds	r7, #8
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}

080142ae <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80142ae:	b580      	push	{r7, lr}
 80142b0:	b082      	sub	sp, #8
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	4603      	mov	r3, r0
 80142b6:	6039      	str	r1, [r7, #0]
 80142b8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142ba:	79fb      	ldrb	r3, [r7, #7]
 80142bc:	2b05      	cmp	r3, #5
 80142be:	d104      	bne.n	80142ca <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80142c0:	6838      	ldr	r0, [r7, #0]
 80142c2:	f001 ff2f 	bl	8016124 <RegionEU868NewChannelReq>
 80142c6:	4603      	mov	r3, r0
 80142c8:	e000      	b.n	80142cc <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80142ca:	2300      	movs	r3, #0
        }
    }
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	4603      	mov	r3, r0
 80142dc:	6039      	str	r1, [r7, #0]
 80142de:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142e0:	79fb      	ldrb	r3, [r7, #7]
 80142e2:	2b05      	cmp	r3, #5
 80142e4:	d104      	bne.n	80142f0 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80142e6:	6838      	ldr	r0, [r7, #0]
 80142e8:	f001 ff7a 	bl	80161e0 <RegionEU868TxParamSetupReq>
 80142ec:	4603      	mov	r3, r0
 80142ee:	e000      	b.n	80142f2 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80142f0:	2300      	movs	r3, #0
        }
    }
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}

080142fa <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b082      	sub	sp, #8
 80142fe:	af00      	add	r7, sp, #0
 8014300:	4603      	mov	r3, r0
 8014302:	6039      	str	r1, [r7, #0]
 8014304:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014306:	79fb      	ldrb	r3, [r7, #7]
 8014308:	2b05      	cmp	r3, #5
 801430a:	d104      	bne.n	8014316 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801430c:	6838      	ldr	r0, [r7, #0]
 801430e:	f001 ff73 	bl	80161f8 <RegionEU868DlChannelReq>
 8014312:	4603      	mov	r3, r0
 8014314:	e000      	b.n	8014318 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014316:	2300      	movs	r3, #0
        }
    }
}
 8014318:	4618      	mov	r0, r3
 801431a:	3708      	adds	r7, #8
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	4603      	mov	r3, r0
 8014328:	71fb      	strb	r3, [r7, #7]
 801432a:	460b      	mov	r3, r1
 801432c:	71bb      	strb	r3, [r7, #6]
 801432e:	4613      	mov	r3, r2
 8014330:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014332:	79fb      	ldrb	r3, [r7, #7]
 8014334:	2b05      	cmp	r3, #5
 8014336:	d108      	bne.n	801434a <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014338:	797a      	ldrb	r2, [r7, #5]
 801433a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801433e:	4611      	mov	r1, r2
 8014340:	4618      	mov	r0, r3
 8014342:	f001 ff9d 	bl	8016280 <RegionEU868AlternateDr>
 8014346:	4603      	mov	r3, r0
 8014348:	e000      	b.n	801434c <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801434a:	2300      	movs	r3, #0
        }
    }
}
 801434c:	4618      	mov	r0, r3
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}

08014354 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b084      	sub	sp, #16
 8014358:	af00      	add	r7, sp, #0
 801435a:	60b9      	str	r1, [r7, #8]
 801435c:	607a      	str	r2, [r7, #4]
 801435e:	603b      	str	r3, [r7, #0]
 8014360:	4603      	mov	r3, r0
 8014362:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014364:	7bfb      	ldrb	r3, [r7, #15]
 8014366:	2b05      	cmp	r3, #5
 8014368:	d107      	bne.n	801437a <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	683a      	ldr	r2, [r7, #0]
 801436e:	6879      	ldr	r1, [r7, #4]
 8014370:	68b8      	ldr	r0, [r7, #8]
 8014372:	f001 ff95 	bl	80162a0 <RegionEU868NextChannel>
 8014376:	4603      	mov	r3, r0
 8014378:	e000      	b.n	801437c <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801437a:	2309      	movs	r3, #9
        }
    }
}
 801437c:	4618      	mov	r0, r3
 801437e:	3710      	adds	r7, #16
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}

08014384 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	4603      	mov	r3, r0
 801438c:	6039      	str	r1, [r7, #0]
 801438e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014390:	79fb      	ldrb	r3, [r7, #7]
 8014392:	2b05      	cmp	r3, #5
 8014394:	d103      	bne.n	801439e <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8014396:	6838      	ldr	r0, [r7, #0]
 8014398:	f002 f8fa 	bl	8016590 <RegionEU868SetContinuousWave>
 801439c:	e000      	b.n	80143a0 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801439e:	bf00      	nop
        }
    }
}
 80143a0:	bf00      	nop
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80143a8:	b590      	push	{r4, r7, lr}
 80143aa:	b083      	sub	sp, #12
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	4604      	mov	r4, r0
 80143b0:	4608      	mov	r0, r1
 80143b2:	4611      	mov	r1, r2
 80143b4:	461a      	mov	r2, r3
 80143b6:	4623      	mov	r3, r4
 80143b8:	71fb      	strb	r3, [r7, #7]
 80143ba:	4603      	mov	r3, r0
 80143bc:	71bb      	strb	r3, [r7, #6]
 80143be:	460b      	mov	r3, r1
 80143c0:	717b      	strb	r3, [r7, #5]
 80143c2:	4613      	mov	r3, r2
 80143c4:	713b      	strb	r3, [r7, #4]
    switch( region )
 80143c6:	79fb      	ldrb	r3, [r7, #7]
 80143c8:	2b05      	cmp	r3, #5
 80143ca:	d109      	bne.n	80143e0 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80143cc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80143d0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80143d4:	79bb      	ldrb	r3, [r7, #6]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f002 f928 	bl	801662c <RegionEU868ApplyDrOffset>
 80143dc:	4603      	mov	r3, r0
 80143de:	e000      	b.n	80143e2 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80143e0:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	370c      	adds	r7, #12
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd90      	pop	{r4, r7, pc}
	...

080143ec <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80143f2:	4b04      	ldr	r3, [pc, #16]	; (8014404 <RegionGetVersion+0x18>)
 80143f4:	607b      	str	r3, [r7, #4]

    return version;
 80143f6:	687b      	ldr	r3, [r7, #4]
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	370c      	adds	r7, #12
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bc80      	pop	{r7}
 8014400:	4770      	bx	lr
 8014402:	bf00      	nop
 8014404:	01000300 	.word	0x01000300

08014408 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014408:	b480      	push	{r7}
 801440a:	b087      	sub	sp, #28
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	4608      	mov	r0, r1
 8014412:	4639      	mov	r1, r7
 8014414:	e881 000c 	stmia.w	r1, {r2, r3}
 8014418:	4603      	mov	r3, r0
 801441a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014422:	7afb      	ldrb	r3, [r7, #11]
 8014424:	f083 0301 	eor.w	r3, r3, #1
 8014428:	b2db      	uxtb	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d01b      	beq.n	8014466 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801442e:	f242 7310 	movw	r3, #10000	; 0x2710
 8014432:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801443a:	d202      	bcs.n	8014442 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 801443c:	2364      	movs	r3, #100	; 0x64
 801443e:	82bb      	strh	r3, [r7, #20]
 8014440:	e00b      	b.n	801445a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014448:	4293      	cmp	r3, r2
 801444a:	d803      	bhi.n	8014454 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801444c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014450:	82bb      	strh	r3, [r7, #20]
 8014452:	e002      	b.n	801445a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014454:	f242 7310 	movw	r3, #10000	; 0x2710
 8014458:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801445a:	8aba      	ldrh	r2, [r7, #20]
 801445c:	8afb      	ldrh	r3, [r7, #22]
 801445e:	4293      	cmp	r3, r2
 8014460:	bf38      	it	cc
 8014462:	4613      	movcc	r3, r2
 8014464:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014466:	8afb      	ldrh	r3, [r7, #22]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d101      	bne.n	8014470 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801446c:	2301      	movs	r3, #1
 801446e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014470:	8afb      	ldrh	r3, [r7, #22]
}
 8014472:	4618      	mov	r0, r3
 8014474:	371c      	adds	r7, #28
 8014476:	46bd      	mov	sp, r7
 8014478:	bc80      	pop	{r7}
 801447a:	4770      	bx	lr

0801447c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b08e      	sub	sp, #56	; 0x38
 8014480:	af02      	add	r7, sp, #8
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	4608      	mov	r0, r1
 8014486:	4639      	mov	r1, r7
 8014488:	e881 000c 	stmia.w	r1, {r2, r3}
 801448c:	4603      	mov	r3, r0
 801448e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	881b      	ldrh	r3, [r3, #0]
 8014494:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014496:	4b4b      	ldr	r3, [pc, #300]	; (80145c4 <SetMaxTimeCredits+0x148>)
 8014498:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801449a:	463b      	mov	r3, r7
 801449c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80144a0:	f005 fc60 	bl	8019d64 <SysTimeToMs>
 80144a4:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80144a6:	f107 0314 	add.w	r3, r7, #20
 80144aa:	2200      	movs	r2, #0
 80144ac:	601a      	str	r2, [r3, #0]
 80144ae:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80144b0:	7af9      	ldrb	r1, [r7, #11]
 80144b2:	463b      	mov	r3, r7
 80144b4:	cb0c      	ldmia	r3, {r2, r3}
 80144b6:	68f8      	ldr	r0, [r7, #12]
 80144b8:	f7ff ffa6 	bl	8014408 <GetDutyCycle>
 80144bc:	4603      	mov	r3, r0
 80144be:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80144c0:	7afb      	ldrb	r3, [r7, #11]
 80144c2:	f083 0301 	eor.w	r3, r3, #1
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d062      	beq.n	8014592 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80144cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144ce:	2b64      	cmp	r3, #100	; 0x64
 80144d0:	d105      	bne.n	80144de <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80144d2:	4b3c      	ldr	r3, [pc, #240]	; (80145c4 <SetMaxTimeCredits+0x148>)
 80144d4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144da:	609a      	str	r2, [r3, #8]
 80144dc:	e00b      	b.n	80144f6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80144de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80144e4:	d105      	bne.n	80144f2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80144e6:	4b38      	ldr	r3, [pc, #224]	; (80145c8 <SetMaxTimeCredits+0x14c>)
 80144e8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ee:	609a      	str	r2, [r3, #8]
 80144f0:	e001      	b.n	80144f6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80144f2:	4b36      	ldr	r3, [pc, #216]	; (80145cc <SetMaxTimeCredits+0x150>)
 80144f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	689a      	ldr	r2, [r3, #8]
 80144fa:	f107 031c 	add.w	r3, r7, #28
 80144fe:	4611      	mov	r1, r2
 8014500:	4618      	mov	r0, r3
 8014502:	f005 fc57 	bl	8019db4 <SysTimeFromMs>
 8014506:	f107 0014 	add.w	r0, r7, #20
 801450a:	6a3b      	ldr	r3, [r7, #32]
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	463a      	mov	r2, r7
 8014512:	ca06      	ldmia	r2, {r1, r2}
 8014514:	f005 fb67 	bl	8019be6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014518:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801451c:	f083 0301 	eor.w	r3, r3, #1
 8014520:	b2db      	uxtb	r3, r3
 8014522:	2b00      	cmp	r3, #0
 8014524:	d006      	beq.n	8014534 <SetMaxTimeCredits+0xb8>
 8014526:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801452a:	f083 0301 	eor.w	r3, r3, #1
 801452e:	b2db      	uxtb	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	d108      	bne.n	8014546 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801453a:	429a      	cmp	r2, r3
 801453c:	d103      	bne.n	8014546 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801453e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014540:	4a23      	ldr	r2, [pc, #140]	; (80145d0 <SetMaxTimeCredits+0x154>)
 8014542:	4293      	cmp	r3, r2
 8014544:	d92f      	bls.n	80145a6 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801454a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	4a21      	ldr	r2, [pc, #132]	; (80145d4 <SetMaxTimeCredits+0x158>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d928      	bls.n	80145a6 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801455a:	3b30      	subs	r3, #48	; 0x30
 801455c:	4a1e      	ldr	r2, [pc, #120]	; (80145d8 <SetMaxTimeCredits+0x15c>)
 801455e:	fba2 2303 	umull	r2, r3, r2, r3
 8014562:	0c1b      	lsrs	r3, r3, #16
 8014564:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	4a1c      	ldr	r2, [pc, #112]	; (80145dc <SetMaxTimeCredits+0x160>)
 801456a:	fb02 f303 	mul.w	r3, r2, r3
 801456e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014576:	3330      	adds	r3, #48	; 0x30
 8014578:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801457a:	2300      	movs	r3, #0
 801457c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801457e:	f107 0314 	add.w	r3, r7, #20
 8014582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014586:	f005 fbed 	bl	8019d64 <SysTimeToMs>
 801458a:	4602      	mov	r2, r0
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	609a      	str	r2, [r3, #8]
 8014590:	e009      	b.n	80145a6 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014592:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014596:	f083 0301 	eor.w	r3, r3, #1
 801459a:	b2db      	uxtb	r3, r3
 801459c:	2b00      	cmp	r3, #0
 801459e:	d002      	beq.n	80145a6 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145a4:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d102      	bne.n	80145b4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145b2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145b8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80145ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3730      	adds	r7, #48	; 0x30
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	001b7740 	.word	0x001b7740
 80145c8:	0112a880 	.word	0x0112a880
 80145cc:	02932e00 	.word	0x02932e00
 80145d0:	0001517f 	.word	0x0001517f
 80145d4:	0001ec2f 	.word	0x0001ec2f
 80145d8:	c22e4507 	.word	0xc22e4507
 80145dc:	00015180 	.word	0x00015180

080145e0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b086      	sub	sp, #24
 80145e4:	af02      	add	r7, sp, #8
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	4608      	mov	r0, r1
 80145ea:	4611      	mov	r1, r2
 80145ec:	461a      	mov	r2, r3
 80145ee:	4603      	mov	r3, r0
 80145f0:	70fb      	strb	r3, [r7, #3]
 80145f2:	460b      	mov	r3, r1
 80145f4:	70bb      	strb	r3, [r7, #2]
 80145f6:	4613      	mov	r3, r2
 80145f8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80145fa:	78f9      	ldrb	r1, [r7, #3]
 80145fc:	787b      	ldrb	r3, [r7, #1]
 80145fe:	9301      	str	r3, [sp, #4]
 8014600:	78bb      	ldrb	r3, [r7, #2]
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	f107 0318 	add.w	r3, r7, #24
 8014608:	cb0c      	ldmia	r3, {r2, r3}
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f7ff ff36 	bl	801447c <SetMaxTimeCredits>
 8014610:	4603      	mov	r3, r0
 8014612:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014614:	78fb      	ldrb	r3, [r7, #3]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d00a      	beq.n	8014630 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	4618      	mov	r0, r3
 8014620:	f006 f9c8 	bl	801a9b4 <UTIL_TIMER_GetElapsedTime>
 8014624:	4602      	mov	r2, r0
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	441a      	add	r2, r3
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	68da      	ldr	r2, [r3, #12]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	691b      	ldr	r3, [r3, #16]
 8014638:	429a      	cmp	r2, r3
 801463a:	d903      	bls.n	8014644 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	691a      	ldr	r2, [r3, #16]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	6a3a      	ldr	r2, [r7, #32]
 8014648:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801464a:	89fb      	ldrh	r3, [r7, #14]
}
 801464c:	4618      	mov	r0, r3
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014654:	b480      	push	{r7}
 8014656:	b085      	sub	sp, #20
 8014658:	af00      	add	r7, sp, #0
 801465a:	4603      	mov	r3, r0
 801465c:	460a      	mov	r2, r1
 801465e:	80fb      	strh	r3, [r7, #6]
 8014660:	4613      	mov	r3, r2
 8014662:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014664:	2300      	movs	r3, #0
 8014666:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014668:	2300      	movs	r3, #0
 801466a:	73bb      	strb	r3, [r7, #14]
 801466c:	e011      	b.n	8014692 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801466e:	88fa      	ldrh	r2, [r7, #6]
 8014670:	7bbb      	ldrb	r3, [r7, #14]
 8014672:	2101      	movs	r1, #1
 8014674:	fa01 f303 	lsl.w	r3, r1, r3
 8014678:	401a      	ands	r2, r3
 801467a:	7bbb      	ldrb	r3, [r7, #14]
 801467c:	2101      	movs	r1, #1
 801467e:	fa01 f303 	lsl.w	r3, r1, r3
 8014682:	429a      	cmp	r2, r3
 8014684:	d102      	bne.n	801468c <CountChannels+0x38>
        {
            nbActiveBits++;
 8014686:	7bfb      	ldrb	r3, [r7, #15]
 8014688:	3301      	adds	r3, #1
 801468a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801468c:	7bbb      	ldrb	r3, [r7, #14]
 801468e:	3301      	adds	r3, #1
 8014690:	73bb      	strb	r3, [r7, #14]
 8014692:	7bba      	ldrb	r2, [r7, #14]
 8014694:	797b      	ldrb	r3, [r7, #5]
 8014696:	429a      	cmp	r2, r3
 8014698:	d3e9      	bcc.n	801466e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801469a:	7bfb      	ldrb	r3, [r7, #15]
}
 801469c:	4618      	mov	r0, r3
 801469e:	3714      	adds	r7, #20
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bc80      	pop	{r7}
 80146a4:	4770      	bx	lr

080146a6 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80146a6:	b580      	push	{r7, lr}
 80146a8:	b084      	sub	sp, #16
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6039      	str	r1, [r7, #0]
 80146ae:	4611      	mov	r1, r2
 80146b0:	461a      	mov	r2, r3
 80146b2:	4603      	mov	r3, r0
 80146b4:	71fb      	strb	r3, [r7, #7]
 80146b6:	460b      	mov	r3, r1
 80146b8:	71bb      	strb	r3, [r7, #6]
 80146ba:	4613      	mov	r3, r2
 80146bc:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80146be:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80146c2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80146c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 f85d 	bl	801478a <RegionCommonValueInRange>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d101      	bne.n	80146da <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80146d6:	2300      	movs	r3, #0
 80146d8:	e053      	b.n	8014782 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80146da:	2300      	movs	r3, #0
 80146dc:	73fb      	strb	r3, [r7, #15]
 80146de:	2300      	movs	r3, #0
 80146e0:	73bb      	strb	r3, [r7, #14]
 80146e2:	e049      	b.n	8014778 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80146e4:	2300      	movs	r3, #0
 80146e6:	737b      	strb	r3, [r7, #13]
 80146e8:	e03d      	b.n	8014766 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80146ea:	7bbb      	ldrb	r3, [r7, #14]
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	683a      	ldr	r2, [r7, #0]
 80146f0:	4413      	add	r3, r2
 80146f2:	881b      	ldrh	r3, [r3, #0]
 80146f4:	461a      	mov	r2, r3
 80146f6:	7b7b      	ldrb	r3, [r7, #13]
 80146f8:	fa42 f303 	asr.w	r3, r2, r3
 80146fc:	f003 0301 	and.w	r3, r3, #1
 8014700:	2b00      	cmp	r3, #0
 8014702:	d02d      	beq.n	8014760 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014704:	7bfa      	ldrb	r2, [r7, #15]
 8014706:	7b7b      	ldrb	r3, [r7, #13]
 8014708:	4413      	add	r3, r2
 801470a:	461a      	mov	r2, r3
 801470c:	4613      	mov	r3, r2
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	4413      	add	r3, r2
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	461a      	mov	r2, r3
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	4413      	add	r3, r2
 801471a:	7a1b      	ldrb	r3, [r3, #8]
 801471c:	f343 0303 	sbfx	r3, r3, #0, #4
 8014720:	b25b      	sxtb	r3, r3
 8014722:	f003 030f 	and.w	r3, r3, #15
 8014726:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014728:	7bfa      	ldrb	r2, [r7, #15]
 801472a:	7b7b      	ldrb	r3, [r7, #13]
 801472c:	4413      	add	r3, r2
 801472e:	461a      	mov	r2, r3
 8014730:	4613      	mov	r3, r2
 8014732:	005b      	lsls	r3, r3, #1
 8014734:	4413      	add	r3, r2
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	461a      	mov	r2, r3
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	4413      	add	r3, r2
 801473e:	7a1b      	ldrb	r3, [r3, #8]
 8014740:	f343 1303 	sbfx	r3, r3, #4, #4
 8014744:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014746:	f003 030f 	and.w	r3, r3, #15
 801474a:	b25a      	sxtb	r2, r3
 801474c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014750:	4618      	mov	r0, r3
 8014752:	f000 f81a 	bl	801478a <RegionCommonValueInRange>
 8014756:	4603      	mov	r3, r0
 8014758:	2b01      	cmp	r3, #1
 801475a:	d101      	bne.n	8014760 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801475c:	2301      	movs	r3, #1
 801475e:	e010      	b.n	8014782 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014760:	7b7b      	ldrb	r3, [r7, #13]
 8014762:	3301      	adds	r3, #1
 8014764:	737b      	strb	r3, [r7, #13]
 8014766:	7b7b      	ldrb	r3, [r7, #13]
 8014768:	2b0f      	cmp	r3, #15
 801476a:	d9be      	bls.n	80146ea <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801476c:	7bfb      	ldrb	r3, [r7, #15]
 801476e:	3310      	adds	r3, #16
 8014770:	73fb      	strb	r3, [r7, #15]
 8014772:	7bbb      	ldrb	r3, [r7, #14]
 8014774:	3301      	adds	r3, #1
 8014776:	73bb      	strb	r3, [r7, #14]
 8014778:	7bfa      	ldrb	r2, [r7, #15]
 801477a:	79fb      	ldrb	r3, [r7, #7]
 801477c:	429a      	cmp	r2, r3
 801477e:	d3b1      	bcc.n	80146e4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014780:	2300      	movs	r3, #0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3710      	adds	r7, #16
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801478a:	b480      	push	{r7}
 801478c:	b083      	sub	sp, #12
 801478e:	af00      	add	r7, sp, #0
 8014790:	4603      	mov	r3, r0
 8014792:	71fb      	strb	r3, [r7, #7]
 8014794:	460b      	mov	r3, r1
 8014796:	71bb      	strb	r3, [r7, #6]
 8014798:	4613      	mov	r3, r2
 801479a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801479c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80147a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	db07      	blt.n	80147b8 <RegionCommonValueInRange+0x2e>
 80147a8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80147ac:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	dc01      	bgt.n	80147b8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80147b4:	2301      	movs	r3, #1
 80147b6:	e000      	b.n	80147ba <RegionCommonValueInRange+0x30>
    }
    return 0;
 80147b8:	2300      	movs	r3, #0
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	370c      	adds	r7, #12
 80147be:	46bd      	mov	sp, r7
 80147c0:	bc80      	pop	{r7}
 80147c2:	4770      	bx	lr

080147c4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80147c4:	b480      	push	{r7}
 80147c6:	b085      	sub	sp, #20
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	460b      	mov	r3, r1
 80147ce:	70fb      	strb	r3, [r7, #3]
 80147d0:	4613      	mov	r3, r2
 80147d2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80147d4:	78fb      	ldrb	r3, [r7, #3]
 80147d6:	091b      	lsrs	r3, r3, #4
 80147d8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80147da:	78bb      	ldrb	r3, [r7, #2]
 80147dc:	091b      	lsrs	r3, r3, #4
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	7bfa      	ldrb	r2, [r7, #15]
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d803      	bhi.n	80147ee <RegionCommonChanDisable+0x2a>
 80147e6:	78fa      	ldrb	r2, [r7, #3]
 80147e8:	78bb      	ldrb	r3, [r7, #2]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d301      	bcc.n	80147f2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80147ee:	2300      	movs	r3, #0
 80147f0:	e017      	b.n	8014822 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80147f2:	7bfb      	ldrb	r3, [r7, #15]
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	687a      	ldr	r2, [r7, #4]
 80147f8:	4413      	add	r3, r2
 80147fa:	881b      	ldrh	r3, [r3, #0]
 80147fc:	b21a      	sxth	r2, r3
 80147fe:	78fb      	ldrb	r3, [r7, #3]
 8014800:	f003 030f 	and.w	r3, r3, #15
 8014804:	2101      	movs	r1, #1
 8014806:	fa01 f303 	lsl.w	r3, r1, r3
 801480a:	b21b      	sxth	r3, r3
 801480c:	43db      	mvns	r3, r3
 801480e:	b21b      	sxth	r3, r3
 8014810:	4013      	ands	r3, r2
 8014812:	b219      	sxth	r1, r3
 8014814:	7bfb      	ldrb	r3, [r7, #15]
 8014816:	005b      	lsls	r3, r3, #1
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	4413      	add	r3, r2
 801481c:	b28a      	uxth	r2, r1
 801481e:	801a      	strh	r2, [r3, #0]

    return true;
 8014820:	2301      	movs	r3, #1
}
 8014822:	4618      	mov	r0, r3
 8014824:	3714      	adds	r7, #20
 8014826:	46bd      	mov	sp, r7
 8014828:	bc80      	pop	{r7}
 801482a:	4770      	bx	lr

0801482c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b084      	sub	sp, #16
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	460b      	mov	r3, r1
 8014836:	70fb      	strb	r3, [r7, #3]
 8014838:	4613      	mov	r3, r2
 801483a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801483c:	2300      	movs	r3, #0
 801483e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d101      	bne.n	801484a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014846:	2300      	movs	r3, #0
 8014848:	e018      	b.n	801487c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801484a:	78fb      	ldrb	r3, [r7, #3]
 801484c:	73bb      	strb	r3, [r7, #14]
 801484e:	e010      	b.n	8014872 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014850:	7bbb      	ldrb	r3, [r7, #14]
 8014852:	005b      	lsls	r3, r3, #1
 8014854:	687a      	ldr	r2, [r7, #4]
 8014856:	4413      	add	r3, r2
 8014858:	881b      	ldrh	r3, [r3, #0]
 801485a:	2110      	movs	r1, #16
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff fef9 	bl	8014654 <CountChannels>
 8014862:	4603      	mov	r3, r0
 8014864:	461a      	mov	r2, r3
 8014866:	7bfb      	ldrb	r3, [r7, #15]
 8014868:	4413      	add	r3, r2
 801486a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801486c:	7bbb      	ldrb	r3, [r7, #14]
 801486e:	3301      	adds	r3, #1
 8014870:	73bb      	strb	r3, [r7, #14]
 8014872:	7bba      	ldrb	r2, [r7, #14]
 8014874:	78bb      	ldrb	r3, [r7, #2]
 8014876:	429a      	cmp	r2, r3
 8014878:	d3ea      	bcc.n	8014850 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801487a:	7bfb      	ldrb	r3, [r7, #15]
}
 801487c:	4618      	mov	r0, r3
 801487e:	3710      	adds	r7, #16
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014884:	b480      	push	{r7}
 8014886:	b087      	sub	sp, #28
 8014888:	af00      	add	r7, sp, #0
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	60b9      	str	r1, [r7, #8]
 801488e:	4613      	mov	r3, r2
 8014890:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d016      	beq.n	80148c6 <RegionCommonChanMaskCopy+0x42>
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d013      	beq.n	80148c6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801489e:	2300      	movs	r3, #0
 80148a0:	75fb      	strb	r3, [r7, #23]
 80148a2:	e00c      	b.n	80148be <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80148a4:	7dfb      	ldrb	r3, [r7, #23]
 80148a6:	005b      	lsls	r3, r3, #1
 80148a8:	68ba      	ldr	r2, [r7, #8]
 80148aa:	441a      	add	r2, r3
 80148ac:	7dfb      	ldrb	r3, [r7, #23]
 80148ae:	005b      	lsls	r3, r3, #1
 80148b0:	68f9      	ldr	r1, [r7, #12]
 80148b2:	440b      	add	r3, r1
 80148b4:	8812      	ldrh	r2, [r2, #0]
 80148b6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80148b8:	7dfb      	ldrb	r3, [r7, #23]
 80148ba:	3301      	adds	r3, #1
 80148bc:	75fb      	strb	r3, [r7, #23]
 80148be:	7dfa      	ldrb	r2, [r7, #23]
 80148c0:	79fb      	ldrb	r3, [r7, #7]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d3ee      	bcc.n	80148a4 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80148c6:	bf00      	nop
 80148c8:	371c      	adds	r7, #28
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bc80      	pop	{r7}
 80148ce:	4770      	bx	lr

080148d0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80148d0:	b082      	sub	sp, #8
 80148d2:	b580      	push	{r7, lr}
 80148d4:	b086      	sub	sp, #24
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	60f8      	str	r0, [r7, #12]
 80148da:	60b9      	str	r1, [r7, #8]
 80148dc:	627b      	str	r3, [r7, #36]	; 0x24
 80148de:	4613      	mov	r3, r2
 80148e0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80148e2:	79f9      	ldrb	r1, [r7, #7]
 80148e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148e8:	cb0c      	ldmia	r3, {r2, r3}
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f7ff fd8c 	bl	8014408 <GetDutyCycle>
 80148f0:	4603      	mov	r3, r0
 80148f2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	68da      	ldr	r2, [r3, #12]
 80148f8:	8afb      	ldrh	r3, [r7, #22]
 80148fa:	68b9      	ldr	r1, [r7, #8]
 80148fc:	fb01 f303 	mul.w	r3, r1, r3
 8014900:	429a      	cmp	r2, r3
 8014902:	d909      	bls.n	8014918 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	68da      	ldr	r2, [r3, #12]
 8014908:	8afb      	ldrh	r3, [r7, #22]
 801490a:	68b9      	ldr	r1, [r7, #8]
 801490c:	fb01 f303 	mul.w	r3, r1, r3
 8014910:	1ad2      	subs	r2, r2, r3
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014916:	e002      	b.n	801491e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	2200      	movs	r2, #0
 801491c:	60da      	str	r2, [r3, #12]
}
 801491e:	bf00      	nop
 8014920:	3718      	adds	r7, #24
 8014922:	46bd      	mov	sp, r7
 8014924:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014928:	b002      	add	sp, #8
 801492a:	4770      	bx	lr

0801492c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801492e:	b08f      	sub	sp, #60	; 0x3c
 8014930:	af04      	add	r7, sp, #16
 8014932:	6039      	str	r1, [r7, #0]
 8014934:	4611      	mov	r1, r2
 8014936:	461a      	mov	r2, r3
 8014938:	4603      	mov	r3, r0
 801493a:	71fb      	strb	r3, [r7, #7]
 801493c:	460b      	mov	r3, r1
 801493e:	71bb      	strb	r3, [r7, #6]
 8014940:	4613      	mov	r3, r2
 8014942:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014944:	f04f 33ff 	mov.w	r3, #4294967295
 8014948:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801494a:	f006 f821 	bl	801a990 <UTIL_TIMER_GetCurrentTime>
 801494e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014950:	2300      	movs	r3, #0
 8014952:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014954:	2301      	movs	r3, #1
 8014956:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801495e:	2300      	movs	r3, #0
 8014960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014964:	e0ba      	b.n	8014adc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014966:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801496a:	4613      	mov	r3, r2
 801496c:	005b      	lsls	r3, r3, #1
 801496e:	4413      	add	r3, r2
 8014970:	00db      	lsls	r3, r3, #3
 8014972:	461a      	mov	r2, r3
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	189c      	adds	r4, r3, r2
 8014978:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801497c:	797a      	ldrb	r2, [r7, #5]
 801497e:	79fd      	ldrb	r5, [r7, #7]
 8014980:	69fb      	ldr	r3, [r7, #28]
 8014982:	9302      	str	r3, [sp, #8]
 8014984:	46ec      	mov	ip, sp
 8014986:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801498a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801498e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014992:	4633      	mov	r3, r6
 8014994:	4629      	mov	r1, r5
 8014996:	4620      	mov	r0, r4
 8014998:	f7ff fe22 	bl	80145e0 <UpdateTimeCredits>
 801499c:	4603      	mov	r3, r0
 801499e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80149a0:	8afa      	ldrh	r2, [r7, #22]
 80149a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149a4:	fb02 f303 	mul.w	r3, r2, r3
 80149a8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80149aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149ae:	4613      	mov	r3, r2
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	4413      	add	r3, r2
 80149b4:	00db      	lsls	r3, r3, #3
 80149b6:	461a      	mov	r2, r3
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	4413      	add	r3, r2
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	69ba      	ldr	r2, [r7, #24]
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d308      	bcc.n	80149d6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149c4:	797b      	ldrb	r3, [r7, #5]
 80149c6:	f083 0301 	eor.w	r3, r3, #1
 80149ca:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d013      	beq.n	80149f8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80149d0:	79fb      	ldrb	r3, [r7, #7]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d010      	beq.n	80149f8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80149d6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149da:	4613      	mov	r3, r2
 80149dc:	005b      	lsls	r3, r3, #1
 80149de:	4413      	add	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	461a      	mov	r2, r3
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	4413      	add	r3, r2
 80149e8:	2201      	movs	r2, #1
 80149ea:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80149ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80149f0:	3301      	adds	r3, #1
 80149f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80149f6:	e06c      	b.n	8014ad2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80149f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80149fc:	4613      	mov	r3, r2
 80149fe:	005b      	lsls	r3, r3, #1
 8014a00:	4413      	add	r3, r2
 8014a02:	00db      	lsls	r3, r3, #3
 8014a04:	461a      	mov	r2, r3
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	4413      	add	r3, r2
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014a0e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a12:	4613      	mov	r3, r2
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	4413      	add	r3, r2
 8014a18:	00db      	lsls	r3, r3, #3
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	4413      	add	r3, r2
 8014a20:	691b      	ldr	r3, [r3, #16]
 8014a22:	69ba      	ldr	r2, [r7, #24]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d215      	bcs.n	8014a54 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014a28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014a2c:	4613      	mov	r3, r2
 8014a2e:	005b      	lsls	r3, r3, #1
 8014a30:	4413      	add	r3, r2
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	461a      	mov	r2, r3
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	4413      	add	r3, r2
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	69ba      	ldr	r2, [r7, #24]
 8014a3e:	1ad3      	subs	r3, r2, r3
 8014a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a42:	4293      	cmp	r3, r2
 8014a44:	bf28      	it	cs
 8014a46:	4613      	movcs	r3, r2
 8014a48:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014a4e:	3301      	adds	r3, #1
 8014a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014a54:	79fb      	ldrb	r3, [r7, #7]
 8014a56:	f083 0301 	eor.w	r3, r3, #1
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d038      	beq.n	8014ad2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014a60:	2300      	movs	r3, #0
 8014a62:	60fb      	str	r3, [r7, #12]
 8014a64:	2300      	movs	r3, #0
 8014a66:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014a68:	8afb      	ldrh	r3, [r7, #22]
 8014a6a:	2b64      	cmp	r3, #100	; 0x64
 8014a6c:	d103      	bne.n	8014a76 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014a6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014a72:	60fb      	str	r3, [r7, #12]
 8014a74:	e009      	b.n	8014a8a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014a76:	8afb      	ldrh	r3, [r7, #22]
 8014a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014a7c:	d103      	bne.n	8014a86 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014a7e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014a82:	60fb      	str	r3, [r7, #12]
 8014a84:	e001      	b.n	8014a8a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014a86:	4b1e      	ldr	r3, [pc, #120]	; (8014b00 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a88:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a8c:	4a1c      	ldr	r2, [pc, #112]	; (8014b00 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d90e      	bls.n	8014ab0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014a92:	68fa      	ldr	r2, [r7, #12]
 8014a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a96:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014a9a:	3b30      	subs	r3, #48	; 0x30
 8014a9c:	4919      	ldr	r1, [pc, #100]	; (8014b04 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014a9e:	fba1 1303 	umull	r1, r3, r1, r3
 8014aa2:	0c1b      	lsrs	r3, r3, #16
 8014aa4:	3301      	adds	r3, #1
 8014aa6:	4918      	ldr	r1, [pc, #96]	; (8014b08 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014aa8:	fb01 f303 	mul.w	r3, r1, r3
 8014aac:	4413      	add	r3, r2
 8014aae:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014ab0:	f107 000c 	add.w	r0, r7, #12
 8014ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014aba:	f107 020c 	add.w	r2, r7, #12
 8014abe:	ca06      	ldmia	r2, {r1, r2}
 8014ac0:	f005 f891 	bl	8019be6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014ac4:	f107 030c 	add.w	r3, r7, #12
 8014ac8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014acc:	f005 f94a 	bl	8019d64 <SysTimeToMs>
 8014ad0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014ad2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014adc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014ae0:	79bb      	ldrb	r3, [r7, #6]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	f4ff af3f 	bcc.w	8014966 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d102      	bne.n	8014af6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014af0:	f04f 33ff 	mov.w	r3, #4294967295
 8014af4:	e000      	b.n	8014af8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	372c      	adds	r7, #44	; 0x2c
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b00:	0001ec30 	.word	0x0001ec30
 8014b04:	c22e4507 	.word	0xc22e4507
 8014b08:	00015180 	.word	0x00015180

08014b0c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b085      	sub	sp, #20
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014b16:	2300      	movs	r3, #0
 8014b18:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	2b03      	cmp	r3, #3
 8014b20:	d13f      	bne.n	8014ba2 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	3301      	adds	r3, #1
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	b25a      	sxtb	r2, r3
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b34:	f003 030f 	and.w	r3, r3, #15
 8014b38:	b25a      	sxtb	r2, r3
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	091b      	lsrs	r3, r3, #4
 8014b48:	b2db      	uxtb	r3, r3
 8014b4a:	b25a      	sxtb	r2, r3
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3302      	adds	r3, #2
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	b29a      	uxth	r2, r3
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	889b      	ldrh	r3, [r3, #4]
 8014b60:	b21a      	sxth	r2, r3
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	3303      	adds	r3, #3
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	021b      	lsls	r3, r3, #8
 8014b6a:	b21b      	sxth	r3, r3
 8014b6c:	4313      	orrs	r3, r2
 8014b6e:	b21b      	sxth	r3, r3
 8014b70:	b29a      	uxth	r2, r3
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	791a      	ldrb	r2, [r3, #4]
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	091b      	lsrs	r3, r3, #4
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	f003 0307 	and.w	r3, r3, #7
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	f003 030f 	and.w	r3, r3, #15
 8014b98:	b2da      	uxtb	r2, r3
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014b9e:	2305      	movs	r3, #5
 8014ba0:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3714      	adds	r7, #20
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bc80      	pop	{r7}
 8014bac:	4770      	bx	lr

08014bae <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014bae:	b5b0      	push	{r4, r5, r7, lr}
 8014bb0:	b088      	sub	sp, #32
 8014bb2:	af02      	add	r7, sp, #8
 8014bb4:	60f8      	str	r0, [r7, #12]
 8014bb6:	60b9      	str	r1, [r7, #8]
 8014bb8:	607a      	str	r2, [r7, #4]
 8014bba:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	791b      	ldrb	r3, [r3, #4]
 8014bc0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	799b      	ldrb	r3, [r3, #6]
 8014bc6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	79db      	ldrb	r3, [r3, #7]
 8014bcc:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	7a1b      	ldrb	r3, [r3, #8]
 8014bd2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	795b      	ldrb	r3, [r3, #5]
 8014bd8:	f083 0301 	eor.w	r3, r3, #1
 8014bdc:	b2db      	uxtb	r3, r3
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d008      	beq.n	8014bf4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	7adb      	ldrb	r3, [r3, #11]
 8014be6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	7a5b      	ldrb	r3, [r3, #9]
 8014bec:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	7a9b      	ldrb	r3, [r3, #10]
 8014bf2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014bf4:	7dfb      	ldrb	r3, [r7, #23]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d03a      	beq.n	8014c70 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	7b18      	ldrb	r0, [r3, #12]
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	6919      	ldr	r1, [r3, #16]
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	6992      	ldr	r2, [r2, #24]
 8014c12:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014c16:	9201      	str	r2, [sp, #4]
 8014c18:	9300      	str	r3, [sp, #0]
 8014c1a:	462b      	mov	r3, r5
 8014c1c:	4622      	mov	r2, r4
 8014c1e:	f7ff fd42 	bl	80146a6 <RegionCommonChanVerifyDr>
 8014c22:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014c24:	f083 0301 	eor.w	r3, r3, #1
 8014c28:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d003      	beq.n	8014c36 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8014c2e:	7dfb      	ldrb	r3, [r7, #23]
 8014c30:	f023 0302 	bic.w	r3, r3, #2
 8014c34:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8014c42:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7ff fd9f 	bl	801478a <RegionCommonValueInRange>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d10e      	bne.n	8014c70 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014c58:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	da03      	bge.n	8014c68 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	7f5b      	ldrb	r3, [r3, #29]
 8014c64:	757b      	strb	r3, [r7, #21]
 8014c66:	e003      	b.n	8014c70 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014c68:	7dfb      	ldrb	r3, [r7, #23]
 8014c6a:	f023 0304 	bic.w	r3, r3, #4
 8014c6e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
 8014c72:	2b07      	cmp	r3, #7
 8014c74:	d105      	bne.n	8014c82 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014c76:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d101      	bne.n	8014c82 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014c7e:	2301      	movs	r3, #1
 8014c80:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	7dba      	ldrb	r2, [r7, #22]
 8014c86:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	7d7a      	ldrb	r2, [r7, #21]
 8014c8c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014c8e:	7d3a      	ldrb	r2, [r7, #20]
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	701a      	strb	r2, [r3, #0]

    return status;
 8014c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3718      	adds	r7, #24
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014ca0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	6039      	str	r1, [r7, #0]
 8014caa:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014cac:	79fb      	ldrb	r3, [r7, #7]
 8014cae:	4a06      	ldr	r2, [pc, #24]	; (8014cc8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	370c      	adds	r7, #12
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bc80      	pop	{r7}
 8014cc4:	4770      	bx	lr
 8014cc6:	bf00      	nop
 8014cc8:	000f4240 	.word	0x000f4240

08014ccc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014cd6:	79fb      	ldrb	r3, [r7, #7]
 8014cd8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014cdc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bc80      	pop	{r7}
 8014ce8:	4770      	bx	lr
	...

08014cec <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014cec:	b480      	push	{r7}
 8014cee:	b085      	sub	sp, #20
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	60f8      	str	r0, [r7, #12]
 8014cf4:	607a      	str	r2, [r7, #4]
 8014cf6:	603b      	str	r3, [r7, #0]
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014cfc:	7afa      	ldrb	r2, [r7, #11]
 8014cfe:	7afb      	ldrb	r3, [r7, #11]
 8014d00:	3b04      	subs	r3, #4
 8014d02:	4619      	mov	r1, r3
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	fb03 f101 	mul.w	r1, r3, r1
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d10:	fb00 f303 	mul.w	r3, r0, r3
 8014d14:	440b      	add	r3, r1
 8014d16:	005b      	lsls	r3, r3, #1
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d013      	beq.n	8014d44 <RegionCommonComputeRxWindowParameters+0x58>
 8014d1c:	7afb      	ldrb	r3, [r7, #11]
 8014d1e:	3b04      	subs	r3, #4
 8014d20:	4619      	mov	r1, r3
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	fb03 f101 	mul.w	r1, r3, r1
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d2e:	fb00 f303 	mul.w	r3, r0, r3
 8014d32:	440b      	add	r3, r1
 8014d34:	0059      	lsls	r1, r3, #1
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	440b      	add	r3, r1
 8014d3a:	1e59      	subs	r1, r3, #1
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d42:	e00f      	b.n	8014d64 <RegionCommonComputeRxWindowParameters+0x78>
 8014d44:	7afb      	ldrb	r3, [r7, #11]
 8014d46:	3b04      	subs	r3, #4
 8014d48:	4619      	mov	r1, r3
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	fb03 f101 	mul.w	r1, r3, r1
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014d56:	fb00 f303 	mul.w	r3, r0, r3
 8014d5a:	440b      	add	r3, r1
 8014d5c:	0059      	lsls	r1, r3, #1
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8014d64:	429a      	cmp	r2, r3
 8014d66:	bf38      	it	cc
 8014d68:	461a      	movcc	r2, r3
 8014d6a:	69bb      	ldr	r3, [r7, #24]
 8014d6c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	4619      	mov	r1, r3
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	68fa      	ldr	r2, [r7, #12]
 8014d7a:	fb02 f303 	mul.w	r3, r2, r3
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d007      	beq.n	8014d92 <RegionCommonComputeRxWindowParameters+0xa6>
 8014d82:	69bb      	ldr	r3, [r7, #24]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	68fa      	ldr	r2, [r7, #12]
 8014d88:	fb02 f303 	mul.w	r3, r2, r3
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	085b      	lsrs	r3, r3, #1
 8014d90:	e005      	b.n	8014d9e <RegionCommonComputeRxWindowParameters+0xb2>
 8014d92:	69bb      	ldr	r3, [r7, #24]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	68fa      	ldr	r2, [r7, #12]
 8014d98:	fb02 f303 	mul.w	r3, r2, r3
 8014d9c:	085b      	lsrs	r3, r3, #1
 8014d9e:	1acb      	subs	r3, r1, r3
 8014da0:	683a      	ldr	r2, [r7, #0]
 8014da2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014da6:	fb01 f202 	mul.w	r2, r1, r2
 8014daa:	1a9b      	subs	r3, r3, r2
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	dd27      	ble.n	8014e00 <RegionCommonComputeRxWindowParameters+0x114>
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	4619      	mov	r1, r3
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	68fa      	ldr	r2, [r7, #12]
 8014dbc:	fb02 f303 	mul.w	r3, r2, r3
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d007      	beq.n	8014dd4 <RegionCommonComputeRxWindowParameters+0xe8>
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	68fa      	ldr	r2, [r7, #12]
 8014dca:	fb02 f303 	mul.w	r3, r2, r3
 8014dce:	3301      	adds	r3, #1
 8014dd0:	085b      	lsrs	r3, r3, #1
 8014dd2:	e005      	b.n	8014de0 <RegionCommonComputeRxWindowParameters+0xf4>
 8014dd4:	69bb      	ldr	r3, [r7, #24]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	68fa      	ldr	r2, [r7, #12]
 8014dda:	fb02 f303 	mul.w	r3, r2, r3
 8014dde:	085b      	lsrs	r3, r3, #1
 8014de0:	1acb      	subs	r3, r1, r3
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014de8:	fb01 f202 	mul.w	r2, r1, r2
 8014dec:	1a9b      	subs	r3, r3, r2
 8014dee:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014df2:	4a19      	ldr	r2, [pc, #100]	; (8014e58 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014df4:	fb82 1203 	smull	r1, r2, r2, r3
 8014df8:	1192      	asrs	r2, r2, #6
 8014dfa:	17db      	asrs	r3, r3, #31
 8014dfc:	1ad3      	subs	r3, r2, r3
 8014dfe:	e024      	b.n	8014e4a <RegionCommonComputeRxWindowParameters+0x15e>
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4619      	mov	r1, r3
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	68fa      	ldr	r2, [r7, #12]
 8014e0c:	fb02 f303 	mul.w	r3, r2, r3
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d007      	beq.n	8014e24 <RegionCommonComputeRxWindowParameters+0x138>
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	68fa      	ldr	r2, [r7, #12]
 8014e1a:	fb02 f303 	mul.w	r3, r2, r3
 8014e1e:	3301      	adds	r3, #1
 8014e20:	085b      	lsrs	r3, r3, #1
 8014e22:	e005      	b.n	8014e30 <RegionCommonComputeRxWindowParameters+0x144>
 8014e24:	69bb      	ldr	r3, [r7, #24]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	68fa      	ldr	r2, [r7, #12]
 8014e2a:	fb02 f303 	mul.w	r3, r2, r3
 8014e2e:	085b      	lsrs	r3, r3, #1
 8014e30:	1acb      	subs	r3, r1, r3
 8014e32:	683a      	ldr	r2, [r7, #0]
 8014e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014e38:	fb01 f202 	mul.w	r2, r1, r2
 8014e3c:	1a9b      	subs	r3, r3, r2
 8014e3e:	4a06      	ldr	r2, [pc, #24]	; (8014e58 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014e40:	fb82 1203 	smull	r1, r2, r2, r3
 8014e44:	1192      	asrs	r2, r2, #6
 8014e46:	17db      	asrs	r3, r3, #31
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	69fa      	ldr	r2, [r7, #28]
 8014e4c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014e4e:	bf00      	nop
 8014e50:	3714      	adds	r7, #20
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bc80      	pop	{r7}
 8014e56:	4770      	bx	lr
 8014e58:	10624dd3 	.word	0x10624dd3

08014e5c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b086      	sub	sp, #24
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	4603      	mov	r3, r0
 8014e64:	60b9      	str	r1, [r7, #8]
 8014e66:	607a      	str	r2, [r7, #4]
 8014e68:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e72:	005b      	lsls	r3, r3, #1
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7eb fca9 	bl	80007cc <__aeabi_ui2f>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	68b8      	ldr	r0, [r7, #8]
 8014e80:	f7eb fbf2 	bl	8000668 <__aeabi_fsub>
 8014e84:	4603      	mov	r3, r0
 8014e86:	6879      	ldr	r1, [r7, #4]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7eb fbed 	bl	8000668 <__aeabi_fsub>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7eb fadd 	bl	8000450 <__aeabi_f2d>
 8014e96:	4602      	mov	r2, r0
 8014e98:	460b      	mov	r3, r1
 8014e9a:	4610      	mov	r0, r2
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	f006 f90f 	bl	801b0c0 <floor>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	4610      	mov	r0, r2
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	f7eb fbb1 	bl	8000610 <__aeabi_d2iz>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3718      	adds	r7, #24
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}

08014ebe <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014ebe:	b590      	push	{r4, r7, lr}
 8014ec0:	b087      	sub	sp, #28
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	60f8      	str	r0, [r7, #12]
 8014ec6:	60b9      	str	r1, [r7, #8]
 8014ec8:	607a      	str	r2, [r7, #4]
 8014eca:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	757b      	strb	r3, [r7, #21]
 8014ed8:	2300      	movs	r3, #0
 8014eda:	753b      	strb	r3, [r7, #20]
 8014edc:	e09c      	b.n	8015018 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014ede:	2300      	movs	r3, #0
 8014ee0:	74fb      	strb	r3, [r7, #19]
 8014ee2:	e08f      	b.n	8015004 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	685a      	ldr	r2, [r3, #4]
 8014ee8:	7d3b      	ldrb	r3, [r7, #20]
 8014eea:	005b      	lsls	r3, r3, #1
 8014eec:	4413      	add	r3, r2
 8014eee:	881b      	ldrh	r3, [r3, #0]
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	7cfb      	ldrb	r3, [r7, #19]
 8014ef4:	fa42 f303 	asr.w	r3, r2, r3
 8014ef8:	f003 0301 	and.w	r3, r3, #1
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d07e      	beq.n	8014ffe <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	689a      	ldr	r2, [r3, #8]
 8014f04:	7d79      	ldrb	r1, [r7, #21]
 8014f06:	7cfb      	ldrb	r3, [r7, #19]
 8014f08:	440b      	add	r3, r1
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	005b      	lsls	r3, r3, #1
 8014f10:	440b      	add	r3, r1
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	4413      	add	r3, r2
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d06b      	beq.n	8014ff4 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	f083 0301 	eor.w	r3, r3, #1
 8014f24:	b2db      	uxtb	r3, r3
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d011      	beq.n	8014f4e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d00d      	beq.n	8014f4e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	695a      	ldr	r2, [r3, #20]
 8014f36:	7d3b      	ldrb	r3, [r7, #20]
 8014f38:	005b      	lsls	r3, r3, #1
 8014f3a:	4413      	add	r3, r2
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	461a      	mov	r2, r3
 8014f40:	7cfb      	ldrb	r3, [r7, #19]
 8014f42:	fa42 f303 	asr.w	r3, r2, r3
 8014f46:	f003 0301 	and.w	r3, r3, #1
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d054      	beq.n	8014ff8 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	785b      	ldrb	r3, [r3, #1]
 8014f52:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	689a      	ldr	r2, [r3, #8]
 8014f58:	7d79      	ldrb	r1, [r7, #21]
 8014f5a:	7cfb      	ldrb	r3, [r7, #19]
 8014f5c:	440b      	add	r3, r1
 8014f5e:	4619      	mov	r1, r3
 8014f60:	460b      	mov	r3, r1
 8014f62:	005b      	lsls	r3, r3, #1
 8014f64:	440b      	add	r3, r1
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	4413      	add	r3, r2
 8014f6a:	7a1b      	ldrb	r3, [r3, #8]
 8014f6c:	f343 0303 	sbfx	r3, r3, #0, #4
 8014f70:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f72:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	689a      	ldr	r2, [r3, #8]
 8014f78:	7d79      	ldrb	r1, [r7, #21]
 8014f7a:	7cfb      	ldrb	r3, [r7, #19]
 8014f7c:	440b      	add	r3, r1
 8014f7e:	4619      	mov	r1, r3
 8014f80:	460b      	mov	r3, r1
 8014f82:	005b      	lsls	r3, r3, #1
 8014f84:	440b      	add	r3, r1
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	4413      	add	r3, r2
 8014f8a:	7a1b      	ldrb	r3, [r3, #8]
 8014f8c:	f343 1303 	sbfx	r3, r3, #4, #4
 8014f90:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014f92:	461a      	mov	r2, r3
 8014f94:	4621      	mov	r1, r4
 8014f96:	f7ff fbf8 	bl	801478a <RegionCommonValueInRange>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d02d      	beq.n	8014ffc <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	68da      	ldr	r2, [r3, #12]
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	6899      	ldr	r1, [r3, #8]
 8014fa8:	7d78      	ldrb	r0, [r7, #21]
 8014faa:	7cfb      	ldrb	r3, [r7, #19]
 8014fac:	4403      	add	r3, r0
 8014fae:	4618      	mov	r0, r3
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	005b      	lsls	r3, r3, #1
 8014fb4:	4403      	add	r3, r0
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	440b      	add	r3, r1
 8014fba:	7a5b      	ldrb	r3, [r3, #9]
 8014fbc:	4619      	mov	r1, r3
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	005b      	lsls	r3, r3, #1
 8014fc2:	440b      	add	r3, r1
 8014fc4:	00db      	lsls	r3, r3, #3
 8014fc6:	4413      	add	r3, r2
 8014fc8:	7d1b      	ldrb	r3, [r3, #20]
 8014fca:	f083 0301 	eor.w	r3, r3, #1
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d003      	beq.n	8014fdc <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014fd4:	7dbb      	ldrb	r3, [r7, #22]
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014fda:	e010      	b.n	8014ffe <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014fdc:	7dfb      	ldrb	r3, [r7, #23]
 8014fde:	1c5a      	adds	r2, r3, #1
 8014fe0:	75fa      	strb	r2, [r7, #23]
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	4413      	add	r3, r2
 8014fe8:	7d79      	ldrb	r1, [r7, #21]
 8014fea:	7cfa      	ldrb	r2, [r7, #19]
 8014fec:	440a      	add	r2, r1
 8014fee:	b2d2      	uxtb	r2, r2
 8014ff0:	701a      	strb	r2, [r3, #0]
 8014ff2:	e004      	b.n	8014ffe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014ff4:	bf00      	nop
 8014ff6:	e002      	b.n	8014ffe <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014ff8:	bf00      	nop
 8014ffa:	e000      	b.n	8014ffe <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014ffc:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014ffe:	7cfb      	ldrb	r3, [r7, #19]
 8015000:	3301      	adds	r3, #1
 8015002:	74fb      	strb	r3, [r7, #19]
 8015004:	7cfb      	ldrb	r3, [r7, #19]
 8015006:	2b0f      	cmp	r3, #15
 8015008:	f67f af6c 	bls.w	8014ee4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801500c:	7d7b      	ldrb	r3, [r7, #21]
 801500e:	3310      	adds	r3, #16
 8015010:	757b      	strb	r3, [r7, #21]
 8015012:	7d3b      	ldrb	r3, [r7, #20]
 8015014:	3301      	adds	r3, #1
 8015016:	753b      	strb	r3, [r7, #20]
 8015018:	7d7b      	ldrb	r3, [r7, #21]
 801501a:	b29a      	uxth	r2, r3
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	8a1b      	ldrh	r3, [r3, #16]
 8015020:	429a      	cmp	r2, r3
 8015022:	f4ff af5c 	bcc.w	8014ede <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	7dfa      	ldrb	r2, [r7, #23]
 801502a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	7dba      	ldrb	r2, [r7, #22]
 8015030:	701a      	strb	r2, [r3, #0]
}
 8015032:	bf00      	nop
 8015034:	371c      	adds	r7, #28
 8015036:	46bd      	mov	sp, r7
 8015038:	bd90      	pop	{r4, r7, pc}

0801503a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801503a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801503c:	b08b      	sub	sp, #44	; 0x2c
 801503e:	af04      	add	r7, sp, #16
 8015040:	60f8      	str	r0, [r7, #12]
 8015042:	60b9      	str	r1, [r7, #8]
 8015044:	607a      	str	r2, [r7, #4]
 8015046:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	4618      	mov	r0, r3
 801504e:	f005 fcb1 	bl	801a9b4 <UTIL_TIMER_GetElapsedTime>
 8015052:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	1ad2      	subs	r2, r2, r3
 801505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801505e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015062:	2201      	movs	r2, #1
 8015064:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2200      	movs	r2, #0
 801506a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d004      	beq.n	801507e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015078:	697a      	ldr	r2, [r7, #20]
 801507a:	429a      	cmp	r2, r3
 801507c:	d32b      	bcc.n	80150d6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	2200      	movs	r2, #0
 8015082:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	69db      	ldr	r3, [r3, #28]
 8015088:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801508e:	68dd      	ldr	r5, [r3, #12]
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	7a5e      	ldrb	r6, [r3, #9]
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f893 c008 	ldrb.w	ip, [r3, #8]
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	7d1b      	ldrb	r3, [r3, #20]
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	6992      	ldr	r2, [r2, #24]
 80150a2:	9203      	str	r2, [sp, #12]
 80150a4:	68fa      	ldr	r2, [r7, #12]
 80150a6:	f10d 0e04 	add.w	lr, sp, #4
 80150aa:	320c      	adds	r2, #12
 80150ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150b0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80150b4:	9300      	str	r3, [sp, #0]
 80150b6:	4663      	mov	r3, ip
 80150b8:	4632      	mov	r2, r6
 80150ba:	4629      	mov	r1, r5
 80150bc:	4620      	mov	r0, r4
 80150be:	f7ff fc35 	bl	801492c <RegionCommonUpdateBandTimeOff>
 80150c2:	4602      	mov	r2, r0
 80150c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150c6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	69d8      	ldr	r0, [r3, #28]
 80150cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ce:	683a      	ldr	r2, [r7, #0]
 80150d0:	6879      	ldr	r1, [r7, #4]
 80150d2:	f7ff fef4 	bl	8014ebe <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d004      	beq.n	80150e8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80150de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150e0:	2200      	movs	r2, #0
 80150e2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80150e4:	2300      	movs	r3, #0
 80150e6:	e006      	b.n	80150f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80150e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d001      	beq.n	80150f4 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80150f0:	230b      	movs	r3, #11
 80150f2:	e000      	b.n	80150f6 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80150f4:	230c      	movs	r3, #12
    }
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	371c      	adds	r7, #28
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150fe <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80150fe:	b5b0      	push	{r4, r5, r7, lr}
 8015100:	b086      	sub	sp, #24
 8015102:	af02      	add	r7, sp, #8
 8015104:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	781b      	ldrb	r3, [r3, #0]
 801510a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f993 2000 	ldrsb.w	r2, [r3]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015118:	429a      	cmp	r2, r3
 801511a:	d103      	bne.n	8015124 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015122:	e026      	b.n	8015172 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015124:	7bfb      	ldrb	r3, [r7, #15]
 8015126:	3b01      	subs	r3, #1
 8015128:	b2db      	uxtb	r3, r3
 801512a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8015132:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015136:	429a      	cmp	r2, r3
 8015138:	d019      	beq.n	801516e <RegionCommonGetNextLowerTxDr+0x70>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	78d8      	ldrb	r0, [r3, #3]
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6859      	ldr	r1, [r3, #4]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801514e:	687a      	ldr	r2, [r7, #4]
 8015150:	6892      	ldr	r2, [r2, #8]
 8015152:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8015156:	9201      	str	r2, [sp, #4]
 8015158:	9300      	str	r3, [sp, #0]
 801515a:	462b      	mov	r3, r5
 801515c:	4622      	mov	r2, r4
 801515e:	f7ff faa2 	bl	80146a6 <RegionCommonChanVerifyDr>
 8015162:	4603      	mov	r3, r0
 8015164:	f083 0301 	eor.w	r3, r3, #1
 8015168:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801516a:	2b00      	cmp	r3, #0
 801516c:	d1da      	bne.n	8015124 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801516e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015172:	4618      	mov	r0, r3
 8015174:	3710      	adds	r7, #16
 8015176:	46bd      	mov	sp, r7
 8015178:	bdb0      	pop	{r4, r5, r7, pc}

0801517a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801517a:	b480      	push	{r7}
 801517c:	b083      	sub	sp, #12
 801517e:	af00      	add	r7, sp, #0
 8015180:	4603      	mov	r3, r0
 8015182:	460a      	mov	r2, r1
 8015184:	71fb      	strb	r3, [r7, #7]
 8015186:	4613      	mov	r3, r2
 8015188:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801518a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015192:	4293      	cmp	r3, r2
 8015194:	bfb8      	it	lt
 8015196:	4613      	movlt	r3, r2
 8015198:	b25b      	sxtb	r3, r3
}
 801519a:	4618      	mov	r0, r3
 801519c:	370c      	adds	r7, #12
 801519e:	46bd      	mov	sp, r7
 80151a0:	bc80      	pop	{r7}
 80151a2:	4770      	bx	lr

080151a4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80151a4:	b480      	push	{r7}
 80151a6:	b083      	sub	sp, #12
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	683a      	ldr	r2, [r7, #0]
 80151b4:	4413      	add	r3, r2
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	4a07      	ldr	r2, [pc, #28]	; (80151d8 <RegionCommonGetBandwidth+0x34>)
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d004      	beq.n	80151c8 <RegionCommonGetBandwidth+0x24>
 80151be:	4a07      	ldr	r2, [pc, #28]	; (80151dc <RegionCommonGetBandwidth+0x38>)
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d003      	beq.n	80151cc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80151c4:	2300      	movs	r3, #0
 80151c6:	e002      	b.n	80151ce <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80151c8:	2301      	movs	r3, #1
 80151ca:	e000      	b.n	80151ce <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80151cc:	2302      	movs	r3, #2
    }
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	370c      	adds	r7, #12
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bc80      	pop	{r7}
 80151d6:	4770      	bx	lr
 80151d8:	0003d090 	.word	0x0003d090
 80151dc:	0007a120 	.word	0x0007a120

080151e0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80151e0:	b5b0      	push	{r4, r5, r7, lr}
 80151e2:	b08c      	sub	sp, #48	; 0x30
 80151e4:	af04      	add	r7, sp, #16
 80151e6:	4603      	mov	r3, r0
 80151e8:	6039      	str	r1, [r7, #0]
 80151ea:	71fb      	strb	r3, [r7, #7]
 80151ec:	4613      	mov	r3, r2
 80151ee:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80151f0:	4b17      	ldr	r3, [pc, #92]	; (8015250 <RegionCommonRxConfigPrint+0x70>)
 80151f2:	f107 0408 	add.w	r4, r7, #8
 80151f6:	461d      	mov	r5, r3
 80151f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015200:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8015204:	79fb      	ldrb	r3, [r7, #7]
 8015206:	2b05      	cmp	r3, #5
 8015208:	d813      	bhi.n	8015232 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 801520a:	79fb      	ldrb	r3, [r7, #7]
 801520c:	009b      	lsls	r3, r3, #2
 801520e:	f107 0220 	add.w	r2, r7, #32
 8015212:	4413      	add	r3, r2
 8015214:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8015218:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801521c:	9202      	str	r2, [sp, #8]
 801521e:	683a      	ldr	r2, [r7, #0]
 8015220:	9201      	str	r2, [sp, #4]
 8015222:	9300      	str	r3, [sp, #0]
 8015224:	4b0b      	ldr	r3, [pc, #44]	; (8015254 <RegionCommonRxConfigPrint+0x74>)
 8015226:	2201      	movs	r2, #1
 8015228:	2100      	movs	r1, #0
 801522a:	2002      	movs	r0, #2
 801522c:	f005 fca0 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8015230:	e00a      	b.n	8015248 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015232:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015236:	9301      	str	r3, [sp, #4]
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	9300      	str	r3, [sp, #0]
 801523c:	4b06      	ldr	r3, [pc, #24]	; (8015258 <RegionCommonRxConfigPrint+0x78>)
 801523e:	2201      	movs	r2, #1
 8015240:	2100      	movs	r1, #0
 8015242:	2002      	movs	r0, #2
 8015244:	f005 fc94 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 8015248:	bf00      	nop
 801524a:	3720      	adds	r7, #32
 801524c:	46bd      	mov	sp, r7
 801524e:	bdb0      	pop	{r4, r5, r7, pc}
 8015250:	0801b934 	.word	0x0801b934
 8015254:	0801b8f8 	.word	0x0801b8f8
 8015258:	0801b918 	.word	0x0801b918

0801525c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b084      	sub	sp, #16
 8015260:	af02      	add	r7, sp, #8
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	460b      	mov	r3, r1
 8015266:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801526c:	9301      	str	r3, [sp, #4]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	9300      	str	r3, [sp, #0]
 8015272:	4b05      	ldr	r3, [pc, #20]	; (8015288 <RegionCommonTxConfigPrint+0x2c>)
 8015274:	2201      	movs	r2, #1
 8015276:	2100      	movs	r1, #0
 8015278:	2002      	movs	r0, #2
 801527a:	f005 fc79 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
}
 801527e:	bf00      	nop
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
 8015286:	bf00      	nop
 8015288:	0801b94c 	.word	0x0801b94c

0801528c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b082      	sub	sp, #8
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
 8015294:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015296:	4b2d      	ldr	r3, [pc, #180]	; (801534c <VerifyRfFreq+0xc0>)
 8015298:	6a1b      	ldr	r3, [r3, #32]
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	4798      	blx	r3
 801529e:	4603      	mov	r3, r0
 80152a0:	f083 0301 	eor.w	r3, r3, #1
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d001      	beq.n	80152ae <VerifyRfFreq+0x22>
    {
        return false;
 80152aa:	2300      	movs	r3, #0
 80152ac:	e04a      	b.n	8015344 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	4a27      	ldr	r2, [pc, #156]	; (8015350 <VerifyRfFreq+0xc4>)
 80152b2:	4293      	cmp	r3, r2
 80152b4:	d307      	bcc.n	80152c6 <VerifyRfFreq+0x3a>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4a26      	ldr	r2, [pc, #152]	; (8015354 <VerifyRfFreq+0xc8>)
 80152ba:	4293      	cmp	r3, r2
 80152bc:	d803      	bhi.n	80152c6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	2202      	movs	r2, #2
 80152c2:	701a      	strb	r2, [r3, #0]
 80152c4:	e03d      	b.n	8015342 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	4a22      	ldr	r2, [pc, #136]	; (8015354 <VerifyRfFreq+0xc8>)
 80152ca:	4293      	cmp	r3, r2
 80152cc:	d907      	bls.n	80152de <VerifyRfFreq+0x52>
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	4a21      	ldr	r2, [pc, #132]	; (8015358 <VerifyRfFreq+0xcc>)
 80152d2:	4293      	cmp	r3, r2
 80152d4:	d803      	bhi.n	80152de <VerifyRfFreq+0x52>
    {
        *band = 0;
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	2200      	movs	r2, #0
 80152da:	701a      	strb	r2, [r3, #0]
 80152dc:	e031      	b.n	8015342 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	4a1d      	ldr	r2, [pc, #116]	; (8015358 <VerifyRfFreq+0xcc>)
 80152e2:	4293      	cmp	r3, r2
 80152e4:	d907      	bls.n	80152f6 <VerifyRfFreq+0x6a>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	4a1c      	ldr	r2, [pc, #112]	; (801535c <VerifyRfFreq+0xd0>)
 80152ea:	4293      	cmp	r3, r2
 80152ec:	d803      	bhi.n	80152f6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2201      	movs	r2, #1
 80152f2:	701a      	strb	r2, [r3, #0]
 80152f4:	e025      	b.n	8015342 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	4a19      	ldr	r2, [pc, #100]	; (8015360 <VerifyRfFreq+0xd4>)
 80152fa:	4293      	cmp	r3, r2
 80152fc:	d907      	bls.n	801530e <VerifyRfFreq+0x82>
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	4a18      	ldr	r2, [pc, #96]	; (8015364 <VerifyRfFreq+0xd8>)
 8015302:	4293      	cmp	r3, r2
 8015304:	d803      	bhi.n	801530e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	2205      	movs	r2, #5
 801530a:	701a      	strb	r2, [r3, #0]
 801530c:	e019      	b.n	8015342 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	4a15      	ldr	r2, [pc, #84]	; (8015368 <VerifyRfFreq+0xdc>)
 8015312:	4293      	cmp	r3, r2
 8015314:	d907      	bls.n	8015326 <VerifyRfFreq+0x9a>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4a14      	ldr	r2, [pc, #80]	; (801536c <VerifyRfFreq+0xe0>)
 801531a:	4293      	cmp	r3, r2
 801531c:	d803      	bhi.n	8015326 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	2203      	movs	r2, #3
 8015322:	701a      	strb	r2, [r3, #0]
 8015324:	e00d      	b.n	8015342 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	4a11      	ldr	r2, [pc, #68]	; (8015370 <VerifyRfFreq+0xe4>)
 801532a:	4293      	cmp	r3, r2
 801532c:	d307      	bcc.n	801533e <VerifyRfFreq+0xb2>
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	4a10      	ldr	r2, [pc, #64]	; (8015374 <VerifyRfFreq+0xe8>)
 8015332:	4293      	cmp	r3, r2
 8015334:	d803      	bhi.n	801533e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	2204      	movs	r2, #4
 801533a:	701a      	strb	r2, [r3, #0]
 801533c:	e001      	b.n	8015342 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801533e:	2300      	movs	r3, #0
 8015340:	e000      	b.n	8015344 <VerifyRfFreq+0xb8>
    }
    return true;
 8015342:	2301      	movs	r3, #1
}
 8015344:	4618      	mov	r0, r3
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	0801bf10 	.word	0x0801bf10
 8015350:	337055c0 	.word	0x337055c0
 8015354:	338eda3f 	.word	0x338eda3f
 8015358:	33bca100 	.word	0x33bca100
 801535c:	33c5c8c0 	.word	0x33c5c8c0
 8015360:	33c74f5f 	.word	0x33c74f5f
 8015364:	33cef080 	.word	0x33cef080
 8015368:	33d1fdbf 	.word	0x33d1fdbf
 801536c:	33d5ce50 	.word	0x33d5ce50
 8015370:	33d691a0 	.word	0x33d691a0
 8015374:	33db2580 	.word	0x33db2580

08015378 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015378:	b590      	push	{r4, r7, lr}
 801537a:	b08b      	sub	sp, #44	; 0x2c
 801537c:	af04      	add	r7, sp, #16
 801537e:	4603      	mov	r3, r0
 8015380:	460a      	mov	r2, r1
 8015382:	71fb      	strb	r3, [r7, #7]
 8015384:	4613      	mov	r3, r2
 8015386:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801538c:	4a1f      	ldr	r2, [pc, #124]	; (801540c <GetTimeOnAir+0x94>)
 801538e:	5cd3      	ldrb	r3, [r2, r3]
 8015390:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015396:	491e      	ldr	r1, [pc, #120]	; (8015410 <GetTimeOnAir+0x98>)
 8015398:	4618      	mov	r0, r3
 801539a:	f7ff ff03 	bl	80151a4 <RegionCommonGetBandwidth>
 801539e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80153a0:	2300      	movs	r3, #0
 80153a2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80153a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80153a8:	2b07      	cmp	r3, #7
 80153aa:	d118      	bne.n	80153de <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80153ac:	4b19      	ldr	r3, [pc, #100]	; (8015414 <GetTimeOnAir+0x9c>)
 80153ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80153b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80153b8:	fb02 f303 	mul.w	r3, r2, r3
 80153bc:	4619      	mov	r1, r3
 80153be:	88bb      	ldrh	r3, [r7, #4]
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	2201      	movs	r2, #1
 80153c4:	9203      	str	r2, [sp, #12]
 80153c6:	9302      	str	r3, [sp, #8]
 80153c8:	2300      	movs	r3, #0
 80153ca:	9301      	str	r3, [sp, #4]
 80153cc:	2305      	movs	r3, #5
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	2300      	movs	r3, #0
 80153d2:	460a      	mov	r2, r1
 80153d4:	68f9      	ldr	r1, [r7, #12]
 80153d6:	2000      	movs	r0, #0
 80153d8:	47a0      	blx	r4
 80153da:	6178      	str	r0, [r7, #20]
 80153dc:	e011      	b.n	8015402 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80153de:	4b0d      	ldr	r3, [pc, #52]	; (8015414 <GetTimeOnAir+0x9c>)
 80153e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80153e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80153e6:	88bb      	ldrh	r3, [r7, #4]
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	2101      	movs	r1, #1
 80153ec:	9103      	str	r1, [sp, #12]
 80153ee:	9302      	str	r3, [sp, #8]
 80153f0:	2300      	movs	r3, #0
 80153f2:	9301      	str	r3, [sp, #4]
 80153f4:	2308      	movs	r3, #8
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	2301      	movs	r3, #1
 80153fa:	68f9      	ldr	r1, [r7, #12]
 80153fc:	2001      	movs	r0, #1
 80153fe:	47a0      	blx	r4
 8015400:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015402:	697b      	ldr	r3, [r7, #20]
}
 8015404:	4618      	mov	r0, r3
 8015406:	371c      	adds	r7, #28
 8015408:	46bd      	mov	sp, r7
 801540a:	bd90      	pop	{r4, r7, pc}
 801540c:	0801bed8 	.word	0x0801bed8
 8015410:	0801bee0 	.word	0x0801bee0
 8015414:	0801bf10 	.word	0x0801bf10

08015418 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b088      	sub	sp, #32
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015420:	2300      	movs	r3, #0
 8015422:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	3b01      	subs	r3, #1
 801542a:	2b38      	cmp	r3, #56	; 0x38
 801542c:	f200 8125 	bhi.w	801567a <RegionEU868GetPhyParam+0x262>
 8015430:	a201      	add	r2, pc, #4	; (adr r2, 8015438 <RegionEU868GetPhyParam+0x20>)
 8015432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015436:	bf00      	nop
 8015438:	0801551d 	.word	0x0801551d
 801543c:	08015523 	.word	0x08015523
 8015440:	0801567b 	.word	0x0801567b
 8015444:	0801567b 	.word	0x0801567b
 8015448:	0801567b 	.word	0x0801567b
 801544c:	08015529 	.word	0x08015529
 8015450:	0801567b 	.word	0x0801567b
 8015454:	08015561 	.word	0x08015561
 8015458:	0801567b 	.word	0x0801567b
 801545c:	08015567 	.word	0x08015567
 8015460:	0801556d 	.word	0x0801556d
 8015464:	08015573 	.word	0x08015573
 8015468:	08015579 	.word	0x08015579
 801546c:	08015589 	.word	0x08015589
 8015470:	08015599 	.word	0x08015599
 8015474:	0801559f 	.word	0x0801559f
 8015478:	080155a7 	.word	0x080155a7
 801547c:	080155af 	.word	0x080155af
 8015480:	080155b7 	.word	0x080155b7
 8015484:	080155bf 	.word	0x080155bf
 8015488:	080155c7 	.word	0x080155c7
 801548c:	080155cf 	.word	0x080155cf
 8015490:	080155e3 	.word	0x080155e3
 8015494:	080155e9 	.word	0x080155e9
 8015498:	080155ef 	.word	0x080155ef
 801549c:	080155f5 	.word	0x080155f5
 80154a0:	080155ff 	.word	0x080155ff
 80154a4:	08015609 	.word	0x08015609
 80154a8:	0801560f 	.word	0x0801560f
 80154ac:	08015617 	.word	0x08015617
 80154b0:	0801561d 	.word	0x0801561d
 80154b4:	08015623 	.word	0x08015623
 80154b8:	0801562b 	.word	0x0801562b
 80154bc:	0801552f 	.word	0x0801552f
 80154c0:	0801567b 	.word	0x0801567b
 80154c4:	0801567b 	.word	0x0801567b
 80154c8:	0801567b 	.word	0x0801567b
 80154cc:	0801567b 	.word	0x0801567b
 80154d0:	0801567b 	.word	0x0801567b
 80154d4:	0801567b 	.word	0x0801567b
 80154d8:	0801567b 	.word	0x0801567b
 80154dc:	0801567b 	.word	0x0801567b
 80154e0:	0801567b 	.word	0x0801567b
 80154e4:	0801567b 	.word	0x0801567b
 80154e8:	0801567b 	.word	0x0801567b
 80154ec:	0801567b 	.word	0x0801567b
 80154f0:	0801567b 	.word	0x0801567b
 80154f4:	08015631 	.word	0x08015631
 80154f8:	08015637 	.word	0x08015637
 80154fc:	08015645 	.word	0x08015645
 8015500:	0801567b 	.word	0x0801567b
 8015504:	0801567b 	.word	0x0801567b
 8015508:	0801564b 	.word	0x0801564b
 801550c:	08015651 	.word	0x08015651
 8015510:	0801567b 	.word	0x0801567b
 8015514:	08015657 	.word	0x08015657
 8015518:	08015667 	.word	0x08015667
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801551c:	2300      	movs	r3, #0
 801551e:	61bb      	str	r3, [r7, #24]
            break;
 8015520:	e0ac      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015522:	2300      	movs	r3, #0
 8015524:	61bb      	str	r3, [r7, #24]
            break;
 8015526:	e0a9      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015528:	2300      	movs	r3, #0
 801552a:	61bb      	str	r3, [r7, #24]
            break;
 801552c:	e0a6      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015534:	733b      	strb	r3, [r7, #12]
 8015536:	2307      	movs	r3, #7
 8015538:	737b      	strb	r3, [r7, #13]
 801553a:	2300      	movs	r3, #0
 801553c:	73bb      	strb	r3, [r7, #14]
 801553e:	2310      	movs	r3, #16
 8015540:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015542:	4b52      	ldr	r3, [pc, #328]	; (801568c <RegionEU868GetPhyParam+0x274>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015548:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801554a:	4b50      	ldr	r3, [pc, #320]	; (801568c <RegionEU868GetPhyParam+0x274>)
 801554c:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801554e:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015550:	f107 030c 	add.w	r3, r7, #12
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff fdd2 	bl	80150fe <RegionCommonGetNextLowerTxDr>
 801555a:	4603      	mov	r3, r0
 801555c:	61bb      	str	r3, [r7, #24]
            break;
 801555e:	e08d      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015560:	2300      	movs	r3, #0
 8015562:	61bb      	str	r3, [r7, #24]
            break;
 8015564:	e08a      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015566:	2300      	movs	r3, #0
 8015568:	61bb      	str	r3, [r7, #24]
            break;
 801556a:	e087      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	61bb      	str	r3, [r7, #24]
            break;
 8015570:	e084      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015572:	2320      	movs	r3, #32
 8015574:	61bb      	str	r3, [r7, #24]
            break;
 8015576:	e081      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801557e:	461a      	mov	r2, r3
 8015580:	4b43      	ldr	r3, [pc, #268]	; (8015690 <RegionEU868GetPhyParam+0x278>)
 8015582:	5c9b      	ldrb	r3, [r3, r2]
 8015584:	61bb      	str	r3, [r7, #24]
            break;
 8015586:	e079      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801558e:	461a      	mov	r2, r3
 8015590:	4b40      	ldr	r3, [pc, #256]	; (8015694 <RegionEU868GetPhyParam+0x27c>)
 8015592:	5c9b      	ldrb	r3, [r3, r2]
 8015594:	61bb      	str	r3, [r7, #24]
            break;
 8015596:	e071      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015598:	2301      	movs	r3, #1
 801559a:	61bb      	str	r3, [r7, #24]
            break;
 801559c:	e06e      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801559e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80155a2:	61bb      	str	r3, [r7, #24]
            break;
 80155a4:	e06a      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80155a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80155aa:	61bb      	str	r3, [r7, #24]
            break;
 80155ac:	e066      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80155ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80155b2:	61bb      	str	r3, [r7, #24]
            break;
 80155b4:	e062      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80155b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80155ba:	61bb      	str	r3, [r7, #24]
            break;
 80155bc:	e05e      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80155be:	f241 7370 	movw	r3, #6000	; 0x1770
 80155c2:	61bb      	str	r3, [r7, #24]
            break;
 80155c4:	e05a      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80155c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80155ca:	61bb      	str	r3, [r7, #24]
            break;
 80155cc:	e056      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80155ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155d2:	4831      	ldr	r0, [pc, #196]	; (8015698 <RegionEU868GetPhyParam+0x280>)
 80155d4:	f001 f874 	bl	80166c0 <randr>
 80155d8:	4603      	mov	r3, r0
 80155da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80155de:	61bb      	str	r3, [r7, #24]
            break;
 80155e0:	e04c      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80155e2:	2300      	movs	r3, #0
 80155e4:	61bb      	str	r3, [r7, #24]
            break;
 80155e6:	e049      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80155e8:	4b2c      	ldr	r3, [pc, #176]	; (801569c <RegionEU868GetPhyParam+0x284>)
 80155ea:	61bb      	str	r3, [r7, #24]
            break;
 80155ec:	e046      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80155ee:	2300      	movs	r3, #0
 80155f0:	61bb      	str	r3, [r7, #24]
            break;
 80155f2:	e043      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80155f4:	4b25      	ldr	r3, [pc, #148]	; (801568c <RegionEU868GetPhyParam+0x274>)
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	33c0      	adds	r3, #192	; 0xc0
 80155fa:	61bb      	str	r3, [r7, #24]
            break;
 80155fc:	e03e      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80155fe:	4b23      	ldr	r3, [pc, #140]	; (801568c <RegionEU868GetPhyParam+0x274>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	33c2      	adds	r3, #194	; 0xc2
 8015604:	61bb      	str	r3, [r7, #24]
            break;
 8015606:	e039      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015608:	2310      	movs	r3, #16
 801560a:	61bb      	str	r3, [r7, #24]
            break;
 801560c:	e036      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801560e:	4b1f      	ldr	r3, [pc, #124]	; (801568c <RegionEU868GetPhyParam+0x274>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	61bb      	str	r3, [r7, #24]
            break;
 8015614:	e032      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015616:	2300      	movs	r3, #0
 8015618:	61bb      	str	r3, [r7, #24]
            break;
 801561a:	e02f      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801561c:	2300      	movs	r3, #0
 801561e:	61bb      	str	r3, [r7, #24]
            break;
 8015620:	e02c      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015622:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8015626:	61bb      	str	r3, [r7, #24]
            break;
 8015628:	e028      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801562a:	4b1d      	ldr	r3, [pc, #116]	; (80156a0 <RegionEU868GetPhyParam+0x288>)
 801562c:	61bb      	str	r3, [r7, #24]
            break;
 801562e:	e025      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015630:	4b1a      	ldr	r3, [pc, #104]	; (801569c <RegionEU868GetPhyParam+0x284>)
 8015632:	61bb      	str	r3, [r7, #24]
            break;
 8015634:	e022      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015636:	2311      	movs	r3, #17
 8015638:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801563a:	2302      	movs	r3, #2
 801563c:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801563e:	2300      	movs	r3, #0
 8015640:	76bb      	strb	r3, [r7, #26]
            break;
 8015642:	e01b      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015644:	2303      	movs	r3, #3
 8015646:	61bb      	str	r3, [r7, #24]
            break;
 8015648:	e018      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801564a:	4b14      	ldr	r3, [pc, #80]	; (801569c <RegionEU868GetPhyParam+0x284>)
 801564c:	61bb      	str	r3, [r7, #24]
            break;
 801564e:	e015      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015650:	2303      	movs	r3, #3
 8015652:	61bb      	str	r3, [r7, #24]
            break;
 8015654:	e012      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801565c:	461a      	mov	r2, r3
 801565e:	4b11      	ldr	r3, [pc, #68]	; (80156a4 <RegionEU868GetPhyParam+0x28c>)
 8015660:	5c9b      	ldrb	r3, [r3, r2]
 8015662:	61bb      	str	r3, [r7, #24]
            break;
 8015664:	e00a      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801566c:	490e      	ldr	r1, [pc, #56]	; (80156a8 <RegionEU868GetPhyParam+0x290>)
 801566e:	4618      	mov	r0, r3
 8015670:	f7ff fd98 	bl	80151a4 <RegionCommonGetBandwidth>
 8015674:	4603      	mov	r3, r0
 8015676:	61bb      	str	r3, [r7, #24]
            break;
 8015678:	e000      	b.n	801567c <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 801567a:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801567c:	69bb      	ldr	r3, [r7, #24]
 801567e:	61fb      	str	r3, [r7, #28]
 8015680:	2300      	movs	r3, #0
 8015682:	69fb      	ldr	r3, [r7, #28]
}
 8015684:	4618      	mov	r0, r3
 8015686:	3720      	adds	r7, #32
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}
 801568c:	20000ecc 	.word	0x20000ecc
 8015690:	0801bf00 	.word	0x0801bf00
 8015694:	0801bf08 	.word	0x0801bf08
 8015698:	fffffc18 	.word	0xfffffc18
 801569c:	33d3e608 	.word	0x33d3e608
 80156a0:	4009999a 	.word	0x4009999a
 80156a4:	0801bed8 	.word	0x0801bed8
 80156a8:	0801bee0 	.word	0x0801bee0

080156ac <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80156ac:	b590      	push	{r4, r7, lr}
 80156ae:	b085      	sub	sp, #20
 80156b0:	af02      	add	r7, sp, #8
 80156b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80156b4:	4b11      	ldr	r3, [pc, #68]	; (80156fc <RegionEU868SetBandTxDone+0x50>)
 80156b6:	681a      	ldr	r2, [r3, #0]
 80156b8:	4b11      	ldr	r3, [pc, #68]	; (8015700 <RegionEU868SetBandTxDone+0x54>)
 80156ba:	6819      	ldr	r1, [r3, #0]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	4618      	mov	r0, r3
 80156c2:	4603      	mov	r3, r0
 80156c4:	005b      	lsls	r3, r3, #1
 80156c6:	4403      	add	r3, r0
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	440b      	add	r3, r1
 80156cc:	3309      	adds	r3, #9
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	4619      	mov	r1, r3
 80156d2:	460b      	mov	r3, r1
 80156d4:	005b      	lsls	r3, r3, #1
 80156d6:	440b      	add	r3, r1
 80156d8:	00db      	lsls	r3, r3, #3
 80156da:	18d0      	adds	r0, r2, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6899      	ldr	r1, [r3, #8]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	785c      	ldrb	r4, [r3, #1]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	691a      	ldr	r2, [r3, #16]
 80156e8:	9200      	str	r2, [sp, #0]
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	4622      	mov	r2, r4
 80156ee:	f7ff f8ef 	bl	80148d0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80156f2:	bf00      	nop
 80156f4:	370c      	adds	r7, #12
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd90      	pop	{r4, r7, pc}
 80156fa:	bf00      	nop
 80156fc:	20000ec8 	.word	0x20000ec8
 8015700:	20000ecc 	.word	0x20000ecc

08015704 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b0b0      	sub	sp, #192	; 0xc0
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801570c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015710:	2290      	movs	r2, #144	; 0x90
 8015712:	2100      	movs	r1, #0
 8015714:	4618      	mov	r0, r3
 8015716:	f005 fcc9 	bl	801b0ac <memset>
 801571a:	2364      	movs	r3, #100	; 0x64
 801571c:	863b      	strh	r3, [r7, #48]	; 0x30
 801571e:	2364      	movs	r3, #100	; 0x64
 8015720:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015728:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801572c:	230a      	movs	r3, #10
 801572e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015732:	2364      	movs	r3, #100	; 0x64
 8015734:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801573c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	7a1b      	ldrb	r3, [r3, #8]
 8015744:	2b02      	cmp	r3, #2
 8015746:	d05c      	beq.n	8015802 <RegionEU868InitDefaults+0xfe>
 8015748:	2b02      	cmp	r3, #2
 801574a:	dc69      	bgt.n	8015820 <RegionEU868InitDefaults+0x11c>
 801574c:	2b00      	cmp	r3, #0
 801574e:	d002      	beq.n	8015756 <RegionEU868InitDefaults+0x52>
 8015750:	2b01      	cmp	r3, #1
 8015752:	d03e      	beq.n	80157d2 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015754:	e064      	b.n	8015820 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d061      	beq.n	8015822 <RegionEU868InitDefaults+0x11e>
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d05d      	beq.n	8015822 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	4a2f      	ldr	r2, [pc, #188]	; (8015828 <RegionEU868InitDefaults+0x124>)
 801576c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	4a2e      	ldr	r2, [pc, #184]	; (801582c <RegionEU868InitDefaults+0x128>)
 8015774:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015776:	4b2c      	ldr	r3, [pc, #176]	; (8015828 <RegionEU868InitDefaults+0x124>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4618      	mov	r0, r3
 801577c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015780:	2290      	movs	r2, #144	; 0x90
 8015782:	4619      	mov	r1, r3
 8015784:	f000 ffb3 	bl	80166ee <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015788:	4b28      	ldr	r3, [pc, #160]	; (801582c <RegionEU868InitDefaults+0x128>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	4a28      	ldr	r2, [pc, #160]	; (8015830 <RegionEU868InitDefaults+0x12c>)
 801578e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015794:	4b25      	ldr	r3, [pc, #148]	; (801582c <RegionEU868InitDefaults+0x128>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	4a26      	ldr	r2, [pc, #152]	; (8015834 <RegionEU868InitDefaults+0x130>)
 801579a:	330c      	adds	r3, #12
 801579c:	ca07      	ldmia	r2, {r0, r1, r2}
 801579e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80157a2:	4b22      	ldr	r3, [pc, #136]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	4a24      	ldr	r2, [pc, #144]	; (8015838 <RegionEU868InitDefaults+0x134>)
 80157a8:	3318      	adds	r3, #24
 80157aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80157ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80157b0:	4b1e      	ldr	r3, [pc, #120]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	2207      	movs	r2, #7
 80157b6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80157ba:	4b1c      	ldr	r3, [pc, #112]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157c2:	4b1a      	ldr	r3, [pc, #104]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	33c2      	adds	r3, #194	; 0xc2
 80157c8:	2201      	movs	r2, #1
 80157ca:	4619      	mov	r1, r3
 80157cc:	f7ff f85a 	bl	8014884 <RegionCommonChanMaskCopy>
 80157d0:	e027      	b.n	8015822 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80157d2:	4b16      	ldr	r3, [pc, #88]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	2200      	movs	r2, #0
 80157d8:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80157da:	4b14      	ldr	r3, [pc, #80]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2200      	movs	r2, #0
 80157e0:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80157e2:	4b12      	ldr	r3, [pc, #72]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	2200      	movs	r2, #0
 80157e8:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80157ea:	4b10      	ldr	r3, [pc, #64]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157f2:	4b0e      	ldr	r3, [pc, #56]	; (801582c <RegionEU868InitDefaults+0x128>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	33c2      	adds	r3, #194	; 0xc2
 80157f8:	2201      	movs	r2, #1
 80157fa:	4619      	mov	r1, r3
 80157fc:	f7ff f842 	bl	8014884 <RegionCommonChanMaskCopy>
            break;
 8015800:	e00f      	b.n	8015822 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015802:	4b0a      	ldr	r3, [pc, #40]	; (801582c <RegionEU868InitDefaults+0x128>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 801580a:	4b08      	ldr	r3, [pc, #32]	; (801582c <RegionEU868InitDefaults+0x128>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8015812:	4b06      	ldr	r3, [pc, #24]	; (801582c <RegionEU868InitDefaults+0x128>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	430a      	orrs	r2, r1
 8015818:	b292      	uxth	r2, r2
 801581a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 801581e:	e000      	b.n	8015822 <RegionEU868InitDefaults+0x11e>
            break;
 8015820:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015822:	37c0      	adds	r7, #192	; 0xc0
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}
 8015828:	20000ec8 	.word	0x20000ec8
 801582c:	20000ecc 	.word	0x20000ecc
 8015830:	0801b968 	.word	0x0801b968
 8015834:	0801b974 	.word	0x0801b974
 8015838:	0801b980 	.word	0x0801b980

0801583c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	460b      	mov	r3, r1
 8015846:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015848:	78fb      	ldrb	r3, [r7, #3]
 801584a:	2b0f      	cmp	r3, #15
 801584c:	d86c      	bhi.n	8015928 <RegionEU868Verify+0xec>
 801584e:	a201      	add	r2, pc, #4	; (adr r2, 8015854 <RegionEU868Verify+0x18>)
 8015850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015854:	08015895 	.word	0x08015895
 8015858:	08015929 	.word	0x08015929
 801585c:	08015929 	.word	0x08015929
 8015860:	08015929 	.word	0x08015929
 8015864:	08015929 	.word	0x08015929
 8015868:	080158ad 	.word	0x080158ad
 801586c:	080158cb 	.word	0x080158cb
 8015870:	080158e9 	.word	0x080158e9
 8015874:	08015929 	.word	0x08015929
 8015878:	08015907 	.word	0x08015907
 801587c:	08015907 	.word	0x08015907
 8015880:	08015929 	.word	0x08015929
 8015884:	08015929 	.word	0x08015929
 8015888:	08015929 	.word	0x08015929
 801588c:	08015929 	.word	0x08015929
 8015890:	08015925 	.word	0x08015925
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015894:	2300      	movs	r3, #0
 8015896:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	f107 020f 	add.w	r2, r7, #15
 80158a0:	4611      	mov	r1, r2
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7ff fcf2 	bl	801528c <VerifyRfFreq>
 80158a8:	4603      	mov	r3, r0
 80158aa:	e03e      	b.n	801592a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f993 3000 	ldrsb.w	r3, [r3]
 80158b2:	2207      	movs	r2, #7
 80158b4:	2100      	movs	r1, #0
 80158b6:	4618      	mov	r0, r3
 80158b8:	f7fe ff67 	bl	801478a <RegionCommonValueInRange>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	bf14      	ite	ne
 80158c2:	2301      	movne	r3, #1
 80158c4:	2300      	moveq	r3, #0
 80158c6:	b2db      	uxtb	r3, r3
 80158c8:	e02f      	b.n	801592a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f993 3000 	ldrsb.w	r3, [r3]
 80158d0:	2205      	movs	r2, #5
 80158d2:	2100      	movs	r1, #0
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7fe ff58 	bl	801478a <RegionCommonValueInRange>
 80158da:	4603      	mov	r3, r0
 80158dc:	2b00      	cmp	r3, #0
 80158de:	bf14      	ite	ne
 80158e0:	2301      	movne	r3, #1
 80158e2:	2300      	moveq	r3, #0
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	e020      	b.n	801592a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f993 3000 	ldrsb.w	r3, [r3]
 80158ee:	2207      	movs	r2, #7
 80158f0:	2100      	movs	r1, #0
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fe ff49 	bl	801478a <RegionCommonValueInRange>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	bf14      	ite	ne
 80158fe:	2301      	movne	r3, #1
 8015900:	2300      	moveq	r3, #0
 8015902:	b2db      	uxtb	r3, r3
 8015904:	e011      	b.n	801592a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f993 3000 	ldrsb.w	r3, [r3]
 801590c:	2207      	movs	r2, #7
 801590e:	2100      	movs	r1, #0
 8015910:	4618      	mov	r0, r3
 8015912:	f7fe ff3a 	bl	801478a <RegionCommonValueInRange>
 8015916:	4603      	mov	r3, r0
 8015918:	2b00      	cmp	r3, #0
 801591a:	bf14      	ite	ne
 801591c:	2301      	movne	r3, #1
 801591e:	2300      	moveq	r3, #0
 8015920:	b2db      	uxtb	r3, r3
 8015922:	e002      	b.n	801592a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015924:	2301      	movs	r3, #1
 8015926:	e000      	b.n	801592a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015928:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801592a:	4618      	mov	r0, r3
 801592c:	3710      	adds	r7, #16
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
 8015932:	bf00      	nop

08015934 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b08a      	sub	sp, #40	; 0x28
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801593c:	2350      	movs	r3, #80	; 0x50
 801593e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	791b      	ldrb	r3, [r3, #4]
 8015946:	2b10      	cmp	r3, #16
 8015948:	d162      	bne.n	8015a10 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	330f      	adds	r3, #15
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d15e      	bne.n	8015a14 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015956:	2300      	movs	r3, #0
 8015958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801595c:	2303      	movs	r3, #3
 801595e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015962:	e050      	b.n	8015a06 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015968:	2b07      	cmp	r3, #7
 801596a:	d824      	bhi.n	80159b6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681a      	ldr	r2, [r3, #0]
 8015970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015974:	4413      	add	r3, r2
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801597a:	69ba      	ldr	r2, [r7, #24]
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6819      	ldr	r1, [r3, #0]
 8015980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015984:	3301      	adds	r3, #1
 8015986:	440b      	add	r3, r1
 8015988:	781b      	ldrb	r3, [r3, #0]
 801598a:	021b      	lsls	r3, r3, #8
 801598c:	4313      	orrs	r3, r2
 801598e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015990:	69ba      	ldr	r2, [r7, #24]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6819      	ldr	r1, [r3, #0]
 8015996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801599a:	3302      	adds	r3, #2
 801599c:	440b      	add	r3, r1
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	041b      	lsls	r3, r3, #16
 80159a2:	4313      	orrs	r3, r2
 80159a4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	2264      	movs	r2, #100	; 0x64
 80159aa:	fb02 f303 	mul.w	r3, r2, r3
 80159ae:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80159b0:	2300      	movs	r3, #0
 80159b2:	61fb      	str	r3, [r7, #28]
 80159b4:	e006      	b.n	80159c4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80159b6:	2300      	movs	r3, #0
 80159b8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80159ba:	2300      	movs	r3, #0
 80159bc:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80159c0:	2300      	movs	r3, #0
 80159c2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00b      	beq.n	80159e2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80159ca:	f107 0318 	add.w	r3, r7, #24
 80159ce:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80159d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159d4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80159d6:	f107 0310 	add.w	r3, r7, #16
 80159da:	4618      	mov	r0, r3
 80159dc:	f000 fd0e 	bl	80163fc <RegionEU868ChannelAdd>
 80159e0:	e007      	b.n	80159f2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80159e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80159e6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80159e8:	f107 030c 	add.w	r3, r7, #12
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 fda7 	bl	8016540 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80159f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159f6:	3303      	adds	r3, #3
 80159f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a00:	3301      	adds	r3, #1
 8015a02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015a0a:	2b0f      	cmp	r3, #15
 8015a0c:	d9aa      	bls.n	8015964 <RegionEU868ApplyCFList+0x30>
 8015a0e:	e002      	b.n	8015a16 <RegionEU868ApplyCFList+0xe2>
        return;
 8015a10:	bf00      	nop
 8015a12:	e000      	b.n	8015a16 <RegionEU868ApplyCFList+0xe2>
        return;
 8015a14:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015a16:	3728      	adds	r7, #40	; 0x28
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	791b      	ldrb	r3, [r3, #4]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d002      	beq.n	8015a32 <RegionEU868ChanMaskSet+0x16>
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d00b      	beq.n	8015a48 <RegionEU868ChanMaskSet+0x2c>
 8015a30:	e015      	b.n	8015a5e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a32:	4b0e      	ldr	r3, [pc, #56]	; (8015a6c <RegionEU868ChanMaskSet+0x50>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	2201      	movs	r2, #1
 8015a40:	4619      	mov	r1, r3
 8015a42:	f7fe ff1f 	bl	8014884 <RegionCommonChanMaskCopy>
            break;
 8015a46:	e00c      	b.n	8015a62 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015a48:	4b08      	ldr	r3, [pc, #32]	; (8015a6c <RegionEU868ChanMaskSet+0x50>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2201      	movs	r2, #1
 8015a56:	4619      	mov	r1, r3
 8015a58:	f7fe ff14 	bl	8014884 <RegionCommonChanMaskCopy>
            break;
 8015a5c:	e001      	b.n	8015a62 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e000      	b.n	8015a64 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015a62:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3708      	adds	r7, #8
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}
 8015a6c:	20000ecc 	.word	0x20000ecc

08015a70 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b088      	sub	sp, #32
 8015a74:	af02      	add	r7, sp, #8
 8015a76:	60ba      	str	r2, [r7, #8]
 8015a78:	607b      	str	r3, [r7, #4]
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	73fb      	strb	r3, [r7, #15]
 8015a7e:	460b      	mov	r3, r1
 8015a80:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015a82:	2300      	movs	r3, #0
 8015a84:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a8a:	2b07      	cmp	r3, #7
 8015a8c:	bfa8      	it	ge
 8015a8e:	2307      	movge	r3, #7
 8015a90:	b25a      	sxtb	r2, r3
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a9c:	491e      	ldr	r1, [pc, #120]	; (8015b18 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7ff fb80 	bl	80151a4 <RegionCommonGetBandwidth>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	b2da      	uxtb	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab2:	2b07      	cmp	r3, #7
 8015ab4:	d10a      	bne.n	8015acc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015abc:	461a      	mov	r2, r3
 8015abe:	4b17      	ldr	r3, [pc, #92]	; (8015b1c <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ac0:	5c9b      	ldrb	r3, [r3, r2]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7ff f902 	bl	8014ccc <RegionCommonComputeSymbolTimeFsk>
 8015ac8:	6178      	str	r0, [r7, #20]
 8015aca:	e011      	b.n	8015af0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ad2:	461a      	mov	r2, r3
 8015ad4:	4b11      	ldr	r3, [pc, #68]	; (8015b1c <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ad6:	5c9a      	ldrb	r2, [r3, r2]
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	4b0d      	ldr	r3, [pc, #52]	; (8015b18 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015ae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	4610      	mov	r0, r2
 8015aea:	f7ff f8d9 	bl	8014ca0 <RegionCommonComputeSymbolTimeLoRa>
 8015aee:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015af0:	4b0b      	ldr	r3, [pc, #44]	; (8015b20 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015af4:	4798      	blx	r3
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	3308      	adds	r3, #8
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	320c      	adds	r2, #12
 8015afe:	7bb9      	ldrb	r1, [r7, #14]
 8015b00:	9201      	str	r2, [sp, #4]
 8015b02:	9300      	str	r3, [sp, #0]
 8015b04:	4603      	mov	r3, r0
 8015b06:	68ba      	ldr	r2, [r7, #8]
 8015b08:	6978      	ldr	r0, [r7, #20]
 8015b0a:	f7ff f8ef 	bl	8014cec <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015b0e:	bf00      	nop
 8015b10:	3718      	adds	r7, #24
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	0801bee0 	.word	0x0801bee0
 8015b1c:	0801bed8 	.word	0x0801bed8
 8015b20:	0801bf10 	.word	0x0801bf10

08015b24 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015b24:	b5b0      	push	{r4, r5, r7, lr}
 8015b26:	b090      	sub	sp, #64	; 0x40
 8015b28:	af0a      	add	r7, sp, #40	; 0x28
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	785b      	ldrb	r3, [r3, #1]
 8015b32:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015b34:	2300      	movs	r3, #0
 8015b36:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015b42:	4b5a      	ldr	r3, [pc, #360]	; (8015cac <RegionEU868RxConfig+0x188>)
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	4798      	blx	r3
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d001      	beq.n	8015b52 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e0a8      	b.n	8015ca4 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	7cdb      	ldrb	r3, [r3, #19]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d126      	bne.n	8015ba8 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015b5a:	4b55      	ldr	r3, [pc, #340]	; (8015cb0 <RegionEU868RxConfig+0x18c>)
 8015b5c:	681a      	ldr	r2, [r3, #0]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	4619      	mov	r1, r3
 8015b64:	460b      	mov	r3, r1
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	440b      	add	r3, r1
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	4413      	add	r3, r2
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015b72:	4b4f      	ldr	r3, [pc, #316]	; (8015cb0 <RegionEU868RxConfig+0x18c>)
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	005b      	lsls	r3, r3, #1
 8015b80:	440b      	add	r3, r1
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	4413      	add	r3, r2
 8015b86:	3304      	adds	r3, #4
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d00c      	beq.n	8015ba8 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015b8e:	4b48      	ldr	r3, [pc, #288]	; (8015cb0 <RegionEU868RxConfig+0x18c>)
 8015b90:	681a      	ldr	r2, [r3, #0]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	781b      	ldrb	r3, [r3, #0]
 8015b96:	4619      	mov	r1, r3
 8015b98:	460b      	mov	r3, r1
 8015b9a:	005b      	lsls	r3, r3, #1
 8015b9c:	440b      	add	r3, r1
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	4413      	add	r3, r2
 8015ba2:	3304      	adds	r3, #4
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bac:	4a41      	ldr	r2, [pc, #260]	; (8015cb4 <RegionEU868RxConfig+0x190>)
 8015bae:	5cd3      	ldrb	r3, [r2, r3]
 8015bb0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015bb2:	4b3e      	ldr	r3, [pc, #248]	; (8015cac <RegionEU868RxConfig+0x188>)
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	6938      	ldr	r0, [r7, #16]
 8015bb8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bbe:	2b07      	cmp	r3, #7
 8015bc0:	d128      	bne.n	8015c14 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015bc6:	4b39      	ldr	r3, [pc, #228]	; (8015cac <RegionEU868RxConfig+0x188>)
 8015bc8:	699c      	ldr	r4, [r3, #24]
 8015bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015bd2:	fb02 f303 	mul.w	r3, r2, r3
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	689b      	ldr	r3, [r3, #8]
 8015bdc:	b29b      	uxth	r3, r3
 8015bde:	687a      	ldr	r2, [r7, #4]
 8015be0:	7c92      	ldrb	r2, [r2, #18]
 8015be2:	7df8      	ldrb	r0, [r7, #23]
 8015be4:	9209      	str	r2, [sp, #36]	; 0x24
 8015be6:	2200      	movs	r2, #0
 8015be8:	9208      	str	r2, [sp, #32]
 8015bea:	2200      	movs	r2, #0
 8015bec:	9207      	str	r2, [sp, #28]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	9206      	str	r2, [sp, #24]
 8015bf2:	2201      	movs	r2, #1
 8015bf4:	9205      	str	r2, [sp, #20]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	9204      	str	r2, [sp, #16]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	9203      	str	r2, [sp, #12]
 8015bfe:	9302      	str	r3, [sp, #8]
 8015c00:	2305      	movs	r3, #5
 8015c02:	9301      	str	r3, [sp, #4]
 8015c04:	4b2c      	ldr	r3, [pc, #176]	; (8015cb8 <RegionEU868RxConfig+0x194>)
 8015c06:	9300      	str	r3, [sp, #0]
 8015c08:	2300      	movs	r3, #0
 8015c0a:	460a      	mov	r2, r1
 8015c0c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015c10:	47a0      	blx	r4
 8015c12:	e024      	b.n	8015c5e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015c14:	2301      	movs	r3, #1
 8015c16:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015c18:	4b24      	ldr	r3, [pc, #144]	; (8015cac <RegionEU868RxConfig+0x188>)
 8015c1a:	699c      	ldr	r4, [r3, #24]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	789b      	ldrb	r3, [r3, #2]
 8015c20:	461d      	mov	r5, r3
 8015c22:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	689b      	ldr	r3, [r3, #8]
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	7c92      	ldrb	r2, [r2, #18]
 8015c30:	7df8      	ldrb	r0, [r7, #23]
 8015c32:	9209      	str	r2, [sp, #36]	; 0x24
 8015c34:	2201      	movs	r2, #1
 8015c36:	9208      	str	r2, [sp, #32]
 8015c38:	2200      	movs	r2, #0
 8015c3a:	9207      	str	r2, [sp, #28]
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	9206      	str	r2, [sp, #24]
 8015c40:	2200      	movs	r2, #0
 8015c42:	9205      	str	r2, [sp, #20]
 8015c44:	2200      	movs	r2, #0
 8015c46:	9204      	str	r2, [sp, #16]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	9203      	str	r2, [sp, #12]
 8015c4c:	9302      	str	r3, [sp, #8]
 8015c4e:	2308      	movs	r3, #8
 8015c50:	9301      	str	r3, [sp, #4]
 8015c52:	2300      	movs	r3, #0
 8015c54:	9300      	str	r3, [sp, #0]
 8015c56:	2301      	movs	r3, #1
 8015c58:	460a      	mov	r2, r1
 8015c5a:	4629      	mov	r1, r5
 8015c5c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	7c5b      	ldrb	r3, [r3, #17]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d005      	beq.n	8015c72 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c6a:	4a14      	ldr	r2, [pc, #80]	; (8015cbc <RegionEU868RxConfig+0x198>)
 8015c6c:	5cd3      	ldrb	r3, [r2, r3]
 8015c6e:	75bb      	strb	r3, [r7, #22]
 8015c70:	e004      	b.n	8015c7c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c76:	4a12      	ldr	r2, [pc, #72]	; (8015cc0 <RegionEU868RxConfig+0x19c>)
 8015c78:	5cd3      	ldrb	r3, [r2, r3]
 8015c7a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015c7c:	4b0b      	ldr	r3, [pc, #44]	; (8015cac <RegionEU868RxConfig+0x188>)
 8015c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c80:	7dba      	ldrb	r2, [r7, #22]
 8015c82:	320d      	adds	r2, #13
 8015c84:	b2d1      	uxtb	r1, r2
 8015c86:	7dfa      	ldrb	r2, [r7, #23]
 8015c88:	4610      	mov	r0, r2
 8015c8a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	7cdb      	ldrb	r3, [r3, #19]
 8015c90:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015c94:	6939      	ldr	r1, [r7, #16]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7ff faa2 	bl	80151e0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015c9c:	683b      	ldr	r3, [r7, #0]
 8015c9e:	7bfa      	ldrb	r2, [r7, #15]
 8015ca0:	701a      	strb	r2, [r3, #0]
    return true;
 8015ca2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3718      	adds	r7, #24
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bdb0      	pop	{r4, r5, r7, pc}
 8015cac:	0801bf10 	.word	0x0801bf10
 8015cb0:	20000ecc 	.word	0x20000ecc
 8015cb4:	0801bed8 	.word	0x0801bed8
 8015cb8:	00014585 	.word	0x00014585
 8015cbc:	0801bf08 	.word	0x0801bf08
 8015cc0:	0801bf00 	.word	0x0801bf00

08015cc4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015cc4:	b590      	push	{r4, r7, lr}
 8015cc6:	b093      	sub	sp, #76	; 0x4c
 8015cc8:	af0a      	add	r7, sp, #40	; 0x28
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	4b5d      	ldr	r3, [pc, #372]	; (8015e50 <RegionEU868TxConfig+0x18c>)
 8015cda:	5c9b      	ldrb	r3, [r3, r2]
 8015cdc:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015ce4:	4b5b      	ldr	r3, [pc, #364]	; (8015e54 <RegionEU868TxConfig+0x190>)
 8015ce6:	681a      	ldr	r2, [r3, #0]
 8015ce8:	4b5b      	ldr	r3, [pc, #364]	; (8015e58 <RegionEU868TxConfig+0x194>)
 8015cea:	6819      	ldr	r1, [r3, #0]
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	781b      	ldrb	r3, [r3, #0]
 8015cf0:	461c      	mov	r4, r3
 8015cf2:	4623      	mov	r3, r4
 8015cf4:	005b      	lsls	r3, r3, #1
 8015cf6:	4423      	add	r3, r4
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	440b      	add	r3, r1
 8015cfc:	3309      	adds	r3, #9
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	4619      	mov	r1, r3
 8015d02:	460b      	mov	r3, r1
 8015d04:	005b      	lsls	r3, r3, #1
 8015d06:	440b      	add	r3, r1
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	4413      	add	r3, r2
 8015d0c:	3302      	adds	r3, #2
 8015d0e:	f993 3000 	ldrsb.w	r3, [r3]
 8015d12:	4619      	mov	r1, r3
 8015d14:	f7ff fa31 	bl	801517a <RegionCommonLimitTxPower>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d22:	494e      	ldr	r1, [pc, #312]	; (8015e5c <RegionEU868TxConfig+0x198>)
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7ff fa3d 	bl	80151a4 <RegionCommonGetBandwidth>
 8015d2a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	6859      	ldr	r1, [r3, #4]
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	689a      	ldr	r2, [r3, #8]
 8015d38:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7ff f88d 	bl	8014e5c <RegionCommonComputeTxPower>
 8015d42:	4603      	mov	r3, r0
 8015d44:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015d46:	4b46      	ldr	r3, [pc, #280]	; (8015e60 <RegionEU868TxConfig+0x19c>)
 8015d48:	68da      	ldr	r2, [r3, #12]
 8015d4a:	4b43      	ldr	r3, [pc, #268]	; (8015e58 <RegionEU868TxConfig+0x194>)
 8015d4c:	6819      	ldr	r1, [r3, #0]
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	4618      	mov	r0, r3
 8015d54:	4603      	mov	r3, r0
 8015d56:	005b      	lsls	r3, r3, #1
 8015d58:	4403      	add	r3, r0
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	440b      	add	r3, r1
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	4618      	mov	r0, r3
 8015d62:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d6a:	2b07      	cmp	r3, #7
 8015d6c:	d124      	bne.n	8015db8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015d72:	4b3b      	ldr	r3, [pc, #236]	; (8015e60 <RegionEU868TxConfig+0x19c>)
 8015d74:	69dc      	ldr	r4, [r3, #28]
 8015d76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d7e:	fb02 f303 	mul.w	r3, r2, r3
 8015d82:	461a      	mov	r2, r3
 8015d84:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015d88:	7ff8      	ldrb	r0, [r7, #31]
 8015d8a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015d8e:	9308      	str	r3, [sp, #32]
 8015d90:	2300      	movs	r3, #0
 8015d92:	9307      	str	r3, [sp, #28]
 8015d94:	2300      	movs	r3, #0
 8015d96:	9306      	str	r3, [sp, #24]
 8015d98:	2300      	movs	r3, #0
 8015d9a:	9305      	str	r3, [sp, #20]
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	9304      	str	r3, [sp, #16]
 8015da0:	2300      	movs	r3, #0
 8015da2:	9303      	str	r3, [sp, #12]
 8015da4:	2305      	movs	r3, #5
 8015da6:	9302      	str	r3, [sp, #8]
 8015da8:	2300      	movs	r3, #0
 8015daa:	9301      	str	r3, [sp, #4]
 8015dac:	9200      	str	r2, [sp, #0]
 8015dae:	69bb      	ldr	r3, [r7, #24]
 8015db0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015db4:	47a0      	blx	r4
 8015db6:	e01d      	b.n	8015df4 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015db8:	2301      	movs	r3, #1
 8015dba:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015dbc:	4b28      	ldr	r3, [pc, #160]	; (8015e60 <RegionEU868TxConfig+0x19c>)
 8015dbe:	69dc      	ldr	r4, [r3, #28]
 8015dc0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015dc4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015dc8:	7ff8      	ldrb	r0, [r7, #31]
 8015dca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015dce:	9208      	str	r2, [sp, #32]
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	9207      	str	r2, [sp, #28]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	9206      	str	r2, [sp, #24]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	9205      	str	r2, [sp, #20]
 8015ddc:	2201      	movs	r2, #1
 8015dde:	9204      	str	r2, [sp, #16]
 8015de0:	2200      	movs	r2, #0
 8015de2:	9203      	str	r2, [sp, #12]
 8015de4:	2208      	movs	r2, #8
 8015de6:	9202      	str	r2, [sp, #8]
 8015de8:	2201      	movs	r2, #1
 8015dea:	9201      	str	r2, [sp, #4]
 8015dec:	9300      	str	r3, [sp, #0]
 8015dee:	69bb      	ldr	r3, [r7, #24]
 8015df0:	2200      	movs	r2, #0
 8015df2:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015df4:	4b18      	ldr	r3, [pc, #96]	; (8015e58 <RegionEU868TxConfig+0x194>)
 8015df6:	681a      	ldr	r2, [r3, #0]
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	460b      	mov	r3, r1
 8015e00:	005b      	lsls	r3, r3, #1
 8015e02:	440b      	add	r3, r1
 8015e04:	009b      	lsls	r3, r3, #2
 8015e06:	4413      	add	r3, r2
 8015e08:	681a      	ldr	r2, [r3, #0]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e10:	4619      	mov	r1, r3
 8015e12:	4610      	mov	r0, r2
 8015e14:	f7ff fa22 	bl	801525c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	899b      	ldrh	r3, [r3, #12]
 8015e22:	4619      	mov	r1, r3
 8015e24:	4610      	mov	r0, r2
 8015e26:	f7ff faa7 	bl	8015378 <GetTimeOnAir>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015e30:	4b0b      	ldr	r3, [pc, #44]	; (8015e60 <RegionEU868TxConfig+0x19c>)
 8015e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e34:	68fa      	ldr	r2, [r7, #12]
 8015e36:	8992      	ldrh	r2, [r2, #12]
 8015e38:	b2d1      	uxtb	r1, r2
 8015e3a:	7ffa      	ldrb	r2, [r7, #31]
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	7f7a      	ldrb	r2, [r7, #29]
 8015e44:	701a      	strb	r2, [r3, #0]
    return true;
 8015e46:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3724      	adds	r7, #36	; 0x24
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd90      	pop	{r4, r7, pc}
 8015e50:	0801bed8 	.word	0x0801bed8
 8015e54:	20000ec8 	.word	0x20000ec8
 8015e58:	20000ecc 	.word	0x20000ecc
 8015e5c:	0801bee0 	.word	0x0801bee0
 8015e60:	0801bf10 	.word	0x0801bf10

08015e64 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015e64:	b590      	push	{r4, r7, lr}
 8015e66:	b093      	sub	sp, #76	; 0x4c
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	607a      	str	r2, [r7, #4]
 8015e70:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015e72:	2307      	movs	r3, #7
 8015e74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015e78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	601a      	str	r2, [r3, #0]
 8015e80:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015e82:	2300      	movs	r3, #0
 8015e84:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015e88:	2300      	movs	r3, #0
 8015e8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015e92:	e085      	b.n	8015fa0 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	685a      	ldr	r2, [r3, #4]
 8015e98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015e9c:	4413      	add	r3, r2
 8015e9e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015ea2:	4611      	mov	r1, r2
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7fe fe31 	bl	8014b0c <RegionCommonParseLinkAdrReq>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015eb0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d07b      	beq.n	8015fb0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015eb8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015ebc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015ec0:	4413      	add	r3, r2
 8015ec2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015ec6:	2307      	movs	r3, #7
 8015ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015ecc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015ed0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015ed2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d109      	bne.n	8015eee <RegionEU868LinkAdrReq+0x8a>
 8015eda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d106      	bne.n	8015eee <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015ee0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ee4:	f023 0301 	bic.w	r3, r3, #1
 8015ee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015eec:	e058      	b.n	8015fa0 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d003      	beq.n	8015efe <RegionEU868LinkAdrReq+0x9a>
 8015ef6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015efa:	2b05      	cmp	r3, #5
 8015efc:	d903      	bls.n	8015f06 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015efe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015f02:	2b06      	cmp	r3, #6
 8015f04:	d906      	bls.n	8015f14 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015f06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015f0a:	f023 0301 	bic.w	r3, r3, #1
 8015f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015f12:	e045      	b.n	8015fa0 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015f14:	2300      	movs	r3, #0
 8015f16:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015f1a:	e03d      	b.n	8015f98 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015f20:	2b06      	cmp	r3, #6
 8015f22:	d118      	bne.n	8015f56 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015f24:	4b5f      	ldr	r3, [pc, #380]	; (80160a4 <RegionEU868LinkAdrReq+0x240>)
 8015f26:	6819      	ldr	r1, [r3, #0]
 8015f28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f2c:	4613      	mov	r3, r2
 8015f2e:	005b      	lsls	r3, r3, #1
 8015f30:	4413      	add	r3, r2
 8015f32:	009b      	lsls	r3, r3, #2
 8015f34:	440b      	add	r3, r1
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d028      	beq.n	8015f8e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015f3c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f40:	2201      	movs	r2, #1
 8015f42:	fa02 f303 	lsl.w	r3, r2, r3
 8015f46:	b21a      	sxth	r2, r3
 8015f48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f4a:	b21b      	sxth	r3, r3
 8015f4c:	4313      	orrs	r3, r2
 8015f4e:	b21b      	sxth	r3, r3
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015f54:	e01b      	b.n	8015f8e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f58:	461a      	mov	r2, r3
 8015f5a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f5e:	fa42 f303 	asr.w	r3, r2, r3
 8015f62:	f003 0301 	and.w	r3, r3, #1
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d011      	beq.n	8015f8e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015f6a:	4b4e      	ldr	r3, [pc, #312]	; (80160a4 <RegionEU868LinkAdrReq+0x240>)
 8015f6c:	6819      	ldr	r1, [r3, #0]
 8015f6e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015f72:	4613      	mov	r3, r2
 8015f74:	005b      	lsls	r3, r3, #1
 8015f76:	4413      	add	r3, r2
 8015f78:	009b      	lsls	r3, r3, #2
 8015f7a:	440b      	add	r3, r1
 8015f7c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d105      	bne.n	8015f8e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015f82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015f86:	f023 0301 	bic.w	r3, r3, #1
 8015f8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015f8e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f92:	3301      	adds	r3, #1
 8015f94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015f98:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015f9c:	2b0f      	cmp	r3, #15
 8015f9e:	d9bd      	bls.n	8015f1c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	7a1b      	ldrb	r3, [r3, #8]
 8015fa4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	f4ff af73 	bcc.w	8015e94 <RegionEU868LinkAdrReq+0x30>
 8015fae:	e000      	b.n	8015fb2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015fb0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015fb2:	2302      	movs	r3, #2
 8015fb4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	7a5b      	ldrb	r3, [r3, #9]
 8015fbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015fc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7ff fa27 	bl	8015418 <RegionEU868GetPhyParam>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015fd2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	7a9b      	ldrb	r3, [r3, #10]
 8015fd8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015fda:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015fde:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015fe0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015fe4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015fe6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015fea:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015ff2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015ffa:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	7b5b      	ldrb	r3, [r3, #13]
 8016000:	b25b      	sxtb	r3, r3
 8016002:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8016004:	2310      	movs	r3, #16
 8016006:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016008:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801600c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016010:	b25b      	sxtb	r3, r3
 8016012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8016016:	2307      	movs	r3, #7
 8016018:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801601c:	4b21      	ldr	r3, [pc, #132]	; (80160a4 <RegionEU868LinkAdrReq+0x240>)
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8016022:	2307      	movs	r3, #7
 8016024:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016028:	2300      	movs	r3, #0
 801602a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016034:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801603c:	1c9a      	adds	r2, r3, #2
 801603e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016042:	1c59      	adds	r1, r3, #1
 8016044:	f107 0010 	add.w	r0, r7, #16
 8016048:	4623      	mov	r3, r4
 801604a:	f7fe fdb0 	bl	8014bae <RegionCommonLinkAdrReqVerifyParams>
 801604e:	4603      	mov	r3, r0
 8016050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016054:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016058:	2b07      	cmp	r3, #7
 801605a:	d10c      	bne.n	8016076 <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801605c:	4b11      	ldr	r3, [pc, #68]	; (80160a4 <RegionEU868LinkAdrReq+0x240>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	33c0      	adds	r3, #192	; 0xc0
 8016062:	2202      	movs	r2, #2
 8016064:	2100      	movs	r1, #0
 8016066:	4618      	mov	r0, r3
 8016068:	f000 fb7c 	bl	8016764 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801606c:	4b0d      	ldr	r3, [pc, #52]	; (80160a4 <RegionEU868LinkAdrReq+0x240>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016072:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016076:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801607e:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016086:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801608a:	683b      	ldr	r3, [r7, #0]
 801608c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801608e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016090:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016094:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801609a:	4618      	mov	r0, r3
 801609c:	374c      	adds	r7, #76	; 0x4c
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd90      	pop	{r4, r7, pc}
 80160a2:	bf00      	nop
 80160a4:	20000ecc 	.word	0x20000ecc

080160a8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80160b0:	2307      	movs	r3, #7
 80160b2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80160b4:	2300      	movs	r3, #0
 80160b6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	685b      	ldr	r3, [r3, #4]
 80160bc:	f107 020e 	add.w	r2, r7, #14
 80160c0:	4611      	mov	r1, r2
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7ff f8e2 	bl	801528c <VerifyRfFreq>
 80160c8:	4603      	mov	r3, r0
 80160ca:	f083 0301 	eor.w	r3, r3, #1
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d003      	beq.n	80160dc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80160d4:	7bfb      	ldrb	r3, [r7, #15]
 80160d6:	f023 0301 	bic.w	r3, r3, #1
 80160da:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f993 3000 	ldrsb.w	r3, [r3]
 80160e2:	2207      	movs	r2, #7
 80160e4:	2100      	movs	r1, #0
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7fe fb4f 	bl	801478a <RegionCommonValueInRange>
 80160ec:	4603      	mov	r3, r0
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d103      	bne.n	80160fa <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80160f2:	7bfb      	ldrb	r3, [r7, #15]
 80160f4:	f023 0302 	bic.w	r3, r3, #2
 80160f8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016100:	2205      	movs	r2, #5
 8016102:	2100      	movs	r1, #0
 8016104:	4618      	mov	r0, r3
 8016106:	f7fe fb40 	bl	801478a <RegionCommonValueInRange>
 801610a:	4603      	mov	r3, r0
 801610c:	2b00      	cmp	r3, #0
 801610e:	d103      	bne.n	8016118 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016110:	7bfb      	ldrb	r3, [r7, #15]
 8016112:	f023 0304 	bic.w	r3, r3, #4
 8016116:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016118:	7bfb      	ldrb	r3, [r7, #15]
}
 801611a:	4618      	mov	r0, r3
 801611c:	3710      	adds	r7, #16
 801611e:	46bd      	mov	sp, r7
 8016120:	bd80      	pop	{r7, pc}
	...

08016124 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b086      	sub	sp, #24
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801612c:	2303      	movs	r3, #3
 801612e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d114      	bne.n	8016164 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016140:	b2db      	uxtb	r3, r3
 8016142:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016144:	f107 0308 	add.w	r3, r7, #8
 8016148:	4618      	mov	r0, r3
 801614a:	f000 f9f9 	bl	8016540 <RegionEU868ChannelsRemove>
 801614e:	4603      	mov	r3, r0
 8016150:	f083 0301 	eor.w	r3, r3, #1
 8016154:	b2db      	uxtb	r3, r3
 8016156:	2b00      	cmp	r3, #0
 8016158:	d03b      	beq.n	80161d2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801615a:	7dfb      	ldrb	r3, [r7, #23]
 801615c:	f023 0303 	bic.w	r3, r3, #3
 8016160:	75fb      	strb	r3, [r7, #23]
 8016162:	e036      	b.n	80161d2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016170:	b2db      	uxtb	r3, r3
 8016172:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016174:	f107 030c 	add.w	r3, r7, #12
 8016178:	4618      	mov	r0, r3
 801617a:	f000 f93f 	bl	80163fc <RegionEU868ChannelAdd>
 801617e:	4603      	mov	r3, r0
 8016180:	2b06      	cmp	r3, #6
 8016182:	d820      	bhi.n	80161c6 <RegionEU868NewChannelReq+0xa2>
 8016184:	a201      	add	r2, pc, #4	; (adr r2, 801618c <RegionEU868NewChannelReq+0x68>)
 8016186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801618a:	bf00      	nop
 801618c:	080161d1 	.word	0x080161d1
 8016190:	080161c7 	.word	0x080161c7
 8016194:	080161c7 	.word	0x080161c7
 8016198:	080161c7 	.word	0x080161c7
 801619c:	080161a9 	.word	0x080161a9
 80161a0:	080161b3 	.word	0x080161b3
 80161a4:	080161bd 	.word	0x080161bd
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80161a8:	7dfb      	ldrb	r3, [r7, #23]
 80161aa:	f023 0301 	bic.w	r3, r3, #1
 80161ae:	75fb      	strb	r3, [r7, #23]
                break;
 80161b0:	e00f      	b.n	80161d2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80161b2:	7dfb      	ldrb	r3, [r7, #23]
 80161b4:	f023 0302 	bic.w	r3, r3, #2
 80161b8:	75fb      	strb	r3, [r7, #23]
                break;
 80161ba:	e00a      	b.n	80161d2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80161bc:	7dfb      	ldrb	r3, [r7, #23]
 80161be:	f023 0303 	bic.w	r3, r3, #3
 80161c2:	75fb      	strb	r3, [r7, #23]
                break;
 80161c4:	e005      	b.n	80161d2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80161c6:	7dfb      	ldrb	r3, [r7, #23]
 80161c8:	f023 0303 	bic.w	r3, r3, #3
 80161cc:	75fb      	strb	r3, [r7, #23]
                break;
 80161ce:	e000      	b.n	80161d2 <RegionEU868NewChannelReq+0xae>
                break;
 80161d0:	bf00      	nop
            }
        }
    }

    return status;
 80161d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3718      	adds	r7, #24
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop

080161e0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80161e0:	b480      	push	{r7}
 80161e2:	b083      	sub	sp, #12
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80161e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	370c      	adds	r7, #12
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bc80      	pop	{r7}
 80161f4:	4770      	bx	lr
	...

080161f8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016200:	2303      	movs	r3, #3
 8016202:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016204:	2300      	movs	r3, #0
 8016206:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	f107 020e 	add.w	r2, r7, #14
 8016210:	4611      	mov	r1, r2
 8016212:	4618      	mov	r0, r3
 8016214:	f7ff f83a 	bl	801528c <VerifyRfFreq>
 8016218:	4603      	mov	r3, r0
 801621a:	f083 0301 	eor.w	r3, r3, #1
 801621e:	b2db      	uxtb	r3, r3
 8016220:	2b00      	cmp	r3, #0
 8016222:	d003      	beq.n	801622c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8016224:	7bfb      	ldrb	r3, [r7, #15]
 8016226:	f023 0301 	bic.w	r3, r3, #1
 801622a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801622c:	4b13      	ldr	r3, [pc, #76]	; (801627c <RegionEU868DlChannelReq+0x84>)
 801622e:	681a      	ldr	r2, [r3, #0]
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	781b      	ldrb	r3, [r3, #0]
 8016234:	4619      	mov	r1, r3
 8016236:	460b      	mov	r3, r1
 8016238:	005b      	lsls	r3, r3, #1
 801623a:	440b      	add	r3, r1
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	4413      	add	r3, r2
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d103      	bne.n	801624e <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8016246:	7bfb      	ldrb	r3, [r7, #15]
 8016248:	f023 0302 	bic.w	r3, r3, #2
 801624c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801624e:	7bfb      	ldrb	r3, [r7, #15]
 8016250:	2b03      	cmp	r3, #3
 8016252:	d10d      	bne.n	8016270 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016254:	4b09      	ldr	r3, [pc, #36]	; (801627c <RegionEU868DlChannelReq+0x84>)
 8016256:	6819      	ldr	r1, [r3, #0]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	4618      	mov	r0, r3
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	685a      	ldr	r2, [r3, #4]
 8016262:	4603      	mov	r3, r0
 8016264:	005b      	lsls	r3, r3, #1
 8016266:	4403      	add	r3, r0
 8016268:	009b      	lsls	r3, r3, #2
 801626a:	440b      	add	r3, r1
 801626c:	3304      	adds	r3, #4
 801626e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016274:	4618      	mov	r0, r3
 8016276:	3710      	adds	r7, #16
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	20000ecc 	.word	0x20000ecc

08016280 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016280:	b480      	push	{r7}
 8016282:	b083      	sub	sp, #12
 8016284:	af00      	add	r7, sp, #0
 8016286:	4603      	mov	r3, r0
 8016288:	460a      	mov	r2, r1
 801628a:	71fb      	strb	r3, [r7, #7]
 801628c:	4613      	mov	r3, r2
 801628e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016290:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016294:	4618      	mov	r0, r3
 8016296:	370c      	adds	r7, #12
 8016298:	46bd      	mov	sp, r7
 801629a:	bc80      	pop	{r7}
 801629c:	4770      	bx	lr
	...

080162a0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b09a      	sub	sp, #104	; 0x68
 80162a4:	af02      	add	r7, sp, #8
 80162a6:	60f8      	str	r0, [r7, #12]
 80162a8:	60b9      	str	r1, [r7, #8]
 80162aa:	607a      	str	r2, [r7, #4]
 80162ac:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80162b4:	2300      	movs	r3, #0
 80162b6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80162ba:	2300      	movs	r3, #0
 80162bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80162be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80162c2:	2200      	movs	r2, #0
 80162c4:	601a      	str	r2, [r3, #0]
 80162c6:	605a      	str	r2, [r3, #4]
 80162c8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80162ca:	230c      	movs	r3, #12
 80162cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80162d0:	2307      	movs	r3, #7
 80162d2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80162d4:	4b47      	ldr	r3, [pc, #284]	; (80163f4 <RegionEU868NextChannel+0x154>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	33c0      	adds	r3, #192	; 0xc0
 80162da:	2201      	movs	r2, #1
 80162dc:	2100      	movs	r1, #0
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fe faa4 	bl	801482c <RegionCommonCountChannels>
 80162e4:	4603      	mov	r3, r0
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d10a      	bne.n	8016300 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80162ea:	4b42      	ldr	r3, [pc, #264]	; (80163f4 <RegionEU868NextChannel+0x154>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80162f2:	4b40      	ldr	r3, [pc, #256]	; (80163f4 <RegionEU868NextChannel+0x154>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	f042 0207 	orr.w	r2, r2, #7
 80162fa:	b292      	uxth	r2, r2
 80162fc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	7a5b      	ldrb	r3, [r3, #9]
 8016304:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801630c:	b2db      	uxtb	r3, r3
 801630e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016310:	4b38      	ldr	r3, [pc, #224]	; (80163f4 <RegionEU868NextChannel+0x154>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	33c0      	adds	r3, #192	; 0xc0
 8016316:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016318:	4b36      	ldr	r3, [pc, #216]	; (80163f4 <RegionEU868NextChannel+0x154>)
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801631e:	4b36      	ldr	r3, [pc, #216]	; (80163f8 <RegionEU868NextChannel+0x158>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016324:	2310      	movs	r3, #16
 8016326:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016328:	f107 0312 	add.w	r3, r7, #18
 801632c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	7a9b      	ldrb	r3, [r3, #10]
 801633e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016342:	2306      	movs	r3, #6
 8016344:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016348:	68fa      	ldr	r2, [r7, #12]
 801634a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801634e:	320c      	adds	r2, #12
 8016350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016354:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	7d1b      	ldrb	r3, [r3, #20]
 801635c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	8adb      	ldrh	r3, [r3, #22]
 801636a:	4619      	mov	r1, r3
 801636c:	4610      	mov	r0, r2
 801636e:	f7ff f803 	bl	8015378 <GetTimeOnAir>
 8016372:	4603      	mov	r3, r0
 8016374:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016376:	f107 0314 	add.w	r3, r7, #20
 801637a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801637c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016380:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016384:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	9301      	str	r3, [sp, #4]
 801638c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016390:	9300      	str	r3, [sp, #0]
 8016392:	460b      	mov	r3, r1
 8016394:	6839      	ldr	r1, [r7, #0]
 8016396:	f7fe fe50 	bl	801503a <RegionCommonIdentifyChannels>
 801639a:	4603      	mov	r3, r0
 801639c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80163a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d10f      	bne.n	80163c8 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80163a8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80163ac:	3b01      	subs	r3, #1
 80163ae:	4619      	mov	r1, r3
 80163b0:	2000      	movs	r0, #0
 80163b2:	f000 f985 	bl	80166c0 <randr>
 80163b6:	4603      	mov	r3, r0
 80163b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80163bc:	4413      	add	r3, r2
 80163be:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	701a      	strb	r2, [r3, #0]
 80163c6:	e00e      	b.n	80163e6 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80163c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80163cc:	2b0c      	cmp	r3, #12
 80163ce:	d10a      	bne.n	80163e6 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80163d0:	4b08      	ldr	r3, [pc, #32]	; (80163f4 <RegionEU868NextChannel+0x154>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 80163d8:	4b06      	ldr	r3, [pc, #24]	; (80163f4 <RegionEU868NextChannel+0x154>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	f042 0207 	orr.w	r2, r2, #7
 80163e0:	b292      	uxth	r2, r2
 80163e2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 80163e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3760      	adds	r7, #96	; 0x60
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	20000ecc 	.word	0x20000ecc
 80163f8:	20000ec8 	.word	0x20000ec8

080163fc <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016404:	2300      	movs	r3, #0
 8016406:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016408:	2300      	movs	r3, #0
 801640a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801640c:	2300      	movs	r3, #0
 801640e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	791b      	ldrb	r3, [r3, #4]
 8016414:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016416:	7b7b      	ldrb	r3, [r7, #13]
 8016418:	2b02      	cmp	r3, #2
 801641a:	d801      	bhi.n	8016420 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801641c:	2306      	movs	r3, #6
 801641e:	e089      	b.n	8016534 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016420:	7b7b      	ldrb	r3, [r7, #13]
 8016422:	2b0f      	cmp	r3, #15
 8016424:	d901      	bls.n	801642a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016426:	2303      	movs	r3, #3
 8016428:	e084      	b.n	8016534 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	7a1b      	ldrb	r3, [r3, #8]
 8016430:	f343 0303 	sbfx	r3, r3, #0, #4
 8016434:	b25b      	sxtb	r3, r3
 8016436:	2207      	movs	r2, #7
 8016438:	2100      	movs	r1, #0
 801643a:	4618      	mov	r0, r3
 801643c:	f7fe f9a5 	bl	801478a <RegionCommonValueInRange>
 8016440:	4603      	mov	r3, r0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d101      	bne.n	801644a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016446:	2301      	movs	r3, #1
 8016448:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	7a1b      	ldrb	r3, [r3, #8]
 8016450:	f343 1303 	sbfx	r3, r3, #4, #4
 8016454:	b25b      	sxtb	r3, r3
 8016456:	2207      	movs	r2, #7
 8016458:	2100      	movs	r1, #0
 801645a:	4618      	mov	r0, r3
 801645c:	f7fe f995 	bl	801478a <RegionCommonValueInRange>
 8016460:	4603      	mov	r3, r0
 8016462:	2b00      	cmp	r3, #0
 8016464:	d101      	bne.n	801646a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016466:	2301      	movs	r3, #1
 8016468:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	7a1b      	ldrb	r3, [r3, #8]
 8016470:	f343 0303 	sbfx	r3, r3, #0, #4
 8016474:	b25a      	sxtb	r2, r3
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	7a1b      	ldrb	r3, [r3, #8]
 801647c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016480:	b25b      	sxtb	r3, r3
 8016482:	429a      	cmp	r2, r3
 8016484:	dd01      	ble.n	801648a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016486:	2301      	movs	r3, #1
 8016488:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801648a:	7bbb      	ldrb	r3, [r7, #14]
 801648c:	f083 0301 	eor.w	r3, r3, #1
 8016490:	b2db      	uxtb	r3, r3
 8016492:	2b00      	cmp	r3, #0
 8016494:	d010      	beq.n	80164b8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	f107 020c 	add.w	r2, r7, #12
 80164a0:	4611      	mov	r1, r2
 80164a2:	4618      	mov	r0, r3
 80164a4:	f7fe fef2 	bl	801528c <VerifyRfFreq>
 80164a8:	4603      	mov	r3, r0
 80164aa:	f083 0301 	eor.w	r3, r3, #1
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d001      	beq.n	80164b8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80164b4:	2301      	movs	r3, #1
 80164b6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80164b8:	7bfb      	ldrb	r3, [r7, #15]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d004      	beq.n	80164c8 <RegionEU868ChannelAdd+0xcc>
 80164be:	7bbb      	ldrb	r3, [r7, #14]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d001      	beq.n	80164c8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80164c4:	2306      	movs	r3, #6
 80164c6:	e035      	b.n	8016534 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80164c8:	7bfb      	ldrb	r3, [r7, #15]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d001      	beq.n	80164d2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80164ce:	2305      	movs	r3, #5
 80164d0:	e030      	b.n	8016534 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80164d2:	7bbb      	ldrb	r3, [r7, #14]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d001      	beq.n	80164dc <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80164d8:	2304      	movs	r3, #4
 80164da:	e02b      	b.n	8016534 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80164dc:	4b17      	ldr	r3, [pc, #92]	; (801653c <RegionEU868ChannelAdd+0x140>)
 80164de:	6819      	ldr	r1, [r3, #0]
 80164e0:	7b7a      	ldrb	r2, [r7, #13]
 80164e2:	4613      	mov	r3, r2
 80164e4:	005b      	lsls	r3, r3, #1
 80164e6:	4413      	add	r3, r2
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	18c8      	adds	r0, r1, r3
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	220c      	movs	r2, #12
 80164f2:	4619      	mov	r1, r3
 80164f4:	f000 f8fb 	bl	80166ee <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80164f8:	4b10      	ldr	r3, [pc, #64]	; (801653c <RegionEU868ChannelAdd+0x140>)
 80164fa:	6819      	ldr	r1, [r3, #0]
 80164fc:	7b7a      	ldrb	r2, [r7, #13]
 80164fe:	7b38      	ldrb	r0, [r7, #12]
 8016500:	4613      	mov	r3, r2
 8016502:	005b      	lsls	r3, r3, #1
 8016504:	4413      	add	r3, r2
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	440b      	add	r3, r1
 801650a:	3309      	adds	r3, #9
 801650c:	4602      	mov	r2, r0
 801650e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016510:	4b0a      	ldr	r3, [pc, #40]	; (801653c <RegionEU868ChannelAdd+0x140>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8016518:	b21a      	sxth	r2, r3
 801651a:	7b7b      	ldrb	r3, [r7, #13]
 801651c:	2101      	movs	r1, #1
 801651e:	fa01 f303 	lsl.w	r3, r1, r3
 8016522:	b21b      	sxth	r3, r3
 8016524:	4313      	orrs	r3, r2
 8016526:	b21a      	sxth	r2, r3
 8016528:	4b04      	ldr	r3, [pc, #16]	; (801653c <RegionEU868ChannelAdd+0x140>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	b292      	uxth	r2, r2
 801652e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 8016532:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016534:	4618      	mov	r0, r3
 8016536:	3710      	adds	r7, #16
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}
 801653c:	20000ecc 	.word	0x20000ecc

08016540 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b086      	sub	sp, #24
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	781b      	ldrb	r3, [r3, #0]
 801654c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801654e:	7dfb      	ldrb	r3, [r7, #23]
 8016550:	2b02      	cmp	r3, #2
 8016552:	d801      	bhi.n	8016558 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016554:	2300      	movs	r3, #0
 8016556:	e015      	b.n	8016584 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016558:	4b0c      	ldr	r3, [pc, #48]	; (801658c <RegionEU868ChannelsRemove+0x4c>)
 801655a:	6819      	ldr	r1, [r3, #0]
 801655c:	7dfa      	ldrb	r2, [r7, #23]
 801655e:	4613      	mov	r3, r2
 8016560:	005b      	lsls	r3, r3, #1
 8016562:	4413      	add	r3, r2
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	440b      	add	r3, r1
 8016568:	461a      	mov	r2, r3
 801656a:	2300      	movs	r3, #0
 801656c:	6013      	str	r3, [r2, #0]
 801656e:	6053      	str	r3, [r2, #4]
 8016570:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016572:	4b06      	ldr	r3, [pc, #24]	; (801658c <RegionEU868ChannelsRemove+0x4c>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	33c0      	adds	r3, #192	; 0xc0
 8016578:	7df9      	ldrb	r1, [r7, #23]
 801657a:	2210      	movs	r2, #16
 801657c:	4618      	mov	r0, r3
 801657e:	f7fe f921 	bl	80147c4 <RegionCommonChanDisable>
 8016582:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016584:	4618      	mov	r0, r3
 8016586:	3718      	adds	r7, #24
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20000ecc 	.word	0x20000ecc

08016590 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016590:	b590      	push	{r4, r7, lr}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801659e:	4b20      	ldr	r3, [pc, #128]	; (8016620 <RegionEU868SetContinuousWave+0x90>)
 80165a0:	681a      	ldr	r2, [r3, #0]
 80165a2:	4b20      	ldr	r3, [pc, #128]	; (8016624 <RegionEU868SetContinuousWave+0x94>)
 80165a4:	6819      	ldr	r1, [r3, #0]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	461c      	mov	r4, r3
 80165ac:	4623      	mov	r3, r4
 80165ae:	005b      	lsls	r3, r3, #1
 80165b0:	4423      	add	r3, r4
 80165b2:	009b      	lsls	r3, r3, #2
 80165b4:	440b      	add	r3, r1
 80165b6:	3309      	adds	r3, #9
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	4619      	mov	r1, r3
 80165bc:	460b      	mov	r3, r1
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	440b      	add	r3, r1
 80165c2:	00db      	lsls	r3, r3, #3
 80165c4:	4413      	add	r3, r2
 80165c6:	3302      	adds	r3, #2
 80165c8:	f993 3000 	ldrsb.w	r3, [r3]
 80165cc:	4619      	mov	r1, r3
 80165ce:	f7fe fdd4 	bl	801517a <RegionCommonLimitTxPower>
 80165d2:	4603      	mov	r3, r0
 80165d4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80165d6:	2300      	movs	r3, #0
 80165d8:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80165da:	4b12      	ldr	r3, [pc, #72]	; (8016624 <RegionEU868SetContinuousWave+0x94>)
 80165dc:	681a      	ldr	r2, [r3, #0]
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	4619      	mov	r1, r3
 80165e4:	460b      	mov	r3, r1
 80165e6:	005b      	lsls	r3, r3, #1
 80165e8:	440b      	add	r3, r1
 80165ea:	009b      	lsls	r3, r3, #2
 80165ec:	4413      	add	r3, r2
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	6859      	ldr	r1, [r3, #4]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	689a      	ldr	r2, [r3, #8]
 80165fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165fe:	4618      	mov	r0, r3
 8016600:	f7fe fc2c 	bl	8014e5c <RegionCommonComputeTxPower>
 8016604:	4603      	mov	r3, r0
 8016606:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016608:	4b07      	ldr	r3, [pc, #28]	; (8016628 <RegionEU868SetContinuousWave+0x98>)
 801660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	8992      	ldrh	r2, [r2, #12]
 8016610:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016614:	68b8      	ldr	r0, [r7, #8]
 8016616:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016618:	bf00      	nop
 801661a:	3714      	adds	r7, #20
 801661c:	46bd      	mov	sp, r7
 801661e:	bd90      	pop	{r4, r7, pc}
 8016620:	20000ec8 	.word	0x20000ec8
 8016624:	20000ecc 	.word	0x20000ecc
 8016628:	0801bf10 	.word	0x0801bf10

0801662c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801662c:	b480      	push	{r7}
 801662e:	b085      	sub	sp, #20
 8016630:	af00      	add	r7, sp, #0
 8016632:	4603      	mov	r3, r0
 8016634:	71fb      	strb	r3, [r7, #7]
 8016636:	460b      	mov	r3, r1
 8016638:	71bb      	strb	r3, [r7, #6]
 801663a:	4613      	mov	r3, r2
 801663c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801663e:	79ba      	ldrb	r2, [r7, #6]
 8016640:	797b      	ldrb	r3, [r7, #5]
 8016642:	1ad3      	subs	r3, r2, r3
 8016644:	b2db      	uxtb	r3, r3
 8016646:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801664c:	2b00      	cmp	r3, #0
 801664e:	da01      	bge.n	8016654 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016650:	2300      	movs	r3, #0
 8016652:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016654:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016656:	4618      	mov	r0, r3
 8016658:	3714      	adds	r7, #20
 801665a:	46bd      	mov	sp, r7
 801665c:	bc80      	pop	{r7}
 801665e:	4770      	bx	lr

08016660 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016660:	b480      	push	{r7}
 8016662:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016664:	4b0d      	ldr	r3, [pc, #52]	; (801669c <rand1+0x3c>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	4a0d      	ldr	r2, [pc, #52]	; (80166a0 <rand1+0x40>)
 801666a:	fb02 f303 	mul.w	r3, r2, r3
 801666e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016672:	3339      	adds	r3, #57	; 0x39
 8016674:	4a09      	ldr	r2, [pc, #36]	; (801669c <rand1+0x3c>)
 8016676:	6013      	str	r3, [r2, #0]
 8016678:	4b08      	ldr	r3, [pc, #32]	; (801669c <rand1+0x3c>)
 801667a:	681a      	ldr	r2, [r3, #0]
 801667c:	2303      	movs	r3, #3
 801667e:	fba3 1302 	umull	r1, r3, r3, r2
 8016682:	1ad1      	subs	r1, r2, r3
 8016684:	0849      	lsrs	r1, r1, #1
 8016686:	440b      	add	r3, r1
 8016688:	0f99      	lsrs	r1, r3, #30
 801668a:	460b      	mov	r3, r1
 801668c:	07db      	lsls	r3, r3, #31
 801668e:	1a5b      	subs	r3, r3, r1
 8016690:	1ad1      	subs	r1, r2, r3
 8016692:	460b      	mov	r3, r1
}
 8016694:	4618      	mov	r0, r3
 8016696:	46bd      	mov	sp, r7
 8016698:	bc80      	pop	{r7}
 801669a:	4770      	bx	lr
 801669c:	2000011c 	.word	0x2000011c
 80166a0:	41c64e6d 	.word	0x41c64e6d

080166a4 <srand1>:

void srand1( uint32_t seed )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
    next = seed;
 80166ac:	4a03      	ldr	r2, [pc, #12]	; (80166bc <srand1+0x18>)
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	6013      	str	r3, [r2, #0]
}
 80166b2:	bf00      	nop
 80166b4:	370c      	adds	r7, #12
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bc80      	pop	{r7}
 80166ba:	4770      	bx	lr
 80166bc:	2000011c 	.word	0x2000011c

080166c0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80166ca:	f7ff ffc9 	bl	8016660 <rand1>
 80166ce:	4602      	mov	r2, r0
 80166d0:	6839      	ldr	r1, [r7, #0]
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	1acb      	subs	r3, r1, r3
 80166d6:	3301      	adds	r3, #1
 80166d8:	fb92 f1f3 	sdiv	r1, r2, r3
 80166dc:	fb03 f301 	mul.w	r3, r3, r1
 80166e0:	1ad2      	subs	r2, r2, r3
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	4413      	add	r3, r2
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3708      	adds	r7, #8
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}

080166ee <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80166ee:	b480      	push	{r7}
 80166f0:	b085      	sub	sp, #20
 80166f2:	af00      	add	r7, sp, #0
 80166f4:	60f8      	str	r0, [r7, #12]
 80166f6:	60b9      	str	r1, [r7, #8]
 80166f8:	4613      	mov	r3, r2
 80166fa:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80166fc:	e007      	b.n	801670e <memcpy1+0x20>
    {
        *dst++ = *src++;
 80166fe:	68ba      	ldr	r2, [r7, #8]
 8016700:	1c53      	adds	r3, r2, #1
 8016702:	60bb      	str	r3, [r7, #8]
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	1c59      	adds	r1, r3, #1
 8016708:	60f9      	str	r1, [r7, #12]
 801670a:	7812      	ldrb	r2, [r2, #0]
 801670c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801670e:	88fb      	ldrh	r3, [r7, #6]
 8016710:	1e5a      	subs	r2, r3, #1
 8016712:	80fa      	strh	r2, [r7, #6]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d1f2      	bne.n	80166fe <memcpy1+0x10>
    }
}
 8016718:	bf00      	nop
 801671a:	bf00      	nop
 801671c:	3714      	adds	r7, #20
 801671e:	46bd      	mov	sp, r7
 8016720:	bc80      	pop	{r7}
 8016722:	4770      	bx	lr

08016724 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016724:	b480      	push	{r7}
 8016726:	b085      	sub	sp, #20
 8016728:	af00      	add	r7, sp, #0
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	4613      	mov	r3, r2
 8016730:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016732:	88fb      	ldrh	r3, [r7, #6]
 8016734:	3b01      	subs	r3, #1
 8016736:	68fa      	ldr	r2, [r7, #12]
 8016738:	4413      	add	r3, r2
 801673a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801673c:	e007      	b.n	801674e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801673e:	68ba      	ldr	r2, [r7, #8]
 8016740:	1c53      	adds	r3, r2, #1
 8016742:	60bb      	str	r3, [r7, #8]
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	1e59      	subs	r1, r3, #1
 8016748:	60f9      	str	r1, [r7, #12]
 801674a:	7812      	ldrb	r2, [r2, #0]
 801674c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801674e:	88fb      	ldrh	r3, [r7, #6]
 8016750:	1e5a      	subs	r2, r3, #1
 8016752:	80fa      	strh	r2, [r7, #6]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d1f2      	bne.n	801673e <memcpyr+0x1a>
    }
}
 8016758:	bf00      	nop
 801675a:	bf00      	nop
 801675c:	3714      	adds	r7, #20
 801675e:	46bd      	mov	sp, r7
 8016760:	bc80      	pop	{r7}
 8016762:	4770      	bx	lr

08016764 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016764:	b480      	push	{r7}
 8016766:	b083      	sub	sp, #12
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	460b      	mov	r3, r1
 801676e:	70fb      	strb	r3, [r7, #3]
 8016770:	4613      	mov	r3, r2
 8016772:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016774:	e004      	b.n	8016780 <memset1+0x1c>
    {
        *dst++ = value;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	1c5a      	adds	r2, r3, #1
 801677a:	607a      	str	r2, [r7, #4]
 801677c:	78fa      	ldrb	r2, [r7, #3]
 801677e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016780:	883b      	ldrh	r3, [r7, #0]
 8016782:	1e5a      	subs	r2, r3, #1
 8016784:	803a      	strh	r2, [r7, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d1f5      	bne.n	8016776 <memset1+0x12>
    }
}
 801678a:	bf00      	nop
 801678c:	bf00      	nop
 801678e:	370c      	adds	r7, #12
 8016790:	46bd      	mov	sp, r7
 8016792:	bc80      	pop	{r7}
 8016794:	4770      	bx	lr
	...

08016798 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016798:	b480      	push	{r7}
 801679a:	b087      	sub	sp, #28
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	460b      	mov	r3, r1
 80167a2:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 80167a4:	4b1a      	ldr	r3, [pc, #104]	; (8016810 <Crc32+0x78>)
 80167a6:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80167a8:	f04f 33ff 	mov.w	r3, #4294967295
 80167ac:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d101      	bne.n	80167b8 <Crc32+0x20>
    {
        return 0;
 80167b4:	2300      	movs	r3, #0
 80167b6:	e026      	b.n	8016806 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 80167b8:	2300      	movs	r3, #0
 80167ba:	827b      	strh	r3, [r7, #18]
 80167bc:	e01d      	b.n	80167fa <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 80167be:	8a7b      	ldrh	r3, [r7, #18]
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	4413      	add	r3, r2
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	461a      	mov	r2, r3
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	4053      	eors	r3, r2
 80167cc:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167ce:	2300      	movs	r3, #0
 80167d0:	823b      	strh	r3, [r7, #16]
 80167d2:	e00c      	b.n	80167ee <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	085a      	lsrs	r2, r3, #1
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	f003 0301 	and.w	r3, r3, #1
 80167de:	4259      	negs	r1, r3
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	400b      	ands	r3, r1
 80167e4:	4053      	eors	r3, r2
 80167e6:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80167e8:	8a3b      	ldrh	r3, [r7, #16]
 80167ea:	3301      	adds	r3, #1
 80167ec:	823b      	strh	r3, [r7, #16]
 80167ee:	8a3b      	ldrh	r3, [r7, #16]
 80167f0:	2b07      	cmp	r3, #7
 80167f2:	d9ef      	bls.n	80167d4 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80167f4:	8a7b      	ldrh	r3, [r7, #18]
 80167f6:	3301      	adds	r3, #1
 80167f8:	827b      	strh	r3, [r7, #18]
 80167fa:	8a7a      	ldrh	r2, [r7, #18]
 80167fc:	887b      	ldrh	r3, [r7, #2]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d3dd      	bcc.n	80167be <Crc32+0x26>
        }
    }

    return ~crc;
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	43db      	mvns	r3, r3
}
 8016806:	4618      	mov	r0, r3
 8016808:	371c      	adds	r7, #28
 801680a:	46bd      	mov	sp, r7
 801680c:	bc80      	pop	{r7}
 801680e:	4770      	bx	lr
 8016810:	edb88320 	.word	0xedb88320

08016814 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016814:	b480      	push	{r7}
 8016816:	b083      	sub	sp, #12
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	683a      	ldr	r2, [r7, #0]
 8016822:	619a      	str	r2, [r3, #24]
}
 8016824:	bf00      	nop
 8016826:	370c      	adds	r7, #12
 8016828:	46bd      	mov	sp, r7
 801682a:	bc80      	pop	{r7}
 801682c:	4770      	bx	lr

0801682e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 801682e:	b480      	push	{r7}
 8016830:	b083      	sub	sp, #12
 8016832:	af00      	add	r7, sp, #0
 8016834:	6078      	str	r0, [r7, #4]
 8016836:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	683a      	ldr	r2, [r7, #0]
 801683c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801683e:	bf00      	nop
 8016840:	370c      	adds	r7, #12
 8016842:	46bd      	mov	sp, r7
 8016844:	bc80      	pop	{r7}
 8016846:	4770      	bx	lr

08016848 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b084      	sub	sp, #16
 801684c:	af02      	add	r7, sp, #8
 801684e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016850:	4a21      	ldr	r2, [pc, #132]	; (80168d8 <RadioInit+0x90>)
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016856:	4b21      	ldr	r3, [pc, #132]	; (80168dc <RadioInit+0x94>)
 8016858:	2200      	movs	r2, #0
 801685a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801685c:	4b1f      	ldr	r3, [pc, #124]	; (80168dc <RadioInit+0x94>)
 801685e:	2200      	movs	r2, #0
 8016860:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016862:	4b1e      	ldr	r3, [pc, #120]	; (80168dc <RadioInit+0x94>)
 8016864:	2200      	movs	r2, #0
 8016866:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8016868:	481d      	ldr	r0, [pc, #116]	; (80168e0 <RadioInit+0x98>)
 801686a:	f001 fee3 	bl	8018634 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 801686e:	2000      	movs	r0, #0
 8016870:	f001 f82a 	bl	80178c8 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016874:	f002 f974 	bl	8018b60 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016878:	2100      	movs	r1, #0
 801687a:	2000      	movs	r0, #0
 801687c:	f002 fcca 	bl	8019214 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016880:	2204      	movs	r2, #4
 8016882:	2100      	movs	r1, #0
 8016884:	2001      	movs	r0, #1
 8016886:	f002 faf5 	bl	8018e74 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801688a:	2300      	movs	r3, #0
 801688c:	2200      	movs	r2, #0
 801688e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016892:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016896:	f002 fa29 	bl	8018cec <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801689a:	f000 fea1 	bl	80175e0 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801689e:	2300      	movs	r3, #0
 80168a0:	9300      	str	r3, [sp, #0]
 80168a2:	4b10      	ldr	r3, [pc, #64]	; (80168e4 <RadioInit+0x9c>)
 80168a4:	2200      	movs	r2, #0
 80168a6:	f04f 31ff 	mov.w	r1, #4294967295
 80168aa:	480f      	ldr	r0, [pc, #60]	; (80168e8 <RadioInit+0xa0>)
 80168ac:	f003 feb2 	bl	801a614 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80168b0:	2300      	movs	r3, #0
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	4b0d      	ldr	r3, [pc, #52]	; (80168ec <RadioInit+0xa4>)
 80168b6:	2200      	movs	r2, #0
 80168b8:	f04f 31ff 	mov.w	r1, #4294967295
 80168bc:	480c      	ldr	r0, [pc, #48]	; (80168f0 <RadioInit+0xa8>)
 80168be:	f003 fea9 	bl	801a614 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80168c2:	4809      	ldr	r0, [pc, #36]	; (80168e8 <RadioInit+0xa0>)
 80168c4:	f003 ff4a 	bl	801a75c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80168c8:	4809      	ldr	r0, [pc, #36]	; (80168f0 <RadioInit+0xa8>)
 80168ca:	f003 ff47 	bl	801a75c <UTIL_TIMER_Stop>
}
 80168ce:	bf00      	nop
 80168d0:	3708      	adds	r7, #8
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bd80      	pop	{r7, pc}
 80168d6:	bf00      	nop
 80168d8:	20000fd0 	.word	0x20000fd0
 80168dc:	200018bc 	.word	0x200018bc
 80168e0:	080179c1 	.word	0x080179c1
 80168e4:	08017935 	.word	0x08017935
 80168e8:	20001914 	.word	0x20001914
 80168ec:	08017949 	.word	0x08017949
 80168f0:	2000192c 	.word	0x2000192c

080168f4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80168f8:	f001 fede 	bl	80186b8 <SUBGRF_GetOperatingMode>
 80168fc:	4603      	mov	r3, r0
 80168fe:	2b07      	cmp	r3, #7
 8016900:	d00a      	beq.n	8016918 <RadioGetStatus+0x24>
 8016902:	2b07      	cmp	r3, #7
 8016904:	dc0a      	bgt.n	801691c <RadioGetStatus+0x28>
 8016906:	2b04      	cmp	r3, #4
 8016908:	d002      	beq.n	8016910 <RadioGetStatus+0x1c>
 801690a:	2b05      	cmp	r3, #5
 801690c:	d002      	beq.n	8016914 <RadioGetStatus+0x20>
 801690e:	e005      	b.n	801691c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016910:	2302      	movs	r3, #2
 8016912:	e004      	b.n	801691e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016914:	2301      	movs	r3, #1
 8016916:	e002      	b.n	801691e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016918:	2303      	movs	r3, #3
 801691a:	e000      	b.n	801691e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801691c:	2300      	movs	r3, #0
    }
}
 801691e:	4618      	mov	r0, r3
 8016920:	bd80      	pop	{r7, pc}
	...

08016924 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	4603      	mov	r3, r0
 801692c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801692e:	4a25      	ldr	r2, [pc, #148]	; (80169c4 <RadioSetModem+0xa0>)
 8016930:	79fb      	ldrb	r3, [r7, #7]
 8016932:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8016934:	79fb      	ldrb	r3, [r7, #7]
 8016936:	4618      	mov	r0, r3
 8016938:	f003 f831 	bl	801999e <RFW_SetRadioModem>
    switch( modem )
 801693c:	79fb      	ldrb	r3, [r7, #7]
 801693e:	3b01      	subs	r3, #1
 8016940:	2b03      	cmp	r3, #3
 8016942:	d80b      	bhi.n	801695c <RadioSetModem+0x38>
 8016944:	a201      	add	r2, pc, #4	; (adr r2, 801694c <RadioSetModem+0x28>)
 8016946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801694a:	bf00      	nop
 801694c:	0801696b 	.word	0x0801696b
 8016950:	08016991 	.word	0x08016991
 8016954:	0801699f 	.word	0x0801699f
 8016958:	080169ad 	.word	0x080169ad
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801695c:	2000      	movs	r0, #0
 801695e:	f002 fa63 	bl	8018e28 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016962:	4b18      	ldr	r3, [pc, #96]	; (80169c4 <RadioSetModem+0xa0>)
 8016964:	2200      	movs	r2, #0
 8016966:	735a      	strb	r2, [r3, #13]
        break;
 8016968:	e028      	b.n	80169bc <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801696a:	2001      	movs	r0, #1
 801696c:	f002 fa5c 	bl	8018e28 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016970:	4b14      	ldr	r3, [pc, #80]	; (80169c4 <RadioSetModem+0xa0>)
 8016972:	7b5a      	ldrb	r2, [r3, #13]
 8016974:	4b13      	ldr	r3, [pc, #76]	; (80169c4 <RadioSetModem+0xa0>)
 8016976:	7b1b      	ldrb	r3, [r3, #12]
 8016978:	429a      	cmp	r2, r3
 801697a:	d01e      	beq.n	80169ba <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801697c:	4b11      	ldr	r3, [pc, #68]	; (80169c4 <RadioSetModem+0xa0>)
 801697e:	7b1a      	ldrb	r2, [r3, #12]
 8016980:	4b10      	ldr	r3, [pc, #64]	; (80169c4 <RadioSetModem+0xa0>)
 8016982:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016984:	4b0f      	ldr	r3, [pc, #60]	; (80169c4 <RadioSetModem+0xa0>)
 8016986:	7b5b      	ldrb	r3, [r3, #13]
 8016988:	4618      	mov	r0, r3
 801698a:	f000 ff9d 	bl	80178c8 <RadioSetPublicNetwork>
        }
        break;
 801698e:	e014      	b.n	80169ba <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016990:	2002      	movs	r0, #2
 8016992:	f002 fa49 	bl	8018e28 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016996:	4b0b      	ldr	r3, [pc, #44]	; (80169c4 <RadioSetModem+0xa0>)
 8016998:	2200      	movs	r2, #0
 801699a:	735a      	strb	r2, [r3, #13]
        break;
 801699c:	e00e      	b.n	80169bc <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801699e:	2002      	movs	r0, #2
 80169a0:	f002 fa42 	bl	8018e28 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80169a4:	4b07      	ldr	r3, [pc, #28]	; (80169c4 <RadioSetModem+0xa0>)
 80169a6:	2200      	movs	r2, #0
 80169a8:	735a      	strb	r2, [r3, #13]
        break;
 80169aa:	e007      	b.n	80169bc <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80169ac:	2000      	movs	r0, #0
 80169ae:	f002 fa3b 	bl	8018e28 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80169b2:	4b04      	ldr	r3, [pc, #16]	; (80169c4 <RadioSetModem+0xa0>)
 80169b4:	2200      	movs	r2, #0
 80169b6:	735a      	strb	r2, [r3, #13]
        break;
 80169b8:	e000      	b.n	80169bc <RadioSetModem+0x98>
        break;
 80169ba:	bf00      	nop
    }
}
 80169bc:	bf00      	nop
 80169be:	3708      	adds	r7, #8
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}
 80169c4:	200018bc 	.word	0x200018bc

080169c8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f002 f9e7 	bl	8018da4 <SUBGRF_SetRfFrequency>
}
 80169d6:	bf00      	nop
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80169de:	b580      	push	{r7, lr}
 80169e0:	b090      	sub	sp, #64	; 0x40
 80169e2:	af0a      	add	r7, sp, #40	; 0x28
 80169e4:	60f8      	str	r0, [r7, #12]
 80169e6:	60b9      	str	r1, [r7, #8]
 80169e8:	603b      	str	r3, [r7, #0]
 80169ea:	4613      	mov	r3, r2
 80169ec:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80169ee:	2301      	movs	r3, #1
 80169f0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80169f2:	2300      	movs	r3, #0
 80169f4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80169f6:	2300      	movs	r3, #0
 80169f8:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80169fa:	f000 fe04 	bl	8017606 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80169fe:	2000      	movs	r0, #0
 8016a00:	f7ff ff90 	bl	8016924 <RadioSetModem>

    RadioSetChannel( freq );
 8016a04:	68f8      	ldr	r0, [r7, #12]
 8016a06:	f7ff ffdf 	bl	80169c8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a0e:	2300      	movs	r3, #0
 8016a10:	9308      	str	r3, [sp, #32]
 8016a12:	2300      	movs	r3, #0
 8016a14:	9307      	str	r3, [sp, #28]
 8016a16:	2300      	movs	r3, #0
 8016a18:	9306      	str	r3, [sp, #24]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	9305      	str	r3, [sp, #20]
 8016a1e:	2300      	movs	r3, #0
 8016a20:	9304      	str	r3, [sp, #16]
 8016a22:	2300      	movs	r3, #0
 8016a24:	9303      	str	r3, [sp, #12]
 8016a26:	2300      	movs	r3, #0
 8016a28:	9302      	str	r3, [sp, #8]
 8016a2a:	2303      	movs	r3, #3
 8016a2c:	9301      	str	r3, [sp, #4]
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	9300      	str	r3, [sp, #0]
 8016a32:	2300      	movs	r3, #0
 8016a34:	f44f 7216 	mov.w	r2, #600	; 0x258
 8016a38:	68b9      	ldr	r1, [r7, #8]
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	f000 f840 	bl	8016ac0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016a40:	2000      	movs	r0, #0
 8016a42:	f000 fde7 	bl	8017614 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016a46:	f000 ff6d 	bl	8017924 <RadioGetWakeupTime>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7eb faf8 	bl	8002042 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016a52:	f003 ff9d 	bl	801a990 <UTIL_TIMER_GetCurrentTime>
 8016a56:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a58:	e00d      	b.n	8016a76 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016a5a:	2000      	movs	r0, #0
 8016a5c:	f000 feb2 	bl	80177c4 <RadioRssi>
 8016a60:	4603      	mov	r3, r0
 8016a62:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016a64:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	dd02      	ble.n	8016a76 <RadioIsChannelFree+0x98>
        {
            status = false;
 8016a70:	2300      	movs	r3, #0
 8016a72:	75fb      	strb	r3, [r7, #23]
            break;
 8016a74:	e006      	b.n	8016a84 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016a76:	6938      	ldr	r0, [r7, #16]
 8016a78:	f003 ff9c 	bl	801a9b4 <UTIL_TIMER_GetElapsedTime>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	4293      	cmp	r3, r2
 8016a82:	d8ea      	bhi.n	8016a5a <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016a84:	f000 fdbf 	bl	8017606 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3718      	adds	r7, #24
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016a92:	b580      	push	{r7, lr}
 8016a94:	b082      	sub	sp, #8
 8016a96:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016a98:	2300      	movs	r3, #0
 8016a9a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016a9c:	2001      	movs	r0, #1
 8016a9e:	f7ff ff41 	bl	8016924 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	2000      	movs	r0, #0
 8016aaa:	f002 f91f 	bl	8018cec <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016aae:	f001 fed4 	bl	801885a <SUBGRF_GetRandom>
 8016ab2:	6078      	str	r0, [r7, #4]

    return rnd;
 8016ab4:	687b      	ldr	r3, [r7, #4]
}
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3708      	adds	r7, #8
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
	...

08016ac0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b08a      	sub	sp, #40	; 0x28
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60b9      	str	r1, [r7, #8]
 8016ac8:	607a      	str	r2, [r7, #4]
 8016aca:	461a      	mov	r2, r3
 8016acc:	4603      	mov	r3, r0
 8016ace:	73fb      	strb	r3, [r7, #15]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016ad4:	4abd      	ldr	r2, [pc, #756]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016ad6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ada:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016adc:	f002 ff1d 	bl	801991a <RFW_DeInit>
    if( rxContinuous == true )
 8016ae0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d001      	beq.n	8016aec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016aec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d004      	beq.n	8016afe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016af4:	4ab6      	ldr	r2, [pc, #728]	; (8016dd0 <RadioSetRxConfig+0x310>)
 8016af6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8016afa:	7013      	strb	r3, [r2, #0]
 8016afc:	e002      	b.n	8016b04 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016afe:	4bb4      	ldr	r3, [pc, #720]	; (8016dd0 <RadioSetRxConfig+0x310>)
 8016b00:	22ff      	movs	r2, #255	; 0xff
 8016b02:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016b04:	7bfb      	ldrb	r3, [r7, #15]
 8016b06:	2b04      	cmp	r3, #4
 8016b08:	d009      	beq.n	8016b1e <RadioSetRxConfig+0x5e>
 8016b0a:	2b04      	cmp	r3, #4
 8016b0c:	f300 81da 	bgt.w	8016ec4 <RadioSetRxConfig+0x404>
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	f000 80bf 	beq.w	8016c94 <RadioSetRxConfig+0x1d4>
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	f000 812c 	beq.w	8016d74 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016b1c:	e1d2      	b.n	8016ec4 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016b1e:	2001      	movs	r0, #1
 8016b20:	f001 ffe0 	bl	8018ae4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016b24:	4ba9      	ldr	r3, [pc, #676]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b26:	2200      	movs	r2, #0
 8016b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016b2c:	4aa7      	ldr	r2, [pc, #668]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016b32:	4ba6      	ldr	r3, [pc, #664]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b34:	2209      	movs	r2, #9
 8016b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016b3a:	4ba4      	ldr	r3, [pc, #656]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016b40:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016b42:	68b8      	ldr	r0, [r7, #8]
 8016b44:	f002 fe1a 	bl	801977c <SUBGRF_GetFskBandwidthRegValue>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	4b9f      	ldr	r3, [pc, #636]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016b52:	4b9e      	ldr	r3, [pc, #632]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b54:	2200      	movs	r2, #0
 8016b56:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016b58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	4b9b      	ldr	r3, [pc, #620]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b60:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016b62:	4b9a      	ldr	r3, [pc, #616]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b64:	2200      	movs	r2, #0
 8016b66:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016b68:	4b98      	ldr	r3, [pc, #608]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b6a:	2210      	movs	r2, #16
 8016b6c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016b6e:	4b97      	ldr	r3, [pc, #604]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b70:	2200      	movs	r2, #0
 8016b72:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016b74:	4b95      	ldr	r3, [pc, #596]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b76:	2200      	movs	r2, #0
 8016b78:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016b7a:	4b95      	ldr	r3, [pc, #596]	; (8016dd0 <RadioSetRxConfig+0x310>)
 8016b7c:	781a      	ldrb	r2, [r3, #0]
 8016b7e:	4b93      	ldr	r3, [pc, #588]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b80:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016b82:	4b92      	ldr	r3, [pc, #584]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b84:	2201      	movs	r2, #1
 8016b86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016b88:	4b90      	ldr	r3, [pc, #576]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016b8e:	2004      	movs	r0, #4
 8016b90:	f7ff fec8 	bl	8016924 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b94:	488f      	ldr	r0, [pc, #572]	; (8016dd4 <RadioSetRxConfig+0x314>)
 8016b96:	f002 f9d3 	bl	8018f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b9a:	488f      	ldr	r0, [pc, #572]	; (8016dd8 <RadioSetRxConfig+0x318>)
 8016b9c:	f002 fa9c 	bl	80190d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ba0:	4a8e      	ldr	r2, [pc, #568]	; (8016ddc <RadioSetRxConfig+0x31c>)
 8016ba2:	f107 031c 	add.w	r3, r7, #28
 8016ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016baa:	e883 0003 	stmia.w	r3, {r0, r1}
 8016bae:	f107 031c 	add.w	r3, r7, #28
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	f001 fdcf 	bl	8018756 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016bb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016bbc:	f001 fe1a 	bl	80187f4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016bc0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016bc4:	f000 fe1d 	bl	8017802 <RadioRead>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bd2:	f023 0310 	bic.w	r3, r3, #16
 8016bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bde:	4619      	mov	r1, r3
 8016be0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016be4:	f000 fdfb 	bl	80177de <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016be8:	2104      	movs	r1, #4
 8016bea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016bee:	f000 fdf6 	bl	80177de <RadioWrite>
            modReg= RadioRead(0x89b);
 8016bf2:	f640 009b 	movw	r0, #2203	; 0x89b
 8016bf6:	f000 fe04 	bl	8017802 <RadioRead>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c04:	f023 031c 	bic.w	r3, r3, #28
 8016c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c10:	f043 0308 	orr.w	r3, r3, #8
 8016c14:	b2db      	uxtb	r3, r3
 8016c16:	4619      	mov	r1, r3
 8016c18:	f640 009b 	movw	r0, #2203	; 0x89b
 8016c1c:	f000 fddf 	bl	80177de <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016c20:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016c24:	f000 fded 	bl	8017802 <RadioRead>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c32:	f023 0318 	bic.w	r3, r3, #24
 8016c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8016c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c3e:	f043 0318 	orr.w	r3, r3, #24
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	4619      	mov	r1, r3
 8016c46:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016c4a:	f000 fdc8 	bl	80177de <RadioWrite>
            modReg= RadioRead(0x6ac);
 8016c4e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c52:	f000 fdd6 	bl	8017802 <RadioRead>
 8016c56:	4603      	mov	r3, r0
 8016c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8016c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c6c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016c70:	b2db      	uxtb	r3, r3
 8016c72:	4619      	mov	r1, r3
 8016c74:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016c78:	f000 fdb1 	bl	80177de <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016c7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016c7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016c82:	fb02 f303 	mul.w	r3, r2, r3
 8016c86:	461a      	mov	r2, r3
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c8e:	4a4f      	ldr	r2, [pc, #316]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016c90:	6093      	str	r3, [r2, #8]
            break;
 8016c92:	e118      	b.n	8016ec6 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016c94:	2000      	movs	r0, #0
 8016c96:	f001 ff25 	bl	8018ae4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c9a:	4b4c      	ldr	r3, [pc, #304]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016ca2:	4a4a      	ldr	r2, [pc, #296]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016ca8:	4b48      	ldr	r3, [pc, #288]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016caa:	220b      	movs	r2, #11
 8016cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016cb0:	68b8      	ldr	r0, [r7, #8]
 8016cb2:	f002 fd63 	bl	801977c <SUBGRF_GetFskBandwidthRegValue>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	461a      	mov	r2, r3
 8016cba:	4b44      	ldr	r3, [pc, #272]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016cc0:	4b42      	ldr	r3, [pc, #264]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016cc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	b29a      	uxth	r2, r3
 8016ccc:	4b3f      	ldr	r3, [pc, #252]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016cd0:	4b3e      	ldr	r3, [pc, #248]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cd2:	2204      	movs	r2, #4
 8016cd4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016cd6:	4b3d      	ldr	r3, [pc, #244]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cd8:	2218      	movs	r2, #24
 8016cda:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016cdc:	4b3b      	ldr	r3, [pc, #236]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cde:	2200      	movs	r2, #0
 8016ce0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016ce2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016ce6:	f083 0301 	eor.w	r3, r3, #1
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	461a      	mov	r2, r3
 8016cee:	4b37      	ldr	r3, [pc, #220]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cf0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016cf2:	4b37      	ldr	r3, [pc, #220]	; (8016dd0 <RadioSetRxConfig+0x310>)
 8016cf4:	781a      	ldrb	r2, [r3, #0]
 8016cf6:	4b35      	ldr	r3, [pc, #212]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016cf8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016cfa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d003      	beq.n	8016d0a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016d02:	4b32      	ldr	r3, [pc, #200]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d04:	22f2      	movs	r2, #242	; 0xf2
 8016d06:	75da      	strb	r2, [r3, #23]
 8016d08:	e002      	b.n	8016d10 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016d0a:	4b30      	ldr	r3, [pc, #192]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016d10:	4b2e      	ldr	r3, [pc, #184]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d12:	2201      	movs	r2, #1
 8016d14:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016d16:	f000 fc76 	bl	8017606 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016d1a:	4b2c      	ldr	r3, [pc, #176]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	bf14      	ite	ne
 8016d24:	2301      	movne	r3, #1
 8016d26:	2300      	moveq	r3, #0
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7ff fdfa 	bl	8016924 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d30:	4828      	ldr	r0, [pc, #160]	; (8016dd4 <RadioSetRxConfig+0x314>)
 8016d32:	f002 f905 	bl	8018f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d36:	4828      	ldr	r0, [pc, #160]	; (8016dd8 <RadioSetRxConfig+0x318>)
 8016d38:	f002 f9ce 	bl	80190d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016d3c:	4a28      	ldr	r2, [pc, #160]	; (8016de0 <RadioSetRxConfig+0x320>)
 8016d3e:	f107 0314 	add.w	r3, r7, #20
 8016d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d46:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d4a:	f107 0314 	add.w	r3, r7, #20
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f001 fd01 	bl	8018756 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016d54:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d58:	f001 fd4c 	bl	80187f4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016d5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016d5e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016d62:	fb02 f303 	mul.w	r3, r2, r3
 8016d66:	461a      	mov	r2, r3
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d6e:	4a17      	ldr	r2, [pc, #92]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d70:	6093      	str	r3, [r2, #8]
            break;
 8016d72:	e0a8      	b.n	8016ec6 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016d74:	2000      	movs	r0, #0
 8016d76:	f001 feb5 	bl	8018ae4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d7a:	4b14      	ldr	r3, [pc, #80]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	b2da      	uxtb	r2, r3
 8016d86:	4b11      	ldr	r3, [pc, #68]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016d8c:	4a15      	ldr	r2, [pc, #84]	; (8016de4 <RadioSetRxConfig+0x324>)
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	4413      	add	r3, r2
 8016d92:	781a      	ldrb	r2, [r3, #0]
 8016d94:	4b0d      	ldr	r3, [pc, #52]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016d9a:	4a0c      	ldr	r2, [pc, #48]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016d9c:	7bbb      	ldrb	r3, [r7, #14]
 8016d9e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d105      	bne.n	8016db4 <RadioSetRxConfig+0x2f4>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	2b0b      	cmp	r3, #11
 8016dac:	d008      	beq.n	8016dc0 <RadioSetRxConfig+0x300>
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2b0c      	cmp	r3, #12
 8016db2:	d005      	beq.n	8016dc0 <RadioSetRxConfig+0x300>
 8016db4:	68bb      	ldr	r3, [r7, #8]
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d116      	bne.n	8016de8 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2b0c      	cmp	r3, #12
 8016dbe:	d113      	bne.n	8016de8 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016dc0:	4b02      	ldr	r3, [pc, #8]	; (8016dcc <RadioSetRxConfig+0x30c>)
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016dc8:	e012      	b.n	8016df0 <RadioSetRxConfig+0x330>
 8016dca:	bf00      	nop
 8016dcc:	200018bc 	.word	0x200018bc
 8016dd0:	20000120 	.word	0x20000120
 8016dd4:	200018f4 	.word	0x200018f4
 8016dd8:	200018ca 	.word	0x200018ca
 8016ddc:	0801b98c 	.word	0x0801b98c
 8016de0:	0801b994 	.word	0x0801b994
 8016de4:	0801bf94 	.word	0x0801bf94
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016de8:	4b39      	ldr	r3, [pc, #228]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016dea:	2200      	movs	r2, #0
 8016dec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016df0:	4b37      	ldr	r3, [pc, #220]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016df2:	2201      	movs	r2, #1
 8016df4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016df6:	4b36      	ldr	r3, [pc, #216]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016dfc:	2b05      	cmp	r3, #5
 8016dfe:	d004      	beq.n	8016e0a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016e00:	4b33      	ldr	r3, [pc, #204]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016e06:	2b06      	cmp	r3, #6
 8016e08:	d10a      	bne.n	8016e20 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016e0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e0c:	2b0b      	cmp	r3, #11
 8016e0e:	d803      	bhi.n	8016e18 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016e10:	4b2f      	ldr	r3, [pc, #188]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e12:	220c      	movs	r2, #12
 8016e14:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016e16:	e006      	b.n	8016e26 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e18:	4a2d      	ldr	r2, [pc, #180]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e1c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016e1e:	e002      	b.n	8016e26 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016e20:	4a2b      	ldr	r2, [pc, #172]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e24:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016e26:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016e2a:	4b29      	ldr	r3, [pc, #164]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e2c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016e2e:	4b29      	ldr	r3, [pc, #164]	; (8016ed4 <RadioSetRxConfig+0x414>)
 8016e30:	781a      	ldrb	r2, [r3, #0]
 8016e32:	4b27      	ldr	r3, [pc, #156]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e34:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016e36:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016e3a:	4b25      	ldr	r3, [pc, #148]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e3c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016e40:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016e44:	4b22      	ldr	r3, [pc, #136]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016e4a:	f000 fbdc 	bl	8017606 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016e4e:	4b20      	ldr	r3, [pc, #128]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	bf14      	ite	ne
 8016e58:	2301      	movne	r3, #1
 8016e5a:	2300      	moveq	r3, #0
 8016e5c:	b2db      	uxtb	r3, r3
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ff fd60 	bl	8016924 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e64:	481c      	ldr	r0, [pc, #112]	; (8016ed8 <RadioSetRxConfig+0x418>)
 8016e66:	f002 f86b 	bl	8018f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e6a:	481c      	ldr	r0, [pc, #112]	; (8016edc <RadioSetRxConfig+0x41c>)
 8016e6c:	f002 f934 	bl	80190d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016e70:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	4618      	mov	r0, r3
 8016e76:	f001 fe44 	bl	8018b02 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016e7a:	4b15      	ldr	r3, [pc, #84]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d10d      	bne.n	8016ea0 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016e84:	f240 7036 	movw	r0, #1846	; 0x736
 8016e88:	f002 fa82 	bl	8019390 <SUBGRF_ReadRegister>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	f023 0304 	bic.w	r3, r3, #4
 8016e92:	b2db      	uxtb	r3, r3
 8016e94:	4619      	mov	r1, r3
 8016e96:	f240 7036 	movw	r0, #1846	; 0x736
 8016e9a:	f002 fa65 	bl	8019368 <SUBGRF_WriteRegister>
 8016e9e:	e00c      	b.n	8016eba <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016ea0:	f240 7036 	movw	r0, #1846	; 0x736
 8016ea4:	f002 fa74 	bl	8019390 <SUBGRF_ReadRegister>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	f043 0304 	orr.w	r3, r3, #4
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	f240 7036 	movw	r0, #1846	; 0x736
 8016eb6:	f002 fa57 	bl	8019368 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016eba:	4b05      	ldr	r3, [pc, #20]	; (8016ed0 <RadioSetRxConfig+0x410>)
 8016ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ec0:	609a      	str	r2, [r3, #8]
            break;
 8016ec2:	e000      	b.n	8016ec6 <RadioSetRxConfig+0x406>
            break;
 8016ec4:	bf00      	nop
    }
}
 8016ec6:	bf00      	nop
 8016ec8:	3728      	adds	r7, #40	; 0x28
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd80      	pop	{r7, pc}
 8016ece:	bf00      	nop
 8016ed0:	200018bc 	.word	0x200018bc
 8016ed4:	20000120 	.word	0x20000120
 8016ed8:	200018f4 	.word	0x200018f4
 8016edc:	200018ca 	.word	0x200018ca

08016ee0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b086      	sub	sp, #24
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	60ba      	str	r2, [r7, #8]
 8016ee8:	607b      	str	r3, [r7, #4]
 8016eea:	4603      	mov	r3, r0
 8016eec:	73fb      	strb	r3, [r7, #15]
 8016eee:	460b      	mov	r3, r1
 8016ef0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016ef2:	f002 fd12 	bl	801991a <RFW_DeInit>
    switch( modem )
 8016ef6:	7bfb      	ldrb	r3, [r7, #15]
 8016ef8:	2b03      	cmp	r3, #3
 8016efa:	f000 80d7 	beq.w	80170ac <RadioSetTxConfig+0x1cc>
 8016efe:	2b03      	cmp	r3, #3
 8016f00:	f300 80e6 	bgt.w	80170d0 <RadioSetTxConfig+0x1f0>
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d002      	beq.n	8016f0e <RadioSetTxConfig+0x2e>
 8016f08:	2b01      	cmp	r3, #1
 8016f0a:	d061      	beq.n	8016fd0 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016f0c:	e0e0      	b.n	80170d0 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016f0e:	4b7c      	ldr	r3, [pc, #496]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f10:	2200      	movs	r2, #0
 8016f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016f16:	4a7a      	ldr	r2, [pc, #488]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f18:	6a3b      	ldr	r3, [r7, #32]
 8016f1a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016f1c:	4b78      	ldr	r3, [pc, #480]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f1e:	220b      	movs	r2, #11
 8016f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f002 fc29 	bl	801977c <SUBGRF_GetFskBandwidthRegValue>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	4b74      	ldr	r3, [pc, #464]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016f34:	4a72      	ldr	r2, [pc, #456]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f36:	68bb      	ldr	r3, [r7, #8]
 8016f38:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016f3a:	4b71      	ldr	r3, [pc, #452]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016f40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016f42:	00db      	lsls	r3, r3, #3
 8016f44:	b29a      	uxth	r2, r3
 8016f46:	4b6e      	ldr	r3, [pc, #440]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f48:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016f4a:	4b6d      	ldr	r3, [pc, #436]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f4c:	2204      	movs	r2, #4
 8016f4e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016f50:	4b6b      	ldr	r3, [pc, #428]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f52:	2218      	movs	r2, #24
 8016f54:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016f56:	4b6a      	ldr	r3, [pc, #424]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f58:	2200      	movs	r2, #0
 8016f5a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016f60:	f083 0301 	eor.w	r3, r3, #1
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	461a      	mov	r2, r3
 8016f68:	4b65      	ldr	r3, [pc, #404]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f6a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016f6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d003      	beq.n	8016f7c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016f74:	4b62      	ldr	r3, [pc, #392]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f76:	22f2      	movs	r2, #242	; 0xf2
 8016f78:	75da      	strb	r2, [r3, #23]
 8016f7a:	e002      	b.n	8016f82 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016f7c:	4b60      	ldr	r3, [pc, #384]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f7e:	2201      	movs	r2, #1
 8016f80:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016f82:	4b5f      	ldr	r3, [pc, #380]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f84:	2201      	movs	r2, #1
 8016f86:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016f88:	f000 fb3d 	bl	8017606 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016f8c:	4b5c      	ldr	r3, [pc, #368]	; (8017100 <RadioSetTxConfig+0x220>)
 8016f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	bf14      	ite	ne
 8016f96:	2301      	movne	r3, #1
 8016f98:	2300      	moveq	r3, #0
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	f7ff fcc1 	bl	8016924 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016fa2:	4858      	ldr	r0, [pc, #352]	; (8017104 <RadioSetTxConfig+0x224>)
 8016fa4:	f001 ffcc 	bl	8018f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016fa8:	4857      	ldr	r0, [pc, #348]	; (8017108 <RadioSetTxConfig+0x228>)
 8016faa:	f002 f895 	bl	80190d8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016fae:	4a57      	ldr	r2, [pc, #348]	; (801710c <RadioSetTxConfig+0x22c>)
 8016fb0:	f107 0310 	add.w	r3, r7, #16
 8016fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fbc:	f107 0310 	add.w	r3, r7, #16
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f001 fbc8 	bl	8018756 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016fca:	f001 fc13 	bl	80187f4 <SUBGRF_SetWhiteningSeed>
            break;
 8016fce:	e080      	b.n	80170d2 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016fd0:	4b4b      	ldr	r3, [pc, #300]	; (8017100 <RadioSetTxConfig+0x220>)
 8016fd2:	2201      	movs	r2, #1
 8016fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016fd8:	6a3b      	ldr	r3, [r7, #32]
 8016fda:	b2da      	uxtb	r2, r3
 8016fdc:	4b48      	ldr	r3, [pc, #288]	; (8017100 <RadioSetTxConfig+0x220>)
 8016fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016fe2:	4a4b      	ldr	r2, [pc, #300]	; (8017110 <RadioSetTxConfig+0x230>)
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	4413      	add	r3, r2
 8016fe8:	781a      	ldrb	r2, [r3, #0]
 8016fea:	4b45      	ldr	r3, [pc, #276]	; (8017100 <RadioSetTxConfig+0x220>)
 8016fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016ff0:	4a43      	ldr	r2, [pc, #268]	; (8017100 <RadioSetTxConfig+0x220>)
 8016ff2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ff6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d105      	bne.n	801700c <RadioSetTxConfig+0x12c>
 8017000:	6a3b      	ldr	r3, [r7, #32]
 8017002:	2b0b      	cmp	r3, #11
 8017004:	d008      	beq.n	8017018 <RadioSetTxConfig+0x138>
 8017006:	6a3b      	ldr	r3, [r7, #32]
 8017008:	2b0c      	cmp	r3, #12
 801700a:	d005      	beq.n	8017018 <RadioSetTxConfig+0x138>
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d107      	bne.n	8017022 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017012:	6a3b      	ldr	r3, [r7, #32]
 8017014:	2b0c      	cmp	r3, #12
 8017016:	d104      	bne.n	8017022 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017018:	4b39      	ldr	r3, [pc, #228]	; (8017100 <RadioSetTxConfig+0x220>)
 801701a:	2201      	movs	r2, #1
 801701c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8017020:	e003      	b.n	801702a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017022:	4b37      	ldr	r3, [pc, #220]	; (8017100 <RadioSetTxConfig+0x220>)
 8017024:	2200      	movs	r2, #0
 8017026:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801702a:	4b35      	ldr	r3, [pc, #212]	; (8017100 <RadioSetTxConfig+0x220>)
 801702c:	2201      	movs	r2, #1
 801702e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017030:	4b33      	ldr	r3, [pc, #204]	; (8017100 <RadioSetTxConfig+0x220>)
 8017032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8017036:	2b05      	cmp	r3, #5
 8017038:	d004      	beq.n	8017044 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801703a:	4b31      	ldr	r3, [pc, #196]	; (8017100 <RadioSetTxConfig+0x220>)
 801703c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017040:	2b06      	cmp	r3, #6
 8017042:	d10a      	bne.n	801705a <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8017044:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017046:	2b0b      	cmp	r3, #11
 8017048:	d803      	bhi.n	8017052 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801704a:	4b2d      	ldr	r3, [pc, #180]	; (8017100 <RadioSetTxConfig+0x220>)
 801704c:	220c      	movs	r2, #12
 801704e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017050:	e006      	b.n	8017060 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017052:	4a2b      	ldr	r2, [pc, #172]	; (8017100 <RadioSetTxConfig+0x220>)
 8017054:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017056:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017058:	e002      	b.n	8017060 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801705a:	4a29      	ldr	r2, [pc, #164]	; (8017100 <RadioSetTxConfig+0x220>)
 801705c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801705e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017060:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017064:	4b26      	ldr	r3, [pc, #152]	; (8017100 <RadioSetTxConfig+0x220>)
 8017066:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017068:	4b2a      	ldr	r3, [pc, #168]	; (8017114 <RadioSetTxConfig+0x234>)
 801706a:	781a      	ldrb	r2, [r3, #0]
 801706c:	4b24      	ldr	r3, [pc, #144]	; (8017100 <RadioSetTxConfig+0x220>)
 801706e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017070:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8017074:	4b22      	ldr	r3, [pc, #136]	; (8017100 <RadioSetTxConfig+0x220>)
 8017076:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801707a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801707e:	4b20      	ldr	r3, [pc, #128]	; (8017100 <RadioSetTxConfig+0x220>)
 8017080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8017084:	f000 fabf 	bl	8017606 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8017088:	4b1d      	ldr	r3, [pc, #116]	; (8017100 <RadioSetTxConfig+0x220>)
 801708a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801708e:	2b00      	cmp	r3, #0
 8017090:	bf14      	ite	ne
 8017092:	2301      	movne	r3, #1
 8017094:	2300      	moveq	r3, #0
 8017096:	b2db      	uxtb	r3, r3
 8017098:	4618      	mov	r0, r3
 801709a:	f7ff fc43 	bl	8016924 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801709e:	4819      	ldr	r0, [pc, #100]	; (8017104 <RadioSetTxConfig+0x224>)
 80170a0:	f001 ff4e 	bl	8018f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80170a4:	4818      	ldr	r0, [pc, #96]	; (8017108 <RadioSetTxConfig+0x228>)
 80170a6:	f002 f817 	bl	80190d8 <SUBGRF_SetPacketParams>
            break;
 80170aa:	e012      	b.n	80170d2 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80170ac:	2003      	movs	r0, #3
 80170ae:	f7ff fc39 	bl	8016924 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80170b2:	4b13      	ldr	r3, [pc, #76]	; (8017100 <RadioSetTxConfig+0x220>)
 80170b4:	2202      	movs	r2, #2
 80170b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80170ba:	4a11      	ldr	r2, [pc, #68]	; (8017100 <RadioSetTxConfig+0x220>)
 80170bc:	6a3b      	ldr	r3, [r7, #32]
 80170be:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80170c0:	4b0f      	ldr	r3, [pc, #60]	; (8017100 <RadioSetTxConfig+0x220>)
 80170c2:	2216      	movs	r2, #22
 80170c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80170c8:	480e      	ldr	r0, [pc, #56]	; (8017104 <RadioSetTxConfig+0x224>)
 80170ca:	f001 ff39 	bl	8018f40 <SUBGRF_SetModulationParams>
            break;
 80170ce:	e000      	b.n	80170d2 <RadioSetTxConfig+0x1f2>
            break;
 80170d0:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80170d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80170d6:	4618      	mov	r0, r3
 80170d8:	f002 fa62 	bl	80195a0 <SUBGRF_SetRfTxPower>
 80170dc:	4603      	mov	r3, r0
 80170de:	461a      	mov	r2, r3
 80170e0:	4b07      	ldr	r3, [pc, #28]	; (8017100 <RadioSetTxConfig+0x220>)
 80170e2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80170e6:	4b06      	ldr	r3, [pc, #24]	; (8017100 <RadioSetTxConfig+0x220>)
 80170e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80170ec:	4618      	mov	r0, r3
 80170ee:	f002 fc28 	bl	8019942 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80170f2:	4a03      	ldr	r2, [pc, #12]	; (8017100 <RadioSetTxConfig+0x220>)
 80170f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80170f6:	6053      	str	r3, [r2, #4]
}
 80170f8:	bf00      	nop
 80170fa:	3718      	adds	r7, #24
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}
 8017100:	200018bc 	.word	0x200018bc
 8017104:	200018f4 	.word	0x200018f4
 8017108:	200018ca 	.word	0x200018ca
 801710c:	0801b994 	.word	0x0801b994
 8017110:	0801bf94 	.word	0x0801bf94
 8017114:	20000120 	.word	0x20000120

08017118 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017118:	b480      	push	{r7}
 801711a:	b083      	sub	sp, #12
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
    return true;
 8017120:	2301      	movs	r3, #1
}
 8017122:	4618      	mov	r0, r3
 8017124:	370c      	adds	r7, #12
 8017126:	46bd      	mov	sp, r7
 8017128:	bc80      	pop	{r7}
 801712a:	4770      	bx	lr

0801712c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801712c:	b480      	push	{r7}
 801712e:	b085      	sub	sp, #20
 8017130:	af00      	add	r7, sp, #0
 8017132:	4603      	mov	r3, r0
 8017134:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017136:	2300      	movs	r3, #0
 8017138:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801713a:	79fb      	ldrb	r3, [r7, #7]
 801713c:	2b0a      	cmp	r3, #10
 801713e:	d83e      	bhi.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
 8017140:	a201      	add	r2, pc, #4	; (adr r2, 8017148 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017146:	bf00      	nop
 8017148:	08017175 	.word	0x08017175
 801714c:	08017185 	.word	0x08017185
 8017150:	08017195 	.word	0x08017195
 8017154:	080171a5 	.word	0x080171a5
 8017158:	080171ad 	.word	0x080171ad
 801715c:	080171b3 	.word	0x080171b3
 8017160:	080171b9 	.word	0x080171b9
 8017164:	080171bf 	.word	0x080171bf
 8017168:	0801717d 	.word	0x0801717d
 801716c:	0801718d 	.word	0x0801718d
 8017170:	0801719d 	.word	0x0801719d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017174:	f641 6384 	movw	r3, #7812	; 0x1e84
 8017178:	60fb      	str	r3, [r7, #12]
        break;
 801717a:	e020      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801717c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8017180:	60fb      	str	r3, [r7, #12]
        break;
 8017182:	e01c      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017184:	f643 5309 	movw	r3, #15625	; 0x3d09
 8017188:	60fb      	str	r3, [r7, #12]
        break;
 801718a:	e018      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801718c:	f245 1361 	movw	r3, #20833	; 0x5161
 8017190:	60fb      	str	r3, [r7, #12]
        break;
 8017192:	e014      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017194:	f647 2312 	movw	r3, #31250	; 0x7a12
 8017198:	60fb      	str	r3, [r7, #12]
        break;
 801719a:	e010      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801719c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80171a0:	60fb      	str	r3, [r7, #12]
        break;
 80171a2:	e00c      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80171a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80171a8:	60fb      	str	r3, [r7, #12]
        break;
 80171aa:	e008      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80171ac:	4b07      	ldr	r3, [pc, #28]	; (80171cc <RadioGetLoRaBandwidthInHz+0xa0>)
 80171ae:	60fb      	str	r3, [r7, #12]
        break;
 80171b0:	e005      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80171b2:	4b07      	ldr	r3, [pc, #28]	; (80171d0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80171b4:	60fb      	str	r3, [r7, #12]
        break;
 80171b6:	e002      	b.n	80171be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80171b8:	4b06      	ldr	r3, [pc, #24]	; (80171d4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80171ba:	60fb      	str	r3, [r7, #12]
        break;
 80171bc:	bf00      	nop
    }

    return bandwidthInHz;
 80171be:	68fb      	ldr	r3, [r7, #12]
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3714      	adds	r7, #20
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bc80      	pop	{r7}
 80171c8:	4770      	bx	lr
 80171ca:	bf00      	nop
 80171cc:	0001e848 	.word	0x0001e848
 80171d0:	0003d090 	.word	0x0003d090
 80171d4:	0007a120 	.word	0x0007a120

080171d8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80171d8:	b480      	push	{r7}
 80171da:	b083      	sub	sp, #12
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	4608      	mov	r0, r1
 80171e2:	4611      	mov	r1, r2
 80171e4:	461a      	mov	r2, r3
 80171e6:	4603      	mov	r3, r0
 80171e8:	70fb      	strb	r3, [r7, #3]
 80171ea:	460b      	mov	r3, r1
 80171ec:	803b      	strh	r3, [r7, #0]
 80171ee:	4613      	mov	r3, r2
 80171f0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80171f2:	883b      	ldrh	r3, [r7, #0]
 80171f4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80171f6:	78ba      	ldrb	r2, [r7, #2]
 80171f8:	f082 0201 	eor.w	r2, r2, #1
 80171fc:	b2d2      	uxtb	r2, r2
 80171fe:	2a00      	cmp	r2, #0
 8017200:	d001      	beq.n	8017206 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017202:	2208      	movs	r2, #8
 8017204:	e000      	b.n	8017208 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017206:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017208:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801720a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801720e:	7c3b      	ldrb	r3, [r7, #16]
 8017210:	7d39      	ldrb	r1, [r7, #20]
 8017212:	2900      	cmp	r1, #0
 8017214:	d001      	beq.n	801721a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017216:	2102      	movs	r1, #2
 8017218:	e000      	b.n	801721c <RadioGetGfskTimeOnAirNumerator+0x44>
 801721a:	2100      	movs	r1, #0
 801721c:	440b      	add	r3, r1
 801721e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017220:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017222:	4618      	mov	r0, r3
 8017224:	370c      	adds	r7, #12
 8017226:	46bd      	mov	sp, r7
 8017228:	bc80      	pop	{r7}
 801722a:	4770      	bx	lr

0801722c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801722c:	b480      	push	{r7}
 801722e:	b08b      	sub	sp, #44	; 0x2c
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	4611      	mov	r1, r2
 8017238:	461a      	mov	r2, r3
 801723a:	460b      	mov	r3, r1
 801723c:	71fb      	strb	r3, [r7, #7]
 801723e:	4613      	mov	r3, r2
 8017240:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017242:	79fb      	ldrb	r3, [r7, #7]
 8017244:	3304      	adds	r3, #4
 8017246:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017248:	2300      	movs	r3, #0
 801724a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	2b05      	cmp	r3, #5
 8017252:	d002      	beq.n	801725a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	2b06      	cmp	r3, #6
 8017258:	d104      	bne.n	8017264 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801725a:	88bb      	ldrh	r3, [r7, #4]
 801725c:	2b0b      	cmp	r3, #11
 801725e:	d801      	bhi.n	8017264 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017260:	230c      	movs	r3, #12
 8017262:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d105      	bne.n	8017276 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	2b0b      	cmp	r3, #11
 801726e:	d008      	beq.n	8017282 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	2b0c      	cmp	r3, #12
 8017274:	d005      	beq.n	8017282 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	2b01      	cmp	r3, #1
 801727a:	d105      	bne.n	8017288 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	2b0c      	cmp	r3, #12
 8017280:	d102      	bne.n	8017288 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017282:	2301      	movs	r3, #1
 8017284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017288:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801728c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801728e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017292:	2a00      	cmp	r2, #0
 8017294:	d001      	beq.n	801729a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017296:	2210      	movs	r2, #16
 8017298:	e000      	b.n	801729c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801729a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801729c:	4413      	add	r3, r2
 801729e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80172a4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80172a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80172aa:	2a00      	cmp	r2, #0
 80172ac:	d001      	beq.n	80172b2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80172ae:	2200      	movs	r2, #0
 80172b0:	e000      	b.n	80172b4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80172b2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80172b4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80172b6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	2b06      	cmp	r3, #6
 80172bc:	d803      	bhi.n	80172c6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	009b      	lsls	r3, r3, #2
 80172c2:	623b      	str	r3, [r7, #32]
 80172c4:	e00e      	b.n	80172e4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80172c6:	69fb      	ldr	r3, [r7, #28]
 80172c8:	3308      	adds	r3, #8
 80172ca:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80172cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d004      	beq.n	80172de <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	3b02      	subs	r3, #2
 80172d8:	009b      	lsls	r3, r3, #2
 80172da:	623b      	str	r3, [r7, #32]
 80172dc:	e002      	b.n	80172e4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	009b      	lsls	r3, r3, #2
 80172e2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80172e4:	69fb      	ldr	r3, [r7, #28]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	da01      	bge.n	80172ee <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80172ea:	2300      	movs	r3, #0
 80172ec:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80172ee:	69fa      	ldr	r2, [r7, #28]
 80172f0:	6a3b      	ldr	r3, [r7, #32]
 80172f2:	4413      	add	r3, r2
 80172f4:	1e5a      	subs	r2, r3, #1
 80172f6:	6a3b      	ldr	r3, [r7, #32]
 80172f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80172fc:	697a      	ldr	r2, [r7, #20]
 80172fe:	fb02 f203 	mul.w	r2, r2, r3
 8017302:	88bb      	ldrh	r3, [r7, #4]
 8017304:	4413      	add	r3, r2
    int32_t intermediate =
 8017306:	330c      	adds	r3, #12
 8017308:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	2b06      	cmp	r3, #6
 801730e:	d802      	bhi.n	8017316 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017310:	69bb      	ldr	r3, [r7, #24]
 8017312:	3302      	adds	r3, #2
 8017314:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017316:	69bb      	ldr	r3, [r7, #24]
 8017318:	009b      	lsls	r3, r3, #2
 801731a:	1c5a      	adds	r2, r3, #1
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	3b02      	subs	r3, #2
 8017320:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017324:	4618      	mov	r0, r3
 8017326:	372c      	adds	r7, #44	; 0x2c
 8017328:	46bd      	mov	sp, r7
 801732a:	bc80      	pop	{r7}
 801732c:	4770      	bx	lr
	...

08017330 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b08a      	sub	sp, #40	; 0x28
 8017334:	af04      	add	r7, sp, #16
 8017336:	60b9      	str	r1, [r7, #8]
 8017338:	607a      	str	r2, [r7, #4]
 801733a:	461a      	mov	r2, r3
 801733c:	4603      	mov	r3, r0
 801733e:	73fb      	strb	r3, [r7, #15]
 8017340:	4613      	mov	r3, r2
 8017342:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017344:	2300      	movs	r3, #0
 8017346:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017348:	2301      	movs	r3, #1
 801734a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801734c:	7bfb      	ldrb	r3, [r7, #15]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d002      	beq.n	8017358 <RadioTimeOnAir+0x28>
 8017352:	2b01      	cmp	r3, #1
 8017354:	d017      	beq.n	8017386 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017356:	e035      	b.n	80173c4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017358:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801735c:	8c3a      	ldrh	r2, [r7, #32]
 801735e:	7bb9      	ldrb	r1, [r7, #14]
 8017360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017364:	9301      	str	r3, [sp, #4]
 8017366:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801736a:	9300      	str	r3, [sp, #0]
 801736c:	4603      	mov	r3, r0
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f7ff ff32 	bl	80171d8 <RadioGetGfskTimeOnAirNumerator>
 8017374:	4603      	mov	r3, r0
 8017376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801737a:	fb02 f303 	mul.w	r3, r2, r3
 801737e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	613b      	str	r3, [r7, #16]
        break;
 8017384:	e01e      	b.n	80173c4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017386:	8c39      	ldrh	r1, [r7, #32]
 8017388:	7bba      	ldrb	r2, [r7, #14]
 801738a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801738e:	9302      	str	r3, [sp, #8]
 8017390:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017394:	9301      	str	r3, [sp, #4]
 8017396:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	460b      	mov	r3, r1
 801739e:	6879      	ldr	r1, [r7, #4]
 80173a0:	68b8      	ldr	r0, [r7, #8]
 80173a2:	f7ff ff43 	bl	801722c <RadioGetLoRaTimeOnAirNumerator>
 80173a6:	4603      	mov	r3, r0
 80173a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80173ac:	fb02 f303 	mul.w	r3, r2, r3
 80173b0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80173b2:	4a0a      	ldr	r2, [pc, #40]	; (80173dc <RadioTimeOnAir+0xac>)
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	4413      	add	r3, r2
 80173b8:	781b      	ldrb	r3, [r3, #0]
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7ff feb6 	bl	801712c <RadioGetLoRaBandwidthInHz>
 80173c0:	6138      	str	r0, [r7, #16]
        break;
 80173c2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 80173c4:	697a      	ldr	r2, [r7, #20]
 80173c6:	693b      	ldr	r3, [r7, #16]
 80173c8:	4413      	add	r3, r2
 80173ca:	1e5a      	subs	r2, r3, #1
 80173cc:	693b      	ldr	r3, [r7, #16]
 80173ce:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3718      	adds	r7, #24
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
 80173da:	bf00      	nop
 80173dc:	0801bf94 	.word	0x0801bf94

080173e0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
 80173e8:	460b      	mov	r3, r1
 80173ea:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80173ec:	2300      	movs	r3, #0
 80173ee:	2200      	movs	r2, #0
 80173f0:	f240 2101 	movw	r1, #513	; 0x201
 80173f4:	f240 2001 	movw	r0, #513	; 0x201
 80173f8:	f001 fc78 	bl	8018cec <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 80173fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017400:	4871      	ldr	r0, [pc, #452]	; (80175c8 <RadioSend+0x1e8>)
 8017402:	f7ff fa07 	bl	8016814 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8017406:	4b71      	ldr	r3, [pc, #452]	; (80175cc <RadioSend+0x1ec>)
 8017408:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801740c:	2101      	movs	r1, #1
 801740e:	4618      	mov	r0, r3
 8017410:	f002 f89e 	bl	8019550 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017414:	4b6d      	ldr	r3, [pc, #436]	; (80175cc <RadioSend+0x1ec>)
 8017416:	781b      	ldrb	r3, [r3, #0]
 8017418:	2b01      	cmp	r3, #1
 801741a:	d112      	bne.n	8017442 <RadioSend+0x62>
 801741c:	4b6b      	ldr	r3, [pc, #428]	; (80175cc <RadioSend+0x1ec>)
 801741e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017422:	2b06      	cmp	r3, #6
 8017424:	d10d      	bne.n	8017442 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8017426:	f640 0089 	movw	r0, #2185	; 0x889
 801742a:	f001 ffb1 	bl	8019390 <SUBGRF_ReadRegister>
 801742e:	4603      	mov	r3, r0
 8017430:	f023 0304 	bic.w	r3, r3, #4
 8017434:	b2db      	uxtb	r3, r3
 8017436:	4619      	mov	r1, r3
 8017438:	f640 0089 	movw	r0, #2185	; 0x889
 801743c:	f001 ff94 	bl	8019368 <SUBGRF_WriteRegister>
 8017440:	e00c      	b.n	801745c <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8017442:	f640 0089 	movw	r0, #2185	; 0x889
 8017446:	f001 ffa3 	bl	8019390 <SUBGRF_ReadRegister>
 801744a:	4603      	mov	r3, r0
 801744c:	f043 0304 	orr.w	r3, r3, #4
 8017450:	b2db      	uxtb	r3, r3
 8017452:	4619      	mov	r1, r3
 8017454:	f640 0089 	movw	r0, #2185	; 0x889
 8017458:	f001 ff86 	bl	8019368 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 801745c:	4b5b      	ldr	r3, [pc, #364]	; (80175cc <RadioSend+0x1ec>)
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	2b03      	cmp	r3, #3
 8017462:	f200 80a4 	bhi.w	80175ae <RadioSend+0x1ce>
 8017466:	a201      	add	r2, pc, #4	; (adr r2, 801746c <RadioSend+0x8c>)
 8017468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801746c:	08017497 	.word	0x08017497
 8017470:	0801747d 	.word	0x0801747d
 8017474:	080174f7 	.word	0x080174f7
 8017478:	08017517 	.word	0x08017517
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801747c:	4a53      	ldr	r2, [pc, #332]	; (80175cc <RadioSend+0x1ec>)
 801747e:	78fb      	ldrb	r3, [r7, #3]
 8017480:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017482:	4853      	ldr	r0, [pc, #332]	; (80175d0 <RadioSend+0x1f0>)
 8017484:	f001 fe28 	bl	80190d8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017488:	78fb      	ldrb	r3, [r7, #3]
 801748a:	2200      	movs	r2, #0
 801748c:	4619      	mov	r1, r3
 801748e:	6878      	ldr	r0, [r7, #4]
 8017490:	f001 f94e 	bl	8018730 <SUBGRF_SendPayload>
            break;
 8017494:	e08c      	b.n	80175b0 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017496:	f002 fa46 	bl	8019926 <RFW_Is_Init>
 801749a:	4603      	mov	r3, r0
 801749c:	2b01      	cmp	r3, #1
 801749e:	d11d      	bne.n	80174dc <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80174a0:	f107 020d 	add.w	r2, r7, #13
 80174a4:	78fb      	ldrb	r3, [r7, #3]
 80174a6:	4619      	mov	r1, r3
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	f002 fa54 	bl	8019956 <RFW_TransmitInit>
 80174ae:	4603      	mov	r3, r0
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d10c      	bne.n	80174ce <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80174b4:	7b7a      	ldrb	r2, [r7, #13]
 80174b6:	4b45      	ldr	r3, [pc, #276]	; (80175cc <RadioSend+0x1ec>)
 80174b8:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174ba:	4845      	ldr	r0, [pc, #276]	; (80175d0 <RadioSend+0x1f0>)
 80174bc:	f001 fe0c 	bl	80190d8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80174c0:	7b7b      	ldrb	r3, [r7, #13]
 80174c2:	2200      	movs	r2, #0
 80174c4:	4619      	mov	r1, r3
 80174c6:	6878      	ldr	r0, [r7, #4]
 80174c8:	f001 f932 	bl	8018730 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80174cc:	e070      	b.n	80175b0 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80174ce:	4b41      	ldr	r3, [pc, #260]	; (80175d4 <RadioSend+0x1f4>)
 80174d0:	2201      	movs	r2, #1
 80174d2:	2100      	movs	r1, #0
 80174d4:	2002      	movs	r0, #2
 80174d6:	f003 fb4b 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
 80174da:	e072      	b.n	80175c2 <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80174dc:	4a3b      	ldr	r2, [pc, #236]	; (80175cc <RadioSend+0x1ec>)
 80174de:	78fb      	ldrb	r3, [r7, #3]
 80174e0:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174e2:	483b      	ldr	r0, [pc, #236]	; (80175d0 <RadioSend+0x1f0>)
 80174e4:	f001 fdf8 	bl	80190d8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80174e8:	78fb      	ldrb	r3, [r7, #3]
 80174ea:	2200      	movs	r2, #0
 80174ec:	4619      	mov	r1, r3
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f001 f91e 	bl	8018730 <SUBGRF_SendPayload>
            break;
 80174f4:	e05c      	b.n	80175b0 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80174f6:	4b35      	ldr	r3, [pc, #212]	; (80175cc <RadioSend+0x1ec>)
 80174f8:	2202      	movs	r2, #2
 80174fa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80174fc:	4a33      	ldr	r2, [pc, #204]	; (80175cc <RadioSend+0x1ec>)
 80174fe:	78fb      	ldrb	r3, [r7, #3]
 8017500:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017502:	4833      	ldr	r0, [pc, #204]	; (80175d0 <RadioSend+0x1f0>)
 8017504:	f001 fde8 	bl	80190d8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017508:	78fb      	ldrb	r3, [r7, #3]
 801750a:	2200      	movs	r2, #0
 801750c:	4619      	mov	r1, r3
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f001 f90e 	bl	8018730 <SUBGRF_SendPayload>
            break;
 8017514:	e04c      	b.n	80175b0 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017516:	78fb      	ldrb	r3, [r7, #3]
 8017518:	461a      	mov	r2, r3
 801751a:	6879      	ldr	r1, [r7, #4]
 801751c:	482e      	ldr	r0, [pc, #184]	; (80175d8 <RadioSend+0x1f8>)
 801751e:	f000 fc8e 	bl	8017e3e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017522:	4b2a      	ldr	r3, [pc, #168]	; (80175cc <RadioSend+0x1ec>)
 8017524:	2202      	movs	r2, #2
 8017526:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017528:	78fb      	ldrb	r3, [r7, #3]
 801752a:	3301      	adds	r3, #1
 801752c:	b2da      	uxtb	r2, r3
 801752e:	4b27      	ldr	r3, [pc, #156]	; (80175cc <RadioSend+0x1ec>)
 8017530:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017532:	4827      	ldr	r0, [pc, #156]	; (80175d0 <RadioSend+0x1f0>)
 8017534:	f001 fdd0 	bl	80190d8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8017538:	2100      	movs	r1, #0
 801753a:	20f1      	movs	r0, #241	; 0xf1
 801753c:	f000 f94f 	bl	80177de <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8017540:	2100      	movs	r1, #0
 8017542:	20f0      	movs	r0, #240	; 0xf0
 8017544:	f000 f94b 	bl	80177de <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017548:	4b20      	ldr	r3, [pc, #128]	; (80175cc <RadioSend+0x1ec>)
 801754a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801754c:	2b64      	cmp	r3, #100	; 0x64
 801754e:	d108      	bne.n	8017562 <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8017550:	2170      	movs	r1, #112	; 0x70
 8017552:	20f3      	movs	r0, #243	; 0xf3
 8017554:	f000 f943 	bl	80177de <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8017558:	211d      	movs	r1, #29
 801755a:	20f2      	movs	r0, #242	; 0xf2
 801755c:	f000 f93f 	bl	80177de <RadioWrite>
 8017560:	e007      	b.n	8017572 <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8017562:	21e1      	movs	r1, #225	; 0xe1
 8017564:	20f3      	movs	r0, #243	; 0xf3
 8017566:	f000 f93a 	bl	80177de <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801756a:	2104      	movs	r1, #4
 801756c:	20f2      	movs	r0, #242	; 0xf2
 801756e:	f000 f936 	bl	80177de <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017572:	78fb      	ldrb	r3, [r7, #3]
 8017574:	b29b      	uxth	r3, r3
 8017576:	00db      	lsls	r3, r3, #3
 8017578:	b29b      	uxth	r3, r3
 801757a:	3302      	adds	r3, #2
 801757c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801757e:	89fb      	ldrh	r3, [r7, #14]
 8017580:	0a1b      	lsrs	r3, r3, #8
 8017582:	b29b      	uxth	r3, r3
 8017584:	b2db      	uxtb	r3, r3
 8017586:	4619      	mov	r1, r3
 8017588:	20f4      	movs	r0, #244	; 0xf4
 801758a:	f000 f928 	bl	80177de <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801758e:	89fb      	ldrh	r3, [r7, #14]
 8017590:	b2db      	uxtb	r3, r3
 8017592:	4619      	mov	r1, r3
 8017594:	20f5      	movs	r0, #245	; 0xf5
 8017596:	f000 f922 	bl	80177de <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801759a:	78fb      	ldrb	r3, [r7, #3]
 801759c:	3301      	adds	r3, #1
 801759e:	b2db      	uxtb	r3, r3
 80175a0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80175a4:	4619      	mov	r1, r3
 80175a6:	480c      	ldr	r0, [pc, #48]	; (80175d8 <RadioSend+0x1f8>)
 80175a8:	f001 f8c2 	bl	8018730 <SUBGRF_SendPayload>
            break;
 80175ac:	e000      	b.n	80175b0 <RadioSend+0x1d0>
        }
        default:
            break;
 80175ae:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80175b0:	4b06      	ldr	r3, [pc, #24]	; (80175cc <RadioSend+0x1ec>)
 80175b2:	685b      	ldr	r3, [r3, #4]
 80175b4:	4619      	mov	r1, r3
 80175b6:	4809      	ldr	r0, [pc, #36]	; (80175dc <RadioSend+0x1fc>)
 80175b8:	f003 f940 	bl	801a83c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80175bc:	4807      	ldr	r0, [pc, #28]	; (80175dc <RadioSend+0x1fc>)
 80175be:	f003 f85f 	bl	801a680 <UTIL_TIMER_Start>
}
 80175c2:	3710      	adds	r7, #16
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	48000400 	.word	0x48000400
 80175cc:	200018bc 	.word	0x200018bc
 80175d0:	200018ca 	.word	0x200018ca
 80175d4:	0801b99c 	.word	0x0801b99c
 80175d8:	20000ed0 	.word	0x20000ed0
 80175dc:	20001914 	.word	0x20001914

080175e0 <RadioSleep>:

static void RadioSleep( void )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80175e6:	2300      	movs	r3, #0
 80175e8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80175ea:	793b      	ldrb	r3, [r7, #4]
 80175ec:	f043 0304 	orr.w	r3, r3, #4
 80175f0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80175f2:	7938      	ldrb	r0, [r7, #4]
 80175f4:	f001 f978 	bl	80188e8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80175f8:	2002      	movs	r0, #2
 80175fa:	f7ea fd22 	bl	8002042 <HAL_Delay>
}
 80175fe:	bf00      	nop
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}

08017606 <RadioStandby>:

static void RadioStandby( void )
{
 8017606:	b580      	push	{r7, lr}
 8017608:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801760a:	2000      	movs	r0, #0
 801760c:	f001 f99e 	bl	801894c <SUBGRF_SetStandby>
}
 8017610:	bf00      	nop
 8017612:	bd80      	pop	{r7, pc}

08017614 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 801761c:	f002 f983 	bl	8019926 <RFW_Is_Init>
 8017620:	4603      	mov	r3, r0
 8017622:	2b01      	cmp	r3, #1
 8017624:	d102      	bne.n	801762c <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8017626:	f002 f9a6 	bl	8019976 <RFW_ReceiveInit>
 801762a:	e007      	b.n	801763c <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801762c:	2300      	movs	r3, #0
 801762e:	2200      	movs	r2, #0
 8017630:	f240 2162 	movw	r1, #610	; 0x262
 8017634:	f240 2062 	movw	r0, #610	; 0x262
 8017638:	f001 fb58 	bl	8018cec <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d006      	beq.n	8017650 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017642:	6879      	ldr	r1, [r7, #4]
 8017644:	4812      	ldr	r0, [pc, #72]	; (8017690 <RadioRx+0x7c>)
 8017646:	f003 f8f9 	bl	801a83c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801764a:	4811      	ldr	r0, [pc, #68]	; (8017690 <RadioRx+0x7c>)
 801764c:	f003 f818 	bl	801a680 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 8017650:	2101      	movs	r1, #1
 8017652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017656:	f7ff f8dd 	bl	8016814 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801765a:	4b0e      	ldr	r3, [pc, #56]	; (8017694 <RadioRx+0x80>)
 801765c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017660:	2100      	movs	r1, #0
 8017662:	4618      	mov	r0, r3
 8017664:	f001 ff74 	bl	8019550 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017668:	4b0a      	ldr	r3, [pc, #40]	; (8017694 <RadioRx+0x80>)
 801766a:	785b      	ldrb	r3, [r3, #1]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d004      	beq.n	801767a <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017670:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017674:	f001 f9a6 	bl	80189c4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017678:	e005      	b.n	8017686 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801767a:	4b06      	ldr	r3, [pc, #24]	; (8017694 <RadioRx+0x80>)
 801767c:	689b      	ldr	r3, [r3, #8]
 801767e:	019b      	lsls	r3, r3, #6
 8017680:	4618      	mov	r0, r3
 8017682:	f001 f99f 	bl	80189c4 <SUBGRF_SetRx>
}
 8017686:	bf00      	nop
 8017688:	3708      	adds	r7, #8
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop
 8017690:	2000192c 	.word	0x2000192c
 8017694:	200018bc 	.word	0x200018bc

08017698 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 80176a0:	f002 f941 	bl	8019926 <RFW_Is_Init>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b01      	cmp	r3, #1
 80176a8:	d102      	bne.n	80176b0 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 80176aa:	f002 f964 	bl	8019976 <RFW_ReceiveInit>
 80176ae:	e007      	b.n	80176c0 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80176b0:	2300      	movs	r3, #0
 80176b2:	2200      	movs	r2, #0
 80176b4:	f240 2162 	movw	r1, #610	; 0x262
 80176b8:	f240 2062 	movw	r0, #610	; 0x262
 80176bc:	f001 fb16 	bl	8018cec <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d006      	beq.n	80176d4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80176c6:	6879      	ldr	r1, [r7, #4]
 80176c8:	480f      	ldr	r0, [pc, #60]	; (8017708 <RadioRxBoosted+0x70>)
 80176ca:	f003 f8b7 	bl	801a83c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80176ce:	480e      	ldr	r0, [pc, #56]	; (8017708 <RadioRxBoosted+0x70>)
 80176d0:	f002 ffd6 	bl	801a680 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80176d4:	4b0d      	ldr	r3, [pc, #52]	; (801770c <RadioRxBoosted+0x74>)
 80176d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80176da:	2100      	movs	r1, #0
 80176dc:	4618      	mov	r0, r3
 80176de:	f001 ff37 	bl	8019550 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80176e2:	4b0a      	ldr	r3, [pc, #40]	; (801770c <RadioRxBoosted+0x74>)
 80176e4:	785b      	ldrb	r3, [r3, #1]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d004      	beq.n	80176f4 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80176ea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80176ee:	f001 f989 	bl	8018a04 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80176f2:	e005      	b.n	8017700 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80176f4:	4b05      	ldr	r3, [pc, #20]	; (801770c <RadioRxBoosted+0x74>)
 80176f6:	689b      	ldr	r3, [r3, #8]
 80176f8:	019b      	lsls	r3, r3, #6
 80176fa:	4618      	mov	r0, r3
 80176fc:	f001 f982 	bl	8018a04 <SUBGRF_SetRxBoosted>
}
 8017700:	bf00      	nop
 8017702:	3708      	adds	r7, #8
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}
 8017708:	2000192c 	.word	0x2000192c
 801770c:	200018bc 	.word	0x200018bc

08017710 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801771a:	4b07      	ldr	r3, [pc, #28]	; (8017738 <RadioSetRxDutyCycle+0x28>)
 801771c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017720:	2100      	movs	r1, #0
 8017722:	4618      	mov	r0, r3
 8017724:	f001 ff14 	bl	8019550 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017728:	6839      	ldr	r1, [r7, #0]
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f001 f98e 	bl	8018a4c <SUBGRF_SetRxDutyCycle>
}
 8017730:	bf00      	nop
 8017732:	3708      	adds	r7, #8
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}
 8017738:	200018bc 	.word	0x200018bc

0801773c <RadioStartCad>:

static void RadioStartCad( void )
{
 801773c:	b580      	push	{r7, lr}
 801773e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017740:	4b09      	ldr	r3, [pc, #36]	; (8017768 <RadioStartCad+0x2c>)
 8017742:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017746:	2100      	movs	r1, #0
 8017748:	4618      	mov	r0, r3
 801774a:	f001 ff01 	bl	8019550 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801774e:	2300      	movs	r3, #0
 8017750:	2200      	movs	r2, #0
 8017752:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017756:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801775a:	f001 fac7 	bl	8018cec <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801775e:	f001 f9a1 	bl	8018aa4 <SUBGRF_SetCad>
}
 8017762:	bf00      	nop
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	200018bc 	.word	0x200018bc

0801776c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	460b      	mov	r3, r1
 8017776:	70fb      	strb	r3, [r7, #3]
 8017778:	4613      	mov	r3, r2
 801777a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801777c:	883b      	ldrh	r3, [r7, #0]
 801777e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017782:	fb02 f303 	mul.w	r3, r2, r3
 8017786:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f001 fb0b 	bl	8018da4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801778e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017792:	4618      	mov	r0, r3
 8017794:	f001 ff04 	bl	80195a0 <SUBGRF_SetRfTxPower>
 8017798:	4603      	mov	r3, r0
 801779a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 801779c:	7afb      	ldrb	r3, [r7, #11]
 801779e:	2101      	movs	r1, #1
 80177a0:	4618      	mov	r0, r3
 80177a2:	f001 fed5 	bl	8019550 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80177a6:	f001 f98b 	bl	8018ac0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80177aa:	68f9      	ldr	r1, [r7, #12]
 80177ac:	4804      	ldr	r0, [pc, #16]	; (80177c0 <RadioSetTxContinuousWave+0x54>)
 80177ae:	f003 f845 	bl	801a83c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80177b2:	4803      	ldr	r0, [pc, #12]	; (80177c0 <RadioSetTxContinuousWave+0x54>)
 80177b4:	f002 ff64 	bl	801a680 <UTIL_TIMER_Start>
}
 80177b8:	bf00      	nop
 80177ba:	3710      	adds	r7, #16
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	20001914 	.word	0x20001914

080177c4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b082      	sub	sp, #8
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	4603      	mov	r3, r0
 80177cc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80177ce:	f001 fd38 	bl	8019242 <SUBGRF_GetRssiInst>
 80177d2:	4603      	mov	r3, r0
 80177d4:	b21b      	sxth	r3, r3
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3708      	adds	r7, #8
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}

080177de <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80177de:	b580      	push	{r7, lr}
 80177e0:	b082      	sub	sp, #8
 80177e2:	af00      	add	r7, sp, #0
 80177e4:	4603      	mov	r3, r0
 80177e6:	460a      	mov	r2, r1
 80177e8:	80fb      	strh	r3, [r7, #6]
 80177ea:	4613      	mov	r3, r2
 80177ec:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80177ee:	797a      	ldrb	r2, [r7, #5]
 80177f0:	88fb      	ldrh	r3, [r7, #6]
 80177f2:	4611      	mov	r1, r2
 80177f4:	4618      	mov	r0, r3
 80177f6:	f001 fdb7 	bl	8019368 <SUBGRF_WriteRegister>
}
 80177fa:	bf00      	nop
 80177fc:	3708      	adds	r7, #8
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}

08017802 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017802:	b580      	push	{r7, lr}
 8017804:	b082      	sub	sp, #8
 8017806:	af00      	add	r7, sp, #0
 8017808:	4603      	mov	r3, r0
 801780a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 801780c:	88fb      	ldrh	r3, [r7, #6]
 801780e:	4618      	mov	r0, r3
 8017810:	f001 fdbe 	bl	8019390 <SUBGRF_ReadRegister>
 8017814:	4603      	mov	r3, r0
}
 8017816:	4618      	mov	r0, r3
 8017818:	3708      	adds	r7, #8
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801781e:	b580      	push	{r7, lr}
 8017820:	b082      	sub	sp, #8
 8017822:	af00      	add	r7, sp, #0
 8017824:	4603      	mov	r3, r0
 8017826:	6039      	str	r1, [r7, #0]
 8017828:	80fb      	strh	r3, [r7, #6]
 801782a:	4613      	mov	r3, r2
 801782c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801782e:	797b      	ldrb	r3, [r7, #5]
 8017830:	b29a      	uxth	r2, r3
 8017832:	88fb      	ldrh	r3, [r7, #6]
 8017834:	6839      	ldr	r1, [r7, #0]
 8017836:	4618      	mov	r0, r3
 8017838:	f001 fdbe 	bl	80193b8 <SUBGRF_WriteRegisters>
}
 801783c:	bf00      	nop
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b082      	sub	sp, #8
 8017848:	af00      	add	r7, sp, #0
 801784a:	4603      	mov	r3, r0
 801784c:	6039      	str	r1, [r7, #0]
 801784e:	80fb      	strh	r3, [r7, #6]
 8017850:	4613      	mov	r3, r2
 8017852:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017854:	797b      	ldrb	r3, [r7, #5]
 8017856:	b29a      	uxth	r2, r3
 8017858:	88fb      	ldrh	r3, [r7, #6]
 801785a:	6839      	ldr	r1, [r7, #0]
 801785c:	4618      	mov	r0, r3
 801785e:	f001 fdcd 	bl	80193fc <SUBGRF_ReadRegisters>
}
 8017862:	bf00      	nop
 8017864:	3708      	adds	r7, #8
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
	...

0801786c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	4603      	mov	r3, r0
 8017874:	460a      	mov	r2, r1
 8017876:	71fb      	strb	r3, [r7, #7]
 8017878:	4613      	mov	r3, r2
 801787a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801787c:	79fb      	ldrb	r3, [r7, #7]
 801787e:	2b01      	cmp	r3, #1
 8017880:	d10a      	bne.n	8017898 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017882:	4a0e      	ldr	r2, [pc, #56]	; (80178bc <RadioSetMaxPayloadLength+0x50>)
 8017884:	79bb      	ldrb	r3, [r7, #6]
 8017886:	7013      	strb	r3, [r2, #0]
 8017888:	4b0c      	ldr	r3, [pc, #48]	; (80178bc <RadioSetMaxPayloadLength+0x50>)
 801788a:	781a      	ldrb	r2, [r3, #0]
 801788c:	4b0c      	ldr	r3, [pc, #48]	; (80178c0 <RadioSetMaxPayloadLength+0x54>)
 801788e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017890:	480c      	ldr	r0, [pc, #48]	; (80178c4 <RadioSetMaxPayloadLength+0x58>)
 8017892:	f001 fc21 	bl	80190d8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017896:	e00d      	b.n	80178b4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017898:	4b09      	ldr	r3, [pc, #36]	; (80178c0 <RadioSetMaxPayloadLength+0x54>)
 801789a:	7d5b      	ldrb	r3, [r3, #21]
 801789c:	2b01      	cmp	r3, #1
 801789e:	d109      	bne.n	80178b4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80178a0:	4a06      	ldr	r2, [pc, #24]	; (80178bc <RadioSetMaxPayloadLength+0x50>)
 80178a2:	79bb      	ldrb	r3, [r7, #6]
 80178a4:	7013      	strb	r3, [r2, #0]
 80178a6:	4b05      	ldr	r3, [pc, #20]	; (80178bc <RadioSetMaxPayloadLength+0x50>)
 80178a8:	781a      	ldrb	r2, [r3, #0]
 80178aa:	4b05      	ldr	r3, [pc, #20]	; (80178c0 <RadioSetMaxPayloadLength+0x54>)
 80178ac:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178ae:	4805      	ldr	r0, [pc, #20]	; (80178c4 <RadioSetMaxPayloadLength+0x58>)
 80178b0:	f001 fc12 	bl	80190d8 <SUBGRF_SetPacketParams>
}
 80178b4:	bf00      	nop
 80178b6:	3708      	adds	r7, #8
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	20000120 	.word	0x20000120
 80178c0:	200018bc 	.word	0x200018bc
 80178c4:	200018ca 	.word	0x200018ca

080178c8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b082      	sub	sp, #8
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	4603      	mov	r3, r0
 80178d0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80178d2:	4a13      	ldr	r2, [pc, #76]	; (8017920 <RadioSetPublicNetwork+0x58>)
 80178d4:	79fb      	ldrb	r3, [r7, #7]
 80178d6:	7313      	strb	r3, [r2, #12]
 80178d8:	4b11      	ldr	r3, [pc, #68]	; (8017920 <RadioSetPublicNetwork+0x58>)
 80178da:	7b1a      	ldrb	r2, [r3, #12]
 80178dc:	4b10      	ldr	r3, [pc, #64]	; (8017920 <RadioSetPublicNetwork+0x58>)
 80178de:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80178e0:	2001      	movs	r0, #1
 80178e2:	f7ff f81f 	bl	8016924 <RadioSetModem>
    if( enable == true )
 80178e6:	79fb      	ldrb	r3, [r7, #7]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d00a      	beq.n	8017902 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80178ec:	2134      	movs	r1, #52	; 0x34
 80178ee:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80178f2:	f001 fd39 	bl	8019368 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80178f6:	2144      	movs	r1, #68	; 0x44
 80178f8:	f240 7041 	movw	r0, #1857	; 0x741
 80178fc:	f001 fd34 	bl	8019368 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017900:	e009      	b.n	8017916 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017902:	2114      	movs	r1, #20
 8017904:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017908:	f001 fd2e 	bl	8019368 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801790c:	2124      	movs	r1, #36	; 0x24
 801790e:	f240 7041 	movw	r0, #1857	; 0x741
 8017912:	f001 fd29 	bl	8019368 <SUBGRF_WriteRegister>
}
 8017916:	bf00      	nop
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
 801791e:	bf00      	nop
 8017920:	200018bc 	.word	0x200018bc

08017924 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017924:	b580      	push	{r7, lr}
 8017926:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017928:	f001 fe6e 	bl	8019608 <SUBGRF_GetRadioWakeUpTime>
 801792c:	4603      	mov	r3, r0
 801792e:	3303      	adds	r3, #3
}
 8017930:	4618      	mov	r0, r3
 8017932:	bd80      	pop	{r7, pc}

08017934 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801793c:	f000 f80e 	bl	801795c <RadioOnTxTimeoutProcess>
}
 8017940:	bf00      	nop
 8017942:	3708      	adds	r7, #8
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}

08017948 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b082      	sub	sp, #8
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017950:	f000 f81e 	bl	8017990 <RadioOnRxTimeoutProcess>
}
 8017954:	bf00      	nop
 8017956:	3708      	adds	r7, #8
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801795c:	b580      	push	{r7, lr}
 801795e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 8017960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017964:	4808      	ldr	r0, [pc, #32]	; (8017988 <RadioOnTxTimeoutProcess+0x2c>)
 8017966:	f7fe ff62 	bl	801682e <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801796a:	4b08      	ldr	r3, [pc, #32]	; (801798c <RadioOnTxTimeoutProcess+0x30>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d008      	beq.n	8017984 <RadioOnTxTimeoutProcess+0x28>
 8017972:	4b06      	ldr	r3, [pc, #24]	; (801798c <RadioOnTxTimeoutProcess+0x30>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d003      	beq.n	8017984 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 801797c:	4b03      	ldr	r3, [pc, #12]	; (801798c <RadioOnTxTimeoutProcess+0x30>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	685b      	ldr	r3, [r3, #4]
 8017982:	4798      	blx	r3
    }
}
 8017984:	bf00      	nop
 8017986:	bd80      	pop	{r7, pc}
 8017988:	48000400 	.word	0x48000400
 801798c:	20000fd0 	.word	0x20000fd0

08017990 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017990:	b580      	push	{r7, lr}
 8017992:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017994:	2101      	movs	r1, #1
 8017996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801799a:	f7fe ff48 	bl	801682e <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801799e:	4b07      	ldr	r3, [pc, #28]	; (80179bc <RadioOnRxTimeoutProcess+0x2c>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d008      	beq.n	80179b8 <RadioOnRxTimeoutProcess+0x28>
 80179a6:	4b05      	ldr	r3, [pc, #20]	; (80179bc <RadioOnRxTimeoutProcess+0x2c>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	68db      	ldr	r3, [r3, #12]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d003      	beq.n	80179b8 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 80179b0:	4b02      	ldr	r3, [pc, #8]	; (80179bc <RadioOnRxTimeoutProcess+0x2c>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	68db      	ldr	r3, [r3, #12]
 80179b6:	4798      	blx	r3
    }
}
 80179b8:	bf00      	nop
 80179ba:	bd80      	pop	{r7, pc}
 80179bc:	20000fd0 	.word	0x20000fd0

080179c0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	4603      	mov	r3, r0
 80179c8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80179ca:	4a05      	ldr	r2, [pc, #20]	; (80179e0 <RadioOnDioIrq+0x20>)
 80179cc:	88fb      	ldrh	r3, [r7, #6]
 80179ce:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80179d2:	f000 f807 	bl	80179e4 <RadioIrqProcess>
}
 80179d6:	bf00      	nop
 80179d8:	3708      	adds	r7, #8
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	200018bc 	.word	0x200018bc

080179e4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80179e4:	b590      	push	{r4, r7, lr}
 80179e6:	b083      	sub	sp, #12
 80179e8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80179ea:	2300      	movs	r3, #0
 80179ec:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80179ee:	2300      	movs	r3, #0
 80179f0:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80179f2:	4bbf      	ldr	r3, [pc, #764]	; (8017cf0 <RadioIrqProcess+0x30c>)
 80179f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80179f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179fc:	f000 8116 	beq.w	8017c2c <RadioIrqProcess+0x248>
 8017a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a04:	f300 81cb 	bgt.w	8017d9e <RadioIrqProcess+0x3ba>
 8017a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a0c:	f000 80fa 	beq.w	8017c04 <RadioIrqProcess+0x220>
 8017a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a14:	f300 81c3 	bgt.w	8017d9e <RadioIrqProcess+0x3ba>
 8017a18:	2b80      	cmp	r3, #128	; 0x80
 8017a1a:	f000 80df 	beq.w	8017bdc <RadioIrqProcess+0x1f8>
 8017a1e:	2b80      	cmp	r3, #128	; 0x80
 8017a20:	f300 81bd 	bgt.w	8017d9e <RadioIrqProcess+0x3ba>
 8017a24:	2b20      	cmp	r3, #32
 8017a26:	dc49      	bgt.n	8017abc <RadioIrqProcess+0xd8>
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f340 81b8 	ble.w	8017d9e <RadioIrqProcess+0x3ba>
 8017a2e:	3b01      	subs	r3, #1
 8017a30:	2b1f      	cmp	r3, #31
 8017a32:	f200 81b4 	bhi.w	8017d9e <RadioIrqProcess+0x3ba>
 8017a36:	a201      	add	r2, pc, #4	; (adr r2, 8017a3c <RadioIrqProcess+0x58>)
 8017a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a3c:	08017ac5 	.word	0x08017ac5
 8017a40:	08017b09 	.word	0x08017b09
 8017a44:	08017d9f 	.word	0x08017d9f
 8017a48:	08017cb9 	.word	0x08017cb9
 8017a4c:	08017d9f 	.word	0x08017d9f
 8017a50:	08017d9f 	.word	0x08017d9f
 8017a54:	08017d9f 	.word	0x08017d9f
 8017a58:	08017cc7 	.word	0x08017cc7
 8017a5c:	08017d9f 	.word	0x08017d9f
 8017a60:	08017d9f 	.word	0x08017d9f
 8017a64:	08017d9f 	.word	0x08017d9f
 8017a68:	08017d9f 	.word	0x08017d9f
 8017a6c:	08017d9f 	.word	0x08017d9f
 8017a70:	08017d9f 	.word	0x08017d9f
 8017a74:	08017d9f 	.word	0x08017d9f
 8017a78:	08017ce3 	.word	0x08017ce3
 8017a7c:	08017d9f 	.word	0x08017d9f
 8017a80:	08017d9f 	.word	0x08017d9f
 8017a84:	08017d9f 	.word	0x08017d9f
 8017a88:	08017d9f 	.word	0x08017d9f
 8017a8c:	08017d9f 	.word	0x08017d9f
 8017a90:	08017d9f 	.word	0x08017d9f
 8017a94:	08017d9f 	.word	0x08017d9f
 8017a98:	08017d9f 	.word	0x08017d9f
 8017a9c:	08017d9f 	.word	0x08017d9f
 8017aa0:	08017d9f 	.word	0x08017d9f
 8017aa4:	08017d9f 	.word	0x08017d9f
 8017aa8:	08017d9f 	.word	0x08017d9f
 8017aac:	08017d9f 	.word	0x08017d9f
 8017ab0:	08017d9f 	.word	0x08017d9f
 8017ab4:	08017d9f 	.word	0x08017d9f
 8017ab8:	08017d21 	.word	0x08017d21
 8017abc:	2b40      	cmp	r3, #64	; 0x40
 8017abe:	f000 8150 	beq.w	8017d62 <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017ac2:	e16c      	b.n	8017d9e <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ac8:	488a      	ldr	r0, [pc, #552]	; (8017cf4 <RadioIrqProcess+0x310>)
 8017aca:	f7fe feb0 	bl	801682e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017ace:	488a      	ldr	r0, [pc, #552]	; (8017cf8 <RadioIrqProcess+0x314>)
 8017ad0:	f002 fe44 	bl	801a75c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017ad4:	2000      	movs	r0, #0
 8017ad6:	f000 ff39 	bl	801894c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017ada:	f001 ff2b 	bl	8019934 <RFW_Is_LongPacketModeEnabled>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	2b01      	cmp	r3, #1
 8017ae2:	d101      	bne.n	8017ae8 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017ae4:	f001 ff4f 	bl	8019986 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017ae8:	4b84      	ldr	r3, [pc, #528]	; (8017cfc <RadioIrqProcess+0x318>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	f000 8158 	beq.w	8017da2 <RadioIrqProcess+0x3be>
 8017af2:	4b82      	ldr	r3, [pc, #520]	; (8017cfc <RadioIrqProcess+0x318>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f000 8152 	beq.w	8017da2 <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 8017afe:	4b7f      	ldr	r3, [pc, #508]	; (8017cfc <RadioIrqProcess+0x318>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	4798      	blx	r3
        break;
 8017b06:	e14c      	b.n	8017da2 <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8017b08:	2101      	movs	r1, #1
 8017b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017b0e:	f7fe fe8e 	bl	801682e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017b12:	487b      	ldr	r0, [pc, #492]	; (8017d00 <RadioIrqProcess+0x31c>)
 8017b14:	f002 fe22 	bl	801a75c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017b18:	4b75      	ldr	r3, [pc, #468]	; (8017cf0 <RadioIrqProcess+0x30c>)
 8017b1a:	785b      	ldrb	r3, [r3, #1]
 8017b1c:	f083 0301 	eor.w	r3, r3, #1
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d014      	beq.n	8017b50 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017b26:	2000      	movs	r0, #0
 8017b28:	f000 ff10 	bl	801894c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	f640 1002 	movw	r0, #2306	; 0x902
 8017b32:	f001 fc19 	bl	8019368 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8017b36:	f640 1044 	movw	r0, #2372	; 0x944
 8017b3a:	f001 fc29 	bl	8019390 <SUBGRF_ReadRegister>
 8017b3e:	4603      	mov	r3, r0
 8017b40:	f043 0302 	orr.w	r3, r3, #2
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	4619      	mov	r1, r3
 8017b48:	f640 1044 	movw	r0, #2372	; 0x944
 8017b4c:	f001 fc0c 	bl	8019368 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8017b50:	1dfb      	adds	r3, r7, #7
 8017b52:	22ff      	movs	r2, #255	; 0xff
 8017b54:	4619      	mov	r1, r3
 8017b56:	486b      	ldr	r0, [pc, #428]	; (8017d04 <RadioIrqProcess+0x320>)
 8017b58:	f000 fdc8 	bl	80186ec <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017b5c:	486a      	ldr	r0, [pc, #424]	; (8017d08 <RadioIrqProcess+0x324>)
 8017b5e:	f001 fbb1 	bl	80192c4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017b62:	4b66      	ldr	r3, [pc, #408]	; (8017cfc <RadioIrqProcess+0x318>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d036      	beq.n	8017bd8 <RadioIrqProcess+0x1f4>
 8017b6a:	4b64      	ldr	r3, [pc, #400]	; (8017cfc <RadioIrqProcess+0x318>)
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	689b      	ldr	r3, [r3, #8]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d031      	beq.n	8017bd8 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017b74:	4b5e      	ldr	r3, [pc, #376]	; (8017cf0 <RadioIrqProcess+0x30c>)
 8017b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b7a:	2b01      	cmp	r3, #1
 8017b7c:	d10e      	bne.n	8017b9c <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017b7e:	4b5f      	ldr	r3, [pc, #380]	; (8017cfc <RadioIrqProcess+0x318>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	689c      	ldr	r4, [r3, #8]
 8017b84:	79fb      	ldrb	r3, [r7, #7]
 8017b86:	b299      	uxth	r1, r3
 8017b88:	4b59      	ldr	r3, [pc, #356]	; (8017cf0 <RadioIrqProcess+0x30c>)
 8017b8a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017b8e:	b21a      	sxth	r2, r3
 8017b90:	4b57      	ldr	r3, [pc, #348]	; (8017cf0 <RadioIrqProcess+0x30c>)
 8017b92:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017b96:	485b      	ldr	r0, [pc, #364]	; (8017d04 <RadioIrqProcess+0x320>)
 8017b98:	47a0      	blx	r4
                break;
 8017b9a:	e01e      	b.n	8017bda <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017b9c:	4b54      	ldr	r3, [pc, #336]	; (8017cf0 <RadioIrqProcess+0x30c>)
 8017b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ba0:	463a      	mov	r2, r7
 8017ba2:	4611      	mov	r1, r2
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f001 fe11 	bl	80197cc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017baa:	4b54      	ldr	r3, [pc, #336]	; (8017cfc <RadioIrqProcess+0x318>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	689c      	ldr	r4, [r3, #8]
 8017bb0:	79fb      	ldrb	r3, [r7, #7]
 8017bb2:	b299      	uxth	r1, r3
 8017bb4:	4b4e      	ldr	r3, [pc, #312]	; (8017cf0 <RadioIrqProcess+0x30c>)
 8017bb6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017bba:	b218      	sxth	r0, r3
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017bc2:	4a52      	ldr	r2, [pc, #328]	; (8017d0c <RadioIrqProcess+0x328>)
 8017bc4:	fb82 c203 	smull	ip, r2, r2, r3
 8017bc8:	1192      	asrs	r2, r2, #6
 8017bca:	17db      	asrs	r3, r3, #31
 8017bcc:	1ad3      	subs	r3, r2, r3
 8017bce:	b25b      	sxtb	r3, r3
 8017bd0:	4602      	mov	r2, r0
 8017bd2:	484c      	ldr	r0, [pc, #304]	; (8017d04 <RadioIrqProcess+0x320>)
 8017bd4:	47a0      	blx	r4
                break;
 8017bd6:	e000      	b.n	8017bda <RadioIrqProcess+0x1f6>
        }
 8017bd8:	bf00      	nop
        break;
 8017bda:	e0ef      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017bdc:	2000      	movs	r0, #0
 8017bde:	f000 feb5 	bl	801894c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017be2:	4b46      	ldr	r3, [pc, #280]	; (8017cfc <RadioIrqProcess+0x318>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	f000 80dd 	beq.w	8017da6 <RadioIrqProcess+0x3c2>
 8017bec:	4b43      	ldr	r3, [pc, #268]	; (8017cfc <RadioIrqProcess+0x318>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	699b      	ldr	r3, [r3, #24]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f000 80d7 	beq.w	8017da6 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8017bf8:	4b40      	ldr	r3, [pc, #256]	; (8017cfc <RadioIrqProcess+0x318>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	699b      	ldr	r3, [r3, #24]
 8017bfe:	2000      	movs	r0, #0
 8017c00:	4798      	blx	r3
        break;
 8017c02:	e0d0      	b.n	8017da6 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017c04:	2000      	movs	r0, #0
 8017c06:	f000 fea1 	bl	801894c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017c0a:	4b3c      	ldr	r3, [pc, #240]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	f000 80cb 	beq.w	8017daa <RadioIrqProcess+0x3c6>
 8017c14:	4b39      	ldr	r3, [pc, #228]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	699b      	ldr	r3, [r3, #24]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	f000 80c5 	beq.w	8017daa <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8017c20:	4b36      	ldr	r3, [pc, #216]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	699b      	ldr	r3, [r3, #24]
 8017c26:	2001      	movs	r0, #1
 8017c28:	4798      	blx	r3
        break;
 8017c2a:	e0be      	b.n	8017daa <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017c2c:	4b38      	ldr	r3, [pc, #224]	; (8017d10 <RadioIrqProcess+0x32c>)
 8017c2e:	2201      	movs	r2, #1
 8017c30:	2100      	movs	r1, #0
 8017c32:	2002      	movs	r0, #2
 8017c34:	f002 ff9c 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017c38:	f000 fd3e 	bl	80186b8 <SUBGRF_GetOperatingMode>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	2b04      	cmp	r3, #4
 8017c40:	d11a      	bne.n	8017c78 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 8017c42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017c46:	482b      	ldr	r0, [pc, #172]	; (8017cf4 <RadioIrqProcess+0x310>)
 8017c48:	f7fe fdf1 	bl	801682e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017c4c:	482a      	ldr	r0, [pc, #168]	; (8017cf8 <RadioIrqProcess+0x314>)
 8017c4e:	f002 fd85 	bl	801a75c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c52:	2000      	movs	r0, #0
 8017c54:	f000 fe7a 	bl	801894c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c58:	4b28      	ldr	r3, [pc, #160]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	f000 80a6 	beq.w	8017dae <RadioIrqProcess+0x3ca>
 8017c62:	4b26      	ldr	r3, [pc, #152]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	685b      	ldr	r3, [r3, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	f000 80a0 	beq.w	8017dae <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 8017c6e:	4b23      	ldr	r3, [pc, #140]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	685b      	ldr	r3, [r3, #4]
 8017c74:	4798      	blx	r3
        break;
 8017c76:	e09a      	b.n	8017dae <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017c78:	f000 fd1e 	bl	80186b8 <SUBGRF_GetOperatingMode>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	2b05      	cmp	r3, #5
 8017c80:	f040 8095 	bne.w	8017dae <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017c84:	2101      	movs	r1, #1
 8017c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017c8a:	f7fe fdd0 	bl	801682e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8017c8e:	481c      	ldr	r0, [pc, #112]	; (8017d00 <RadioIrqProcess+0x31c>)
 8017c90:	f002 fd64 	bl	801a75c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017c94:	2000      	movs	r0, #0
 8017c96:	f000 fe59 	bl	801894c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017c9a:	4b18      	ldr	r3, [pc, #96]	; (8017cfc <RadioIrqProcess+0x318>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	f000 8085 	beq.w	8017dae <RadioIrqProcess+0x3ca>
 8017ca4:	4b15      	ldr	r3, [pc, #84]	; (8017cfc <RadioIrqProcess+0x318>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	68db      	ldr	r3, [r3, #12]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d07f      	beq.n	8017dae <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 8017cae:	4b13      	ldr	r3, [pc, #76]	; (8017cfc <RadioIrqProcess+0x318>)
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	68db      	ldr	r3, [r3, #12]
 8017cb4:	4798      	blx	r3
        break;
 8017cb6:	e07a      	b.n	8017dae <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017cb8:	4b16      	ldr	r3, [pc, #88]	; (8017d14 <RadioIrqProcess+0x330>)
 8017cba:	2201      	movs	r2, #1
 8017cbc:	2100      	movs	r1, #0
 8017cbe:	2002      	movs	r0, #2
 8017cc0:	f002 ff56 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017cc4:	e07a      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017cc6:	4b14      	ldr	r3, [pc, #80]	; (8017d18 <RadioIrqProcess+0x334>)
 8017cc8:	2201      	movs	r2, #1
 8017cca:	2100      	movs	r1, #0
 8017ccc:	2002      	movs	r0, #2
 8017cce:	f002 ff4f 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017cd2:	f001 fe28 	bl	8019926 <RFW_Is_Init>
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	d16a      	bne.n	8017db2 <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017cdc:	f001 fe59 	bl	8019992 <RFW_ReceivePayload>
        break;
 8017ce0:	e067      	b.n	8017db2 <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017ce2:	4b0e      	ldr	r3, [pc, #56]	; (8017d1c <RadioIrqProcess+0x338>)
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	2100      	movs	r1, #0
 8017ce8:	2002      	movs	r0, #2
 8017cea:	f002 ff41 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017cee:	e065      	b.n	8017dbc <RadioIrqProcess+0x3d8>
 8017cf0:	200018bc 	.word	0x200018bc
 8017cf4:	48000400 	.word	0x48000400
 8017cf8:	20001914 	.word	0x20001914
 8017cfc:	20000fd0 	.word	0x20000fd0
 8017d00:	2000192c 	.word	0x2000192c
 8017d04:	20000ed0 	.word	0x20000ed0
 8017d08:	200018e0 	.word	0x200018e0
 8017d0c:	10624dd3 	.word	0x10624dd3
 8017d10:	0801b9b4 	.word	0x0801b9b4
 8017d14:	0801b9c8 	.word	0x0801b9c8
 8017d18:	0801b9d4 	.word	0x0801b9d4
 8017d1c:	0801b9e0 	.word	0x0801b9e0
        TimerStop( &RxTimeoutTimer );
 8017d20:	4828      	ldr	r0, [pc, #160]	; (8017dc4 <RadioIrqProcess+0x3e0>)
 8017d22:	f002 fd1b 	bl	801a75c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017d26:	4b28      	ldr	r3, [pc, #160]	; (8017dc8 <RadioIrqProcess+0x3e4>)
 8017d28:	785b      	ldrb	r3, [r3, #1]
 8017d2a:	f083 0301 	eor.w	r3, r3, #1
 8017d2e:	b2db      	uxtb	r3, r3
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d002      	beq.n	8017d3a <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017d34:	2000      	movs	r0, #0
 8017d36:	f000 fe09 	bl	801894c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017d3a:	4b24      	ldr	r3, [pc, #144]	; (8017dcc <RadioIrqProcess+0x3e8>)
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d039      	beq.n	8017db6 <RadioIrqProcess+0x3d2>
 8017d42:	4b22      	ldr	r3, [pc, #136]	; (8017dcc <RadioIrqProcess+0x3e8>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	68db      	ldr	r3, [r3, #12]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d034      	beq.n	8017db6 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017d4c:	4b1f      	ldr	r3, [pc, #124]	; (8017dcc <RadioIrqProcess+0x3e8>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017d54:	4b1e      	ldr	r3, [pc, #120]	; (8017dd0 <RadioIrqProcess+0x3ec>)
 8017d56:	2201      	movs	r2, #1
 8017d58:	2100      	movs	r1, #0
 8017d5a:	2002      	movs	r0, #2
 8017d5c:	f002 ff08 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017d60:	e029      	b.n	8017db6 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017d62:	4b1c      	ldr	r3, [pc, #112]	; (8017dd4 <RadioIrqProcess+0x3f0>)
 8017d64:	2201      	movs	r2, #1
 8017d66:	2100      	movs	r1, #0
 8017d68:	2002      	movs	r0, #2
 8017d6a:	f002 ff01 	bl	801ab70 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017d6e:	4b16      	ldr	r3, [pc, #88]	; (8017dc8 <RadioIrqProcess+0x3e4>)
 8017d70:	785b      	ldrb	r3, [r3, #1]
 8017d72:	f083 0301 	eor.w	r3, r3, #1
 8017d76:	b2db      	uxtb	r3, r3
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d002      	beq.n	8017d82 <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017d7c:	2000      	movs	r0, #0
 8017d7e:	f000 fde5 	bl	801894c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017d82:	4b12      	ldr	r3, [pc, #72]	; (8017dcc <RadioIrqProcess+0x3e8>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d017      	beq.n	8017dba <RadioIrqProcess+0x3d6>
 8017d8a:	4b10      	ldr	r3, [pc, #64]	; (8017dcc <RadioIrqProcess+0x3e8>)
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	691b      	ldr	r3, [r3, #16]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d012      	beq.n	8017dba <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017d94:	4b0d      	ldr	r3, [pc, #52]	; (8017dcc <RadioIrqProcess+0x3e8>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	691b      	ldr	r3, [r3, #16]
 8017d9a:	4798      	blx	r3
        break;
 8017d9c:	e00d      	b.n	8017dba <RadioIrqProcess+0x3d6>
        break;
 8017d9e:	bf00      	nop
 8017da0:	e00c      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017da2:	bf00      	nop
 8017da4:	e00a      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017da6:	bf00      	nop
 8017da8:	e008      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017daa:	bf00      	nop
 8017dac:	e006      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017dae:	bf00      	nop
 8017db0:	e004      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017db2:	bf00      	nop
 8017db4:	e002      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017db6:	bf00      	nop
 8017db8:	e000      	b.n	8017dbc <RadioIrqProcess+0x3d8>
        break;
 8017dba:	bf00      	nop
  }
}
 8017dbc:	bf00      	nop
 8017dbe:	370c      	adds	r7, #12
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd90      	pop	{r4, r7, pc}
 8017dc4:	2000192c 	.word	0x2000192c
 8017dc8:	200018bc 	.word	0x200018bc
 8017dcc:	20000fd0 	.word	0x20000fd0
 8017dd0:	0801b9ec 	.word	0x0801b9ec
 8017dd4:	0801b9f8 	.word	0x0801b9f8

08017dd8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017ddc:	4b09      	ldr	r3, [pc, #36]	; (8017e04 <RadioTxPrbs+0x2c>)
 8017dde:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017de2:	2101      	movs	r1, #1
 8017de4:	4618      	mov	r0, r3
 8017de6:	f001 fbb3 	bl	8019550 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017dea:	4b07      	ldr	r3, [pc, #28]	; (8017e08 <RadioTxPrbs+0x30>)
 8017dec:	212d      	movs	r1, #45	; 0x2d
 8017dee:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017df2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017df4:	f000 fe6d 	bl	8018ad2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017df8:	4804      	ldr	r0, [pc, #16]	; (8017e0c <RadioTxPrbs+0x34>)
 8017dfa:	f000 fdc3 	bl	8018984 <SUBGRF_SetTx>
}
 8017dfe:	bf00      	nop
 8017e00:	bd80      	pop	{r7, pc}
 8017e02:	bf00      	nop
 8017e04:	200018bc 	.word	0x200018bc
 8017e08:	080177df 	.word	0x080177df
 8017e0c:	000fffff 	.word	0x000fffff

08017e10 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	4603      	mov	r3, r0
 8017e18:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f001 fbbe 	bl	80195a0 <SUBGRF_SetRfTxPower>
 8017e24:	4603      	mov	r3, r0
 8017e26:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017e28:	7bfb      	ldrb	r3, [r7, #15]
 8017e2a:	2101      	movs	r1, #1
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f001 fb8f 	bl	8019550 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017e32:	f000 fe45 	bl	8018ac0 <SUBGRF_SetTxContinuousWave>
}
 8017e36:	bf00      	nop
 8017e38:	3710      	adds	r7, #16
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd80      	pop	{r7, pc}

08017e3e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017e3e:	b480      	push	{r7}
 8017e40:	b089      	sub	sp, #36	; 0x24
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	60f8      	str	r0, [r7, #12]
 8017e46:	60b9      	str	r1, [r7, #8]
 8017e48:	4613      	mov	r3, r2
 8017e4a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017e50:	2300      	movs	r3, #0
 8017e52:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017e54:	2300      	movs	r3, #0
 8017e56:	61bb      	str	r3, [r7, #24]
 8017e58:	e011      	b.n	8017e7e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017e5a:	69bb      	ldr	r3, [r7, #24]
 8017e5c:	68ba      	ldr	r2, [r7, #8]
 8017e5e:	4413      	add	r3, r2
 8017e60:	781a      	ldrb	r2, [r3, #0]
 8017e62:	69bb      	ldr	r3, [r7, #24]
 8017e64:	68b9      	ldr	r1, [r7, #8]
 8017e66:	440b      	add	r3, r1
 8017e68:	43d2      	mvns	r2, r2
 8017e6a:	b2d2      	uxtb	r2, r2
 8017e6c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017e6e:	69bb      	ldr	r3, [r7, #24]
 8017e70:	68fa      	ldr	r2, [r7, #12]
 8017e72:	4413      	add	r3, r2
 8017e74:	2200      	movs	r2, #0
 8017e76:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017e78:	69bb      	ldr	r3, [r7, #24]
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	61bb      	str	r3, [r7, #24]
 8017e7e:	79fb      	ldrb	r3, [r7, #7]
 8017e80:	69ba      	ldr	r2, [r7, #24]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	dbe9      	blt.n	8017e5a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017e86:	2300      	movs	r3, #0
 8017e88:	61bb      	str	r3, [r7, #24]
 8017e8a:	e049      	b.n	8017f20 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017e8c:	69bb      	ldr	r3, [r7, #24]
 8017e8e:	425a      	negs	r2, r3
 8017e90:	f003 0307 	and.w	r3, r3, #7
 8017e94:	f002 0207 	and.w	r2, r2, #7
 8017e98:	bf58      	it	pl
 8017e9a:	4253      	negpl	r3, r2
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	f1c3 0307 	rsb	r3, r3, #7
 8017ea2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017ea4:	69bb      	ldr	r3, [r7, #24]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	da00      	bge.n	8017eac <payload_integration+0x6e>
 8017eaa:	3307      	adds	r3, #7
 8017eac:	10db      	asrs	r3, r3, #3
 8017eae:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017eb0:	69bb      	ldr	r3, [r7, #24]
 8017eb2:	3301      	adds	r3, #1
 8017eb4:	425a      	negs	r2, r3
 8017eb6:	f003 0307 	and.w	r3, r3, #7
 8017eba:	f002 0207 	and.w	r2, r2, #7
 8017ebe:	bf58      	it	pl
 8017ec0:	4253      	negpl	r3, r2
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	f1c3 0307 	rsb	r3, r3, #7
 8017ec8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017eca:	69bb      	ldr	r3, [r7, #24]
 8017ecc:	3301      	adds	r3, #1
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	da00      	bge.n	8017ed4 <payload_integration+0x96>
 8017ed2:	3307      	adds	r3, #7
 8017ed4:	10db      	asrs	r3, r3, #3
 8017ed6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017ed8:	7dbb      	ldrb	r3, [r7, #22]
 8017eda:	68ba      	ldr	r2, [r7, #8]
 8017edc:	4413      	add	r3, r2
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	461a      	mov	r2, r3
 8017ee2:	7dfb      	ldrb	r3, [r7, #23]
 8017ee4:	fa42 f303 	asr.w	r3, r2, r3
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	f003 0301 	and.w	r3, r3, #1
 8017eee:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017ef0:	7ffa      	ldrb	r2, [r7, #31]
 8017ef2:	7cfb      	ldrb	r3, [r7, #19]
 8017ef4:	4053      	eors	r3, r2
 8017ef6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017ef8:	7d3b      	ldrb	r3, [r7, #20]
 8017efa:	68fa      	ldr	r2, [r7, #12]
 8017efc:	4413      	add	r3, r2
 8017efe:	781b      	ldrb	r3, [r3, #0]
 8017f00:	b25a      	sxtb	r2, r3
 8017f02:	7ff9      	ldrb	r1, [r7, #31]
 8017f04:	7d7b      	ldrb	r3, [r7, #21]
 8017f06:	fa01 f303 	lsl.w	r3, r1, r3
 8017f0a:	b25b      	sxtb	r3, r3
 8017f0c:	4313      	orrs	r3, r2
 8017f0e:	b259      	sxtb	r1, r3
 8017f10:	7d3b      	ldrb	r3, [r7, #20]
 8017f12:	68fa      	ldr	r2, [r7, #12]
 8017f14:	4413      	add	r3, r2
 8017f16:	b2ca      	uxtb	r2, r1
 8017f18:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017f1a:	69bb      	ldr	r3, [r7, #24]
 8017f1c:	3301      	adds	r3, #1
 8017f1e:	61bb      	str	r3, [r7, #24]
 8017f20:	79fb      	ldrb	r3, [r7, #7]
 8017f22:	00db      	lsls	r3, r3, #3
 8017f24:	69ba      	ldr	r2, [r7, #24]
 8017f26:	429a      	cmp	r2, r3
 8017f28:	dbb0      	blt.n	8017e8c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017f2a:	7ffb      	ldrb	r3, [r7, #31]
 8017f2c:	01db      	lsls	r3, r3, #7
 8017f2e:	b25a      	sxtb	r2, r3
 8017f30:	7ffb      	ldrb	r3, [r7, #31]
 8017f32:	019b      	lsls	r3, r3, #6
 8017f34:	b25b      	sxtb	r3, r3
 8017f36:	4313      	orrs	r3, r2
 8017f38:	b25b      	sxtb	r3, r3
 8017f3a:	7ffa      	ldrb	r2, [r7, #31]
 8017f3c:	2a00      	cmp	r2, #0
 8017f3e:	d101      	bne.n	8017f44 <payload_integration+0x106>
 8017f40:	2220      	movs	r2, #32
 8017f42:	e000      	b.n	8017f46 <payload_integration+0x108>
 8017f44:	2200      	movs	r2, #0
 8017f46:	4313      	orrs	r3, r2
 8017f48:	b259      	sxtb	r1, r3
 8017f4a:	79fb      	ldrb	r3, [r7, #7]
 8017f4c:	68fa      	ldr	r2, [r7, #12]
 8017f4e:	4413      	add	r3, r2
 8017f50:	b2ca      	uxtb	r2, r1
 8017f52:	701a      	strb	r2, [r3, #0]
}
 8017f54:	bf00      	nop
 8017f56:	3724      	adds	r7, #36	; 0x24
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bc80      	pop	{r7}
 8017f5c:	4770      	bx	lr
	...

08017f60 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b08c      	sub	sp, #48	; 0x30
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	60b9      	str	r1, [r7, #8]
 8017f68:	607a      	str	r2, [r7, #4]
 8017f6a:	603b      	str	r3, [r7, #0]
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017f70:	2300      	movs	r3, #0
 8017f72:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017f74:	2300      	movs	r3, #0
 8017f76:	61fb      	str	r3, [r7, #28]
 8017f78:	2300      	movs	r3, #0
 8017f7a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017f7c:	f001 fccd 	bl	801991a <RFW_DeInit>

    if( rxContinuous != 0 )
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d001      	beq.n	8017f8a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017f86:	2300      	movs	r3, #0
 8017f88:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	bf14      	ite	ne
 8017f90:	2301      	movne	r3, #1
 8017f92:	2300      	moveq	r3, #0
 8017f94:	b2da      	uxtb	r2, r3
 8017f96:	4ba9      	ldr	r3, [pc, #676]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8017f98:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017f9a:	7bfb      	ldrb	r3, [r7, #15]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d003      	beq.n	8017fa8 <RadioSetRxGenericConfig+0x48>
 8017fa0:	2b01      	cmp	r3, #1
 8017fa2:	f000 80e8 	beq.w	8018176 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017fa6:	e1a0      	b.n	80182ea <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017fa8:	68bb      	ldr	r3, [r7, #8]
 8017faa:	68db      	ldr	r3, [r3, #12]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d003      	beq.n	8017fb8 <RadioSetRxGenericConfig+0x58>
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	691b      	ldr	r3, [r3, #16]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d102      	bne.n	8017fbe <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fbc:	e196      	b.n	80182ec <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	7d5b      	ldrb	r3, [r3, #21]
 8017fc2:	2b08      	cmp	r3, #8
 8017fc4:	d902      	bls.n	8017fcc <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8017fca:	e18f      	b.n	80182ec <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017fcc:	2300      	movs	r3, #0
 8017fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fd0:	e00d      	b.n	8017fee <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	699a      	ldr	r2, [r3, #24]
 8017fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd8:	4413      	add	r3, r2
 8017fda:	7819      	ldrb	r1, [r3, #0]
 8017fdc:	f107 021c 	add.w	r2, r7, #28
 8017fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe2:	4413      	add	r3, r2
 8017fe4:	460a      	mov	r2, r1
 8017fe6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fea:	3301      	adds	r3, #1
 8017fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	7d5b      	ldrb	r3, [r3, #21]
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	dbeb      	blt.n	8017fd2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	bf14      	ite	ne
 8018002:	2301      	movne	r3, #1
 8018004:	2300      	moveq	r3, #0
 8018006:	b2db      	uxtb	r3, r3
 8018008:	4618      	mov	r0, r3
 801800a:	f000 fd6b 	bl	8018ae4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801800e:	4b8b      	ldr	r3, [pc, #556]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018010:	2200      	movs	r2, #0
 8018012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	68db      	ldr	r3, [r3, #12]
 801801a:	4a88      	ldr	r2, [pc, #544]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801801c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	791a      	ldrb	r2, [r3, #4]
 8018022:	4b86      	ldr	r3, [pc, #536]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	689b      	ldr	r3, [r3, #8]
 801802c:	4618      	mov	r0, r3
 801802e:	f001 fba5 	bl	801977c <SUBGRF_GetFskBandwidthRegValue>
 8018032:	4603      	mov	r3, r0
 8018034:	461a      	mov	r2, r3
 8018036:	4b81      	ldr	r3, [pc, #516]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801803c:	4b7f      	ldr	r3, [pc, #508]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801803e:	2200      	movs	r2, #0
 8018040:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018042:	68bb      	ldr	r3, [r7, #8]
 8018044:	691b      	ldr	r3, [r3, #16]
 8018046:	b29b      	uxth	r3, r3
 8018048:	00db      	lsls	r3, r3, #3
 801804a:	b29a      	uxth	r2, r3
 801804c:	4b7b      	ldr	r3, [pc, #492]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801804e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018050:	68bb      	ldr	r3, [r7, #8]
 8018052:	7d1a      	ldrb	r2, [r3, #20]
 8018054:	4b79      	ldr	r3, [pc, #484]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018056:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	7d5b      	ldrb	r3, [r3, #21]
 801805c:	00db      	lsls	r3, r3, #3
 801805e:	b2da      	uxtb	r2, r3
 8018060:	4b76      	ldr	r3, [pc, #472]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018062:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018064:	68bb      	ldr	r3, [r7, #8]
 8018066:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801806a:	4b74      	ldr	r3, [pc, #464]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801806c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801806e:	68bb      	ldr	r3, [r7, #8]
 8018070:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8018074:	2b00      	cmp	r3, #0
 8018076:	d105      	bne.n	8018084 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	69db      	ldr	r3, [r3, #28]
 801807c:	b2da      	uxtb	r2, r3
 801807e:	4b6f      	ldr	r3, [pc, #444]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018080:	759a      	strb	r2, [r3, #22]
 8018082:	e00b      	b.n	801809c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018084:	68bb      	ldr	r3, [r7, #8]
 8018086:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801808a:	2b02      	cmp	r3, #2
 801808c:	d103      	bne.n	8018096 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801808e:	4b6b      	ldr	r3, [pc, #428]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018090:	22ff      	movs	r2, #255	; 0xff
 8018092:	759a      	strb	r2, [r3, #22]
 8018094:	e002      	b.n	801809c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018096:	4b69      	ldr	r3, [pc, #420]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018098:	22ff      	movs	r2, #255	; 0xff
 801809a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80180a2:	2b02      	cmp	r3, #2
 80180a4:	d004      	beq.n	80180b0 <RadioSetRxGenericConfig+0x150>
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80180ac:	2b02      	cmp	r3, #2
 80180ae:	d12d      	bne.n	801810c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80180b0:	68bb      	ldr	r3, [r7, #8]
 80180b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180b6:	2bf1      	cmp	r3, #241	; 0xf1
 80180b8:	d00c      	beq.n	80180d4 <RadioSetRxGenericConfig+0x174>
 80180ba:	68bb      	ldr	r3, [r7, #8]
 80180bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180c0:	2bf2      	cmp	r3, #242	; 0xf2
 80180c2:	d007      	beq.n	80180d4 <RadioSetRxGenericConfig+0x174>
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180ca:	2b01      	cmp	r3, #1
 80180cc:	d002      	beq.n	80180d4 <RadioSetRxGenericConfig+0x174>
            return -1;
 80180ce:	f04f 33ff 	mov.w	r3, #4294967295
 80180d2:	e10b      	b.n	80182ec <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80180d4:	2300      	movs	r3, #0
 80180d6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80180dc:	4b58      	ldr	r3, [pc, #352]	; (8018240 <RadioSetRxGenericConfig+0x2e0>)
 80180de:	6819      	ldr	r1, [r3, #0]
 80180e0:	f107 0310 	add.w	r3, r7, #16
 80180e4:	4a57      	ldr	r2, [pc, #348]	; (8018244 <RadioSetRxGenericConfig+0x2e4>)
 80180e6:	4618      	mov	r0, r3
 80180e8:	f001 fc0a 	bl	8019900 <RFW_Init>
 80180ec:	4603      	mov	r3, r0
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d002      	beq.n	80180f8 <RadioSetRxGenericConfig+0x198>
            return -1;
 80180f2:	f04f 33ff 	mov.w	r3, #4294967295
 80180f6:	e0f9      	b.n	80182ec <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80180f8:	4b50      	ldr	r3, [pc, #320]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 80180fa:	2200      	movs	r2, #0
 80180fc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80180fe:	4b4f      	ldr	r3, [pc, #316]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018100:	2201      	movs	r2, #1
 8018102:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018104:	4b4d      	ldr	r3, [pc, #308]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018106:	2200      	movs	r2, #0
 8018108:	755a      	strb	r2, [r3, #21]
        {
 801810a:	e00e      	b.n	801812a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801810c:	68bb      	ldr	r3, [r7, #8]
 801810e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018112:	4b4a      	ldr	r3, [pc, #296]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018114:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018116:	68bb      	ldr	r3, [r7, #8]
 8018118:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801811c:	4b47      	ldr	r3, [pc, #284]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801811e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8018126:	4b45      	ldr	r3, [pc, #276]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018128:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801812a:	f7ff fa6c 	bl	8017606 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801812e:	2000      	movs	r0, #0
 8018130:	f7fe fbf8 	bl	8016924 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018134:	4844      	ldr	r0, [pc, #272]	; (8018248 <RadioSetRxGenericConfig+0x2e8>)
 8018136:	f000 ff03 	bl	8018f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801813a:	4844      	ldr	r0, [pc, #272]	; (801824c <RadioSetRxGenericConfig+0x2ec>)
 801813c:	f000 ffcc 	bl	80190d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018140:	f107 031c 	add.w	r3, r7, #28
 8018144:	4618      	mov	r0, r3
 8018146:	f000 fb06 	bl	8018756 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801814a:	68bb      	ldr	r3, [r7, #8]
 801814c:	8c1b      	ldrh	r3, [r3, #32]
 801814e:	4618      	mov	r0, r3
 8018150:	f000 fb50 	bl	80187f4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018158:	4618      	mov	r0, r3
 801815a:	f000 fb2b 	bl	80187b4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018164:	fb02 f203 	mul.w	r2, r2, r3
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018170:	4a32      	ldr	r2, [pc, #200]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018172:	6093      	str	r3, [r2, #8]
        break;
 8018174:	e0b9      	b.n	80182ea <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8018176:	68bb      	ldr	r3, [r7, #8]
 8018178:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801817a:	2b00      	cmp	r3, #0
 801817c:	d102      	bne.n	8018184 <RadioSetRxGenericConfig+0x224>
            return -1;
 801817e:	f04f 33ff 	mov.w	r3, #4294967295
 8018182:	e0b3      	b.n	80182ec <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801818a:	2b01      	cmp	r3, #1
 801818c:	d104      	bne.n	8018198 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	69db      	ldr	r3, [r3, #28]
 8018192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018196:	e002      	b.n	801819e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8018198:	23ff      	movs	r3, #255	; 0xff
 801819a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801819e:	68bb      	ldr	r3, [r7, #8]
 80181a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	bf14      	ite	ne
 80181a6:	2301      	movne	r3, #1
 80181a8:	2300      	moveq	r3, #0
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	4618      	mov	r0, r3
 80181ae:	f000 fc99 	bl	8018ae4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80181b2:	683b      	ldr	r3, [r7, #0]
 80181b4:	b2db      	uxtb	r3, r3
 80181b6:	4618      	mov	r0, r3
 80181b8:	f000 fca3 	bl	8018b02 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80181bc:	4b1f      	ldr	r3, [pc, #124]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 80181be:	2201      	movs	r2, #1
 80181c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80181ca:	4b1c      	ldr	r3, [pc, #112]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 80181cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80181d6:	4b19      	ldr	r3, [pc, #100]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 80181d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80181e2:	4b16      	ldr	r3, [pc, #88]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 80181e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80181ee:	2b02      	cmp	r3, #2
 80181f0:	d010      	beq.n	8018214 <RadioSetRxGenericConfig+0x2b4>
 80181f2:	2b02      	cmp	r3, #2
 80181f4:	dc2c      	bgt.n	8018250 <RadioSetRxGenericConfig+0x2f0>
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d002      	beq.n	8018200 <RadioSetRxGenericConfig+0x2a0>
 80181fa:	2b01      	cmp	r3, #1
 80181fc:	d005      	beq.n	801820a <RadioSetRxGenericConfig+0x2aa>
            break;
 80181fe:	e027      	b.n	8018250 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018200:	4b0e      	ldr	r3, [pc, #56]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018202:	2200      	movs	r2, #0
 8018204:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018208:	e023      	b.n	8018252 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801820a:	4b0c      	ldr	r3, [pc, #48]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801820c:	2201      	movs	r2, #1
 801820e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018212:	e01e      	b.n	8018252 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801821a:	2b0b      	cmp	r3, #11
 801821c:	d004      	beq.n	8018228 <RadioSetRxGenericConfig+0x2c8>
 801821e:	68bb      	ldr	r3, [r7, #8]
 8018220:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018224:	2b0c      	cmp	r3, #12
 8018226:	d104      	bne.n	8018232 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018228:	4b04      	ldr	r3, [pc, #16]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 801822a:	2201      	movs	r2, #1
 801822c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018230:	e00f      	b.n	8018252 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018232:	4b02      	ldr	r3, [pc, #8]	; (801823c <RadioSetRxGenericConfig+0x2dc>)
 8018234:	2200      	movs	r2, #0
 8018236:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801823a:	e00a      	b.n	8018252 <RadioSetRxGenericConfig+0x2f2>
 801823c:	200018bc 	.word	0x200018bc
 8018240:	20000fd0 	.word	0x20000fd0
 8018244:	2000192c 	.word	0x2000192c
 8018248:	200018f4 	.word	0x200018f4
 801824c:	200018ca 	.word	0x200018ca
            break;
 8018250:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018252:	4b28      	ldr	r3, [pc, #160]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 8018254:	2201      	movs	r2, #1
 8018256:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801825c:	4b25      	ldr	r3, [pc, #148]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 801825e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8018266:	4b23      	ldr	r3, [pc, #140]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 8018268:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801826a:	4a22      	ldr	r2, [pc, #136]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 801826c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018270:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8018278:	4b1e      	ldr	r3, [pc, #120]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 801827a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8018284:	4b1b      	ldr	r3, [pc, #108]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 8018286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801828a:	f7ff f9bc 	bl	8017606 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801828e:	2001      	movs	r0, #1
 8018290:	f7fe fb48 	bl	8016924 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018294:	4818      	ldr	r0, [pc, #96]	; (80182f8 <RadioSetRxGenericConfig+0x398>)
 8018296:	f000 fe53 	bl	8018f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801829a:	4818      	ldr	r0, [pc, #96]	; (80182fc <RadioSetRxGenericConfig+0x39c>)
 801829c:	f000 ff1c 	bl	80190d8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80182a0:	4b14      	ldr	r3, [pc, #80]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 80182a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80182a6:	2b01      	cmp	r3, #1
 80182a8:	d10d      	bne.n	80182c6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80182aa:	f240 7036 	movw	r0, #1846	; 0x736
 80182ae:	f001 f86f 	bl	8019390 <SUBGRF_ReadRegister>
 80182b2:	4603      	mov	r3, r0
 80182b4:	f023 0304 	bic.w	r3, r3, #4
 80182b8:	b2db      	uxtb	r3, r3
 80182ba:	4619      	mov	r1, r3
 80182bc:	f240 7036 	movw	r0, #1846	; 0x736
 80182c0:	f001 f852 	bl	8019368 <SUBGRF_WriteRegister>
 80182c4:	e00c      	b.n	80182e0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80182c6:	f240 7036 	movw	r0, #1846	; 0x736
 80182ca:	f001 f861 	bl	8019390 <SUBGRF_ReadRegister>
 80182ce:	4603      	mov	r3, r0
 80182d0:	f043 0304 	orr.w	r3, r3, #4
 80182d4:	b2db      	uxtb	r3, r3
 80182d6:	4619      	mov	r1, r3
 80182d8:	f240 7036 	movw	r0, #1846	; 0x736
 80182dc:	f001 f844 	bl	8019368 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80182e0:	4b04      	ldr	r3, [pc, #16]	; (80182f4 <RadioSetRxGenericConfig+0x394>)
 80182e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80182e6:	609a      	str	r2, [r3, #8]
        break;
 80182e8:	bf00      	nop
    }
    return status;
 80182ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80182ec:	4618      	mov	r0, r3
 80182ee:	3730      	adds	r7, #48	; 0x30
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	200018bc 	.word	0x200018bc
 80182f8:	200018f4 	.word	0x200018f4
 80182fc:	200018ca 	.word	0x200018ca

08018300 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b08a      	sub	sp, #40	; 0x28
 8018304:	af00      	add	r7, sp, #0
 8018306:	60b9      	str	r1, [r7, #8]
 8018308:	607b      	str	r3, [r7, #4]
 801830a:	4603      	mov	r3, r0
 801830c:	73fb      	strb	r3, [r7, #15]
 801830e:	4613      	mov	r3, r2
 8018310:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8018312:	2300      	movs	r3, #0
 8018314:	61fb      	str	r3, [r7, #28]
 8018316:	2300      	movs	r3, #0
 8018318:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801831a:	f001 fafe 	bl	801991a <RFW_DeInit>
    switch( modem )
 801831e:	7bfb      	ldrb	r3, [r7, #15]
 8018320:	2b02      	cmp	r3, #2
 8018322:	f000 8144 	beq.w	80185ae <RadioSetTxGenericConfig+0x2ae>
 8018326:	2b02      	cmp	r3, #2
 8018328:	f300 8160 	bgt.w	80185ec <RadioSetTxGenericConfig+0x2ec>
 801832c:	2b00      	cmp	r3, #0
 801832e:	d003      	beq.n	8018338 <RadioSetTxGenericConfig+0x38>
 8018330:	2b01      	cmp	r3, #1
 8018332:	f000 80b7 	beq.w	80184a4 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8018336:	e159      	b.n	80185ec <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	689b      	ldr	r3, [r3, #8]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d003      	beq.n	8018348 <RadioSetTxGenericConfig+0x48>
 8018340:	68bb      	ldr	r3, [r7, #8]
 8018342:	691b      	ldr	r3, [r3, #16]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d102      	bne.n	801834e <RadioSetTxGenericConfig+0x4e>
            return -1;
 8018348:	f04f 33ff 	mov.w	r3, #4294967295
 801834c:	e163      	b.n	8018616 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801834e:	68bb      	ldr	r3, [r7, #8]
 8018350:	7d1b      	ldrb	r3, [r3, #20]
 8018352:	2b08      	cmp	r3, #8
 8018354:	d902      	bls.n	801835c <RadioSetTxGenericConfig+0x5c>
            return -1;
 8018356:	f04f 33ff 	mov.w	r3, #4294967295
 801835a:	e15c      	b.n	8018616 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801835c:	2300      	movs	r3, #0
 801835e:	627b      	str	r3, [r7, #36]	; 0x24
 8018360:	e00d      	b.n	801837e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8018362:	68bb      	ldr	r3, [r7, #8]
 8018364:	699a      	ldr	r2, [r3, #24]
 8018366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018368:	4413      	add	r3, r2
 801836a:	7819      	ldrb	r1, [r3, #0]
 801836c:	f107 021c 	add.w	r2, r7, #28
 8018370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018372:	4413      	add	r3, r2
 8018374:	460a      	mov	r2, r1
 8018376:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801837a:	3301      	adds	r3, #1
 801837c:	627b      	str	r3, [r7, #36]	; 0x24
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	7d1b      	ldrb	r3, [r3, #20]
 8018382:	461a      	mov	r2, r3
 8018384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018386:	4293      	cmp	r3, r2
 8018388:	dbeb      	blt.n	8018362 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801838a:	4ba5      	ldr	r3, [pc, #660]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801838c:	2200      	movs	r2, #0
 801838e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	689b      	ldr	r3, [r3, #8]
 8018396:	4aa2      	ldr	r2, [pc, #648]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018398:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	781a      	ldrb	r2, [r3, #0]
 801839e:	4ba0      	ldr	r3, [pc, #640]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	685b      	ldr	r3, [r3, #4]
 80183a8:	4618      	mov	r0, r3
 80183aa:	f001 f9e7 	bl	801977c <SUBGRF_GetFskBandwidthRegValue>
 80183ae:	4603      	mov	r3, r0
 80183b0:	461a      	mov	r2, r3
 80183b2:	4b9b      	ldr	r3, [pc, #620]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80183b8:	68bb      	ldr	r3, [r7, #8]
 80183ba:	68db      	ldr	r3, [r3, #12]
 80183bc:	4a98      	ldr	r2, [pc, #608]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183be:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80183c0:	4b97      	ldr	r3, [pc, #604]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183c2:	2200      	movs	r2, #0
 80183c4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	691b      	ldr	r3, [r3, #16]
 80183ca:	b29b      	uxth	r3, r3
 80183cc:	00db      	lsls	r3, r3, #3
 80183ce:	b29a      	uxth	r2, r3
 80183d0:	4b93      	ldr	r3, [pc, #588]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183d2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80183d4:	4b92      	ldr	r3, [pc, #584]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183d6:	2204      	movs	r2, #4
 80183d8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	7d1b      	ldrb	r3, [r3, #20]
 80183de:	00db      	lsls	r3, r3, #3
 80183e0:	b2da      	uxtb	r2, r3
 80183e2:	4b8f      	ldr	r3, [pc, #572]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183e4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80183e6:	4b8e      	ldr	r3, [pc, #568]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80183e8:	2200      	movs	r2, #0
 80183ea:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d003      	beq.n	80183fe <RadioSetTxGenericConfig+0xfe>
 80183f6:	68bb      	ldr	r3, [r7, #8]
 80183f8:	7f9b      	ldrb	r3, [r3, #30]
 80183fa:	2b02      	cmp	r3, #2
 80183fc:	d12a      	bne.n	8018454 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	7fdb      	ldrb	r3, [r3, #31]
 8018402:	2bf1      	cmp	r3, #241	; 0xf1
 8018404:	d00a      	beq.n	801841c <RadioSetTxGenericConfig+0x11c>
 8018406:	68bb      	ldr	r3, [r7, #8]
 8018408:	7fdb      	ldrb	r3, [r3, #31]
 801840a:	2bf2      	cmp	r3, #242	; 0xf2
 801840c:	d006      	beq.n	801841c <RadioSetTxGenericConfig+0x11c>
 801840e:	68bb      	ldr	r3, [r7, #8]
 8018410:	7fdb      	ldrb	r3, [r3, #31]
 8018412:	2b01      	cmp	r3, #1
 8018414:	d002      	beq.n	801841c <RadioSetTxGenericConfig+0x11c>
                return -1;
 8018416:	f04f 33ff 	mov.w	r3, #4294967295
 801841a:	e0fc      	b.n	8018616 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801841c:	2301      	movs	r3, #1
 801841e:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018424:	4b7f      	ldr	r3, [pc, #508]	; (8018624 <RadioSetTxGenericConfig+0x324>)
 8018426:	6819      	ldr	r1, [r3, #0]
 8018428:	f107 0310 	add.w	r3, r7, #16
 801842c:	4a7e      	ldr	r2, [pc, #504]	; (8018628 <RadioSetTxGenericConfig+0x328>)
 801842e:	4618      	mov	r0, r3
 8018430:	f001 fa66 	bl	8019900 <RFW_Init>
 8018434:	4603      	mov	r3, r0
 8018436:	2b00      	cmp	r3, #0
 8018438:	d002      	beq.n	8018440 <RadioSetTxGenericConfig+0x140>
              return -1;
 801843a:	f04f 33ff 	mov.w	r3, #4294967295
 801843e:	e0ea      	b.n	8018616 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018440:	4b77      	ldr	r3, [pc, #476]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018442:	2200      	movs	r2, #0
 8018444:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018446:	4b76      	ldr	r3, [pc, #472]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018448:	2201      	movs	r2, #1
 801844a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801844c:	4b74      	ldr	r3, [pc, #464]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801844e:	2200      	movs	r2, #0
 8018450:	755a      	strb	r2, [r3, #21]
        {
 8018452:	e00c      	b.n	801846e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	7fda      	ldrb	r2, [r3, #31]
 8018458:	4b71      	ldr	r3, [pc, #452]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801845a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8018462:	4b6f      	ldr	r3, [pc, #444]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018464:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	7f9a      	ldrb	r2, [r3, #30]
 801846a:	4b6d      	ldr	r3, [pc, #436]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801846c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801846e:	f7ff f8ca 	bl	8017606 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018472:	2000      	movs	r0, #0
 8018474:	f7fe fa56 	bl	8016924 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018478:	486c      	ldr	r0, [pc, #432]	; (801862c <RadioSetTxGenericConfig+0x32c>)
 801847a:	f000 fd61 	bl	8018f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801847e:	486c      	ldr	r0, [pc, #432]	; (8018630 <RadioSetTxGenericConfig+0x330>)
 8018480:	f000 fe2a 	bl	80190d8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018484:	f107 031c 	add.w	r3, r7, #28
 8018488:	4618      	mov	r0, r3
 801848a:	f000 f964 	bl	8018756 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	8b9b      	ldrh	r3, [r3, #28]
 8018492:	4618      	mov	r0, r3
 8018494:	f000 f9ae 	bl	80187f4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	8c1b      	ldrh	r3, [r3, #32]
 801849c:	4618      	mov	r0, r3
 801849e:	f000 f989 	bl	80187b4 <SUBGRF_SetCrcPolynomial>
        break;
 80184a2:	e0a4      	b.n	80185ee <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80184a4:	4b5e      	ldr	r3, [pc, #376]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80184a6:	2201      	movs	r2, #1
 80184a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80184b2:	4b5b      	ldr	r3, [pc, #364]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80184b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80184be:	4b58      	ldr	r3, [pc, #352]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80184c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80184c4:	68bb      	ldr	r3, [r7, #8]
 80184c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80184ca:	4b55      	ldr	r3, [pc, #340]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80184cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80184d6:	2b02      	cmp	r3, #2
 80184d8:	d010      	beq.n	80184fc <RadioSetTxGenericConfig+0x1fc>
 80184da:	2b02      	cmp	r3, #2
 80184dc:	dc22      	bgt.n	8018524 <RadioSetTxGenericConfig+0x224>
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d002      	beq.n	80184e8 <RadioSetTxGenericConfig+0x1e8>
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d005      	beq.n	80184f2 <RadioSetTxGenericConfig+0x1f2>
            break;
 80184e6:	e01d      	b.n	8018524 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80184e8:	4b4d      	ldr	r3, [pc, #308]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80184ea:	2200      	movs	r2, #0
 80184ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184f0:	e019      	b.n	8018526 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80184f2:	4b4b      	ldr	r3, [pc, #300]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80184f4:	2201      	movs	r2, #1
 80184f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80184fa:	e014      	b.n	8018526 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80184fc:	68bb      	ldr	r3, [r7, #8]
 80184fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018502:	2b0b      	cmp	r3, #11
 8018504:	d004      	beq.n	8018510 <RadioSetTxGenericConfig+0x210>
 8018506:	68bb      	ldr	r3, [r7, #8]
 8018508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801850c:	2b0c      	cmp	r3, #12
 801850e:	d104      	bne.n	801851a <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018510:	4b43      	ldr	r3, [pc, #268]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018512:	2201      	movs	r2, #1
 8018514:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018518:	e005      	b.n	8018526 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801851a:	4b41      	ldr	r3, [pc, #260]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801851c:	2200      	movs	r2, #0
 801851e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018522:	e000      	b.n	8018526 <RadioSetTxGenericConfig+0x226>
            break;
 8018524:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018526:	4b3e      	ldr	r3, [pc, #248]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018528:	2201      	movs	r2, #1
 801852a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018530:	4b3b      	ldr	r3, [pc, #236]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018532:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801853a:	4b39      	ldr	r3, [pc, #228]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801853c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018544:	4b36      	ldr	r3, [pc, #216]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018546:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018550:	4b33      	ldr	r3, [pc, #204]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8018556:	f7ff f856 	bl	8017606 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801855a:	2001      	movs	r0, #1
 801855c:	f7fe f9e2 	bl	8016924 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018560:	4832      	ldr	r0, [pc, #200]	; (801862c <RadioSetTxGenericConfig+0x32c>)
 8018562:	f000 fced 	bl	8018f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018566:	4832      	ldr	r0, [pc, #200]	; (8018630 <RadioSetTxGenericConfig+0x330>)
 8018568:	f000 fdb6 	bl	80190d8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801856c:	4b2c      	ldr	r3, [pc, #176]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 801856e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018572:	2b06      	cmp	r3, #6
 8018574:	d10d      	bne.n	8018592 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8018576:	f640 0089 	movw	r0, #2185	; 0x889
 801857a:	f000 ff09 	bl	8019390 <SUBGRF_ReadRegister>
 801857e:	4603      	mov	r3, r0
 8018580:	f023 0304 	bic.w	r3, r3, #4
 8018584:	b2db      	uxtb	r3, r3
 8018586:	4619      	mov	r1, r3
 8018588:	f640 0089 	movw	r0, #2185	; 0x889
 801858c:	f000 feec 	bl	8019368 <SUBGRF_WriteRegister>
        break;
 8018590:	e02d      	b.n	80185ee <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8018592:	f640 0089 	movw	r0, #2185	; 0x889
 8018596:	f000 fefb 	bl	8019390 <SUBGRF_ReadRegister>
 801859a:	4603      	mov	r3, r0
 801859c:	f043 0304 	orr.w	r3, r3, #4
 80185a0:	b2db      	uxtb	r3, r3
 80185a2:	4619      	mov	r1, r3
 80185a4:	f640 0089 	movw	r0, #2185	; 0x889
 80185a8:	f000 fede 	bl	8019368 <SUBGRF_WriteRegister>
        break;
 80185ac:	e01f      	b.n	80185ee <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80185ae:	68bb      	ldr	r3, [r7, #8]
 80185b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d004      	beq.n	80185c0 <RadioSetTxGenericConfig+0x2c0>
 80185b6:	68bb      	ldr	r3, [r7, #8]
 80185b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80185be:	d902      	bls.n	80185c6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 80185c0:	f04f 33ff 	mov.w	r3, #4294967295
 80185c4:	e027      	b.n	8018616 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 80185c6:	2002      	movs	r0, #2
 80185c8:	f7fe f9ac 	bl	8016924 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80185cc:	4b14      	ldr	r3, [pc, #80]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80185ce:	2202      	movs	r2, #2
 80185d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185d8:	4a11      	ldr	r2, [pc, #68]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80185da:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80185dc:	4b10      	ldr	r3, [pc, #64]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80185de:	2216      	movs	r2, #22
 80185e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185e4:	4811      	ldr	r0, [pc, #68]	; (801862c <RadioSetTxGenericConfig+0x32c>)
 80185e6:	f000 fcab 	bl	8018f40 <SUBGRF_SetModulationParams>
        break;
 80185ea:	e000      	b.n	80185ee <RadioSetTxGenericConfig+0x2ee>
        break;
 80185ec:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80185ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80185f2:	4618      	mov	r0, r3
 80185f4:	f000 ffd4 	bl	80195a0 <SUBGRF_SetRfTxPower>
 80185f8:	4603      	mov	r3, r0
 80185fa:	461a      	mov	r2, r3
 80185fc:	4b08      	ldr	r3, [pc, #32]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 80185fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018602:	4b07      	ldr	r3, [pc, #28]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018604:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018608:	4618      	mov	r0, r3
 801860a:	f001 f99a 	bl	8019942 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801860e:	4a04      	ldr	r2, [pc, #16]	; (8018620 <RadioSetTxGenericConfig+0x320>)
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	6053      	str	r3, [r2, #4]
    return 0;
 8018614:	2300      	movs	r3, #0
}
 8018616:	4618      	mov	r0, r3
 8018618:	3728      	adds	r7, #40	; 0x28
 801861a:	46bd      	mov	sp, r7
 801861c:	bd80      	pop	{r7, pc}
 801861e:	bf00      	nop
 8018620:	200018bc 	.word	0x200018bc
 8018624:	20000fd0 	.word	0x20000fd0
 8018628:	20001914 	.word	0x20001914
 801862c:	200018f4 	.word	0x200018f4
 8018630:	200018ca 	.word	0x200018ca

08018634 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d002      	beq.n	8018648 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018642:	4a1a      	ldr	r2, [pc, #104]	; (80186ac <SUBGRF_Init+0x78>)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018648:	f7e9 fb3a 	bl	8001cc0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801864c:	2002      	movs	r0, #2
 801864e:	f001 f873 	bl	8019738 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018652:	4b17      	ldr	r3, [pc, #92]	; (80186b0 <SUBGRF_Init+0x7c>)
 8018654:	2200      	movs	r2, #0
 8018656:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018658:	2000      	movs	r0, #0
 801865a:	f000 f977 	bl	801894c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801865e:	f7f2 fb25 	bl	800acac <RBI_IsTCXO>
 8018662:	4603      	mov	r3, r0
 8018664:	2b01      	cmp	r3, #1
 8018666:	d10e      	bne.n	8018686 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018668:	2140      	movs	r1, #64	; 0x40
 801866a:	2001      	movs	r0, #1
 801866c:	f000 fb78 	bl	8018d60 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018670:	2100      	movs	r1, #0
 8018672:	f640 1011 	movw	r0, #2321	; 0x911
 8018676:	f000 fe77 	bl	8019368 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801867a:	237f      	movs	r3, #127	; 0x7f
 801867c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801867e:	7b38      	ldrb	r0, [r7, #12]
 8018680:	f000 fa85 	bl	8018b8e <SUBGRF_Calibrate>
 8018684:	e009      	b.n	801869a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018686:	2120      	movs	r1, #32
 8018688:	f640 1011 	movw	r0, #2321	; 0x911
 801868c:	f000 fe6c 	bl	8019368 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018690:	2120      	movs	r1, #32
 8018692:	f640 1012 	movw	r0, #2322	; 0x912
 8018696:	f000 fe67 	bl	8019368 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801869a:	f7f2 faeb 	bl	800ac74 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801869e:	4b05      	ldr	r3, [pc, #20]	; (80186b4 <SUBGRF_Init+0x80>)
 80186a0:	2201      	movs	r2, #1
 80186a2:	701a      	strb	r2, [r3, #0]
}
 80186a4:	bf00      	nop
 80186a6:	3710      	adds	r7, #16
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	20000fe0 	.word	0x20000fe0
 80186b0:	20000fdc 	.word	0x20000fdc
 80186b4:	20000fd4 	.word	0x20000fd4

080186b8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80186b8:	b480      	push	{r7}
 80186ba:	af00      	add	r7, sp, #0
    return OperatingMode;
 80186bc:	4b02      	ldr	r3, [pc, #8]	; (80186c8 <SUBGRF_GetOperatingMode+0x10>)
 80186be:	781b      	ldrb	r3, [r3, #0]
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bc80      	pop	{r7}
 80186c6:	4770      	bx	lr
 80186c8:	20000fd4 	.word	0x20000fd4

080186cc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
 80186d4:	460b      	mov	r3, r1
 80186d6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80186d8:	78fb      	ldrb	r3, [r7, #3]
 80186da:	461a      	mov	r2, r3
 80186dc:	6879      	ldr	r1, [r7, #4]
 80186de:	2000      	movs	r0, #0
 80186e0:	f000 feae 	bl	8019440 <SUBGRF_WriteBuffer>
}
 80186e4:	bf00      	nop
 80186e6:	3708      	adds	r7, #8
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}

080186ec <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b086      	sub	sp, #24
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	4613      	mov	r3, r2
 80186f8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80186fa:	2300      	movs	r3, #0
 80186fc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80186fe:	f107 0317 	add.w	r3, r7, #23
 8018702:	4619      	mov	r1, r3
 8018704:	68b8      	ldr	r0, [r7, #8]
 8018706:	f000 fdb1 	bl	801926c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801870a:	68bb      	ldr	r3, [r7, #8]
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	79fa      	ldrb	r2, [r7, #7]
 8018710:	429a      	cmp	r2, r3
 8018712:	d201      	bcs.n	8018718 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018714:	2301      	movs	r3, #1
 8018716:	e007      	b.n	8018728 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018718:	7df8      	ldrb	r0, [r7, #23]
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	461a      	mov	r2, r3
 8018720:	68f9      	ldr	r1, [r7, #12]
 8018722:	f000 feaf 	bl	8019484 <SUBGRF_ReadBuffer>

    return 0;
 8018726:	2300      	movs	r3, #0
}
 8018728:	4618      	mov	r0, r3
 801872a:	3718      	adds	r7, #24
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b084      	sub	sp, #16
 8018734:	af00      	add	r7, sp, #0
 8018736:	60f8      	str	r0, [r7, #12]
 8018738:	460b      	mov	r3, r1
 801873a:	607a      	str	r2, [r7, #4]
 801873c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801873e:	7afb      	ldrb	r3, [r7, #11]
 8018740:	4619      	mov	r1, r3
 8018742:	68f8      	ldr	r0, [r7, #12]
 8018744:	f7ff ffc2 	bl	80186cc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018748:	6878      	ldr	r0, [r7, #4]
 801874a:	f000 f91b 	bl	8018984 <SUBGRF_SetTx>
}
 801874e:	bf00      	nop
 8018750:	3710      	adds	r7, #16
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b082      	sub	sp, #8
 801875a:	af00      	add	r7, sp, #0
 801875c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801875e:	2208      	movs	r2, #8
 8018760:	6879      	ldr	r1, [r7, #4]
 8018762:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8018766:	f000 fe27 	bl	80193b8 <SUBGRF_WriteRegisters>
    return 0;
 801876a:	2300      	movs	r3, #0
}
 801876c:	4618      	mov	r0, r3
 801876e:	3708      	adds	r7, #8
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}

08018774 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	4603      	mov	r3, r0
 801877c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801877e:	88fb      	ldrh	r3, [r7, #6]
 8018780:	0a1b      	lsrs	r3, r3, #8
 8018782:	b29b      	uxth	r3, r3
 8018784:	b2db      	uxtb	r3, r3
 8018786:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018788:	88fb      	ldrh	r3, [r7, #6]
 801878a:	b2db      	uxtb	r3, r3
 801878c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801878e:	f000 fb67 	bl	8018e60 <SUBGRF_GetPacketType>
 8018792:	4603      	mov	r3, r0
 8018794:	2b00      	cmp	r3, #0
 8018796:	d108      	bne.n	80187aa <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018798:	f107 030c 	add.w	r3, r7, #12
 801879c:	2202      	movs	r2, #2
 801879e:	4619      	mov	r1, r3
 80187a0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80187a4:	f000 fe08 	bl	80193b8 <SUBGRF_WriteRegisters>
            break;
 80187a8:	e000      	b.n	80187ac <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80187aa:	bf00      	nop
    }
}
 80187ac:	bf00      	nop
 80187ae:	3710      	adds	r7, #16
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}

080187b4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b084      	sub	sp, #16
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	4603      	mov	r3, r0
 80187bc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80187be:	88fb      	ldrh	r3, [r7, #6]
 80187c0:	0a1b      	lsrs	r3, r3, #8
 80187c2:	b29b      	uxth	r3, r3
 80187c4:	b2db      	uxtb	r3, r3
 80187c6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80187c8:	88fb      	ldrh	r3, [r7, #6]
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80187ce:	f000 fb47 	bl	8018e60 <SUBGRF_GetPacketType>
 80187d2:	4603      	mov	r3, r0
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d108      	bne.n	80187ea <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80187d8:	f107 030c 	add.w	r3, r7, #12
 80187dc:	2202      	movs	r2, #2
 80187de:	4619      	mov	r1, r3
 80187e0:	f240 60be 	movw	r0, #1726	; 0x6be
 80187e4:	f000 fde8 	bl	80193b8 <SUBGRF_WriteRegisters>
            break;
 80187e8:	e000      	b.n	80187ec <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80187ea:	bf00      	nop
    }
}
 80187ec:	bf00      	nop
 80187ee:	3710      	adds	r7, #16
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	4603      	mov	r3, r0
 80187fc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80187fe:	2300      	movs	r3, #0
 8018800:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018802:	f000 fb2d 	bl	8018e60 <SUBGRF_GetPacketType>
 8018806:	4603      	mov	r3, r0
 8018808:	2b00      	cmp	r3, #0
 801880a:	d121      	bne.n	8018850 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801880c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018810:	f000 fdbe 	bl	8019390 <SUBGRF_ReadRegister>
 8018814:	4603      	mov	r3, r0
 8018816:	f023 0301 	bic.w	r3, r3, #1
 801881a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801881c:	88fb      	ldrh	r3, [r7, #6]
 801881e:	0a1b      	lsrs	r3, r3, #8
 8018820:	b29b      	uxth	r3, r3
 8018822:	b25b      	sxtb	r3, r3
 8018824:	f003 0301 	and.w	r3, r3, #1
 8018828:	b25a      	sxtb	r2, r3
 801882a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801882e:	4313      	orrs	r3, r2
 8018830:	b25b      	sxtb	r3, r3
 8018832:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018834:	7bfb      	ldrb	r3, [r7, #15]
 8018836:	4619      	mov	r1, r3
 8018838:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801883c:	f000 fd94 	bl	8019368 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018840:	88fb      	ldrh	r3, [r7, #6]
 8018842:	b2db      	uxtb	r3, r3
 8018844:	4619      	mov	r1, r3
 8018846:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801884a:	f000 fd8d 	bl	8019368 <SUBGRF_WriteRegister>
            break;
 801884e:	e000      	b.n	8018852 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018850:	bf00      	nop
    }
}
 8018852:	bf00      	nop
 8018854:	3710      	adds	r7, #16
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}

0801885a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801885a:	b580      	push	{r7, lr}
 801885c:	b082      	sub	sp, #8
 801885e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018860:	2300      	movs	r3, #0
 8018862:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018864:	2300      	movs	r3, #0
 8018866:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018868:	2300      	movs	r3, #0
 801886a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801886c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018870:	f000 fd8e 	bl	8019390 <SUBGRF_ReadRegister>
 8018874:	4603      	mov	r3, r0
 8018876:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018878:	79fb      	ldrb	r3, [r7, #7]
 801887a:	f023 0301 	bic.w	r3, r3, #1
 801887e:	b2db      	uxtb	r3, r3
 8018880:	4619      	mov	r1, r3
 8018882:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018886:	f000 fd6f 	bl	8019368 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801888a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801888e:	f000 fd7f 	bl	8019390 <SUBGRF_ReadRegister>
 8018892:	4603      	mov	r3, r0
 8018894:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018896:	79bb      	ldrb	r3, [r7, #6]
 8018898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801889c:	b2db      	uxtb	r3, r3
 801889e:	4619      	mov	r1, r3
 80188a0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80188a4:	f000 fd60 	bl	8019368 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80188a8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80188ac:	f000 f88a 	bl	80189c4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80188b0:	463b      	mov	r3, r7
 80188b2:	2204      	movs	r2, #4
 80188b4:	4619      	mov	r1, r3
 80188b6:	f640 0019 	movw	r0, #2073	; 0x819
 80188ba:	f000 fd9f 	bl	80193fc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80188be:	2000      	movs	r0, #0
 80188c0:	f000 f844 	bl	801894c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80188c4:	79fb      	ldrb	r3, [r7, #7]
 80188c6:	4619      	mov	r1, r3
 80188c8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80188cc:	f000 fd4c 	bl	8019368 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80188d0:	79bb      	ldrb	r3, [r7, #6]
 80188d2:	4619      	mov	r1, r3
 80188d4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80188d8:	f000 fd46 	bl	8019368 <SUBGRF_WriteRegister>

    return number;
 80188dc:	683b      	ldr	r3, [r7, #0]
}
 80188de:	4618      	mov	r0, r3
 80188e0:	3708      	adds	r7, #8
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}
	...

080188e8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b084      	sub	sp, #16
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80188f0:	2000      	movs	r0, #0
 80188f2:	f7f2 f9c6 	bl	800ac82 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80188f6:	2002      	movs	r0, #2
 80188f8:	f000 ff1e 	bl	8019738 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80188fc:	793b      	ldrb	r3, [r7, #4]
 80188fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018902:	b2db      	uxtb	r3, r3
 8018904:	009b      	lsls	r3, r3, #2
 8018906:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018908:	793b      	ldrb	r3, [r7, #4]
 801890a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801890e:	b2db      	uxtb	r3, r3
 8018910:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018912:	b25b      	sxtb	r3, r3
 8018914:	4313      	orrs	r3, r2
 8018916:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018918:	793b      	ldrb	r3, [r7, #4]
 801891a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801891e:	b2db      	uxtb	r3, r3
 8018920:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018922:	4313      	orrs	r3, r2
 8018924:	b25b      	sxtb	r3, r3
 8018926:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018928:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801892a:	f107 030f 	add.w	r3, r7, #15
 801892e:	2201      	movs	r2, #1
 8018930:	4619      	mov	r1, r3
 8018932:	2084      	movs	r0, #132	; 0x84
 8018934:	f000 fdc8 	bl	80194c8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018938:	4b03      	ldr	r3, [pc, #12]	; (8018948 <SUBGRF_SetSleep+0x60>)
 801893a:	2200      	movs	r2, #0
 801893c:	701a      	strb	r2, [r3, #0]
}
 801893e:	bf00      	nop
 8018940:	3710      	adds	r7, #16
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	20000fd4 	.word	0x20000fd4

0801894c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b082      	sub	sp, #8
 8018950:	af00      	add	r7, sp, #0
 8018952:	4603      	mov	r3, r0
 8018954:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018956:	1dfb      	adds	r3, r7, #7
 8018958:	2201      	movs	r2, #1
 801895a:	4619      	mov	r1, r3
 801895c:	2080      	movs	r0, #128	; 0x80
 801895e:	f000 fdb3 	bl	80194c8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018962:	79fb      	ldrb	r3, [r7, #7]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d103      	bne.n	8018970 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018968:	4b05      	ldr	r3, [pc, #20]	; (8018980 <SUBGRF_SetStandby+0x34>)
 801896a:	2201      	movs	r2, #1
 801896c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801896e:	e002      	b.n	8018976 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018970:	4b03      	ldr	r3, [pc, #12]	; (8018980 <SUBGRF_SetStandby+0x34>)
 8018972:	2202      	movs	r2, #2
 8018974:	701a      	strb	r2, [r3, #0]
}
 8018976:	bf00      	nop
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
 801897e:	bf00      	nop
 8018980:	20000fd4 	.word	0x20000fd4

08018984 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b084      	sub	sp, #16
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801898c:	4b0c      	ldr	r3, [pc, #48]	; (80189c0 <SUBGRF_SetTx+0x3c>)
 801898e:	2204      	movs	r2, #4
 8018990:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	0c1b      	lsrs	r3, r3, #16
 8018996:	b2db      	uxtb	r3, r3
 8018998:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	0a1b      	lsrs	r3, r3, #8
 801899e:	b2db      	uxtb	r3, r3
 80189a0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	b2db      	uxtb	r3, r3
 80189a6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80189a8:	f107 030c 	add.w	r3, r7, #12
 80189ac:	2203      	movs	r2, #3
 80189ae:	4619      	mov	r1, r3
 80189b0:	2083      	movs	r0, #131	; 0x83
 80189b2:	f000 fd89 	bl	80194c8 <SUBGRF_WriteCommand>
}
 80189b6:	bf00      	nop
 80189b8:	3710      	adds	r7, #16
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	20000fd4 	.word	0x20000fd4

080189c4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b084      	sub	sp, #16
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80189cc:	4b0c      	ldr	r3, [pc, #48]	; (8018a00 <SUBGRF_SetRx+0x3c>)
 80189ce:	2205      	movs	r2, #5
 80189d0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	0c1b      	lsrs	r3, r3, #16
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	0a1b      	lsrs	r3, r3, #8
 80189de:	b2db      	uxtb	r3, r3
 80189e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80189e8:	f107 030c 	add.w	r3, r7, #12
 80189ec:	2203      	movs	r2, #3
 80189ee:	4619      	mov	r1, r3
 80189f0:	2082      	movs	r0, #130	; 0x82
 80189f2:	f000 fd69 	bl	80194c8 <SUBGRF_WriteCommand>
}
 80189f6:	bf00      	nop
 80189f8:	3710      	adds	r7, #16
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	20000fd4 	.word	0x20000fd4

08018a04 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b084      	sub	sp, #16
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018a0c:	4b0e      	ldr	r3, [pc, #56]	; (8018a48 <SUBGRF_SetRxBoosted+0x44>)
 8018a0e:	2205      	movs	r2, #5
 8018a10:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018a12:	2197      	movs	r1, #151	; 0x97
 8018a14:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8018a18:	f000 fca6 	bl	8019368 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	0c1b      	lsrs	r3, r3, #16
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	0a1b      	lsrs	r3, r3, #8
 8018a28:	b2db      	uxtb	r3, r3
 8018a2a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	b2db      	uxtb	r3, r3
 8018a30:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018a32:	f107 030c 	add.w	r3, r7, #12
 8018a36:	2203      	movs	r2, #3
 8018a38:	4619      	mov	r1, r3
 8018a3a:	2082      	movs	r0, #130	; 0x82
 8018a3c:	f000 fd44 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018a40:	bf00      	nop
 8018a42:	3710      	adds	r7, #16
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd80      	pop	{r7, pc}
 8018a48:	20000fd4 	.word	0x20000fd4

08018a4c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b084      	sub	sp, #16
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
 8018a54:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	0c1b      	lsrs	r3, r3, #16
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	0a1b      	lsrs	r3, r3, #8
 8018a62:	b2db      	uxtb	r3, r3
 8018a64:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	0c1b      	lsrs	r3, r3, #16
 8018a70:	b2db      	uxtb	r3, r3
 8018a72:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	0a1b      	lsrs	r3, r3, #8
 8018a78:	b2db      	uxtb	r3, r3
 8018a7a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018a7c:	683b      	ldr	r3, [r7, #0]
 8018a7e:	b2db      	uxtb	r3, r3
 8018a80:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018a82:	f107 0308 	add.w	r3, r7, #8
 8018a86:	2206      	movs	r2, #6
 8018a88:	4619      	mov	r1, r3
 8018a8a:	2094      	movs	r0, #148	; 0x94
 8018a8c:	f000 fd1c 	bl	80194c8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018a90:	4b03      	ldr	r3, [pc, #12]	; (8018aa0 <SUBGRF_SetRxDutyCycle+0x54>)
 8018a92:	2206      	movs	r2, #6
 8018a94:	701a      	strb	r2, [r3, #0]
}
 8018a96:	bf00      	nop
 8018a98:	3710      	adds	r7, #16
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	20000fd4 	.word	0x20000fd4

08018aa4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	2100      	movs	r1, #0
 8018aac:	20c5      	movs	r0, #197	; 0xc5
 8018aae:	f000 fd0b 	bl	80194c8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018ab2:	4b02      	ldr	r3, [pc, #8]	; (8018abc <SUBGRF_SetCad+0x18>)
 8018ab4:	2207      	movs	r2, #7
 8018ab6:	701a      	strb	r2, [r3, #0]
}
 8018ab8:	bf00      	nop
 8018aba:	bd80      	pop	{r7, pc}
 8018abc:	20000fd4 	.word	0x20000fd4

08018ac0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	20d1      	movs	r0, #209	; 0xd1
 8018aca:	f000 fcfd 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018ace:	bf00      	nop
 8018ad0:	bd80      	pop	{r7, pc}

08018ad2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018ad2:	b580      	push	{r7, lr}
 8018ad4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	2100      	movs	r1, #0
 8018ada:	20d2      	movs	r0, #210	; 0xd2
 8018adc:	f000 fcf4 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018ae0:	bf00      	nop
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	4603      	mov	r3, r0
 8018aec:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018aee:	1dfb      	adds	r3, r7, #7
 8018af0:	2201      	movs	r2, #1
 8018af2:	4619      	mov	r1, r3
 8018af4:	209f      	movs	r0, #159	; 0x9f
 8018af6:	f000 fce7 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018afa:	bf00      	nop
 8018afc:	3708      	adds	r7, #8
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}

08018b02 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018b02:	b580      	push	{r7, lr}
 8018b04:	b084      	sub	sp, #16
 8018b06:	af00      	add	r7, sp, #0
 8018b08:	4603      	mov	r3, r0
 8018b0a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018b0c:	1dfb      	adds	r3, r7, #7
 8018b0e:	2201      	movs	r2, #1
 8018b10:	4619      	mov	r1, r3
 8018b12:	20a0      	movs	r0, #160	; 0xa0
 8018b14:	f000 fcd8 	bl	80194c8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018b18:	79fb      	ldrb	r3, [r7, #7]
 8018b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8018b1c:	d91c      	bls.n	8018b58 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018b1e:	79fb      	ldrb	r3, [r7, #7]
 8018b20:	085b      	lsrs	r3, r3, #1
 8018b22:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018b24:	2300      	movs	r3, #0
 8018b26:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018b28:	2300      	movs	r3, #0
 8018b2a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018b2c:	e005      	b.n	8018b3a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018b2e:	7bfb      	ldrb	r3, [r7, #15]
 8018b30:	089b      	lsrs	r3, r3, #2
 8018b32:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018b34:	7bbb      	ldrb	r3, [r7, #14]
 8018b36:	3301      	adds	r3, #1
 8018b38:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018b3a:	7bfb      	ldrb	r3, [r7, #15]
 8018b3c:	2b1f      	cmp	r3, #31
 8018b3e:	d8f6      	bhi.n	8018b2e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018b40:	7bfb      	ldrb	r3, [r7, #15]
 8018b42:	00db      	lsls	r3, r3, #3
 8018b44:	b2da      	uxtb	r2, r3
 8018b46:	7bbb      	ldrb	r3, [r7, #14]
 8018b48:	4413      	add	r3, r2
 8018b4a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018b4c:	7b7b      	ldrb	r3, [r7, #13]
 8018b4e:	4619      	mov	r1, r3
 8018b50:	f240 7006 	movw	r0, #1798	; 0x706
 8018b54:	f000 fc08 	bl	8019368 <SUBGRF_WriteRegister>
    }
}
 8018b58:	bf00      	nop
 8018b5a:	3710      	adds	r7, #16
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd80      	pop	{r7, pc}

08018b60 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b082      	sub	sp, #8
 8018b64:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018b66:	f7f2 f8a8 	bl	800acba <RBI_IsDCDC>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	2b01      	cmp	r3, #1
 8018b6e:	d102      	bne.n	8018b76 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018b70:	2301      	movs	r3, #1
 8018b72:	71fb      	strb	r3, [r7, #7]
 8018b74:	e001      	b.n	8018b7a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018b76:	2300      	movs	r3, #0
 8018b78:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018b7a:	1dfb      	adds	r3, r7, #7
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	4619      	mov	r1, r3
 8018b80:	2096      	movs	r0, #150	; 0x96
 8018b82:	f000 fca1 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018b86:	bf00      	nop
 8018b88:	3708      	adds	r7, #8
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}

08018b8e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018b8e:	b580      	push	{r7, lr}
 8018b90:	b084      	sub	sp, #16
 8018b92:	af00      	add	r7, sp, #0
 8018b94:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018b96:	793b      	ldrb	r3, [r7, #4]
 8018b98:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	019b      	lsls	r3, r3, #6
 8018ba0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018ba2:	793b      	ldrb	r3, [r7, #4]
 8018ba4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018bac:	b25b      	sxtb	r3, r3
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018bb2:	793b      	ldrb	r3, [r7, #4]
 8018bb4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018bbc:	b25b      	sxtb	r3, r3
 8018bbe:	4313      	orrs	r3, r2
 8018bc0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018bc2:	793b      	ldrb	r3, [r7, #4]
 8018bc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018bcc:	b25b      	sxtb	r3, r3
 8018bce:	4313      	orrs	r3, r2
 8018bd0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018bd2:	793b      	ldrb	r3, [r7, #4]
 8018bd4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018bdc:	b25b      	sxtb	r3, r3
 8018bde:	4313      	orrs	r3, r2
 8018be0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018be2:	793b      	ldrb	r3, [r7, #4]
 8018be4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018be8:	b2db      	uxtb	r3, r3
 8018bea:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018bec:	b25b      	sxtb	r3, r3
 8018bee:	4313      	orrs	r3, r2
 8018bf0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018bf2:	793b      	ldrb	r3, [r7, #4]
 8018bf4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018bfc:	4313      	orrs	r3, r2
 8018bfe:	b25b      	sxtb	r3, r3
 8018c00:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018c02:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018c04:	f107 030f 	add.w	r3, r7, #15
 8018c08:	2201      	movs	r2, #1
 8018c0a:	4619      	mov	r1, r3
 8018c0c:	2089      	movs	r0, #137	; 0x89
 8018c0e:	f000 fc5b 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018c12:	bf00      	nop
 8018c14:	3710      	adds	r7, #16
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}
	...

08018c1c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b084      	sub	sp, #16
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	4a1b      	ldr	r2, [pc, #108]	; (8018c94 <SUBGRF_CalibrateImage+0x78>)
 8018c28:	4293      	cmp	r3, r2
 8018c2a:	d904      	bls.n	8018c36 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018c2c:	23e1      	movs	r3, #225	; 0xe1
 8018c2e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018c30:	23e9      	movs	r3, #233	; 0xe9
 8018c32:	737b      	strb	r3, [r7, #13]
 8018c34:	e022      	b.n	8018c7c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	4a17      	ldr	r2, [pc, #92]	; (8018c98 <SUBGRF_CalibrateImage+0x7c>)
 8018c3a:	4293      	cmp	r3, r2
 8018c3c:	d904      	bls.n	8018c48 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018c3e:	23d7      	movs	r3, #215	; 0xd7
 8018c40:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018c42:	23db      	movs	r3, #219	; 0xdb
 8018c44:	737b      	strb	r3, [r7, #13]
 8018c46:	e019      	b.n	8018c7c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	4a14      	ldr	r2, [pc, #80]	; (8018c9c <SUBGRF_CalibrateImage+0x80>)
 8018c4c:	4293      	cmp	r3, r2
 8018c4e:	d904      	bls.n	8018c5a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018c50:	23c1      	movs	r3, #193	; 0xc1
 8018c52:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018c54:	23c5      	movs	r3, #197	; 0xc5
 8018c56:	737b      	strb	r3, [r7, #13]
 8018c58:	e010      	b.n	8018c7c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	4a10      	ldr	r2, [pc, #64]	; (8018ca0 <SUBGRF_CalibrateImage+0x84>)
 8018c5e:	4293      	cmp	r3, r2
 8018c60:	d904      	bls.n	8018c6c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018c62:	2375      	movs	r3, #117	; 0x75
 8018c64:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018c66:	2381      	movs	r3, #129	; 0x81
 8018c68:	737b      	strb	r3, [r7, #13]
 8018c6a:	e007      	b.n	8018c7c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	4a0d      	ldr	r2, [pc, #52]	; (8018ca4 <SUBGRF_CalibrateImage+0x88>)
 8018c70:	4293      	cmp	r3, r2
 8018c72:	d903      	bls.n	8018c7c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018c74:	236b      	movs	r3, #107	; 0x6b
 8018c76:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018c78:	236f      	movs	r3, #111	; 0x6f
 8018c7a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018c7c:	f107 030c 	add.w	r3, r7, #12
 8018c80:	2202      	movs	r2, #2
 8018c82:	4619      	mov	r1, r3
 8018c84:	2098      	movs	r0, #152	; 0x98
 8018c86:	f000 fc1f 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018c8a:	bf00      	nop
 8018c8c:	3710      	adds	r7, #16
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	bd80      	pop	{r7, pc}
 8018c92:	bf00      	nop
 8018c94:	35a4e900 	.word	0x35a4e900
 8018c98:	32a9f880 	.word	0x32a9f880
 8018c9c:	2de54480 	.word	0x2de54480
 8018ca0:	1b6b0b00 	.word	0x1b6b0b00
 8018ca4:	1954fc40 	.word	0x1954fc40

08018ca8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018ca8:	b590      	push	{r4, r7, lr}
 8018caa:	b085      	sub	sp, #20
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	4604      	mov	r4, r0
 8018cb0:	4608      	mov	r0, r1
 8018cb2:	4611      	mov	r1, r2
 8018cb4:	461a      	mov	r2, r3
 8018cb6:	4623      	mov	r3, r4
 8018cb8:	71fb      	strb	r3, [r7, #7]
 8018cba:	4603      	mov	r3, r0
 8018cbc:	71bb      	strb	r3, [r7, #6]
 8018cbe:	460b      	mov	r3, r1
 8018cc0:	717b      	strb	r3, [r7, #5]
 8018cc2:	4613      	mov	r3, r2
 8018cc4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018cc6:	79fb      	ldrb	r3, [r7, #7]
 8018cc8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018cca:	79bb      	ldrb	r3, [r7, #6]
 8018ccc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018cce:	797b      	ldrb	r3, [r7, #5]
 8018cd0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018cd2:	793b      	ldrb	r3, [r7, #4]
 8018cd4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018cd6:	f107 030c 	add.w	r3, r7, #12
 8018cda:	2204      	movs	r2, #4
 8018cdc:	4619      	mov	r1, r3
 8018cde:	2095      	movs	r0, #149	; 0x95
 8018ce0:	f000 fbf2 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018ce4:	bf00      	nop
 8018ce6:	3714      	adds	r7, #20
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd90      	pop	{r4, r7, pc}

08018cec <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018cec:	b590      	push	{r4, r7, lr}
 8018cee:	b085      	sub	sp, #20
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	4608      	mov	r0, r1
 8018cf6:	4611      	mov	r1, r2
 8018cf8:	461a      	mov	r2, r3
 8018cfa:	4623      	mov	r3, r4
 8018cfc:	80fb      	strh	r3, [r7, #6]
 8018cfe:	4603      	mov	r3, r0
 8018d00:	80bb      	strh	r3, [r7, #4]
 8018d02:	460b      	mov	r3, r1
 8018d04:	807b      	strh	r3, [r7, #2]
 8018d06:	4613      	mov	r3, r2
 8018d08:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018d0a:	88fb      	ldrh	r3, [r7, #6]
 8018d0c:	0a1b      	lsrs	r3, r3, #8
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018d14:	88fb      	ldrh	r3, [r7, #6]
 8018d16:	b2db      	uxtb	r3, r3
 8018d18:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018d1a:	88bb      	ldrh	r3, [r7, #4]
 8018d1c:	0a1b      	lsrs	r3, r3, #8
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018d24:	88bb      	ldrh	r3, [r7, #4]
 8018d26:	b2db      	uxtb	r3, r3
 8018d28:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018d2a:	887b      	ldrh	r3, [r7, #2]
 8018d2c:	0a1b      	lsrs	r3, r3, #8
 8018d2e:	b29b      	uxth	r3, r3
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018d34:	887b      	ldrh	r3, [r7, #2]
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018d3a:	883b      	ldrh	r3, [r7, #0]
 8018d3c:	0a1b      	lsrs	r3, r3, #8
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	b2db      	uxtb	r3, r3
 8018d42:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018d44:	883b      	ldrh	r3, [r7, #0]
 8018d46:	b2db      	uxtb	r3, r3
 8018d48:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018d4a:	f107 0308 	add.w	r3, r7, #8
 8018d4e:	2208      	movs	r2, #8
 8018d50:	4619      	mov	r1, r3
 8018d52:	2008      	movs	r0, #8
 8018d54:	f000 fbb8 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018d58:	bf00      	nop
 8018d5a:	3714      	adds	r7, #20
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd90      	pop	{r4, r7, pc}

08018d60 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b084      	sub	sp, #16
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	4603      	mov	r3, r0
 8018d68:	6039      	str	r1, [r7, #0]
 8018d6a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018d6c:	79fb      	ldrb	r3, [r7, #7]
 8018d6e:	f003 0307 	and.w	r3, r3, #7
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018d76:	683b      	ldr	r3, [r7, #0]
 8018d78:	0c1b      	lsrs	r3, r3, #16
 8018d7a:	b2db      	uxtb	r3, r3
 8018d7c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	0a1b      	lsrs	r3, r3, #8
 8018d82:	b2db      	uxtb	r3, r3
 8018d84:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018d8c:	f107 030c 	add.w	r3, r7, #12
 8018d90:	2204      	movs	r2, #4
 8018d92:	4619      	mov	r1, r3
 8018d94:	2097      	movs	r0, #151	; 0x97
 8018d96:	f000 fb97 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018d9a:	bf00      	nop
 8018d9c:	3710      	adds	r7, #16
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}
	...

08018da4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018da4:	b5b0      	push	{r4, r5, r7, lr}
 8018da6:	b084      	sub	sp, #16
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018dac:	2300      	movs	r3, #0
 8018dae:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018db0:	4b1b      	ldr	r3, [pc, #108]	; (8018e20 <SUBGRF_SetRfFrequency+0x7c>)
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	f083 0301 	eor.w	r3, r3, #1
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d005      	beq.n	8018dca <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018dbe:	6878      	ldr	r0, [r7, #4]
 8018dc0:	f7ff ff2c 	bl	8018c1c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018dc4:	4b16      	ldr	r3, [pc, #88]	; (8018e20 <SUBGRF_SetRfFrequency+0x7c>)
 8018dc6:	2201      	movs	r2, #1
 8018dc8:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	461a      	mov	r2, r3
 8018dce:	f04f 0300 	mov.w	r3, #0
 8018dd2:	09d5      	lsrs	r5, r2, #7
 8018dd4:	0654      	lsls	r4, r2, #25
 8018dd6:	4a13      	ldr	r2, [pc, #76]	; (8018e24 <SUBGRF_SetRfFrequency+0x80>)
 8018dd8:	f04f 0300 	mov.w	r3, #0
 8018ddc:	4620      	mov	r0, r4
 8018dde:	4629      	mov	r1, r5
 8018de0:	f7e7 febc 	bl	8000b5c <__aeabi_uldivmod>
 8018de4:	4602      	mov	r2, r0
 8018de6:	460b      	mov	r3, r1
 8018de8:	4613      	mov	r3, r2
 8018dea:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	0e1b      	lsrs	r3, r3, #24
 8018df0:	b2db      	uxtb	r3, r3
 8018df2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	0c1b      	lsrs	r3, r3, #16
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	0a1b      	lsrs	r3, r3, #8
 8018e00:	b2db      	uxtb	r3, r3
 8018e02:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	b2db      	uxtb	r3, r3
 8018e08:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018e0a:	f107 0308 	add.w	r3, r7, #8
 8018e0e:	2204      	movs	r2, #4
 8018e10:	4619      	mov	r1, r3
 8018e12:	2086      	movs	r0, #134	; 0x86
 8018e14:	f000 fb58 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018e18:	bf00      	nop
 8018e1a:	3710      	adds	r7, #16
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e20:	20000fdc 	.word	0x20000fdc
 8018e24:	01e84800 	.word	0x01e84800

08018e28 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b082      	sub	sp, #8
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	4603      	mov	r3, r0
 8018e30:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018e32:	79fa      	ldrb	r2, [r7, #7]
 8018e34:	4b09      	ldr	r3, [pc, #36]	; (8018e5c <SUBGRF_SetPacketType+0x34>)
 8018e36:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018e38:	79fb      	ldrb	r3, [r7, #7]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d104      	bne.n	8018e48 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018e3e:	2100      	movs	r1, #0
 8018e40:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018e44:	f000 fa90 	bl	8019368 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018e48:	1dfb      	adds	r3, r7, #7
 8018e4a:	2201      	movs	r2, #1
 8018e4c:	4619      	mov	r1, r3
 8018e4e:	208a      	movs	r0, #138	; 0x8a
 8018e50:	f000 fb3a 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018e54:	bf00      	nop
 8018e56:	3708      	adds	r7, #8
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}
 8018e5c:	20000fd5 	.word	0x20000fd5

08018e60 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018e60:	b480      	push	{r7}
 8018e62:	af00      	add	r7, sp, #0
    return PacketType;
 8018e64:	4b02      	ldr	r3, [pc, #8]	; (8018e70 <SUBGRF_GetPacketType+0x10>)
 8018e66:	781b      	ldrb	r3, [r3, #0]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bc80      	pop	{r7}
 8018e6e:	4770      	bx	lr
 8018e70:	20000fd5 	.word	0x20000fd5

08018e74 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b084      	sub	sp, #16
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	71fb      	strb	r3, [r7, #7]
 8018e7e:	460b      	mov	r3, r1
 8018e80:	71bb      	strb	r3, [r7, #6]
 8018e82:	4613      	mov	r3, r2
 8018e84:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018e86:	79fb      	ldrb	r3, [r7, #7]
 8018e88:	2b01      	cmp	r3, #1
 8018e8a:	d124      	bne.n	8018ed6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018e8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018e90:	2b0f      	cmp	r3, #15
 8018e92:	d106      	bne.n	8018ea2 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018e94:	2301      	movs	r3, #1
 8018e96:	2201      	movs	r2, #1
 8018e98:	2100      	movs	r1, #0
 8018e9a:	2006      	movs	r0, #6
 8018e9c:	f7ff ff04 	bl	8018ca8 <SUBGRF_SetPaConfig>
 8018ea0:	e005      	b.n	8018eae <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018ea2:	2301      	movs	r3, #1
 8018ea4:	2201      	movs	r2, #1
 8018ea6:	2100      	movs	r1, #0
 8018ea8:	2004      	movs	r0, #4
 8018eaa:	f7ff fefd 	bl	8018ca8 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018eae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018eb2:	2b0d      	cmp	r3, #13
 8018eb4:	dd02      	ble.n	8018ebc <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018eb6:	230e      	movs	r3, #14
 8018eb8:	71bb      	strb	r3, [r7, #6]
 8018eba:	e006      	b.n	8018eca <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018ebc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ec0:	f113 0f11 	cmn.w	r3, #17
 8018ec4:	da01      	bge.n	8018eca <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018ec6:	23ef      	movs	r3, #239	; 0xef
 8018ec8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018eca:	2118      	movs	r1, #24
 8018ecc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018ed0:	f000 fa4a 	bl	8019368 <SUBGRF_WriteRegister>
 8018ed4:	e025      	b.n	8018f22 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018ed6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018eda:	f000 fa59 	bl	8019390 <SUBGRF_ReadRegister>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	f043 031e 	orr.w	r3, r3, #30
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	4619      	mov	r1, r3
 8018ee8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018eec:	f000 fa3c 	bl	8019368 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	2107      	movs	r1, #7
 8018ef6:	2004      	movs	r0, #4
 8018ef8:	f7ff fed6 	bl	8018ca8 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018efc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f00:	2b16      	cmp	r3, #22
 8018f02:	dd02      	ble.n	8018f0a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018f04:	2316      	movs	r3, #22
 8018f06:	71bb      	strb	r3, [r7, #6]
 8018f08:	e006      	b.n	8018f18 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018f0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f0e:	f113 0f09 	cmn.w	r3, #9
 8018f12:	da01      	bge.n	8018f18 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018f14:	23f7      	movs	r3, #247	; 0xf7
 8018f16:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018f18:	2138      	movs	r1, #56	; 0x38
 8018f1a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018f1e:	f000 fa23 	bl	8019368 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018f22:	79bb      	ldrb	r3, [r7, #6]
 8018f24:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018f26:	797b      	ldrb	r3, [r7, #5]
 8018f28:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018f2a:	f107 030c 	add.w	r3, r7, #12
 8018f2e:	2202      	movs	r2, #2
 8018f30:	4619      	mov	r1, r3
 8018f32:	208e      	movs	r0, #142	; 0x8e
 8018f34:	f000 fac8 	bl	80194c8 <SUBGRF_WriteCommand>
}
 8018f38:	bf00      	nop
 8018f3a:	3710      	adds	r7, #16
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}

08018f40 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018f40:	b5b0      	push	{r4, r5, r7, lr}
 8018f42:	b086      	sub	sp, #24
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018f48:	2300      	movs	r3, #0
 8018f4a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018f4c:	4a5e      	ldr	r2, [pc, #376]	; (80190c8 <SUBGRF_SetModulationParams+0x188>)
 8018f4e:	f107 0308 	add.w	r3, r7, #8
 8018f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f56:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	781a      	ldrb	r2, [r3, #0]
 8018f5e:	4b5b      	ldr	r3, [pc, #364]	; (80190cc <SUBGRF_SetModulationParams+0x18c>)
 8018f60:	781b      	ldrb	r3, [r3, #0]
 8018f62:	429a      	cmp	r2, r3
 8018f64:	d004      	beq.n	8018f70 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	781b      	ldrb	r3, [r3, #0]
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f7ff ff5c 	bl	8018e28 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	781b      	ldrb	r3, [r3, #0]
 8018f74:	2b03      	cmp	r3, #3
 8018f76:	f200 80a2 	bhi.w	80190be <SUBGRF_SetModulationParams+0x17e>
 8018f7a:	a201      	add	r2, pc, #4	; (adr r2, 8018f80 <SUBGRF_SetModulationParams+0x40>)
 8018f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f80:	08018f91 	.word	0x08018f91
 8018f84:	0801904d 	.word	0x0801904d
 8018f88:	0801900f 	.word	0x0801900f
 8018f8c:	0801907b 	.word	0x0801907b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018f90:	2308      	movs	r3, #8
 8018f92:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	685b      	ldr	r3, [r3, #4]
 8018f98:	4a4d      	ldr	r2, [pc, #308]	; (80190d0 <SUBGRF_SetModulationParams+0x190>)
 8018f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f9e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	0c1b      	lsrs	r3, r3, #16
 8018fa4:	b2db      	uxtb	r3, r3
 8018fa6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	0a1b      	lsrs	r3, r3, #8
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	b2db      	uxtb	r3, r3
 8018fb4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	7b1b      	ldrb	r3, [r3, #12]
 8018fba:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	7b5b      	ldrb	r3, [r3, #13]
 8018fc0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	689b      	ldr	r3, [r3, #8]
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	f04f 0300 	mov.w	r3, #0
 8018fcc:	09d5      	lsrs	r5, r2, #7
 8018fce:	0654      	lsls	r4, r2, #25
 8018fd0:	4a40      	ldr	r2, [pc, #256]	; (80190d4 <SUBGRF_SetModulationParams+0x194>)
 8018fd2:	f04f 0300 	mov.w	r3, #0
 8018fd6:	4620      	mov	r0, r4
 8018fd8:	4629      	mov	r1, r5
 8018fda:	f7e7 fdbf 	bl	8000b5c <__aeabi_uldivmod>
 8018fde:	4602      	mov	r2, r0
 8018fe0:	460b      	mov	r3, r1
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018fe6:	697b      	ldr	r3, [r7, #20]
 8018fe8:	0c1b      	lsrs	r3, r3, #16
 8018fea:	b2db      	uxtb	r3, r3
 8018fec:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	0a1b      	lsrs	r3, r3, #8
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ffc:	7cfb      	ldrb	r3, [r7, #19]
 8018ffe:	b29a      	uxth	r2, r3
 8019000:	f107 0308 	add.w	r3, r7, #8
 8019004:	4619      	mov	r1, r3
 8019006:	208b      	movs	r0, #139	; 0x8b
 8019008:	f000 fa5e 	bl	80194c8 <SUBGRF_WriteCommand>
        break;
 801900c:	e058      	b.n	80190c0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 801900e:	2304      	movs	r3, #4
 8019010:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	691b      	ldr	r3, [r3, #16]
 8019016:	4a2e      	ldr	r2, [pc, #184]	; (80190d0 <SUBGRF_SetModulationParams+0x190>)
 8019018:	fbb2 f3f3 	udiv	r3, r2, r3
 801901c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	0c1b      	lsrs	r3, r3, #16
 8019022:	b2db      	uxtb	r3, r3
 8019024:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019026:	697b      	ldr	r3, [r7, #20]
 8019028:	0a1b      	lsrs	r3, r3, #8
 801902a:	b2db      	uxtb	r3, r3
 801902c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801902e:	697b      	ldr	r3, [r7, #20]
 8019030:	b2db      	uxtb	r3, r3
 8019032:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	7d1b      	ldrb	r3, [r3, #20]
 8019038:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801903a:	7cfb      	ldrb	r3, [r7, #19]
 801903c:	b29a      	uxth	r2, r3
 801903e:	f107 0308 	add.w	r3, r7, #8
 8019042:	4619      	mov	r1, r3
 8019044:	208b      	movs	r0, #139	; 0x8b
 8019046:	f000 fa3f 	bl	80194c8 <SUBGRF_WriteCommand>
        break;
 801904a:	e039      	b.n	80190c0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 801904c:	2304      	movs	r3, #4
 801904e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	7e1b      	ldrb	r3, [r3, #24]
 8019054:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	7e5b      	ldrb	r3, [r3, #25]
 801905a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	7e9b      	ldrb	r3, [r3, #26]
 8019060:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	7edb      	ldrb	r3, [r3, #27]
 8019066:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019068:	7cfb      	ldrb	r3, [r7, #19]
 801906a:	b29a      	uxth	r2, r3
 801906c:	f107 0308 	add.w	r3, r7, #8
 8019070:	4619      	mov	r1, r3
 8019072:	208b      	movs	r0, #139	; 0x8b
 8019074:	f000 fa28 	bl	80194c8 <SUBGRF_WriteCommand>

        break;
 8019078:	e022      	b.n	80190c0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 801907a:	2305      	movs	r3, #5
 801907c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	685b      	ldr	r3, [r3, #4]
 8019082:	4a13      	ldr	r2, [pc, #76]	; (80190d0 <SUBGRF_SetModulationParams+0x190>)
 8019084:	fbb2 f3f3 	udiv	r3, r2, r3
 8019088:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	0c1b      	lsrs	r3, r3, #16
 801908e:	b2db      	uxtb	r3, r3
 8019090:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019092:	697b      	ldr	r3, [r7, #20]
 8019094:	0a1b      	lsrs	r3, r3, #8
 8019096:	b2db      	uxtb	r3, r3
 8019098:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801909a:	697b      	ldr	r3, [r7, #20]
 801909c:	b2db      	uxtb	r3, r3
 801909e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	7b1b      	ldrb	r3, [r3, #12]
 80190a4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	7b5b      	ldrb	r3, [r3, #13]
 80190aa:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80190ac:	7cfb      	ldrb	r3, [r7, #19]
 80190ae:	b29a      	uxth	r2, r3
 80190b0:	f107 0308 	add.w	r3, r7, #8
 80190b4:	4619      	mov	r1, r3
 80190b6:	208b      	movs	r0, #139	; 0x8b
 80190b8:	f000 fa06 	bl	80194c8 <SUBGRF_WriteCommand>
        break;
 80190bc:	e000      	b.n	80190c0 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80190be:	bf00      	nop
    }
}
 80190c0:	bf00      	nop
 80190c2:	3718      	adds	r7, #24
 80190c4:	46bd      	mov	sp, r7
 80190c6:	bdb0      	pop	{r4, r5, r7, pc}
 80190c8:	0801ba08 	.word	0x0801ba08
 80190cc:	20000fd5 	.word	0x20000fd5
 80190d0:	3d090000 	.word	0x3d090000
 80190d4:	01e84800 	.word	0x01e84800

080190d8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b086      	sub	sp, #24
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80190e0:	2300      	movs	r3, #0
 80190e2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80190e4:	4a48      	ldr	r2, [pc, #288]	; (8019208 <SUBGRF_SetPacketParams+0x130>)
 80190e6:	f107 030c 	add.w	r3, r7, #12
 80190ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80190ec:	c303      	stmia	r3!, {r0, r1}
 80190ee:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	781a      	ldrb	r2, [r3, #0]
 80190f4:	4b45      	ldr	r3, [pc, #276]	; (801920c <SUBGRF_SetPacketParams+0x134>)
 80190f6:	781b      	ldrb	r3, [r3, #0]
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d004      	beq.n	8019106 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	781b      	ldrb	r3, [r3, #0]
 8019100:	4618      	mov	r0, r3
 8019102:	f7ff fe91 	bl	8018e28 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	781b      	ldrb	r3, [r3, #0]
 801910a:	2b03      	cmp	r3, #3
 801910c:	d878      	bhi.n	8019200 <SUBGRF_SetPacketParams+0x128>
 801910e:	a201      	add	r2, pc, #4	; (adr r2, 8019114 <SUBGRF_SetPacketParams+0x3c>)
 8019110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019114:	08019125 	.word	0x08019125
 8019118:	080191b5 	.word	0x080191b5
 801911c:	080191a9 	.word	0x080191a9
 8019120:	08019125 	.word	0x08019125
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	7a5b      	ldrb	r3, [r3, #9]
 8019128:	2bf1      	cmp	r3, #241	; 0xf1
 801912a:	d10a      	bne.n	8019142 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801912c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019130:	f7ff fb20 	bl	8018774 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019134:	f248 0005 	movw	r0, #32773	; 0x8005
 8019138:	f7ff fb3c 	bl	80187b4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801913c:	2302      	movs	r3, #2
 801913e:	75bb      	strb	r3, [r7, #22]
 8019140:	e011      	b.n	8019166 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	7a5b      	ldrb	r3, [r3, #9]
 8019146:	2bf2      	cmp	r3, #242	; 0xf2
 8019148:	d10a      	bne.n	8019160 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801914a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801914e:	f7ff fb11 	bl	8018774 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019152:	f241 0021 	movw	r0, #4129	; 0x1021
 8019156:	f7ff fb2d 	bl	80187b4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801915a:	2306      	movs	r3, #6
 801915c:	75bb      	strb	r3, [r7, #22]
 801915e:	e002      	b.n	8019166 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	7a5b      	ldrb	r3, [r3, #9]
 8019164:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019166:	2309      	movs	r3, #9
 8019168:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	885b      	ldrh	r3, [r3, #2]
 801916e:	0a1b      	lsrs	r3, r3, #8
 8019170:	b29b      	uxth	r3, r3
 8019172:	b2db      	uxtb	r3, r3
 8019174:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	885b      	ldrh	r3, [r3, #2]
 801917a:	b2db      	uxtb	r3, r3
 801917c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	791b      	ldrb	r3, [r3, #4]
 8019182:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	795b      	ldrb	r3, [r3, #5]
 8019188:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	799b      	ldrb	r3, [r3, #6]
 801918e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	79db      	ldrb	r3, [r3, #7]
 8019194:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	7a1b      	ldrb	r3, [r3, #8]
 801919a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801919c:	7dbb      	ldrb	r3, [r7, #22]
 801919e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	7a9b      	ldrb	r3, [r3, #10]
 80191a4:	753b      	strb	r3, [r7, #20]
        break;
 80191a6:	e022      	b.n	80191ee <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80191a8:	2301      	movs	r3, #1
 80191aa:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	7b1b      	ldrb	r3, [r3, #12]
 80191b0:	733b      	strb	r3, [r7, #12]
        break;
 80191b2:	e01c      	b.n	80191ee <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80191b4:	2306      	movs	r3, #6
 80191b6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	89db      	ldrh	r3, [r3, #14]
 80191bc:	0a1b      	lsrs	r3, r3, #8
 80191be:	b29b      	uxth	r3, r3
 80191c0:	b2db      	uxtb	r3, r3
 80191c2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	89db      	ldrh	r3, [r3, #14]
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	7c1a      	ldrb	r2, [r3, #16]
 80191d0:	4b0f      	ldr	r3, [pc, #60]	; (8019210 <SUBGRF_SetPacketParams+0x138>)
 80191d2:	4611      	mov	r1, r2
 80191d4:	7019      	strb	r1, [r3, #0]
 80191d6:	4613      	mov	r3, r2
 80191d8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	7c5b      	ldrb	r3, [r3, #17]
 80191de:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	7c9b      	ldrb	r3, [r3, #18]
 80191e4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	7cdb      	ldrb	r3, [r3, #19]
 80191ea:	747b      	strb	r3, [r7, #17]
        break;
 80191ec:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80191ee:	7dfb      	ldrb	r3, [r7, #23]
 80191f0:	b29a      	uxth	r2, r3
 80191f2:	f107 030c 	add.w	r3, r7, #12
 80191f6:	4619      	mov	r1, r3
 80191f8:	208c      	movs	r0, #140	; 0x8c
 80191fa:	f000 f965 	bl	80194c8 <SUBGRF_WriteCommand>
 80191fe:	e000      	b.n	8019202 <SUBGRF_SetPacketParams+0x12a>
        return;
 8019200:	bf00      	nop
}
 8019202:	3718      	adds	r7, #24
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}
 8019208:	0801ba10 	.word	0x0801ba10
 801920c:	20000fd5 	.word	0x20000fd5
 8019210:	20000fd6 	.word	0x20000fd6

08019214 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b084      	sub	sp, #16
 8019218:	af00      	add	r7, sp, #0
 801921a:	4603      	mov	r3, r0
 801921c:	460a      	mov	r2, r1
 801921e:	71fb      	strb	r3, [r7, #7]
 8019220:	4613      	mov	r3, r2
 8019222:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019224:	79fb      	ldrb	r3, [r7, #7]
 8019226:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019228:	79bb      	ldrb	r3, [r7, #6]
 801922a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801922c:	f107 030c 	add.w	r3, r7, #12
 8019230:	2202      	movs	r2, #2
 8019232:	4619      	mov	r1, r3
 8019234:	208f      	movs	r0, #143	; 0x8f
 8019236:	f000 f947 	bl	80194c8 <SUBGRF_WriteCommand>
}
 801923a:	bf00      	nop
 801923c:	3710      	adds	r7, #16
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019242:	b580      	push	{r7, lr}
 8019244:	b082      	sub	sp, #8
 8019246:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019248:	2300      	movs	r3, #0
 801924a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801924c:	1d3b      	adds	r3, r7, #4
 801924e:	2201      	movs	r2, #1
 8019250:	4619      	mov	r1, r3
 8019252:	2015      	movs	r0, #21
 8019254:	f000 f95a 	bl	801950c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019258:	793b      	ldrb	r3, [r7, #4]
 801925a:	425b      	negs	r3, r3
 801925c:	105b      	asrs	r3, r3, #1
 801925e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019260:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019264:	4618      	mov	r0, r3
 8019266:	3708      	adds	r7, #8
 8019268:	46bd      	mov	sp, r7
 801926a:	bd80      	pop	{r7, pc}

0801926c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b084      	sub	sp, #16
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
 8019274:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019276:	f107 030c 	add.w	r3, r7, #12
 801927a:	2202      	movs	r2, #2
 801927c:	4619      	mov	r1, r3
 801927e:	2013      	movs	r0, #19
 8019280:	f000 f944 	bl	801950c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019284:	f7ff fdec 	bl	8018e60 <SUBGRF_GetPacketType>
 8019288:	4603      	mov	r3, r0
 801928a:	2b01      	cmp	r3, #1
 801928c:	d10d      	bne.n	80192aa <SUBGRF_GetRxBufferStatus+0x3e>
 801928e:	4b0c      	ldr	r3, [pc, #48]	; (80192c0 <SUBGRF_GetRxBufferStatus+0x54>)
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	b2db      	uxtb	r3, r3
 8019294:	2b01      	cmp	r3, #1
 8019296:	d108      	bne.n	80192aa <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019298:	f240 7002 	movw	r0, #1794	; 0x702
 801929c:	f000 f878 	bl	8019390 <SUBGRF_ReadRegister>
 80192a0:	4603      	mov	r3, r0
 80192a2:	461a      	mov	r2, r3
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	701a      	strb	r2, [r3, #0]
 80192a8:	e002      	b.n	80192b0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80192aa:	7b3a      	ldrb	r2, [r7, #12]
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80192b0:	7b7a      	ldrb	r2, [r7, #13]
 80192b2:	683b      	ldr	r3, [r7, #0]
 80192b4:	701a      	strb	r2, [r3, #0]
}
 80192b6:	bf00      	nop
 80192b8:	3710      	adds	r7, #16
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	20000fd6 	.word	0x20000fd6

080192c4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b084      	sub	sp, #16
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80192cc:	f107 030c 	add.w	r3, r7, #12
 80192d0:	2203      	movs	r2, #3
 80192d2:	4619      	mov	r1, r3
 80192d4:	2014      	movs	r0, #20
 80192d6:	f000 f919 	bl	801950c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80192da:	f7ff fdc1 	bl	8018e60 <SUBGRF_GetPacketType>
 80192de:	4603      	mov	r3, r0
 80192e0:	461a      	mov	r2, r3
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	781b      	ldrb	r3, [r3, #0]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d002      	beq.n	80192f4 <SUBGRF_GetPacketStatus+0x30>
 80192ee:	2b01      	cmp	r3, #1
 80192f0:	d013      	beq.n	801931a <SUBGRF_GetPacketStatus+0x56>
 80192f2:	e02a      	b.n	801934a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80192f4:	7b3a      	ldrb	r2, [r7, #12]
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80192fa:	7b7b      	ldrb	r3, [r7, #13]
 80192fc:	425b      	negs	r3, r3
 80192fe:	105b      	asrs	r3, r3, #1
 8019300:	b25a      	sxtb	r2, r3
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019306:	7bbb      	ldrb	r3, [r7, #14]
 8019308:	425b      	negs	r3, r3
 801930a:	105b      	asrs	r3, r3, #1
 801930c:	b25a      	sxtb	r2, r3
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2200      	movs	r2, #0
 8019316:	609a      	str	r2, [r3, #8]
            break;
 8019318:	e020      	b.n	801935c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801931a:	7b3b      	ldrb	r3, [r7, #12]
 801931c:	425b      	negs	r3, r3
 801931e:	105b      	asrs	r3, r3, #1
 8019320:	b25a      	sxtb	r2, r3
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019326:	7b7b      	ldrb	r3, [r7, #13]
 8019328:	b25b      	sxtb	r3, r3
 801932a:	3302      	adds	r3, #2
 801932c:	109b      	asrs	r3, r3, #2
 801932e:	b25a      	sxtb	r2, r3
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019334:	7bbb      	ldrb	r3, [r7, #14]
 8019336:	425b      	negs	r3, r3
 8019338:	105b      	asrs	r3, r3, #1
 801933a:	b25a      	sxtb	r2, r3
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019340:	4b08      	ldr	r3, [pc, #32]	; (8019364 <SUBGRF_GetPacketStatus+0xa0>)
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	611a      	str	r2, [r3, #16]
            break;
 8019348:	e008      	b.n	801935c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801934a:	2214      	movs	r2, #20
 801934c:	2100      	movs	r1, #0
 801934e:	6878      	ldr	r0, [r7, #4]
 8019350:	f000 fbf5 	bl	8019b3e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	220f      	movs	r2, #15
 8019358:	701a      	strb	r2, [r3, #0]
            break;
 801935a:	bf00      	nop
    }
}
 801935c:	bf00      	nop
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}
 8019364:	20000fd8 	.word	0x20000fd8

08019368 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b082      	sub	sp, #8
 801936c:	af00      	add	r7, sp, #0
 801936e:	4603      	mov	r3, r0
 8019370:	460a      	mov	r2, r1
 8019372:	80fb      	strh	r3, [r7, #6]
 8019374:	4613      	mov	r3, r2
 8019376:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019378:	1d7a      	adds	r2, r7, #5
 801937a:	88f9      	ldrh	r1, [r7, #6]
 801937c:	2301      	movs	r3, #1
 801937e:	4803      	ldr	r0, [pc, #12]	; (801938c <SUBGRF_WriteRegister+0x24>)
 8019380:	f7ee fb52 	bl	8007a28 <HAL_SUBGHZ_WriteRegisters>
}
 8019384:	bf00      	nop
 8019386:	3708      	adds	r7, #8
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	20001790 	.word	0x20001790

08019390 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b084      	sub	sp, #16
 8019394:	af00      	add	r7, sp, #0
 8019396:	4603      	mov	r3, r0
 8019398:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801939a:	f107 020f 	add.w	r2, r7, #15
 801939e:	88f9      	ldrh	r1, [r7, #6]
 80193a0:	2301      	movs	r3, #1
 80193a2:	4804      	ldr	r0, [pc, #16]	; (80193b4 <SUBGRF_ReadRegister+0x24>)
 80193a4:	f7ee fb9f 	bl	8007ae6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80193a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3710      	adds	r7, #16
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}
 80193b2:	bf00      	nop
 80193b4:	20001790 	.word	0x20001790

080193b8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b086      	sub	sp, #24
 80193bc:	af00      	add	r7, sp, #0
 80193be:	4603      	mov	r3, r0
 80193c0:	6039      	str	r1, [r7, #0]
 80193c2:	80fb      	strh	r3, [r7, #6]
 80193c4:	4613      	mov	r3, r2
 80193c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193c8:	f3ef 8310 	mrs	r3, PRIMASK
 80193cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80193ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193d2:	b672      	cpsid	i
}
 80193d4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80193d6:	88bb      	ldrh	r3, [r7, #4]
 80193d8:	88f9      	ldrh	r1, [r7, #6]
 80193da:	683a      	ldr	r2, [r7, #0]
 80193dc:	4806      	ldr	r0, [pc, #24]	; (80193f8 <SUBGRF_WriteRegisters+0x40>)
 80193de:	f7ee fb23 	bl	8007a28 <HAL_SUBGHZ_WriteRegisters>
 80193e2:	697b      	ldr	r3, [r7, #20]
 80193e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193e6:	693b      	ldr	r3, [r7, #16]
 80193e8:	f383 8810 	msr	PRIMASK, r3
}
 80193ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193ee:	bf00      	nop
 80193f0:	3718      	adds	r7, #24
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	20001790 	.word	0x20001790

080193fc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b086      	sub	sp, #24
 8019400:	af00      	add	r7, sp, #0
 8019402:	4603      	mov	r3, r0
 8019404:	6039      	str	r1, [r7, #0]
 8019406:	80fb      	strh	r3, [r7, #6]
 8019408:	4613      	mov	r3, r2
 801940a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801940c:	f3ef 8310 	mrs	r3, PRIMASK
 8019410:	60fb      	str	r3, [r7, #12]
  return(result);
 8019412:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019416:	b672      	cpsid	i
}
 8019418:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801941a:	88bb      	ldrh	r3, [r7, #4]
 801941c:	88f9      	ldrh	r1, [r7, #6]
 801941e:	683a      	ldr	r2, [r7, #0]
 8019420:	4806      	ldr	r0, [pc, #24]	; (801943c <SUBGRF_ReadRegisters+0x40>)
 8019422:	f7ee fb60 	bl	8007ae6 <HAL_SUBGHZ_ReadRegisters>
 8019426:	697b      	ldr	r3, [r7, #20]
 8019428:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801942a:	693b      	ldr	r3, [r7, #16]
 801942c:	f383 8810 	msr	PRIMASK, r3
}
 8019430:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019432:	bf00      	nop
 8019434:	3718      	adds	r7, #24
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	20001790 	.word	0x20001790

08019440 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b086      	sub	sp, #24
 8019444:	af00      	add	r7, sp, #0
 8019446:	4603      	mov	r3, r0
 8019448:	6039      	str	r1, [r7, #0]
 801944a:	71fb      	strb	r3, [r7, #7]
 801944c:	4613      	mov	r3, r2
 801944e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019450:	f3ef 8310 	mrs	r3, PRIMASK
 8019454:	60fb      	str	r3, [r7, #12]
  return(result);
 8019456:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019458:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801945a:	b672      	cpsid	i
}
 801945c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801945e:	79bb      	ldrb	r3, [r7, #6]
 8019460:	b29b      	uxth	r3, r3
 8019462:	79f9      	ldrb	r1, [r7, #7]
 8019464:	683a      	ldr	r2, [r7, #0]
 8019466:	4806      	ldr	r0, [pc, #24]	; (8019480 <SUBGRF_WriteBuffer+0x40>)
 8019468:	f7ee fc51 	bl	8007d0e <HAL_SUBGHZ_WriteBuffer>
 801946c:	697b      	ldr	r3, [r7, #20]
 801946e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	f383 8810 	msr	PRIMASK, r3
}
 8019476:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019478:	bf00      	nop
 801947a:	3718      	adds	r7, #24
 801947c:	46bd      	mov	sp, r7
 801947e:	bd80      	pop	{r7, pc}
 8019480:	20001790 	.word	0x20001790

08019484 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b086      	sub	sp, #24
 8019488:	af00      	add	r7, sp, #0
 801948a:	4603      	mov	r3, r0
 801948c:	6039      	str	r1, [r7, #0]
 801948e:	71fb      	strb	r3, [r7, #7]
 8019490:	4613      	mov	r3, r2
 8019492:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019494:	f3ef 8310 	mrs	r3, PRIMASK
 8019498:	60fb      	str	r3, [r7, #12]
  return(result);
 801949a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801949c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801949e:	b672      	cpsid	i
}
 80194a0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80194a2:	79bb      	ldrb	r3, [r7, #6]
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	79f9      	ldrb	r1, [r7, #7]
 80194a8:	683a      	ldr	r2, [r7, #0]
 80194aa:	4806      	ldr	r0, [pc, #24]	; (80194c4 <SUBGRF_ReadBuffer+0x40>)
 80194ac:	f7ee fc82 	bl	8007db4 <HAL_SUBGHZ_ReadBuffer>
 80194b0:	697b      	ldr	r3, [r7, #20]
 80194b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194b4:	693b      	ldr	r3, [r7, #16]
 80194b6:	f383 8810 	msr	PRIMASK, r3
}
 80194ba:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80194bc:	bf00      	nop
 80194be:	3718      	adds	r7, #24
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}
 80194c4:	20001790 	.word	0x20001790

080194c8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b086      	sub	sp, #24
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	4603      	mov	r3, r0
 80194d0:	6039      	str	r1, [r7, #0]
 80194d2:	71fb      	strb	r3, [r7, #7]
 80194d4:	4613      	mov	r3, r2
 80194d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194d8:	f3ef 8310 	mrs	r3, PRIMASK
 80194dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80194de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80194e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80194e2:	b672      	cpsid	i
}
 80194e4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80194e6:	88bb      	ldrh	r3, [r7, #4]
 80194e8:	79f9      	ldrb	r1, [r7, #7]
 80194ea:	683a      	ldr	r2, [r7, #0]
 80194ec:	4806      	ldr	r0, [pc, #24]	; (8019508 <SUBGRF_WriteCommand+0x40>)
 80194ee:	f7ee fb5b 	bl	8007ba8 <HAL_SUBGHZ_ExecSetCmd>
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	f383 8810 	msr	PRIMASK, r3
}
 80194fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80194fe:	bf00      	nop
 8019500:	3718      	adds	r7, #24
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	20001790 	.word	0x20001790

0801950c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b086      	sub	sp, #24
 8019510:	af00      	add	r7, sp, #0
 8019512:	4603      	mov	r3, r0
 8019514:	6039      	str	r1, [r7, #0]
 8019516:	71fb      	strb	r3, [r7, #7]
 8019518:	4613      	mov	r3, r2
 801951a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801951c:	f3ef 8310 	mrs	r3, PRIMASK
 8019520:	60fb      	str	r3, [r7, #12]
  return(result);
 8019522:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019526:	b672      	cpsid	i
}
 8019528:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801952a:	88bb      	ldrh	r3, [r7, #4]
 801952c:	79f9      	ldrb	r1, [r7, #7]
 801952e:	683a      	ldr	r2, [r7, #0]
 8019530:	4806      	ldr	r0, [pc, #24]	; (801954c <SUBGRF_ReadCommand+0x40>)
 8019532:	f7ee fb98 	bl	8007c66 <HAL_SUBGHZ_ExecGetCmd>
 8019536:	697b      	ldr	r3, [r7, #20]
 8019538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801953a:	693b      	ldr	r3, [r7, #16]
 801953c:	f383 8810 	msr	PRIMASK, r3
}
 8019540:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019542:	bf00      	nop
 8019544:	3718      	adds	r7, #24
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}
 801954a:	bf00      	nop
 801954c:	20001790 	.word	0x20001790

08019550 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b084      	sub	sp, #16
 8019554:	af00      	add	r7, sp, #0
 8019556:	4603      	mov	r3, r0
 8019558:	460a      	mov	r2, r1
 801955a:	71fb      	strb	r3, [r7, #7]
 801955c:	4613      	mov	r3, r2
 801955e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019560:	2301      	movs	r3, #1
 8019562:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019564:	79bb      	ldrb	r3, [r7, #6]
 8019566:	2b01      	cmp	r3, #1
 8019568:	d10d      	bne.n	8019586 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801956a:	79fb      	ldrb	r3, [r7, #7]
 801956c:	2b01      	cmp	r3, #1
 801956e:	d104      	bne.n	801957a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019570:	2302      	movs	r3, #2
 8019572:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019574:	2004      	movs	r0, #4
 8019576:	f000 f8df 	bl	8019738 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801957a:	79fb      	ldrb	r3, [r7, #7]
 801957c:	2b02      	cmp	r3, #2
 801957e:	d107      	bne.n	8019590 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019580:	2303      	movs	r3, #3
 8019582:	73fb      	strb	r3, [r7, #15]
 8019584:	e004      	b.n	8019590 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019586:	79bb      	ldrb	r3, [r7, #6]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d101      	bne.n	8019590 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801958c:	2301      	movs	r3, #1
 801958e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019590:	7bfb      	ldrb	r3, [r7, #15]
 8019592:	4618      	mov	r0, r3
 8019594:	f7f1 fb75 	bl	800ac82 <RBI_ConfigRFSwitch>
}
 8019598:	bf00      	nop
 801959a:	3710      	adds	r7, #16
 801959c:	46bd      	mov	sp, r7
 801959e:	bd80      	pop	{r7, pc}

080195a0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b084      	sub	sp, #16
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	4603      	mov	r3, r0
 80195a8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80195aa:	2301      	movs	r3, #1
 80195ac:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80195ae:	f7f1 fb76 	bl	800ac9e <RBI_GetTxConfig>
 80195b2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80195b4:	68bb      	ldr	r3, [r7, #8]
 80195b6:	2b02      	cmp	r3, #2
 80195b8:	d016      	beq.n	80195e8 <SUBGRF_SetRfTxPower+0x48>
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	2b02      	cmp	r3, #2
 80195be:	dc16      	bgt.n	80195ee <SUBGRF_SetRfTxPower+0x4e>
 80195c0:	68bb      	ldr	r3, [r7, #8]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d003      	beq.n	80195ce <SUBGRF_SetRfTxPower+0x2e>
 80195c6:	68bb      	ldr	r3, [r7, #8]
 80195c8:	2b01      	cmp	r3, #1
 80195ca:	d00a      	beq.n	80195e2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80195cc:	e00f      	b.n	80195ee <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80195ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80195d2:	2b0f      	cmp	r3, #15
 80195d4:	dd02      	ble.n	80195dc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80195d6:	2302      	movs	r3, #2
 80195d8:	73fb      	strb	r3, [r7, #15]
            break;
 80195da:	e009      	b.n	80195f0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80195dc:	2301      	movs	r3, #1
 80195de:	73fb      	strb	r3, [r7, #15]
            break;
 80195e0:	e006      	b.n	80195f0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80195e2:	2301      	movs	r3, #1
 80195e4:	73fb      	strb	r3, [r7, #15]
            break;
 80195e6:	e003      	b.n	80195f0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80195e8:	2302      	movs	r3, #2
 80195ea:	73fb      	strb	r3, [r7, #15]
            break;
 80195ec:	e000      	b.n	80195f0 <SUBGRF_SetRfTxPower+0x50>
            break;
 80195ee:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80195f0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80195f4:	7bfb      	ldrb	r3, [r7, #15]
 80195f6:	2202      	movs	r2, #2
 80195f8:	4618      	mov	r0, r3
 80195fa:	f7ff fc3b 	bl	8018e74 <SUBGRF_SetTxParams>

    return paSelect;
 80195fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019600:	4618      	mov	r0, r3
 8019602:	3710      	adds	r7, #16
 8019604:	46bd      	mov	sp, r7
 8019606:	bd80      	pop	{r7, pc}

08019608 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019608:	b480      	push	{r7}
 801960a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801960c:	2301      	movs	r3, #1
}
 801960e:	4618      	mov	r0, r3
 8019610:	46bd      	mov	sp, r7
 8019612:	bc80      	pop	{r7}
 8019614:	4770      	bx	lr
	...

08019618 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b082      	sub	sp, #8
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019620:	4b03      	ldr	r3, [pc, #12]	; (8019630 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	2001      	movs	r0, #1
 8019626:	4798      	blx	r3
}
 8019628:	bf00      	nop
 801962a:	3708      	adds	r7, #8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}
 8019630:	20000fe0 	.word	0x20000fe0

08019634 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801963c:	4b03      	ldr	r3, [pc, #12]	; (801964c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2002      	movs	r0, #2
 8019642:	4798      	blx	r3
}
 8019644:	bf00      	nop
 8019646:	3708      	adds	r7, #8
 8019648:	46bd      	mov	sp, r7
 801964a:	bd80      	pop	{r7, pc}
 801964c:	20000fe0 	.word	0x20000fe0

08019650 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b082      	sub	sp, #8
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019658:	4b03      	ldr	r3, [pc, #12]	; (8019668 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2040      	movs	r0, #64	; 0x40
 801965e:	4798      	blx	r3
}
 8019660:	bf00      	nop
 8019662:	3708      	adds	r7, #8
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}
 8019668:	20000fe0 	.word	0x20000fe0

0801966c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
 8019674:	460b      	mov	r3, r1
 8019676:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019678:	78fb      	ldrb	r3, [r7, #3]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d002      	beq.n	8019684 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801967e:	2b01      	cmp	r3, #1
 8019680:	d005      	beq.n	801968e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019682:	e00a      	b.n	801969a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019684:	4b07      	ldr	r3, [pc, #28]	; (80196a4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	2080      	movs	r0, #128	; 0x80
 801968a:	4798      	blx	r3
            break;
 801968c:	e005      	b.n	801969a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801968e:	4b05      	ldr	r3, [pc, #20]	; (80196a4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019696:	4798      	blx	r3
            break;
 8019698:	bf00      	nop
    }
}
 801969a:	bf00      	nop
 801969c:	3708      	adds	r7, #8
 801969e:	46bd      	mov	sp, r7
 80196a0:	bd80      	pop	{r7, pc}
 80196a2:	bf00      	nop
 80196a4:	20000fe0 	.word	0x20000fe0

080196a8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b082      	sub	sp, #8
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80196b0:	4b04      	ldr	r3, [pc, #16]	; (80196c4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80196b8:	4798      	blx	r3
}
 80196ba:	bf00      	nop
 80196bc:	3708      	adds	r7, #8
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}
 80196c2:	bf00      	nop
 80196c4:	20000fe0 	.word	0x20000fe0

080196c8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80196d0:	4b03      	ldr	r3, [pc, #12]	; (80196e0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	2020      	movs	r0, #32
 80196d6:	4798      	blx	r3
}
 80196d8:	bf00      	nop
 80196da:	3708      	adds	r7, #8
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	20000fe0 	.word	0x20000fe0

080196e4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b082      	sub	sp, #8
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80196ec:	4b03      	ldr	r3, [pc, #12]	; (80196fc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	2004      	movs	r0, #4
 80196f2:	4798      	blx	r3
}
 80196f4:	bf00      	nop
 80196f6:	3708      	adds	r7, #8
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}
 80196fc:	20000fe0 	.word	0x20000fe0

08019700 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019708:	4b03      	ldr	r3, [pc, #12]	; (8019718 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	2008      	movs	r0, #8
 801970e:	4798      	blx	r3
}
 8019710:	bf00      	nop
 8019712:	3708      	adds	r7, #8
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	20000fe0 	.word	0x20000fe0

0801971c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b082      	sub	sp, #8
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019724:	4b03      	ldr	r3, [pc, #12]	; (8019734 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	2010      	movs	r0, #16
 801972a:	4798      	blx	r3
}
 801972c:	bf00      	nop
 801972e:	3708      	adds	r7, #8
 8019730:	46bd      	mov	sp, r7
 8019732:	bd80      	pop	{r7, pc}
 8019734:	20000fe0 	.word	0x20000fe0

08019738 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b084      	sub	sp, #16
 801973c:	af00      	add	r7, sp, #0
 801973e:	4603      	mov	r3, r0
 8019740:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019742:	f7f1 faba 	bl	800acba <RBI_IsDCDC>
 8019746:	4603      	mov	r3, r0
 8019748:	2b01      	cmp	r3, #1
 801974a:	d112      	bne.n	8019772 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801974c:	f640 1023 	movw	r0, #2339	; 0x923
 8019750:	f7ff fe1e 	bl	8019390 <SUBGRF_ReadRegister>
 8019754:	4603      	mov	r3, r0
 8019756:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019758:	7bfb      	ldrb	r3, [r7, #15]
 801975a:	f023 0306 	bic.w	r3, r3, #6
 801975e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019760:	7bfa      	ldrb	r2, [r7, #15]
 8019762:	79fb      	ldrb	r3, [r7, #7]
 8019764:	4313      	orrs	r3, r2
 8019766:	b2db      	uxtb	r3, r3
 8019768:	4619      	mov	r1, r3
 801976a:	f640 1023 	movw	r0, #2339	; 0x923
 801976e:	f7ff fdfb 	bl	8019368 <SUBGRF_WriteRegister>
  }
}
 8019772:	bf00      	nop
 8019774:	3710      	adds	r7, #16
 8019776:	46bd      	mov	sp, r7
 8019778:	bd80      	pop	{r7, pc}
	...

0801977c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801977c:	b480      	push	{r7}
 801977e:	b085      	sub	sp, #20
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d101      	bne.n	801978e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801978a:	231f      	movs	r3, #31
 801978c:	e016      	b.n	80197bc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801978e:	2300      	movs	r3, #0
 8019790:	73fb      	strb	r3, [r7, #15]
 8019792:	e00f      	b.n	80197b4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019794:	7bfb      	ldrb	r3, [r7, #15]
 8019796:	4a0c      	ldr	r2, [pc, #48]	; (80197c8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801979c:	687a      	ldr	r2, [r7, #4]
 801979e:	429a      	cmp	r2, r3
 80197a0:	d205      	bcs.n	80197ae <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
 80197a4:	4a08      	ldr	r2, [pc, #32]	; (80197c8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80197a6:	00db      	lsls	r3, r3, #3
 80197a8:	4413      	add	r3, r2
 80197aa:	791b      	ldrb	r3, [r3, #4]
 80197ac:	e006      	b.n	80197bc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80197ae:	7bfb      	ldrb	r3, [r7, #15]
 80197b0:	3301      	adds	r3, #1
 80197b2:	73fb      	strb	r3, [r7, #15]
 80197b4:	7bfb      	ldrb	r3, [r7, #15]
 80197b6:	2b15      	cmp	r3, #21
 80197b8:	d9ec      	bls.n	8019794 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 80197ba:	e7fe      	b.n	80197ba <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80197bc:	4618      	mov	r0, r3
 80197be:	3714      	adds	r7, #20
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bc80      	pop	{r7}
 80197c4:	4770      	bx	lr
 80197c6:	bf00      	nop
 80197c8:	0801bf98 	.word	0x0801bf98

080197cc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b08a      	sub	sp, #40	; 0x28
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
 80197d4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80197d6:	4b36      	ldr	r3, [pc, #216]	; (80198b0 <SUBGRF_GetCFO+0xe4>)
 80197d8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 80197da:	f640 0007 	movw	r0, #2055	; 0x807
 80197de:	f7ff fdd7 	bl	8019390 <SUBGRF_ReadRegister>
 80197e2:	4603      	mov	r3, r0
 80197e4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80197e6:	7ffb      	ldrb	r3, [r7, #31]
 80197e8:	08db      	lsrs	r3, r3, #3
 80197ea:	b2db      	uxtb	r3, r3
 80197ec:	f003 0303 	and.w	r3, r3, #3
 80197f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80197f4:	4413      	add	r3, r2
 80197f6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80197fa:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80197fc:	7ffb      	ldrb	r3, [r7, #31]
 80197fe:	f003 0307 	and.w	r3, r3, #7
 8019802:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019804:	7fba      	ldrb	r2, [r7, #30]
 8019806:	7f7b      	ldrb	r3, [r7, #29]
 8019808:	3b01      	subs	r3, #1
 801980a:	fa02 f303 	lsl.w	r3, r2, r3
 801980e:	461a      	mov	r2, r3
 8019810:	4b28      	ldr	r3, [pc, #160]	; (80198b4 <SUBGRF_GetCFO+0xe8>)
 8019812:	fbb3 f3f2 	udiv	r3, r3, r2
 8019816:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019818:	69ba      	ldr	r2, [r7, #24]
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019820:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019822:	2301      	movs	r3, #1
 8019824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801982c:	697a      	ldr	r2, [r7, #20]
 801982e:	fb02 f303 	mul.w	r3, r2, r3
 8019832:	2b07      	cmp	r3, #7
 8019834:	d802      	bhi.n	801983c <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8019836:	2302      	movs	r3, #2
 8019838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801983c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019840:	697a      	ldr	r2, [r7, #20]
 8019842:	fb02 f303 	mul.w	r3, r2, r3
 8019846:	2b03      	cmp	r3, #3
 8019848:	d802      	bhi.n	8019850 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 801984a:	2304      	movs	r3, #4
 801984c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019850:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019854:	69bb      	ldr	r3, [r7, #24]
 8019856:	fb02 f303 	mul.w	r3, r2, r3
 801985a:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801985c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8019860:	f7ff fd96 	bl	8019390 <SUBGRF_ReadRegister>
 8019864:	4603      	mov	r3, r0
 8019866:	021b      	lsls	r3, r3, #8
 8019868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801986c:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801986e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019872:	f7ff fd8d 	bl	8019390 <SUBGRF_ReadRegister>
 8019876:	4603      	mov	r3, r0
 8019878:	461a      	mov	r2, r3
 801987a:	6a3b      	ldr	r3, [r7, #32]
 801987c:	4313      	orrs	r3, r2
 801987e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019880:	6a3b      	ldr	r3, [r7, #32]
 8019882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019886:	2b00      	cmp	r3, #0
 8019888:	d005      	beq.n	8019896 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801988a:	6a3b      	ldr	r3, [r7, #32]
 801988c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019890:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019894:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019896:	693b      	ldr	r3, [r7, #16]
 8019898:	095b      	lsrs	r3, r3, #5
 801989a:	6a3a      	ldr	r2, [r7, #32]
 801989c:	fb02 f303 	mul.w	r3, r2, r3
 80198a0:	11da      	asrs	r2, r3, #7
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	601a      	str	r2, [r3, #0]
}
 80198a6:	bf00      	nop
 80198a8:	3728      	adds	r7, #40	; 0x28
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bd80      	pop	{r7, pc}
 80198ae:	bf00      	nop
 80198b0:	0c0a0804 	.word	0x0c0a0804
 80198b4:	01e84800 	.word	0x01e84800

080198b8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 80198b8:	b480      	push	{r7}
 80198ba:	b087      	sub	sp, #28
 80198bc:	af00      	add	r7, sp, #0
 80198be:	4603      	mov	r3, r0
 80198c0:	60b9      	str	r1, [r7, #8]
 80198c2:	607a      	str	r2, [r7, #4]
 80198c4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 80198c6:	2300      	movs	r3, #0
 80198c8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 80198ca:	f04f 33ff 	mov.w	r3, #4294967295
 80198ce:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80198d0:	697b      	ldr	r3, [r7, #20]
}
 80198d2:	4618      	mov	r0, r3
 80198d4:	371c      	adds	r7, #28
 80198d6:	46bd      	mov	sp, r7
 80198d8:	bc80      	pop	{r7}
 80198da:	4770      	bx	lr

080198dc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 80198dc:	b480      	push	{r7}
 80198de:	b087      	sub	sp, #28
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	4603      	mov	r3, r0
 80198e4:	60b9      	str	r1, [r7, #8]
 80198e6:	607a      	str	r2, [r7, #4]
 80198e8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80198ea:	2300      	movs	r3, #0
 80198ec:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80198ee:	f04f 33ff 	mov.w	r3, #4294967295
 80198f2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80198f4:	697b      	ldr	r3, [r7, #20]
}
 80198f6:	4618      	mov	r0, r3
 80198f8:	371c      	adds	r7, #28
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bc80      	pop	{r7}
 80198fe:	4770      	bx	lr

08019900 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019900:	b480      	push	{r7}
 8019902:	b085      	sub	sp, #20
 8019904:	af00      	add	r7, sp, #0
 8019906:	60f8      	str	r0, [r7, #12]
 8019908:	60b9      	str	r1, [r7, #8]
 801990a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801990c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019910:	4618      	mov	r0, r3
 8019912:	3714      	adds	r7, #20
 8019914:	46bd      	mov	sp, r7
 8019916:	bc80      	pop	{r7}
 8019918:	4770      	bx	lr

0801991a <RFW_DeInit>:

void RFW_DeInit( void)
{
 801991a:	b480      	push	{r7}
 801991c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801991e:	bf00      	nop
 8019920:	46bd      	mov	sp, r7
 8019922:	bc80      	pop	{r7}
 8019924:	4770      	bx	lr

08019926 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019926:	b480      	push	{r7}
 8019928:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801992a:	2300      	movs	r3, #0
#endif
}
 801992c:	4618      	mov	r0, r3
 801992e:	46bd      	mov	sp, r7
 8019930:	bc80      	pop	{r7}
 8019932:	4770      	bx	lr

08019934 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019934:	b480      	push	{r7}
 8019936:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019938:	2300      	movs	r3, #0
#endif
}
 801993a:	4618      	mov	r0, r3
 801993c:	46bd      	mov	sp, r7
 801993e:	bc80      	pop	{r7}
 8019940:	4770      	bx	lr

08019942 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019942:	b480      	push	{r7}
 8019944:	b083      	sub	sp, #12
 8019946:	af00      	add	r7, sp, #0
 8019948:	4603      	mov	r3, r0
 801994a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801994c:	bf00      	nop
 801994e:	370c      	adds	r7, #12
 8019950:	46bd      	mov	sp, r7
 8019952:	bc80      	pop	{r7}
 8019954:	4770      	bx	lr

08019956 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019956:	b480      	push	{r7}
 8019958:	b087      	sub	sp, #28
 801995a:	af00      	add	r7, sp, #0
 801995c:	60f8      	str	r0, [r7, #12]
 801995e:	460b      	mov	r3, r1
 8019960:	607a      	str	r2, [r7, #4]
 8019962:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019964:	f04f 33ff 	mov.w	r3, #4294967295
 8019968:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801996a:	697b      	ldr	r3, [r7, #20]
}
 801996c:	4618      	mov	r0, r3
 801996e:	371c      	adds	r7, #28
 8019970:	46bd      	mov	sp, r7
 8019972:	bc80      	pop	{r7}
 8019974:	4770      	bx	lr

08019976 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019976:	b480      	push	{r7}
 8019978:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801997a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801997e:	4618      	mov	r0, r3
 8019980:	46bd      	mov	sp, r7
 8019982:	bc80      	pop	{r7}
 8019984:	4770      	bx	lr

08019986 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019986:	b480      	push	{r7}
 8019988:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801998a:	bf00      	nop
 801998c:	46bd      	mov	sp, r7
 801998e:	bc80      	pop	{r7}
 8019990:	4770      	bx	lr

08019992 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019992:	b480      	push	{r7}
 8019994:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019996:	bf00      	nop
 8019998:	46bd      	mov	sp, r7
 801999a:	bc80      	pop	{r7}
 801999c:	4770      	bx	lr

0801999e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801999e:	b480      	push	{r7}
 80199a0:	b083      	sub	sp, #12
 80199a2:	af00      	add	r7, sp, #0
 80199a4:	4603      	mov	r3, r0
 80199a6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80199a8:	bf00      	nop
 80199aa:	370c      	adds	r7, #12
 80199ac:	46bd      	mov	sp, r7
 80199ae:	bc80      	pop	{r7}
 80199b0:	4770      	bx	lr
	...

080199b4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80199b4:	b480      	push	{r7}
 80199b6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80199b8:	4b04      	ldr	r3, [pc, #16]	; (80199cc <UTIL_LPM_Init+0x18>)
 80199ba:	2200      	movs	r2, #0
 80199bc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80199be:	4b04      	ldr	r3, [pc, #16]	; (80199d0 <UTIL_LPM_Init+0x1c>)
 80199c0:	2200      	movs	r2, #0
 80199c2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80199c4:	bf00      	nop
 80199c6:	46bd      	mov	sp, r7
 80199c8:	bc80      	pop	{r7}
 80199ca:	4770      	bx	lr
 80199cc:	20000fe4 	.word	0x20000fe4
 80199d0:	20000fe8 	.word	0x20000fe8

080199d4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80199d4:	b480      	push	{r7}
 80199d6:	b087      	sub	sp, #28
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
 80199dc:	460b      	mov	r3, r1
 80199de:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199e0:	f3ef 8310 	mrs	r3, PRIMASK
 80199e4:	613b      	str	r3, [r7, #16]
  return(result);
 80199e6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80199e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199ea:	b672      	cpsid	i
}
 80199ec:	bf00      	nop
  
  switch( state )
 80199ee:	78fb      	ldrb	r3, [r7, #3]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d008      	beq.n	8019a06 <UTIL_LPM_SetStopMode+0x32>
 80199f4:	2b01      	cmp	r3, #1
 80199f6:	d10e      	bne.n	8019a16 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80199f8:	4b0d      	ldr	r3, [pc, #52]	; (8019a30 <UTIL_LPM_SetStopMode+0x5c>)
 80199fa:	681a      	ldr	r2, [r3, #0]
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	4313      	orrs	r3, r2
 8019a00:	4a0b      	ldr	r2, [pc, #44]	; (8019a30 <UTIL_LPM_SetStopMode+0x5c>)
 8019a02:	6013      	str	r3, [r2, #0]
      break;
 8019a04:	e008      	b.n	8019a18 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	43da      	mvns	r2, r3
 8019a0a:	4b09      	ldr	r3, [pc, #36]	; (8019a30 <UTIL_LPM_SetStopMode+0x5c>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	4013      	ands	r3, r2
 8019a10:	4a07      	ldr	r2, [pc, #28]	; (8019a30 <UTIL_LPM_SetStopMode+0x5c>)
 8019a12:	6013      	str	r3, [r2, #0]
      break;
 8019a14:	e000      	b.n	8019a18 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019a16:	bf00      	nop
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	f383 8810 	msr	PRIMASK, r3
}
 8019a22:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a24:	bf00      	nop
 8019a26:	371c      	adds	r7, #28
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	bc80      	pop	{r7}
 8019a2c:	4770      	bx	lr
 8019a2e:	bf00      	nop
 8019a30:	20000fe4 	.word	0x20000fe4

08019a34 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019a34:	b480      	push	{r7}
 8019a36:	b087      	sub	sp, #28
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
 8019a3c:	460b      	mov	r3, r1
 8019a3e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a40:	f3ef 8310 	mrs	r3, PRIMASK
 8019a44:	613b      	str	r3, [r7, #16]
  return(result);
 8019a46:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a4a:	b672      	cpsid	i
}
 8019a4c:	bf00      	nop
  
  switch(state)
 8019a4e:	78fb      	ldrb	r3, [r7, #3]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d008      	beq.n	8019a66 <UTIL_LPM_SetOffMode+0x32>
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d10e      	bne.n	8019a76 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019a58:	4b0d      	ldr	r3, [pc, #52]	; (8019a90 <UTIL_LPM_SetOffMode+0x5c>)
 8019a5a:	681a      	ldr	r2, [r3, #0]
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	4313      	orrs	r3, r2
 8019a60:	4a0b      	ldr	r2, [pc, #44]	; (8019a90 <UTIL_LPM_SetOffMode+0x5c>)
 8019a62:	6013      	str	r3, [r2, #0]
      break;
 8019a64:	e008      	b.n	8019a78 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	43da      	mvns	r2, r3
 8019a6a:	4b09      	ldr	r3, [pc, #36]	; (8019a90 <UTIL_LPM_SetOffMode+0x5c>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	4013      	ands	r3, r2
 8019a70:	4a07      	ldr	r2, [pc, #28]	; (8019a90 <UTIL_LPM_SetOffMode+0x5c>)
 8019a72:	6013      	str	r3, [r2, #0]
      break;
 8019a74:	e000      	b.n	8019a78 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019a76:	bf00      	nop
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	f383 8810 	msr	PRIMASK, r3
}
 8019a82:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a84:	bf00      	nop
 8019a86:	371c      	adds	r7, #28
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bc80      	pop	{r7}
 8019a8c:	4770      	bx	lr
 8019a8e:	bf00      	nop
 8019a90:	20000fe8 	.word	0x20000fe8

08019a94 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b084      	sub	sp, #16
 8019a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8019a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019aa0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019aa2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019aa4:	b672      	cpsid	i
}
 8019aa6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019aa8:	4b12      	ldr	r3, [pc, #72]	; (8019af4 <UTIL_LPM_EnterLowPower+0x60>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d006      	beq.n	8019abe <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019ab0:	4b11      	ldr	r3, [pc, #68]	; (8019af8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019ab6:	4b10      	ldr	r3, [pc, #64]	; (8019af8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	4798      	blx	r3
 8019abc:	e010      	b.n	8019ae0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019abe:	4b0f      	ldr	r3, [pc, #60]	; (8019afc <UTIL_LPM_EnterLowPower+0x68>)
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d006      	beq.n	8019ad4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019ac6:	4b0c      	ldr	r3, [pc, #48]	; (8019af8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ac8:	689b      	ldr	r3, [r3, #8]
 8019aca:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019acc:	4b0a      	ldr	r3, [pc, #40]	; (8019af8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ace:	68db      	ldr	r3, [r3, #12]
 8019ad0:	4798      	blx	r3
 8019ad2:	e005      	b.n	8019ae0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019ad4:	4b08      	ldr	r3, [pc, #32]	; (8019af8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ad6:	691b      	ldr	r3, [r3, #16]
 8019ad8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019ada:	4b07      	ldr	r3, [pc, #28]	; (8019af8 <UTIL_LPM_EnterLowPower+0x64>)
 8019adc:	695b      	ldr	r3, [r3, #20]
 8019ade:	4798      	blx	r3
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	f383 8810 	msr	PRIMASK, r3
}
 8019aea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019aec:	bf00      	nop
 8019aee:	3710      	adds	r7, #16
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}
 8019af4:	20000fe4 	.word	0x20000fe4
 8019af8:	0801ba78 	.word	0x0801ba78
 8019afc:	20000fe8 	.word	0x20000fe8

08019b00 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019b00:	b480      	push	{r7}
 8019b02:	b087      	sub	sp, #28
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	60f8      	str	r0, [r7, #12]
 8019b08:	60b9      	str	r1, [r7, #8]
 8019b0a:	4613      	mov	r3, r2
 8019b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019b16:	e007      	b.n	8019b28 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019b18:	693a      	ldr	r2, [r7, #16]
 8019b1a:	1c53      	adds	r3, r2, #1
 8019b1c:	613b      	str	r3, [r7, #16]
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	1c59      	adds	r1, r3, #1
 8019b22:	6179      	str	r1, [r7, #20]
 8019b24:	7812      	ldrb	r2, [r2, #0]
 8019b26:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b28:	88fb      	ldrh	r3, [r7, #6]
 8019b2a:	1e5a      	subs	r2, r3, #1
 8019b2c:	80fa      	strh	r2, [r7, #6]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d1f2      	bne.n	8019b18 <UTIL_MEM_cpy_8+0x18>
    }
}
 8019b32:	bf00      	nop
 8019b34:	bf00      	nop
 8019b36:	371c      	adds	r7, #28
 8019b38:	46bd      	mov	sp, r7
 8019b3a:	bc80      	pop	{r7}
 8019b3c:	4770      	bx	lr

08019b3e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019b3e:	b480      	push	{r7}
 8019b40:	b085      	sub	sp, #20
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	6078      	str	r0, [r7, #4]
 8019b46:	460b      	mov	r3, r1
 8019b48:	70fb      	strb	r3, [r7, #3]
 8019b4a:	4613      	mov	r3, r2
 8019b4c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019b52:	e004      	b.n	8019b5e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	1c5a      	adds	r2, r3, #1
 8019b58:	60fa      	str	r2, [r7, #12]
 8019b5a:	78fa      	ldrb	r2, [r7, #3]
 8019b5c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b5e:	883b      	ldrh	r3, [r7, #0]
 8019b60:	1e5a      	subs	r2, r3, #1
 8019b62:	803a      	strh	r2, [r7, #0]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d1f5      	bne.n	8019b54 <UTIL_MEM_set_8+0x16>
  }
}
 8019b68:	bf00      	nop
 8019b6a:	bf00      	nop
 8019b6c:	3714      	adds	r7, #20
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	bc80      	pop	{r7}
 8019b72:	4770      	bx	lr

08019b74 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019b74:	b082      	sub	sp, #8
 8019b76:	b480      	push	{r7}
 8019b78:	b087      	sub	sp, #28
 8019b7a:	af00      	add	r7, sp, #0
 8019b7c:	60f8      	str	r0, [r7, #12]
 8019b7e:	1d38      	adds	r0, r7, #4
 8019b80:	e880 0006 	stmia.w	r0, {r1, r2}
 8019b84:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019b86:	2300      	movs	r3, #0
 8019b88:	613b      	str	r3, [r7, #16]
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b92:	4413      	add	r3, r2
 8019b94:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019b96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019b9a:	b29a      	uxth	r2, r3
 8019b9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019ba0:	b29b      	uxth	r3, r3
 8019ba2:	4413      	add	r3, r2
 8019ba4:	b29b      	uxth	r3, r3
 8019ba6:	b21b      	sxth	r3, r3
 8019ba8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019baa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019bb2:	db0a      	blt.n	8019bca <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019bb4:	693b      	ldr	r3, [r7, #16]
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019bba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019bbe:	b29b      	uxth	r3, r3
 8019bc0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019bc4:	b29b      	uxth	r3, r3
 8019bc6:	b21b      	sxth	r3, r3
 8019bc8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	461a      	mov	r2, r3
 8019bce:	f107 0310 	add.w	r3, r7, #16
 8019bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019bd6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019bda:	68f8      	ldr	r0, [r7, #12]
 8019bdc:	371c      	adds	r7, #28
 8019bde:	46bd      	mov	sp, r7
 8019be0:	bc80      	pop	{r7}
 8019be2:	b002      	add	sp, #8
 8019be4:	4770      	bx	lr

08019be6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019be6:	b082      	sub	sp, #8
 8019be8:	b480      	push	{r7}
 8019bea:	b087      	sub	sp, #28
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	60f8      	str	r0, [r7, #12]
 8019bf0:	1d38      	adds	r0, r7, #4
 8019bf2:	e880 0006 	stmia.w	r0, {r1, r2}
 8019bf6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	613b      	str	r3, [r7, #16]
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019c00:	687a      	ldr	r2, [r7, #4]
 8019c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c04:	1ad3      	subs	r3, r2, r3
 8019c06:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019c08:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019c0c:	b29a      	uxth	r2, r3
 8019c0e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	1ad3      	subs	r3, r2, r3
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	b21b      	sxth	r3, r3
 8019c1a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	da0a      	bge.n	8019c3a <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019c24:	693b      	ldr	r3, [r7, #16]
 8019c26:	3b01      	subs	r3, #1
 8019c28:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019c2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019c2e:	b29b      	uxth	r3, r3
 8019c30:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019c34:	b29b      	uxth	r3, r3
 8019c36:	b21b      	sxth	r3, r3
 8019c38:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	f107 0310 	add.w	r3, r7, #16
 8019c42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019c46:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019c4a:	68f8      	ldr	r0, [r7, #12]
 8019c4c:	371c      	adds	r7, #28
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	bc80      	pop	{r7}
 8019c52:	b002      	add	sp, #8
 8019c54:	4770      	bx	lr
	...

08019c58 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b088      	sub	sp, #32
 8019c5c:	af02      	add	r7, sp, #8
 8019c5e:	463b      	mov	r3, r7
 8019c60:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019c64:	2300      	movs	r3, #0
 8019c66:	60bb      	str	r3, [r7, #8]
 8019c68:	2300      	movs	r3, #0
 8019c6a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019c6c:	4b10      	ldr	r3, [pc, #64]	; (8019cb0 <SysTimeSet+0x58>)
 8019c6e:	691b      	ldr	r3, [r3, #16]
 8019c70:	f107 0208 	add.w	r2, r7, #8
 8019c74:	3204      	adds	r2, #4
 8019c76:	4610      	mov	r0, r2
 8019c78:	4798      	blx	r3
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019c7e:	f107 0010 	add.w	r0, r7, #16
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	9300      	str	r3, [sp, #0]
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	463a      	mov	r2, r7
 8019c8a:	ca06      	ldmia	r2, {r1, r2}
 8019c8c:	f7ff ffab 	bl	8019be6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019c90:	4b07      	ldr	r3, [pc, #28]	; (8019cb0 <SysTimeSet+0x58>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	693a      	ldr	r2, [r7, #16]
 8019c96:	4610      	mov	r0, r2
 8019c98:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019c9a:	4b05      	ldr	r3, [pc, #20]	; (8019cb0 <SysTimeSet+0x58>)
 8019c9c:	689b      	ldr	r3, [r3, #8]
 8019c9e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019ca2:	4610      	mov	r0, r2
 8019ca4:	4798      	blx	r3
}
 8019ca6:	bf00      	nop
 8019ca8:	3718      	adds	r7, #24
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}
 8019cae:	bf00      	nop
 8019cb0:	0801bb5c 	.word	0x0801bb5c

08019cb4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b08a      	sub	sp, #40	; 0x28
 8019cb8:	af02      	add	r7, sp, #8
 8019cba:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	61bb      	str	r3, [r7, #24]
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	613b      	str	r3, [r7, #16]
 8019cc8:	2300      	movs	r3, #0
 8019cca:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019ccc:	4b14      	ldr	r3, [pc, #80]	; (8019d20 <SysTimeGet+0x6c>)
 8019cce:	691b      	ldr	r3, [r3, #16]
 8019cd0:	f107 0218 	add.w	r2, r7, #24
 8019cd4:	3204      	adds	r2, #4
 8019cd6:	4610      	mov	r0, r2
 8019cd8:	4798      	blx	r3
 8019cda:	4603      	mov	r3, r0
 8019cdc:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019cde:	4b10      	ldr	r3, [pc, #64]	; (8019d20 <SysTimeGet+0x6c>)
 8019ce0:	68db      	ldr	r3, [r3, #12]
 8019ce2:	4798      	blx	r3
 8019ce4:	4603      	mov	r3, r0
 8019ce6:	b21b      	sxth	r3, r3
 8019ce8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019cea:	4b0d      	ldr	r3, [pc, #52]	; (8019d20 <SysTimeGet+0x6c>)
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	4798      	blx	r3
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019cf4:	f107 0010 	add.w	r0, r7, #16
 8019cf8:	69fb      	ldr	r3, [r7, #28]
 8019cfa:	9300      	str	r3, [sp, #0]
 8019cfc:	69bb      	ldr	r3, [r7, #24]
 8019cfe:	f107 0208 	add.w	r2, r7, #8
 8019d02:	ca06      	ldmia	r2, {r1, r2}
 8019d04:	f7ff ff36 	bl	8019b74 <SysTimeAdd>

  return sysTime;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	461a      	mov	r2, r3
 8019d0c:	f107 0310 	add.w	r3, r7, #16
 8019d10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d14:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019d18:	6878      	ldr	r0, [r7, #4]
 8019d1a:	3720      	adds	r7, #32
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	0801bb5c 	.word	0x0801bb5c

08019d24 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	60bb      	str	r3, [r7, #8]
 8019d30:	2300      	movs	r3, #0
 8019d32:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019d34:	4b0a      	ldr	r3, [pc, #40]	; (8019d60 <SysTimeGetMcuTime+0x3c>)
 8019d36:	691b      	ldr	r3, [r3, #16]
 8019d38:	f107 0208 	add.w	r2, r7, #8
 8019d3c:	3204      	adds	r2, #4
 8019d3e:	4610      	mov	r0, r2
 8019d40:	4798      	blx	r3
 8019d42:	4603      	mov	r3, r0
 8019d44:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	461a      	mov	r2, r3
 8019d4a:	f107 0308 	add.w	r3, r7, #8
 8019d4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019d52:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	3710      	adds	r7, #16
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	bd80      	pop	{r7, pc}
 8019d5e:	bf00      	nop
 8019d60:	0801bb5c 	.word	0x0801bb5c

08019d64 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b088      	sub	sp, #32
 8019d68:	af02      	add	r7, sp, #8
 8019d6a:	463b      	mov	r3, r7
 8019d6c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019d70:	4b0f      	ldr	r3, [pc, #60]	; (8019db0 <SysTimeToMs+0x4c>)
 8019d72:	68db      	ldr	r3, [r3, #12]
 8019d74:	4798      	blx	r3
 8019d76:	4603      	mov	r3, r0
 8019d78:	b21b      	sxth	r3, r3
 8019d7a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019d7c:	4b0c      	ldr	r3, [pc, #48]	; (8019db0 <SysTimeToMs+0x4c>)
 8019d7e:	685b      	ldr	r3, [r3, #4]
 8019d80:	4798      	blx	r3
 8019d82:	4603      	mov	r3, r0
 8019d84:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019d86:	f107 0008 	add.w	r0, r7, #8
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	9300      	str	r3, [sp, #0]
 8019d8e:	693b      	ldr	r3, [r7, #16]
 8019d90:	463a      	mov	r2, r7
 8019d92:	ca06      	ldmia	r2, {r1, r2}
 8019d94:	f7ff ff27 	bl	8019be6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019d98:	68bb      	ldr	r3, [r7, #8]
 8019d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019d9e:	fb02 f303 	mul.w	r3, r2, r3
 8019da2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019da6:	4413      	add	r3, r2
}
 8019da8:	4618      	mov	r0, r3
 8019daa:	3718      	adds	r7, #24
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	0801bb5c 	.word	0x0801bb5c

08019db4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b08a      	sub	sp, #40	; 0x28
 8019db8:	af02      	add	r7, sp, #8
 8019dba:	6078      	str	r0, [r7, #4]
 8019dbc:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	4a19      	ldr	r2, [pc, #100]	; (8019e28 <SysTimeFromMs+0x74>)
 8019dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8019dc6:	099b      	lsrs	r3, r3, #6
 8019dc8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	617b      	str	r3, [r7, #20]
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	69fb      	ldr	r3, [r7, #28]
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	4619      	mov	r1, r3
 8019dd8:	0149      	lsls	r1, r1, #5
 8019dda:	1ac9      	subs	r1, r1, r3
 8019ddc:	0089      	lsls	r1, r1, #2
 8019dde:	440b      	add	r3, r1
 8019de0:	00db      	lsls	r3, r3, #3
 8019de2:	b29b      	uxth	r3, r3
 8019de4:	1ad3      	subs	r3, r2, r3
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	b21b      	sxth	r3, r3
 8019dea:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019dec:	f107 030c 	add.w	r3, r7, #12
 8019df0:	2200      	movs	r2, #0
 8019df2:	601a      	str	r2, [r3, #0]
 8019df4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019df6:	4b0d      	ldr	r3, [pc, #52]	; (8019e2c <SysTimeFromMs+0x78>)
 8019df8:	68db      	ldr	r3, [r3, #12]
 8019dfa:	4798      	blx	r3
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	b21b      	sxth	r3, r3
 8019e00:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019e02:	4b0a      	ldr	r3, [pc, #40]	; (8019e2c <SysTimeFromMs+0x78>)
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	4798      	blx	r3
 8019e08:	4603      	mov	r3, r0
 8019e0a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	693b      	ldr	r3, [r7, #16]
 8019e10:	9300      	str	r3, [sp, #0]
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	f107 0214 	add.w	r2, r7, #20
 8019e18:	ca06      	ldmia	r2, {r1, r2}
 8019e1a:	f7ff feab 	bl	8019b74 <SysTimeAdd>
}
 8019e1e:	6878      	ldr	r0, [r7, #4]
 8019e20:	3720      	adds	r7, #32
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}
 8019e26:	bf00      	nop
 8019e28:	10624dd3 	.word	0x10624dd3
 8019e2c:	0801bb5c 	.word	0x0801bb5c

08019e30 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019e30:	b480      	push	{r7}
 8019e32:	b085      	sub	sp, #20
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019e38:	2300      	movs	r3, #0
 8019e3a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019e3c:	e00e      	b.n	8019e5c <ee_skip_atoi+0x2c>
 8019e3e:	68fa      	ldr	r2, [r7, #12]
 8019e40:	4613      	mov	r3, r2
 8019e42:	009b      	lsls	r3, r3, #2
 8019e44:	4413      	add	r3, r2
 8019e46:	005b      	lsls	r3, r3, #1
 8019e48:	4618      	mov	r0, r3
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	1c59      	adds	r1, r3, #1
 8019e50:	687a      	ldr	r2, [r7, #4]
 8019e52:	6011      	str	r1, [r2, #0]
 8019e54:	781b      	ldrb	r3, [r3, #0]
 8019e56:	4403      	add	r3, r0
 8019e58:	3b30      	subs	r3, #48	; 0x30
 8019e5a:	60fb      	str	r3, [r7, #12]
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	781b      	ldrb	r3, [r3, #0]
 8019e62:	2b2f      	cmp	r3, #47	; 0x2f
 8019e64:	d904      	bls.n	8019e70 <ee_skip_atoi+0x40>
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	781b      	ldrb	r3, [r3, #0]
 8019e6c:	2b39      	cmp	r3, #57	; 0x39
 8019e6e:	d9e6      	bls.n	8019e3e <ee_skip_atoi+0xe>
  return i;
 8019e70:	68fb      	ldr	r3, [r7, #12]
}
 8019e72:	4618      	mov	r0, r3
 8019e74:	3714      	adds	r7, #20
 8019e76:	46bd      	mov	sp, r7
 8019e78:	bc80      	pop	{r7}
 8019e7a:	4770      	bx	lr

08019e7c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019e7c:	b480      	push	{r7}
 8019e7e:	b099      	sub	sp, #100	; 0x64
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	60f8      	str	r0, [r7, #12]
 8019e84:	60b9      	str	r1, [r7, #8]
 8019e86:	607a      	str	r2, [r7, #4]
 8019e88:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019e8a:	4b72      	ldr	r3, [pc, #456]	; (801a054 <ee_number+0x1d8>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d002      	beq.n	8019ea0 <ee_number+0x24>
 8019e9a:	4b6f      	ldr	r3, [pc, #444]	; (801a058 <ee_number+0x1dc>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019ea0:	683b      	ldr	r3, [r7, #0]
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	dd02      	ble.n	8019eac <ee_number+0x30>
 8019ea6:	683b      	ldr	r3, [r7, #0]
 8019ea8:	2b24      	cmp	r3, #36	; 0x24
 8019eaa:	dd01      	ble.n	8019eb0 <ee_number+0x34>
 8019eac:	2300      	movs	r3, #0
 8019eae:	e0cc      	b.n	801a04a <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019eb2:	f003 0301 	and.w	r3, r3, #1
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d001      	beq.n	8019ebe <ee_number+0x42>
 8019eba:	2330      	movs	r3, #48	; 0x30
 8019ebc:	e000      	b.n	8019ec0 <ee_number+0x44>
 8019ebe:	2320      	movs	r3, #32
 8019ec0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ecc:	f003 0302 	and.w	r3, r3, #2
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d00b      	beq.n	8019eec <ee_number+0x70>
  {
    if (num < 0)
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	da08      	bge.n	8019eec <ee_number+0x70>
    {
      sign = '-';
 8019eda:	232d      	movs	r3, #45	; 0x2d
 8019edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	425b      	negs	r3, r3
 8019ee4:	607b      	str	r3, [r7, #4]
      size--;
 8019ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ee8:	3b01      	subs	r3, #1
 8019eea:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019eec:	2300      	movs	r3, #0
 8019eee:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d120      	bne.n	8019f38 <ee_number+0xbc>
    tmp[i++] = '0';
 8019ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019ef8:	1c5a      	adds	r2, r3, #1
 8019efa:	657a      	str	r2, [r7, #84]	; 0x54
 8019efc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019f00:	4413      	add	r3, r2
 8019f02:	2230      	movs	r2, #48	; 0x30
 8019f04:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019f08:	e019      	b.n	8019f3e <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	683a      	ldr	r2, [r7, #0]
 8019f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019f12:	fb02 f201 	mul.w	r2, r2, r1
 8019f16:	1a9b      	subs	r3, r3, r2
 8019f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019f1a:	441a      	add	r2, r3
 8019f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f1e:	1c59      	adds	r1, r3, #1
 8019f20:	6579      	str	r1, [r7, #84]	; 0x54
 8019f22:	7812      	ldrb	r2, [r2, #0]
 8019f24:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019f28:	440b      	add	r3, r1
 8019f2a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f36:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d1e5      	bne.n	8019f0a <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019f3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f42:	429a      	cmp	r2, r3
 8019f44:	dd01      	ble.n	8019f4a <ee_number+0xce>
 8019f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019f4e:	1ad3      	subs	r3, r2, r3
 8019f50:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019f54:	f003 0301 	and.w	r3, r3, #1
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d112      	bne.n	8019f82 <ee_number+0x106>
 8019f5c:	e00c      	b.n	8019f78 <ee_number+0xfc>
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	1c5a      	adds	r2, r3, #1
 8019f62:	60fa      	str	r2, [r7, #12]
 8019f64:	2220      	movs	r2, #32
 8019f66:	701a      	strb	r2, [r3, #0]
 8019f68:	68bb      	ldr	r3, [r7, #8]
 8019f6a:	3b01      	subs	r3, #1
 8019f6c:	60bb      	str	r3, [r7, #8]
 8019f6e:	68bb      	ldr	r3, [r7, #8]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d101      	bne.n	8019f78 <ee_number+0xfc>
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	e068      	b.n	801a04a <ee_number+0x1ce>
 8019f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019f7a:	1e5a      	subs	r2, r3, #1
 8019f7c:	66ba      	str	r2, [r7, #104]	; 0x68
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	dced      	bgt.n	8019f5e <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d01b      	beq.n	8019fc2 <ee_number+0x146>
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	1c5a      	adds	r2, r3, #1
 8019f8e:	60fa      	str	r2, [r7, #12]
 8019f90:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019f94:	701a      	strb	r2, [r3, #0]
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	3b01      	subs	r3, #1
 8019f9a:	60bb      	str	r3, [r7, #8]
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d10f      	bne.n	8019fc2 <ee_number+0x146>
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	e051      	b.n	801a04a <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	1c5a      	adds	r2, r3, #1
 8019faa:	60fa      	str	r2, [r7, #12]
 8019fac:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019fb0:	701a      	strb	r2, [r3, #0]
 8019fb2:	68bb      	ldr	r3, [r7, #8]
 8019fb4:	3b01      	subs	r3, #1
 8019fb6:	60bb      	str	r3, [r7, #8]
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d101      	bne.n	8019fc2 <ee_number+0x146>
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	e043      	b.n	801a04a <ee_number+0x1ce>
 8019fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019fc4:	1e5a      	subs	r2, r3, #1
 8019fc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	dcec      	bgt.n	8019fa6 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019fcc:	e00c      	b.n	8019fe8 <ee_number+0x16c>
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	1c5a      	adds	r2, r3, #1
 8019fd2:	60fa      	str	r2, [r7, #12]
 8019fd4:	2230      	movs	r2, #48	; 0x30
 8019fd6:	701a      	strb	r2, [r3, #0]
 8019fd8:	68bb      	ldr	r3, [r7, #8]
 8019fda:	3b01      	subs	r3, #1
 8019fdc:	60bb      	str	r3, [r7, #8]
 8019fde:	68bb      	ldr	r3, [r7, #8]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d101      	bne.n	8019fe8 <ee_number+0x16c>
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	e030      	b.n	801a04a <ee_number+0x1ce>
 8019fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019fea:	1e5a      	subs	r2, r3, #1
 8019fec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019fee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019ff0:	429a      	cmp	r2, r3
 8019ff2:	dbec      	blt.n	8019fce <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019ff4:	e010      	b.n	801a018 <ee_number+0x19c>
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	1c5a      	adds	r2, r3, #1
 8019ffa:	60fa      	str	r2, [r7, #12]
 8019ffc:	f107 0110 	add.w	r1, r7, #16
 801a000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a002:	440a      	add	r2, r1
 801a004:	7812      	ldrb	r2, [r2, #0]
 801a006:	701a      	strb	r2, [r3, #0]
 801a008:	68bb      	ldr	r3, [r7, #8]
 801a00a:	3b01      	subs	r3, #1
 801a00c:	60bb      	str	r3, [r7, #8]
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d101      	bne.n	801a018 <ee_number+0x19c>
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	e018      	b.n	801a04a <ee_number+0x1ce>
 801a018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a01a:	1e5a      	subs	r2, r3, #1
 801a01c:	657a      	str	r2, [r7, #84]	; 0x54
 801a01e:	2b00      	cmp	r3, #0
 801a020:	dce9      	bgt.n	8019ff6 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801a022:	e00c      	b.n	801a03e <ee_number+0x1c2>
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	1c5a      	adds	r2, r3, #1
 801a028:	60fa      	str	r2, [r7, #12]
 801a02a:	2220      	movs	r2, #32
 801a02c:	701a      	strb	r2, [r3, #0]
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	3b01      	subs	r3, #1
 801a032:	60bb      	str	r3, [r7, #8]
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d101      	bne.n	801a03e <ee_number+0x1c2>
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	e005      	b.n	801a04a <ee_number+0x1ce>
 801a03e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a040:	1e5a      	subs	r2, r3, #1
 801a042:	66ba      	str	r2, [r7, #104]	; 0x68
 801a044:	2b00      	cmp	r3, #0
 801a046:	dced      	bgt.n	801a024 <ee_number+0x1a8>

  return str;
 801a048:	68fb      	ldr	r3, [r7, #12]
}
 801a04a:	4618      	mov	r0, r3
 801a04c:	3764      	adds	r7, #100	; 0x64
 801a04e:	46bd      	mov	sp, r7
 801a050:	bc80      	pop	{r7}
 801a052:	4770      	bx	lr
 801a054:	20000124 	.word	0x20000124
 801a058:	20000128 	.word	0x20000128

0801a05c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b092      	sub	sp, #72	; 0x48
 801a060:	af04      	add	r7, sp, #16
 801a062:	60f8      	str	r0, [r7, #12]
 801a064:	60b9      	str	r1, [r7, #8]
 801a066:	607a      	str	r2, [r7, #4]
 801a068:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a06a:	68bb      	ldr	r3, [r7, #8]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	dc01      	bgt.n	801a074 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a070:	2300      	movs	r3, #0
 801a072:	e142      	b.n	801a2fa <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a078:	e12a      	b.n	801a2d0 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	1ad2      	subs	r2, r2, r3
 801a080:	68bb      	ldr	r3, [r7, #8]
 801a082:	3b01      	subs	r3, #1
 801a084:	429a      	cmp	r2, r3
 801a086:	f280 8131 	bge.w	801a2ec <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	781b      	ldrb	r3, [r3, #0]
 801a08e:	2b25      	cmp	r3, #37	; 0x25
 801a090:	d006      	beq.n	801a0a0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a092:	687a      	ldr	r2, [r7, #4]
 801a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a096:	1c59      	adds	r1, r3, #1
 801a098:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a09a:	7812      	ldrb	r2, [r2, #0]
 801a09c:	701a      	strb	r2, [r3, #0]
      continue;
 801a09e:	e114      	b.n	801a2ca <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	3301      	adds	r3, #1
 801a0a8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	781b      	ldrb	r3, [r3, #0]
 801a0ae:	2b30      	cmp	r3, #48	; 0x30
 801a0b0:	d103      	bne.n	801a0ba <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a0b2:	6a3b      	ldr	r3, [r7, #32]
 801a0b4:	f043 0301 	orr.w	r3, r3, #1
 801a0b8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801a0ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a0be:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	781b      	ldrb	r3, [r3, #0]
 801a0c4:	2b2f      	cmp	r3, #47	; 0x2f
 801a0c6:	d908      	bls.n	801a0da <tiny_vsnprintf_like+0x7e>
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	781b      	ldrb	r3, [r3, #0]
 801a0cc:	2b39      	cmp	r3, #57	; 0x39
 801a0ce:	d804      	bhi.n	801a0da <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a0d0:	1d3b      	adds	r3, r7, #4
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f7ff feac 	bl	8019e30 <ee_skip_atoi>
 801a0d8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801a0da:	f04f 33ff 	mov.w	r3, #4294967295
 801a0de:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a0e4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801a0e6:	230a      	movs	r3, #10
 801a0e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	3b58      	subs	r3, #88	; 0x58
 801a0f0:	2b20      	cmp	r3, #32
 801a0f2:	f200 8094 	bhi.w	801a21e <tiny_vsnprintf_like+0x1c2>
 801a0f6:	a201      	add	r2, pc, #4	; (adr r2, 801a0fc <tiny_vsnprintf_like+0xa0>)
 801a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0fc:	0801a207 	.word	0x0801a207
 801a100:	0801a21f 	.word	0x0801a21f
 801a104:	0801a21f 	.word	0x0801a21f
 801a108:	0801a21f 	.word	0x0801a21f
 801a10c:	0801a21f 	.word	0x0801a21f
 801a110:	0801a21f 	.word	0x0801a21f
 801a114:	0801a21f 	.word	0x0801a21f
 801a118:	0801a21f 	.word	0x0801a21f
 801a11c:	0801a21f 	.word	0x0801a21f
 801a120:	0801a21f 	.word	0x0801a21f
 801a124:	0801a21f 	.word	0x0801a21f
 801a128:	0801a18b 	.word	0x0801a18b
 801a12c:	0801a215 	.word	0x0801a215
 801a130:	0801a21f 	.word	0x0801a21f
 801a134:	0801a21f 	.word	0x0801a21f
 801a138:	0801a21f 	.word	0x0801a21f
 801a13c:	0801a21f 	.word	0x0801a21f
 801a140:	0801a215 	.word	0x0801a215
 801a144:	0801a21f 	.word	0x0801a21f
 801a148:	0801a21f 	.word	0x0801a21f
 801a14c:	0801a21f 	.word	0x0801a21f
 801a150:	0801a21f 	.word	0x0801a21f
 801a154:	0801a21f 	.word	0x0801a21f
 801a158:	0801a21f 	.word	0x0801a21f
 801a15c:	0801a21f 	.word	0x0801a21f
 801a160:	0801a21f 	.word	0x0801a21f
 801a164:	0801a21f 	.word	0x0801a21f
 801a168:	0801a1ab 	.word	0x0801a1ab
 801a16c:	0801a21f 	.word	0x0801a21f
 801a170:	0801a26b 	.word	0x0801a26b
 801a174:	0801a21f 	.word	0x0801a21f
 801a178:	0801a21f 	.word	0x0801a21f
 801a17c:	0801a20f 	.word	0x0801a20f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a182:	1c5a      	adds	r2, r3, #1
 801a184:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a186:	2220      	movs	r2, #32
 801a188:	701a      	strb	r2, [r3, #0]
 801a18a:	69fb      	ldr	r3, [r7, #28]
 801a18c:	3b01      	subs	r3, #1
 801a18e:	61fb      	str	r3, [r7, #28]
 801a190:	69fb      	ldr	r3, [r7, #28]
 801a192:	2b00      	cmp	r3, #0
 801a194:	dcf4      	bgt.n	801a180 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	1d1a      	adds	r2, r3, #4
 801a19a:	603a      	str	r2, [r7, #0]
 801a19c:	6819      	ldr	r1, [r3, #0]
 801a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1a0:	1c5a      	adds	r2, r3, #1
 801a1a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a1a4:	b2ca      	uxtb	r2, r1
 801a1a6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a1a8:	e08f      	b.n	801a2ca <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801a1aa:	683b      	ldr	r3, [r7, #0]
 801a1ac:	1d1a      	adds	r2, r3, #4
 801a1ae:	603a      	str	r2, [r7, #0]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d101      	bne.n	801a1be <tiny_vsnprintf_like+0x162>
 801a1ba:	4b52      	ldr	r3, [pc, #328]	; (801a304 <tiny_vsnprintf_like+0x2a8>)
 801a1bc:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a1be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1c0:	f7e5 ffda 	bl	8000178 <strlen>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a1c8:	e004      	b.n	801a1d4 <tiny_vsnprintf_like+0x178>
 801a1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1cc:	1c5a      	adds	r2, r3, #1
 801a1ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a1d0:	2220      	movs	r2, #32
 801a1d2:	701a      	strb	r2, [r3, #0]
 801a1d4:	69fb      	ldr	r3, [r7, #28]
 801a1d6:	1e5a      	subs	r2, r3, #1
 801a1d8:	61fa      	str	r2, [r7, #28]
 801a1da:	693a      	ldr	r2, [r7, #16]
 801a1dc:	429a      	cmp	r2, r3
 801a1de:	dbf4      	blt.n	801a1ca <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1e4:	e00a      	b.n	801a1fc <tiny_vsnprintf_like+0x1a0>
 801a1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1e8:	1c53      	adds	r3, r2, #1
 801a1ea:	627b      	str	r3, [r7, #36]	; 0x24
 801a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ee:	1c59      	adds	r1, r3, #1
 801a1f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a1f2:	7812      	ldrb	r2, [r2, #0]
 801a1f4:	701a      	strb	r2, [r3, #0]
 801a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1f8:	3301      	adds	r3, #1
 801a1fa:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	429a      	cmp	r2, r3
 801a202:	dbf0      	blt.n	801a1e6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a204:	e061      	b.n	801a2ca <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801a206:	6a3b      	ldr	r3, [r7, #32]
 801a208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a20c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a20e:	2310      	movs	r3, #16
 801a210:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801a212:	e02d      	b.n	801a270 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a214:	6a3b      	ldr	r3, [r7, #32]
 801a216:	f043 0302 	orr.w	r3, r3, #2
 801a21a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a21c:	e025      	b.n	801a26a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	781b      	ldrb	r3, [r3, #0]
 801a222:	2b25      	cmp	r3, #37	; 0x25
 801a224:	d004      	beq.n	801a230 <tiny_vsnprintf_like+0x1d4>
 801a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a228:	1c5a      	adds	r2, r3, #1
 801a22a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a22c:	2225      	movs	r2, #37	; 0x25
 801a22e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	1ad2      	subs	r2, r2, r3
 801a236:	68bb      	ldr	r3, [r7, #8]
 801a238:	3b01      	subs	r3, #1
 801a23a:	429a      	cmp	r2, r3
 801a23c:	da17      	bge.n	801a26e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	781b      	ldrb	r3, [r3, #0]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d006      	beq.n	801a254 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a246:	687a      	ldr	r2, [r7, #4]
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	1c59      	adds	r1, r3, #1
 801a24c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a24e:	7812      	ldrb	r2, [r2, #0]
 801a250:	701a      	strb	r2, [r3, #0]
 801a252:	e002      	b.n	801a25a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	3b01      	subs	r3, #1
 801a258:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	1ad2      	subs	r2, r2, r3
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	3b01      	subs	r3, #1
 801a264:	429a      	cmp	r2, r3
 801a266:	db2f      	blt.n	801a2c8 <tiny_vsnprintf_like+0x26c>
 801a268:	e002      	b.n	801a270 <tiny_vsnprintf_like+0x214>
        break;
 801a26a:	bf00      	nop
 801a26c:	e000      	b.n	801a270 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801a26e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a270:	697b      	ldr	r3, [r7, #20]
 801a272:	2b6c      	cmp	r3, #108	; 0x6c
 801a274:	d105      	bne.n	801a282 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	1d1a      	adds	r2, r3, #4
 801a27a:	603a      	str	r2, [r7, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	637b      	str	r3, [r7, #52]	; 0x34
 801a280:	e00f      	b.n	801a2a2 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801a282:	6a3b      	ldr	r3, [r7, #32]
 801a284:	f003 0302 	and.w	r3, r3, #2
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d005      	beq.n	801a298 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	1d1a      	adds	r2, r3, #4
 801a290:	603a      	str	r2, [r7, #0]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	637b      	str	r3, [r7, #52]	; 0x34
 801a296:	e004      	b.n	801a2a2 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	1d1a      	adds	r2, r3, #4
 801a29c:	603a      	str	r2, [r7, #0]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a2a2:	68bb      	ldr	r3, [r7, #8]
 801a2a4:	1e5a      	subs	r2, r3, #1
 801a2a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	1acb      	subs	r3, r1, r3
 801a2ac:	1ad1      	subs	r1, r2, r3
 801a2ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a2b0:	6a3b      	ldr	r3, [r7, #32]
 801a2b2:	9302      	str	r3, [sp, #8]
 801a2b4:	69bb      	ldr	r3, [r7, #24]
 801a2b6:	9301      	str	r3, [sp, #4]
 801a2b8:	69fb      	ldr	r3, [r7, #28]
 801a2ba:	9300      	str	r3, [sp, #0]
 801a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a2c0:	f7ff fddc 	bl	8019e7c <ee_number>
 801a2c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 801a2c6:	e000      	b.n	801a2ca <tiny_vsnprintf_like+0x26e>
        continue;
 801a2c8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	3301      	adds	r3, #1
 801a2ce:	607b      	str	r3, [r7, #4]
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	781b      	ldrb	r3, [r3, #0]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	f47f aed0 	bne.w	801a07a <tiny_vsnprintf_like+0x1e>
 801a2da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	1ad2      	subs	r2, r2, r3
 801a2e0:	68bb      	ldr	r3, [r7, #8]
 801a2e2:	3b01      	subs	r3, #1
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	f6bf aec8 	bge.w	801a07a <tiny_vsnprintf_like+0x1e>
 801a2ea:	e000      	b.n	801a2ee <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a2ec:	bf00      	nop
  }

  *str = '\0';
 801a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	1ad3      	subs	r3, r2, r3
}
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	3738      	adds	r7, #56	; 0x38
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}
 801a302:	bf00      	nop
 801a304:	0801ba6c 	.word	0x0801ba6c

0801a308 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b08c      	sub	sp, #48	; 0x30
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a310:	4b67      	ldr	r3, [pc, #412]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801a316:	4b66      	ldr	r3, [pc, #408]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a318:	681a      	ldr	r2, [r3, #0]
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	4013      	ands	r3, r2
 801a31e:	4a64      	ldr	r2, [pc, #400]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a320:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a322:	e083      	b.n	801a42c <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801a324:	2300      	movs	r3, #0
 801a326:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a328:	e002      	b.n	801a330 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801a32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32c:	3301      	adds	r3, #1
 801a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801a330:	4a60      	ldr	r2, [pc, #384]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a334:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a338:	4b5f      	ldr	r3, [pc, #380]	; (801a4b8 <UTIL_SEQ_Run+0x1b0>)
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	401a      	ands	r2, r3
 801a33e:	4b5c      	ldr	r3, [pc, #368]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	4013      	ands	r3, r2
 801a344:	2b00      	cmp	r3, #0
 801a346:	d0f0      	beq.n	801a32a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801a348:	4a5a      	ldr	r2, [pc, #360]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a350:	4b59      	ldr	r3, [pc, #356]	; (801a4b8 <UTIL_SEQ_Run+0x1b0>)
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	401a      	ands	r2, r3
 801a356:	4b56      	ldr	r3, [pc, #344]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	4013      	ands	r3, r2
 801a35c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a35e:	4a55      	ldr	r2, [pc, #340]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a362:	00db      	lsls	r3, r3, #3
 801a364:	4413      	add	r3, r2
 801a366:	685a      	ldr	r2, [r3, #4]
 801a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36a:	4013      	ands	r3, r2
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d106      	bne.n	801a37e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a370:	4a50      	ldr	r2, [pc, #320]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a374:	00db      	lsls	r3, r3, #3
 801a376:	4413      	add	r3, r2
 801a378:	f04f 32ff 	mov.w	r2, #4294967295
 801a37c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a37e:	4a4d      	ldr	r2, [pc, #308]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a382:	00db      	lsls	r3, r3, #3
 801a384:	4413      	add	r3, r2
 801a386:	685a      	ldr	r2, [r3, #4]
 801a388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38a:	4013      	ands	r3, r2
 801a38c:	4618      	mov	r0, r3
 801a38e:	f000 f8f9 	bl	801a584 <SEQ_BitPosition>
 801a392:	4603      	mov	r3, r0
 801a394:	461a      	mov	r2, r3
 801a396:	4b49      	ldr	r3, [pc, #292]	; (801a4bc <UTIL_SEQ_Run+0x1b4>)
 801a398:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a39a:	4a46      	ldr	r2, [pc, #280]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a39e:	00db      	lsls	r3, r3, #3
 801a3a0:	4413      	add	r3, r2
 801a3a2:	685a      	ldr	r2, [r3, #4]
 801a3a4:	4b45      	ldr	r3, [pc, #276]	; (801a4bc <UTIL_SEQ_Run+0x1b4>)
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	2101      	movs	r1, #1
 801a3aa:	fa01 f303 	lsl.w	r3, r1, r3
 801a3ae:	43db      	mvns	r3, r3
 801a3b0:	401a      	ands	r2, r3
 801a3b2:	4940      	ldr	r1, [pc, #256]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b6:	00db      	lsls	r3, r3, #3
 801a3b8:	440b      	add	r3, r1
 801a3ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3bc:	f3ef 8310 	mrs	r3, PRIMASK
 801a3c0:	61bb      	str	r3, [r7, #24]
  return(result);
 801a3c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a3c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3c6:	b672      	cpsid	i
}
 801a3c8:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a3ca:	4b3c      	ldr	r3, [pc, #240]	; (801a4bc <UTIL_SEQ_Run+0x1b4>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2201      	movs	r2, #1
 801a3d0:	fa02 f303 	lsl.w	r3, r2, r3
 801a3d4:	43da      	mvns	r2, r3
 801a3d6:	4b3a      	ldr	r3, [pc, #232]	; (801a4c0 <UTIL_SEQ_Run+0x1b8>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	4013      	ands	r3, r2
 801a3dc:	4a38      	ldr	r2, [pc, #224]	; (801a4c0 <UTIL_SEQ_Run+0x1b8>)
 801a3de:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a3e0:	2302      	movs	r3, #2
 801a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a3e4:	e013      	b.n	801a40e <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e8:	3b01      	subs	r3, #1
 801a3ea:	4a32      	ldr	r2, [pc, #200]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a3ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a3f0:	4b32      	ldr	r3, [pc, #200]	; (801a4bc <UTIL_SEQ_Run+0x1b4>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	2201      	movs	r2, #1
 801a3f6:	fa02 f303 	lsl.w	r3, r2, r3
 801a3fa:	43da      	mvns	r2, r3
 801a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3fe:	3b01      	subs	r3, #1
 801a400:	400a      	ands	r2, r1
 801a402:	492c      	ldr	r1, [pc, #176]	; (801a4b4 <UTIL_SEQ_Run+0x1ac>)
 801a404:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a40a:	3b01      	subs	r3, #1
 801a40c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a410:	2b00      	cmp	r3, #0
 801a412:	d1e8      	bne.n	801a3e6 <UTIL_SEQ_Run+0xde>
 801a414:	6a3b      	ldr	r3, [r7, #32]
 801a416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a418:	697b      	ldr	r3, [r7, #20]
 801a41a:	f383 8810 	msr	PRIMASK, r3
}
 801a41e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a420:	4b26      	ldr	r3, [pc, #152]	; (801a4bc <UTIL_SEQ_Run+0x1b4>)
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	4a27      	ldr	r2, [pc, #156]	; (801a4c4 <UTIL_SEQ_Run+0x1bc>)
 801a426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a42a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a42c:	4b24      	ldr	r3, [pc, #144]	; (801a4c0 <UTIL_SEQ_Run+0x1b8>)
 801a42e:	681a      	ldr	r2, [r3, #0]
 801a430:	4b21      	ldr	r3, [pc, #132]	; (801a4b8 <UTIL_SEQ_Run+0x1b0>)
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	401a      	ands	r2, r3
 801a436:	4b1e      	ldr	r3, [pc, #120]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	4013      	ands	r3, r2
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d007      	beq.n	801a450 <UTIL_SEQ_Run+0x148>
 801a440:	4b21      	ldr	r3, [pc, #132]	; (801a4c8 <UTIL_SEQ_Run+0x1c0>)
 801a442:	681a      	ldr	r2, [r3, #0]
 801a444:	4b21      	ldr	r3, [pc, #132]	; (801a4cc <UTIL_SEQ_Run+0x1c4>)
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	4013      	ands	r3, r2
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	f43f af6a 	beq.w	801a324 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a450:	4b1a      	ldr	r3, [pc, #104]	; (801a4bc <UTIL_SEQ_Run+0x1b4>)
 801a452:	f04f 32ff 	mov.w	r2, #4294967295
 801a456:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a458:	f000 f888 	bl	801a56c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a45c:	f3ef 8310 	mrs	r3, PRIMASK
 801a460:	613b      	str	r3, [r7, #16]
  return(result);
 801a462:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a464:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a466:	b672      	cpsid	i
}
 801a468:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801a46a:	4b15      	ldr	r3, [pc, #84]	; (801a4c0 <UTIL_SEQ_Run+0x1b8>)
 801a46c:	681a      	ldr	r2, [r3, #0]
 801a46e:	4b12      	ldr	r3, [pc, #72]	; (801a4b8 <UTIL_SEQ_Run+0x1b0>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	401a      	ands	r2, r3
 801a474:	4b0e      	ldr	r3, [pc, #56]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	4013      	ands	r3, r2
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d108      	bne.n	801a490 <UTIL_SEQ_Run+0x188>
 801a47e:	4b12      	ldr	r3, [pc, #72]	; (801a4c8 <UTIL_SEQ_Run+0x1c0>)
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	4b12      	ldr	r3, [pc, #72]	; (801a4cc <UTIL_SEQ_Run+0x1c4>)
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	4013      	ands	r3, r2
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d101      	bne.n	801a490 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801a48c:	f7e7 fc98 	bl	8001dc0 <UTIL_SEQ_Idle>
 801a490:	69fb      	ldr	r3, [r7, #28]
 801a492:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	f383 8810 	msr	PRIMASK, r3
}
 801a49a:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801a49c:	f000 f86c 	bl	801a578 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a4a0:	4a03      	ldr	r2, [pc, #12]	; (801a4b0 <UTIL_SEQ_Run+0x1a8>)
 801a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4a4:	6013      	str	r3, [r2, #0]

  return;
 801a4a6:	bf00      	nop
}
 801a4a8:	3730      	adds	r7, #48	; 0x30
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	20000130 	.word	0x20000130
 801a4b4:	2000107c 	.word	0x2000107c
 801a4b8:	2000012c 	.word	0x2000012c
 801a4bc:	20000ff8 	.word	0x20000ff8
 801a4c0:	20000fec 	.word	0x20000fec
 801a4c4:	20000ffc 	.word	0x20000ffc
 801a4c8:	20000ff0 	.word	0x20000ff0
 801a4cc:	20000ff4 	.word	0x20000ff4

0801a4d0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b088      	sub	sp, #32
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	60f8      	str	r0, [r7, #12]
 801a4d8:	60b9      	str	r1, [r7, #8]
 801a4da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a4dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a4e0:	617b      	str	r3, [r7, #20]
  return(result);
 801a4e2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a4e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a4e6:	b672      	cpsid	i
}
 801a4e8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a4ea:	68f8      	ldr	r0, [r7, #12]
 801a4ec:	f000 f84a 	bl	801a584 <SEQ_BitPosition>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	4619      	mov	r1, r3
 801a4f4:	4a06      	ldr	r2, [pc, #24]	; (801a510 <UTIL_SEQ_RegTask+0x40>)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a4fc:	69fb      	ldr	r3, [r7, #28]
 801a4fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a500:	69bb      	ldr	r3, [r7, #24]
 801a502:	f383 8810 	msr	PRIMASK, r3
}
 801a506:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a508:	bf00      	nop
}
 801a50a:	3720      	adds	r7, #32
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd80      	pop	{r7, pc}
 801a510:	20000ffc 	.word	0x20000ffc

0801a514 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a514:	b480      	push	{r7}
 801a516:	b087      	sub	sp, #28
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
 801a51c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a51e:	f3ef 8310 	mrs	r3, PRIMASK
 801a522:	60fb      	str	r3, [r7, #12]
  return(result);
 801a524:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a526:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a528:	b672      	cpsid	i
}
 801a52a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a52c:	4b0d      	ldr	r3, [pc, #52]	; (801a564 <UTIL_SEQ_SetTask+0x50>)
 801a52e:	681a      	ldr	r2, [r3, #0]
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	4313      	orrs	r3, r2
 801a534:	4a0b      	ldr	r2, [pc, #44]	; (801a564 <UTIL_SEQ_SetTask+0x50>)
 801a536:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a538:	4a0b      	ldr	r2, [pc, #44]	; (801a568 <UTIL_SEQ_SetTask+0x54>)
 801a53a:	683b      	ldr	r3, [r7, #0]
 801a53c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	431a      	orrs	r2, r3
 801a544:	4908      	ldr	r1, [pc, #32]	; (801a568 <UTIL_SEQ_SetTask+0x54>)
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a54c:	697b      	ldr	r3, [r7, #20]
 801a54e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a550:	693b      	ldr	r3, [r7, #16]
 801a552:	f383 8810 	msr	PRIMASK, r3
}
 801a556:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a558:	bf00      	nop
}
 801a55a:	371c      	adds	r7, #28
 801a55c:	46bd      	mov	sp, r7
 801a55e:	bc80      	pop	{r7}
 801a560:	4770      	bx	lr
 801a562:	bf00      	nop
 801a564:	20000fec 	.word	0x20000fec
 801a568:	2000107c 	.word	0x2000107c

0801a56c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a56c:	b480      	push	{r7}
 801a56e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a570:	bf00      	nop
}
 801a572:	46bd      	mov	sp, r7
 801a574:	bc80      	pop	{r7}
 801a576:	4770      	bx	lr

0801a578 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a578:	b480      	push	{r7}
 801a57a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a57c:	bf00      	nop
}
 801a57e:	46bd      	mov	sp, r7
 801a580:	bc80      	pop	{r7}
 801a582:	4770      	bx	lr

0801a584 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a584:	b480      	push	{r7}
 801a586:	b085      	sub	sp, #20
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a58c:	2300      	movs	r3, #0
 801a58e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	0c1b      	lsrs	r3, r3, #16
 801a594:	041b      	lsls	r3, r3, #16
 801a596:	2b00      	cmp	r3, #0
 801a598:	d104      	bne.n	801a5a4 <SEQ_BitPosition+0x20>
 801a59a:	2310      	movs	r3, #16
 801a59c:	73fb      	strb	r3, [r7, #15]
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	041b      	lsls	r3, r3, #16
 801a5a2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d105      	bne.n	801a5ba <SEQ_BitPosition+0x36>
 801a5ae:	7bfb      	ldrb	r3, [r7, #15]
 801a5b0:	3308      	adds	r3, #8
 801a5b2:	73fb      	strb	r3, [r7, #15]
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	021b      	lsls	r3, r3, #8
 801a5b8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d105      	bne.n	801a5d0 <SEQ_BitPosition+0x4c>
 801a5c4:	7bfb      	ldrb	r3, [r7, #15]
 801a5c6:	3304      	adds	r3, #4
 801a5c8:	73fb      	strb	r3, [r7, #15]
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	011b      	lsls	r3, r3, #4
 801a5ce:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	0f1b      	lsrs	r3, r3, #28
 801a5d4:	4a06      	ldr	r2, [pc, #24]	; (801a5f0 <SEQ_BitPosition+0x6c>)
 801a5d6:	5cd2      	ldrb	r2, [r2, r3]
 801a5d8:	7bfb      	ldrb	r3, [r7, #15]
 801a5da:	4413      	add	r3, r2
 801a5dc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a5de:	7bfb      	ldrb	r3, [r7, #15]
 801a5e0:	f1c3 031f 	rsb	r3, r3, #31
 801a5e4:	b2db      	uxtb	r3, r3
}
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	3714      	adds	r7, #20
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bc80      	pop	{r7}
 801a5ee:	4770      	bx	lr
 801a5f0:	0801c048 	.word	0x0801c048

0801a5f4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a5f8:	4b04      	ldr	r3, [pc, #16]	; (801a60c <UTIL_TIMER_Init+0x18>)
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a5fe:	4b04      	ldr	r3, [pc, #16]	; (801a610 <UTIL_TIMER_Init+0x1c>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	4798      	blx	r3
 801a604:	4603      	mov	r3, r0
}
 801a606:	4618      	mov	r0, r3
 801a608:	bd80      	pop	{r7, pc}
 801a60a:	bf00      	nop
 801a60c:	2000108c 	.word	0x2000108c
 801a610:	0801bb30 	.word	0x0801bb30

0801a614 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b084      	sub	sp, #16
 801a618:	af00      	add	r7, sp, #0
 801a61a:	60f8      	str	r0, [r7, #12]
 801a61c:	60b9      	str	r1, [r7, #8]
 801a61e:	603b      	str	r3, [r7, #0]
 801a620:	4613      	mov	r3, r2
 801a622:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d023      	beq.n	801a672 <UTIL_TIMER_Create+0x5e>
 801a62a:	683b      	ldr	r3, [r7, #0]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d020      	beq.n	801a672 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	2200      	movs	r2, #0
 801a634:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a636:	4b11      	ldr	r3, [pc, #68]	; (801a67c <UTIL_TIMER_Create+0x68>)
 801a638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a63a:	68b8      	ldr	r0, [r7, #8]
 801a63c:	4798      	blx	r3
 801a63e:	4602      	mov	r2, r0
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	2200      	movs	r2, #0
 801a648:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	2200      	movs	r2, #0
 801a64e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	2200      	movs	r2, #0
 801a654:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	683a      	ldr	r2, [r7, #0]
 801a65a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	69ba      	ldr	r2, [r7, #24]
 801a660:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	79fa      	ldrb	r2, [r7, #7]
 801a666:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2200      	movs	r2, #0
 801a66c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a66e:	2300      	movs	r3, #0
 801a670:	e000      	b.n	801a674 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a672:	2301      	movs	r3, #1
  }
}
 801a674:	4618      	mov	r0, r3
 801a676:	3710      	adds	r7, #16
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd80      	pop	{r7, pc}
 801a67c:	0801bb30 	.word	0x0801bb30

0801a680 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b08a      	sub	sp, #40	; 0x28
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a688:	2300      	movs	r3, #0
 801a68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d056      	beq.n	801a742 <UTIL_TIMER_Start+0xc2>
 801a694:	6878      	ldr	r0, [r7, #4]
 801a696:	f000 f9a9 	bl	801a9ec <TimerExists>
 801a69a:	4603      	mov	r3, r0
 801a69c:	f083 0301 	eor.w	r3, r3, #1
 801a6a0:	b2db      	uxtb	r3, r3
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d04d      	beq.n	801a742 <UTIL_TIMER_Start+0xc2>
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	7a5b      	ldrb	r3, [r3, #9]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d149      	bne.n	801a742 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a6ae:	f3ef 8310 	mrs	r3, PRIMASK
 801a6b2:	613b      	str	r3, [r7, #16]
  return(result);
 801a6b4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a6b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6b8:	b672      	cpsid	i
}
 801a6ba:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	685b      	ldr	r3, [r3, #4]
 801a6c0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a6c2:	4b24      	ldr	r3, [pc, #144]	; (801a754 <UTIL_TIMER_Start+0xd4>)
 801a6c4:	6a1b      	ldr	r3, [r3, #32]
 801a6c6:	4798      	blx	r3
 801a6c8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a6ca:	6a3a      	ldr	r2, [r7, #32]
 801a6cc:	69bb      	ldr	r3, [r7, #24]
 801a6ce:	429a      	cmp	r2, r3
 801a6d0:	d201      	bcs.n	801a6d6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a6d2:	69bb      	ldr	r3, [r7, #24]
 801a6d4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6a3a      	ldr	r2, [r7, #32]
 801a6da:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2200      	movs	r2, #0
 801a6e0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	2201      	movs	r2, #1
 801a6e6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a6ee:	4b1a      	ldr	r3, [pc, #104]	; (801a758 <UTIL_TIMER_Start+0xd8>)
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d106      	bne.n	801a704 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a6f6:	4b17      	ldr	r3, [pc, #92]	; (801a754 <UTIL_TIMER_Start+0xd4>)
 801a6f8:	691b      	ldr	r3, [r3, #16]
 801a6fa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a6fc:	6878      	ldr	r0, [r7, #4]
 801a6fe:	f000 f9eb 	bl	801aad8 <TimerInsertNewHeadTimer>
 801a702:	e017      	b.n	801a734 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a704:	4b13      	ldr	r3, [pc, #76]	; (801a754 <UTIL_TIMER_Start+0xd4>)
 801a706:	699b      	ldr	r3, [r3, #24]
 801a708:	4798      	blx	r3
 801a70a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	681a      	ldr	r2, [r3, #0]
 801a710:	697b      	ldr	r3, [r7, #20]
 801a712:	441a      	add	r2, r3
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681a      	ldr	r2, [r3, #0]
 801a71c:	4b0e      	ldr	r3, [pc, #56]	; (801a758 <UTIL_TIMER_Start+0xd8>)
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	429a      	cmp	r2, r3
 801a724:	d203      	bcs.n	801a72e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a726:	6878      	ldr	r0, [r7, #4]
 801a728:	f000 f9d6 	bl	801aad8 <TimerInsertNewHeadTimer>
 801a72c:	e002      	b.n	801a734 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a72e:	6878      	ldr	r0, [r7, #4]
 801a730:	f000 f9a2 	bl	801aa78 <TimerInsertTimer>
 801a734:	69fb      	ldr	r3, [r7, #28]
 801a736:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	f383 8810 	msr	PRIMASK, r3
}
 801a73e:	bf00      	nop
  {
 801a740:	e002      	b.n	801a748 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a742:	2301      	movs	r3, #1
 801a744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a74c:	4618      	mov	r0, r3
 801a74e:	3728      	adds	r7, #40	; 0x28
 801a750:	46bd      	mov	sp, r7
 801a752:	bd80      	pop	{r7, pc}
 801a754:	0801bb30 	.word	0x0801bb30
 801a758:	2000108c 	.word	0x2000108c

0801a75c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a75c:	b580      	push	{r7, lr}
 801a75e:	b088      	sub	sp, #32
 801a760:	af00      	add	r7, sp, #0
 801a762:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a764:	2300      	movs	r3, #0
 801a766:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d05b      	beq.n	801a826 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a76e:	f3ef 8310 	mrs	r3, PRIMASK
 801a772:	60fb      	str	r3, [r7, #12]
  return(result);
 801a774:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a778:	b672      	cpsid	i
}
 801a77a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a77c:	4b2d      	ldr	r3, [pc, #180]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a782:	4b2c      	ldr	r3, [pc, #176]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	2201      	movs	r2, #1
 801a78c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a78e:	4b29      	ldr	r3, [pc, #164]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d041      	beq.n	801a81a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	2200      	movs	r2, #0
 801a79a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a79c:	4b25      	ldr	r3, [pc, #148]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	687a      	ldr	r2, [r7, #4]
 801a7a2:	429a      	cmp	r2, r3
 801a7a4:	d134      	bne.n	801a810 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a7a6:	4b23      	ldr	r3, [pc, #140]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a7ae:	4b21      	ldr	r3, [pc, #132]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	695b      	ldr	r3, [r3, #20]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d00a      	beq.n	801a7ce <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a7b8:	4b1e      	ldr	r3, [pc, #120]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	695b      	ldr	r3, [r3, #20]
 801a7be:	4a1d      	ldr	r2, [pc, #116]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a7c0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a7c2:	4b1c      	ldr	r3, [pc, #112]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f000 f92c 	bl	801aa24 <TimerSetTimeout>
 801a7cc:	e023      	b.n	801a816 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a7ce:	4b1a      	ldr	r3, [pc, #104]	; (801a838 <UTIL_TIMER_Stop+0xdc>)
 801a7d0:	68db      	ldr	r3, [r3, #12]
 801a7d2:	4798      	blx	r3
            TimerListHead = NULL;
 801a7d4:	4b17      	ldr	r3, [pc, #92]	; (801a834 <UTIL_TIMER_Stop+0xd8>)
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	601a      	str	r2, [r3, #0]
 801a7da:	e01c      	b.n	801a816 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a7dc:	697a      	ldr	r2, [r7, #20]
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	d110      	bne.n	801a806 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	695b      	ldr	r3, [r3, #20]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d006      	beq.n	801a7fa <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	695b      	ldr	r3, [r3, #20]
 801a7f0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a7f2:	69bb      	ldr	r3, [r7, #24]
 801a7f4:	697a      	ldr	r2, [r7, #20]
 801a7f6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a7f8:	e00d      	b.n	801a816 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a7fe:	69bb      	ldr	r3, [r7, #24]
 801a800:	697a      	ldr	r2, [r7, #20]
 801a802:	615a      	str	r2, [r3, #20]
            break;
 801a804:	e007      	b.n	801a816 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a806:	697b      	ldr	r3, [r7, #20]
 801a808:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	695b      	ldr	r3, [r3, #20]
 801a80e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d1e2      	bne.n	801a7dc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a816:	2300      	movs	r3, #0
 801a818:	77fb      	strb	r3, [r7, #31]
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	f383 8810 	msr	PRIMASK, r3
}
 801a824:	e001      	b.n	801a82a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a826:	2301      	movs	r3, #1
 801a828:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a82a:	7ffb      	ldrb	r3, [r7, #31]
}
 801a82c:	4618      	mov	r0, r3
 801a82e:	3720      	adds	r7, #32
 801a830:	46bd      	mov	sp, r7
 801a832:	bd80      	pop	{r7, pc}
 801a834:	2000108c 	.word	0x2000108c
 801a838:	0801bb30 	.word	0x0801bb30

0801a83c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a83c:	b580      	push	{r7, lr}
 801a83e:	b084      	sub	sp, #16
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a846:	2300      	movs	r3, #0
 801a848:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d102      	bne.n	801a856 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a850:	2301      	movs	r3, #1
 801a852:	73fb      	strb	r3, [r7, #15]
 801a854:	e014      	b.n	801a880 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a856:	4b0d      	ldr	r3, [pc, #52]	; (801a88c <UTIL_TIMER_SetPeriod+0x50>)
 801a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a85a:	6838      	ldr	r0, [r7, #0]
 801a85c:	4798      	blx	r3
 801a85e:	4602      	mov	r2, r0
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a864:	6878      	ldr	r0, [r7, #4]
 801a866:	f000 f8c1 	bl	801a9ec <TimerExists>
 801a86a:	4603      	mov	r3, r0
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d007      	beq.n	801a880 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a870:	6878      	ldr	r0, [r7, #4]
 801a872:	f7ff ff73 	bl	801a75c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	f7ff ff02 	bl	801a680 <UTIL_TIMER_Start>
 801a87c:	4603      	mov	r3, r0
 801a87e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a880:	7bfb      	ldrb	r3, [r7, #15]
}
 801a882:	4618      	mov	r0, r3
 801a884:	3710      	adds	r7, #16
 801a886:	46bd      	mov	sp, r7
 801a888:	bd80      	pop	{r7, pc}
 801a88a:	bf00      	nop
 801a88c:	0801bb30 	.word	0x0801bb30

0801a890 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a890:	b590      	push	{r4, r7, lr}
 801a892:	b089      	sub	sp, #36	; 0x24
 801a894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a896:	f3ef 8310 	mrs	r3, PRIMASK
 801a89a:	60bb      	str	r3, [r7, #8]
  return(result);
 801a89c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a89e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8a0:	b672      	cpsid	i
}
 801a8a2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a8a4:	4b38      	ldr	r3, [pc, #224]	; (801a988 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a8a6:	695b      	ldr	r3, [r3, #20]
 801a8a8:	4798      	blx	r3
 801a8aa:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a8ac:	4b36      	ldr	r3, [pc, #216]	; (801a988 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a8ae:	691b      	ldr	r3, [r3, #16]
 801a8b0:	4798      	blx	r3
 801a8b2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a8b4:	693a      	ldr	r2, [r7, #16]
 801a8b6:	697b      	ldr	r3, [r7, #20]
 801a8b8:	1ad3      	subs	r3, r2, r3
 801a8ba:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a8bc:	4b33      	ldr	r3, [pc, #204]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d037      	beq.n	801a934 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a8c4:	4b31      	ldr	r3, [pc, #196]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a8ca:	69fb      	ldr	r3, [r7, #28]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	68fa      	ldr	r2, [r7, #12]
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d206      	bcs.n	801a8e2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a8d4:	69fb      	ldr	r3, [r7, #28]
 801a8d6:	681a      	ldr	r2, [r3, #0]
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	1ad2      	subs	r2, r2, r3
 801a8dc:	69fb      	ldr	r3, [r7, #28]
 801a8de:	601a      	str	r2, [r3, #0]
 801a8e0:	e002      	b.n	801a8e8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a8e2:	69fb      	ldr	r3, [r7, #28]
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a8e8:	69fb      	ldr	r3, [r7, #28]
 801a8ea:	695b      	ldr	r3, [r3, #20]
 801a8ec:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a8ee:	69fb      	ldr	r3, [r7, #28]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d1ea      	bne.n	801a8ca <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a8f4:	e01e      	b.n	801a934 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a8f6:	4b25      	ldr	r3, [pc, #148]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a8fc:	4b23      	ldr	r3, [pc, #140]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	695b      	ldr	r3, [r3, #20]
 801a902:	4a22      	ldr	r2, [pc, #136]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a904:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a906:	69fb      	ldr	r3, [r7, #28]
 801a908:	2200      	movs	r2, #0
 801a90a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a90c:	69fb      	ldr	r3, [r7, #28]
 801a90e:	2200      	movs	r2, #0
 801a910:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a912:	69fb      	ldr	r3, [r7, #28]
 801a914:	68db      	ldr	r3, [r3, #12]
 801a916:	69fa      	ldr	r2, [r7, #28]
 801a918:	6912      	ldr	r2, [r2, #16]
 801a91a:	4610      	mov	r0, r2
 801a91c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a91e:	69fb      	ldr	r3, [r7, #28]
 801a920:	7adb      	ldrb	r3, [r3, #11]
 801a922:	2b01      	cmp	r3, #1
 801a924:	d106      	bne.n	801a934 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a926:	69fb      	ldr	r3, [r7, #28]
 801a928:	7a9b      	ldrb	r3, [r3, #10]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d102      	bne.n	801a934 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a92e:	69f8      	ldr	r0, [r7, #28]
 801a930:	f7ff fea6 	bl	801a680 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a934:	4b15      	ldr	r3, [pc, #84]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d00d      	beq.n	801a958 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a93c:	4b13      	ldr	r3, [pc, #76]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d0d7      	beq.n	801a8f6 <UTIL_TIMER_IRQ_Handler+0x66>
 801a946:	4b11      	ldr	r3, [pc, #68]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	681c      	ldr	r4, [r3, #0]
 801a94c:	4b0e      	ldr	r3, [pc, #56]	; (801a988 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a94e:	699b      	ldr	r3, [r3, #24]
 801a950:	4798      	blx	r3
 801a952:	4603      	mov	r3, r0
 801a954:	429c      	cmp	r4, r3
 801a956:	d3ce      	bcc.n	801a8f6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a958:	4b0c      	ldr	r3, [pc, #48]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d009      	beq.n	801a974 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a960:	4b0a      	ldr	r3, [pc, #40]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	7a1b      	ldrb	r3, [r3, #8]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d104      	bne.n	801a974 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a96a:	4b08      	ldr	r3, [pc, #32]	; (801a98c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	4618      	mov	r0, r3
 801a970:	f000 f858 	bl	801aa24 <TimerSetTimeout>
 801a974:	69bb      	ldr	r3, [r7, #24]
 801a976:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f383 8810 	msr	PRIMASK, r3
}
 801a97e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a980:	bf00      	nop
 801a982:	3724      	adds	r7, #36	; 0x24
 801a984:	46bd      	mov	sp, r7
 801a986:	bd90      	pop	{r4, r7, pc}
 801a988:	0801bb30 	.word	0x0801bb30
 801a98c:	2000108c 	.word	0x2000108c

0801a990 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b082      	sub	sp, #8
 801a994:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a996:	4b06      	ldr	r3, [pc, #24]	; (801a9b0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a998:	69db      	ldr	r3, [r3, #28]
 801a99a:	4798      	blx	r3
 801a99c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a99e:	4b04      	ldr	r3, [pc, #16]	; (801a9b0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9a2:	6878      	ldr	r0, [r7, #4]
 801a9a4:	4798      	blx	r3
 801a9a6:	4603      	mov	r3, r0
}
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	3708      	adds	r7, #8
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}
 801a9b0:	0801bb30 	.word	0x0801bb30

0801a9b4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b084      	sub	sp, #16
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a9bc:	4b0a      	ldr	r3, [pc, #40]	; (801a9e8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9be:	69db      	ldr	r3, [r3, #28]
 801a9c0:	4798      	blx	r3
 801a9c2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a9c4:	4b08      	ldr	r3, [pc, #32]	; (801a9e8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9c8:	6878      	ldr	r0, [r7, #4]
 801a9ca:	4798      	blx	r3
 801a9cc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a9ce:	4b06      	ldr	r3, [pc, #24]	; (801a9e8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9d2:	68f9      	ldr	r1, [r7, #12]
 801a9d4:	68ba      	ldr	r2, [r7, #8]
 801a9d6:	1a8a      	subs	r2, r1, r2
 801a9d8:	4610      	mov	r0, r2
 801a9da:	4798      	blx	r3
 801a9dc:	4603      	mov	r3, r0
}
 801a9de:	4618      	mov	r0, r3
 801a9e0:	3710      	adds	r7, #16
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	0801bb30 	.word	0x0801bb30

0801a9ec <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a9ec:	b480      	push	{r7}
 801a9ee:	b085      	sub	sp, #20
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a9f4:	4b0a      	ldr	r3, [pc, #40]	; (801aa20 <TimerExists+0x34>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a9fa:	e008      	b.n	801aa0e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a9fc:	68fa      	ldr	r2, [r7, #12]
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	429a      	cmp	r2, r3
 801aa02:	d101      	bne.n	801aa08 <TimerExists+0x1c>
    {
      return true;
 801aa04:	2301      	movs	r3, #1
 801aa06:	e006      	b.n	801aa16 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	695b      	ldr	r3, [r3, #20]
 801aa0c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d1f3      	bne.n	801a9fc <TimerExists+0x10>
  }
  return false;
 801aa14:	2300      	movs	r3, #0
}
 801aa16:	4618      	mov	r0, r3
 801aa18:	3714      	adds	r7, #20
 801aa1a:	46bd      	mov	sp, r7
 801aa1c:	bc80      	pop	{r7}
 801aa1e:	4770      	bx	lr
 801aa20:	2000108c 	.word	0x2000108c

0801aa24 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801aa24:	b590      	push	{r4, r7, lr}
 801aa26:	b085      	sub	sp, #20
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801aa2c:	4b11      	ldr	r3, [pc, #68]	; (801aa74 <TimerSetTimeout+0x50>)
 801aa2e:	6a1b      	ldr	r3, [r3, #32]
 801aa30:	4798      	blx	r3
 801aa32:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2201      	movs	r2, #1
 801aa38:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681c      	ldr	r4, [r3, #0]
 801aa3e:	4b0d      	ldr	r3, [pc, #52]	; (801aa74 <TimerSetTimeout+0x50>)
 801aa40:	699b      	ldr	r3, [r3, #24]
 801aa42:	4798      	blx	r3
 801aa44:	4602      	mov	r2, r0
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	4413      	add	r3, r2
 801aa4a:	429c      	cmp	r4, r3
 801aa4c:	d207      	bcs.n	801aa5e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801aa4e:	4b09      	ldr	r3, [pc, #36]	; (801aa74 <TimerSetTimeout+0x50>)
 801aa50:	699b      	ldr	r3, [r3, #24]
 801aa52:	4798      	blx	r3
 801aa54:	4602      	mov	r2, r0
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	441a      	add	r2, r3
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801aa5e:	4b05      	ldr	r3, [pc, #20]	; (801aa74 <TimerSetTimeout+0x50>)
 801aa60:	689b      	ldr	r3, [r3, #8]
 801aa62:	687a      	ldr	r2, [r7, #4]
 801aa64:	6812      	ldr	r2, [r2, #0]
 801aa66:	4610      	mov	r0, r2
 801aa68:	4798      	blx	r3
}
 801aa6a:	bf00      	nop
 801aa6c:	3714      	adds	r7, #20
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	bd90      	pop	{r4, r7, pc}
 801aa72:	bf00      	nop
 801aa74:	0801bb30 	.word	0x0801bb30

0801aa78 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801aa78:	b480      	push	{r7}
 801aa7a:	b085      	sub	sp, #20
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aa80:	4b14      	ldr	r3, [pc, #80]	; (801aad4 <TimerInsertTimer+0x5c>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801aa86:	4b13      	ldr	r3, [pc, #76]	; (801aad4 <TimerInsertTimer+0x5c>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	695b      	ldr	r3, [r3, #20]
 801aa8c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801aa8e:	e012      	b.n	801aab6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	681a      	ldr	r2, [r3, #0]
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d905      	bls.n	801aaa8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	695b      	ldr	r3, [r3, #20]
 801aaa4:	60bb      	str	r3, [r7, #8]
 801aaa6:	e006      	b.n	801aab6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	687a      	ldr	r2, [r7, #4]
 801aaac:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	68ba      	ldr	r2, [r7, #8]
 801aab2:	615a      	str	r2, [r3, #20]
        return;
 801aab4:	e009      	b.n	801aaca <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	695b      	ldr	r3, [r3, #20]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d1e8      	bne.n	801aa90 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	687a      	ldr	r2, [r7, #4]
 801aac2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	2200      	movs	r2, #0
 801aac8:	615a      	str	r2, [r3, #20]
}
 801aaca:	3714      	adds	r7, #20
 801aacc:	46bd      	mov	sp, r7
 801aace:	bc80      	pop	{r7}
 801aad0:	4770      	bx	lr
 801aad2:	bf00      	nop
 801aad4:	2000108c 	.word	0x2000108c

0801aad8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b084      	sub	sp, #16
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801aae0:	4b0b      	ldr	r3, [pc, #44]	; (801ab10 <TimerInsertNewHeadTimer+0x38>)
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d002      	beq.n	801aaf2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	68fa      	ldr	r2, [r7, #12]
 801aaf6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801aaf8:	4a05      	ldr	r2, [pc, #20]	; (801ab10 <TimerInsertNewHeadTimer+0x38>)
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801aafe:	4b04      	ldr	r3, [pc, #16]	; (801ab10 <TimerInsertNewHeadTimer+0x38>)
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7ff ff8e 	bl	801aa24 <TimerSetTimeout>
}
 801ab08:	bf00      	nop
 801ab0a:	3710      	adds	r7, #16
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}
 801ab10:	2000108c 	.word	0x2000108c

0801ab14 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ab18:	2218      	movs	r2, #24
 801ab1a:	2100      	movs	r1, #0
 801ab1c:	4807      	ldr	r0, [pc, #28]	; (801ab3c <UTIL_ADV_TRACE_Init+0x28>)
 801ab1e:	f7ff f80e 	bl	8019b3e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ab22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ab26:	2100      	movs	r1, #0
 801ab28:	4805      	ldr	r0, [pc, #20]	; (801ab40 <UTIL_ADV_TRACE_Init+0x2c>)
 801ab2a:	f7ff f808 	bl	8019b3e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ab2e:	4b05      	ldr	r3, [pc, #20]	; (801ab44 <UTIL_ADV_TRACE_Init+0x30>)
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	4805      	ldr	r0, [pc, #20]	; (801ab48 <UTIL_ADV_TRACE_Init+0x34>)
 801ab34:	4798      	blx	r3
 801ab36:	4603      	mov	r3, r0
}
 801ab38:	4618      	mov	r0, r3
 801ab3a:	bd80      	pop	{r7, pc}
 801ab3c:	20001090 	.word	0x20001090
 801ab40:	200010a8 	.word	0x200010a8
 801ab44:	0801bb70 	.word	0x0801bb70
 801ab48:	0801adb9 	.word	0x0801adb9

0801ab4c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ab50:	4b06      	ldr	r3, [pc, #24]	; (801ab6c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ab52:	8a5a      	ldrh	r2, [r3, #18]
 801ab54:	4b05      	ldr	r3, [pc, #20]	; (801ab6c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ab56:	8a1b      	ldrh	r3, [r3, #16]
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	d101      	bne.n	801ab60 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ab5c:	2301      	movs	r3, #1
 801ab5e:	e000      	b.n	801ab62 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ab60:	2300      	movs	r3, #0
}
 801ab62:	4618      	mov	r0, r3
 801ab64:	46bd      	mov	sp, r7
 801ab66:	bc80      	pop	{r7}
 801ab68:	4770      	bx	lr
 801ab6a:	bf00      	nop
 801ab6c:	20001090 	.word	0x20001090

0801ab70 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801ab70:	b408      	push	{r3}
 801ab72:	b580      	push	{r7, lr}
 801ab74:	b08d      	sub	sp, #52	; 0x34
 801ab76:	af00      	add	r7, sp, #0
 801ab78:	60f8      	str	r0, [r7, #12]
 801ab7a:	60b9      	str	r1, [r7, #8]
 801ab7c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ab7e:	2300      	movs	r3, #0
 801ab80:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ab82:	2300      	movs	r3, #0
 801ab84:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ab86:	4b38      	ldr	r3, [pc, #224]	; (801ac68 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab88:	7a1b      	ldrb	r3, [r3, #8]
 801ab8a:	461a      	mov	r2, r3
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	d902      	bls.n	801ab98 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ab92:	f06f 0304 	mvn.w	r3, #4
 801ab96:	e05f      	b.n	801ac58 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ab98:	4b33      	ldr	r3, [pc, #204]	; (801ac68 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ab9a:	68da      	ldr	r2, [r3, #12]
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	4013      	ands	r3, r2
 801aba0:	68ba      	ldr	r2, [r7, #8]
 801aba2:	429a      	cmp	r2, r3
 801aba4:	d002      	beq.n	801abac <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801aba6:	f06f 0305 	mvn.w	r3, #5
 801abaa:	e055      	b.n	801ac58 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801abac:	4b2e      	ldr	r3, [pc, #184]	; (801ac68 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801abae:	685b      	ldr	r3, [r3, #4]
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d00a      	beq.n	801abca <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d007      	beq.n	801abca <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801abba:	4b2b      	ldr	r3, [pc, #172]	; (801ac68 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801abbc:	685b      	ldr	r3, [r3, #4]
 801abbe:	f107 0116 	add.w	r1, r7, #22
 801abc2:	f107 0218 	add.w	r2, r7, #24
 801abc6:	4610      	mov	r0, r2
 801abc8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801abca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801abce:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801abd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801abd8:	4824      	ldr	r0, [pc, #144]	; (801ac6c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801abda:	f7ff fa3f 	bl	801a05c <tiny_vsnprintf_like>
 801abde:	4603      	mov	r3, r0
 801abe0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801abe2:	f000 f9f3 	bl	801afcc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801abe6:	8afa      	ldrh	r2, [r7, #22]
 801abe8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801abea:	4413      	add	r3, r2
 801abec:	b29b      	uxth	r3, r3
 801abee:	f107 0214 	add.w	r2, r7, #20
 801abf2:	4611      	mov	r1, r2
 801abf4:	4618      	mov	r0, r3
 801abf6:	f000 f96b 	bl	801aed0 <TRACE_AllocateBufer>
 801abfa:	4603      	mov	r3, r0
 801abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac00:	d026      	beq.n	801ac50 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ac02:	2300      	movs	r3, #0
 801ac04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ac06:	e00f      	b.n	801ac28 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ac08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ac0a:	8aba      	ldrh	r2, [r7, #20]
 801ac0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801ac10:	440b      	add	r3, r1
 801ac12:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ac16:	4b16      	ldr	r3, [pc, #88]	; (801ac70 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ac18:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ac1a:	8abb      	ldrh	r3, [r7, #20]
 801ac1c:	3301      	adds	r3, #1
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ac22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ac24:	3301      	adds	r3, #1
 801ac26:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ac28:	8afb      	ldrh	r3, [r7, #22]
 801ac2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ac2c:	429a      	cmp	r2, r3
 801ac2e:	d3eb      	bcc.n	801ac08 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ac30:	8abb      	ldrh	r3, [r7, #20]
 801ac32:	461a      	mov	r2, r3
 801ac34:	4b0e      	ldr	r3, [pc, #56]	; (801ac70 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801ac36:	18d0      	adds	r0, r2, r3
 801ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ac3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ac40:	f7ff fa0c 	bl	801a05c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ac44:	f000 f9e0 	bl	801b008 <TRACE_UnLock>

    return TRACE_Send();
 801ac48:	f000 f832 	bl	801acb0 <TRACE_Send>
 801ac4c:	4603      	mov	r3, r0
 801ac4e:	e003      	b.n	801ac58 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ac50:	f000 f9da 	bl	801b008 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ac54:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3734      	adds	r7, #52	; 0x34
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ac62:	b001      	add	sp, #4
 801ac64:	4770      	bx	lr
 801ac66:	bf00      	nop
 801ac68:	20001090 	.word	0x20001090
 801ac6c:	200014a8 	.word	0x200014a8
 801ac70:	200010a8 	.word	0x200010a8

0801ac74 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801ac74:	b480      	push	{r7}
 801ac76:	b083      	sub	sp, #12
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801ac7c:	4a03      	ldr	r2, [pc, #12]	; (801ac8c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	6053      	str	r3, [r2, #4]
}
 801ac82:	bf00      	nop
 801ac84:	370c      	adds	r7, #12
 801ac86:	46bd      	mov	sp, r7
 801ac88:	bc80      	pop	{r7}
 801ac8a:	4770      	bx	lr
 801ac8c:	20001090 	.word	0x20001090

0801ac90 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801ac90:	b480      	push	{r7}
 801ac92:	b083      	sub	sp, #12
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	4603      	mov	r3, r0
 801ac98:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801ac9a:	4a04      	ldr	r2, [pc, #16]	; (801acac <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801ac9c:	79fb      	ldrb	r3, [r7, #7]
 801ac9e:	7213      	strb	r3, [r2, #8]
}
 801aca0:	bf00      	nop
 801aca2:	370c      	adds	r7, #12
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bc80      	pop	{r7}
 801aca8:	4770      	bx	lr
 801acaa:	bf00      	nop
 801acac:	20001090 	.word	0x20001090

0801acb0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801acb0:	b580      	push	{r7, lr}
 801acb2:	b088      	sub	sp, #32
 801acb4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801acb6:	2300      	movs	r3, #0
 801acb8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801acba:	2300      	movs	r3, #0
 801acbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acbe:	f3ef 8310 	mrs	r3, PRIMASK
 801acc2:	613b      	str	r3, [r7, #16]
  return(result);
 801acc4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801acc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801acc8:	b672      	cpsid	i
}
 801acca:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801accc:	f000 f9ba 	bl	801b044 <TRACE_IsLocked>
 801acd0:	4603      	mov	r3, r0
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d15d      	bne.n	801ad92 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801acd6:	f000 f979 	bl	801afcc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801acda:	4b34      	ldr	r3, [pc, #208]	; (801adac <TRACE_Send+0xfc>)
 801acdc:	8a1a      	ldrh	r2, [r3, #16]
 801acde:	4b33      	ldr	r3, [pc, #204]	; (801adac <TRACE_Send+0xfc>)
 801ace0:	8a5b      	ldrh	r3, [r3, #18]
 801ace2:	429a      	cmp	r2, r3
 801ace4:	d04d      	beq.n	801ad82 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ace6:	4b31      	ldr	r3, [pc, #196]	; (801adac <TRACE_Send+0xfc>)
 801ace8:	789b      	ldrb	r3, [r3, #2]
 801acea:	2b01      	cmp	r3, #1
 801acec:	d117      	bne.n	801ad1e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801acee:	4b2f      	ldr	r3, [pc, #188]	; (801adac <TRACE_Send+0xfc>)
 801acf0:	881a      	ldrh	r2, [r3, #0]
 801acf2:	4b2e      	ldr	r3, [pc, #184]	; (801adac <TRACE_Send+0xfc>)
 801acf4:	8a1b      	ldrh	r3, [r3, #16]
 801acf6:	1ad3      	subs	r3, r2, r3
 801acf8:	b29a      	uxth	r2, r3
 801acfa:	4b2c      	ldr	r3, [pc, #176]	; (801adac <TRACE_Send+0xfc>)
 801acfc:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801acfe:	4b2b      	ldr	r3, [pc, #172]	; (801adac <TRACE_Send+0xfc>)
 801ad00:	2202      	movs	r2, #2
 801ad02:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ad04:	4b29      	ldr	r3, [pc, #164]	; (801adac <TRACE_Send+0xfc>)
 801ad06:	2200      	movs	r2, #0
 801ad08:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ad0a:	4b28      	ldr	r3, [pc, #160]	; (801adac <TRACE_Send+0xfc>)
 801ad0c:	8a9b      	ldrh	r3, [r3, #20]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d105      	bne.n	801ad1e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ad12:	4b26      	ldr	r3, [pc, #152]	; (801adac <TRACE_Send+0xfc>)
 801ad14:	2200      	movs	r2, #0
 801ad16:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ad18:	4b24      	ldr	r3, [pc, #144]	; (801adac <TRACE_Send+0xfc>)
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ad1e:	4b23      	ldr	r3, [pc, #140]	; (801adac <TRACE_Send+0xfc>)
 801ad20:	789b      	ldrb	r3, [r3, #2]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d115      	bne.n	801ad52 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ad26:	4b21      	ldr	r3, [pc, #132]	; (801adac <TRACE_Send+0xfc>)
 801ad28:	8a5a      	ldrh	r2, [r3, #18]
 801ad2a:	4b20      	ldr	r3, [pc, #128]	; (801adac <TRACE_Send+0xfc>)
 801ad2c:	8a1b      	ldrh	r3, [r3, #16]
 801ad2e:	429a      	cmp	r2, r3
 801ad30:	d908      	bls.n	801ad44 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ad32:	4b1e      	ldr	r3, [pc, #120]	; (801adac <TRACE_Send+0xfc>)
 801ad34:	8a5a      	ldrh	r2, [r3, #18]
 801ad36:	4b1d      	ldr	r3, [pc, #116]	; (801adac <TRACE_Send+0xfc>)
 801ad38:	8a1b      	ldrh	r3, [r3, #16]
 801ad3a:	1ad3      	subs	r3, r2, r3
 801ad3c:	b29a      	uxth	r2, r3
 801ad3e:	4b1b      	ldr	r3, [pc, #108]	; (801adac <TRACE_Send+0xfc>)
 801ad40:	829a      	strh	r2, [r3, #20]
 801ad42:	e006      	b.n	801ad52 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ad44:	4b19      	ldr	r3, [pc, #100]	; (801adac <TRACE_Send+0xfc>)
 801ad46:	8a1b      	ldrh	r3, [r3, #16]
 801ad48:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ad4c:	b29a      	uxth	r2, r3
 801ad4e:	4b17      	ldr	r3, [pc, #92]	; (801adac <TRACE_Send+0xfc>)
 801ad50:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ad52:	4b16      	ldr	r3, [pc, #88]	; (801adac <TRACE_Send+0xfc>)
 801ad54:	8a1b      	ldrh	r3, [r3, #16]
 801ad56:	461a      	mov	r2, r3
 801ad58:	4b15      	ldr	r3, [pc, #84]	; (801adb0 <TRACE_Send+0x100>)
 801ad5a:	4413      	add	r3, r2
 801ad5c:	61bb      	str	r3, [r7, #24]
 801ad5e:	697b      	ldr	r3, [r7, #20]
 801ad60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	f383 8810 	msr	PRIMASK, r3
}
 801ad68:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ad6a:	f7e7 f933 	bl	8001fd4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ad6e:	4b11      	ldr	r3, [pc, #68]	; (801adb4 <TRACE_Send+0x104>)
 801ad70:	68db      	ldr	r3, [r3, #12]
 801ad72:	4a0e      	ldr	r2, [pc, #56]	; (801adac <TRACE_Send+0xfc>)
 801ad74:	8a92      	ldrh	r2, [r2, #20]
 801ad76:	4611      	mov	r1, r2
 801ad78:	69b8      	ldr	r0, [r7, #24]
 801ad7a:	4798      	blx	r3
 801ad7c:	4603      	mov	r3, r0
 801ad7e:	77fb      	strb	r3, [r7, #31]
 801ad80:	e00d      	b.n	801ad9e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ad82:	f000 f941 	bl	801b008 <TRACE_UnLock>
 801ad86:	697b      	ldr	r3, [r7, #20]
 801ad88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	f383 8810 	msr	PRIMASK, r3
}
 801ad90:	e005      	b.n	801ad9e <TRACE_Send+0xee>
 801ad92:	697b      	ldr	r3, [r7, #20]
 801ad94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f383 8810 	msr	PRIMASK, r3
}
 801ad9c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801ad9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	3720      	adds	r7, #32
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}
 801adaa:	bf00      	nop
 801adac:	20001090 	.word	0x20001090
 801adb0:	200010a8 	.word	0x200010a8
 801adb4:	0801bb70 	.word	0x0801bb70

0801adb8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b088      	sub	sp, #32
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801adc0:	2300      	movs	r3, #0
 801adc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adc4:	f3ef 8310 	mrs	r3, PRIMASK
 801adc8:	617b      	str	r3, [r7, #20]
  return(result);
 801adca:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801adcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801adce:	b672      	cpsid	i
}
 801add0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801add2:	4b3c      	ldr	r3, [pc, #240]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801add4:	789b      	ldrb	r3, [r3, #2]
 801add6:	2b02      	cmp	r3, #2
 801add8:	d106      	bne.n	801ade8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801adda:	4b3a      	ldr	r3, [pc, #232]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801addc:	2200      	movs	r2, #0
 801adde:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ade0:	4b38      	ldr	r3, [pc, #224]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ade2:	2200      	movs	r2, #0
 801ade4:	821a      	strh	r2, [r3, #16]
 801ade6:	e00a      	b.n	801adfe <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ade8:	4b36      	ldr	r3, [pc, #216]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801adea:	8a1a      	ldrh	r2, [r3, #16]
 801adec:	4b35      	ldr	r3, [pc, #212]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801adee:	8a9b      	ldrh	r3, [r3, #20]
 801adf0:	4413      	add	r3, r2
 801adf2:	b29b      	uxth	r3, r3
 801adf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801adf8:	b29a      	uxth	r2, r3
 801adfa:	4b32      	ldr	r3, [pc, #200]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801adfc:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801adfe:	4b31      	ldr	r3, [pc, #196]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae00:	8a1a      	ldrh	r2, [r3, #16]
 801ae02:	4b30      	ldr	r3, [pc, #192]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae04:	8a5b      	ldrh	r3, [r3, #18]
 801ae06:	429a      	cmp	r2, r3
 801ae08:	d04d      	beq.n	801aea6 <TRACE_TxCpltCallback+0xee>
 801ae0a:	4b2e      	ldr	r3, [pc, #184]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae0c:	8adb      	ldrh	r3, [r3, #22]
 801ae0e:	2b01      	cmp	r3, #1
 801ae10:	d149      	bne.n	801aea6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ae12:	4b2c      	ldr	r3, [pc, #176]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae14:	789b      	ldrb	r3, [r3, #2]
 801ae16:	2b01      	cmp	r3, #1
 801ae18:	d117      	bne.n	801ae4a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ae1a:	4b2a      	ldr	r3, [pc, #168]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae1c:	881a      	ldrh	r2, [r3, #0]
 801ae1e:	4b29      	ldr	r3, [pc, #164]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae20:	8a1b      	ldrh	r3, [r3, #16]
 801ae22:	1ad3      	subs	r3, r2, r3
 801ae24:	b29a      	uxth	r2, r3
 801ae26:	4b27      	ldr	r3, [pc, #156]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae28:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ae2a:	4b26      	ldr	r3, [pc, #152]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae2c:	2202      	movs	r2, #2
 801ae2e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ae30:	4b24      	ldr	r3, [pc, #144]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae32:	2200      	movs	r2, #0
 801ae34:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ae36:	4b23      	ldr	r3, [pc, #140]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae38:	8a9b      	ldrh	r3, [r3, #20]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d105      	bne.n	801ae4a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ae3e:	4b21      	ldr	r3, [pc, #132]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae40:	2200      	movs	r2, #0
 801ae42:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ae44:	4b1f      	ldr	r3, [pc, #124]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae46:	2200      	movs	r2, #0
 801ae48:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ae4a:	4b1e      	ldr	r3, [pc, #120]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae4c:	789b      	ldrb	r3, [r3, #2]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d115      	bne.n	801ae7e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ae52:	4b1c      	ldr	r3, [pc, #112]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae54:	8a5a      	ldrh	r2, [r3, #18]
 801ae56:	4b1b      	ldr	r3, [pc, #108]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae58:	8a1b      	ldrh	r3, [r3, #16]
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d908      	bls.n	801ae70 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ae5e:	4b19      	ldr	r3, [pc, #100]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae60:	8a5a      	ldrh	r2, [r3, #18]
 801ae62:	4b18      	ldr	r3, [pc, #96]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae64:	8a1b      	ldrh	r3, [r3, #16]
 801ae66:	1ad3      	subs	r3, r2, r3
 801ae68:	b29a      	uxth	r2, r3
 801ae6a:	4b16      	ldr	r3, [pc, #88]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae6c:	829a      	strh	r2, [r3, #20]
 801ae6e:	e006      	b.n	801ae7e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ae70:	4b14      	ldr	r3, [pc, #80]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae72:	8a1b      	ldrh	r3, [r3, #16]
 801ae74:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ae78:	b29a      	uxth	r2, r3
 801ae7a:	4b12      	ldr	r3, [pc, #72]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae7c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ae7e:	4b11      	ldr	r3, [pc, #68]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae80:	8a1b      	ldrh	r3, [r3, #16]
 801ae82:	461a      	mov	r2, r3
 801ae84:	4b10      	ldr	r3, [pc, #64]	; (801aec8 <TRACE_TxCpltCallback+0x110>)
 801ae86:	4413      	add	r3, r2
 801ae88:	61fb      	str	r3, [r7, #28]
 801ae8a:	69bb      	ldr	r3, [r7, #24]
 801ae8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	f383 8810 	msr	PRIMASK, r3
}
 801ae94:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ae96:	4b0d      	ldr	r3, [pc, #52]	; (801aecc <TRACE_TxCpltCallback+0x114>)
 801ae98:	68db      	ldr	r3, [r3, #12]
 801ae9a:	4a0a      	ldr	r2, [pc, #40]	; (801aec4 <TRACE_TxCpltCallback+0x10c>)
 801ae9c:	8a92      	ldrh	r2, [r2, #20]
 801ae9e:	4611      	mov	r1, r2
 801aea0:	69f8      	ldr	r0, [r7, #28]
 801aea2:	4798      	blx	r3
 801aea4:	e00a      	b.n	801aebc <TRACE_TxCpltCallback+0x104>
 801aea6:	69bb      	ldr	r3, [r7, #24]
 801aea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f383 8810 	msr	PRIMASK, r3
}
 801aeb0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801aeb2:	f7e7 f897 	bl	8001fe4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801aeb6:	f000 f8a7 	bl	801b008 <TRACE_UnLock>
  }
}
 801aeba:	bf00      	nop
 801aebc:	bf00      	nop
 801aebe:	3720      	adds	r7, #32
 801aec0:	46bd      	mov	sp, r7
 801aec2:	bd80      	pop	{r7, pc}
 801aec4:	20001090 	.word	0x20001090
 801aec8:	200010a8 	.word	0x200010a8
 801aecc:	0801bb70 	.word	0x0801bb70

0801aed0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801aed0:	b480      	push	{r7}
 801aed2:	b087      	sub	sp, #28
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	4603      	mov	r3, r0
 801aed8:	6039      	str	r1, [r7, #0]
 801aeda:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801aedc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aee0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aee2:	f3ef 8310 	mrs	r3, PRIMASK
 801aee6:	60fb      	str	r3, [r7, #12]
  return(result);
 801aee8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aeea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aeec:	b672      	cpsid	i
}
 801aeee:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aef0:	4b35      	ldr	r3, [pc, #212]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801aef2:	8a5a      	ldrh	r2, [r3, #18]
 801aef4:	4b34      	ldr	r3, [pc, #208]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801aef6:	8a1b      	ldrh	r3, [r3, #16]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d11b      	bne.n	801af34 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aefc:	4b32      	ldr	r3, [pc, #200]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801aefe:	8a5b      	ldrh	r3, [r3, #18]
 801af00:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801af04:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801af06:	88fa      	ldrh	r2, [r7, #6]
 801af08:	8afb      	ldrh	r3, [r7, #22]
 801af0a:	429a      	cmp	r2, r3
 801af0c:	d33a      	bcc.n	801af84 <TRACE_AllocateBufer+0xb4>
 801af0e:	4b2e      	ldr	r3, [pc, #184]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af10:	8a1b      	ldrh	r3, [r3, #16]
 801af12:	88fa      	ldrh	r2, [r7, #6]
 801af14:	429a      	cmp	r2, r3
 801af16:	d235      	bcs.n	801af84 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801af18:	4b2b      	ldr	r3, [pc, #172]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af1a:	2201      	movs	r2, #1
 801af1c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801af1e:	4b2a      	ldr	r3, [pc, #168]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af20:	8a5a      	ldrh	r2, [r3, #18]
 801af22:	4b29      	ldr	r3, [pc, #164]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af24:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801af26:	4b28      	ldr	r3, [pc, #160]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af28:	8a1b      	ldrh	r3, [r3, #16]
 801af2a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801af2c:	4b26      	ldr	r3, [pc, #152]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af2e:	2200      	movs	r2, #0
 801af30:	825a      	strh	r2, [r3, #18]
 801af32:	e027      	b.n	801af84 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801af34:	4b24      	ldr	r3, [pc, #144]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af36:	8a5a      	ldrh	r2, [r3, #18]
 801af38:	4b23      	ldr	r3, [pc, #140]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af3a:	8a1b      	ldrh	r3, [r3, #16]
 801af3c:	429a      	cmp	r2, r3
 801af3e:	d91b      	bls.n	801af78 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801af40:	4b21      	ldr	r3, [pc, #132]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af42:	8a5b      	ldrh	r3, [r3, #18]
 801af44:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801af48:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801af4a:	88fa      	ldrh	r2, [r7, #6]
 801af4c:	8afb      	ldrh	r3, [r7, #22]
 801af4e:	429a      	cmp	r2, r3
 801af50:	d318      	bcc.n	801af84 <TRACE_AllocateBufer+0xb4>
 801af52:	4b1d      	ldr	r3, [pc, #116]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af54:	8a1b      	ldrh	r3, [r3, #16]
 801af56:	88fa      	ldrh	r2, [r7, #6]
 801af58:	429a      	cmp	r2, r3
 801af5a:	d213      	bcs.n	801af84 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801af5c:	4b1a      	ldr	r3, [pc, #104]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af5e:	2201      	movs	r2, #1
 801af60:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801af62:	4b19      	ldr	r3, [pc, #100]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af64:	8a5a      	ldrh	r2, [r3, #18]
 801af66:	4b18      	ldr	r3, [pc, #96]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af68:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801af6a:	4b17      	ldr	r3, [pc, #92]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af6c:	8a1b      	ldrh	r3, [r3, #16]
 801af6e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801af70:	4b15      	ldr	r3, [pc, #84]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af72:	2200      	movs	r2, #0
 801af74:	825a      	strh	r2, [r3, #18]
 801af76:	e005      	b.n	801af84 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801af78:	4b13      	ldr	r3, [pc, #76]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af7a:	8a1a      	ldrh	r2, [r3, #16]
 801af7c:	4b12      	ldr	r3, [pc, #72]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af7e:	8a5b      	ldrh	r3, [r3, #18]
 801af80:	1ad3      	subs	r3, r2, r3
 801af82:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801af84:	8afa      	ldrh	r2, [r7, #22]
 801af86:	88fb      	ldrh	r3, [r7, #6]
 801af88:	429a      	cmp	r2, r3
 801af8a:	d90f      	bls.n	801afac <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801af8c:	4b0e      	ldr	r3, [pc, #56]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af8e:	8a5a      	ldrh	r2, [r3, #18]
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801af94:	4b0c      	ldr	r3, [pc, #48]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801af96:	8a5a      	ldrh	r2, [r3, #18]
 801af98:	88fb      	ldrh	r3, [r7, #6]
 801af9a:	4413      	add	r3, r2
 801af9c:	b29b      	uxth	r3, r3
 801af9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	4b08      	ldr	r3, [pc, #32]	; (801afc8 <TRACE_AllocateBufer+0xf8>)
 801afa6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801afa8:	2300      	movs	r3, #0
 801afaa:	82bb      	strh	r3, [r7, #20]
 801afac:	693b      	ldr	r3, [r7, #16]
 801afae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	f383 8810 	msr	PRIMASK, r3
}
 801afb6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801afb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801afbc:	4618      	mov	r0, r3
 801afbe:	371c      	adds	r7, #28
 801afc0:	46bd      	mov	sp, r7
 801afc2:	bc80      	pop	{r7}
 801afc4:	4770      	bx	lr
 801afc6:	bf00      	nop
 801afc8:	20001090 	.word	0x20001090

0801afcc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801afcc:	b480      	push	{r7}
 801afce:	b085      	sub	sp, #20
 801afd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afd2:	f3ef 8310 	mrs	r3, PRIMASK
 801afd6:	607b      	str	r3, [r7, #4]
  return(result);
 801afd8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801afda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801afdc:	b672      	cpsid	i
}
 801afde:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801afe0:	4b08      	ldr	r3, [pc, #32]	; (801b004 <TRACE_Lock+0x38>)
 801afe2:	8adb      	ldrh	r3, [r3, #22]
 801afe4:	3301      	adds	r3, #1
 801afe6:	b29a      	uxth	r2, r3
 801afe8:	4b06      	ldr	r3, [pc, #24]	; (801b004 <TRACE_Lock+0x38>)
 801afea:	82da      	strh	r2, [r3, #22]
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	f383 8810 	msr	PRIMASK, r3
}
 801aff6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801aff8:	bf00      	nop
 801affa:	3714      	adds	r7, #20
 801affc:	46bd      	mov	sp, r7
 801affe:	bc80      	pop	{r7}
 801b000:	4770      	bx	lr
 801b002:	bf00      	nop
 801b004:	20001090 	.word	0x20001090

0801b008 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b008:	b480      	push	{r7}
 801b00a:	b085      	sub	sp, #20
 801b00c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b00e:	f3ef 8310 	mrs	r3, PRIMASK
 801b012:	607b      	str	r3, [r7, #4]
  return(result);
 801b014:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b016:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b018:	b672      	cpsid	i
}
 801b01a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b01c:	4b08      	ldr	r3, [pc, #32]	; (801b040 <TRACE_UnLock+0x38>)
 801b01e:	8adb      	ldrh	r3, [r3, #22]
 801b020:	3b01      	subs	r3, #1
 801b022:	b29a      	uxth	r2, r3
 801b024:	4b06      	ldr	r3, [pc, #24]	; (801b040 <TRACE_UnLock+0x38>)
 801b026:	82da      	strh	r2, [r3, #22]
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	f383 8810 	msr	PRIMASK, r3
}
 801b032:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b034:	bf00      	nop
 801b036:	3714      	adds	r7, #20
 801b038:	46bd      	mov	sp, r7
 801b03a:	bc80      	pop	{r7}
 801b03c:	4770      	bx	lr
 801b03e:	bf00      	nop
 801b040:	20001090 	.word	0x20001090

0801b044 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b044:	b480      	push	{r7}
 801b046:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b048:	4b05      	ldr	r3, [pc, #20]	; (801b060 <TRACE_IsLocked+0x1c>)
 801b04a:	8adb      	ldrh	r3, [r3, #22]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	bf14      	ite	ne
 801b050:	2301      	movne	r3, #1
 801b052:	2300      	moveq	r3, #0
 801b054:	b2db      	uxtb	r3, r3
}
 801b056:	4618      	mov	r0, r3
 801b058:	46bd      	mov	sp, r7
 801b05a:	bc80      	pop	{r7}
 801b05c:	4770      	bx	lr
 801b05e:	bf00      	nop
 801b060:	20001090 	.word	0x20001090

0801b064 <__libc_init_array>:
 801b064:	b570      	push	{r4, r5, r6, lr}
 801b066:	4d0d      	ldr	r5, [pc, #52]	; (801b09c <__libc_init_array+0x38>)
 801b068:	4c0d      	ldr	r4, [pc, #52]	; (801b0a0 <__libc_init_array+0x3c>)
 801b06a:	1b64      	subs	r4, r4, r5
 801b06c:	10a4      	asrs	r4, r4, #2
 801b06e:	2600      	movs	r6, #0
 801b070:	42a6      	cmp	r6, r4
 801b072:	d109      	bne.n	801b088 <__libc_init_array+0x24>
 801b074:	4d0b      	ldr	r5, [pc, #44]	; (801b0a4 <__libc_init_array+0x40>)
 801b076:	4c0c      	ldr	r4, [pc, #48]	; (801b0a8 <__libc_init_array+0x44>)
 801b078:	f000 f8a2 	bl	801b1c0 <_init>
 801b07c:	1b64      	subs	r4, r4, r5
 801b07e:	10a4      	asrs	r4, r4, #2
 801b080:	2600      	movs	r6, #0
 801b082:	42a6      	cmp	r6, r4
 801b084:	d105      	bne.n	801b092 <__libc_init_array+0x2e>
 801b086:	bd70      	pop	{r4, r5, r6, pc}
 801b088:	f855 3b04 	ldr.w	r3, [r5], #4
 801b08c:	4798      	blx	r3
 801b08e:	3601      	adds	r6, #1
 801b090:	e7ee      	b.n	801b070 <__libc_init_array+0xc>
 801b092:	f855 3b04 	ldr.w	r3, [r5], #4
 801b096:	4798      	blx	r3
 801b098:	3601      	adds	r6, #1
 801b09a:	e7f2      	b.n	801b082 <__libc_init_array+0x1e>
 801b09c:	0801c060 	.word	0x0801c060
 801b0a0:	0801c060 	.word	0x0801c060
 801b0a4:	0801c060 	.word	0x0801c060
 801b0a8:	0801c064 	.word	0x0801c064

0801b0ac <memset>:
 801b0ac:	4402      	add	r2, r0
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	4293      	cmp	r3, r2
 801b0b2:	d100      	bne.n	801b0b6 <memset+0xa>
 801b0b4:	4770      	bx	lr
 801b0b6:	f803 1b01 	strb.w	r1, [r3], #1
 801b0ba:	e7f9      	b.n	801b0b0 <memset+0x4>
 801b0bc:	0000      	movs	r0, r0
	...

0801b0c0 <floor>:
 801b0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b0c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b0cc:	2e13      	cmp	r6, #19
 801b0ce:	4602      	mov	r2, r0
 801b0d0:	460b      	mov	r3, r1
 801b0d2:	4607      	mov	r7, r0
 801b0d4:	460c      	mov	r4, r1
 801b0d6:	4605      	mov	r5, r0
 801b0d8:	dc34      	bgt.n	801b144 <floor+0x84>
 801b0da:	2e00      	cmp	r6, #0
 801b0dc:	da15      	bge.n	801b10a <floor+0x4a>
 801b0de:	a334      	add	r3, pc, #208	; (adr r3, 801b1b0 <floor+0xf0>)
 801b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e4:	f7e5 f856 	bl	8000194 <__adddf3>
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	f7e5 fa86 	bl	80005fc <__aeabi_dcmpgt>
 801b0f0:	b140      	cbz	r0, 801b104 <floor+0x44>
 801b0f2:	2c00      	cmp	r4, #0
 801b0f4:	da59      	bge.n	801b1aa <floor+0xea>
 801b0f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b0fa:	ea57 0503 	orrs.w	r5, r7, r3
 801b0fe:	d001      	beq.n	801b104 <floor+0x44>
 801b100:	4c2d      	ldr	r4, [pc, #180]	; (801b1b8 <floor+0xf8>)
 801b102:	2500      	movs	r5, #0
 801b104:	4623      	mov	r3, r4
 801b106:	462f      	mov	r7, r5
 801b108:	e025      	b.n	801b156 <floor+0x96>
 801b10a:	4a2c      	ldr	r2, [pc, #176]	; (801b1bc <floor+0xfc>)
 801b10c:	fa42 f806 	asr.w	r8, r2, r6
 801b110:	ea01 0208 	and.w	r2, r1, r8
 801b114:	4302      	orrs	r2, r0
 801b116:	d01e      	beq.n	801b156 <floor+0x96>
 801b118:	a325      	add	r3, pc, #148	; (adr r3, 801b1b0 <floor+0xf0>)
 801b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b11e:	f7e5 f839 	bl	8000194 <__adddf3>
 801b122:	2200      	movs	r2, #0
 801b124:	2300      	movs	r3, #0
 801b126:	f7e5 fa69 	bl	80005fc <__aeabi_dcmpgt>
 801b12a:	2800      	cmp	r0, #0
 801b12c:	d0ea      	beq.n	801b104 <floor+0x44>
 801b12e:	2c00      	cmp	r4, #0
 801b130:	bfbe      	ittt	lt
 801b132:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b136:	fa43 f606 	asrlt.w	r6, r3, r6
 801b13a:	19a4      	addlt	r4, r4, r6
 801b13c:	ea24 0408 	bic.w	r4, r4, r8
 801b140:	2500      	movs	r5, #0
 801b142:	e7df      	b.n	801b104 <floor+0x44>
 801b144:	2e33      	cmp	r6, #51	; 0x33
 801b146:	dd0a      	ble.n	801b15e <floor+0x9e>
 801b148:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b14c:	d103      	bne.n	801b156 <floor+0x96>
 801b14e:	f7e5 f821 	bl	8000194 <__adddf3>
 801b152:	4607      	mov	r7, r0
 801b154:	460b      	mov	r3, r1
 801b156:	4638      	mov	r0, r7
 801b158:	4619      	mov	r1, r3
 801b15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b15e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b162:	f04f 32ff 	mov.w	r2, #4294967295
 801b166:	fa22 f808 	lsr.w	r8, r2, r8
 801b16a:	ea18 0f00 	tst.w	r8, r0
 801b16e:	d0f2      	beq.n	801b156 <floor+0x96>
 801b170:	a30f      	add	r3, pc, #60	; (adr r3, 801b1b0 <floor+0xf0>)
 801b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b176:	f7e5 f80d 	bl	8000194 <__adddf3>
 801b17a:	2200      	movs	r2, #0
 801b17c:	2300      	movs	r3, #0
 801b17e:	f7e5 fa3d 	bl	80005fc <__aeabi_dcmpgt>
 801b182:	2800      	cmp	r0, #0
 801b184:	d0be      	beq.n	801b104 <floor+0x44>
 801b186:	2c00      	cmp	r4, #0
 801b188:	da02      	bge.n	801b190 <floor+0xd0>
 801b18a:	2e14      	cmp	r6, #20
 801b18c:	d103      	bne.n	801b196 <floor+0xd6>
 801b18e:	3401      	adds	r4, #1
 801b190:	ea25 0508 	bic.w	r5, r5, r8
 801b194:	e7b6      	b.n	801b104 <floor+0x44>
 801b196:	2301      	movs	r3, #1
 801b198:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b19c:	fa03 f606 	lsl.w	r6, r3, r6
 801b1a0:	4435      	add	r5, r6
 801b1a2:	42bd      	cmp	r5, r7
 801b1a4:	bf38      	it	cc
 801b1a6:	18e4      	addcc	r4, r4, r3
 801b1a8:	e7f2      	b.n	801b190 <floor+0xd0>
 801b1aa:	2500      	movs	r5, #0
 801b1ac:	462c      	mov	r4, r5
 801b1ae:	e7a9      	b.n	801b104 <floor+0x44>
 801b1b0:	8800759c 	.word	0x8800759c
 801b1b4:	7e37e43c 	.word	0x7e37e43c
 801b1b8:	bff00000 	.word	0xbff00000
 801b1bc:	000fffff 	.word	0x000fffff

0801b1c0 <_init>:
 801b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1c2:	bf00      	nop
 801b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1c6:	bc08      	pop	{r3}
 801b1c8:	469e      	mov	lr, r3
 801b1ca:	4770      	bx	lr

0801b1cc <_fini>:
 801b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ce:	bf00      	nop
 801b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1d2:	bc08      	pop	{r3}
 801b1d4:	469e      	mov	lr, r3
 801b1d6:	4770      	bx	lr
