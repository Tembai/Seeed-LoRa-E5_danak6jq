
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f48  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0801a080  0801a080  0002a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae44  0801ae44  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae44  0801ae44  0002ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae4c  0801ae4c  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae4c  0801ae4c  0002ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae50  0801ae50  0002ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801ae54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016cc  20000134  0801af88  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001800  0801af88  00031800  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000598f5  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a8a0  00000000  00000000  00089a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003028  00000000  00000000  000942f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c60  00000000  00000000  00097320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270d9  00000000  00000000  00099f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000385ee  00000000  00000000  000c1059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e82  00000000  00000000  000f9647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c24c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c550  00000000  00000000  001c251c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801a068 	.word	0x0801a068

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801a068 	.word	0x0801a068

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e96:	4013      	ands	r3, r2
 8000e98:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <MX_ADC_Init+0x98>)
 8000eac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_ADC_Init+0x94>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_ADC_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_ADC_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_ADC_Init+0x94>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f12:	2207      	movs	r2, #7
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_ADC_Init+0x94>)
 8000f26:	f001 fee7 	bl	8002cf8 <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f30:	f000 f9d4 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200015b0 	.word	0x200015b0
 8000f3c:	40012400 	.word	0x40012400

08000f40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_ADC_MspInit+0x24>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d103      	bne.n	8000f5a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f56:	f7ff ff7b 	bl	8000e50 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012400 	.word	0x40012400

08000f68 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <HAL_ADC_MspDeInit+0x24>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000f7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f7e:	f7ff ff7f 	bl	8000e80 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012400 	.word	0x40012400

08000f90 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <SYS_InitMeasurement+0x14>)
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <SYS_InitMeasurement+0x18>)
 8000f98:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200015b0 	.word	0x200015b0
 8000fa8:	40012400 	.word	0x40012400

08000fac <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000fba:	f000 f871 	bl	80010a0 <SYS_GetBatteryLevel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000fc2:	4830      	ldr	r0, [pc, #192]	; (8001084 <SYS_GetTemperatureLevel+0xd8>)
 8000fc4:	f000 f8a0 	bl	8001108 <ADC_ReadChannels>
 8000fc8:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <SYS_GetTemperatureLevel+0xdc>)
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d026      	beq.n	8001024 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <SYS_GetTemperatureLevel+0xdc>)
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d01c      	beq.n	800101c <SYS_GetTemperatureLevel+0x70>
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	fb02 f303 	mul.w	r3, r2, r3
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <SYS_GetTemperatureLevel+0xe4>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2264      	movs	r2, #100	; 0x64
 8000ffe:	fb02 f203 	mul.w	r2, r2, r3
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <SYS_GetTemperatureLevel+0xdc>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <SYS_GetTemperatureLevel+0xe0>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	331e      	adds	r3, #30
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21b      	sxth	r3, r3
 800101a:	e001      	b.n	8001020 <SYS_GetTemperatureLevel+0x74>
 800101c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001020:	81fb      	strh	r3, [r7, #14]
 8001022:	e01c      	b.n	800105e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	fb02 f203 	mul.w	r2, r2, r3
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <SYS_GetTemperatureLevel+0xe8>)
 800102e:	fba3 1302 	umull	r1, r3, r3, r2
 8001032:	1ad2      	subs	r2, r2, r3
 8001034:	0852      	lsrs	r2, r2, #1
 8001036:	4413      	add	r3, r2
 8001038:	0adb      	lsrs	r3, r3, #11
 800103a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001046:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <SYS_GetTemperatureLevel+0xec>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1292      	asrs	r2, r2, #10
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b29b      	uxth	r3, r3
 8001058:	331e      	adds	r3, #30
 800105a:	b29b      	uxth	r3, r3
 800105c:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 800105e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SYS_GetTemperatureLevel+0xf0>)
 8001066:	2201      	movs	r2, #1
 8001068:	2100      	movs	r1, #0
 800106a:	2001      	movs	r0, #1
 800106c:	f018 fcd6 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	b0001000 	.word	0xb0001000
 8001088:	1fff75c8 	.word	0x1fff75c8
 800108c:	1fff75a8 	.word	0x1fff75a8
 8001090:	09ee009f 	.word	0x09ee009f
 8001094:	00100101 	.word	0x00100101
 8001098:	68db8bad 	.word	0x68db8bad
 800109c:	0801a080 	.word	0x0801a080

080010a0 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010ae:	4813      	ldr	r0, [pc, #76]	; (80010fc <SYS_GetBatteryLevel+0x5c>)
 80010b0:	f000 f82a 	bl	8001108 <ADC_ReadChannels>
 80010b4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	e016      	b.n	80010f0 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <SYS_GetBatteryLevel+0x60>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00b      	beq.n	80010e6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <SYS_GetBatteryLevel+0x60>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010d8:	fb03 f202 	mul.w	r2, r3, r2
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	80fb      	strh	r3, [r7, #6]
 80010e4:	e004      	b.n	80010f0 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <SYS_GetBatteryLevel+0x64>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	b4002000 	.word	0xb4002000
 8001100:	1fff75aa 	.word	0x1fff75aa
 8001104:	004c08d8 	.word	0x004c08d8

08001108 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001120:	f7ff fec0 	bl	8000ea4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <ADC_ReadChannels+0x88>)
 8001126:	f002 fbcd 	bl	80038c4 <HAL_ADCEx_Calibration_Start>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001130:	f000 f8d4 	bl	80012dc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4619      	mov	r1, r3
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <ADC_ReadChannels+0x88>)
 8001148:	f002 f934 	bl	80033b4 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001152:	f000 f8c3 	bl	80012dc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <ADC_ReadChannels+0x88>)
 8001158:	f002 f810 	bl	800317c <HAL_ADC_Start>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001162:	f000 f8bb 	bl	80012dc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001166:	f04f 31ff 	mov.w	r1, #4294967295
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <ADC_ReadChannels+0x88>)
 800116c:	f002 f87e 	bl	800326c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <ADC_ReadChannels+0x88>)
 8001172:	f002 f849 	bl	8003208 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <ADC_ReadChannels+0x88>)
 8001178:	f002 f90f 	bl	800339a <HAL_ADC_GetValue>
 800117c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <ADC_ReadChannels+0x88>)
 8001180:	f001 ff80 	bl	8003084 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001184:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200015b0 	.word	0x200015b0

08001194 <LL_AHB1_GRP1_EnableClock>:
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b8:	68fb      	ldr	r3, [r7, #12]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff ffe3 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ce:	2001      	movs	r0, #1
 80011d0:	f7ff ffe0 	bl	8001194 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	200b      	movs	r0, #11
 80011da:	f002 fcc6 	bl	8003b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011de:	200b      	movs	r0, #11
 80011e0:	f002 fcdd 	bl	8003b9e <HAL_NVIC_EnableIRQ>

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f8:	f023 0218 	bic.w	r2, r3, #24
 80011fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4313      	orrs	r3, r2
 8001204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001216:	f001 fb87 	bl	8002928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121a:	f000 f805 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 800121e:	f008 f887 	bl	8009330 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001222:	f008 f88d 	bl	8009340 <MX_LoRaWAN_Process>
 8001226:	e7fc      	b.n	8001222 <main+0x10>

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09a      	sub	sp, #104	; 0x68
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2248      	movs	r2, #72	; 0x48
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f018 fe8e 	bl	8019f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800124e:	f003 fb4f 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001252:	2000      	movs	r0, #0
 8001254:	f7ff ffc8 	bl	80011e8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <SystemClock_Config+0xb0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <SystemClock_Config+0xb0>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <SystemClock_Config+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001274:	2324      	movs	r3, #36	; 0x24
 8001276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001278:	2381      	movs	r3, #129	; 0x81
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001284:	23b0      	movs	r3, #176	; 0xb0
 8001286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fe79 	bl	8004f88 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800129c:	f000 f81e 	bl	80012dc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012a0:	234f      	movs	r3, #79	; 0x4f
 80012a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	2102      	movs	r1, #2
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 f9fc 	bl	80056bc <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ca:	f000 f807 	bl	80012dc <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3768      	adds	r7, #104	; 0x68
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	58000400 	.word	0x58000400

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>

080012e6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <LL_APB1_GRP1_EnableClock>:
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4313      	orrs	r3, r2
 800131c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	222c      	movs	r2, #44	; 0x2c
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f018 fe07 	bl	8019f58 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_RTC_Init+0x9c>)
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <MX_RTC_Init+0xa0>)
 800134e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001352:	221f      	movs	r2, #31
 8001354:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_RTC_Init+0x9c>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_RTC_Init+0x9c>)
 800136a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001380:	f004 fe5c 	bl	800603c <HAL_RTC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800138a:	f7ff ffa7 	bl	80012dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_RTC_Init+0x9c>)
 8001390:	f005 f94a 	bl	8006628 <HAL_RTCEx_SetSSRU_IT>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800139a:	f7ff ff9f 	bl	80012dc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80013aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013ae:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80013b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_RTC_Init+0x9c>)
 80013be:	f004 feb7 	bl	8006130 <HAL_RTC_SetAlarm_IT>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80013c8:	f7ff ff88 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20001614 	.word	0x20001614
 80013d8:	40002800 	.word	0x40002800

080013dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b090      	sub	sp, #64	; 0x40
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	2238      	movs	r2, #56	; 0x38
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f018 fdb3 	bl	8019f58 <memset>
  if(rtcHandle->Instance==RTC)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a16      	ldr	r2, [pc, #88]	; (8001450 <HAL_RTC_MspInit+0x74>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d125      	bne.n	8001448 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001400:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fcfb 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001418:	f7ff ff60 	bl	80012dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141c:	f7ff ff63 	bl	80012e6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001424:	f7ff ff6f 	bl	8001306 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2002      	movs	r0, #2
 800142e:	f002 fb9c 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001432:	2002      	movs	r0, #2
 8001434:	f002 fbb3 	bl	8003b9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	202a      	movs	r0, #42	; 0x2a
 800143e:	f002 fb94 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001442:	202a      	movs	r0, #42	; 0x2a
 8001444:	f002 fbab 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	3740      	adds	r7, #64	; 0x40
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40002800 	.word	0x40002800

08001454 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800145a:	2201      	movs	r2, #1
 800145c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	58000400 	.word	0x58000400

0800146c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001488:	f001 fa6e 	bl	8002968 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800148c:	f7ff ffe2 	bl	8001454 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001490:	2001      	movs	r0, #1
 8001492:	f003 fabf 	bl	8004a14 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}

0800149a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800149e:	f001 fa71 	bl	8002984 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80014a2:	f000 ff8f 	bl	80023c4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}

080014aa <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80014ae:	f001 fa5b 	bl	8002968 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80014b2:	2101      	movs	r1, #1
 80014b4:	2000      	movs	r0, #0
 80014b6:	f003 fa29 	bl	800490c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 80014c2:	f001 fa5f 	bl	8002984 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014da:	e7fe      	b.n	80014da <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <HardFault_Handler+0x4>

080014e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <BusFault_Handler+0x4>

080014ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800152a:	f005 f8b9 	bl	80066a0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20001614 	.word	0x20001614

08001538 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Channel1_IRQHandler+0x10>)
 800153e:	f002 fdc5 	bl	80040cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20001658 	.word	0x20001658

0800154c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART1_IRQHandler+0x10>)
 8001552:	f005 ff05 	bl	8007360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200016b8 	.word	0x200016b8

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001564:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001568:	f003 f9aa 	bl	80048c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <RTC_Alarm_IRQHandler+0x10>)
 8001576:	f004 ff43 	bl	8006400 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20001614 	.word	0x20001614

08001584 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <SUBGHZ_Radio_IRQHandler+0x10>)
 800158a:	f005 fbf1 	bl	8006d70 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000164c 	.word	0x2000164c

08001598 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SUBGHZ_Init+0x20>)
 80015ce:	2208      	movs	r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_SUBGHZ_Init+0x20>)
 80015d4:	f005 f950 	bl	8006878 <HAL_SUBGHZ_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80015de:	f7ff fe7d 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000164c 	.word	0x2000164c

080015ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffcf 	bl	8001598 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2032      	movs	r0, #50	; 0x32
 8001600:	f002 fab3 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001604:	2032      	movs	r0, #50	; 0x32
 8001606:	f002 faca 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <LL_FLASH_GetUDN+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	1fff7580 	.word	0x1fff7580

0800164c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <LL_FLASH_GetDeviceID+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	1fff7584 	.word	0x1fff7584

08001664 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <LL_FLASH_GetSTCompanyID+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0a1b      	lsrs	r3, r3, #8
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	1fff7584 	.word	0x1fff7584

0800167c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ffc6 	bl	8001612 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001686:	f017 ff0b 	bl	80194a0 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 800168a:	f000 f997 	bl	80019bc <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 800168e:	f000 f9b7 	bl	8001a00 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001692:	f018 f995 	bl	80199c0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <SystemApp_Init+0x48>)
 8001698:	f018 fa42 	bl	8019b20 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800169c:	2002      	movs	r0, #2
 800169e:	f018 fa4d 	bl	8019b3c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80016a2:	f7ff fc75 	bl	8000f90 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80016a6:	f000 fa75 	bl	8001b94 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80016aa:	f017 f8d9 	bl	8018860 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80016ae:	2101      	movs	r1, #1
 80016b0:	2001      	movs	r0, #1
 80016b2:	f017 f915 	bl	80188e0 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80016b6:	2101      	movs	r1, #1
 80016b8:	2001      	movs	r0, #1
 80016ba:	f017 f8e1 	bl	8018880 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0800189d 	.word	0x0800189d

080016c8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80016cc:	f017 f938 	bl	8018940 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80016de:	f7ff fcdf 	bl	80010a0 <SYS_GetBatteryLevel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d902      	bls.n	80016f6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80016f0:	23fe      	movs	r3, #254	; 0xfe
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	e014      	b.n	8001720 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80016fc:	d202      	bcs.n	8001704 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e00d      	b.n	8001720 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800170a:	461a      	mov	r2, r3
 800170c:	4613      	mov	r3, r2
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	461a      	mov	r2, r3
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <GetBatteryLevel+0x68>)
 8001718:	fba3 2302 	umull	r2, r3, r3, r2
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <GetBatteryLevel+0x6c>)
 8001726:	2201      	movs	r2, #1
 8001728:	2100      	movs	r1, #0
 800172a:	2002      	movs	r0, #2
 800172c:	f018 f976 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001730:	79fb      	ldrb	r3, [r7, #7]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	1b4e81b5 	.word	0x1b4e81b5
 8001740:	0801a08c 	.word	0x0801a08c

08001744 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 800174e:	f7ff fc2d 	bl	8000fac <SYS_GetTemperatureLevel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	da00      	bge.n	800175a <GetTemperatureLevel+0x16>
 8001758:	33ff      	adds	r3, #255	; 0xff
 800175a:	121b      	asrs	r3, r3, #8
 800175c:	b21b      	sxth	r3, r3
 800175e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001760:	88fb      	ldrh	r3, [r7, #6]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800176a:	b590      	push	{r4, r7, lr}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001776:	f7ff ff5f 	bl	8001638 <LL_FLASH_GetUDN>
 800177a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001782:	d138      	bne.n	80017f6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001784:	f001 f90c 	bl	80029a0 <HAL_GetUIDw0>
 8001788:	4604      	mov	r4, r0
 800178a:	f001 f91d 	bl	80029c8 <HAL_GetUIDw2>
 800178e:	4603      	mov	r3, r0
 8001790:	4423      	add	r3, r4
 8001792:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001794:	f001 f90e 	bl	80029b4 <HAL_GetUIDw1>
 8001798:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	0e1a      	lsrs	r2, r3, #24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3307      	adds	r3, #7
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	0c1a      	lsrs	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3306      	adds	r3, #6
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	0a1a      	lsrs	r2, r3, #8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3305      	adds	r3, #5
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	0e1a      	lsrs	r2, r3, #24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3303      	adds	r3, #3
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	0c1a      	lsrs	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0a1a      	lsrs	r2, r3, #8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80017f4:	e031      	b.n	800185a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3307      	adds	r3, #7
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	0a1a      	lsrs	r2, r3, #8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3306      	adds	r3, #6
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	0c1a      	lsrs	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3305      	adds	r3, #5
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	0e1a      	lsrs	r2, r3, #24
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3304      	adds	r3, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001824:	f7ff ff12 	bl	800164c <LL_FLASH_GetDeviceID>
 8001828:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001834:	f7ff ff16 	bl	8001664 <LL_FLASH_GetSTCompanyID>
 8001838:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3302      	adds	r3, #2
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	0a1a      	lsrs	r2, r3, #8
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3301      	adds	r3, #1
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	b2da      	uxtb	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001862:	b590      	push	{r4, r7, lr}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 800186c:	f7ff fee4 	bl	8001638 <LL_FLASH_GetUDN>
 8001870:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d10b      	bne.n	8001892 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800187a:	f001 f891 	bl	80029a0 <HAL_GetUIDw0>
 800187e:	4604      	mov	r4, r0
 8001880:	f001 f898 	bl	80029b4 <HAL_GetUIDw1>
 8001884:	4603      	mov	r3, r0
 8001886:	405c      	eors	r4, r3
 8001888:	f001 f89e 	bl	80029c8 <HAL_GetUIDw2>
 800188c:	4603      	mov	r3, r0
 800188e:	4063      	eors	r3, r4
 8001890:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001892:	687b      	ldr	r3, [r7, #4]

}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	4618      	mov	r0, r3
 80018ac:	f017 f958 	bl	8018b60 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <TimestampNow+0x3c>)
 80018ba:	2110      	movs	r1, #16
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f81d 	bl	80018fc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7fe fc58 	bl	8000178 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0801a098 	.word	0x0801a098

080018dc <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80018e0:	2101      	movs	r1, #1
 80018e2:	2002      	movs	r0, #2
 80018e4:	f016 ffcc 	bl	8018880 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2002      	movs	r0, #2
 80018f4:	f016 ffc4 	bl	8018880 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80018fc:	b40c      	push	{r2, r3}
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f017 faf7 	bl	8018f08 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001924:	b002      	add	sp, #8
 8001926:	4770      	bx	lr

08001928 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001940:	f000 f9f0 	bl	8001d24 <TIMER_IF_GetTimerValue>
 8001944:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001946:	4618      	mov	r0, r3
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fa65 	bl	8001e24 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <LL_AHB2_GRP1_EnableClock>:
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
	...

08001994 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800199e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80019a2:	4905      	ldr	r1, [pc, #20]	; (80019b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	58000800 	.word	0x58000800

080019bc <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 f802 	bl	80019ca <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d106      	bne.n	80019ec <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 80019de:	f000 fffd 	bl	80029dc <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 80019e2:	f001 f807 	bl	80029f4 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 80019e6:	f001 f811 	bl	8002a0c <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 80019ea:	e005      	b.n	80019f8 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 80019ec:	f000 fffc 	bl	80029e8 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 80019f0:	f001 f806 	bl	8002a00 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 80019f4:	f001 f810 	bl	8002a18 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7ff ff9e 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001a26:	2002      	movs	r0, #2
 8001a28:	f7ff ff9b 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff ff98 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff ff95 	bl	8001962 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f002 fcde 	bl	8004404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	4619      	mov	r1, r3
 8001a52:	483a      	ldr	r0, [pc, #232]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a54:	f002 fcd6 	bl	8004404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4836      	ldr	r0, [pc, #216]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a62:	f002 fccf 	bl	8004404 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001a66:	2310      	movs	r3, #16
 8001a68:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4833      	ldr	r0, [pc, #204]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a70:	f002 fcc8 	bl	8004404 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2101      	movs	r1, #1
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7c:	f002 fef0 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a86:	482d      	ldr	r0, [pc, #180]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a88:	f002 feea 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2108      	movs	r1, #8
 8001a90:	482a      	ldr	r0, [pc, #168]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a92:	f002 fee5 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4828      	ldr	r0, [pc, #160]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001a9c:	f002 fee0 	bl	8004860 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8001aac:	23f0      	movs	r3, #240	; 0xf0
 8001aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001ab0:	230d      	movs	r3, #13
 8001ab2:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff ff54 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f002 fc9f 	bl	8004404 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8001ad4:	2306      	movs	r3, #6
 8001ad6:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff42 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f002 fc8d 	bl	8004404 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8001af2:	2304      	movs	r3, #4
 8001af4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001af6:	230d      	movs	r3, #13
 8001af8:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7ff ff31 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001b06:	f002 fc7d 	bl	8004404 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8001b12:	2310      	movs	r3, #16
 8001b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001b16:	230d      	movs	r3, #13
 8001b18:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7ff ff21 	bl	8001962 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <DBG_ProbesInit+0x13c>)
 8001b26:	f002 fc6d 	bl	8004404 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001b2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b2e:	f7ff ff31 	bl	8001994 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	48000400 	.word	0x48000400

08001b40 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <EnvSensors_Read+0x40>)
 8001b4a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <EnvSensors_Read+0x44>)
 8001b4e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <EnvSensors_Read+0x48>)
 8001b52:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <EnvSensors_Read+0x4c>)
 8001b6a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <EnvSensors_Read+0x50>)
 8001b70:	611a      	str	r2, [r3, #16]

  return 0;
 8001b72:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	42480000 	.word	0x42480000
 8001b84:	41900000 	.word	0x41900000
 8001b88:	447a0000 	.word	0x447a0000
 8001b8c:	003e090d 	.word	0x003e090d
 8001b90:	000503ab 	.word	0x000503ab

08001b94 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001b98:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <TIMER_IF_Init+0x5c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f083 0301 	eor.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01b      	beq.n	8001c14 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001bde:	f04f 32ff 	mov.w	r2, #4294967295
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001be4:	f7ff fba8 	bl	8001338 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001be8:	f000 f856 	bl	8001c98 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001bf2:	f004 fba9 	bl	8006348 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <TIMER_IF_Init+0x60>)
 8001c00:	f004 fce0 	bl	80065c4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f000 f9cf 	bl	8001fa8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001c0a:	f000 f85f 	bl	8001ccc <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <TIMER_IF_Init+0x5c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001c14:	79fb      	ldrb	r3, [r7, #7]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000150 	.word	0x20000150
 8001c24:	20001614 	.word	0x20001614

08001c28 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	222c      	movs	r2, #44	; 0x2c
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f018 f98a 	bl	8019f58 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001c44:	f000 f828 	bl	8001c98 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <TIMER_IF_StartTimer+0x68>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c60:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c64:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <TIMER_IF_StartTimer+0x6c>)
 8001c76:	f004 fa5b 	bl	8006130 <HAL_RTC_SetAlarm_IT>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001c80:	f7ff fb2c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3738      	adds	r7, #56	; 0x38
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000154 	.word	0x20000154
 8001c94:	20001614 	.word	0x20001614

08001c98 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <TIMER_IF_StopTimer+0x2c>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cac:	4806      	ldr	r0, [pc, #24]	; (8001cc8 <TIMER_IF_StopTimer+0x30>)
 8001cae:	f004 fb4b 	bl	8006348 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <TIMER_IF_StopTimer+0x30>)
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40002800 	.word	0x40002800
 8001cc8:	20001614 	.word	0x20001614

08001ccc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001cd0:	f000 f98a 	bl	8001fe8 <GetTimerTicks>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <TIMER_IF_SetTimerContext+0x18>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001cda:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <TIMER_IF_SetTimerContext+0x18>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000154 	.word	0x20000154

08001ce8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <TIMER_IF_GetTimerContext+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000154 	.word	0x20000154

08001cfc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001d06:	f000 f96f 	bl	8001fe8 <GetTimerTicks>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000154 	.word	0x20000154

08001d24 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <TIMER_IF_GetTimerValue+0x24>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001d36:	f000 f957 	bl	8001fe8 <GetTimerTicks>
 8001d3a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000150 	.word	0x20000150

08001d4c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001d56:	2303      	movs	r3, #3
 8001d58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001d5a:	687b      	ldr	r3, [r7, #4]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001d66:	b5b0      	push	{r4, r5, r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	0d95      	lsrs	r5, r2, #22
 8001d7c:	0294      	lsls	r4, r2, #10
 8001d7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fee7 	bl	8000b5c <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4613      	mov	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bdb0      	pop	{r4, r5, r7, pc}

08001da0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001da0:	b4b0      	push	{r4, r5, r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	f04f 0400 	mov.w	r4, #0
 8001dbc:	f04f 0500 	mov.w	r5, #0
 8001dc0:	015d      	lsls	r5, r3, #5
 8001dc2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001dc6:	0154      	lsls	r4, r2, #5
 8001dc8:	4622      	mov	r2, r4
 8001dca:	462b      	mov	r3, r5
 8001dcc:	1a12      	subs	r2, r2, r0
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	f04f 0400 	mov.w	r4, #0
 8001dd6:	f04f 0500 	mov.w	r5, #0
 8001dda:	009d      	lsls	r5, r3, #2
 8001ddc:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8001de0:	0094      	lsls	r4, r2, #2
 8001de2:	4622      	mov	r2, r4
 8001de4:	462b      	mov	r3, r5
 8001de6:	1812      	adds	r2, r2, r0
 8001de8:	eb41 0303 	adc.w	r3, r1, r3
 8001dec:	f04f 0000 	mov.w	r0, #0
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	00d9      	lsls	r1, r3, #3
 8001df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dfa:	00d0      	lsls	r0, r2, #3
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	0a82      	lsrs	r2, r0, #10
 8001e0e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001e12:	0a8b      	lsrs	r3, r1, #10
 8001e14:	4613      	mov	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001e18:	68fb      	ldr	r3, [r7, #12]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bcb0      	pop	{r4, r5, r7}
 8001e22:	4770      	bx	lr

08001e24 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff9a 	bl	8001d66 <TIMER_IF_Convert_ms2Tick>
 8001e32:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001e34:	f000 f8d8 	bl	8001fe8 <GetTimerTicks>
 8001e38:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e3a:	e000      	b.n	8001e3e <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001e3c:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e3e:	f000 f8d3 	bl	8001fe8 <GetTimerTicks>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d8f6      	bhi.n	8001e3c <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001e60:	f017 fc6c 	bl	801973c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001e74:	f000 f8a8 	bl	8001fc8 <TIMER_IF_BkUp_Read_MSBticks>
 8001e78:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f892 	bl	8001fa8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001e8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e90:	b088      	sub	sp, #32
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001e9a:	f000 f8a5 	bl	8001fe8 <GetTimerTicks>
 8001e9e:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001ea0:	f000 f892 	bl	8001fc8 <TIMER_IF_BkUp_Read_MSBticks>
 8001ea4:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	2200      	movs	r2, #0
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	eb12 0800 	adds.w	r8, r2, r0
 8001ec6:	eb43 0901 	adc.w	r9, r3, r1
 8001eca:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	0a82      	lsrs	r2, r0, #10
 8001edc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001ee0:	0a8b      	lsrs	r3, r1, #10
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	ea02 0400 	and.w	r4, r2, r0
 8001efa:	ea03 0501 	and.w	r5, r3, r1
 8001efe:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff4b 	bl	8001da0 <TIMER_IF_Convert_Tick2ms>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001f12:	69fb      	ldr	r3, [r7, #28]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001f20 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001f2e:	f004 fbdb 	bl	80066e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20001614 	.word	0x20001614

08001f40 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001f4e:	f004 fbcb 	bl	80066e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001614 	.word	0x20001614

08001f60 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4804      	ldr	r0, [pc, #16]	; (8001f80 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001f6e:	f004 fbd3 	bl	8006718 <HAL_RTCEx_BKUPRead>
 8001f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001f74:	687b      	ldr	r3, [r7, #4]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20001614 	.word	0x20001614

08001f84 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001f92:	f004 fbc1 	bl	8006718 <HAL_RTCEx_BKUPRead>
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20001614 	.word	0x20001614

08001fa8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001fb6:	f004 fb97 	bl	80066e8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20001614 	.word	0x20001614

08001fc8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001fd2:	f004 fba1 	bl	8006718 <HAL_RTCEx_BKUPRead>
 8001fd6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001fd8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20001614 	.word	0x20001614

08001fe8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <GetTimerTicks+0x14>)
 8001fee:	f7ff fdde 	bl	8001bae <LL_RTC_TIME_GetSubSecond>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40002800 	.word	0x40002800

08002000 <LL_AHB2_GRP1_EnableClock>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800200e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <LL_APB2_GRP1_EnableClock>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4313      	orrs	r3, r2
 8002046:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002054:	68fb      	ldr	r3, [r7, #12]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <LL_APB2_GRP1_DisableClock>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	43db      	mvns	r3, r3
 8002072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002076:	4013      	ands	r3, r2
 8002078:	660b      	str	r3, [r1, #96]	; 0x60
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <MX_USART1_UART_Init+0x90>)
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <MX_USART1_UART_Init+0x94>)
 800208c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <MX_USART1_UART_Init+0x90>)
 8002090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002094:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <MX_USART1_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MX_USART1_UART_Init+0x90>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ba:	4b16      	ldr	r3, [pc, #88]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020cc:	4811      	ldr	r0, [pc, #68]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020ce:	f005 f80e 	bl	80070ee <HAL_UART_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020d8:	f7ff f900 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020dc:	2100      	movs	r1, #0
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020e0:	f007 f83b 	bl	800915a <HAL_UARTEx_SetTxFifoThreshold>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020ea:	f7ff f8f7 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ee:	2100      	movs	r1, #0
 80020f0:	4808      	ldr	r0, [pc, #32]	; (8002114 <MX_USART1_UART_Init+0x90>)
 80020f2:	f007 f870 	bl	80091d6 <HAL_UARTEx_SetRxFifoThreshold>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f7ff f8ee 	bl	80012dc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_USART1_UART_Init+0x90>)
 8002102:	f006 ffef 	bl	80090e4 <HAL_UARTEx_EnableFifoMode>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800210c:	f7ff f8e6 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200016b8 	.word	0x200016b8
 8002118:	40013800 	.word	0x40013800

0800211c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b096      	sub	sp, #88	; 0x58
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2238      	movs	r2, #56	; 0x38
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f017 ff0b 	bl	8019f58 <memset>
  if(uartHandle->Instance==USART1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_UART_MspInit+0xe8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d156      	bne.n	80021fa <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800214c:	2301      	movs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002150:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002154:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fe54 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002166:	f7ff f8b9 	bl	80012dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800216a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800216e:	f7ff ff5f 	bl	8002030 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2002      	movs	r0, #2
 8002174:	f7ff ff44 	bl	8002000 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002188:	2307      	movs	r3, #7
 800218a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002190:	4619      	mov	r1, r3
 8002192:	481d      	ldr	r0, [pc, #116]	; (8002208 <HAL_UART_MspInit+0xec>)
 8002194:	f002 f936 	bl	8004404 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_UART_MspInit+0xf0>)
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_UART_MspInit+0xf4>)
 800219c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021a0:	2212      	movs	r2, #18
 80021a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021a6:	2210      	movs	r2, #16
 80021a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021ce:	480f      	ldr	r0, [pc, #60]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021d0:	f001 fd02 	bl	8003bd8 <HAL_DMA_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80021da:	f7ff f87f 	bl	80012dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021e2:	679a      	str	r2, [r3, #120]	; 0x78
 80021e4:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_UART_MspInit+0xf0>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2102      	movs	r1, #2
 80021ee:	2024      	movs	r0, #36	; 0x24
 80021f0:	f001 fcbb 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021f4:	2024      	movs	r0, #36	; 0x24
 80021f6:	f001 fcd2 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3758      	adds	r7, #88	; 0x58
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40013800 	.word	0x40013800
 8002208:	48000400 	.word	0x48000400
 800220c:	20001658 	.word	0x20001658
 8002210:	40020008 	.word	0x40020008

08002214 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_UART_MspDeInit+0x3c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10f      	bne.n	8002246 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002226:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800222a:	f7ff ff19 	bl	8002060 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800222e:	21c0      	movs	r1, #192	; 0xc0
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <HAL_UART_MspDeInit+0x40>)
 8002232:	f002 fa47 	bl	80046c4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800223a:	4618      	mov	r0, r3
 800223c:	f001 fd74 	bl	8003d28 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002240:	2024      	movs	r0, #36	; 0x24
 8002242:	f001 fcba 	bl	8003bba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40013800 	.word	0x40013800
 8002254:	48000400 	.word	0x48000400

08002258 <LL_APB2_GRP1_ForceReset>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <LL_APB2_GRP1_ReleaseReset>:
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	43db      	mvns	r3, r3
 800228c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002290:	4013      	ands	r3, r2
 8002292:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
	...

080022a0 <LL_EXTI_EnableIT_0_31>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80022aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022ae:	4905      	ldr	r1, [pc, #20]	; (80022c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	58000800 	.word	0x58000800

080022c8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <vcom_Init+0x28>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80022d6:	f7fe ff75 	bl	80011c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80022da:	f7ff fed3 	bl	8002084 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80022de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80022e2:	f7ff ffdd 	bl	80022a0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80022e6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000158 	.word	0x20000158

080022f4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80022f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022fc:	f7ff ffac 	bl	8002258 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002304:	f7ff ffb9 	bl	800227a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <vcom_DeInit+0x28>)
 800230a:	f7ff ff83 	bl	8002214 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800230e:	200f      	movs	r0, #15
 8002310:	f001 fc53 	bl	8003bba <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002314:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002316:	4618      	mov	r0, r3
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200016b8 	.word	0x200016b8

08002320 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	461a      	mov	r2, r3
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4804      	ldr	r0, [pc, #16]	; (8002344 <vcom_Trace_DMA+0x24>)
 8002334:	f004 ff82 	bl	800723c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002338:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200016b8 	.word	0x200016b8

08002348 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <vcom_ReceiveInit+0x70>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002356:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800235a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800235c:	f107 0308 	add.w	r3, r7, #8
 8002360:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002364:	4815      	ldr	r0, [pc, #84]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002366:	f006 fe30 	bl	8008fca <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800236a:	bf00      	nop
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <vcom_ReceiveInit+0x74>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d0f7      	beq.n	800236c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800237c:	bf00      	nop
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238c:	d1f7      	bne.n	800237e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b09      	ldr	r3, [pc, #36]	; (80023bc <vcom_ReceiveInit+0x74>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800239c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <vcom_ReceiveInit+0x74>)
 80023a0:	f006 fe6e 	bl	8009080 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80023a4:	2201      	movs	r2, #1
 80023a6:	4906      	ldr	r1, [pc, #24]	; (80023c0 <vcom_ReceiveInit+0x78>)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <vcom_ReceiveInit+0x74>)
 80023aa:	f004 fef1 	bl	8007190 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80023ae:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000015c 	.word	0x2000015c
 80023bc:	200016b8 	.word	0x200016b8
 80023c0:	20001748 	.word	0x20001748

080023c4 <vcom_Resume>:

void vcom_Resume(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c8:	4808      	ldr	r0, [pc, #32]	; (80023ec <vcom_Resume+0x28>)
 80023ca:	f004 fe90 	bl	80070ee <HAL_UART_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80023d4:	f7fe ff82 	bl	80012dc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <vcom_Resume+0x2c>)
 80023da:	f001 fbfd 	bl	8003bd8 <HAL_DMA_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80023e4:	f7fe ff7a 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200016b8 	.word	0x200016b8
 80023f0:	20001658 	.word	0x20001658

080023f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_UART_TxCpltCallback+0x18>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2000      	movs	r0, #0
 8002402:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000158 	.word	0x20000158

08002410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_UART_RxCpltCallback+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_UART_RxCpltCallback+0x26>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_UART_RxCpltCallback+0x38>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <HAL_UART_RxCpltCallback+0x3c>)
 8002434:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002436:	2201      	movs	r2, #1
 8002438:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_UART_RxCpltCallback+0x3c>)
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f004 fea8 	bl	8007190 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000015c 	.word	0x2000015c
 800244c:	20001748 	.word	0x20001748

08002450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002452:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002454:	f7ff fba5 	bl	8001ba2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <LoopForever+0x6>)
  ldr r1, =_edata
 800245a:	490d      	ldr	r1, [pc, #52]	; (8002490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <LoopForever+0xe>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002470:	4c0a      	ldr	r4, [pc, #40]	; (800249c <LoopForever+0x16>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800247e:	f017 fd47 	bl	8019f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002482:	f7fe fec6 	bl	8001212 <main>

08002486 <LoopForever>:

LoopForever:
    b LoopForever
 8002486:	e7fe      	b.n	8002486 <LoopForever>
  ldr   r0, =_estack
 8002488:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002494:	0801ae54 	.word	0x0801ae54
  ldr r2, =_sbss
 8002498:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 800249c:	20001800 	.word	0x20001800

080024a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>

080024a2 <LL_AHB2_GRP1_EnableClock>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <BSP_LED_Init+0x80>)
 80024f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	e024      	b.n	800254c <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002502:	2002      	movs	r0, #2
 8002504:	f7ff ffcd 	bl	80024a2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <BSP_LED_Init+0x80>)
 800250c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002510:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <BSP_LED_Init+0x84>)
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	f107 020c 	add.w	r2, r7, #12
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f001 ff69 	bl	8004404 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <BSP_LED_Init+0x84>)
 8002536:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a05      	ldr	r2, [pc, #20]	; (8002554 <BSP_LED_Init+0x80>)
 800253e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002542:	2200      	movs	r2, #0
 8002544:	4619      	mov	r1, r3
 8002546:	f002 f98b 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	0801a96c 	.word	0x0801a96c
 8002558:	20000004 	.word	0x20000004

0800255c <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a0c      	ldr	r2, [pc, #48]	; (800259c <BSP_LED_On+0x40>)
 800256a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002576:	2300      	movs	r3, #0
 8002578:	e00c      	b.n	8002594 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <BSP_LED_On+0x44>)
 800257e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4a05      	ldr	r2, [pc, #20]	; (800259c <BSP_LED_On+0x40>)
 8002586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800258a:	2200      	movs	r2, #0
 800258c:	4619      	mov	r1, r3
 800258e:	f002 f967 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	0801a96c 	.word	0x0801a96c
 80025a0:	20000004 	.word	0x20000004

080025a4 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <BSP_LED_Off+0x40>)
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	e00c      	b.n	80025dc <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <BSP_LED_Off+0x44>)
 80025c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <BSP_LED_Off+0x40>)
 80025ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4619      	mov	r1, r3
 80025d6:	f002 f943 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	0801a96c 	.word	0x0801a96c
 80025e8:	20000004 	.word	0x20000004

080025ec <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <BSP_LED_Toggle+0x40>)
 80025fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	e00c      	b.n	8002624 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	4a08      	ldr	r2, [pc, #32]	; (8002630 <BSP_LED_Toggle+0x44>)
 800260e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4905      	ldr	r1, [pc, #20]	; (800262c <BSP_LED_Toggle+0x40>)
 8002616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f002 f936 	bl	800488e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	0801a96c 	.word	0x0801a96c
 8002630:	20000004 	.word	0x20000004

08002634 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4a30      	ldr	r2, [pc, #192]	; (8002718 <BSP_PB_Init+0xe4>)
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002660:	2300      	movs	r3, #0
 8002662:	e055      	b.n	8002710 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <BSP_PB_Init+0x3c>
 800266a:	2002      	movs	r0, #2
 800266c:	f7ff ff19 	bl	80024a2 <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4a2a      	ldr	r2, [pc, #168]	; (800271c <BSP_PB_Init+0xe8>)
 8002674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002678:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4a24      	ldr	r2, [pc, #144]	; (8002720 <BSP_PB_Init+0xec>)
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	f107 020c 	add.w	r2, r7, #12
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f001 feb2 	bl	8004404 <HAL_GPIO_Init>
 80026a0:	e035      	b.n	800270e <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80026a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026a6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4a1d      	ldr	r2, [pc, #116]	; (8002720 <BSP_PB_Init+0xec>)
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	f107 020c 	add.w	r2, r7, #12
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 fea4 	bl	8004404 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <BSP_PB_Init+0xf0>)
 80026c2:	441a      	add	r2, r3
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4918      	ldr	r1, [pc, #96]	; (8002728 <BSP_PB_Init+0xf4>)
 80026c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f001 fe85 	bl	80043de <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <BSP_PB_Init+0xf0>)
 80026da:	1898      	adds	r0, r3, r2
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <BSP_PB_Init+0xe4>)
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	461a      	mov	r2, r3
 80026e6:	2100      	movs	r1, #0
 80026e8:	f001 fe60 	bl	80043ac <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <BSP_PB_Init+0xf8>)
 80026f0:	56d0      	ldrsb	r0, [r2, r3]
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <BSP_PB_Init+0xfc>)
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	f001 fa34 	bl	8003b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <BSP_PB_Init+0xf8>)
 8002706:	56d3      	ldrsb	r3, [r2, r3]
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fa48 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000001c 	.word	0x2000001c
 800271c:	0801a974 	.word	0x0801a974
 8002720:	20000010 	.word	0x20000010
 8002724:	2000174c 	.word	0x2000174c
 8002728:	0801a980 	.word	0x0801a980
 800272c:	0801a97c 	.word	0x0801a97c
 8002730:	20000028 	.word	0x20000028

08002734 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff fff1 	bl	8002734 <BSP_PB_Callback>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}

08002756 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b086      	sub	sp, #24
 800275a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
 8002768:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800276a:	2310      	movs	r3, #16
 800276c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	4619      	mov	r1, r3
 800277e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002782:	f001 fe3f 	bl	8004404 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002786:	2320      	movs	r3, #32
 8002788:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002792:	f001 fe37 	bl	8004404 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002796:	2200      	movs	r2, #0
 8002798:	2120      	movs	r1, #32
 800279a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279e:	f002 f85f 	bl	8004860 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80027a2:	2200      	movs	r2, #0
 80027a4:	2110      	movs	r1, #16
 80027a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027aa:	f002 f859 	bl	8004860 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d83f      	bhi.n	8002848 <BSP_RADIO_ConfigRFSwitch+0x90>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027fb 	.word	0x080027fb
 80027d8:	08002815 	.word	0x08002815
 80027dc:	0800282f 	.word	0x0800282f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2110      	movs	r1, #16
 80027e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e8:	f002 f83a 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2120      	movs	r1, #32
 80027f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f4:	f002 f834 	bl	8004860 <HAL_GPIO_WritePin>
      break;      
 80027f8:	e027      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80027fa:	2201      	movs	r2, #1
 80027fc:	2110      	movs	r1, #16
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f002 f82d 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002806:	2200      	movs	r2, #0
 8002808:	2120      	movs	r1, #32
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f002 f827 	bl	8004860 <HAL_GPIO_WritePin>
      break;
 8002812:	e01a      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002814:	2201      	movs	r2, #1
 8002816:	2110      	movs	r1, #16
 8002818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281c:	f002 f820 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002820:	2201      	movs	r2, #1
 8002822:	2120      	movs	r1, #32
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f002 f81a 	bl	8004860 <HAL_GPIO_WritePin>
      break;
 800282c:	e00d      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800282e:	2200      	movs	r2, #0
 8002830:	2110      	movs	r1, #16
 8002832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002836:	f002 f813 	bl	8004860 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800283a:	2201      	movs	r2, #1
 800283c:	2120      	movs	r1, #32
 800283e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002842:	f002 f80d 	bl	8004860 <HAL_GPIO_WritePin>
      break;
 8002846:	e000      	b.n	800284a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002848:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002858:	2302      	movs	r3, #2
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6053      	str	r3, [r2, #4]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	e0042000 	.word	0xe0042000

0800289c <LL_DBGMCU_DisableDBGSleepMode>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80028a0:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6053      	str	r3, [r2, #4]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	e0042000 	.word	0xe0042000

080028b8 <LL_DBGMCU_EnableDBGStopMode>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	6053      	str	r3, [r2, #4]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	e0042000 	.word	0xe0042000

080028d4 <LL_DBGMCU_DisableDBGStopMode>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80028de:	f023 0302 	bic.w	r3, r3, #2
 80028e2:	6053      	str	r3, [r2, #4]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	e0042000 	.word	0xe0042000

080028f0 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a03      	ldr	r2, [pc, #12]	; (8002908 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6053      	str	r3, [r2, #4]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e0042000 	.word	0xe0042000

0800290c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a03      	ldr	r2, [pc, #12]	; (8002924 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6053      	str	r3, [r2, #4]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	e0042000 	.word	0xe0042000

08002928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002932:	2003      	movs	r0, #3
 8002934:	f001 f90e 	bl	8003b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002938:	f003 f884 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 800293c:	4603      	mov	r3, r0
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_Init+0x3c>)
 8002940:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002942:	200f      	movs	r0, #15
 8002944:	f7fe fff0 	bl	8001928 <HAL_InitTick>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	e001      	b.n	8002958 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002954:	f7fe fdb9 	bl	80014ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002958:	79fb      	ldrb	r3, [r7, #7]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_SuspendTick+0x18>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a03      	ldr	r2, [pc, #12]	; (8002980 <HAL_SuspendTick+0x18>)
 8002972:	f023 0302 	bic.w	r3, r3, #2
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_ResumeTick+0x18>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <HAL_ResumeTick+0x18>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	6013      	str	r3, [r2, #0]
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <HAL_GetUIDw0+0x10>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	1fff7590 	.word	0x1fff7590

080029b4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_GetUIDw1+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	1fff7594 	.word	0x1fff7594

080029c8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_GetUIDw2+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	1fff7598 	.word	0x1fff7598

080029dc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80029e0:	f7ff ff4e 	bl	8002880 <LL_DBGMCU_EnableDBGSleepMode>
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80029ec:	f7ff ff56 	bl	800289c <LL_DBGMCU_DisableDBGSleepMode>
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80029f8:	f7ff ff5e 	bl	80028b8 <LL_DBGMCU_EnableDBGStopMode>
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a04:	f7ff ff66 	bl	80028d4 <LL_DBGMCU_DisableDBGStopMode>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002a10:	f7ff ff6e 	bl	80028f0 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a1c:	f7ff ff76 	bl	800290c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2107      	movs	r1, #7
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	210f      	movs	r1, #15
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 010f 	and.w	r1, r3, #15
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	0219      	lsls	r1, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	400b      	ands	r3, r1
 8002b6e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b96:	f023 0317 	bic.w	r3, r3, #23
 8002b9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bbc:	f023 0317 	bic.w	r3, r3, #23
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6093      	str	r3, [r2, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be2:	d101      	bne.n	8002be8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	f023 0317 	bic.w	r3, r3, #23
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2a:	f023 0317 	bic.w	r3, r3, #23
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_ADC_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_ADC_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_IsDisableOngoing+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_IsDisableOngoing+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c98:	f023 0317 	bic.w	r3, r3, #23
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cbe:	f023 0317 	bic.w	r3, r3, #23
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1ae      	b.n	8003078 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7fe f909 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff44 	bl	8002bce <LL_ADC_IsInternalRegulatorEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d115      	bne.n	8002d78 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff18 	bl	8002b86 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d56:	4b9b      	ldr	r3, [pc, #620]	; (8002fc4 <HAL_ADC_Init+0x2cc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	4a9a      	ldr	r2, [pc, #616]	; (8002fc8 <HAL_ADC_Init+0x2d0>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	3301      	adds	r3, #1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d6a:	e002      	b.n	8002d72 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f9      	bne.n	8002d6c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff26 	bl	8002bce <LL_ADC_IsInternalRegulatorEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f043 0210 	orr.w	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff93 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8002dae:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 8154 	bne.w	8003066 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 8150 	bne.w	8003066 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff30 	bl	8002c40 <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d14f      	bne.n	8002e86 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f023 0118 	bic.w	r1, r3, #24
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d111      	bne.n	8002e3e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e26:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002e2c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002e32:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_ADC_Init+0x2d4>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	6979      	ldr	r1, [r7, #20]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e5a:	d014      	beq.n	8002e86 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d00f      	beq.n	8002e86 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e6e:	d00a      	beq.n	8002e86 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_ADC_Init+0x2d8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e80:	4953      	ldr	r1, [pc, #332]	; (8002fd0 <HAL_ADC_Init+0x2d8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7e1b      	ldrb	r3, [r3, #24]
 8002e8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7e5b      	ldrb	r3, [r3, #25]
 8002e90:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e92:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7e9b      	ldrb	r3, [r3, #26]
 8002e98:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e9a:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_ADC_Init+0x1b2>
 8002ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_Init+0x1b4>
 8002eaa:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002eac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002eb2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da04      	bge.n	8002ec6 <HAL_ADC_Init+0x1ce>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	e001      	b.n	8002eca <HAL_ADC_Init+0x1d2>
 8002ec6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002eca:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ed2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ed4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d114      	bne.n	8002f10 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7e9b      	ldrb	r3, [r3, #26]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e00b      	b.n	8002f10 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f24:	4313      	orrs	r3, r2
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002f36:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	69b9      	ldr	r1, [r7, #24]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_ADC_Init+0x2dc>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	461a      	mov	r2, r3
 8002f62:	2100      	movs	r1, #0
 8002f64:	f7ff fd7d 	bl	8002a62 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	461a      	mov	r2, r3
 8002f72:	4919      	ldr	r1, [pc, #100]	; (8002fd8 <HAL_ADC_Init+0x2e0>)
 8002f74:	f7ff fd75 	bl	8002a62 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d108      	bne.n	8002f92 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f062 020f 	orn	r2, r2, #15
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e044      	b.n	800301c <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9a:	d13f      	bne.n	800301c <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e00c      	b.n	8002fbc <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d012      	beq.n	8002fdc <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b07      	cmp	r3, #7
 8002fc0:	d9ef      	bls.n	8002fa2 <HAL_ADC_Init+0x2aa>
 8002fc2:	e00c      	b.n	8002fde <HAL_ADC_Init+0x2e6>
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	053e2d63 	.word	0x053e2d63
 8002fcc:	1ffffc02 	.word	0x1ffffc02
 8002fd0:	40012708 	.word	0x40012708
 8002fd4:	dffffc02 	.word	0xdffffc02
 8002fd8:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002fdc:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f062 020f 	orn	r2, r2, #15
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff4:	e012      	b.n	800301c <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	3b01      	subs	r3, #1
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f003 031c 	and.w	r3, r3, #28
 8003008:	f06f 020f 	mvn.w	r2, #15
 800300c:	fa02 f103 	lsl.w	r1, r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_ADC_Init+0x388>)
 8003024:	4013      	ands	r3, r2
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	429a      	cmp	r2, r3
 800302a:	d10b      	bne.n	8003044 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003042:	e018      	b.n	8003076 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f023 0312 	bic.w	r3, r3, #18
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003064:	e007      	b.n	8003076 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003076:	7ffb      	ldrb	r3, [r7, #31]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	833fffe7 	.word	0x833fffe7

08003084 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06a      	b.n	800316c <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f043 0202 	orr.w	r2, r3, #2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fabe 	bl	8003624 <ADC_ConversionStop>
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fb82 	bl	80037bc <ADC_Disable>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd6d 	bl	8002bac <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f240 329f 	movw	r2, #927	; 0x39f
 80030ee:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68d9      	ldr	r1, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_ADC_DeInit+0xf0>)
 80030fc:	400b      	ands	r3, r1
 80030fe:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800310e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0207 	bic.w	r2, r2, #7
 800311e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800312e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_ADC_DeInit+0xf4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_ADC_DeInit+0xf4>)
 8003144:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003148:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd ff0c 	bl	8000f68 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	833e0200 	.word	0x833e0200
 8003178:	40012708 	.word	0x40012708

0800317c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fda3 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d132      	bne.n	80031fa <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Start+0x26>
 800319e:	2302      	movs	r3, #2
 80031a0:	e02e      	b.n	8003200 <HAL_ADC_Start+0x84>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa80 	bl	80036b0 <ADC_Enable>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11a      	bne.n	80031f0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	221c      	movs	r2, #28
 80031da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd4d 	bl	8002c88 <LL_ADC_REG_StartConversion>
 80031ee:	e006      	b.n	80031fe <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80031f8:	e001      	b.n	80031fe <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
 80031fc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_ADC_Stop+0x16>
 800321a:	2302      	movs	r3, #2
 800321c:	e022      	b.n	8003264 <HAL_ADC_Stop+0x5c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9fc 	bl	8003624 <ADC_ConversionStop>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d111      	bne.n	800325a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fac0 	bl	80037bc <ADC_Disable>
 800323c:	4603      	mov	r3, r0
 800323e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b08      	cmp	r3, #8
 800327c:	d102      	bne.n	8003284 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800327e:	2308      	movs	r3, #8
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e010      	b.n	80032a6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e077      	b.n	8003392 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032a2:	2304      	movs	r3, #4
 80032a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032a6:	f7fe fb49 	bl	800193c <HAL_GetTick>
 80032aa:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032ac:	e021      	b.n	80032f2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d01d      	beq.n	80032f2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032b6:	f7fe fb41 	bl	800193c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <HAL_ADC_PollForConversion+0x60>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d112      	bne.n	80032f2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f043 0204 	orr.w	r2, r3, #4
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04f      	b.n	8003392 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0d6      	beq.n	80032ae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fbc4 	bl	8002a9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d031      	beq.n	8003380 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7e9b      	ldrb	r3, [r3, #26]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d12d      	bne.n	8003380 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b08      	cmp	r3, #8
 8003330:	d126      	bne.n	8003380 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fccc 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d112      	bne.n	8003368 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 020c 	bic.w	r2, r2, #12
 8003350:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	659a      	str	r2, [r3, #88]	; 0x58
 8003366:	e00b      	b.n	8003380 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	220c      	movs	r2, #12
 800338e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x28>
 80033d8:	2302      	movs	r3, #2
 80033da:	e110      	b.n	80035fe <HAL_ADC_ConfigChannel+0x24a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fc73 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 80f7 	bne.w	80035e4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f000 80b1 	beq.w	8003562 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003408:	d004      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800340e:	4a7e      	ldr	r2, [pc, #504]	; (8003608 <HAL_ADC_ConfigChannel+0x254>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f7ff fb70 	bl	8002b04 <LL_ADC_REG_SetSequencerChAdd>
 8003424:	e041      	b.n	80034aa <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	210f      	movs	r1, #15
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_ADC_ConfigChannel+0xa0>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	e011      	b.n	8003478 <HAL_ADC_ConfigChannel+0xc4>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	6849      	ldr	r1, [r1, #4]
 800347c:	f001 011f 	and.w	r1, r1, #31
 8003480:	408b      	lsls	r3, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	429a      	cmp	r2, r3
 8003496:	d808      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f7ff fb0c 	bl	8002ac2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7ff fb49 	bl	8002b4e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f280 8097 	bge.w	80035f4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034c6:	4851      	ldr	r0, [pc, #324]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80034c8:	f7ff fabe 	bl	8002a48 <LL_ADC_GetCommonPathInternalCh>
 80034cc:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_ADC_ConfigChannel+0x25c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d120      	bne.n	800351a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11b      	bne.n	800351a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034e8:	4619      	mov	r1, r3
 80034ea:	4848      	ldr	r0, [pc, #288]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80034ec:	f7ff fa9a 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f0:	4b48      	ldr	r3, [pc, #288]	; (8003614 <HAL_ADC_ConfigChannel+0x260>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_ADC_ConfigChannel+0x264>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	4613      	mov	r3, r2
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800350a:	e002      	b.n	8003512 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3b01      	subs	r3, #1
 8003510:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f9      	bne.n	800350c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003518:	e06c      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3f      	ldr	r2, [pc, #252]	; (800361c <HAL_ADC_ConfigChannel+0x268>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d10c      	bne.n	800353e <HAL_ADC_ConfigChannel+0x18a>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003534:	4619      	mov	r1, r3
 8003536:	4835      	ldr	r0, [pc, #212]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 8003538:	f7ff fa74 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 800353c:	e05a      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a37      	ldr	r2, [pc, #220]	; (8003620 <HAL_ADC_ConfigChannel+0x26c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d155      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	d150      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003558:	4619      	mov	r1, r3
 800355a:	482c      	ldr	r0, [pc, #176]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 800355c:	f7ff fa62 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 8003560:	e048      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356a:	d004      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_ADC_ConfigChannel+0x254>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d107      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f7ff fad1 	bl	8002b28 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	da32      	bge.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800358e:	481f      	ldr	r0, [pc, #124]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 8003590:	f7ff fa5a 	bl	8002a48 <LL_ADC_GetCommonPathInternalCh>
 8003594:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_ADC_ConfigChannel+0x25c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d107      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035a6:	4619      	mov	r1, r3
 80035a8:	4818      	ldr	r0, [pc, #96]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035aa:	f7ff fa3b 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 80035ae:	e021      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_ADC_ConfigChannel+0x268>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d107      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c0:	4619      	mov	r1, r3
 80035c2:	4812      	ldr	r0, [pc, #72]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035c4:	f7ff fa2e 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 80035c8:	e014      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_ADC_ConfigChannel+0x26c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10f      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035da:	4619      	mov	r1, r3
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <HAL_ADC_ConfigChannel+0x258>)
 80035de:	f7ff fa21 	bl	8002a24 <LL_ADC_SetCommonPathInternalCh>
 80035e2:	e007      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80035fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	80000004 	.word	0x80000004
 800360c:	40012708 	.word	0x40012708
 8003610:	b0001000 	.word	0xb0001000
 8003614:	20000000 	.word	0x20000000
 8003618:	053e2d63 	.word	0x053e2d63
 800361c:	b8004000 	.word	0xb8004000
 8003620:	b4002000 	.word	0xb4002000

08003624 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fb4f 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d033      	beq.n	80036a4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fb0f 	bl	8002c64 <LL_ADC_IsDisableOngoing>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fb2c 	bl	8002cae <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003656:	f7fe f971 	bl	800193c <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800365c:	e01b      	b.n	8003696 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800365e:	f7fe f96d 	bl	800193c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d914      	bls.n	8003696 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00d      	beq.n	8003696 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e007      	b.n	80036a6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1dc      	bne.n	800365e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fabd 	bl	8002c40 <LL_ADC_IsEnabled>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d169      	bne.n	80037a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <ADC_Enable+0xfc>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f043 0210 	orr.w	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f043 0201 	orr.w	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e055      	b.n	80037a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fa7a 	bl	8002bf4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003700:	482b      	ldr	r0, [pc, #172]	; (80037b0 <ADC_Enable+0x100>)
 8003702:	f7ff f9a1 	bl	8002a48 <LL_ADC_GetCommonPathInternalCh>
 8003706:	4603      	mov	r3, r0
 8003708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00f      	beq.n	8003730 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <ADC_Enable+0x104>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	4a28      	ldr	r2, [pc, #160]	; (80037b8 <ADC_Enable+0x108>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003722:	e002      	b.n	800372a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e5b      	ldrb	r3, [r3, #25]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d033      	beq.n	80037a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003738:	f7fe f900 	bl	800193c <HAL_GetTick>
 800373c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800373e:	e028      	b.n	8003792 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fa7b 	bl	8002c40 <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fa4d 	bl	8002bf4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800375a:	f7fe f8ef 	bl	800193c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d914      	bls.n	8003792 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d00d      	beq.n	8003792 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f043 0210 	orr.w	r2, r3, #16
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e007      	b.n	80037a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d1cf      	bne.n	8003740 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	80000017 	.word	0x80000017
 80037b0:	40012708 	.word	0x40012708
 80037b4:	20000000 	.word	0x20000000
 80037b8:	053e2d63 	.word	0x053e2d63

080037bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fa4b 	bl	8002c64 <LL_ADC_IsDisableOngoing>
 80037ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fa33 	bl	8002c40 <LL_ADC_IsEnabled>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d047      	beq.n	8003870 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d144      	bne.n	8003870 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0305 	and.w	r3, r3, #5
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10c      	bne.n	800380e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fa0e 	bl	8002c1a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2203      	movs	r2, #3
 8003804:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003806:	f7fe f899 	bl	800193c <HAL_GetTick>
 800380a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800380c:	e029      	b.n	8003862 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	f043 0210 	orr.w	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e023      	b.n	8003872 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800382a:	f7fe f887 	bl	800193c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d914      	bls.n	8003862 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e007      	b.n	8003872 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1dc      	bne.n	800382a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <LL_ADC_IsEnabled>:
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <LL_ADC_IsEnabled+0x18>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <LL_ADC_IsEnabled+0x1a>
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <LL_ADC_IsCalibrationOnGoing>:
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b2:	d101      	bne.n	80038b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADCEx_Calibration_Start+0x1a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e068      	b.n	80039b0 <HAL_ADCEx_Calibration_Start+0xec>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff68 	bl	80037bc <ADC_Disable>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ffc0 	bl	800387a <LL_ADC_IsEnabled>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d14c      	bne.n	800399a <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003908:	f043 0202 	orr.w	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0203 	bic.w	r2, r2, #3
 800392a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800393a:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800393c:	e014      	b.n	8003968 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800394a:	d30d      	bcc.n	8003968 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f023 0312 	bic.w	r3, r3, #18
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e023      	b.n	80039b0 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff96 	bl	800389e <LL_ADC_IsCalibrationOnGoing>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e2      	bne.n	800393e <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f023 0303 	bic.w	r3, r3, #3
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	659a      	str	r2, [r3, #88]	; 0x58
 8003998:	e005      	b.n	80039a6 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <__NVIC_SetPriorityGrouping+0x44>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d4:	4013      	ands	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ea:	4a04      	ldr	r2, [pc, #16]	; (80039fc <__NVIC_SetPriorityGrouping+0x44>)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	60d3      	str	r3, [r2, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <__NVIC_GetPriorityGrouping+0x18>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	f003 0307 	and.w	r3, r3, #7
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	db0b      	blt.n	8003a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	4906      	ldr	r1, [pc, #24]	; (8003a50 <__NVIC_EnableIRQ+0x34>)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db12      	blt.n	8003a8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	490a      	ldr	r1, [pc, #40]	; (8003a98 <__NVIC_DisableIRQ+0x44>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2001      	movs	r0, #1
 8003a76:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7a:	3320      	adds	r3, #32
 8003a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a80:	f3bf 8f4f 	dsb	sy
}
 8003a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a86:	f3bf 8f6f 	isb	sy
}
 8003a8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	e000e100 	.word	0xe000e100

08003a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	db0a      	blt.n	8003ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	490c      	ldr	r1, [pc, #48]	; (8003ae8 <__NVIC_SetPriority+0x4c>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ac4:	e00a      	b.n	8003adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <__NVIC_SetPriority+0x50>)
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	0112      	lsls	r2, r2, #4
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	440b      	add	r3, r1
 8003ada:	761a      	strb	r2, [r3, #24]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e100 	.word	0xe000e100
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f1c3 0307 	rsb	r3, r3, #7
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	bf28      	it	cs
 8003b0e:	2304      	movcs	r3, #4
 8003b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d902      	bls.n	8003b20 <NVIC_EncodePriority+0x30>
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3b03      	subs	r3, #3
 8003b1e:	e000      	b.n	8003b22 <NVIC_EncodePriority+0x32>
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	f04f 32ff 	mov.w	r2, #4294967295
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	401a      	ands	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	4313      	orrs	r3, r2
         );
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff ff2b 	bl	80039b8 <__NVIC_SetPriorityGrouping>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b78:	f7ff ff42 	bl	8003a00 <__NVIC_GetPriorityGrouping>
 8003b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ffb4 	bl	8003af0 <NVIC_EncodePriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff83 	bl	8003a9c <__NVIC_SetPriority>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff35 	bl	8003a1c <__NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff43 	bl	8003a54 <__NVIC_DisableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e08e      	b.n	8003d08 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_DMA_Init+0x138>)
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d80f      	bhi.n	8003c16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b45      	ldr	r3, [pc, #276]	; (8003d14 <HAL_DMA_Init+0x13c>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a45      	ldr	r2, [pc, #276]	; (8003d18 <HAL_DMA_Init+0x140>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	009a      	lsls	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a42      	ldr	r2, [pc, #264]	; (8003d1c <HAL_DMA_Init+0x144>)
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
 8003c14:	e00e      	b.n	8003c34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <HAL_DMA_Init+0x148>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <HAL_DMA_Init+0x140>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a3c      	ldr	r2, [pc, #240]	; (8003d24 <HAL_DMA_Init+0x14c>)
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fb24 	bl	80042d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c94:	d102      	bne.n	8003c9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cb2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_DMA_Init+0x106>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d80c      	bhi.n	8003cde <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb4d 	bl	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	e008      	b.n	8003cf0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40020407 	.word	0x40020407
 8003d14:	bffdfff8 	.word	0xbffdfff8
 8003d18:	cccccccd 	.word	0xcccccccd
 8003d1c:	40020000 	.word	0x40020000
 8003d20:	bffdfbf8 	.word	0xbffdfbf8
 8003d24:	40020400 	.word	0x40020400

08003d28 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07b      	b.n	8003e32 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_DMA_DeInit+0x114>)
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d80f      	bhi.n	8003d76 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <HAL_DMA_DeInit+0x118>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_DMA_DeInit+0x11c>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	009a      	lsls	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <HAL_DMA_DeInit+0x120>)
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
 8003d74:	e00e      	b.n	8003d94 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_DMA_DeInit+0x124>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a30      	ldr	r2, [pc, #192]	; (8003e44 <HAL_DMA_DeInit+0x11c>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <HAL_DMA_DeInit+0x128>)
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f003 021c 	and.w	r2, r3, #28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dae:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa8f 	bl	80042d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00f      	beq.n	8003df0 <HAL_DMA_DeInit+0xc8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d80b      	bhi.n	8003df0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fac3 	bl	8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dee:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40020407 	.word	0x40020407
 8003e40:	bffdfff8 	.word	0xbffdfff8
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	bffdfbf8 	.word	0xbffdfbf8
 8003e50:	40020400 	.word	0x40020400

08003e54 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_DMA_Start_IT+0x20>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e069      	b.n	8003f48 <HAL_DMA_Start_IT+0xf4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d155      	bne.n	8003f34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f9d3 	bl	8004258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 020e 	orr.w	r2, r2, #14
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e00f      	b.n	8003eec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0204 	bic.w	r2, r2, #4
 8003eda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 020a 	orr.w	r2, r2, #10
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e008      	b.n	8003f46 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e04f      	b.n	8004002 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d008      	beq.n	8003f80 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2204      	movs	r2, #4
 8003f72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e040      	b.n	8004002 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 020e 	bic.w	r2, r2, #14
 8003f8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f003 021c 	and.w	r2, r3, #28
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fcc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d005      	beq.n	8004030 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2204      	movs	r2, #4
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e047      	b.n	80040c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 020e 	bic.w	r2, r2, #14
 800403e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f003 021c 	and.w	r2, r3, #28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800407c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004094:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800409e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
    }
  }
  return status;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	f003 031c 	and.w	r3, r3, #28
 80040ec:	2204      	movs	r2, #4
 80040ee:	409a      	lsls	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d027      	beq.n	8004148 <HAL_DMA_IRQHandler+0x7c>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d022      	beq.n	8004148 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	f003 021c 	and.w	r2, r3, #28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2104      	movs	r1, #4
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 8081 	beq.w	8004240 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004146:	e07b      	b.n	8004240 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f003 031c 	and.w	r3, r3, #28
 8004150:	2202      	movs	r2, #2
 8004152:	409a      	lsls	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d03d      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x10c>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d038      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 020a 	bic.w	r2, r2, #10
 8004182:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_DMA_IRQHandler+0x180>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d909      	bls.n	80041ac <HAL_DMA_IRQHandler+0xe0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f003 031c 	and.w	r3, r3, #28
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_DMA_IRQHandler+0x184>)
 80041a2:	2102      	movs	r1, #2
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	6053      	str	r3, [r2, #4]
 80041aa:	e008      	b.n	80041be <HAL_DMA_IRQHandler+0xf2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 031c 	and.w	r3, r3, #28
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_DMA_IRQHandler+0x188>)
 80041b6:	2102      	movs	r1, #2
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d038      	beq.n	8004240 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80041d6:	e033      	b.n	8004240 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 031c 	and.w	r3, r3, #28
 80041e0:	2208      	movs	r2, #8
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d02a      	beq.n	8004242 <HAL_DMA_IRQHandler+0x176>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d025      	beq.n	8004242 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 020e 	bic.w	r2, r2, #14
 8004204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	f003 021c 	and.w	r2, r3, #28
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f202 	lsl.w	r2, r1, r2
 8004218:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004240:	bf00      	nop
 8004242:	bf00      	nop
}
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40020080 	.word	0x40020080
 8004250:	40020400 	.word	0x40020400
 8004254:	40020000 	.word	0x40020000

08004258 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 021c 	and.w	r2, r3, #28
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d108      	bne.n	80042b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042b6:	e007      	b.n	80042c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d813      	bhi.n	8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3b08      	subs	r3, #8
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e011      	b.n	8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	009a      	lsls	r2, r3, #2
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800431a:	4413      	add	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	3b08      	subs	r3, #8
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	3307      	adds	r3, #7
 8004332:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40020407 	.word	0x40020407
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	4002081c 	.word	0x4002081c
 8004360:	40020880 	.word	0x40020880

08004364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004374:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	461a      	mov	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004388:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3b01      	subs	r3, #1
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2201      	movs	r2, #1
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	1000823f 	.word	0x1000823f
 80043a8:	40020940 	.word	0x40020940

080043ac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	460b      	mov	r3, r1
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80043be:	7afb      	ldrb	r3, [r7, #11]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	bf00      	nop
  }

  return status;
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e003      	b.n	80043fa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004412:	e140      	b.n	8004696 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	4013      	ands	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8132 	beq.w	8004690 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <HAL_GPIO_Init+0x40>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d123      	bne.n	8004536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	08da      	lsrs	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3208      	adds	r2, #8
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	6939      	ldr	r1, [r7, #16]
 8004532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 808c 	beq.w	8004690 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004578:	4a4e      	ldr	r2, [pc, #312]	; (80046b4 <HAL_GPIO_Init+0x2b0>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	2207      	movs	r2, #7
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045a2:	d00d      	beq.n	80045c0 <HAL_GPIO_Init+0x1bc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a44      	ldr	r2, [pc, #272]	; (80046b8 <HAL_GPIO_Init+0x2b4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <HAL_GPIO_Init+0x1b8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a43      	ldr	r2, [pc, #268]	; (80046bc <HAL_GPIO_Init+0x2b8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_GPIO_Init+0x1b4>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e004      	b.n	80045c2 <HAL_GPIO_Init+0x1be>
 80045b8:	2307      	movs	r3, #7
 80045ba:	e002      	b.n	80045c2 <HAL_GPIO_Init+0x1be>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_GPIO_Init+0x1be>
 80045c0:	2300      	movs	r3, #0
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	f002 0203 	and.w	r2, r2, #3
 80045c8:	0092      	lsls	r2, r2, #2
 80045ca:	4093      	lsls	r3, r2
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045d2:	4938      	ldr	r1, [pc, #224]	; (80046b4 <HAL_GPIO_Init+0x2b0>)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	3302      	adds	r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004606:	4a2e      	ldr	r2, [pc, #184]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800463c:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	43db      	mvns	r3, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4013      	ands	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004666:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	43db      	mvns	r3, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4013      	ands	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800468a:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <HAL_GPIO_Init+0x2bc>)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	3301      	adds	r3, #1
 8004694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f aeb7 	bne.w	8004414 <HAL_GPIO_Init+0x10>
  }
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	48000400 	.word	0x48000400
 80046bc:	48000800 	.word	0x48000800
 80046c0:	58000800 	.word	0x58000800

080046c4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80046d2:	e0af      	b.n	8004834 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046d4:	2201      	movs	r2, #1
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	4013      	ands	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a2 	beq.w	800482e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80046ea:	4a59      	ldr	r2, [pc, #356]	; (8004850 <HAL_GPIO_DeInit+0x18c>)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	2207      	movs	r2, #7
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4013      	ands	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004712:	d00d      	beq.n	8004730 <HAL_GPIO_DeInit+0x6c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a4f      	ldr	r2, [pc, #316]	; (8004854 <HAL_GPIO_DeInit+0x190>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <HAL_GPIO_DeInit+0x68>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_GPIO_DeInit+0x194>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_GPIO_DeInit+0x64>
 8004724:	2302      	movs	r3, #2
 8004726:	e004      	b.n	8004732 <HAL_GPIO_DeInit+0x6e>
 8004728:	2307      	movs	r3, #7
 800472a:	e002      	b.n	8004732 <HAL_GPIO_DeInit+0x6e>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_GPIO_DeInit+0x6e>
 8004730:	2300      	movs	r3, #0
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	f002 0203 	and.w	r2, r2, #3
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4093      	lsls	r3, r2
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d136      	bne.n	80047b0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004742:	4b46      	ldr	r3, [pc, #280]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004744:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	4943      	ldr	r1, [pc, #268]	; (800485c <HAL_GPIO_DeInit+0x198>)
 800474e:	4013      	ands	r3, r2
 8004750:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004756:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	43db      	mvns	r3, r3
 800475e:	493f      	ldr	r1, [pc, #252]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004760:	4013      	ands	r3, r2
 8004762:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	493b      	ldr	r1, [pc, #236]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004770:	4013      	ands	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_GPIO_DeInit+0x198>)
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43db      	mvns	r3, r3
 800477c:	4937      	ldr	r1, [pc, #220]	; (800485c <HAL_GPIO_DeInit+0x198>)
 800477e:	4013      	ands	r3, r2
 8004780:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	2207      	movs	r2, #7
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004792:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <HAL_GPIO_DeInit+0x18c>)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	482b      	ldr	r0, [pc, #172]	; (8004850 <HAL_GPIO_DeInit+0x18c>)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	089b      	lsrs	r3, r3, #2
 80047a8:	400a      	ands	r2, r1
 80047aa:	3302      	adds	r3, #2
 80047ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2103      	movs	r1, #3
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	08d2      	lsrs	r2, r2, #3
 80047e4:	4019      	ands	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2103      	movs	r1, #3
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	2101      	movs	r1, #1
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	2103      	movs	r1, #3
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	401a      	ands	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3301      	adds	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	f47f af49 	bne.w	80046d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	48000400 	.word	0x48000400
 8004858:	48000800 	.word	0x48000800
 800485c:	58000800 	.word	0x58000800

08004860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
 800486c:	4613      	mov	r3, r2
 800486e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004870:	787b      	ldrb	r3, [r7, #1]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800487c:	e002      	b.n	8004884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	041a      	lsls	r2, r3, #16
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43d9      	mvns	r1, r3
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	400b      	ands	r3, r1
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	4618      	mov	r0, r3
 80048e0:	f004 fdee 	bl	80094c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	58000800 	.word	0x58000800

080048f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	58000400 	.word	0x58000400

0800490c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d10d      	bne.n	8004948 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800492c:	f000 f83c 	bl	80049a8 <HAL_PWREx_DisableLowPowerRunMode>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004936:	e015      	b.n	8004964 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_PWR_EnterSLEEPMode+0x60>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004944:	f000 f822 	bl	800498c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_PWR_EnterSLEEPMode+0x64>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <HAL_PWR_EnterSLEEPMode+0x64>)
 800494e:	f023 0304 	bic.w	r3, r3, #4
 8004952:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800495a:	bf30      	wfi
 800495c:	e002      	b.n	8004964 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800495e:	bf40      	sev
    __WFE();
 8004960:	bf20      	wfe
    __WFE();
 8004962:	bf20      	wfe
  }
}
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	58000400 	.word	0x58000400
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_PWREx_GetVoltageRange+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	58000400 	.word	0x58000400

0800498c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004990:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a03      	ldr	r2, [pc, #12]	; (80049a4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499a:	6013      	str	r3, [r2, #0]
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	58000400 	.word	0x58000400

080049a8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80049ae:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2232      	movs	r2, #50	; 0x32
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80049ce:	e002      	b.n	80049d6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e2:	d102      	bne.n	80049ea <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f2      	bne.n	80049d0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f6:	d101      	bne.n	80049fc <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e000      	b.n	80049fe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	58000400 	.word	0x58000400
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	431bde83 	.word	0x431bde83

08004a14 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	4a0c      	ldr	r2, [pc, #48]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a40:	bf30      	wfi
 8004a42:	e002      	b.n	8004a4a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a44:	bf40      	sev
    __WFE();
 8004a46:	bf20      	wfe
    __WFE();
 8004a48:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6113      	str	r3, [r2, #16]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	58000400 	.word	0x58000400
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a78:	d101      	bne.n	8004a7e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	58000400 	.word	0x58000400

08004a8c <LL_RCC_HSE_EnableTcxo>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <LL_RCC_HSE_DisableTcxo>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad6:	d101      	bne.n	8004adc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_HSE_Enable>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_HSE_Disable>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_HSE_IsReady>:
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b30:	d101      	bne.n	8004b36 <LL_RCC_HSE_IsReady+0x18>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <LL_RCC_HSE_IsReady+0x1a>
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <LL_RCC_HSI_Enable>:
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]
}
 8004b54:	bf00      	nop
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <LL_RCC_HSI_Disable>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_HSI_IsReady>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d101      	bne.n	8004b90 <LL_RCC_HSI_IsReady+0x18>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <LL_RCC_HSI_IsReady+0x1a>
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <LL_RCC_HSI_SetCalibTrimming>:
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	061b      	lsls	r3, r3, #24
 8004bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <LL_RCC_LSE_IsReady>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d101      	bne.n	8004bda <LL_RCC_LSE_IsReady+0x18>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <LL_RCC_LSE_IsReady+0x1a>
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_LSI_Enable>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bfc:	bf00      	nop
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_LSI_Disable>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_LSI_IsReady>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d101      	bne.n	8004c3c <LL_RCC_LSI_IsReady+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_RCC_LSI_IsReady+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_MSI_Enable>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6013      	str	r3, [r2, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_MSI_Disable>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	6013      	str	r3, [r2, #0]
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_MSI_IsReady>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d101      	bne.n	8004c94 <LL_RCC_MSI_IsReady+0x16>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <LL_RCC_MSI_IsReady+0x18>
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d101      	bne.n	8004cb4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <LL_RCC_MSI_GetRange>:
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_MSI_SetCalibTrimming>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d06:	4313      	orrs	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_SetSysClkSource>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_GetSysClkSource>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 030c 	and.w	r3, r3, #12
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <LL_RCC_SetAHBPrescaler>:
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	608b      	str	r3, [r1, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <LL_RCC_SetAHB3Prescaler>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d86:	f023 020f 	bic.w	r2, r3, #15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <LL_RCC_SetAPB1Prescaler>:
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004db4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_SetAPB2Prescaler>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <LL_RCC_GetAHBPrescaler>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <LL_RCC_GetAHB3Prescaler>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <LL_RCC_GetAPB1Prescaler>:
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr

08004e34 <LL_RCC_GetAPB2Prescaler>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004e66:	b480      	push	{r7}
 8004e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e78:	6013      	str	r3, [r2, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e94:	d101      	bne.n	8004e9a <LL_RCC_PLL_IsReady+0x18>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <LL_RCC_PLL_IsReady+0x1a>
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f10:	d101      	bne.n	8004f16 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d101      	bne.n	8004f3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f56:	d101      	bne.n	8004f5c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f78:	d101      	bne.n	8004f7e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e38a      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	f7ff fece 	bl	8004d3a <LL_RCC_GetSysClkSource>
 8004f9e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa0:	f7ff ffa2 	bl	8004ee8 <LL_RCC_PLL_GetMainSource>
 8004fa4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80c9 	beq.w	8005146 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x3e>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d17b      	bne.n	80050b8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d178      	bne.n	80050b8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fc6:	f7ff fe5a 	bl	8004c7e <LL_RCC_MSI_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_OscConfig+0x54>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e369      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x72>
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff8:	e006      	b.n	8005008 <HAL_RCC_OscConfig+0x80>
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005008:	4293      	cmp	r3, r2
 800500a:	d222      	bcs.n	8005052 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fd4f 	bl	8005ab4 <RCC_SetFlashLatencyFromMSIRange>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e347      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800502a:	f043 0308 	orr.w	r3, r3, #8
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fe4e 	bl	8004cec <LL_RCC_MSI_SetCalibTrimming>
 8005050:	e021      	b.n	8005096 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505c:	f043 0308 	orr.w	r3, r3, #8
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fe35 	bl	8004cec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fd14 	bl	8005ab4 <RCC_SetFlashLatencyFromMSIRange>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e30c      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005096:	f000 fcd5 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 800509a:	4603      	mov	r3, r0
 800509c:	4ab4      	ldr	r2, [pc, #720]	; (8005370 <HAL_RCC_OscConfig+0x3e8>)
 800509e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80050a0:	4bb4      	ldr	r3, [pc, #720]	; (8005374 <HAL_RCC_OscConfig+0x3ec>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fc fc3f 	bl	8001928 <HAL_InitTick>
 80050aa:	4603      	mov	r3, r0
 80050ac:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d047      	beq.n	8005144 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	e2fb      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d02c      	beq.n	800511a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050c0:	f7ff fdc1 	bl	8004c46 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050c4:	f7fc fc3a 	bl	800193c <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050cc:	f7fc fc36 	bl	800193c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e2e8      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80050de:	f7ff fdce 	bl	8004c7e <LL_RCC_MSI_IsReady>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f1      	beq.n	80050cc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f2:	f043 0308 	orr.w	r3, r3, #8
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fdea 	bl	8004cec <LL_RCC_MSI_SetCalibTrimming>
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800511a:	f7ff fda2 	bl	8004c62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800511e:	f7fc fc0d 	bl	800193c <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005126:	f7fc fc09 	bl	800193c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e2bb      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005138:	f7ff fda1 	bl	8004c7e <LL_RCC_MSI_IsReady>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f1      	bne.n	8005126 <HAL_RCC_OscConfig+0x19e>
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005144:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d05f      	beq.n	8005212 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d005      	beq.n	8005164 <HAL_RCC_OscConfig+0x1dc>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d10d      	bne.n	800517a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d10a      	bne.n	800517a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005164:	f7ff fcdb 	bl	8004b1e <LL_RCC_HSE_IsReady>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d050      	beq.n	8005210 <HAL_RCC_OscConfig+0x288>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d14c      	bne.n	8005210 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e29a      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005198:	d102      	bne.n	80051a0 <HAL_RCC_OscConfig+0x218>
 800519a:	f7ff fca4 	bl	8004ae6 <LL_RCC_HSE_Enable>
 800519e:	e00d      	b.n	80051bc <HAL_RCC_OscConfig+0x234>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80051a8:	d104      	bne.n	80051b4 <HAL_RCC_OscConfig+0x22c>
 80051aa:	f7ff fc6f 	bl	8004a8c <LL_RCC_HSE_EnableTcxo>
 80051ae:	f7ff fc9a 	bl	8004ae6 <LL_RCC_HSE_Enable>
 80051b2:	e003      	b.n	80051bc <HAL_RCC_OscConfig+0x234>
 80051b4:	f7ff fca5 	bl	8004b02 <LL_RCC_HSE_Disable>
 80051b8:	f7ff fc76 	bl	8004aa8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d012      	beq.n	80051ea <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fc fbba 	bl	800193c <HAL_GetTick>
 80051c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051cc:	f7fc fbb6 	bl	800193c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b64      	cmp	r3, #100	; 0x64
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e268      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80051de:	f7ff fc9e 	bl	8004b1e <LL_RCC_HSE_IsReady>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f1      	beq.n	80051cc <HAL_RCC_OscConfig+0x244>
 80051e8:	e013      	b.n	8005212 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fc fba7 	bl	800193c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f2:	f7fc fba3 	bl	800193c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b64      	cmp	r3, #100	; 0x64
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e255      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005204:	f7ff fc8b 	bl	8004b1e <LL_RCC_HSE_IsReady>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f1      	bne.n	80051f2 <HAL_RCC_OscConfig+0x26a>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d04b      	beq.n	80052b6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d005      	beq.n	8005230 <HAL_RCC_OscConfig+0x2a8>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d113      	bne.n	8005252 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d110      	bne.n	8005252 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005230:	f7ff fca2 	bl	8004b78 <LL_RCC_HSI_IsReady>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x2be>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e234      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fca5 	bl	8004b9a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005250:	e031      	b.n	80052b6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d019      	beq.n	800528e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525a:	f7ff fc71 	bl	8004b40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7fc fb6d 	bl	800193c <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005264:	e008      	b.n	8005278 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005266:	f7fc fb69 	bl	800193c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e21b      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005278:	f7ff fc7e 	bl	8004b78 <LL_RCC_HSI_IsReady>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f1      	beq.n	8005266 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fc87 	bl	8004b9a <LL_RCC_HSI_SetCalibTrimming>
 800528c:	e013      	b.n	80052b6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528e:	f7ff fc65 	bl	8004b5c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fc fb53 	bl	800193c <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529a:	f7fc fb4f 	bl	800193c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e201      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052ac:	f7ff fc64 	bl	8004b78 <LL_RCC_HSI_IsReady>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f1      	bne.n	800529a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d06e      	beq.n	80053a0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d056      	beq.n	8005378 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	429a      	cmp	r2, r3
 80052e0:	d031      	beq.n	8005346 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e1da      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d013      	beq.n	800532c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8005304:	f7ff fc7e 	bl	8004c04 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005308:	f7fc fb18 	bl	800193c <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005310:	f7fc fb14 	bl	800193c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b11      	cmp	r3, #17
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e1c6      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005322:	f7ff fc7f 	bl	8004c24 <LL_RCC_LSI_IsReady>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f1      	bne.n	8005310 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005334:	f023 0210 	bic.w	r2, r3, #16
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005340:	4313      	orrs	r3, r2
 8005342:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	f7ff fc4d 	bl	8004be4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fc faf7 	bl	800193c <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005352:	f7fc faf3 	bl	800193c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b11      	cmp	r3, #17
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1a5      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005364:	f7ff fc5e 	bl	8004c24 <LL_RCC_LSI_IsReady>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f1      	beq.n	8005352 <HAL_RCC_OscConfig+0x3ca>
 800536e:	e017      	b.n	80053a0 <HAL_RCC_OscConfig+0x418>
 8005370:	20000000 	.word	0x20000000
 8005374:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005378:	f7ff fc44 	bl	8004c04 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc fade 	bl	800193c <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005384:	f7fc fada 	bl	800193c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b11      	cmp	r3, #17
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e18c      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005396:	f7ff fc45 	bl	8004c24 <LL_RCC_LSI_IsReady>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80d8 	beq.w	800555e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80053ae:	f7ff fb5b 	bl	8004a68 <LL_PWR_IsEnabledBkUpAccess>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d113      	bne.n	80053e0 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053b8:	f7ff fa9a 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053bc:	f7fc fabe 	bl	800193c <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c4:	f7fc faba 	bl	800193c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e16c      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80053d6:	f7ff fb47 	bl	8004a68 <LL_PWR_IsEnabledBkUpAccess>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f1      	beq.n	80053c4 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d07b      	beq.n	80054e0 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b85      	cmp	r3, #133	; 0x85
 80053ee:	d003      	beq.n	80053f8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b05      	cmp	r3, #5
 80053f6:	d109      	bne.n	800540c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fc fa96 	bl	800193c <HAL_GetTick>
 8005410:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc fa88 	bl	800193c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e138      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800543e:	f7ff fbc0 	bl	8004bc2 <LL_RCC_LSE_IsReady>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0ef      	beq.n	8005428 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b81      	cmp	r3, #129	; 0x81
 800544e:	d003      	beq.n	8005458 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b85      	cmp	r3, #133	; 0x85
 8005456:	d121      	bne.n	800549c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fc fa70 	bl	800193c <HAL_GetTick>
 800545c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800545e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fc fa62 	bl	800193c <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e112      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ec      	beq.n	8005474 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800549a:	e060      	b.n	800555e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fc fa4e 	bl	800193c <HAL_GetTick>
 80054a0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fa40 	bl	800193c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0f0      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1ec      	bne.n	80054b8 <HAL_RCC_OscConfig+0x530>
 80054de:	e03e      	b.n	800555e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e0:	f7fc fa2c 	bl	800193c <HAL_GetTick>
 80054e4:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fc fa1e 	bl	800193c <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0ce      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1ec      	bne.n	80054fc <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fc fa0b 	bl	800193c <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800553c:	e00a      	b.n	8005554 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fc f9fd 	bl	800193c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0ad      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005554:	f7ff fb35 	bl	8004bc2 <LL_RCC_LSE_IsReady>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ef      	bne.n	800553e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80a3 	beq.w	80056ae <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b0c      	cmp	r3, #12
 800556c:	d076      	beq.n	800565c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	2b02      	cmp	r3, #2
 8005574:	d14b      	bne.n	800560e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	f7ff fc76 	bl	8004e66 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fc f9df 	bl	800193c <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005582:	f7fc f9db 	bl	800193c <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b0a      	cmp	r3, #10
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e08d      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005594:	f7ff fc75 	bl	8004e82 <LL_RCC_PLL_IsReady>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f1      	bne.n	8005582 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	4b44      	ldr	r3, [pc, #272]	; (80056b8 <HAL_RCC_OscConfig+0x730>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b6:	0212      	lsls	r2, r2, #8
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055ca:	430a      	orrs	r2, r1
 80055cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d4:	f7ff fc39 	bl	8004e4a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fc f9a8 	bl	800193c <HAL_GetTick>
 80055ec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fc f9a4 	bl	800193c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b0a      	cmp	r3, #10
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e056      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005602:	f7ff fc3e 	bl	8004e82 <LL_RCC_PLL_IsReady>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f1      	beq.n	80055f0 <HAL_RCC_OscConfig+0x668>
 800560c:	e04f      	b.n	80056ae <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	f7ff fc2a 	bl	8004e66 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561c:	f023 0303 	bic.w	r3, r3, #3
 8005620:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800562c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005634:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fc f981 	bl	800193c <HAL_GetTick>
 800563a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fc f97d 	bl	800193c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b0a      	cmp	r3, #10
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e02f      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005650:	f7ff fc17 	bl	8004e82 <LL_RCC_PLL_IsReady>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f1      	bne.n	800563e <HAL_RCC_OscConfig+0x6b6>
 800565a:	e028      	b.n	80056ae <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e023      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f003 0203 	and.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	429a      	cmp	r2, r3
 800567c:	d115      	bne.n	80056aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	429a      	cmp	r2, r3
 800568a:	d10e      	bne.n	80056aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	429a      	cmp	r2, r3
 800569a:	d106      	bne.n	80056aa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	11c1808c 	.word	0x11c1808c

080056bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e10f      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056d0:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d91b      	bls.n	8005716 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056de:	4b86      	ldr	r3, [pc, #536]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 0207 	bic.w	r2, r3, #7
 80056e6:	4984      	ldr	r1, [pc, #528]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fc f925 	bl	800193c <HAL_GetTick>
 80056f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056f6:	f7fc f921 	bl	800193c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0f3      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005708:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d1ef      	bne.n	80056f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fb12 	bl	8004d50 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800572c:	f7fc f906 	bl	800193c <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005734:	f7fc f902 	bl	800193c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0d4      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005746:	f7ff fbda 	bl	8004efe <LL_RCC_IsActiveFlag_HPRE>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f1      	beq.n	8005734 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fb08 	bl	8004d76 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005766:	f7fc f8e9 	bl	800193c <HAL_GetTick>
 800576a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800576e:	f7fc f8e5 	bl	800193c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0b7      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005780:	f7ff fbce 	bl	8004f20 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f1      	beq.n	800576e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fb01 	bl	8004da2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057a0:	f7fc f8cc 	bl	800193c <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057a8:	f7fc f8c8 	bl	800193c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e09a      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80057ba:	f7ff fbc3 	bl	8004f44 <LL_RCC_IsActiveFlag_PPRE1>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f1      	beq.n	80057a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff faf6 	bl	8004dc8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057dc:	f7fc f8ae 	bl	800193c <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e4:	f7fc f8aa 	bl	800193c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e07c      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80057f6:	f7ff fbb6 	bl	8004f66 <LL_RCC_IsActiveFlag_PPRE2>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f1      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d043      	beq.n	8005894 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d106      	bne.n	8005822 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005814:	f7ff f983 	bl	8004b1e <LL_RCC_HSE_IsReady>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11e      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e066      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d106      	bne.n	8005838 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800582a:	f7ff fb2a 	bl	8004e82 <LL_RCC_PLL_IsReady>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d113      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e05b      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005840:	f7ff fa1d 	bl	8004c7e <LL_RCC_MSI_IsReady>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e050      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800584e:	f7ff f993 	bl	8004b78 <LL_RCC_HSI_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e049      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fa57 	bl	8004d14 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005866:	f7fc f869 	bl	800193c <HAL_GetTick>
 800586a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586c:	e00a      	b.n	8005884 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586e:	f7fc f865 	bl	800193c <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	f241 3288 	movw	r2, #5000	; 0x1388
 800587c:	4293      	cmp	r3, r2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e035      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005884:	f7ff fa59 	bl	8004d3a <LL_RCC_GetSysClkSource>
 8005888:	4602      	mov	r2, r0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d1ec      	bne.n	800586e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d21b      	bcs.n	80058da <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 0207 	bic.w	r2, r3, #7
 80058aa:	4913      	ldr	r1, [pc, #76]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fc f843 	bl	800193c <HAL_GetTick>
 80058b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80058ba:	f7fc f83f 	bl	800193c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e011      	b.n	80058f0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <HAL_RCC_ClockConfig+0x23c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d1ef      	bne.n	80058ba <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058da:	f000 f8b3 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 80058de:	4603      	mov	r3, r0
 80058e0:	4a06      	ldr	r2, [pc, #24]	; (80058fc <HAL_RCC_ClockConfig+0x240>)
 80058e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_ClockConfig+0x244>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fc f81d 	bl	8001928 <HAL_InitTick>
 80058ee:	4603      	mov	r3, r0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	58004000 	.word	0x58004000
 80058fc:	20000000 	.word	0x20000000
 8005900:	20000034 	.word	0x20000034

08005904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005912:	f7ff fa12 	bl	8004d3a <LL_RCC_GetSysClkSource>
 8005916:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	f7ff fae6 	bl	8004ee8 <LL_RCC_PLL_GetMainSource>
 800591c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d005      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x2c>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d139      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d136      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005930:	f7ff f9b5 	bl	8004c9e <LL_RCC_MSI_IsEnabledRangeSelect>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d115      	bne.n	8005966 <HAL_RCC_GetSysClockFreq+0x62>
 800593a:	f7ff f9b0 	bl	8004c9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800593e:	4603      	mov	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d106      	bne.n	8005952 <HAL_RCC_GetSysClockFreq+0x4e>
 8005944:	f7ff f9bb 	bl	8004cbe <LL_RCC_MSI_GetRange>
 8005948:	4603      	mov	r3, r0
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	e005      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x5a>
 8005952:	f7ff f9bf 	bl	8004cd4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005956:	4603      	mov	r3, r0
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	4a36      	ldr	r2, [pc, #216]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x134>)
 8005960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005964:	e014      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x8c>
 8005966:	f7ff f99a 	bl	8004c9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d106      	bne.n	800597e <HAL_RCC_GetSysClockFreq+0x7a>
 8005970:	f7ff f9a5 	bl	8004cbe <LL_RCC_MSI_GetRange>
 8005974:	4603      	mov	r3, r0
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	e005      	b.n	800598a <HAL_RCC_GetSysClockFreq+0x86>
 800597e:	f7ff f9a9 	bl	8004cd4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005982:	4603      	mov	r3, r0
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	4a2b      	ldr	r2, [pc, #172]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x134>)
 800598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005990:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d115      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800599c:	e012      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d102      	bne.n	80059aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e00c      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d109      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059b0:	f7ff f888 	bl	8004ac4 <LL_RCC_HSE_IsEnabledDiv2>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d102      	bne.n	80059c0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e001      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80059c0:	4b1f      	ldr	r3, [pc, #124]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059c2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c4:	f7ff f9b9 	bl	8004d3a <LL_RCC_GetSysClkSource>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d12f      	bne.n	8005a2e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80059ce:	f7ff fa8b 	bl	8004ee8 <LL_RCC_PLL_GetMainSource>
 80059d2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d003      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0xde>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d003      	beq.n	80059e8 <HAL_RCC_GetSysClockFreq+0xe4>
 80059e0:	e00d      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80059e2:	4b16      	ldr	r3, [pc, #88]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059e4:	60fb      	str	r3, [r7, #12]
        break;
 80059e6:	e00d      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059e8:	f7ff f86c 	bl	8004ac4 <LL_RCC_HSE_IsEnabledDiv2>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d102      	bne.n	80059f8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x138>)
 80059f4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80059f6:	e005      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059fa:	60fb      	str	r3, [r7, #12]
        break;
 80059fc:	e002      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	60fb      	str	r3, [r7, #12]
        break;
 8005a02:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005a04:	f7ff fa4e 	bl	8004ea4 <LL_RCC_PLL_GetN>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	fb03 f402 	mul.w	r4, r3, r2
 8005a10:	f7ff fa5f 	bl	8004ed2 <LL_RCC_PLL_GetDivider>
 8005a14:	4603      	mov	r3, r0
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	3301      	adds	r3, #1
 8005a1a:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a1e:	f7ff fa4d 	bl	8004ebc <LL_RCC_PLL_GetR>
 8005a22:	4603      	mov	r3, r0
 8005a24:	0f5b      	lsrs	r3, r3, #29
 8005a26:	3301      	adds	r3, #1
 8005a28:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a2c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005a2e:	697b      	ldr	r3, [r7, #20]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}
 8005a38:	0801a8dc 	.word	0x0801a8dc
 8005a3c:	00f42400 	.word	0x00f42400
 8005a40:	01e84800 	.word	0x01e84800

08005a44 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a44:	b598      	push	{r3, r4, r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a48:	f7ff ff5c 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	f7ff f9ce 	bl	8004dee <LL_RCC_GetAHBPrescaler>
 8005a52:	4603      	mov	r3, r0
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	4a03      	ldr	r2, [pc, #12]	; (8005a68 <HAL_RCC_GetHCLKFreq+0x24>)
 8005a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a60:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd98      	pop	{r3, r4, r7, pc}
 8005a68:	0801a87c 	.word	0x0801a87c

08005a6c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a6c:	b598      	push	{r3, r4, r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a70:	f7ff ffe8 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a74:	4604      	mov	r4, r0
 8005a76:	f7ff f9d2 	bl	8004e1e <LL_RCC_GetAPB1Prescaler>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd98      	pop	{r3, r4, r7, pc}
 8005a8c:	0801a8bc 	.word	0x0801a8bc

08005a90 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a90:	b598      	push	{r3, r4, r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005a94:	f7ff ffd6 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	f7ff f9cb 	bl	8004e34 <LL_RCC_GetAPB2Prescaler>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	0adb      	lsrs	r3, r3, #11
 8005aa2:	4a03      	ldr	r2, [pc, #12]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd98      	pop	{r3, r4, r7, pc}
 8005ab0:	0801a8bc 	.word	0x0801a8bc

08005ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	4a10      	ldr	r2, [pc, #64]	; (8005b08 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aca:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005acc:	f7ff f99a 	bl	8004e04 <LL_RCC_GetAHB3Prescaler>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0c9c      	lsrs	r4, r3, #18
 8005af0:	f7fe ff40 	bl	8004974 <HAL_PWREx_GetVoltageRange>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4619      	mov	r1, r3
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f80b 	bl	8005b14 <RCC_SetFlashLatency>
 8005afe:	4603      	mov	r3, r0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	0801a8dc 	.word	0x0801a8dc
 8005b0c:	0801a87c 	.word	0x0801a87c
 8005b10:	431bde83 	.word	0x431bde83

08005b14 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005b1e:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <RCC_SetFlashLatency+0xfc>)
 8005b20:	f107 0320 	add.w	r3, r7, #32
 8005b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b28:	6018      	str	r0, [r3, #0]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005b2e:	4a39      	ldr	r2, [pc, #228]	; (8005c14 <RCC_SetFlashLatency+0x100>)
 8005b30:	f107 0318 	add.w	r3, r7, #24
 8005b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b38:	6018      	str	r0, [r3, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005b3e:	4a36      	ldr	r2, [pc, #216]	; (8005c18 <RCC_SetFlashLatency+0x104>)
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b46:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	d11d      	bne.n	8005b92 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b56:	2300      	movs	r3, #0
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
 8005b5a:	e016      	b.n	8005b8a <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b64:	4413      	add	r3, r2
 8005b66:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d808      	bhi.n	8005b84 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b82:	e023      	b.n	8005bcc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	3301      	adds	r3, #1
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d9e5      	bls.n	8005b5c <RCC_SetFlashLatency+0x48>
 8005b90:	e01c      	b.n	8005bcc <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b96:	e016      	b.n	8005bc6 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d808      	bhi.n	8005bc0 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bbe:	e005      	b.n	8005bcc <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d9e5      	bls.n	8005b98 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bcc:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <RCC_SetFlashLatency+0x108>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f023 0207 	bic.w	r2, r3, #7
 8005bd4:	4911      	ldr	r1, [pc, #68]	; (8005c1c <RCC_SetFlashLatency+0x108>)
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bdc:	f7fb feae 	bl	800193c <HAL_GetTick>
 8005be0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005be2:	e008      	b.n	8005bf6 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005be4:	f7fb feaa 	bl	800193c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e007      	b.n	8005c06 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <RCC_SetFlashLatency+0x108>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d1ef      	bne.n	8005be4 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3738      	adds	r7, #56	; 0x38
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	0801a0a4 	.word	0x0801a0a4
 8005c14:	0801a0ac 	.word	0x0801a0ac
 8005c18:	0801a0b4 	.word	0x0801a0b4
 8005c1c:	58004000 	.word	0x58004000

08005c20 <LL_RCC_LSE_IsReady>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d101      	bne.n	8005c38 <LL_RCC_LSE_IsReady+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_RCC_LSE_IsReady+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_SetUSARTClockSource>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	43db      	mvns	r3, r3
 8005c58:	401a      	ands	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <LL_RCC_SetI2SClockSource>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <LL_RCC_SetLPUARTClockSource>:
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_SetI2CClockSource>:
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	401a      	ands	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <LL_RCC_SetLPTIMClockSource>:
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	43db      	mvns	r3, r3
 8005d16:	401a      	ands	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <LL_RCC_SetRNGClockSource>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_SetADCClockSource>:
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr

08005d84 <LL_RCC_SetRTCClockSource>:
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <LL_RCC_GetRTCClockSource>:
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	4770      	bx	lr

08005dc6 <LL_RCC_ForceBackupDomainReset>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr

08005de6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005e14:	2300      	movs	r3, #0
 8005e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e18:	2300      	movs	r3, #0
 8005e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d058      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005e28:	f7fe fd62 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2c:	f7fb fd86 	bl	800193c <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e32:	e009      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e34:	f7fb fd82 	bl	800193c <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d902      	bls.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	74fb      	strb	r3, [r7, #19]
        break;
 8005e46:	e006      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005e48:	4b7b      	ldr	r3, [pc, #492]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e54:	d1ee      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d13c      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005e5c:	f7ff ffa7 	bl	8005dae <LL_RCC_GetRTCClockSource>
 8005e60:	4602      	mov	r2, r0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d00f      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e78:	f7ff ffa5 	bl	8005dc6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e7c:	f7ff ffb3 	bl	8005de6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d014      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fb fd52 	bl	800193c <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9c:	f7fb fd4e 	bl	800193c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d902      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb2:	e004      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005eb4:	f7ff feb4 	bl	8005c20 <LL_RCC_LSE_IsReady>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d1ee      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff5b 	bl	8005d84 <LL_RCC_SetRTCClockSource>
 8005ece:	e004      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
 8005ed4:	e001      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed6:	7cfb      	ldrb	r3, [r7, #19]
 8005ed8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d004      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fea9 	bl	8005c42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fe9e 	bl	8005c42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fec0 	bl	8005c9c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff fee6 	bl	8005cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fedb 	bl	8005cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fed0 	bl	8005cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fea9 	bl	8005cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fe9e 	bl	8005cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff fe93 	bl	8005cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d011      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fe5e 	bl	8005c72 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fea5 	bl	8005d30 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d011      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fea3 	bl	8005d5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601c:	d107      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800602e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	58000400 	.word	0x58000400

0800603c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d068      	beq.n	8006120 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb f9ba 	bl	80013dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006070:	4b2e      	ldr	r3, [pc, #184]	; (800612c <HAL_RTC_Init+0xf0>)
 8006072:	22ca      	movs	r2, #202	; 0xca
 8006074:	625a      	str	r2, [r3, #36]	; 0x24
 8006076:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_RTC_Init+0xf0>)
 8006078:	2253      	movs	r2, #83	; 0x53
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa0f 	bl	80064a0 <RTC_EnterInitMode>
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d13f      	bne.n	800610c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RTC_Init+0xf0>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4a26      	ldr	r2, [pc, #152]	; (800612c <HAL_RTC_Init+0xf0>)
 8006092:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800609c:	4b23      	ldr	r3, [pc, #140]	; (800612c <HAL_RTC_Init+0xf0>)
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4319      	orrs	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	430b      	orrs	r3, r1
 80060b0:	491e      	ldr	r1, [pc, #120]	; (800612c <HAL_RTC_Init+0xf0>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	491a      	ldr	r1, [pc, #104]	; (800612c <HAL_RTC_Init+0xf0>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_RTC_Init+0xf0>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	430b      	orrs	r3, r1
 80060d8:	4914      	ldr	r1, [pc, #80]	; (800612c <HAL_RTC_Init+0xf0>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa12 	bl	8006508 <RTC_ExitInitMode>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10e      	bne.n	800610c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <HAL_RTC_Init+0xf0>)
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a19      	ldr	r1, [r3, #32]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	4319      	orrs	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	430b      	orrs	r3, r1
 8006106:	4909      	ldr	r1, [pc, #36]	; (800612c <HAL_RTC_Init+0xf0>)
 8006108:	4313      	orrs	r3, r2
 800610a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <HAL_RTC_Init+0xf0>)
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40002800 	.word	0x40002800

08006130 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_RTC_SetAlarm_IT+0x1e>
 800614a:	2302      	movs	r3, #2
 800614c:	e0f3      	b.n	8006336 <HAL_RTC_SetAlarm_IT+0x206>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2202      	movs	r2, #2
 800615a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800615e:	4b78      	ldr	r3, [pc, #480]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616e:	d06a      	beq.n	8006246 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d13a      	bne.n	80061ec <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006176:	4b72      	ldr	r3, [pc, #456]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f9f5 	bl	8006584 <RTC_ByteToBcd2>
 800619a:	4603      	mov	r3, r0
 800619c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f9ee 	bl	8006584 <RTC_ByteToBcd2>
 80061a8:	4603      	mov	r3, r0
 80061aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061ac:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	789b      	ldrb	r3, [r3, #2]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f9e6 	bl	8006584 <RTC_ByteToBcd2>
 80061b8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061ba:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	78db      	ldrb	r3, [r3, #3]
 80061c2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061c4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f9d8 	bl	8006584 <RTC_ByteToBcd2>
 80061d4:	4603      	mov	r3, r0
 80061d6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061d8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061e0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	e02c      	b.n	8006246 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80061f4:	d00d      	beq.n	8006212 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061fe:	d008      	beq.n	8006212 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006200:	4b4f      	ldr	r3, [pc, #316]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800621e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006224:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	78db      	ldrb	r3, [r3, #3]
 800622a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800622c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006234:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006236:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800623c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006246:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006248:	22ca      	movs	r2, #202	; 0xca
 800624a:	625a      	str	r2, [r3, #36]	; 0x24
 800624c:	4b3c      	ldr	r3, [pc, #240]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800624e:	2253      	movs	r2, #83	; 0x53
 8006250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625a:	d12c      	bne.n	80062b6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800625c:	4b38      	ldr	r3, [pc, #224]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4a37      	ldr	r2, [pc, #220]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006266:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006268:	4b35      	ldr	r3, [pc, #212]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800626a:	2201      	movs	r2, #1
 800626c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006274:	d107      	bne.n	8006286 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4930      	ldr	r1, [pc, #192]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006280:	4313      	orrs	r3, r2
 8006282:	644b      	str	r3, [r1, #68]	; 0x44
 8006284:	e006      	b.n	8006294 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006286:	4a2e      	ldr	r2, [pc, #184]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	f043 0201 	orr.w	r2, r3, #1
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	4a24      	ldr	r2, [pc, #144]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062ae:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80062b2:	6193      	str	r3, [r2, #24]
 80062b4:	e02b      	b.n	800630e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062bc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80062c0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80062c2:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062c4:	2202      	movs	r2, #2
 80062c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d107      	bne.n	80062e0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	4919      	ldr	r1, [pc, #100]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80062de:	e006      	b.n	80062ee <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80062e0:	4a17      	ldr	r2, [pc, #92]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80062ee:	4a14      	ldr	r2, [pc, #80]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f043 0202 	orr.w	r2, r3, #2
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006308:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800630c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <HAL_RTC_SetAlarm_IT+0x214>)
 8006310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006314:	4a0b      	ldr	r2, [pc, #44]	; (8006344 <HAL_RTC_SetAlarm_IT+0x214>)
 8006316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800631a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800631e:	4b08      	ldr	r3, [pc, #32]	; (8006340 <HAL_RTC_SetAlarm_IT+0x210>)
 8006320:	22ff      	movs	r2, #255	; 0xff
 8006322:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}
 800633e:	bf00      	nop
 8006340:	40002800 	.word	0x40002800
 8006344:	58000800 	.word	0x58000800

08006348 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_RTC_DeactivateAlarm+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e048      	b.n	80063f2 <HAL_RTC_DeactivateAlarm+0xaa>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006370:	4b22      	ldr	r3, [pc, #136]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006372:	22ca      	movs	r2, #202	; 0xca
 8006374:	625a      	str	r2, [r3, #36]	; 0x24
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006378:	2253      	movs	r2, #83	; 0x53
 800637a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d115      	bne.n	80063b0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006384:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 800638a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800638e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006394:	4a19      	ldr	r2, [pc, #100]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 8006396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800639a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	f023 0201 	bic.w	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80063a8:	4b14      	ldr	r3, [pc, #80]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80063ae:	e014      	b.n	80063da <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063b0:	4b12      	ldr	r3, [pc, #72]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	4a11      	ldr	r2, [pc, #68]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063b6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80063ba:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80063bc:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c0:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	f023 0202 	bic.w	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063d6:	2202      	movs	r2, #2
 80063d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <HAL_RTC_DeactivateAlarm+0xb4>)
 80063dc:	22ff      	movs	r2, #255	; 0xff
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	40002800 	.word	0x40002800

08006400 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_RTC_AlarmIRQHandler+0x50>)
 800640a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	4013      	ands	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006420:	2201      	movs	r2, #1
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fb fd17 	bl	8001e58 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006436:	2202      	movs	r2, #2
 8006438:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f94a 	bl	80066d4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40002800 	.word	0x40002800

08006454 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_RTC_WaitForSynchro+0x48>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4a0e      	ldr	r2, [pc, #56]	; (800649c <HAL_RTC_WaitForSynchro+0x48>)
 8006462:	f023 0320 	bic.w	r3, r3, #32
 8006466:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006468:	f7fb fa68 	bl	800193c <HAL_GetTick>
 800646c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800646e:	e009      	b.n	8006484 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006470:	f7fb fa64 	bl	800193c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800647e:	d901      	bls.n	8006484 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e006      	b.n	8006492 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RTC_WaitForSynchro+0x48>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ef      	beq.n	8006470 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40002800 	.word	0x40002800

080064a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80064ac:	4b15      	ldr	r3, [pc, #84]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d120      	bne.n	80064fa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80064c4:	f7fb fa3a 	bl	800193c <HAL_GetTick>
 80064c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064ca:	e00d      	b.n	80064e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064cc:	f7fb fa36 	bl	800193c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064da:	d905      	bls.n	80064e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2203      	movs	r2, #3
 80064e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <RTC_EnterInitMode+0x64>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <RTC_EnterInitMode+0x5a>
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d1e8      	bne.n	80064cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40002800 	.word	0x40002800

08006508 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4a19      	ldr	r2, [pc, #100]	; (8006580 <RTC_ExitInitMode+0x78>)
 800651a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff91 	bl	8006454 <HAL_RTC_WaitForSynchro>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01e      	beq.n	8006576 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2203      	movs	r2, #3
 800653c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e017      	b.n	8006576 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006546:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	4a0d      	ldr	r2, [pc, #52]	; (8006580 <RTC_ExitInitMode+0x78>)
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff ff7e 	bl	8006454 <HAL_RTC_WaitForSynchro>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2203      	movs	r2, #3
 8006562:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <RTC_ExitInitMode+0x78>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	4a04      	ldr	r2, [pc, #16]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006570:	f043 0320 	orr.w	r3, r3, #32
 8006574:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40002800 	.word	0x40002800

08006584 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006596:	e005      	b.n	80065a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	3b0a      	subs	r3, #10
 80065a2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	d8f6      	bhi.n	8006598 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	7afb      	ldrb	r3, [r7, #11]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b2db      	uxtb	r3, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_RTCEx_EnableBypassShadow+0x16>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e01f      	b.n	800661a <HAL_RTCEx_EnableBypassShadow+0x56>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ea:	4b0e      	ldr	r3, [pc, #56]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065ec:	22ca      	movs	r2, #202	; 0xca
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065f2:	2253      	movs	r2, #83	; 0x53
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	4a0a      	ldr	r2, [pc, #40]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80065fc:	f043 0320 	orr.w	r3, r3, #32
 8006600:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	40002800 	.word	0x40002800

08006628 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_RTCEx_SetSSRU_IT+0x16>
 800663a:	2302      	movs	r3, #2
 800663c:	e027      	b.n	800668e <HAL_RTCEx_SetSSRU_IT+0x66>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006650:	22ca      	movs	r2, #202	; 0xca
 8006652:	625a      	str	r2, [r3, #36]	; 0x24
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006656:	2253      	movs	r2, #83	; 0x53
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800665a:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	4a0e      	ldr	r2, [pc, #56]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006664:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666c:	4a0b      	ldr	r2, [pc, #44]	; (800669c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800666e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006672:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	40002800 	.word	0x40002800
 800669c:	58000800 	.word	0x58000800

080066a0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80066b6:	2240      	movs	r2, #64	; 0x40
 80066b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb fbd6 	bl	8001e6c <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40002800 	.word	0x40002800

080066d4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <HAL_RTCEx_BKUPWrite+0x2c>)
 80066f6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4413      	add	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	4000b100 	.word	0x4000b100

08006718 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <HAL_RTCEx_BKUPRead+0x28>)
 8006724:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	4000b100 	.word	0x4000b100

08006744 <LL_PWR_SetRadioBusyTrigger>:
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006754:	4904      	ldr	r1, [pc, #16]	; (8006768 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4313      	orrs	r3, r2
 800675a:	608b      	str	r3, [r1, #8]
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	58000400 	.word	0x58000400

0800676c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a04      	ldr	r2, [pc, #16]	; (8006788 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	58000400 	.word	0x58000400

0800678c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006796:	4a04      	ldr	r2, [pc, #16]	; (80067a8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	58000400 	.word	0x58000400

080067ac <LL_PWR_ClearFlag_RFBUSY>:
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80067b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b6:	619a      	str	r2, [r3, #24]
}
 80067b8:	bf00      	nop
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	58000400 	.word	0x58000400

080067c4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d101      	bne.n	80067d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	58000400 	.word	0x58000400

080067e8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d101      	bne.n	80067fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	58000400 	.word	0x58000400

0800680c <LL_RCC_RF_DisableReset>:
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800681c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <LL_RCC_IsRFUnderReset>:
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006840:	d101      	bne.n	8006846 <LL_RCC_IsRFUnderReset+0x1a>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <LL_RCC_IsRFUnderReset+0x1c>
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <LL_EXTI_EnableIT_32_63>:
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <LL_EXTI_EnableIT_32_63+0x24>)
 800685a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800685e:	4905      	ldr	r1, [pc, #20]	; (8006874 <LL_EXTI_EnableIT_32_63+0x24>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	58000800 	.word	0x58000800

08006878 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
    return status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	e04b      	b.n	8006926 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	799b      	ldrb	r3, [r3, #6]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fa fea2 	bl	80015ec <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80068ae:	f7ff ffad 	bl	800680c <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80068b2:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <HAL_SUBGHZ_Init+0xb8>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	0cdb      	lsrs	r3, r3, #19
 80068c0:	2264      	movs	r2, #100	; 0x64
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d105      	bne.n	80068da <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	609a      	str	r2, [r3, #8]
      break;
 80068d8:	e007      	b.n	80068ea <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80068e0:	f7ff ffa4 	bl	800682c <LL_RCC_IsRFUnderReset>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1ee      	bne.n	80068c8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80068ea:	f7ff ff3f 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80068ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80068f2:	f7ff ffad 	bl	8006850 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80068f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80068fa:	f7ff ff23 	bl	8006744 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80068fe:	f7ff ff55 	bl	80067ac <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 faad 	bl	8006e6c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	719a      	strb	r2, [r3, #6]

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000000 	.word	0x20000000

08006934 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	461a      	mov	r2, r3
 8006940:	460b      	mov	r3, r1
 8006942:	817b      	strh	r3, [r7, #10]
 8006944:	4613      	mov	r3, r2
 8006946:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	799b      	ldrb	r3, [r3, #6]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b01      	cmp	r3, #1
 8006950:	d14a      	bne.n	80069e8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	795b      	ldrb	r3, [r3, #5]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800695a:	2302      	movs	r3, #2
 800695c:	e045      	b.n	80069ea <HAL_SUBGHZ_WriteRegisters+0xb6>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2202      	movs	r2, #2
 8006968:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fb4c 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006970:	f7ff ff0c 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006974:	210d      	movs	r1, #13
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fa98 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800697c:	897b      	ldrh	r3, [r7, #10]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	b29b      	uxth	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	4619      	mov	r1, r3
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fa90 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800698c:	897b      	ldrh	r3, [r7, #10]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fa8a 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	82bb      	strh	r3, [r7, #20]
 800699c:	e00a      	b.n	80069b4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800699e:	8abb      	ldrh	r3, [r7, #20]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fa7f 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80069ae:	8abb      	ldrh	r3, [r7, #20]
 80069b0:	3301      	adds	r3, #1
 80069b2:	82bb      	strh	r3, [r7, #20]
 80069b4:	8aba      	ldrh	r2, [r7, #20]
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3f0      	bcc.n	800699e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80069bc:	f7ff fed6 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 fb45 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	75fb      	strb	r3, [r7, #23]
 80069d2:	e001      	b.n	80069d8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	715a      	strb	r2, [r3, #5]

    return status;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	e000      	b.n	80069ea <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80069e8:	2302      	movs	r3, #2
  }
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b088      	sub	sp, #32
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	461a      	mov	r2, r3
 80069fe:	460b      	mov	r3, r1
 8006a00:	817b      	strh	r3, [r7, #10]
 8006a02:	4613      	mov	r3, r2
 8006a04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	799b      	ldrb	r3, [r3, #6]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d14a      	bne.n	8006aaa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	795b      	ldrb	r3, [r3, #5]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e045      	b.n	8006aac <HAL_SUBGHZ_ReadRegisters+0xba>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 faee 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006a2c:	f7ff feae 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006a30:	211d      	movs	r1, #29
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fa3a 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006a38:	897b      	ldrh	r3, [r7, #10]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fa32 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006a48:	897b      	ldrh	r3, [r7, #10]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fa2c 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa28 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	82fb      	strh	r3, [r7, #22]
 8006a60:	e009      	b.n	8006a76 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006a62:	69b9      	ldr	r1, [r7, #24]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa77 	bl	8006f58 <SUBGHZSPI_Receive>
      pData++;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006a70:	8afb      	ldrh	r3, [r7, #22]
 8006a72:	3301      	adds	r3, #1
 8006a74:	82fb      	strh	r3, [r7, #22]
 8006a76:	8afa      	ldrh	r2, [r7, #22]
 8006a78:	893b      	ldrh	r3, [r7, #8]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d3f1      	bcc.n	8006a62 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006a7e:	f7ff fe75 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fae4 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e001      	b.n	8006a9a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	715a      	strb	r2, [r3, #5]

    return status;
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	e000      	b.n	8006aac <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006aaa:	2302      	movs	r3, #2
  }
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	72fb      	strb	r3, [r7, #11]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	799b      	ldrb	r3, [r3, #6]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d14a      	bne.n	8006b68 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	795b      	ldrb	r3, [r3, #5]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e045      	b.n	8006b6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fa8f 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	2b84      	cmp	r3, #132	; 0x84
 8006aee:	d002      	beq.n	8006af6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	2b94      	cmp	r3, #148	; 0x94
 8006af4:	d103      	bne.n	8006afe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	711a      	strb	r2, [r3, #4]
 8006afc:	e002      	b.n	8006b04 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b04:	f7ff fe42 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f9cd 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	82bb      	strh	r3, [r7, #20]
 8006b16:	e00a      	b.n	8006b2e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006b18:	8abb      	ldrh	r3, [r7, #20]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4619      	mov	r1, r3
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f9c2 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b28:	8abb      	ldrh	r3, [r7, #20]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	82bb      	strh	r3, [r7, #20]
 8006b2e:	8aba      	ldrh	r2, [r7, #20]
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3f0      	bcc.n	8006b18 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b36:	f7ff fe19 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	2b84      	cmp	r3, #132	; 0x84
 8006b3e:	d002      	beq.n	8006b46 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fa85 	bl	8007050 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
 8006b52:	e001      	b.n	8006b58 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	715a      	strb	r2, [r3, #5]

    return status;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	e000      	b.n	8006b6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b088      	sub	sp, #32
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	60f8      	str	r0, [r7, #12]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	460b      	mov	r3, r1
 8006b80:	72fb      	strb	r3, [r7, #11]
 8006b82:	4613      	mov	r3, r2
 8006b84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	799b      	ldrb	r3, [r3, #6]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d13d      	bne.n	8006c10 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	795b      	ldrb	r3, [r3, #5]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e038      	b.n	8006c12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fa2e 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006bac:	f7ff fdee 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f979 	bl	8006eac <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f975 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	82fb      	strh	r3, [r7, #22]
 8006bc6:	e009      	b.n	8006bdc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006bc8:	69b9      	ldr	r1, [r7, #24]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f9c4 	bl	8006f58 <SUBGHZSPI_Receive>
      pData++;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006bd6:	8afb      	ldrh	r3, [r7, #22]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	82fb      	strh	r3, [r7, #22]
 8006bdc:	8afa      	ldrh	r2, [r7, #22]
 8006bde:	893b      	ldrh	r3, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d3f1      	bcc.n	8006bc8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006be4:	f7ff fdc2 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fa31 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e001      	b.n	8006c00 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	715a      	strb	r2, [r3, #5]

    return status;
 8006c0c:	7ffb      	ldrb	r3, [r7, #31]
 8006c0e:	e000      	b.n	8006c12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c10:	2302      	movs	r3, #2
  }
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b086      	sub	sp, #24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	461a      	mov	r2, r3
 8006c26:	460b      	mov	r3, r1
 8006c28:	72fb      	strb	r3, [r7, #11]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	799b      	ldrb	r3, [r3, #6]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d13e      	bne.n	8006cb6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	795b      	ldrb	r3, [r3, #5]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e039      	b.n	8006cb8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f9dc 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c50:	f7ff fd9c 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006c54:	210e      	movs	r1, #14
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f928 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f923 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	82bb      	strh	r3, [r7, #20]
 8006c6a:	e00a      	b.n	8006c82 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c6c:	8abb      	ldrh	r3, [r7, #20]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f918 	bl	8006eac <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c7c:	8abb      	ldrh	r3, [r7, #20]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	82bb      	strh	r3, [r7, #20]
 8006c82:	8aba      	ldrh	r2, [r7, #20]
 8006c84:	893b      	ldrh	r3, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d3f0      	bcc.n	8006c6c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c8a:	f7ff fd6f 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f9de 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
 8006ca0:	e001      	b.n	8006ca6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	715a      	strb	r2, [r3, #5]

    return status;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	e000      	b.n	8006cb8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	460b      	mov	r3, r1
 8006cce:	72fb      	strb	r3, [r7, #11]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	799b      	ldrb	r3, [r3, #6]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d141      	bne.n	8006d66 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	795b      	ldrb	r3, [r3, #5]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e03c      	b.n	8006d68 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f987 	bl	8007008 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006cfa:	f7ff fd47 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006cfe:	211e      	movs	r1, #30
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f8d3 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f8ce 	bl	8006eac <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006d10:	2100      	movs	r1, #0
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f8ca 	bl	8006eac <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	82fb      	strh	r3, [r7, #22]
 8006d1c:	e009      	b.n	8006d32 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d1e:	69b9      	ldr	r1, [r7, #24]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f919 	bl	8006f58 <SUBGHZSPI_Receive>
      pData++;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	82fb      	strh	r3, [r7, #22]
 8006d32:	8afa      	ldrh	r2, [r7, #22]
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3f1      	bcc.n	8006d1e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d3a:	f7ff fd17 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f986 	bl	8007050 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e001      	b.n	8006d56 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	715a      	strb	r2, [r3, #5]

    return status;
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	e000      	b.n	8006d68 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8006d78:	2300      	movs	r3, #0
 8006d7a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8006d7c:	f107 020c 	add.w	r2, r7, #12
 8006d80:	2302      	movs	r3, #2
 8006d82:	2112      	movs	r1, #18
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fef4 	bl	8006b72 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8006d8a:	7b3b      	ldrb	r3, [r7, #12]
 8006d8c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	b21a      	sxth	r2, r3
 8006d94:	7b7b      	ldrb	r3, [r7, #13]
 8006d96:	b21b      	sxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f011 fb8b 	bl	80184c4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006dae:	89fb      	ldrh	r3, [r7, #14]
 8006db0:	085b      	lsrs	r3, r3, #1
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f011 fb90 	bl	80184e0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f011 fbdf 	bl	8018590 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f011 fbe4 	bl	80185ac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	091b      	lsrs	r3, r3, #4
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f011 fbe9 	bl	80185c8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006df6:	89fb      	ldrh	r3, [r7, #14]
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f011 fbb6 	bl	8018574 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006e08:	89fb      	ldrh	r3, [r7, #14]
 8006e0a:	099b      	lsrs	r3, r3, #6
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f011 fb71 	bl	80184fc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
 8006e1c:	09db      	lsrs	r3, r3, #7
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006e26:	89fb      	ldrh	r3, [r7, #14]
 8006e28:	0a1b      	lsrs	r3, r3, #8
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006e32:	2101      	movs	r1, #1
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f011 fb6f 	bl	8018518 <HAL_SUBGHZ_CADStatusCallback>
 8006e3a:	e003      	b.n	8006e44 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f011 fb6a 	bl	8018518 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	0a5b      	lsrs	r3, r3, #9
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f011 fb7f 	bl	8018554 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8006e56:	f107 020c 	add.w	r2, r7, #12
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fe28 	bl	8006ab4 <HAL_SUBGHZ_ExecSetCmd>
}
 8006e64:	bf00      	nop
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006e80:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006e88:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006e8a:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e8c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006e90:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006e92:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a04      	ldr	r2, [pc, #16]	; (8006ea8 <SUBGHZSPI_Init+0x3c>)
 8006e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e9c:	6013      	str	r3, [r2, #0]
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr
 8006ea8:	58010000 	.word	0x58010000

08006eac <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ebc:	4b23      	ldr	r3, [pc, #140]	; (8006f4c <SUBGHZSPI_Transmit+0xa0>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	0cdb      	lsrs	r3, r3, #19
 8006eca:	2264      	movs	r2, #100	; 0x64
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	609a      	str	r2, [r3, #8]
      break;
 8006ee2:	e008      	b.n	8006ef6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006eea:	4b19      	ldr	r3, [pc, #100]	; (8006f50 <SUBGHZSPI_Transmit+0xa4>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d1ed      	bne.n	8006ed2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <SUBGHZSPI_Transmit+0xa8>)
 8006ef8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f00:	4b12      	ldr	r3, [pc, #72]	; (8006f4c <SUBGHZSPI_Transmit+0xa0>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	0cdb      	lsrs	r3, r3, #19
 8006f0e:	2264      	movs	r2, #100	; 0x64
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e008      	b.n	8006f3a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <SUBGHZSPI_Transmit+0xa4>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d1ed      	bne.n	8006f16 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <SUBGHZSPI_Transmit+0xa4>)
 8006f3c:	68db      	ldr	r3, [r3, #12]

  return status;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20000000 	.word	0x20000000
 8006f50:	58010000 	.word	0x58010000
 8006f54:	5801000c 	.word	0x5801000c

08006f58 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f66:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <SUBGHZSPI_Receive+0xa4>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	00db      	lsls	r3, r3, #3
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	0cdb      	lsrs	r3, r3, #19
 8006f74:	2264      	movs	r2, #100	; 0x64
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d105      	bne.n	8006f8e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	609a      	str	r2, [r3, #8]
      break;
 8006f8c:	e008      	b.n	8006fa0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <SUBGHZSPI_Receive+0xa8>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d1ed      	bne.n	8006f7c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006fa0:	4b18      	ldr	r3, [pc, #96]	; (8007004 <SUBGHZSPI_Receive+0xac>)
 8006fa2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	22ff      	movs	r2, #255	; 0xff
 8006fa8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <SUBGHZSPI_Receive+0xa4>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	0cdb      	lsrs	r3, r3, #19
 8006fb8:	2264      	movs	r2, #100	; 0x64
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	609a      	str	r2, [r3, #8]
      break;
 8006fd0:	e008      	b.n	8006fe4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006fd8:	4b09      	ldr	r3, [pc, #36]	; (8007000 <SUBGHZSPI_Receive+0xa8>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d1ed      	bne.n	8006fc0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <SUBGHZSPI_Receive+0xa8>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	701a      	strb	r2, [r3, #0]

  return status;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000000 	.word	0x20000000
 8007000:	58010000 	.word	0x58010000
 8007004:	5801000c 	.word	0x5801000c

08007008 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d111      	bne.n	800703c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <SUBGHZ_CheckDeviceReady+0x44>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4613      	mov	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007028:	f7ff fbb0 	bl	800678c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3b01      	subs	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f9      	bne.n	800702c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007038:	f7ff fb98 	bl	800676c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f807 	bl	8007050 <SUBGHZ_WaitOnBusy>
 8007042:	4603      	mov	r3, r0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20000000 	.word	0x20000000

08007050 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <SUBGHZ_WaitOnBusy+0x58>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	4413      	add	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	0d1b      	lsrs	r3, r3, #20
 800706a:	2264      	movs	r2, #100	; 0x64
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007072:	f7ff fbb9 	bl	80067e8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007076:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	609a      	str	r2, [r3, #8]
      break;
 8007088:	e009      	b.n	800709e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3b01      	subs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007090:	f7ff fb98 	bl	80067c4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4013      	ands	r3, r2
 800709a:	2b01      	cmp	r3, #1
 800709c:	d0e9      	beq.n	8007072 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000000 	.word	0x20000000

080070ac <LL_RCC_GetUSARTClockSource>:
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80070b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	401a      	ands	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	4313      	orrs	r3, r2
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <LL_RCC_GetLPUARTClockSource>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80070d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4013      	ands	r3, r2
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e042      	b.n	8007186 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb f802 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2224      	movs	r2, #36	; 0x24
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0201 	bic.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fc4b 	bl	80079cc <UART_SetConfig>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e022      	b.n	8007186 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fe8f 	bl	8007e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800716c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 ff15 	bl	8007fae <UART_CheckIdleState>
 8007184:	4603      	mov	r3, r0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d142      	bne.n	800722e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_UART_Receive_IT+0x24>
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e03b      	b.n	8007230 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Receive_IT+0x36>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e034      	b.n	8007230 <HAL_UART_Receive_IT+0xa0>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <HAL_UART_Receive_IT+0xa8>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01f      	beq.n	800721e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d018      	beq.n	800721e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	613b      	str	r3, [r7, #16]
   return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	623b      	str	r3, [r7, #32]
 800720c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	69f9      	ldr	r1, [r7, #28]
 8007210:	6a3a      	ldr	r2, [r7, #32]
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	61bb      	str	r3, [r7, #24]
   return(result);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e6      	bne.n	80071ec <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	461a      	mov	r2, r3
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 ffd5 	bl	80081d4 <UART_Start_Receive_IT>
 800722a:	4603      	mov	r3, r0
 800722c:	e000      	b.n	8007230 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800722e:	2302      	movs	r3, #2
  }
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	; 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40008000 	.word	0x40008000

0800723c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007250:	2b20      	cmp	r3, #32
 8007252:	d17a      	bne.n	800734a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Transmit_DMA+0x24>
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e073      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_UART_Transmit_DMA+0x36>
 800726e:	2302      	movs	r3, #2
 8007270:	e06c      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	88fa      	ldrh	r2, [r7, #6]
 800728c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2221      	movs	r2, #33	; 0x21
 800729c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02c      	beq.n	8007302 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ac:	4a29      	ldr	r2, [pc, #164]	; (8007354 <HAL_UART_Transmit_DMA+0x118>)
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b4:	4a28      	ldr	r2, [pc, #160]	; (8007358 <HAL_UART_Transmit_DMA+0x11c>)
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072bc:	4a27      	ldr	r2, [pc, #156]	; (800735c <HAL_UART_Transmit_DMA+0x120>)
 80072be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072c4:	2200      	movs	r2, #0
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	4619      	mov	r1, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3328      	adds	r3, #40	; 0x28
 80072d8:	461a      	mov	r2, r3
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	f7fc fdba 	bl	8003e54 <HAL_DMA_Start_IT>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2210      	movs	r2, #16
 80072ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e024      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2240      	movs	r2, #64	; 0x40
 8007308:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	613b      	str	r3, [r7, #16]
   return(result);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007332:	623a      	str	r2, [r7, #32]
 8007334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	69f9      	ldr	r1, [r7, #28]
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	; 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	08008523 	.word	0x08008523
 8007358:	080085bd 	.word	0x080085bd
 800735c:	080085d9 	.word	0x080085d9

08007360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b0ba      	sub	sp, #232	; 0xe8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800738a:	f640 030f 	movw	r3, #2063	; 0x80f
 800738e:	4013      	ands	r3, r2
 8007390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11b      	bne.n	80073d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 82d6 	beq.w	8007976 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
      }
      return;
 80073d2:	e2d0      	b.n	8007976 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 811f 	beq.w	800761c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073e2:	4b8b      	ldr	r3, [pc, #556]	; (8007610 <HAL_UART_IRQHandler+0x2b0>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073ee:	4b89      	ldr	r3, [pc, #548]	; (8007614 <HAL_UART_IRQHandler+0x2b4>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8112 	beq.w	800761c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d011      	beq.n	8007428 <HAL_UART_IRQHandler+0xc8>
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2201      	movs	r2, #1
 8007416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d011      	beq.n	8007458 <HAL_UART_IRQHandler+0xf8>
 8007434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2202      	movs	r2, #2
 8007446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800744e:	f043 0204 	orr.w	r2, r3, #4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_UART_IRQHandler+0x128>
 8007464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2204      	movs	r2, #4
 8007476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747e:	f043 0202 	orr.w	r2, r3, #2
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074a4:	4b5a      	ldr	r3, [pc, #360]	; (8007610 <HAL_UART_IRQHandler+0x2b0>)
 80074a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2208      	movs	r2, #8
 80074b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ba:	f043 0208 	orr.w	r2, r3, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d012      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 823c 	beq.w	800797a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d013      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800750e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800751a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800753c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d005      	beq.n	800755a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800754e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007556:	2b00      	cmp	r3, #0
 8007558:	d04f      	beq.n	80075fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ff7c 	bl	8008458 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d141      	bne.n	80075f2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800759a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800759e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1d9      	bne.n	800756e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d013      	beq.n	80075ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c6:	4a14      	ldr	r2, [pc, #80]	; (8007618 <HAL_UART_IRQHandler+0x2b8>)
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc fd1c 	bl	800400c <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d017      	beq.n	800760a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00f      	b.n	800760a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9d9 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e00b      	b.n	800760a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9d5 	bl	80079a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	e007      	b.n	800760a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9d1 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007608:	e1b7      	b.n	800797a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760a:	bf00      	nop
    return;
 800760c:	e1b5      	b.n	800797a <HAL_UART_IRQHandler+0x61a>
 800760e:	bf00      	nop
 8007610:	10000001 	.word	0x10000001
 8007614:	04000120 	.word	0x04000120
 8007618:	08008659 	.word	0x08008659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007620:	2b01      	cmp	r3, #1
 8007622:	f040 814a 	bne.w	80078ba <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 8143 	beq.w	80078ba <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 813c 	beq.w	80078ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2210      	movs	r2, #16
 8007648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b40      	cmp	r3, #64	; 0x40
 8007656:	f040 80b5 	bne.w	80077c4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007666:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8187 	beq.w	800797e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800767a:	429a      	cmp	r2, r3
 800767c:	f080 817f 	bcs.w	800797e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	f040 8086 	bne.w	80077a8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1da      	bne.n	800769c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800770a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800770e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800771c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e1      	bne.n	80076e6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800774c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e3      	bne.n	8007722 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007778:	f023 0310 	bic.w	r3, r3, #16
 800777c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800778a:	65bb      	str	r3, [r7, #88]	; 0x58
 800778c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007790:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e4      	bne.n	8007768 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fc fbd4 	bl	8003f50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8f9 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077c2:	e0dc      	b.n	800797e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80ce 	beq.w	8007982 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80077e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80c9 	beq.w	8007982 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007812:	647b      	str	r3, [r7, #68]	; 0x44
 8007814:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e4      	bne.n	80077f0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	623b      	str	r3, [r7, #32]
   return(result);
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800784e:	633a      	str	r2, [r7, #48]	; 0x30
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e1      	bne.n	8007826 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60fb      	str	r3, [r7, #12]
   return(result);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	617b      	str	r3, [r7, #20]
   return(result);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e4      	bne.n	8007876 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f87e 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078b8:	e063      	b.n	8007982 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00e      	beq.n	80078e4 <HAL_UART_IRQHandler+0x584>
 80078c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d008      	beq.n	80078e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fb59 	bl	8008f94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078e2:	e051      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d014      	beq.n	800791a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790c:	2b00      	cmp	r3, #0
 800790e:	d03a      	beq.n	8007986 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
    }
    return;
 8007918:	e035      	b.n	8007986 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <HAL_UART_IRQHandler+0x5da>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fea6 	bl	8008684 <UART_EndTransmit_IT>
    return;
 8007938:	e026      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_UART_IRQHandler+0x5fa>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 fb30 	bl	8008fb8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007958:	e016      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d010      	beq.n	8007988 <HAL_UART_IRQHandler+0x628>
 8007966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796a:	2b00      	cmp	r3, #0
 800796c:	da0c      	bge.n	8007988 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 fb19 	bl	8008fa6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007974:	e008      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
      return;
 8007976:	bf00      	nop
 8007978:	e006      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
    return;
 800797a:	bf00      	nop
 800797c:	e004      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
      return;
 800797e:	bf00      	nop
 8007980:	e002      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
      return;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <HAL_UART_IRQHandler+0x628>
    return;
 8007986:	bf00      	nop
  }
}
 8007988:	37e8      	adds	r7, #232	; 0xe8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop

08007990 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr

080079a2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
	...

080079cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079cc:	b5b0      	push	{r4, r5, r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4bab      	ldr	r3, [pc, #684]	; (8007ca4 <UART_SetConfig+0x2d8>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6812      	ldr	r2, [r2, #0]
 80079fe:	69f9      	ldr	r1, [r7, #28]
 8007a00:	430b      	orrs	r3, r1
 8007a02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4aa0      	ldr	r2, [pc, #640]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a3e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	69f9      	ldr	r1, [r7, #28]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	f023 010f 	bic.w	r1, r3, #15
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a91      	ldr	r2, [pc, #580]	; (8007cac <UART_SetConfig+0x2e0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d122      	bne.n	8007ab2 <UART_SetConfig+0xe6>
 8007a6c:	2003      	movs	r0, #3
 8007a6e:	f7ff fb1d 	bl	80070ac <LL_RCC_GetUSARTClockSource>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d817      	bhi.n	8007aac <UART_SetConfig+0xe0>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0xb8>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007aa1 	.word	0x08007aa1
 8007a8c:	08007a9b 	.word	0x08007a9b
 8007a90:	08007aa7 	.word	0x08007aa7
 8007a94:	2301      	movs	r3, #1
 8007a96:	76fb      	strb	r3, [r7, #27]
 8007a98:	e072      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	76fb      	strb	r3, [r7, #27]
 8007a9e:	e06f      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	76fb      	strb	r3, [r7, #27]
 8007aa4:	e06c      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	76fb      	strb	r3, [r7, #27]
 8007aaa:	e069      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007aac:	2310      	movs	r3, #16
 8007aae:	76fb      	strb	r3, [r7, #27]
 8007ab0:	e066      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a7e      	ldr	r2, [pc, #504]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d134      	bne.n	8007b26 <UART_SetConfig+0x15a>
 8007abc:	200c      	movs	r0, #12
 8007abe:	f7ff faf5 	bl	80070ac <LL_RCC_GetUSARTClockSource>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007ac8:	2b0c      	cmp	r3, #12
 8007aca:	d829      	bhi.n	8007b20 <UART_SetConfig+0x154>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x108>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007b09 	.word	0x08007b09
 8007ad8:	08007b21 	.word	0x08007b21
 8007adc:	08007b21 	.word	0x08007b21
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b21 	.word	0x08007b21
 8007aec:	08007b21 	.word	0x08007b21
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007b0f 	.word	0x08007b0f
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b1b 	.word	0x08007b1b
 8007b08:	2300      	movs	r3, #0
 8007b0a:	76fb      	strb	r3, [r7, #27]
 8007b0c:	e038      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	76fb      	strb	r3, [r7, #27]
 8007b12:	e035      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b14:	2304      	movs	r3, #4
 8007b16:	76fb      	strb	r3, [r7, #27]
 8007b18:	e032      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	76fb      	strb	r3, [r7, #27]
 8007b1e:	e02f      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b20:	2310      	movs	r3, #16
 8007b22:	76fb      	strb	r3, [r7, #27]
 8007b24:	e02c      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a5f      	ldr	r2, [pc, #380]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d125      	bne.n	8007b7c <UART_SetConfig+0x1b0>
 8007b30:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007b34:	f7ff facc 	bl	80070d0 <LL_RCC_GetLPUARTClockSource>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b3e:	d017      	beq.n	8007b70 <UART_SetConfig+0x1a4>
 8007b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b44:	d817      	bhi.n	8007b76 <UART_SetConfig+0x1aa>
 8007b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b4a:	d00b      	beq.n	8007b64 <UART_SetConfig+0x198>
 8007b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b50:	d811      	bhi.n	8007b76 <UART_SetConfig+0x1aa>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <UART_SetConfig+0x192>
 8007b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5a:	d006      	beq.n	8007b6a <UART_SetConfig+0x19e>
 8007b5c:	e00b      	b.n	8007b76 <UART_SetConfig+0x1aa>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	76fb      	strb	r3, [r7, #27]
 8007b62:	e00d      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b64:	2302      	movs	r3, #2
 8007b66:	76fb      	strb	r3, [r7, #27]
 8007b68:	e00a      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b6a:	2304      	movs	r3, #4
 8007b6c:	76fb      	strb	r3, [r7, #27]
 8007b6e:	e007      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b70:	2308      	movs	r3, #8
 8007b72:	76fb      	strb	r3, [r7, #27]
 8007b74:	e004      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b76:	2310      	movs	r3, #16
 8007b78:	76fb      	strb	r3, [r7, #27]
 8007b7a:	e001      	b.n	8007b80 <UART_SetConfig+0x1b4>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a48      	ldr	r2, [pc, #288]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f040 8098 	bne.w	8007cbc <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b8c:	7efb      	ldrb	r3, [r7, #27]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d823      	bhi.n	8007bda <UART_SetConfig+0x20e>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x1cc>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bdb 	.word	0x08007bdb
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bdb 	.word	0x08007bdb
 8007ba8:	08007bcb 	.word	0x08007bcb
 8007bac:	08007bdb 	.word	0x08007bdb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007bdb 	.word	0x08007bdb
 8007bb8:	08007bd3 	.word	0x08007bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd ff56 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007bc0:	6178      	str	r0, [r7, #20]
        break;
 8007bc2:	e00f      	b.n	8007be4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc4:	4b3b      	ldr	r3, [pc, #236]	; (8007cb4 <UART_SetConfig+0x2e8>)
 8007bc6:	617b      	str	r3, [r7, #20]
        break;
 8007bc8:	e00c      	b.n	8007be4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bca:	f7fd fe9b 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007bce:	6178      	str	r0, [r7, #20]
        break;
 8007bd0:	e008      	b.n	8007be4 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd6:	617b      	str	r3, [r7, #20]
        break;
 8007bd8:	e004      	b.n	8007be4 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	76bb      	strb	r3, [r7, #26]
        break;
 8007be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8128 	beq.w	8007e3c <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	4a31      	ldr	r2, [pc, #196]	; (8007cb8 <UART_SetConfig+0x2ec>)
 8007bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4413      	add	r3, r2
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d305      	bcc.n	8007c1c <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d902      	bls.n	8007c22 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	76bb      	strb	r3, [r7, #26]
 8007c20:	e10c      	b.n	8007e3c <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f04f 0100 	mov.w	r1, #0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	4a22      	ldr	r2, [pc, #136]	; (8007cb8 <UART_SetConfig+0x2ec>)
 8007c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f04f 0300 	mov.w	r3, #0
 8007c3a:	f7f8 ff8f 	bl	8000b5c <__aeabi_uldivmod>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4610      	mov	r0, r2
 8007c44:	4619      	mov	r1, r3
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	f04f 0300 	mov.w	r3, #0
 8007c4e:	020b      	lsls	r3, r1, #8
 8007c50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c54:	0202      	lsls	r2, r0, #8
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	6849      	ldr	r1, [r1, #4]
 8007c5a:	0849      	lsrs	r1, r1, #1
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	f04f 0100 	mov.w	r1, #0
 8007c62:	1814      	adds	r4, r2, r0
 8007c64:	eb43 0501 	adc.w	r5, r3, r1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7f8 ff71 	bl	8000b5c <__aeabi_uldivmod>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4613      	mov	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c88:	d308      	bcc.n	8007c9c <UART_SetConfig+0x2d0>
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c90:	d204      	bcs.n	8007c9c <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e0cf      	b.n	8007e3c <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	76bb      	strb	r3, [r7, #26]
 8007ca0:	e0cc      	b.n	8007e3c <UART_SetConfig+0x470>
 8007ca2:	bf00      	nop
 8007ca4:	cfff69f3 	.word	0xcfff69f3
 8007ca8:	40008000 	.word	0x40008000
 8007cac:	40013800 	.word	0x40013800
 8007cb0:	40004400 	.word	0x40004400
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	0801a98c 	.word	0x0801a98c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc4:	d165      	bne.n	8007d92 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8007cc6:	7efb      	ldrb	r3, [r7, #27]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d828      	bhi.n	8007d1e <UART_SetConfig+0x352>
 8007ccc:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <UART_SetConfig+0x308>)
 8007cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd2:	bf00      	nop
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007d01 	.word	0x08007d01
 8007cdc:	08007d09 	.word	0x08007d09
 8007ce0:	08007d1f 	.word	0x08007d1f
 8007ce4:	08007d0f 	.word	0x08007d0f
 8007ce8:	08007d1f 	.word	0x08007d1f
 8007cec:	08007d1f 	.word	0x08007d1f
 8007cf0:	08007d1f 	.word	0x08007d1f
 8007cf4:	08007d17 	.word	0x08007d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf8:	f7fd feb8 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007cfc:	6178      	str	r0, [r7, #20]
        break;
 8007cfe:	e013      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d00:	f7fd fec6 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 8007d04:	6178      	str	r0, [r7, #20]
        break;
 8007d06:	e00f      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d08:	4b56      	ldr	r3, [pc, #344]	; (8007e64 <UART_SetConfig+0x498>)
 8007d0a:	617b      	str	r3, [r7, #20]
        break;
 8007d0c:	e00c      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0e:	f7fd fdf9 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007d12:	6178      	str	r0, [r7, #20]
        break;
 8007d14:	e008      	b.n	8007d28 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1a:	617b      	str	r3, [r7, #20]
        break;
 8007d1c:	e004      	b.n	8007d28 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	76bb      	strb	r3, [r7, #26]
        break;
 8007d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8086 	beq.w	8007e3c <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	4a4c      	ldr	r2, [pc, #304]	; (8007e68 <UART_SetConfig+0x49c>)
 8007d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d42:	005a      	lsls	r2, r3, #1
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	085b      	lsrs	r3, r3, #1
 8007d4a:	441a      	add	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	d916      	bls.n	8007d8c <UART_SetConfig+0x3c0>
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d64:	d212      	bcs.n	8007d8c <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f023 030f 	bic.w	r3, r3, #15
 8007d6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	89fb      	ldrh	r3, [r7, #14]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	89fa      	ldrh	r2, [r7, #14]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e057      	b.n	8007e3c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	76bb      	strb	r3, [r7, #26]
 8007d90:	e054      	b.n	8007e3c <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d92:	7efb      	ldrb	r3, [r7, #27]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d828      	bhi.n	8007dea <UART_SetConfig+0x41e>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x3d4>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007deb 	.word	0x08007deb
 8007db0:	08007ddb 	.word	0x08007ddb
 8007db4:	08007deb 	.word	0x08007deb
 8007db8:	08007deb 	.word	0x08007deb
 8007dbc:	08007deb 	.word	0x08007deb
 8007dc0:	08007de3 	.word	0x08007de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd fe52 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6178      	str	r0, [r7, #20]
        break;
 8007dca:	e013      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dcc:	f7fd fe60 	bl	8005a90 <HAL_RCC_GetPCLK2Freq>
 8007dd0:	6178      	str	r0, [r7, #20]
        break;
 8007dd2:	e00f      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <UART_SetConfig+0x498>)
 8007dd6:	617b      	str	r3, [r7, #20]
        break;
 8007dd8:	e00c      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fd fd93 	bl	8005904 <HAL_RCC_GetSysClockFreq>
 8007dde:	6178      	str	r0, [r7, #20]
        break;
 8007de0:	e008      	b.n	8007df4 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007de6:	617b      	str	r3, [r7, #20]
        break;
 8007de8:	e004      	b.n	8007df4 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	76bb      	strb	r3, [r7, #26]
        break;
 8007df2:	bf00      	nop
    }

    if (pclk != 0U)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d020      	beq.n	8007e3c <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <UART_SetConfig+0x49c>)
 8007e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e04:	461a      	mov	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	441a      	add	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d908      	bls.n	8007e38 <UART_SetConfig+0x46c>
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d204      	bcs.n	8007e38 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	e001      	b.n	8007e3c <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e58:	7ebb      	ldrb	r3, [r7, #26]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bdb0      	pop	{r4, r5, r7, pc}
 8007e62:	bf00      	nop
 8007e64:	00f42400 	.word	0x00f42400
 8007e68:	0801a98c 	.word	0x0801a98c

08007e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01a      	beq.n	8007f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6a:	d10a      	bne.n	8007f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af02      	add	r7, sp, #8
 8007fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fbe:	f7f9 fcbd 	bl	800193c <HAL_GetTick>
 8007fc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d10e      	bne.n	8007ff0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f82f 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e025      	b.n	800803c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d10e      	bne.n	800801c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ffe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f819 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e00f      	b.n	800803c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2220      	movs	r2, #32
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2220      	movs	r2, #32
 8008028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b09c      	sub	sp, #112	; 0x70
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	4613      	mov	r3, r2
 8008052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008054:	e0a9      	b.n	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	f000 80a5 	beq.w	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008060:	f7f9 fc6c 	bl	800193c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <UART_WaitOnFlagUntilTimeout+0x32>
 8008070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008072:	2b00      	cmp	r3, #0
 8008074:	d140      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800808a:	667b      	str	r3, [r7, #100]	; 0x64
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008096:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800809a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80080a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b2:	e853 3f00 	ldrex	r3, [r3]
 80080b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f023 0301 	bic.w	r3, r3, #1
 80080be:	663b      	str	r3, [r7, #96]	; 0x60
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3308      	adds	r3, #8
 80080c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80080ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e5      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e069      	b.n	80081cc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d051      	beq.n	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008114:	d149      	bne.n	80081aa <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800811e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813e:	637b      	str	r3, [r7, #52]	; 0x34
 8008140:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e6      	bne.n	8008120 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3308      	adds	r3, #8
 8008158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	613b      	str	r3, [r7, #16]
   return(result);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f023 0301 	bic.w	r3, r3, #1
 8008168:	66bb      	str	r3, [r7, #104]	; 0x68
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008172:	623a      	str	r2, [r7, #32]
 8008174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	69f9      	ldr	r1, [r7, #28]
 8008178:	6a3a      	ldr	r2, [r7, #32]
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e5      	bne.n	8008152 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e010      	b.n	80081cc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69da      	ldr	r2, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4013      	ands	r3, r2
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	bf0c      	ite	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	2300      	movne	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	f43f af46 	beq.w	8008056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3770      	adds	r7, #112	; 0x70
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b09d      	sub	sp, #116	; 0x74
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008206:	d10e      	bne.n	8008226 <UART_Start_Receive_IT+0x52>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <UART_Start_Receive_IT+0x48>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800821a:	e02d      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008224:	e028      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10d      	bne.n	800824a <UART_Start_Receive_IT+0x76>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <UART_Start_Receive_IT+0x6c>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	22ff      	movs	r2, #255	; 0xff
 800823a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800823e:	e01b      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	227f      	movs	r2, #127	; 0x7f
 8008244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008248:	e016      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008252:	d10d      	bne.n	8008270 <UART_Start_Receive_IT+0x9c>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <UART_Start_Receive_IT+0x92>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	227f      	movs	r2, #127	; 0x7f
 8008260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008264:	e008      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	223f      	movs	r2, #63	; 0x3f
 800826a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800826e:	e003      	b.n	8008278 <UART_Start_Receive_IT+0xa4>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2222      	movs	r2, #34	; 0x22
 8008284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3308      	adds	r3, #8
 80082a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80082aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c4:	d14d      	bne.n	8008362 <UART_Start_Receive_IT+0x18e>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d347      	bcc.n	8008362 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082da:	d107      	bne.n	80082ec <UART_Start_Receive_IT+0x118>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	4a38      	ldr	r2, [pc, #224]	; (80083c8 <UART_Start_Receive_IT+0x1f4>)
 80082e8:	671a      	str	r2, [r3, #112]	; 0x70
 80082ea:	e002      	b.n	80082f2 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a37      	ldr	r2, [pc, #220]	; (80083cc <UART_Start_Receive_IT+0x1f8>)
 80082f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800830e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008318:	64bb      	str	r3, [r7, #72]	; 0x48
 800831a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800831e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e6      	bne.n	80082fa <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008342:	667b      	str	r3, [r7, #100]	; 0x64
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800834c:	637a      	str	r2, [r7, #52]	; 0x34
 800834e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_Start_Receive_IT+0x158>
 8008360:	e02c      	b.n	80083bc <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	d107      	bne.n	800837c <UART_Start_Receive_IT+0x1a8>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <UART_Start_Receive_IT+0x1fc>)
 8008378:	671a      	str	r2, [r3, #112]	; 0x70
 800837a:	e002      	b.n	8008382 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <UART_Start_Receive_IT+0x200>)
 8008380:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	613b      	str	r3, [r7, #16]
   return(result);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800839e:	663b      	str	r3, [r7, #96]	; 0x60
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	69f9      	ldr	r1, [r7, #28]
 80083ae:	6a3a      	ldr	r2, [r7, #32]
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e6      	bne.n	800838a <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3774      	adds	r7, #116	; 0x74
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr
 80083c8:	08008c95 	.word	0x08008c95
 80083cc:	0800899d 	.word	0x0800899d
 80083d0:	0800883b 	.word	0x0800883b
 80083d4:	080086db 	.word	0x080086db

080083d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b08f      	sub	sp, #60	; 0x3c
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008400:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e6      	bne.n	80083e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	60bb      	str	r3, [r7, #8]
   return(result);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008428:	633b      	str	r3, [r7, #48]	; 0x30
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008432:	61ba      	str	r2, [r7, #24]
 8008434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6979      	ldr	r1, [r7, #20]
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	613b      	str	r3, [r7, #16]
   return(result);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800844e:	bf00      	nop
 8008450:	373c      	adds	r7, #60	; 0x3c
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b095      	sub	sp, #84	; 0x54
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	643b      	str	r3, [r7, #64]	; 0x40
 8008480:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e6      	bne.n	8008460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	e853 3f00 	ldrex	r3, [r3]
 80084a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e3      	bne.n	8008492 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d118      	bne.n	8008504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0310 	bic.w	r3, r3, #16
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	613b      	str	r3, [r7, #16]
   return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008518:	bf00      	nop
 800851a:	3754      	adds	r7, #84	; 0x54
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b090      	sub	sp, #64	; 0x40
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d137      	bne.n	80085ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	2200      	movs	r2, #0
 8008542:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	623b      	str	r3, [r7, #32]
   return(result);
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800855c:	63bb      	str	r3, [r7, #56]	; 0x38
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008566:	633a      	str	r2, [r7, #48]	; 0x30
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e5      	bne.n	8008546 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	60fb      	str	r3, [r7, #12]
   return(result);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	69b9      	ldr	r1, [r7, #24]
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	617b      	str	r3, [r7, #20]
   return(result);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085ac:	e002      	b.n	80085b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80085ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085b0:	f7f9 ff20 	bl	80023f4 <HAL_UART_TxCpltCallback>
}
 80085b4:	bf00      	nop
 80085b6:	3740      	adds	r7, #64	; 0x40
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff f9e0 	bl	8007990 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008600:	2b80      	cmp	r3, #128	; 0x80
 8008602:	d109      	bne.n	8008618 <UART_DMAError+0x40>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b21      	cmp	r3, #33	; 0x21
 8008608:	d106      	bne.n	8008618 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008612:	6978      	ldr	r0, [r7, #20]
 8008614:	f7ff fee0 	bl	80083d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d109      	bne.n	800863a <UART_DMAError+0x62>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b22      	cmp	r3, #34	; 0x22
 800862a:	d106      	bne.n	800863a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2200      	movs	r2, #0
 8008630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008634:	6978      	ldr	r0, [r7, #20]
 8008636:	f7ff ff0f 	bl	8008458 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008640:	f043 0210 	orr.w	r2, r3, #16
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800864a:	6978      	ldr	r0, [r7, #20]
 800864c:	f7ff f9a9 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008650:	bf00      	nop
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff f993 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	60bb      	str	r3, [r7, #8]
   return(result);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	61bb      	str	r3, [r7, #24]
 80086ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	613b      	str	r3, [r7, #16]
   return(result);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e6      	bne.n	800868c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7f9 fe91 	bl	80023f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086d2:	bf00      	nop
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b096      	sub	sp, #88	; 0x58
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f2:	2b22      	cmp	r3, #34	; 0x22
 80086f4:	f040 8095 	bne.w	8008822 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008702:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008706:	b2d9      	uxtb	r1, r3
 8008708:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800870c:	b2da      	uxtb	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	400a      	ands	r2, r1
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800873a:	b29b      	uxth	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d178      	bne.n	8008832 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008754:	653b      	str	r3, [r7, #80]	; 0x50
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875e:	647b      	str	r3, [r7, #68]	; 0x44
 8008760:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	623b      	str	r3, [r7, #32]
   return(result);
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	f023 0301 	bic.w	r3, r3, #1
 8008788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008792:	633a      	str	r2, [r7, #48]	; 0x30
 8008794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e5      	bne.n	8008772 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d12e      	bne.n	800881a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0310 	bic.w	r3, r3, #16
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	69b9      	ldr	r1, [r7, #24]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	617b      	str	r3, [r7, #20]
   return(result);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e6      	bne.n	80087c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b10      	cmp	r3, #16
 8008800:	d103      	bne.n	800880a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2210      	movs	r2, #16
 8008808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff f8ce 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008818:	e00b      	b.n	8008832 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7f9 fdf8 	bl	8002410 <HAL_UART_RxCpltCallback>
}
 8008820:	e007      	b.n	8008832 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0208 	orr.w	r2, r2, #8
 8008830:	619a      	str	r2, [r3, #24]
}
 8008832:	bf00      	nop
 8008834:	3758      	adds	r7, #88	; 0x58
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b096      	sub	sp, #88	; 0x58
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008848:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008852:	2b22      	cmp	r3, #34	; 0x22
 8008854:	f040 8095 	bne.w	8008982 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008866:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008868:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800886c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008870:	4013      	ands	r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008876:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	1c9a      	adds	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d178      	bne.n	8008992 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088be:	643b      	str	r3, [r7, #64]	; 0x40
 80088c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e6      	bne.n	80088a0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f023 0301 	bic.w	r3, r3, #1
 80088e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e5      	bne.n	80088d2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008918:	2b01      	cmp	r3, #1
 800891a:	d12e      	bne.n	800897a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f023 0310 	bic.w	r3, r3, #16
 8008936:	647b      	str	r3, [r7, #68]	; 0x44
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	61bb      	str	r3, [r7, #24]
 8008942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6979      	ldr	r1, [r7, #20]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	613b      	str	r3, [r7, #16]
   return(result);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e6      	bne.n	8008922 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b10      	cmp	r3, #16
 8008960:	d103      	bne.n	800896a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2210      	movs	r2, #16
 8008968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff f81e 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008978:	e00b      	b.n	8008992 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7f9 fd48 	bl	8002410 <HAL_UART_RxCpltCallback>
}
 8008980:	e007      	b.n	8008992 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699a      	ldr	r2, [r3, #24]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0208 	orr.w	r2, r2, #8
 8008990:	619a      	str	r2, [r3, #24]
}
 8008992:	bf00      	nop
 8008994:	3758      	adds	r7, #88	; 0x58
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b0a6      	sub	sp, #152	; 0x98
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d2:	2b22      	cmp	r3, #34	; 0x22
 80089d4:	f040 814f 	bne.w	8008c76 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089e2:	e0f6      	b.n	8008bd2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089ee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80089f2:	b2d9      	uxtb	r1, r3
 80089f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fe:	400a      	ands	r2, r1
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d053      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d011      	beq.n	8008a66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a5c:	f043 0201 	orr.w	r2, r3, #1
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d011      	beq.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2202      	movs	r2, #2
 8008a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8c:	f043 0204 	orr.w	r2, r3, #4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d011      	beq.n	8008ac6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2204      	movs	r2, #4
 8008ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abc:	f043 0202 	orr.w	r2, r3, #2
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d006      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fe ff66 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d173      	bne.n	8008bd2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b0e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e4      	bne.n	8008aea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3308      	adds	r3, #8
 8008b26:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b44:	657a      	str	r2, [r7, #84]	; 0x54
 8008b46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e3      	bne.n	8008b20 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d12e      	bne.n	8008bcc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	f023 0310 	bic.w	r3, r3, #16
 8008b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b92:	643b      	str	r3, [r7, #64]	; 0x40
 8008b94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e6      	bne.n	8008b74 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	2b10      	cmp	r3, #16
 8008bb2:	d103      	bne.n	8008bbc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2210      	movs	r2, #16
 8008bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7fe fef5 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8008bca:	e002      	b.n	8008bd2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7f9 fc1f 	bl	8002410 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d006      	beq.n	8008be8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f47f aefe 	bne.w	80089e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008bf2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d045      	beq.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d23e      	bcs.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e5      	bne.n	8008c08 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008c40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f043 0320 	orr.w	r3, r3, #32
 8008c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c60:	61bb      	str	r3, [r7, #24]
 8008c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	6979      	ldr	r1, [r7, #20]
 8008c66:	69ba      	ldr	r2, [r7, #24]
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e6      	bne.n	8008c42 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c74:	e007      	b.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 0208 	orr.w	r2, r2, #8
 8008c84:	619a      	str	r2, [r3, #24]
}
 8008c86:	bf00      	nop
 8008c88:	3798      	adds	r7, #152	; 0x98
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	080086db 	.word	0x080086db

08008c94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b0a8      	sub	sp, #160	; 0xa0
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ca2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cca:	2b22      	cmp	r3, #34	; 0x22
 8008ccc:	f040 8153 	bne.w	8008f76 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cd6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cda:	e0fa      	b.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008cee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008cf2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d04:	1c9a      	adds	r2, r3, #2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	69db      	ldr	r3, [r3, #28]
 8008d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d053      	beq.n	8008dda <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d011      	beq.n	8008d62 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008d3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d58:	f043 0201 	orr.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d011      	beq.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d88:	f043 0204 	orr.w	r2, r3, #4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d011      	beq.n	8008dc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2204      	movs	r2, #4
 8008db0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008db8:	f043 0202 	orr.w	r2, r3, #2
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7fe fde8 	bl	80079a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d175      	bne.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e0a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e4      	bne.n	8008de6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3308      	adds	r3, #8
 8008e22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e44:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e1      	bne.n	8008e1c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d12e      	bne.n	8008ecc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	f023 0310 	bic.w	r3, r3, #16
 8008e88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e92:	647b      	str	r3, [r7, #68]	; 0x44
 8008e94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e6      	bne.n	8008e74 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f003 0310 	and.w	r3, r3, #16
 8008eb0:	2b10      	cmp	r3, #16
 8008eb2:	d103      	bne.n	8008ebc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2210      	movs	r2, #16
 8008eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7fe fd75 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8008eca:	e002      	b.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7f9 fa9f 	bl	8002410 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ed2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f47f aefa 	bne.w	8008cdc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008eee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ef2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d045      	beq.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f00:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d23e      	bcs.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	623b      	str	r3, [r7, #32]
   return(result);
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f28:	633a      	str	r2, [r7, #48]	; 0x30
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e5      	bne.n	8008f08 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a14      	ldr	r2, [pc, #80]	; (8008f90 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008f40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f043 0320 	orr.w	r3, r3, #32
 8008f56:	673b      	str	r3, [r7, #112]	; 0x70
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	69b9      	ldr	r1, [r7, #24]
 8008f66:	69fa      	ldr	r2, [r7, #28]
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e6      	bne.n	8008f42 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f74:	e007      	b.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699a      	ldr	r2, [r3, #24]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f042 0208 	orr.w	r2, r2, #8
 8008f84:	619a      	str	r2, [r3, #24]
}
 8008f86:	bf00      	nop
 8008f88:	37a0      	adds	r7, #160	; 0xa0
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	0800883b 	.word	0x0800883b

08008f94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bc80      	pop	{r7}
 8008fc8:	4770      	bx	lr

08008fca <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af02      	add	r7, sp, #8
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	1d3b      	adds	r3, r7, #4
 8008fd4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e046      	b.n	8009078 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2224      	movs	r2, #36	; 0x24
 8008ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 0201 	bic.w	r2, r2, #1
 8009008:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009024:	1d3b      	adds	r3, r7, #4
 8009026:	e893 0006 	ldmia.w	r3, {r1, r2}
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f911 	bl	8009252 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009040:	f7f8 fc7c 	bl	800193c <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009046:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2200      	movs	r2, #0
 8009050:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7fe fff5 	bl	8008044 <UART_WaitOnFlagUntilTimeout>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	75fb      	strb	r3, [r7, #23]
 8009064:	e003      	b.n	800906e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_UARTEx_EnableStopMode+0x16>
 8009092:	2302      	movs	r3, #2
 8009094:	e021      	b.n	80090da <HAL_UARTEx_EnableStopMode+0x5a>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f043 0302 	orr.w	r3, r3, #2
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	613b      	str	r3, [r7, #16]
   return(result);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3724      	adds	r7, #36	; 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr

080090e4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d101      	bne.n	80090fa <HAL_UARTEx_EnableFifoMode+0x16>
 80090f6:	2302      	movs	r3, #2
 80090f8:	e02b      	b.n	8009152 <HAL_UARTEx_EnableFifoMode+0x6e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2224      	movs	r2, #36	; 0x24
 8009106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009130:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8ac 	bl	8009298 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800916e:	2302      	movs	r3, #2
 8009170:	e02d      	b.n	80091ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2224      	movs	r2, #36	; 0x24
 800917e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0201 	bic.w	r2, r2, #1
 8009198:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f872 	bl	8009298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e02d      	b.n	800924a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2224      	movs	r2, #36	; 0x24
 80091fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f834 	bl	8009298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	1d3b      	adds	r3, r7, #4
 800925c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f023 0210 	bic.w	r2, r3, #16
 800926a:	893b      	ldrh	r3, [r7, #8]
 800926c:	4619      	mov	r1, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009280:	7abb      	ldrb	r3, [r7, #10]
 8009282:	061a      	lsls	r2, r3, #24
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
}
 800928c:	bf00      	nop
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr
	...

08009298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d108      	bne.n	80092ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092b8:	e031      	b.n	800931e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ba:	2308      	movs	r3, #8
 80092bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092be:	2308      	movs	r3, #8
 80092c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	0e5b      	lsrs	r3, r3, #25
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	0f5b      	lsrs	r3, r3, #29
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	7b3a      	ldrb	r2, [r7, #12]
 80092e6:	4910      	ldr	r1, [pc, #64]	; (8009328 <UARTEx_SetNbDataToProcess+0x90>)
 80092e8:	5c8a      	ldrb	r2, [r1, r2]
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092ee:	7b3a      	ldrb	r2, [r7, #12]
 80092f0:	490e      	ldr	r1, [pc, #56]	; (800932c <UARTEx_SetNbDataToProcess+0x94>)
 80092f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	7b7a      	ldrb	r2, [r7, #13]
 8009304:	4908      	ldr	r1, [pc, #32]	; (8009328 <UARTEx_SetNbDataToProcess+0x90>)
 8009306:	5c8a      	ldrb	r2, [r1, r2]
 8009308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800930c:	7b7a      	ldrb	r2, [r7, #13]
 800930e:	4907      	ldr	r1, [pc, #28]	; (800932c <UARTEx_SetNbDataToProcess+0x94>)
 8009310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009312:	fb93 f3f2 	sdiv	r3, r3, r2
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800931e:	bf00      	nop
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr
 8009328:	0801a9a4 	.word	0x0801a9a4
 800932c:	0801a9ac 	.word	0x0801a9ac

08009330 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009334:	f7f8 f9a2 	bl	800167c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009338:	f000 f80a 	bl	8009350 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800933c:	bf00      	nop
 800933e:	bd80      	pop	{r7, pc}

08009340 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	f00f ff34 	bl	80191b4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800934c:	bf00      	nop
 800934e:	bd80      	pop	{r7, pc}

08009350 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 8009356:	2000      	movs	r0, #0
 8009358:	f7f9 f8bc 	bl	80024d4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800935c:	2001      	movs	r0, #1
 800935e:	f7f9 f8b9 	bl	80024d4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8009362:	2002      	movs	r0, #2
 8009364:	f7f9 f8b6 	bl	80024d4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8009368:	2101      	movs	r1, #1
 800936a:	2000      	movs	r0, #0
 800936c:	f7f9 f962 	bl	8002634 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8009370:	2300      	movs	r3, #0
 8009372:	9302      	str	r3, [sp, #8]
 8009374:	2301      	movs	r3, #1
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	2301      	movs	r3, #1
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4b3f      	ldr	r3, [pc, #252]	; (800947c <LoRaWAN_Init+0x12c>)
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	2002      	movs	r0, #2
 8009384:	f010 fb4a 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009388:	2300      	movs	r3, #0
 800938a:	9302      	str	r3, [sp, #8]
 800938c:	2303      	movs	r3, #3
 800938e:	9301      	str	r3, [sp, #4]
 8009390:	2302      	movs	r3, #2
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	4b3a      	ldr	r3, [pc, #232]	; (8009480 <LoRaWAN_Init+0x130>)
 8009396:	2200      	movs	r2, #0
 8009398:	2100      	movs	r1, #0
 800939a:	2002      	movs	r0, #2
 800939c:	f010 fb3e 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 80093a0:	2300      	movs	r3, #0
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	2301      	movs	r3, #1
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	2301      	movs	r3, #1
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4b35      	ldr	r3, [pc, #212]	; (8009484 <LoRaWAN_Init+0x134>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	2002      	movs	r0, #2
 80093b4:	f010 fb32 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80093b8:	2300      	movs	r3, #0
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <LoRaWAN_Init+0x138>)
 80093be:	2200      	movs	r2, #0
 80093c0:	f04f 31ff 	mov.w	r1, #4294967295
 80093c4:	4831      	ldr	r0, [pc, #196]	; (800948c <LoRaWAN_Init+0x13c>)
 80093c6:	f010 f87b 	bl	80194c0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80093ca:	2300      	movs	r3, #0
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4b30      	ldr	r3, [pc, #192]	; (8009490 <LoRaWAN_Init+0x140>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	f04f 31ff 	mov.w	r1, #4294967295
 80093d6:	482f      	ldr	r0, [pc, #188]	; (8009494 <LoRaWAN_Init+0x144>)
 80093d8:	f010 f872 	bl	80194c0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80093dc:	2300      	movs	r3, #0
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4b2d      	ldr	r3, [pc, #180]	; (8009498 <LoRaWAN_Init+0x148>)
 80093e2:	2201      	movs	r2, #1
 80093e4:	f04f 31ff 	mov.w	r1, #4294967295
 80093e8:	482c      	ldr	r0, [pc, #176]	; (800949c <LoRaWAN_Init+0x14c>)
 80093ea:	f010 f869 	bl	80194c0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80093ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80093f2:	4826      	ldr	r0, [pc, #152]	; (800948c <LoRaWAN_Init+0x13c>)
 80093f4:	f010 f978 	bl	80196e8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80093f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80093fc:	4825      	ldr	r0, [pc, #148]	; (8009494 <LoRaWAN_Init+0x144>)
 80093fe:	f010 f973 	bl	80196e8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8009402:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009406:	4825      	ldr	r0, [pc, #148]	; (800949c <LoRaWAN_Init+0x14c>)
 8009408:	f010 f96e 	bl	80196e8 <UTIL_TIMER_SetPeriod>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800940c:	4a24      	ldr	r2, [pc, #144]	; (80094a0 <LoRaWAN_Init+0x150>)
 800940e:	2100      	movs	r1, #0
 8009410:	2001      	movs	r0, #1
 8009412:	f00f ffb3 	bl	801937c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009416:	4a23      	ldr	r2, [pc, #140]	; (80094a4 <LoRaWAN_Init+0x154>)
 8009418:	2100      	movs	r1, #0
 800941a:	2002      	movs	r0, #2
 800941c:	f00f ffae 	bl	801937c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009420:	f000 fb2e 	bl	8009a80 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8009424:	4820      	ldr	r0, [pc, #128]	; (80094a8 <LoRaWAN_Init+0x158>)
 8009426:	f001 ffa5 	bl	800b374 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800942a:	4820      	ldr	r0, [pc, #128]	; (80094ac <LoRaWAN_Init+0x15c>)
 800942c:	f001 ffee 	bl	800b40c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009430:	481a      	ldr	r0, [pc, #104]	; (800949c <LoRaWAN_Init+0x14c>)
 8009432:	f010 f87b 	bl	801952c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 8009436:	4b1e      	ldr	r3, [pc, #120]	; (80094b0 <LoRaWAN_Init+0x160>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f002 f91c 	bl	800b678 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009440:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <LoRaWAN_Init+0x164>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d111      	bne.n	800946c <LoRaWAN_Init+0x11c>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009448:	2300      	movs	r3, #0
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	4b1a      	ldr	r3, [pc, #104]	; (80094b8 <LoRaWAN_Init+0x168>)
 800944e:	2200      	movs	r2, #0
 8009450:	f04f 31ff 	mov.w	r1, #4294967295
 8009454:	4819      	ldr	r0, [pc, #100]	; (80094bc <LoRaWAN_Init+0x16c>)
 8009456:	f010 f833 	bl	80194c0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800945a:	f242 7110 	movw	r1, #10000	; 0x2710
 800945e:	4817      	ldr	r0, [pc, #92]	; (80094bc <LoRaWAN_Init+0x16c>)
 8009460:	f010 f942 	bl	80196e8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009464:	4815      	ldr	r0, [pc, #84]	; (80094bc <LoRaWAN_Init+0x16c>)
 8009466:	f010 f861 	bl	801952c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800946a:	e003      	b.n	8009474 <LoRaWAN_Init+0x124>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800946c:	2101      	movs	r1, #1
 800946e:	2000      	movs	r0, #0
 8009470:	f7f9 f8e0 	bl	8002634 <BSP_PB_Init>
}
 8009474:	bf00      	nop
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	0801a0c0 	.word	0x0801a0c0
 8009480:	0801a0e0 	.word	0x0801a0e0
 8009484:	0801a100 	.word	0x0801a100
 8009488:	080098c9 	.word	0x080098c9
 800948c:	20000270 	.word	0x20000270
 8009490:	080098df 	.word	0x080098df
 8009494:	20000288 	.word	0x20000288
 8009498:	080098f5 	.word	0x080098f5
 800949c:	200002a0 	.word	0x200002a0
 80094a0:	0800b665 	.word	0x0800b665
 80094a4:	08009639 	.word	0x08009639
 80094a8:	2000003c 	.word	0x2000003c
 80094ac:	20000070 	.word	0x20000070
 80094b0:	20000038 	.word	0x20000038
 80094b4:	20000160 	.word	0x20000160
 80094b8:	080098a5 	.word	0x080098a5
 80094bc:	20000164 	.word	0x20000164

080094c0 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d0:	d007      	beq.n	80094e2 <HAL_GPIO_EXTI_Callback+0x22>
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d6:	dc09      	bgt.n	80094ec <HAL_GPIO_EXTI_Callback+0x2c>
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d009      	beq.n	80094f0 <HAL_GPIO_EXTI_Callback+0x30>
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d009      	beq.n	80094f4 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 80094e0:	e004      	b.n	80094ec <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80094e2:	2100      	movs	r1, #0
 80094e4:	2002      	movs	r0, #2
 80094e6:	f00f ff6b 	bl	80193c0 <UTIL_SEQ_SetTask>
      break;
 80094ea:	e004      	b.n	80094f6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 80094f4:	bf00      	nop
  }
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009500:	b5b0      	push	{r4, r5, r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af06      	add	r7, sp, #24
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <OnRxData+0x16>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d078      	beq.n	8009608 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 8009516:	2000      	movs	r0, #0
 8009518:	f7f9 f820 	bl	800255c <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800951c:	483f      	ldr	r0, [pc, #252]	; (800961c <OnRxData+0x11c>)
 800951e:	f010 f805 	bl	801952c <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8009522:	4b3f      	ldr	r3, [pc, #252]	; (8009620 <OnRxData+0x120>)
 8009524:	2200      	movs	r2, #0
 8009526:	2100      	movs	r1, #0
 8009528:	2002      	movs	r0, #2
 800952a:	f010 fa77 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8009538:	4611      	mov	r1, r2
 800953a:	4a3a      	ldr	r2, [pc, #232]	; (8009624 <OnRxData+0x124>)
 800953c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	7809      	ldrb	r1, [r1, #0]
 8009544:	4608      	mov	r0, r1
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800954c:	460c      	mov	r4, r1
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8009554:	460d      	mov	r5, r1
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800955c:	9105      	str	r1, [sp, #20]
 800955e:	9504      	str	r5, [sp, #16]
 8009560:	9403      	str	r4, [sp, #12]
 8009562:	9002      	str	r0, [sp, #8]
 8009564:	9201      	str	r2, [sp, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	4b2f      	ldr	r3, [pc, #188]	; (8009628 <OnRxData+0x128>)
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2003      	movs	r0, #3
 8009570:	f010 fa54 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d021      	beq.n	80095c0 <OnRxData+0xc0>
 800957c:	2b03      	cmp	r3, #3
 800957e:	d145      	bne.n	800960c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	785b      	ldrb	r3, [r3, #1]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d117      	bne.n	80095b8 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d00e      	beq.n	80095b0 <OnRxData+0xb0>
 8009592:	2b02      	cmp	r3, #2
 8009594:	dc12      	bgt.n	80095bc <OnRxData+0xbc>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <OnRxData+0xa0>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d004      	beq.n	80095a8 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800959e:	e00d      	b.n	80095bc <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 80095a0:	2000      	movs	r0, #0
 80095a2:	f002 f9cb 	bl	800b93c <LmHandlerRequestClass>
              break;
 80095a6:	e00a      	b.n	80095be <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 80095a8:	2001      	movs	r0, #1
 80095aa:	f002 f9c7 	bl	800b93c <LmHandlerRequestClass>
              break;
 80095ae:	e006      	b.n	80095be <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 80095b0:	2002      	movs	r0, #2
 80095b2:	f002 f9c3 	bl	800b93c <LmHandlerRequestClass>
              break;
 80095b6:	e002      	b.n	80095be <OnRxData+0xbe>
          }
        }
 80095b8:	bf00      	nop
 80095ba:	e02a      	b.n	8009612 <OnRxData+0x112>
              break;
 80095bc:	bf00      	nop
        break;
 80095be:	e028      	b.n	8009612 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d123      	bne.n	8009610 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	4b15      	ldr	r3, [pc, #84]	; (800962c <OnRxData+0x12c>)
 80095d6:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 80095d8:	4b14      	ldr	r3, [pc, #80]	; (800962c <OnRxData+0x12c>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d109      	bne.n	80095f4 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 80095e0:	4b13      	ldr	r3, [pc, #76]	; (8009630 <OnRxData+0x130>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	2100      	movs	r1, #0
 80095e6:	2003      	movs	r0, #3
 80095e8:	f010 fa18 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 80095ec:	2002      	movs	r0, #2
 80095ee:	f7f8 ffd9 	bl	80025a4 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 80095f2:	e00d      	b.n	8009610 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <OnRxData+0x134>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	2100      	movs	r1, #0
 80095fa:	2003      	movs	r0, #3
 80095fc:	f010 fa0e 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 8009600:	2002      	movs	r0, #2
 8009602:	f7f8 ffab 	bl	800255c <BSP_LED_On>
        break;
 8009606:	e003      	b.n	8009610 <OnRxData+0x110>

      default:

        break;
    }
  }
 8009608:	bf00      	nop
 800960a:	e002      	b.n	8009612 <OnRxData+0x112>
        break;
 800960c:	bf00      	nop
 800960e:	e000      	b.n	8009612 <OnRxData+0x112>
        break;
 8009610:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bdb0      	pop	{r4, r5, r7, pc}
 800961a:	bf00      	nop
 800961c:	20000288 	.word	0x20000288
 8009620:	0801a120 	.word	0x0801a120
 8009624:	20000088 	.word	0x20000088
 8009628:	0801a154 	.word	0x0801a154
 800962c:	2000026e 	.word	0x2000026e
 8009630:	0801a19c 	.word	0x0801a19c
 8009634:	0801a1a8 	.word	0x0801a1a8

08009638 <SendTxData>:

static void SendTxData(void)
{
 8009638:	b590      	push	{r4, r7, lr}
 800963a:	b091      	sub	sp, #68	; 0x44
 800963c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800965e:	f107 0308 	add.w	r3, r7, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f7f8 fa6c 	bl	8001b40 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8009668:	f7f7 fca0 	bl	8000fac <SYS_GetTemperatureLevel>
 800966c:	4603      	mov	r3, r0
 800966e:	121b      	asrs	r3, r3, #8
 8009670:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4983      	ldr	r1, [pc, #524]	; (8009884 <SendTxData+0x24c>)
 8009676:	4618      	mov	r0, r3
 8009678:	f7f7 f900 	bl	800087c <__aeabi_fmul>
 800967c:	4603      	mov	r3, r0
 800967e:	4982      	ldr	r1, [pc, #520]	; (8009888 <SendTxData+0x250>)
 8009680:	4618      	mov	r0, r3
 8009682:	f7f7 f9af 	bl	80009e4 <__aeabi_fdiv>
 8009686:	4603      	mov	r3, r0
 8009688:	4618      	mov	r0, r3
 800968a:	f7f7 fa47 	bl	8000b1c <__aeabi_f2uiz>
 800968e:	4603      	mov	r3, r0
 8009690:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009692:	4b7e      	ldr	r3, [pc, #504]	; (800988c <SendTxData+0x254>)
 8009694:	2202      	movs	r2, #2
 8009696:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	497b      	ldr	r1, [pc, #492]	; (8009888 <SendTxData+0x250>)
 800969c:	4618      	mov	r0, r3
 800969e:	f7f7 f8ed 	bl	800087c <__aeabi_fmul>
 80096a2:	4603      	mov	r3, r0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f7 fa39 	bl	8000b1c <__aeabi_f2uiz>
 80096aa:	4603      	mov	r3, r0
 80096ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 80096ae:	4b77      	ldr	r3, [pc, #476]	; (800988c <SendTxData+0x254>)
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	1c59      	adds	r1, r3, #1
 80096b6:	6379      	str	r1, [r7, #52]	; 0x34
 80096b8:	4413      	add	r3, r2
 80096ba:	4a75      	ldr	r2, [pc, #468]	; (8009890 <SendTxData+0x258>)
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 80096c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80096c2:	0a1b      	lsrs	r3, r3, #8
 80096c4:	b298      	uxth	r0, r3
 80096c6:	4b71      	ldr	r3, [pc, #452]	; (800988c <SendTxData+0x254>)
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096cc:	1c59      	adds	r1, r3, #1
 80096ce:	6379      	str	r1, [r7, #52]	; 0x34
 80096d0:	4413      	add	r3, r2
 80096d2:	b2c2      	uxtb	r2, r0
 80096d4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 80096d6:	4b6d      	ldr	r3, [pc, #436]	; (800988c <SendTxData+0x254>)
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096dc:	1c59      	adds	r1, r3, #1
 80096de:	6379      	str	r1, [r7, #52]	; 0x34
 80096e0:	4413      	add	r3, r2
 80096e2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 80096e8:	4b68      	ldr	r3, [pc, #416]	; (800988c <SendTxData+0x254>)
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ee:	1c59      	adds	r1, r3, #1
 80096f0:	6379      	str	r1, [r7, #52]	; 0x34
 80096f2:	4413      	add	r3, r2
 80096f4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80096f6:	b2d2      	uxtb	r2, r2
 80096f8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 80096fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	b298      	uxth	r0, r3
 8009700:	4b62      	ldr	r3, [pc, #392]	; (800988c <SendTxData+0x254>)
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009706:	1c59      	adds	r1, r3, #1
 8009708:	6379      	str	r1, [r7, #52]	; 0x34
 800970a:	4413      	add	r3, r2
 800970c:	b2c2      	uxtb	r2, r0
 800970e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009710:	4b5e      	ldr	r3, [pc, #376]	; (800988c <SendTxData+0x254>)
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	1c59      	adds	r1, r3, #1
 8009718:	6379      	str	r1, [r7, #52]	; 0x34
 800971a:	4413      	add	r3, r2
 800971c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009722:	4b5c      	ldr	r3, [pc, #368]	; (8009894 <SendTxData+0x25c>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b08      	cmp	r3, #8
 8009728:	d007      	beq.n	800973a <SendTxData+0x102>
 800972a:	4b5a      	ldr	r3, [pc, #360]	; (8009894 <SendTxData+0x25c>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d003      	beq.n	800973a <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009732:	4b58      	ldr	r3, [pc, #352]	; (8009894 <SendTxData+0x25c>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d120      	bne.n	800977c <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800973a:	4b54      	ldr	r3, [pc, #336]	; (800988c <SendTxData+0x254>)
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009740:	1c59      	adds	r1, r3, #1
 8009742:	6379      	str	r1, [r7, #52]	; 0x34
 8009744:	4413      	add	r3, r2
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800974a:	4b50      	ldr	r3, [pc, #320]	; (800988c <SendTxData+0x254>)
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	1c59      	adds	r1, r3, #1
 8009752:	6379      	str	r1, [r7, #52]	; 0x34
 8009754:	4413      	add	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800975a:	4b4c      	ldr	r3, [pc, #304]	; (800988c <SendTxData+0x254>)
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	1c59      	adds	r1, r3, #1
 8009762:	6379      	str	r1, [r7, #52]	; 0x34
 8009764:	4413      	add	r3, r2
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800976a:	4b48      	ldr	r3, [pc, #288]	; (800988c <SendTxData+0x254>)
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	1c59      	adds	r1, r3, #1
 8009772:	6379      	str	r1, [r7, #52]	; 0x34
 8009774:	4413      	add	r3, r2
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
 800977a:	e05b      	b.n	8009834 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009784:	4b41      	ldr	r3, [pc, #260]	; (800988c <SendTxData+0x254>)
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	1c59      	adds	r1, r3, #1
 800978c:	6379      	str	r1, [r7, #52]	; 0x34
 800978e:	18d4      	adds	r4, r2, r3
 8009790:	f7f7 ffa0 	bl	80016d4 <GetBatteryLevel>
 8009794:	4603      	mov	r3, r0
 8009796:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	1418      	asrs	r0, r3, #16
 800979c:	4b3b      	ldr	r3, [pc, #236]	; (800988c <SendTxData+0x254>)
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a2:	1c59      	adds	r1, r3, #1
 80097a4:	6379      	str	r1, [r7, #52]	; 0x34
 80097a6:	4413      	add	r3, r2
 80097a8:	b2c2      	uxtb	r2, r0
 80097aa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	1218      	asrs	r0, r3, #8
 80097b0:	4b36      	ldr	r3, [pc, #216]	; (800988c <SendTxData+0x254>)
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b6:	1c59      	adds	r1, r3, #1
 80097b8:	6379      	str	r1, [r7, #52]	; 0x34
 80097ba:	4413      	add	r3, r2
 80097bc:	b2c2      	uxtb	r2, r0
 80097be:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 80097c0:	4b32      	ldr	r3, [pc, #200]	; (800988c <SendTxData+0x254>)
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	6379      	str	r1, [r7, #52]	; 0x34
 80097ca:	4413      	add	r3, r2
 80097cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	1418      	asrs	r0, r3, #16
 80097d6:	4b2d      	ldr	r3, [pc, #180]	; (800988c <SendTxData+0x254>)
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	1c59      	adds	r1, r3, #1
 80097de:	6379      	str	r1, [r7, #52]	; 0x34
 80097e0:	4413      	add	r3, r2
 80097e2:	b2c2      	uxtb	r2, r0
 80097e4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	1218      	asrs	r0, r3, #8
 80097ea:	4b28      	ldr	r3, [pc, #160]	; (800988c <SendTxData+0x254>)
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f0:	1c59      	adds	r1, r3, #1
 80097f2:	6379      	str	r1, [r7, #52]	; 0x34
 80097f4:	4413      	add	r3, r2
 80097f6:	b2c2      	uxtb	r2, r0
 80097f8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 80097fa:	4b24      	ldr	r3, [pc, #144]	; (800988c <SendTxData+0x254>)
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009800:	1c59      	adds	r1, r3, #1
 8009802:	6379      	str	r1, [r7, #52]	; 0x34
 8009804:	4413      	add	r3, r2
 8009806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800980c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	b298      	uxth	r0, r3
 8009812:	4b1e      	ldr	r3, [pc, #120]	; (800988c <SendTxData+0x254>)
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009818:	1c59      	adds	r1, r3, #1
 800981a:	6379      	str	r1, [r7, #52]	; 0x34
 800981c:	4413      	add	r3, r2
 800981e:	b2c2      	uxtb	r2, r0
 8009820:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8009822:	4b1a      	ldr	r3, [pc, #104]	; (800988c <SendTxData+0x254>)
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	1c59      	adds	r1, r3, #1
 800982a:	6379      	str	r1, [r7, #52]	; 0x34
 800982c:	4413      	add	r3, r2
 800982e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 8009834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009836:	b2da      	uxtb	r2, r3
 8009838:	4b14      	ldr	r3, [pc, #80]	; (800988c <SendTxData+0x254>)
 800983a:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800983c:	1d3a      	adds	r2, r7, #4
 800983e:	2300      	movs	r3, #0
 8009840:	2100      	movs	r1, #0
 8009842:	4812      	ldr	r0, [pc, #72]	; (800988c <SendTxData+0x254>)
 8009844:	f001 ff8e 	bl	800b764 <LmHandlerSend>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800984e:	4b12      	ldr	r3, [pc, #72]	; (8009898 <SendTxData+0x260>)
 8009850:	2201      	movs	r2, #1
 8009852:	2100      	movs	r1, #0
 8009854:	2001      	movs	r0, #1
 8009856:	f010 f8e1 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800985a:	e00e      	b.n	800987a <SendTxData+0x242>
  else if (nextTxIn > 0)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a0d      	ldr	r2, [pc, #52]	; (800989c <SendTxData+0x264>)
 8009866:	fba2 2303 	umull	r2, r3, r2, r3
 800986a:	099b      	lsrs	r3, r3, #6
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <SendTxData+0x268>)
 8009870:	2201      	movs	r2, #1
 8009872:	2100      	movs	r1, #0
 8009874:	2001      	movs	r0, #1
 8009876:	f010 f8d1 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 800987a:	bf00      	nop
 800987c:	373c      	adds	r7, #60	; 0x3c
 800987e:	46bd      	mov	sp, r7
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	bf00      	nop
 8009884:	42c80000 	.word	0x42c80000
 8009888:	41200000 	.word	0x41200000
 800988c:	20000080 	.word	0x20000080
 8009890:	2000026e 	.word	0x2000026e
 8009894:	20000070 	.word	0x20000070
 8009898:	0801a1b4 	.word	0x0801a1b4
 800989c:	10624dd3 	.word	0x10624dd3
 80098a0:	0801a1c4 	.word	0x0801a1c4

080098a4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80098ac:	2100      	movs	r1, #0
 80098ae:	2002      	movs	r0, #2
 80098b0:	f00f fd86 	bl	80193c0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 80098b4:	4803      	ldr	r0, [pc, #12]	; (80098c4 <OnTxTimerEvent+0x20>)
 80098b6:	f00f fe39 	bl	801952c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000164 	.word	0x20000164

080098c8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 80098d0:	2001      	movs	r0, #1
 80098d2:	f7f8 fe67 	bl	80025a4 <BSP_LED_Off>
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 80098e6:	2000      	movs	r0, #0
 80098e8:	f7f8 fe5c 	bl	80025a4 <BSP_LED_Off>
}
 80098ec:	bf00      	nop
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 80098fc:	2002      	movs	r0, #2
 80098fe:	f7f8 fe75 	bl	80025ec <BSP_LED_Toggle>
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
	...

0800990c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af04      	add	r7, sp, #16
 8009912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d044      	beq.n	80099a4 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d040      	beq.n	80099a4 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 8009922:	2001      	movs	r0, #1
 8009924:	f7f8 fe1a 	bl	800255c <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 8009928:	4820      	ldr	r0, [pc, #128]	; (80099ac <OnTxData+0xa0>)
 800992a:	f00f fdff 	bl	801952c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800992e:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <OnTxData+0xa4>)
 8009930:	2200      	movs	r2, #0
 8009932:	2100      	movs	r1, #0
 8009934:	2002      	movs	r0, #2
 8009936:	f010 f871 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	7b12      	ldrb	r2, [r2, #12]
 8009942:	4611      	mov	r1, r2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800994a:	4610      	mov	r0, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	f992 2014 	ldrsb.w	r2, [r2, #20]
 8009952:	9203      	str	r2, [sp, #12]
 8009954:	9002      	str	r0, [sp, #8]
 8009956:	9101      	str	r1, [sp, #4]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	4b16      	ldr	r3, [pc, #88]	; (80099b4 <OnTxData+0xa8>)
 800995c:	2200      	movs	r2, #0
 800995e:	2100      	movs	r1, #0
 8009960:	2003      	movs	r0, #3
 8009962:	f010 f85b 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <OnTxData+0xac>)
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	2003      	movs	r0, #3
 800996e:	f010 f855 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	789b      	ldrb	r3, [r3, #2]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d10e      	bne.n	8009998 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	78db      	ldrb	r3, [r3, #3]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <OnTxData+0x7a>
 8009982:	4b0e      	ldr	r3, [pc, #56]	; (80099bc <OnTxData+0xb0>)
 8009984:	e000      	b.n	8009988 <OnTxData+0x7c>
 8009986:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <OnTxData+0xb4>)
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <OnTxData+0xb8>)
 800998c:	2200      	movs	r2, #0
 800998e:	2100      	movs	r1, #0
 8009990:	2003      	movs	r0, #3
 8009992:	f010 f843 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 8009996:	e005      	b.n	80099a4 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8009998:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <OnTxData+0xbc>)
 800999a:	2200      	movs	r2, #0
 800999c:	2100      	movs	r1, #0
 800999e:	2003      	movs	r0, #3
 80099a0:	f010 f83c 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000270 	.word	0x20000270
 80099b0:	0801a1e4 	.word	0x0801a1e4
 80099b4:	0801a218 	.word	0x0801a218
 80099b8:	0801a24c 	.word	0x0801a24c
 80099bc:	0801a25c 	.word	0x0801a25c
 80099c0:	0801a260 	.word	0x0801a260
 80099c4:	0801a268 	.word	0x0801a268
 80099c8:	0801a27c 	.word	0x0801a27c

080099cc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d037      	beq.n	8009a4a <OnJoinRequest+0x7e>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d11d      	bne.n	8009a20 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80099e4:	481b      	ldr	r0, [pc, #108]	; (8009a54 <OnJoinRequest+0x88>)
 80099e6:	f00f fe0f 	bl	8019608 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 80099ea:	2002      	movs	r0, #2
 80099ec:	f7f8 fdda 	bl	80025a4 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80099f0:	4b19      	ldr	r3, [pc, #100]	; (8009a58 <OnJoinRequest+0x8c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	2002      	movs	r0, #2
 80099f8:	f010 f810 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	789b      	ldrb	r3, [r3, #2]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d106      	bne.n	8009a12 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8009a04:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <OnJoinRequest+0x90>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	2100      	movs	r1, #0
 8009a0a:	2002      	movs	r0, #2
 8009a0c:	f010 f806 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 8009a10:	e01b      	b.n	8009a4a <OnJoinRequest+0x7e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8009a12:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <OnJoinRequest+0x94>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	2002      	movs	r0, #2
 8009a1a:	f00f ffff 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 8009a1e:	e014      	b.n	8009a4a <OnJoinRequest+0x7e>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8009a20:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <OnJoinRequest+0x98>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	2100      	movs	r1, #0
 8009a26:	2002      	movs	r0, #2
 8009a28:	f00f fff8 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	789b      	ldrb	r3, [r3, #2]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d10a      	bne.n	8009a4a <OnJoinRequest+0x7e>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <OnJoinRequest+0x9c>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	2100      	movs	r1, #0
 8009a3a:	2002      	movs	r0, #2
 8009a3c:	f00f ffee 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType);
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <OnJoinRequest+0xa0>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 fe17 	bl	800b678 <LmHandlerJoin>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	200002a0 	.word	0x200002a0
 8009a58:	0801a28c 	.word	0x0801a28c
 8009a5c:	0801a2a4 	.word	0x0801a2a4
 8009a60:	0801a2c4 	.word	0x0801a2c4
 8009a64:	0801a2e4 	.word	0x0801a2e4
 8009a68:	0801a300 	.word	0x0801a300
 8009a6c:	20000038 	.word	0x20000038

08009a70 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009a74:	2100      	movs	r1, #0
 8009a76:	2001      	movs	r0, #1
 8009a78:	f00f fca2 	bl	80193c0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8009a7c:	bf00      	nop
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8009a84:	4b15      	ldr	r3, [pc, #84]	; (8009adc <LoraInfo_Init+0x5c>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009a8a:	4b14      	ldr	r3, [pc, #80]	; (8009adc <LoraInfo_Init+0x5c>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <LoraInfo_Init+0x5c>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009a96:	4b11      	ldr	r3, [pc, #68]	; (8009adc <LoraInfo_Init+0x5c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8009a9c:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <LoraInfo_Init+0x5c>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f043 0320 	orr.w	r3, r3, #32
 8009aa4:	4a0d      	ldr	r2, [pc, #52]	; (8009adc <LoraInfo_Init+0x5c>)
 8009aa6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <LoraInfo_Init+0x5c>)
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10c      	bne.n	8009aca <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	; (8009ae0 <LoraInfo_Init+0x60>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f00f ffb0 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009abc:	bf00      	nop
 8009abe:	f00f ff9b 	bl	80199f8 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d1fa      	bne.n	8009abe <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009ac8:	e7fe      	b.n	8009ac8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009aca:	4b04      	ldr	r3, [pc, #16]	; (8009adc <LoraInfo_Init+0x5c>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <LoraInfo_Init+0x5c>)
 8009ad2:	2203      	movs	r2, #3
 8009ad4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009ad6:	bf00      	nop
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200002b8 	.word	0x200002b8
 8009ae0:	0801a360 	.word	0x0801a360

08009ae4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009ae8:	4b02      	ldr	r3, [pc, #8]	; (8009af4 <LoraInfo_GetPtr+0x10>)
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	200002b8 	.word	0x200002b8

08009af8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 8009afc:	f7f8 fe2b 	bl	8002756 <BSP_RADIO_Init>
 8009b00:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7f8 fe50 	bl	80027b8 <BSP_RADIO_ConfigRFSwitch>
 8009b18:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 8009b26:	f7f8 fe95 	bl	8002854 <BSP_RADIO_GetTxConfig>
 8009b2a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 8009b34:	f7f8 fe95 	bl	8002862 <BSP_RADIO_IsTCXO>
 8009b38:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8009b42:	f7f8 fe95 	bl	8002870 <BSP_RADIO_IsDCDC>
 8009b46:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	33f1      	adds	r3, #241	; 0xf1
 8009b58:	2210      	movs	r2, #16
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f00b fd57 	bl	8015610 <memset1>
    ctx->M_n = 0;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	22f0      	movs	r2, #240	; 0xf0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4618      	mov	r0, r3
 8009b72:	f00b fd4d 	bl	8015610 <memset1>
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	2110      	movs	r1, #16
 8009b8e:	6838      	ldr	r0, [r7, #0]
 8009b90:	f000 fe60 	bl	800a854 <lorawan_aes_set_key>
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80a1 	beq.w	8009cf6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bba:	f1c3 0310 	rsb	r3, r3, #16
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	bf28      	it	cs
 8009bc4:	4613      	movcs	r3, r2
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f203 1201 	addw	r2, r3, #257	; 0x101
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bd4:	4413      	add	r3, r2
 8009bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd8:	b292      	uxth	r2, r2
 8009bda:	68b9      	ldr	r1, [r7, #8]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f00b fcdc 	bl	801559a <memcpy1>
        ctx->M_n += mlen;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	441a      	add	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009bf8:	2b0f      	cmp	r3, #15
 8009bfa:	f240 808d 	bls.w	8009d18 <AES_CMAC_Update+0x17c>
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	429a      	cmp	r2, r3
 8009c04:	f000 8088 	beq.w	8009d18 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8009c08:	2300      	movs	r3, #0
 8009c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c0c:	e015      	b.n	8009c3a <AES_CMAC_Update+0x9e>
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	4413      	add	r3, r2
 8009c14:	33f1      	adds	r3, #241	; 0xf1
 8009c16:	781a      	ldrb	r2, [r3, #0]
 8009c18:	68f9      	ldr	r1, [r7, #12]
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	440b      	add	r3, r1
 8009c1e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	4053      	eors	r3, r2
 8009c26:	b2d9      	uxtb	r1, r3
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	4413      	add	r3, r2
 8009c2e:	33f1      	adds	r3, #241	; 0xf1
 8009c30:	460a      	mov	r2, r1
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	3301      	adds	r3, #1
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	2b0f      	cmp	r3, #15
 8009c3e:	dde6      	ble.n	8009c0e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009c46:	f107 0314 	add.w	r3, r7, #20
 8009c4a:	2210      	movs	r2, #16
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f00b fca4 	bl	801559a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	f107 0114 	add.w	r1, r7, #20
 8009c58:	f107 0314 	add.w	r3, r7, #20
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 fed7 	bl	800aa10 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	33f1      	adds	r3, #241	; 0xf1
 8009c66:	f107 0114 	add.w	r1, r7, #20
 8009c6a:	2210      	movs	r2, #16
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f00b fc94 	bl	801559a <memcpy1>

        data += mlen;
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	4413      	add	r3, r2
 8009c78:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8009c82:	e038      	b.n	8009cf6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8009c84:	2300      	movs	r3, #0
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c88:	e013      	b.n	8009cb2 <AES_CMAC_Update+0x116>
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	4413      	add	r3, r2
 8009c90:	33f1      	adds	r3, #241	; 0xf1
 8009c92:	781a      	ldrb	r2, [r3, #0]
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	440b      	add	r3, r1
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	4053      	eors	r3, r2
 8009c9e:	b2d9      	uxtb	r1, r3
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca4:	4413      	add	r3, r2
 8009ca6:	33f1      	adds	r3, #241	; 0xf1
 8009ca8:	460a      	mov	r2, r1
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	3301      	adds	r3, #1
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	2b0f      	cmp	r3, #15
 8009cb6:	dde8      	ble.n	8009c8a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009cbe:	f107 0314 	add.w	r3, r7, #20
 8009cc2:	2210      	movs	r2, #16
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f00b fc68 	bl	801559a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	f107 0114 	add.w	r1, r7, #20
 8009cd0:	f107 0314 	add.w	r3, r7, #20
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fe9b 	bl	800aa10 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	33f1      	adds	r3, #241	; 0xf1
 8009cde:	f107 0114 	add.w	r1, r7, #20
 8009ce2:	2210      	movs	r2, #16
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f00b fc58 	bl	801559a <memcpy1>

        data += 16;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3310      	adds	r3, #16
 8009cee:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3b10      	subs	r3, #16
 8009cf4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d8c3      	bhi.n	8009c84 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	b292      	uxth	r2, r2
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f00b fc46 	bl	801559a <memcpy1>
    ctx->M_n = len;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009d16:	e000      	b.n	8009d1a <AES_CMAC_Update+0x17e>
            return;
 8009d18:	bf00      	nop
}
 8009d1a:	3730      	adds	r7, #48	; 0x30
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b092      	sub	sp, #72	; 0x48
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8009d2a:	f107 031c 	add.w	r3, r7, #28
 8009d2e:	2210      	movs	r2, #16
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f00b fc6c 	bl	8015610 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	f107 011c 	add.w	r1, r7, #28
 8009d3e:	f107 031c 	add.w	r3, r7, #28
 8009d42:	4618      	mov	r0, r3
 8009d44:	f000 fe64 	bl	800aa10 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8009d48:	7f3b      	ldrb	r3, [r7, #28]
 8009d4a:	b25b      	sxtb	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	da31      	bge.n	8009db4 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8009d50:	2300      	movs	r3, #0
 8009d52:	647b      	str	r3, [r7, #68]	; 0x44
 8009d54:	e01c      	b.n	8009d90 <AES_CMAC_Final+0x70>
 8009d56:	f107 021c 	add.w	r2, r7, #28
 8009d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d5c:	4413      	add	r3, r2
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	b25a      	sxtb	r2, r3
 8009d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d66:	3301      	adds	r3, #1
 8009d68:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009d6c:	440b      	add	r3, r1
 8009d6e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009d72:	09db      	lsrs	r3, r3, #7
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	b2d9      	uxtb	r1, r3
 8009d7e:	f107 021c 	add.w	r2, r7, #28
 8009d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d84:	4413      	add	r3, r2
 8009d86:	460a      	mov	r2, r1
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d92:	2b0e      	cmp	r3, #14
 8009d94:	dddf      	ble.n	8009d56 <AES_CMAC_Final+0x36>
 8009d96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 8009da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da6:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009daa:	43db      	mvns	r3, r3
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009db2:	e028      	b.n	8009e06 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 8009db4:	2300      	movs	r3, #0
 8009db6:	643b      	str	r3, [r7, #64]	; 0x40
 8009db8:	e01c      	b.n	8009df4 <AES_CMAC_Final+0xd4>
 8009dba:	f107 021c 	add.w	r2, r7, #28
 8009dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc0:	4413      	add	r3, r2
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	005b      	lsls	r3, r3, #1
 8009dc6:	b25a      	sxtb	r2, r3
 8009dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dca:	3301      	adds	r3, #1
 8009dcc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009dd6:	09db      	lsrs	r3, r3, #7
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	b25b      	sxtb	r3, r3
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	b25b      	sxtb	r3, r3
 8009de0:	b2d9      	uxtb	r1, r3
 8009de2:	f107 021c 	add.w	r2, r7, #28
 8009de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009de8:	4413      	add	r3, r2
 8009dea:	460a      	mov	r2, r1
 8009dec:	701a      	strb	r2, [r3, #0]
 8009dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df0:	3301      	adds	r3, #1
 8009df2:	643b      	str	r3, [r7, #64]	; 0x40
 8009df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df6:	2b0e      	cmp	r3, #14
 8009df8:	dddf      	ble.n	8009dba <AES_CMAC_Final+0x9a>
 8009dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009e0c:	2b10      	cmp	r3, #16
 8009e0e:	d11d      	bne.n	8009e4c <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8009e10:	2300      	movs	r3, #0
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e14:	e016      	b.n	8009e44 <AES_CMAC_Final+0x124>
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	f107 011c 	add.w	r1, r7, #28
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	440b      	add	r3, r1
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4053      	eors	r3, r2
 8009e2e:	b2d9      	uxtb	r1, r3
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e34:	4413      	add	r3, r2
 8009e36:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009e3a:	460a      	mov	r2, r1
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e40:	3301      	adds	r3, #1
 8009e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e46:	2b0f      	cmp	r3, #15
 8009e48:	dde5      	ble.n	8009e16 <AES_CMAC_Final+0xf6>
 8009e4a:	e098      	b.n	8009f7e <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8009e4c:	7f3b      	ldrb	r3, [r7, #28]
 8009e4e:	b25b      	sxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da31      	bge.n	8009eb8 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 8009e54:	2300      	movs	r3, #0
 8009e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e58:	e01c      	b.n	8009e94 <AES_CMAC_Final+0x174>
 8009e5a:	f107 021c 	add.w	r2, r7, #28
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	4413      	add	r3, r2
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	b25a      	sxtb	r2, r3
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009e70:	440b      	add	r3, r1
 8009e72:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009e76:	09db      	lsrs	r3, r3, #7
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	b25b      	sxtb	r3, r3
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	b25b      	sxtb	r3, r3
 8009e80:	b2d9      	uxtb	r1, r3
 8009e82:	f107 021c 	add.w	r2, r7, #28
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	4413      	add	r3, r2
 8009e8a:	460a      	mov	r2, r1
 8009e8c:	701a      	strb	r2, [r3, #0]
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e90:	3301      	adds	r3, #1
 8009e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e96:	2b0e      	cmp	r3, #14
 8009e98:	dddf      	ble.n	8009e5a <AES_CMAC_Final+0x13a>
 8009e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 8009ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009eaa:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8009eae:	43db      	mvns	r3, r3
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb6:	e028      	b.n	8009f0a <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 8009eb8:	2300      	movs	r3, #0
 8009eba:	637b      	str	r3, [r7, #52]	; 0x34
 8009ebc:	e01c      	b.n	8009ef8 <AES_CMAC_Final+0x1d8>
 8009ebe:	f107 021c 	add.w	r2, r7, #28
 8009ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec4:	4413      	add	r3, r2
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	b25a      	sxtb	r2, r3
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	3301      	adds	r3, #1
 8009ed0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8009ed4:	440b      	add	r3, r1
 8009ed6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009eda:	09db      	lsrs	r3, r3, #7
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	b25b      	sxtb	r3, r3
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b25b      	sxtb	r3, r3
 8009ee4:	b2d9      	uxtb	r1, r3
 8009ee6:	f107 021c 	add.w	r2, r7, #28
 8009eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eec:	4413      	add	r3, r2
 8009eee:	460a      	mov	r2, r1
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	2b0e      	cmp	r3, #14
 8009efc:	dddf      	ble.n	8009ebe <AES_CMAC_Final+0x19e>
 8009efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f02:	005b      	lsls	r3, r3, #1
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	4413      	add	r3, r2
 8009f14:	2280      	movs	r2, #128	; 0x80
 8009f16:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009f1a:	e007      	b.n	8009f2c <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f22:	683a      	ldr	r2, [r7, #0]
 8009f24:	4413      	add	r3, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009f40:	2b0f      	cmp	r3, #15
 8009f42:	d9eb      	bls.n	8009f1c <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 8009f44:	2300      	movs	r3, #0
 8009f46:	633b      	str	r3, [r7, #48]	; 0x30
 8009f48:	e016      	b.n	8009f78 <AES_CMAC_Final+0x258>
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	4413      	add	r3, r2
 8009f50:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	f107 011c 	add.w	r1, r7, #28
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	440b      	add	r3, r1
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	4053      	eors	r3, r2
 8009f62:	b2d9      	uxtb	r1, r3
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	4413      	add	r3, r2
 8009f6a:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f6e:	460a      	mov	r2, r1
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	3301      	adds	r3, #1
 8009f76:	633b      	str	r3, [r7, #48]	; 0x30
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	dde5      	ble.n	8009f4a <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 8009f7e:	2300      	movs	r3, #0
 8009f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f82:	e015      	b.n	8009fb0 <AES_CMAC_Final+0x290>
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f88:	4413      	add	r3, r2
 8009f8a:	33f1      	adds	r3, #241	; 0xf1
 8009f8c:	781a      	ldrb	r2, [r3, #0]
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	440b      	add	r3, r1
 8009f94:	f203 1301 	addw	r3, r3, #257	; 0x101
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	4053      	eors	r3, r2
 8009f9c:	b2d9      	uxtb	r1, r3
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	4413      	add	r3, r2
 8009fa4:	33f1      	adds	r3, #241	; 0xf1
 8009fa6:	460a      	mov	r2, r1
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fac:	3301      	adds	r3, #1
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb2:	2b0f      	cmp	r3, #15
 8009fb4:	dde6      	ble.n	8009f84 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8009fbc:	f107 030c 	add.w	r3, r7, #12
 8009fc0:	2210      	movs	r2, #16
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f00b fae9 	bl	801559a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	f107 030c 	add.w	r3, r7, #12
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fd1d 	bl	800aa10 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8009fd6:	f107 031c 	add.w	r3, r7, #28
 8009fda:	2210      	movs	r2, #16
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f00b fb16 	bl	8015610 <memset1>
}
 8009fe4:	bf00      	nop
 8009fe6:	3748      	adds	r7, #72	; 0x48
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3301      	adds	r3, #1
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	7852      	ldrb	r2, [r2, #1]
 800a006:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3302      	adds	r3, #2
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	7892      	ldrb	r2, [r2, #2]
 800a010:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3303      	adds	r3, #3
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	78d2      	ldrb	r2, [r2, #3]
 800a01a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	7912      	ldrb	r2, [r2, #4]
 800a024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3305      	adds	r3, #5
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	7952      	ldrb	r2, [r2, #5]
 800a02e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3306      	adds	r3, #6
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	7992      	ldrb	r2, [r2, #6]
 800a038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3307      	adds	r3, #7
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	79d2      	ldrb	r2, [r2, #7]
 800a042:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3308      	adds	r3, #8
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	7a12      	ldrb	r2, [r2, #8]
 800a04c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3309      	adds	r3, #9
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	7a52      	ldrb	r2, [r2, #9]
 800a056:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	330a      	adds	r3, #10
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	7a92      	ldrb	r2, [r2, #10]
 800a060:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	330b      	adds	r3, #11
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	7ad2      	ldrb	r2, [r2, #11]
 800a06a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	330c      	adds	r3, #12
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	7b12      	ldrb	r2, [r2, #12]
 800a074:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	330d      	adds	r3, #13
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	7b52      	ldrb	r2, [r2, #13]
 800a07e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	330e      	adds	r3, #14
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	7b92      	ldrb	r2, [r2, #14]
 800a088:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	330f      	adds	r3, #15
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	7bd2      	ldrb	r2, [r2, #15]
 800a092:	701a      	strb	r2, [r3, #0]
#endif
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	bc80      	pop	{r7}
 800a09c:	4770      	bx	lr

0800a09e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a0ac:	e007      	b.n	800a0be <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	1c53      	adds	r3, r2, #1
 800a0b2:	60bb      	str	r3, [r7, #8]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	60f9      	str	r1, [r7, #12]
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	1e5a      	subs	r2, r3, #1
 800a0c2:	71fa      	strb	r2, [r7, #7]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1f2      	bne.n	800a0ae <copy_block_nn+0x10>
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bc80      	pop	{r7}
 800a0d2:	4770      	bx	lr

0800a0d4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	4053      	eors	r3, r2
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	7819      	ldrb	r1, [r3, #0]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	404a      	eors	r2, r1
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3302      	adds	r3, #2
 800a108:	7819      	ldrb	r1, [r3, #0]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	3302      	adds	r3, #2
 800a10e:	781a      	ldrb	r2, [r3, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3302      	adds	r3, #2
 800a114:	404a      	eors	r2, r1
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3303      	adds	r3, #3
 800a11e:	7819      	ldrb	r1, [r3, #0]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	3303      	adds	r3, #3
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3303      	adds	r3, #3
 800a12a:	404a      	eors	r2, r1
 800a12c:	b2d2      	uxtb	r2, r2
 800a12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	7819      	ldrb	r1, [r3, #0]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	781a      	ldrb	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	404a      	eors	r2, r1
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3305      	adds	r3, #5
 800a14a:	7819      	ldrb	r1, [r3, #0]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	3305      	adds	r3, #5
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3305      	adds	r3, #5
 800a156:	404a      	eors	r2, r1
 800a158:	b2d2      	uxtb	r2, r2
 800a15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3306      	adds	r3, #6
 800a160:	7819      	ldrb	r1, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3306      	adds	r3, #6
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3306      	adds	r3, #6
 800a16c:	404a      	eors	r2, r1
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3307      	adds	r3, #7
 800a176:	7819      	ldrb	r1, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	3307      	adds	r3, #7
 800a17c:	781a      	ldrb	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3307      	adds	r3, #7
 800a182:	404a      	eors	r2, r1
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3308      	adds	r3, #8
 800a18c:	7819      	ldrb	r1, [r3, #0]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3308      	adds	r3, #8
 800a198:	404a      	eors	r2, r1
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3309      	adds	r3, #9
 800a1a2:	7819      	ldrb	r1, [r3, #0]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	3309      	adds	r3, #9
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3309      	adds	r3, #9
 800a1ae:	404a      	eors	r2, r1
 800a1b0:	b2d2      	uxtb	r2, r2
 800a1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	330a      	adds	r3, #10
 800a1b8:	7819      	ldrb	r1, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	330a      	adds	r3, #10
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	330a      	adds	r3, #10
 800a1c4:	404a      	eors	r2, r1
 800a1c6:	b2d2      	uxtb	r2, r2
 800a1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	330b      	adds	r3, #11
 800a1ce:	7819      	ldrb	r1, [r3, #0]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	330b      	adds	r3, #11
 800a1d4:	781a      	ldrb	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	330b      	adds	r3, #11
 800a1da:	404a      	eors	r2, r1
 800a1dc:	b2d2      	uxtb	r2, r2
 800a1de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	330c      	adds	r3, #12
 800a1e4:	7819      	ldrb	r1, [r3, #0]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	330c      	adds	r3, #12
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	330c      	adds	r3, #12
 800a1f0:	404a      	eors	r2, r1
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	330d      	adds	r3, #13
 800a1fa:	7819      	ldrb	r1, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	330d      	adds	r3, #13
 800a200:	781a      	ldrb	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	330d      	adds	r3, #13
 800a206:	404a      	eors	r2, r1
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	330e      	adds	r3, #14
 800a210:	7819      	ldrb	r1, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	330e      	adds	r3, #14
 800a216:	781a      	ldrb	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	330e      	adds	r3, #14
 800a21c:	404a      	eors	r2, r1
 800a21e:	b2d2      	uxtb	r2, r2
 800a220:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	330f      	adds	r3, #15
 800a226:	7819      	ldrb	r1, [r3, #0]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	330f      	adds	r3, #15
 800a22c:	781a      	ldrb	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	330f      	adds	r3, #15
 800a232:	404a      	eors	r2, r1
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]
#endif
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bc80      	pop	{r7}
 800a240:	4770      	bx	lr

0800a242 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	781a      	ldrb	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	4053      	eors	r3, r2
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	3301      	adds	r3, #1
 800a262:	7819      	ldrb	r1, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3301      	adds	r3, #1
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3301      	adds	r3, #1
 800a26e:	404a      	eors	r2, r1
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	3302      	adds	r3, #2
 800a278:	7819      	ldrb	r1, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3302      	adds	r3, #2
 800a27e:	781a      	ldrb	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3302      	adds	r3, #2
 800a284:	404a      	eors	r2, r1
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	3303      	adds	r3, #3
 800a28e:	7819      	ldrb	r1, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3303      	adds	r3, #3
 800a294:	781a      	ldrb	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3303      	adds	r3, #3
 800a29a:	404a      	eors	r2, r1
 800a29c:	b2d2      	uxtb	r2, r2
 800a29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	7819      	ldrb	r1, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	781a      	ldrb	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	404a      	eors	r2, r1
 800a2b2:	b2d2      	uxtb	r2, r2
 800a2b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3305      	adds	r3, #5
 800a2ba:	7819      	ldrb	r1, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3305      	adds	r3, #5
 800a2c0:	781a      	ldrb	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3305      	adds	r3, #5
 800a2c6:	404a      	eors	r2, r1
 800a2c8:	b2d2      	uxtb	r2, r2
 800a2ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	3306      	adds	r3, #6
 800a2d0:	7819      	ldrb	r1, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3306      	adds	r3, #6
 800a2d6:	781a      	ldrb	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3306      	adds	r3, #6
 800a2dc:	404a      	eors	r2, r1
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	3307      	adds	r3, #7
 800a2e6:	7819      	ldrb	r1, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3307      	adds	r3, #7
 800a2ec:	781a      	ldrb	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3307      	adds	r3, #7
 800a2f2:	404a      	eors	r2, r1
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	7819      	ldrb	r1, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3308      	adds	r3, #8
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3308      	adds	r3, #8
 800a308:	404a      	eors	r2, r1
 800a30a:	b2d2      	uxtb	r2, r2
 800a30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	3309      	adds	r3, #9
 800a312:	7819      	ldrb	r1, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3309      	adds	r3, #9
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3309      	adds	r3, #9
 800a31e:	404a      	eors	r2, r1
 800a320:	b2d2      	uxtb	r2, r2
 800a322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	330a      	adds	r3, #10
 800a328:	7819      	ldrb	r1, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	330a      	adds	r3, #10
 800a32e:	781a      	ldrb	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	330a      	adds	r3, #10
 800a334:	404a      	eors	r2, r1
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	330b      	adds	r3, #11
 800a33e:	7819      	ldrb	r1, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	330b      	adds	r3, #11
 800a344:	781a      	ldrb	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	330b      	adds	r3, #11
 800a34a:	404a      	eors	r2, r1
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	330c      	adds	r3, #12
 800a354:	7819      	ldrb	r1, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	330c      	adds	r3, #12
 800a35a:	781a      	ldrb	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	330c      	adds	r3, #12
 800a360:	404a      	eors	r2, r1
 800a362:	b2d2      	uxtb	r2, r2
 800a364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	330d      	adds	r3, #13
 800a36a:	7819      	ldrb	r1, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	330d      	adds	r3, #13
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	330d      	adds	r3, #13
 800a376:	404a      	eors	r2, r1
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	330e      	adds	r3, #14
 800a380:	7819      	ldrb	r1, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	330e      	adds	r3, #14
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	330e      	adds	r3, #14
 800a38c:	404a      	eors	r2, r1
 800a38e:	b2d2      	uxtb	r2, r2
 800a390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	330f      	adds	r3, #15
 800a396:	7819      	ldrb	r1, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	330f      	adds	r3, #15
 800a39c:	781a      	ldrb	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	330f      	adds	r3, #15
 800a3a2:	404a      	eors	r2, r1
 800a3a4:	b2d2      	uxtb	r2, r2
 800a3a6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a3a8:	bf00      	nop
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a3bc:	6839      	ldr	r1, [r7, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff fe88 	bl	800a0d4 <xor_block>
}
 800a3c4:	bf00      	nop
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4b48      	ldr	r3, [pc, #288]	; (800a4fc <shift_sub_rows+0x130>)
 800a3dc:	5c9a      	ldrb	r2, [r3, r2]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4a43      	ldr	r2, [pc, #268]	; (800a4fc <shift_sub_rows+0x130>)
 800a3f0:	5c52      	ldrb	r2, [r2, r1]
 800a3f2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3308      	adds	r3, #8
 800a400:	4a3e      	ldr	r2, [pc, #248]	; (800a4fc <shift_sub_rows+0x130>)
 800a402:	5c52      	ldrb	r2, [r2, r1]
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	330c      	adds	r3, #12
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	330c      	adds	r3, #12
 800a412:	4a3a      	ldr	r2, [pc, #232]	; (800a4fc <shift_sub_rows+0x130>)
 800a414:	5c52      	ldrb	r2, [r2, r1]
 800a416:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	73fb      	strb	r3, [r7, #15]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3305      	adds	r3, #5
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	4619      	mov	r1, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a34      	ldr	r2, [pc, #208]	; (800a4fc <shift_sub_rows+0x130>)
 800a42c:	5c52      	ldrb	r2, [r2, r1]
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3309      	adds	r3, #9
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	4619      	mov	r1, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3305      	adds	r3, #5
 800a43c:	4a2f      	ldr	r2, [pc, #188]	; (800a4fc <shift_sub_rows+0x130>)
 800a43e:	5c52      	ldrb	r2, [r2, r1]
 800a440:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	330d      	adds	r3, #13
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	4619      	mov	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3309      	adds	r3, #9
 800a44e:	4a2b      	ldr	r2, [pc, #172]	; (800a4fc <shift_sub_rows+0x130>)
 800a450:	5c52      	ldrb	r2, [r2, r1]
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	7bfa      	ldrb	r2, [r7, #15]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	330d      	adds	r3, #13
 800a45a:	4928      	ldr	r1, [pc, #160]	; (800a4fc <shift_sub_rows+0x130>)
 800a45c:	5c8a      	ldrb	r2, [r1, r2]
 800a45e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	789b      	ldrb	r3, [r3, #2]
 800a464:	73fb      	strb	r3, [r7, #15]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	330a      	adds	r3, #10
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	4619      	mov	r1, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3302      	adds	r3, #2
 800a472:	4a22      	ldr	r2, [pc, #136]	; (800a4fc <shift_sub_rows+0x130>)
 800a474:	5c52      	ldrb	r2, [r2, r1]
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	7bfa      	ldrb	r2, [r7, #15]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	330a      	adds	r3, #10
 800a47e:	491f      	ldr	r1, [pc, #124]	; (800a4fc <shift_sub_rows+0x130>)
 800a480:	5c8a      	ldrb	r2, [r1, r2]
 800a482:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	799b      	ldrb	r3, [r3, #6]
 800a488:	73fb      	strb	r3, [r7, #15]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	330e      	adds	r3, #14
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	4619      	mov	r1, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3306      	adds	r3, #6
 800a496:	4a19      	ldr	r2, [pc, #100]	; (800a4fc <shift_sub_rows+0x130>)
 800a498:	5c52      	ldrb	r2, [r2, r1]
 800a49a:	701a      	strb	r2, [r3, #0]
 800a49c:	7bfa      	ldrb	r2, [r7, #15]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	330e      	adds	r3, #14
 800a4a2:	4916      	ldr	r1, [pc, #88]	; (800a4fc <shift_sub_rows+0x130>)
 800a4a4:	5c8a      	ldrb	r2, [r1, r2]
 800a4a6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7bdb      	ldrb	r3, [r3, #15]
 800a4ac:	73fb      	strb	r3, [r7, #15]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	330b      	adds	r3, #11
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	330f      	adds	r3, #15
 800a4ba:	4a10      	ldr	r2, [pc, #64]	; (800a4fc <shift_sub_rows+0x130>)
 800a4bc:	5c52      	ldrb	r2, [r2, r1]
 800a4be:	701a      	strb	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3307      	adds	r3, #7
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	330b      	adds	r3, #11
 800a4cc:	4a0b      	ldr	r2, [pc, #44]	; (800a4fc <shift_sub_rows+0x130>)
 800a4ce:	5c52      	ldrb	r2, [r2, r1]
 800a4d0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3303      	adds	r3, #3
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3307      	adds	r3, #7
 800a4de:	4a07      	ldr	r2, [pc, #28]	; (800a4fc <shift_sub_rows+0x130>)
 800a4e0:	5c52      	ldrb	r2, [r2, r1]
 800a4e2:	701a      	strb	r2, [r3, #0]
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3303      	adds	r3, #3
 800a4ea:	4904      	ldr	r1, [pc, #16]	; (800a4fc <shift_sub_rows+0x130>)
 800a4ec:	5c8a      	ldrb	r2, [r1, r2]
 800a4ee:	701a      	strb	r2, [r3, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bc80      	pop	{r7}
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	0801a9b4 	.word	0x0801a9b4

0800a500 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a508:	f107 0308 	add.w	r3, r7, #8
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fd6c 	bl	8009fec <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a514:	7a3b      	ldrb	r3, [r7, #8]
 800a516:	461a      	mov	r2, r3
 800a518:	4b9a      	ldr	r3, [pc, #616]	; (800a784 <mix_sub_columns+0x284>)
 800a51a:	5c9a      	ldrb	r2, [r3, r2]
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
 800a51e:	4619      	mov	r1, r3
 800a520:	4b99      	ldr	r3, [pc, #612]	; (800a788 <mix_sub_columns+0x288>)
 800a522:	5c5b      	ldrb	r3, [r3, r1]
 800a524:	4053      	eors	r3, r2
 800a526:	b2da      	uxtb	r2, r3
 800a528:	7cbb      	ldrb	r3, [r7, #18]
 800a52a:	4619      	mov	r1, r3
 800a52c:	4b97      	ldr	r3, [pc, #604]	; (800a78c <mix_sub_columns+0x28c>)
 800a52e:	5c5b      	ldrb	r3, [r3, r1]
 800a530:	4053      	eors	r3, r2
 800a532:	b2da      	uxtb	r2, r3
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	4619      	mov	r1, r3
 800a538:	4b94      	ldr	r3, [pc, #592]	; (800a78c <mix_sub_columns+0x28c>)
 800a53a:	5c5b      	ldrb	r3, [r3, r1]
 800a53c:	4053      	eors	r3, r2
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a544:	7a3b      	ldrb	r3, [r7, #8]
 800a546:	461a      	mov	r2, r3
 800a548:	4b90      	ldr	r3, [pc, #576]	; (800a78c <mix_sub_columns+0x28c>)
 800a54a:	5c9a      	ldrb	r2, [r3, r2]
 800a54c:	7b7b      	ldrb	r3, [r7, #13]
 800a54e:	4619      	mov	r1, r3
 800a550:	4b8c      	ldr	r3, [pc, #560]	; (800a784 <mix_sub_columns+0x284>)
 800a552:	5c5b      	ldrb	r3, [r3, r1]
 800a554:	4053      	eors	r3, r2
 800a556:	b2da      	uxtb	r2, r3
 800a558:	7cbb      	ldrb	r3, [r7, #18]
 800a55a:	4619      	mov	r1, r3
 800a55c:	4b8a      	ldr	r3, [pc, #552]	; (800a788 <mix_sub_columns+0x288>)
 800a55e:	5c5b      	ldrb	r3, [r3, r1]
 800a560:	4053      	eors	r3, r2
 800a562:	b2d9      	uxtb	r1, r3
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	461a      	mov	r2, r3
 800a568:	4b88      	ldr	r3, [pc, #544]	; (800a78c <mix_sub_columns+0x28c>)
 800a56a:	5c9a      	ldrb	r2, [r3, r2]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3301      	adds	r3, #1
 800a570:	404a      	eors	r2, r1
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a576:	7a3b      	ldrb	r3, [r7, #8]
 800a578:	461a      	mov	r2, r3
 800a57a:	4b84      	ldr	r3, [pc, #528]	; (800a78c <mix_sub_columns+0x28c>)
 800a57c:	5c9a      	ldrb	r2, [r3, r2]
 800a57e:	7b7b      	ldrb	r3, [r7, #13]
 800a580:	4619      	mov	r1, r3
 800a582:	4b82      	ldr	r3, [pc, #520]	; (800a78c <mix_sub_columns+0x28c>)
 800a584:	5c5b      	ldrb	r3, [r3, r1]
 800a586:	4053      	eors	r3, r2
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	7cbb      	ldrb	r3, [r7, #18]
 800a58c:	4619      	mov	r1, r3
 800a58e:	4b7d      	ldr	r3, [pc, #500]	; (800a784 <mix_sub_columns+0x284>)
 800a590:	5c5b      	ldrb	r3, [r3, r1]
 800a592:	4053      	eors	r3, r2
 800a594:	b2d9      	uxtb	r1, r3
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	461a      	mov	r2, r3
 800a59a:	4b7b      	ldr	r3, [pc, #492]	; (800a788 <mix_sub_columns+0x288>)
 800a59c:	5c9a      	ldrb	r2, [r3, r2]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	404a      	eors	r2, r1
 800a5a4:	b2d2      	uxtb	r2, r2
 800a5a6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a5a8:	7a3b      	ldrb	r3, [r7, #8]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4b76      	ldr	r3, [pc, #472]	; (800a788 <mix_sub_columns+0x288>)
 800a5ae:	5c9a      	ldrb	r2, [r3, r2]
 800a5b0:	7b7b      	ldrb	r3, [r7, #13]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4b75      	ldr	r3, [pc, #468]	; (800a78c <mix_sub_columns+0x28c>)
 800a5b6:	5c5b      	ldrb	r3, [r3, r1]
 800a5b8:	4053      	eors	r3, r2
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	7cbb      	ldrb	r3, [r7, #18]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4b72      	ldr	r3, [pc, #456]	; (800a78c <mix_sub_columns+0x28c>)
 800a5c2:	5c5b      	ldrb	r3, [r3, r1]
 800a5c4:	4053      	eors	r3, r2
 800a5c6:	b2d9      	uxtb	r1, r3
 800a5c8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4b6d      	ldr	r3, [pc, #436]	; (800a784 <mix_sub_columns+0x284>)
 800a5ce:	5c9a      	ldrb	r2, [r3, r2]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3303      	adds	r3, #3
 800a5d4:	404a      	eors	r2, r1
 800a5d6:	b2d2      	uxtb	r2, r2
 800a5d8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a5da:	7b3b      	ldrb	r3, [r7, #12]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	4b69      	ldr	r3, [pc, #420]	; (800a784 <mix_sub_columns+0x284>)
 800a5e0:	5c9a      	ldrb	r2, [r3, r2]
 800a5e2:	7c7b      	ldrb	r3, [r7, #17]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4b68      	ldr	r3, [pc, #416]	; (800a788 <mix_sub_columns+0x288>)
 800a5e8:	5c5b      	ldrb	r3, [r3, r1]
 800a5ea:	4053      	eors	r3, r2
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	7dbb      	ldrb	r3, [r7, #22]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4b66      	ldr	r3, [pc, #408]	; (800a78c <mix_sub_columns+0x28c>)
 800a5f4:	5c5b      	ldrb	r3, [r3, r1]
 800a5f6:	4053      	eors	r3, r2
 800a5f8:	b2d9      	uxtb	r1, r3
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4b63      	ldr	r3, [pc, #396]	; (800a78c <mix_sub_columns+0x28c>)
 800a600:	5c9a      	ldrb	r2, [r3, r2]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	404a      	eors	r2, r1
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a60c:	7b3b      	ldrb	r3, [r7, #12]
 800a60e:	461a      	mov	r2, r3
 800a610:	4b5e      	ldr	r3, [pc, #376]	; (800a78c <mix_sub_columns+0x28c>)
 800a612:	5c9a      	ldrb	r2, [r3, r2]
 800a614:	7c7b      	ldrb	r3, [r7, #17]
 800a616:	4619      	mov	r1, r3
 800a618:	4b5a      	ldr	r3, [pc, #360]	; (800a784 <mix_sub_columns+0x284>)
 800a61a:	5c5b      	ldrb	r3, [r3, r1]
 800a61c:	4053      	eors	r3, r2
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	7dbb      	ldrb	r3, [r7, #22]
 800a622:	4619      	mov	r1, r3
 800a624:	4b58      	ldr	r3, [pc, #352]	; (800a788 <mix_sub_columns+0x288>)
 800a626:	5c5b      	ldrb	r3, [r3, r1]
 800a628:	4053      	eors	r3, r2
 800a62a:	b2d9      	uxtb	r1, r3
 800a62c:	7afb      	ldrb	r3, [r7, #11]
 800a62e:	461a      	mov	r2, r3
 800a630:	4b56      	ldr	r3, [pc, #344]	; (800a78c <mix_sub_columns+0x28c>)
 800a632:	5c9a      	ldrb	r2, [r3, r2]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3305      	adds	r3, #5
 800a638:	404a      	eors	r2, r1
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800a63e:	7b3b      	ldrb	r3, [r7, #12]
 800a640:	461a      	mov	r2, r3
 800a642:	4b52      	ldr	r3, [pc, #328]	; (800a78c <mix_sub_columns+0x28c>)
 800a644:	5c9a      	ldrb	r2, [r3, r2]
 800a646:	7c7b      	ldrb	r3, [r7, #17]
 800a648:	4619      	mov	r1, r3
 800a64a:	4b50      	ldr	r3, [pc, #320]	; (800a78c <mix_sub_columns+0x28c>)
 800a64c:	5c5b      	ldrb	r3, [r3, r1]
 800a64e:	4053      	eors	r3, r2
 800a650:	b2da      	uxtb	r2, r3
 800a652:	7dbb      	ldrb	r3, [r7, #22]
 800a654:	4619      	mov	r1, r3
 800a656:	4b4b      	ldr	r3, [pc, #300]	; (800a784 <mix_sub_columns+0x284>)
 800a658:	5c5b      	ldrb	r3, [r3, r1]
 800a65a:	4053      	eors	r3, r2
 800a65c:	b2d9      	uxtb	r1, r3
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	461a      	mov	r2, r3
 800a662:	4b49      	ldr	r3, [pc, #292]	; (800a788 <mix_sub_columns+0x288>)
 800a664:	5c9a      	ldrb	r2, [r3, r2]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3306      	adds	r3, #6
 800a66a:	404a      	eors	r2, r1
 800a66c:	b2d2      	uxtb	r2, r2
 800a66e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800a670:	7b3b      	ldrb	r3, [r7, #12]
 800a672:	461a      	mov	r2, r3
 800a674:	4b44      	ldr	r3, [pc, #272]	; (800a788 <mix_sub_columns+0x288>)
 800a676:	5c9a      	ldrb	r2, [r3, r2]
 800a678:	7c7b      	ldrb	r3, [r7, #17]
 800a67a:	4619      	mov	r1, r3
 800a67c:	4b43      	ldr	r3, [pc, #268]	; (800a78c <mix_sub_columns+0x28c>)
 800a67e:	5c5b      	ldrb	r3, [r3, r1]
 800a680:	4053      	eors	r3, r2
 800a682:	b2da      	uxtb	r2, r3
 800a684:	7dbb      	ldrb	r3, [r7, #22]
 800a686:	4619      	mov	r1, r3
 800a688:	4b40      	ldr	r3, [pc, #256]	; (800a78c <mix_sub_columns+0x28c>)
 800a68a:	5c5b      	ldrb	r3, [r3, r1]
 800a68c:	4053      	eors	r3, r2
 800a68e:	b2d9      	uxtb	r1, r3
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	461a      	mov	r2, r3
 800a694:	4b3b      	ldr	r3, [pc, #236]	; (800a784 <mix_sub_columns+0x284>)
 800a696:	5c9a      	ldrb	r2, [r3, r2]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3307      	adds	r3, #7
 800a69c:	404a      	eors	r2, r1
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800a6a2:	7c3b      	ldrb	r3, [r7, #16]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4b37      	ldr	r3, [pc, #220]	; (800a784 <mix_sub_columns+0x284>)
 800a6a8:	5c9a      	ldrb	r2, [r3, r2]
 800a6aa:	7d7b      	ldrb	r3, [r7, #21]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4b36      	ldr	r3, [pc, #216]	; (800a788 <mix_sub_columns+0x288>)
 800a6b0:	5c5b      	ldrb	r3, [r3, r1]
 800a6b2:	4053      	eors	r3, r2
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	7abb      	ldrb	r3, [r7, #10]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4b34      	ldr	r3, [pc, #208]	; (800a78c <mix_sub_columns+0x28c>)
 800a6bc:	5c5b      	ldrb	r3, [r3, r1]
 800a6be:	4053      	eors	r3, r2
 800a6c0:	b2d9      	uxtb	r1, r3
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4b31      	ldr	r3, [pc, #196]	; (800a78c <mix_sub_columns+0x28c>)
 800a6c8:	5c9a      	ldrb	r2, [r3, r2]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	404a      	eors	r2, r1
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800a6d4:	7c3b      	ldrb	r3, [r7, #16]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4b2c      	ldr	r3, [pc, #176]	; (800a78c <mix_sub_columns+0x28c>)
 800a6da:	5c9a      	ldrb	r2, [r3, r2]
 800a6dc:	7d7b      	ldrb	r3, [r7, #21]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4b28      	ldr	r3, [pc, #160]	; (800a784 <mix_sub_columns+0x284>)
 800a6e2:	5c5b      	ldrb	r3, [r3, r1]
 800a6e4:	4053      	eors	r3, r2
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	7abb      	ldrb	r3, [r7, #10]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4b26      	ldr	r3, [pc, #152]	; (800a788 <mix_sub_columns+0x288>)
 800a6ee:	5c5b      	ldrb	r3, [r3, r1]
 800a6f0:	4053      	eors	r3, r2
 800a6f2:	b2d9      	uxtb	r1, r3
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4b24      	ldr	r3, [pc, #144]	; (800a78c <mix_sub_columns+0x28c>)
 800a6fa:	5c9a      	ldrb	r2, [r3, r2]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3309      	adds	r3, #9
 800a700:	404a      	eors	r2, r1
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800a706:	7c3b      	ldrb	r3, [r7, #16]
 800a708:	461a      	mov	r2, r3
 800a70a:	4b20      	ldr	r3, [pc, #128]	; (800a78c <mix_sub_columns+0x28c>)
 800a70c:	5c9a      	ldrb	r2, [r3, r2]
 800a70e:	7d7b      	ldrb	r3, [r7, #21]
 800a710:	4619      	mov	r1, r3
 800a712:	4b1e      	ldr	r3, [pc, #120]	; (800a78c <mix_sub_columns+0x28c>)
 800a714:	5c5b      	ldrb	r3, [r3, r1]
 800a716:	4053      	eors	r3, r2
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	7abb      	ldrb	r3, [r7, #10]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4b19      	ldr	r3, [pc, #100]	; (800a784 <mix_sub_columns+0x284>)
 800a720:	5c5b      	ldrb	r3, [r3, r1]
 800a722:	4053      	eors	r3, r2
 800a724:	b2d9      	uxtb	r1, r3
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	461a      	mov	r2, r3
 800a72a:	4b17      	ldr	r3, [pc, #92]	; (800a788 <mix_sub_columns+0x288>)
 800a72c:	5c9a      	ldrb	r2, [r3, r2]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	330a      	adds	r3, #10
 800a732:	404a      	eors	r2, r1
 800a734:	b2d2      	uxtb	r2, r2
 800a736:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800a738:	7c3b      	ldrb	r3, [r7, #16]
 800a73a:	461a      	mov	r2, r3
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <mix_sub_columns+0x288>)
 800a73e:	5c9a      	ldrb	r2, [r3, r2]
 800a740:	7d7b      	ldrb	r3, [r7, #21]
 800a742:	4619      	mov	r1, r3
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <mix_sub_columns+0x28c>)
 800a746:	5c5b      	ldrb	r3, [r3, r1]
 800a748:	4053      	eors	r3, r2
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	7abb      	ldrb	r3, [r7, #10]
 800a74e:	4619      	mov	r1, r3
 800a750:	4b0e      	ldr	r3, [pc, #56]	; (800a78c <mix_sub_columns+0x28c>)
 800a752:	5c5b      	ldrb	r3, [r3, r1]
 800a754:	4053      	eors	r3, r2
 800a756:	b2d9      	uxtb	r1, r3
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	461a      	mov	r2, r3
 800a75c:	4b09      	ldr	r3, [pc, #36]	; (800a784 <mix_sub_columns+0x284>)
 800a75e:	5c9a      	ldrb	r2, [r3, r2]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	330b      	adds	r3, #11
 800a764:	404a      	eors	r2, r1
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800a76a:	7d3b      	ldrb	r3, [r7, #20]
 800a76c:	461a      	mov	r2, r3
 800a76e:	4b05      	ldr	r3, [pc, #20]	; (800a784 <mix_sub_columns+0x284>)
 800a770:	5c9a      	ldrb	r2, [r3, r2]
 800a772:	7a7b      	ldrb	r3, [r7, #9]
 800a774:	4619      	mov	r1, r3
 800a776:	4b04      	ldr	r3, [pc, #16]	; (800a788 <mix_sub_columns+0x288>)
 800a778:	5c5b      	ldrb	r3, [r3, r1]
 800a77a:	4053      	eors	r3, r2
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	4619      	mov	r1, r3
 800a782:	e005      	b.n	800a790 <mix_sub_columns+0x290>
 800a784:	0801aab4 	.word	0x0801aab4
 800a788:	0801abb4 	.word	0x0801abb4
 800a78c:	0801a9b4 	.word	0x0801a9b4
 800a790:	4b2d      	ldr	r3, [pc, #180]	; (800a848 <mix_sub_columns+0x348>)
 800a792:	5c5b      	ldrb	r3, [r3, r1]
 800a794:	4053      	eors	r3, r2
 800a796:	b2d9      	uxtb	r1, r3
 800a798:	7cfb      	ldrb	r3, [r7, #19]
 800a79a:	461a      	mov	r2, r3
 800a79c:	4b2a      	ldr	r3, [pc, #168]	; (800a848 <mix_sub_columns+0x348>)
 800a79e:	5c9a      	ldrb	r2, [r3, r2]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	404a      	eors	r2, r1
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800a7aa:	7d3b      	ldrb	r3, [r7, #20]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4b26      	ldr	r3, [pc, #152]	; (800a848 <mix_sub_columns+0x348>)
 800a7b0:	5c9a      	ldrb	r2, [r3, r2]
 800a7b2:	7a7b      	ldrb	r3, [r7, #9]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4b25      	ldr	r3, [pc, #148]	; (800a84c <mix_sub_columns+0x34c>)
 800a7b8:	5c5b      	ldrb	r3, [r3, r1]
 800a7ba:	4053      	eors	r3, r2
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4b23      	ldr	r3, [pc, #140]	; (800a850 <mix_sub_columns+0x350>)
 800a7c4:	5c5b      	ldrb	r3, [r3, r1]
 800a7c6:	4053      	eors	r3, r2
 800a7c8:	b2d9      	uxtb	r1, r3
 800a7ca:	7cfb      	ldrb	r3, [r7, #19]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <mix_sub_columns+0x348>)
 800a7d0:	5c9a      	ldrb	r2, [r3, r2]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	330d      	adds	r3, #13
 800a7d6:	404a      	eors	r2, r1
 800a7d8:	b2d2      	uxtb	r2, r2
 800a7da:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800a7dc:	7d3b      	ldrb	r3, [r7, #20]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	4b19      	ldr	r3, [pc, #100]	; (800a848 <mix_sub_columns+0x348>)
 800a7e2:	5c9a      	ldrb	r2, [r3, r2]
 800a7e4:	7a7b      	ldrb	r3, [r7, #9]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4b17      	ldr	r3, [pc, #92]	; (800a848 <mix_sub_columns+0x348>)
 800a7ea:	5c5b      	ldrb	r3, [r3, r1]
 800a7ec:	4053      	eors	r3, r2
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4b15      	ldr	r3, [pc, #84]	; (800a84c <mix_sub_columns+0x34c>)
 800a7f6:	5c5b      	ldrb	r3, [r3, r1]
 800a7f8:	4053      	eors	r3, r2
 800a7fa:	b2d9      	uxtb	r1, r3
 800a7fc:	7cfb      	ldrb	r3, [r7, #19]
 800a7fe:	461a      	mov	r2, r3
 800a800:	4b13      	ldr	r3, [pc, #76]	; (800a850 <mix_sub_columns+0x350>)
 800a802:	5c9a      	ldrb	r2, [r3, r2]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	330e      	adds	r3, #14
 800a808:	404a      	eors	r2, r1
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800a80e:	7d3b      	ldrb	r3, [r7, #20]
 800a810:	461a      	mov	r2, r3
 800a812:	4b0f      	ldr	r3, [pc, #60]	; (800a850 <mix_sub_columns+0x350>)
 800a814:	5c9a      	ldrb	r2, [r3, r2]
 800a816:	7a7b      	ldrb	r3, [r7, #9]
 800a818:	4619      	mov	r1, r3
 800a81a:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <mix_sub_columns+0x348>)
 800a81c:	5c5b      	ldrb	r3, [r3, r1]
 800a81e:	4053      	eors	r3, r2
 800a820:	b2da      	uxtb	r2, r3
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	4619      	mov	r1, r3
 800a826:	4b08      	ldr	r3, [pc, #32]	; (800a848 <mix_sub_columns+0x348>)
 800a828:	5c5b      	ldrb	r3, [r3, r1]
 800a82a:	4053      	eors	r3, r2
 800a82c:	b2d9      	uxtb	r1, r3
 800a82e:	7cfb      	ldrb	r3, [r7, #19]
 800a830:	461a      	mov	r2, r3
 800a832:	4b06      	ldr	r3, [pc, #24]	; (800a84c <mix_sub_columns+0x34c>)
 800a834:	5c9a      	ldrb	r2, [r3, r2]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	330f      	adds	r3, #15
 800a83a:	404a      	eors	r2, r1
 800a83c:	b2d2      	uxtb	r2, r2
 800a83e:	701a      	strb	r2, [r3, #0]
  }
 800a840:	bf00      	nop
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	0801a9b4 	.word	0x0801a9b4
 800a84c:	0801aab4 	.word	0x0801aab4
 800a850:	0801abb4 	.word	0x0801abb4

0800a854 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	460b      	mov	r3, r1
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	3b10      	subs	r3, #16
 800a866:	2b10      	cmp	r3, #16
 800a868:	bf8c      	ite	hi
 800a86a:	2201      	movhi	r2, #1
 800a86c:	2200      	movls	r2, #0
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	2a00      	cmp	r2, #0
 800a872:	d10d      	bne.n	800a890 <lorawan_aes_set_key+0x3c>
 800a874:	2201      	movs	r2, #1
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a87e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a882:	2b00      	cmp	r3, #0
 800a884:	bf14      	ite	ne
 800a886:	2301      	movne	r3, #1
 800a888:	2300      	moveq	r3, #0
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d105      	bne.n	800a89c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800a898:	23ff      	movs	r3, #255	; 0xff
 800a89a:	e0b2      	b.n	800aa02 <lorawan_aes_set_key+0x1ae>
        break;
 800a89c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7afa      	ldrb	r2, [r7, #11]
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fbfa 	bl	800a09e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	331c      	adds	r3, #28
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800a8b4:	7c7b      	ldrb	r3, [r7, #17]
 800a8b6:	091b      	lsrs	r3, r3, #4
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a8c4:	7afb      	ldrb	r3, [r7, #11]
 800a8c6:	75fb      	strb	r3, [r7, #23]
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	75bb      	strb	r3, [r7, #22]
 800a8cc:	e093      	b.n	800a9f6 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	5cd3      	ldrb	r3, [r2, r3]
 800a8d6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	3b03      	subs	r3, #3
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	5cd3      	ldrb	r3, [r2, r3]
 800a8e0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	3b02      	subs	r3, #2
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	5cd3      	ldrb	r3, [r2, r3]
 800a8ea:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	5cd3      	ldrb	r3, [r2, r3]
 800a8f4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	7afa      	ldrb	r2, [r7, #11]
 800a8fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8fe:	fb02 f201 	mul.w	r2, r2, r1
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d127      	bne.n	800a95a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800a90a:	7d7b      	ldrb	r3, [r7, #21]
 800a90c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800a90e:	7d3b      	ldrb	r3, [r7, #20]
 800a910:	4a3e      	ldr	r2, [pc, #248]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a912:	5cd2      	ldrb	r2, [r2, r3]
 800a914:	7dbb      	ldrb	r3, [r7, #22]
 800a916:	4053      	eors	r3, r2
 800a918:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800a91a:	7cfb      	ldrb	r3, [r7, #19]
 800a91c:	4a3b      	ldr	r2, [pc, #236]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a91e:	5cd3      	ldrb	r3, [r2, r3]
 800a920:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800a922:	7cbb      	ldrb	r3, [r7, #18]
 800a924:	4a39      	ldr	r2, [pc, #228]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a926:	5cd3      	ldrb	r3, [r2, r3]
 800a928:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800a92a:	7c3b      	ldrb	r3, [r7, #16]
 800a92c:	4a37      	ldr	r2, [pc, #220]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a92e:	5cd3      	ldrb	r3, [r2, r3]
 800a930:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800a932:	7dbb      	ldrb	r3, [r7, #22]
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	b25a      	sxtb	r2, r3
 800a938:	7dbb      	ldrb	r3, [r7, #22]
 800a93a:	09db      	lsrs	r3, r3, #7
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	4619      	mov	r1, r3
 800a940:	0049      	lsls	r1, r1, #1
 800a942:	440b      	add	r3, r1
 800a944:	4619      	mov	r1, r3
 800a946:	00c8      	lsls	r0, r1, #3
 800a948:	4619      	mov	r1, r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	440b      	add	r3, r1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	b25b      	sxtb	r3, r3
 800a952:	4053      	eors	r3, r2
 800a954:	b25b      	sxtb	r3, r3
 800a956:	75bb      	strb	r3, [r7, #22]
 800a958:	e01c      	b.n	800a994 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800a95a:	7afb      	ldrb	r3, [r7, #11]
 800a95c:	2b18      	cmp	r3, #24
 800a95e:	d919      	bls.n	800a994 <lorawan_aes_set_key+0x140>
 800a960:	7dfb      	ldrb	r3, [r7, #23]
 800a962:	7afa      	ldrb	r2, [r7, #11]
 800a964:	fbb3 f1f2 	udiv	r1, r3, r2
 800a968:	fb02 f201 	mul.w	r2, r2, r1
 800a96c:	1a9b      	subs	r3, r3, r2
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b10      	cmp	r3, #16
 800a972:	d10f      	bne.n	800a994 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800a974:	7d7b      	ldrb	r3, [r7, #21]
 800a976:	4a25      	ldr	r2, [pc, #148]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a978:	5cd3      	ldrb	r3, [r2, r3]
 800a97a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800a97c:	7d3b      	ldrb	r3, [r7, #20]
 800a97e:	4a23      	ldr	r2, [pc, #140]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a980:	5cd3      	ldrb	r3, [r2, r3]
 800a982:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800a984:	7cfb      	ldrb	r3, [r7, #19]
 800a986:	4a21      	ldr	r2, [pc, #132]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a988:	5cd3      	ldrb	r3, [r2, r3]
 800a98a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800a98c:	7cbb      	ldrb	r3, [r7, #18]
 800a98e:	4a1f      	ldr	r2, [pc, #124]	; (800aa0c <lorawan_aes_set_key+0x1b8>)
 800a990:	5cd3      	ldrb	r3, [r2, r3]
 800a992:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800a994:	7dfa      	ldrb	r2, [r7, #23]
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800a99c:	7c3b      	ldrb	r3, [r7, #16]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	5cd1      	ldrb	r1, [r2, r3]
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	7d7a      	ldrb	r2, [r7, #21]
 800a9a6:	404a      	eors	r2, r1
 800a9a8:	b2d1      	uxtb	r1, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800a9ae:	7c3b      	ldrb	r3, [r7, #16]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	5cd1      	ldrb	r1, [r2, r3]
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	7d3a      	ldrb	r2, [r7, #20]
 800a9bc:	404a      	eors	r2, r1
 800a9be:	b2d1      	uxtb	r1, r2
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800a9c4:	7c3b      	ldrb	r3, [r7, #16]
 800a9c6:	3302      	adds	r3, #2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	5cd1      	ldrb	r1, [r2, r3]
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	7cfa      	ldrb	r2, [r7, #19]
 800a9d2:	404a      	eors	r2, r1
 800a9d4:	b2d1      	uxtb	r1, r2
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800a9da:	7c3b      	ldrb	r3, [r7, #16]
 800a9dc:	3303      	adds	r3, #3
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	5cd1      	ldrb	r1, [r2, r3]
 800a9e2:	7dfb      	ldrb	r3, [r7, #23]
 800a9e4:	3303      	adds	r3, #3
 800a9e6:	7cba      	ldrb	r2, [r7, #18]
 800a9e8:	404a      	eors	r2, r1
 800a9ea:	b2d1      	uxtb	r1, r2
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	75fb      	strb	r3, [r7, #23]
 800a9f6:	7dfa      	ldrb	r2, [r7, #23]
 800a9f8:	7c7b      	ldrb	r3, [r7, #17]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	f4ff af67 	bcc.w	800a8ce <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	0801a9b4 	.word	0x0801a9b4

0800aa10 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08a      	sub	sp, #40	; 0x28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d038      	beq.n	800aa98 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	f107 0314 	add.w	r3, r7, #20
 800aa2c:	68f9      	ldr	r1, [r7, #12]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff fc07 	bl	800a242 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800aa34:	2301      	movs	r3, #1
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa3a:	e014      	b.n	800aa66 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800aa3c:	f107 0314 	add.w	r3, r7, #20
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fd5d 	bl	800a500 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa4c:	0112      	lsls	r2, r2, #4
 800aa4e:	441a      	add	r2, r3
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	4611      	mov	r1, r2
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fcab 	bl	800a3b2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa60:	3301      	adds	r3, #1
 800aa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800aa6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d3e3      	bcc.n	800aa3c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7ff fca7 	bl	800a3cc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa84:	0112      	lsls	r2, r2, #4
 800aa86:	441a      	add	r2, r3
 800aa88:	f107 0314 	add.w	r3, r7, #20
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68b8      	ldr	r0, [r7, #8]
 800aa90:	f7ff fbd7 	bl	800a242 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	e000      	b.n	800aa9a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800aa98:	23ff      	movs	r3, #255	; 0xff
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3728      	adds	r7, #40	; 0x28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa6:	b09d      	sub	sp, #116	; 0x74
 800aaa8:	af10      	add	r7, sp, #64	; 0x40
 800aaaa:	4603      	mov	r3, r0
 800aaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800aab0:	2306      	movs	r3, #6
 800aab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800aab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800aaba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aabe:	4611      	mov	r1, r2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fa05 	bl	800aed0 <SecureElementGetKeyByID>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800aacc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f040 80b0 	bne.w	800ac36 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800aad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800aade:	4b58      	ldr	r3, [pc, #352]	; (800ac40 <PrintKey+0x19c>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	2100      	movs	r1, #0
 800aae4:	2002      	movs	r0, #2
 800aae6:	f00e ff99 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800aaea:	e056      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800aaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d106      	bne.n	800ab02 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800aaf4:	4b53      	ldr	r3, [pc, #332]	; (800ac44 <PrintKey+0x1a0>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2002      	movs	r0, #2
 800aafc:	f00e ff8e 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab00:	e04b      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800ab02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d106      	bne.n	800ab18 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ab0a:	4b4f      	ldr	r3, [pc, #316]	; (800ac48 <PrintKey+0x1a4>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	2002      	movs	r0, #2
 800ab12:	f00e ff83 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab16:	e040      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ab18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d106      	bne.n	800ab2e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ab20:	4b4a      	ldr	r3, [pc, #296]	; (800ac4c <PrintKey+0x1a8>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	2100      	movs	r1, #0
 800ab26:	2002      	movs	r0, #2
 800ab28:	f00e ff78 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab2c:	e035      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ab2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d106      	bne.n	800ab44 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ab36:	4b46      	ldr	r3, [pc, #280]	; (800ac50 <PrintKey+0x1ac>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	2002      	movs	r0, #2
 800ab3e:	f00e ff6d 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab42:	e02a      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ab44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab48:	2b7f      	cmp	r3, #127	; 0x7f
 800ab4a:	d106      	bne.n	800ab5a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ab4c:	4b41      	ldr	r3, [pc, #260]	; (800ac54 <PrintKey+0x1b0>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	2002      	movs	r0, #2
 800ab54:	f00e ff62 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab58:	e01f      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ab5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab5e:	2b80      	cmp	r3, #128	; 0x80
 800ab60:	d106      	bne.n	800ab70 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ab62:	4b3d      	ldr	r3, [pc, #244]	; (800ac58 <PrintKey+0x1b4>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	2100      	movs	r1, #0
 800ab68:	2002      	movs	r0, #2
 800ab6a:	f00e ff57 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab6e:	e014      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ab70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab74:	2b81      	cmp	r3, #129	; 0x81
 800ab76:	d106      	bne.n	800ab86 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ab78:	4b38      	ldr	r3, [pc, #224]	; (800ac5c <PrintKey+0x1b8>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f00e ff4c 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 800ab84:	e009      	b.n	800ab9a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ab86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab8a:	2b82      	cmp	r3, #130	; 0x82
 800ab8c:	d105      	bne.n	800ab9a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ab8e:	4b34      	ldr	r3, [pc, #208]	; (800ac60 <PrintKey+0x1bc>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	2100      	movs	r1, #0
 800ab94:	2002      	movs	r0, #2
 800ab96:	f00e ff41 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	785b      	ldrb	r3, [r3, #1]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	789b      	ldrb	r3, [r3, #2]
 800aba4:	461c      	mov	r4, r3
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	78db      	ldrb	r3, [r3, #3]
 800abaa:	461d      	mov	r5, r3
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	791b      	ldrb	r3, [r3, #4]
 800abb0:	461e      	mov	r6, r3
 800abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb4:	795b      	ldrb	r3, [r3, #5]
 800abb6:	623b      	str	r3, [r7, #32]
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	799b      	ldrb	r3, [r3, #6]
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	79db      	ldrb	r3, [r3, #7]
 800abc2:	61bb      	str	r3, [r7, #24]
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	7a1b      	ldrb	r3, [r3, #8]
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	7a5b      	ldrb	r3, [r3, #9]
 800abce:	613b      	str	r3, [r7, #16]
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	7a9b      	ldrb	r3, [r3, #10]
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd8:	7adb      	ldrb	r3, [r3, #11]
 800abda:	60bb      	str	r3, [r7, #8]
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abde:	7b1b      	ldrb	r3, [r3, #12]
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	7b5b      	ldrb	r3, [r3, #13]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	7b9b      	ldrb	r3, [r3, #14]
 800abec:	4619      	mov	r1, r3
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	7bdb      	ldrb	r3, [r3, #15]
 800abf2:	461a      	mov	r2, r3
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	7c1b      	ldrb	r3, [r3, #16]
 800abf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abfa:	920e      	str	r2, [sp, #56]	; 0x38
 800abfc:	910d      	str	r1, [sp, #52]	; 0x34
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	920c      	str	r2, [sp, #48]	; 0x30
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	920b      	str	r2, [sp, #44]	; 0x2c
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	920a      	str	r2, [sp, #40]	; 0x28
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	9208      	str	r2, [sp, #32]
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	9207      	str	r2, [sp, #28]
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	9206      	str	r2, [sp, #24]
 800ac1a:	69fa      	ldr	r2, [r7, #28]
 800ac1c:	9205      	str	r2, [sp, #20]
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	9304      	str	r3, [sp, #16]
 800ac22:	9603      	str	r6, [sp, #12]
 800ac24:	9502      	str	r5, [sp, #8]
 800ac26:	9401      	str	r4, [sp, #4]
 800ac28:	9000      	str	r0, [sp, #0]
 800ac2a:	4b0e      	ldr	r3, [pc, #56]	; (800ac64 <PrintKey+0x1c0>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2100      	movs	r1, #0
 800ac30:	2002      	movs	r0, #2
 800ac32:	f00e fef3 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800ac36:	bf00      	nop
 800ac38:	3734      	adds	r7, #52	; 0x34
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	0801a3b0 	.word	0x0801a3b0
 800ac44:	0801a3c8 	.word	0x0801a3c8
 800ac48:	0801a3e0 	.word	0x0801a3e0
 800ac4c:	0801a3f8 	.word	0x0801a3f8
 800ac50:	0801a410 	.word	0x0801a410
 800ac54:	0801a428 	.word	0x0801a428
 800ac58:	0801a440 	.word	0x0801a440
 800ac5c:	0801a458 	.word	0x0801a458
 800ac60:	0801a470 	.word	0x0801a470
 800ac64:	0801a488 	.word	0x0801a488

0800ac68 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	4603      	mov	r3, r0
 800ac70:	6039      	str	r1, [r7, #0]
 800ac72:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ac74:	2300      	movs	r3, #0
 800ac76:	73fb      	strb	r3, [r7, #15]
 800ac78:	e01a      	b.n	800acb0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ac7a:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <GetKeyByID+0x5c>)
 800ac7c:	6819      	ldr	r1, [r3, #0]
 800ac7e:	7bfa      	ldrb	r2, [r7, #15]
 800ac80:	4613      	mov	r3, r2
 800ac82:	011b      	lsls	r3, r3, #4
 800ac84:	4413      	add	r3, r2
 800ac86:	440b      	add	r3, r1
 800ac88:	3310      	adds	r3, #16
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	79fa      	ldrb	r2, [r7, #7]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d10b      	bne.n	800acaa <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ac92:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <GetKeyByID+0x5c>)
 800ac94:	6819      	ldr	r1, [r3, #0]
 800ac96:	7bfa      	ldrb	r2, [r7, #15]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	4413      	add	r3, r2
 800ac9e:	3310      	adds	r3, #16
 800aca0:	18ca      	adds	r2, r1, r3
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800aca6:	2300      	movs	r3, #0
 800aca8:	e006      	b.n	800acb8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	3301      	adds	r3, #1
 800acae:	73fb      	strb	r3, [r7, #15]
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	2b09      	cmp	r3, #9
 800acb4:	d9e1      	bls.n	800ac7a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800acb6:	2303      	movs	r3, #3
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bc80      	pop	{r7}
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	200002c8 	.word	0x200002c8

0800acc8 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b0d1      	sub	sp, #324	; 0x144
 800accc:	af00      	add	r7, sp, #0
 800acce:	f107 040c 	add.w	r4, r7, #12
 800acd2:	6020      	str	r0, [r4, #0]
 800acd4:	f107 0008 	add.w	r0, r7, #8
 800acd8:	6001      	str	r1, [r0, #0]
 800acda:	4619      	mov	r1, r3
 800acdc:	1dbb      	adds	r3, r7, #6
 800acde:	801a      	strh	r2, [r3, #0]
 800ace0:	1d7b      	adds	r3, r7, #5
 800ace2:	460a      	mov	r2, r1
 800ace4:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <ComputeCmac+0x30>
 800acf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d101      	bne.n	800acfc <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800acf8:	2302      	movs	r3, #2
 800acfa:	e04e      	b.n	800ad9a <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800acfc:	f107 0314 	add.w	r3, r7, #20
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe ff23 	bl	8009b4c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ad06:	f107 0210 	add.w	r2, r7, #16
 800ad0a:	1d7b      	adds	r3, r7, #5
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	4611      	mov	r1, r2
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff ffa9 	bl	800ac68 <GetKeyByID>
 800ad16:	4603      	mov	r3, r0
 800ad18:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ad1c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d138      	bne.n	800ad96 <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ad24:	f107 0310 	add.w	r3, r7, #16
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	f107 0314 	add.w	r3, r7, #20
 800ad30:	4611      	mov	r1, r2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe ff23 	bl	8009b7e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ad38:	f107 030c 	add.w	r3, r7, #12
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ad42:	f107 030c 	add.w	r3, r7, #12
 800ad46:	f107 0014 	add.w	r0, r7, #20
 800ad4a:	2210      	movs	r2, #16
 800ad4c:	6819      	ldr	r1, [r3, #0]
 800ad4e:	f7fe ff25 	bl	8009b9c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ad52:	1dbb      	adds	r3, r7, #6
 800ad54:	881a      	ldrh	r2, [r3, #0]
 800ad56:	f107 0308 	add.w	r3, r7, #8
 800ad5a:	f107 0014 	add.w	r0, r7, #20
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	f7fe ff1c 	bl	8009b9c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ad64:	f107 0214 	add.w	r2, r7, #20
 800ad68:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe ffd6 	bl	8009d20 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ad74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ad78:	061a      	lsls	r2, r3, #24
 800ad7a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ad7e:	041b      	lsls	r3, r3, #16
 800ad80:	431a      	orrs	r2, r3
 800ad82:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ad8a:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ad94:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ad96:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd90      	pop	{r4, r7, pc}

0800ada4 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ada4:	b5b0      	push	{r4, r5, r7, lr}
 800ada6:	b0b2      	sub	sp, #200	; 0xc8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800adae:	f107 0308 	add.w	r3, r7, #8
 800adb2:	22c0      	movs	r2, #192	; 0xc0
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f00f f8ce 	bl	8019f58 <memset>
 800adbc:	4a3b      	ldr	r2, [pc, #236]	; (800aeac <SecureElementInit+0x108>)
 800adbe:	f107 0308 	add.w	r3, r7, #8
 800adc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adc6:	e883 0003 	stmia.w	r3, {r0, r1}
 800adca:	4a39      	ldr	r2, [pc, #228]	; (800aeb0 <SecureElementInit+0x10c>)
 800adcc:	f107 0310 	add.w	r3, r7, #16
 800add0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800add4:	e883 0003 	stmia.w	r3, {r0, r1}
 800add8:	4b36      	ldr	r3, [pc, #216]	; (800aeb4 <SecureElementInit+0x110>)
 800adda:	f107 0419 	add.w	r4, r7, #25
 800adde:	461d      	mov	r5, r3
 800ade0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ade2:	6020      	str	r0, [r4, #0]
 800ade4:	6061      	str	r1, [r4, #4]
 800ade6:	60a2      	str	r2, [r4, #8]
 800ade8:	60e3      	str	r3, [r4, #12]
 800adea:	2301      	movs	r3, #1
 800adec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800adf0:	4b31      	ldr	r3, [pc, #196]	; (800aeb8 <SecureElementInit+0x114>)
 800adf2:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800adf6:	461d      	mov	r5, r3
 800adf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adfa:	6020      	str	r0, [r4, #0]
 800adfc:	6061      	str	r1, [r4, #4]
 800adfe:	60a2      	str	r2, [r4, #8]
 800ae00:	60e3      	str	r3, [r4, #12]
 800ae02:	2302      	movs	r3, #2
 800ae04:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800ae08:	4b2c      	ldr	r3, [pc, #176]	; (800aebc <SecureElementInit+0x118>)
 800ae0a:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800ae0e:	461d      	mov	r5, r3
 800ae10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae12:	6020      	str	r0, [r4, #0]
 800ae14:	6061      	str	r1, [r4, #4]
 800ae16:	60a2      	str	r2, [r4, #8]
 800ae18:	60e3      	str	r3, [r4, #12]
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ae20:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <SecureElementInit+0x11c>)
 800ae22:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ae26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800ae32:	237f      	movs	r3, #127	; 0x7f
 800ae34:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800ae38:	2380      	movs	r3, #128	; 0x80
 800ae3a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800ae3e:	2381      	movs	r3, #129	; 0x81
 800ae40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800ae44:	2382      	movs	r3, #130	; 0x82
 800ae46:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800ae4a:	2383      	movs	r3, #131	; 0x83
 800ae4c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ae56:	2302      	movs	r3, #2
 800ae58:	e023      	b.n	800aea2 <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ae5a:	4a1a      	ldr	r2, [pc, #104]	; (800aec4 <SecureElementInit+0x120>)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ae60:	4b18      	ldr	r3, [pc, #96]	; (800aec4 <SecureElementInit+0x120>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f107 0108 	add.w	r1, r7, #8
 800ae68:	22c0      	movs	r2, #192	; 0xc0
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f00a fb95 	bl	801559a <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ae70:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <SecureElementInit+0x124>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	2100      	movs	r1, #0
 800ae76:	2002      	movs	r0, #2
 800ae78:	f00e fdd0 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	f7ff fe11 	bl	800aaa4 <PrintKey>
    PrintKey(NWK_KEY);
 800ae82:	2001      	movs	r0, #1
 800ae84:	f7ff fe0e 	bl	800aaa4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ae88:	4b10      	ldr	r3, [pc, #64]	; (800aecc <SecureElementInit+0x128>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	2002      	movs	r0, #2
 800ae90:	f00e fdc4 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ae94:	2003      	movs	r0, #3
 800ae96:	f7ff fe05 	bl	800aaa4 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ae9a:	2002      	movs	r0, #2
 800ae9c:	f7ff fe02 	bl	800aaa4 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	37c8      	adds	r7, #200	; 0xc8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bdb0      	pop	{r4, r5, r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0801a50c 	.word	0x0801a50c
 800aeb0:	0801a514 	.word	0x0801a514
 800aeb4:	0801a51c 	.word	0x0801a51c
 800aeb8:	0801a52c 	.word	0x0801a52c
 800aebc:	0801a53c 	.word	0x0801a53c
 800aec0:	0801a54c 	.word	0x0801a54c
 800aec4:	200002c8 	.word	0x200002c8
 800aec8:	0801a4dc 	.word	0x0801a4dc
 800aecc:	0801a4f4 	.word	0x0801a4f4

0800aed0 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
 800aee0:	e01a      	b.n	800af18 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800aee2:	4b12      	ldr	r3, [pc, #72]	; (800af2c <SecureElementGetKeyByID+0x5c>)
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	7bfa      	ldrb	r2, [r7, #15]
 800aee8:	4613      	mov	r3, r2
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	4413      	add	r3, r2
 800aeee:	440b      	add	r3, r1
 800aef0:	3310      	adds	r3, #16
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	79fa      	ldrb	r2, [r7, #7]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d10b      	bne.n	800af12 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800aefa:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <SecureElementGetKeyByID+0x5c>)
 800aefc:	6819      	ldr	r1, [r3, #0]
 800aefe:	7bfa      	ldrb	r2, [r7, #15]
 800af00:	4613      	mov	r3, r2
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	4413      	add	r3, r2
 800af06:	3310      	adds	r3, #16
 800af08:	18ca      	adds	r2, r1, r3
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800af0e:	2300      	movs	r3, #0
 800af10:	e006      	b.n	800af20 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	3301      	adds	r3, #1
 800af16:	73fb      	strb	r3, [r7, #15]
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d9e1      	bls.n	800aee2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800af1e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	bc80      	pop	{r7}
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	200002c8 	.word	0x200002c8

0800af30 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800af42:	2302      	movs	r3, #2
 800af44:	e04c      	b.n	800afe0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800af46:	2300      	movs	r3, #0
 800af48:	77fb      	strb	r3, [r7, #31]
 800af4a:	e045      	b.n	800afd8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800af4c:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <SecureElementSetKey+0xb8>)
 800af4e:	6819      	ldr	r1, [r3, #0]
 800af50:	7ffa      	ldrb	r2, [r7, #31]
 800af52:	4613      	mov	r3, r2
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	4413      	add	r3, r2
 800af58:	440b      	add	r3, r1
 800af5a:	3310      	adds	r3, #16
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	79fa      	ldrb	r2, [r7, #7]
 800af60:	429a      	cmp	r2, r3
 800af62:	d136      	bne.n	800afd2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	2b80      	cmp	r3, #128	; 0x80
 800af68:	d123      	bne.n	800afb2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800af6a:	2306      	movs	r3, #6
 800af6c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	f107 0310 	add.w	r3, r7, #16
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	605a      	str	r2, [r3, #4]
 800af7c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800af7e:	f107 030c 	add.w	r3, r7, #12
 800af82:	227f      	movs	r2, #127	; 0x7f
 800af84:	2110      	movs	r1, #16
 800af86:	6838      	ldr	r0, [r7, #0]
 800af88:	f000 f87d 	bl	800b086 <SecureElementAesEncrypt>
 800af8c:	4603      	mov	r3, r0
 800af8e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800af90:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <SecureElementSetKey+0xb8>)
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	7ffa      	ldrb	r2, [r7, #31]
 800af96:	4613      	mov	r3, r2
 800af98:	011b      	lsls	r3, r3, #4
 800af9a:	4413      	add	r3, r2
 800af9c:	3310      	adds	r3, #16
 800af9e:	440b      	add	r3, r1
 800afa0:	3301      	adds	r3, #1
 800afa2:	f107 010c 	add.w	r1, r7, #12
 800afa6:	2210      	movs	r2, #16
 800afa8:	4618      	mov	r0, r3
 800afaa:	f00a faf6 	bl	801559a <memcpy1>
                return retval;
 800afae:	7fbb      	ldrb	r3, [r7, #30]
 800afb0:	e016      	b.n	800afe0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800afb2:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <SecureElementSetKey+0xb8>)
 800afb4:	6819      	ldr	r1, [r3, #0]
 800afb6:	7ffa      	ldrb	r2, [r7, #31]
 800afb8:	4613      	mov	r3, r2
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	4413      	add	r3, r2
 800afbe:	3310      	adds	r3, #16
 800afc0:	440b      	add	r3, r1
 800afc2:	3301      	adds	r3, #1
 800afc4:	2210      	movs	r2, #16
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	4618      	mov	r0, r3
 800afca:	f00a fae6 	bl	801559a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800afce:	2300      	movs	r3, #0
 800afd0:	e006      	b.n	800afe0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800afd2:	7ffb      	ldrb	r3, [r7, #31]
 800afd4:	3301      	adds	r3, #1
 800afd6:	77fb      	strb	r3, [r7, #31]
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
 800afda:	2b09      	cmp	r3, #9
 800afdc:	d9b6      	bls.n	800af4c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800afde:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3720      	adds	r7, #32
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	200002c8 	.word	0x200002c8

0800afec <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4611      	mov	r1, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	460b      	mov	r3, r1
 800affc:	80fb      	strh	r3, [r7, #6]
 800affe:	4613      	mov	r3, r2
 800b000:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800b002:	797b      	ldrb	r3, [r7, #5]
 800b004:	2b7e      	cmp	r3, #126	; 0x7e
 800b006:	d901      	bls.n	800b00c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b008:	2303      	movs	r3, #3
 800b00a:	e009      	b.n	800b020 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b00c:	7979      	ldrb	r1, [r7, #5]
 800b00e:	88fa      	ldrh	r2, [r7, #6]
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	460b      	mov	r3, r1
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7ff fe55 	bl	800acc8 <ComputeCmac>
 800b01e:	4603      	mov	r3, r0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	607a      	str	r2, [r7, #4]
 800b032:	461a      	mov	r2, r3
 800b034:	460b      	mov	r3, r1
 800b036:	817b      	strh	r3, [r7, #10]
 800b038:	4613      	mov	r3, r2
 800b03a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b042:	2302      	movs	r3, #2
 800b044:	e01b      	b.n	800b07e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b046:	2306      	movs	r3, #6
 800b048:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b04e:	7a79      	ldrb	r1, [r7, #9]
 800b050:	897a      	ldrh	r2, [r7, #10]
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	460b      	mov	r3, r1
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	2000      	movs	r0, #0
 800b05e:	f7ff fe33 	bl	800acc8 <ComputeCmac>
 800b062:	4603      	mov	r3, r0
 800b064:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b066:	7dfb      	ldrb	r3, [r7, #23]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	e006      	b.n	800b07e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d001      	beq.n	800b07c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b078:	2301      	movs	r3, #1
 800b07a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b0c2      	sub	sp, #264	; 0x108
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	4608      	mov	r0, r1
 800b090:	4611      	mov	r1, r2
 800b092:	1d3a      	adds	r2, r7, #4
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	4603      	mov	r3, r0
 800b098:	817b      	strh	r3, [r7, #10]
 800b09a:	460b      	mov	r3, r1
 800b09c:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <SecureElementAesEncrypt+0x26>
 800b0a4:	1d3b      	adds	r3, r7, #4
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e043      	b.n	800b138 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800b0b0:	897b      	ldrh	r3, [r7, #10]
 800b0b2:	f003 030f 	and.w	r3, r3, #15
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b0bc:	2305      	movs	r3, #5
 800b0be:	e03b      	b.n	800b138 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b0c0:	f107 0314 	add.w	r3, r7, #20
 800b0c4:	22f0      	movs	r2, #240	; 0xf0
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f00a faa1 	bl	8015610 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b0ce:	f107 0210 	add.w	r2, r7, #16
 800b0d2:	7a7b      	ldrb	r3, [r7, #9]
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fdc6 	bl	800ac68 <GetKeyByID>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b0e2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d124      	bne.n	800b134 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	f107 0214 	add.w	r2, r7, #20
 800b0f2:	2110      	movs	r1, #16
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fbad 	bl	800a854 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800b100:	e015      	b.n	800b12e <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800b102:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	18d0      	adds	r0, r2, r3
 800b10a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b10e:	1d3a      	adds	r2, r7, #4
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	4413      	add	r3, r2
 800b114:	f107 0214 	add.w	r2, r7, #20
 800b118:	4619      	mov	r1, r3
 800b11a:	f7ff fc79 	bl	800aa10 <lorawan_aes_encrypt>
            block = block + 16;
 800b11e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800b122:	3310      	adds	r3, #16
 800b124:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800b128:	897b      	ldrh	r3, [r7, #10]
 800b12a:	3b10      	subs	r3, #16
 800b12c:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800b12e:	897b      	ldrh	r3, [r7, #10]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e6      	bne.n	800b102 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b134:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800b138:	4618      	mov	r0, r3
 800b13a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b088      	sub	sp, #32
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
 800b14e:	4613      	mov	r3, r2
 800b150:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b158:	2302      	movs	r3, #2
 800b15a:	e02e      	b.n	800b1ba <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b15c:	2306      	movs	r3, #6
 800b15e:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800b160:	78bb      	ldrb	r3, [r7, #2]
 800b162:	2b7f      	cmp	r3, #127	; 0x7f
 800b164:	d104      	bne.n	800b170 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b166:	78fb      	ldrb	r3, [r7, #3]
 800b168:	2b04      	cmp	r3, #4
 800b16a:	d001      	beq.n	800b170 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b16c:	2303      	movs	r3, #3
 800b16e:	e024      	b.n	800b1ba <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	f107 0310 	add.w	r3, r7, #16
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	605a      	str	r2, [r3, #4]
 800b17e:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	2110      	movs	r1, #16
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff ff7c 	bl	800b086 <SecureElementAesEncrypt>
 800b18e:	4603      	mov	r3, r0
 800b190:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b192:	7ffb      	ldrb	r3, [r7, #31]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800b198:	7ffb      	ldrb	r3, [r7, #31]
 800b19a:	e00e      	b.n	800b1ba <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800b19c:	f107 020c 	add.w	r2, r7, #12
 800b1a0:	78bb      	ldrb	r3, [r7, #2]
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7ff fec3 	bl	800af30 <SecureElementSetKey>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b1ae:	7ffb      	ldrb	r3, [r7, #31]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800b1b4:	7ffb      	ldrb	r3, [r7, #31]
 800b1b6:	e000      	b.n	800b1ba <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b1b8:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607b      	str	r3, [r7, #4]
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	73fb      	strb	r3, [r7, #15]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <SecureElementProcessJoinAccept+0x24>
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <SecureElementProcessJoinAccept+0x24>
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e064      	b.n	800b2b4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b1ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1ee:	2b21      	cmp	r3, #33	; 0x21
 800b1f0:	d901      	bls.n	800b1f6 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b1f2:	2305      	movs	r3, #5
 800b1f4:	e05e      	b.n	800b2b4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b1fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	461a      	mov	r2, r3
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b206:	f00a f9c8 	bl	801559a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	1c58      	adds	r0, r3, #1
 800b20e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b212:	b29b      	uxth	r3, r3
 800b214:	3b01      	subs	r3, #1
 800b216:	b299      	uxth	r1, r3
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	3301      	adds	r3, #1
 800b21c:	7dfa      	ldrb	r2, [r7, #23]
 800b21e:	f7ff ff32 	bl	800b086 <SecureElementAesEncrypt>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b228:	2307      	movs	r3, #7
 800b22a:	e043      	b.n	800b2b4 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	330b      	adds	r3, #11
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	09db      	lsrs	r3, r3, #7
 800b234:	b2da      	uxtb	r2, r3
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b238:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800b23e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b242:	3b04      	subs	r3, #4
 800b244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b246:	4413      	add	r3, r2
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800b24c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b250:	3b03      	subs	r3, #3
 800b252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b254:	4413      	add	r3, r2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	021b      	lsls	r3, r3, #8
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800b260:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b264:	3b02      	subs	r3, #2
 800b266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b268:	4413      	add	r3, r2
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	041b      	lsls	r3, r3, #16
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800b274:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b278:	3b01      	subs	r3, #1
 800b27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b27c:	4413      	add	r3, r2
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	061b      	lsls	r3, r3, #24
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10e      	bne.n	800b2ae <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b290:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b294:	b29b      	uxth	r3, r3
 800b296:	3b04      	subs	r3, #4
 800b298:	b299      	uxth	r1, r3
 800b29a:	2301      	movs	r3, #1
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2a0:	f7ff fec2 	bl	800b028 <SecureElementVerifyAesCmac>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e002      	b.n	800b2b4 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b2ae:	2304      	movs	r3, #4
 800b2b0:	e000      	b.n	800b2b4 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e006      	b.n	800b2dc <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b2ce:	4b05      	ldr	r3, [pc, #20]	; (800b2e4 <SecureElementRandomNumber+0x28>)
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	4798      	blx	r3
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	0801acfc 	.word	0x0801acfc

0800b2e8 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e007      	b.n	800b30a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800b2fa:	4b06      	ldr	r3, [pc, #24]	; (800b314 <SecureElementSetDevEui+0x2c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2208      	movs	r2, #8
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	f00a f949 	bl	801559a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	200002c8 	.word	0x200002c8

0800b318 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <SecureElementGetDevEui+0x10>)
 800b31e:	681b      	ldr	r3, [r3, #0]
}
 800b320:	4618      	mov	r0, r3
 800b322:	46bd      	mov	sp, r7
 800b324:	bc80      	pop	{r7}
 800b326:	4770      	bx	lr
 800b328:	200002c8 	.word	0x200002c8

0800b32c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b33a:	2302      	movs	r3, #2
 800b33c:	e008      	b.n	800b350 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800b33e:	4b06      	ldr	r3, [pc, #24]	; (800b358 <SecureElementSetJoinEui+0x2c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	2208      	movs	r2, #8
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	4618      	mov	r0, r3
 800b34a:	f00a f926 	bl	801559a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	200002c8 	.word	0x200002c8

0800b35c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800b360:	4b03      	ldr	r3, [pc, #12]	; (800b370 <SecureElementGetJoinEui+0x14>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3308      	adds	r3, #8
}
 800b366:	4618      	mov	r0, r3
 800b368:	46bd      	mov	sp, r7
 800b36a:	bc80      	pop	{r7}
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	200002c8 	.word	0x200002c8

0800b374 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800b37c:	4a1a      	ldr	r2, [pc, #104]	; (800b3e8 <LmHandlerInit+0x74>)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b382:	4b1a      	ldr	r3, [pc, #104]	; (800b3ec <LmHandlerInit+0x78>)
 800b384:	4a1a      	ldr	r2, [pc, #104]	; (800b3f0 <LmHandlerInit+0x7c>)
 800b386:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b388:	4b18      	ldr	r3, [pc, #96]	; (800b3ec <LmHandlerInit+0x78>)
 800b38a:	4a1a      	ldr	r2, [pc, #104]	; (800b3f4 <LmHandlerInit+0x80>)
 800b38c:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b38e:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <LmHandlerInit+0x78>)
 800b390:	4a19      	ldr	r2, [pc, #100]	; (800b3f8 <LmHandlerInit+0x84>)
 800b392:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b394:	4b15      	ldr	r3, [pc, #84]	; (800b3ec <LmHandlerInit+0x78>)
 800b396:	4a19      	ldr	r2, [pc, #100]	; (800b3fc <LmHandlerInit+0x88>)
 800b398:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <LmHandlerInit+0x74>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a17      	ldr	r2, [pc, #92]	; (800b400 <LmHandlerInit+0x8c>)
 800b3a2:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b3a4:	4b10      	ldr	r3, [pc, #64]	; (800b3e8 <LmHandlerInit+0x74>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	4a15      	ldr	r2, [pc, #84]	; (800b400 <LmHandlerInit+0x8c>)
 800b3ac:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b3ae:	4b0e      	ldr	r3, [pc, #56]	; (800b3e8 <LmHandlerInit+0x74>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	4a12      	ldr	r2, [pc, #72]	; (800b400 <LmHandlerInit+0x8c>)
 800b3b6:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b3b8:	4b11      	ldr	r3, [pc, #68]	; (800b400 <LmHandlerInit+0x8c>)
 800b3ba:	4a12      	ldr	r2, [pc, #72]	; (800b404 <LmHandlerInit+0x90>)
 800b3bc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b3be:	4b0a      	ldr	r3, [pc, #40]	; (800b3e8 <LmHandlerInit+0x74>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	4a0e      	ldr	r2, [pc, #56]	; (800b400 <LmHandlerInit+0x8c>)
 800b3c6:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800b3c8:	490f      	ldr	r1, [pc, #60]	; (800b408 <LmHandlerInit+0x94>)
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	f000 fcfe 	bl	800bdcc <LmHandlerPackageRegister>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800b3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3da:	e000      	b.n	800b3de <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	200002f0 	.word	0x200002f0
 800b3ec:	200002f4 	.word	0x200002f4
 800b3f0:	0800bb21 	.word	0x0800bb21
 800b3f4:	0800bb89 	.word	0x0800bb89
 800b3f8:	0800bc69 	.word	0x0800bc69
 800b3fc:	0800bd2d 	.word	0x0800bd2d
 800b400:	20000304 	.word	0x20000304
 800b404:	0800c03d 	.word	0x0800c03d
 800b408:	200000b8 	.word	0x200000b8

0800b40c <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b40e:	b099      	sub	sp, #100	; 0x64
 800b410:	af08      	add	r7, sp, #32
 800b412:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800b418:	2210      	movs	r2, #16
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	4882      	ldr	r0, [pc, #520]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b41e:	f00d fac5 	bl	80189ac <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800b422:	f7fe fb5f 	bl	8009ae4 <LoraInfo_GetPtr>
 800b426:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800b428:	4b7f      	ldr	r3, [pc, #508]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	2301      	movs	r3, #1
 800b430:	4093      	lsls	r3, r2
 800b432:	461a      	mov	r2, r3
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	4013      	ands	r3, r2
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800b43e:	4b7a      	ldr	r3, [pc, #488]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	4979      	ldr	r1, [pc, #484]	; (800b62c <LmHandlerConfigure+0x220>)
 800b446:	487a      	ldr	r0, [pc, #488]	; (800b630 <LmHandlerConfigure+0x224>)
 800b448:	f004 fb1a 	bl	800fa80 <LoRaMacInitialization>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d009      	beq.n	800b466 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800b452:	f04f 33ff 	mov.w	r3, #4294967295
 800b456:	e0e2      	b.n	800b61e <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800b458:	4b76      	ldr	r3, [pc, #472]	; (800b634 <LmHandlerConfigure+0x228>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	2100      	movs	r1, #0
 800b45e:	2000      	movs	r0, #0
 800b460:	f00e fadc 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800b464:	e7fe      	b.n	800b464 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800b466:	f000 fdfa 	bl	800c05e <NvmDataMgmtRestore>
 800b46a:	4603      	mov	r3, r0
 800b46c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800b46e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800b474:	4b70      	ldr	r3, [pc, #448]	; (800b638 <LmHandlerConfigure+0x22c>)
 800b476:	2201      	movs	r2, #1
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	e002      	b.n	800b482 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800b47c:	4b6e      	ldr	r3, [pc, #440]	; (800b638 <LmHandlerConfigure+0x22c>)
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800b482:	2302      	movs	r3, #2
 800b484:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b486:	f107 0314 	add.w	r3, r7, #20
 800b48a:	4618      	mov	r0, r3
 800b48c:	f004 fe42 	bl	8010114 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2208      	movs	r2, #8
 800b494:	4619      	mov	r1, r3
 800b496:	4869      	ldr	r0, [pc, #420]	; (800b63c <LmHandlerConfigure+0x230>)
 800b498:	f00a f87f 	bl	801559a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800b49c:	2303      	movs	r3, #3
 800b49e:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b4a0:	f107 0314 	add.w	r3, r7, #20
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f004 fe35 	bl	8010114 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4863      	ldr	r0, [pc, #396]	; (800b640 <LmHandlerConfigure+0x234>)
 800b4b2:	f00a f872 	bl	801559a <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800b4b6:	4b63      	ldr	r3, [pc, #396]	; (800b644 <LmHandlerConfigure+0x238>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	4798      	blx	r3
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4a5e      	ldr	r2, [pc, #376]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4c2:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800b4c4:	2306      	movs	r3, #6
 800b4c6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800b4c8:	4b5c      	ldr	r3, [pc, #368]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b4ce:	f107 0314 	add.w	r3, r7, #20
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f004 ff7c 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b4d8:	4b58      	ldr	r3, [pc, #352]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b57      	ldr	r3, [pc, #348]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4e0:	785b      	ldrb	r3, [r3, #1]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4b55      	ldr	r3, [pc, #340]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4e6:	789b      	ldrb	r3, [r3, #2]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4b54      	ldr	r3, [pc, #336]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4ec:	78db      	ldrb	r3, [r3, #3]
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	4b52      	ldr	r3, [pc, #328]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4f2:	791b      	ldrb	r3, [r3, #4]
 800b4f4:	461d      	mov	r5, r3
 800b4f6:	4b51      	ldr	r3, [pc, #324]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4f8:	795b      	ldrb	r3, [r3, #5]
 800b4fa:	461e      	mov	r6, r3
 800b4fc:	4b4f      	ldr	r3, [pc, #316]	; (800b63c <LmHandlerConfigure+0x230>)
 800b4fe:	799b      	ldrb	r3, [r3, #6]
 800b500:	603b      	str	r3, [r7, #0]
 800b502:	4b4e      	ldr	r3, [pc, #312]	; (800b63c <LmHandlerConfigure+0x230>)
 800b504:	79db      	ldrb	r3, [r3, #7]
 800b506:	9307      	str	r3, [sp, #28]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	9306      	str	r3, [sp, #24]
 800b50c:	9605      	str	r6, [sp, #20]
 800b50e:	9504      	str	r5, [sp, #16]
 800b510:	9403      	str	r4, [sp, #12]
 800b512:	9002      	str	r0, [sp, #8]
 800b514:	9101      	str	r1, [sp, #4]
 800b516:	9200      	str	r2, [sp, #0]
 800b518:	4b4b      	ldr	r3, [pc, #300]	; (800b648 <LmHandlerConfigure+0x23c>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	2100      	movs	r1, #0
 800b51e:	2002      	movs	r0, #2
 800b520:	f00e fa7c 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b524:	4b45      	ldr	r3, [pc, #276]	; (800b63c <LmHandlerConfigure+0x230>)
 800b526:	7a1b      	ldrb	r3, [r3, #8]
 800b528:	461a      	mov	r2, r3
 800b52a:	4b44      	ldr	r3, [pc, #272]	; (800b63c <LmHandlerConfigure+0x230>)
 800b52c:	7a5b      	ldrb	r3, [r3, #9]
 800b52e:	4619      	mov	r1, r3
 800b530:	4b42      	ldr	r3, [pc, #264]	; (800b63c <LmHandlerConfigure+0x230>)
 800b532:	7a9b      	ldrb	r3, [r3, #10]
 800b534:	4618      	mov	r0, r3
 800b536:	4b41      	ldr	r3, [pc, #260]	; (800b63c <LmHandlerConfigure+0x230>)
 800b538:	7adb      	ldrb	r3, [r3, #11]
 800b53a:	461c      	mov	r4, r3
 800b53c:	4b3f      	ldr	r3, [pc, #252]	; (800b63c <LmHandlerConfigure+0x230>)
 800b53e:	7b1b      	ldrb	r3, [r3, #12]
 800b540:	461d      	mov	r5, r3
 800b542:	4b3e      	ldr	r3, [pc, #248]	; (800b63c <LmHandlerConfigure+0x230>)
 800b544:	7b5b      	ldrb	r3, [r3, #13]
 800b546:	461e      	mov	r6, r3
 800b548:	4b3c      	ldr	r3, [pc, #240]	; (800b63c <LmHandlerConfigure+0x230>)
 800b54a:	7b9b      	ldrb	r3, [r3, #14]
 800b54c:	603b      	str	r3, [r7, #0]
 800b54e:	4b3b      	ldr	r3, [pc, #236]	; (800b63c <LmHandlerConfigure+0x230>)
 800b550:	7bdb      	ldrb	r3, [r3, #15]
 800b552:	9307      	str	r3, [sp, #28]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	9306      	str	r3, [sp, #24]
 800b558:	9605      	str	r6, [sp, #20]
 800b55a:	9504      	str	r5, [sp, #16]
 800b55c:	9403      	str	r4, [sp, #12]
 800b55e:	9002      	str	r0, [sp, #8]
 800b560:	9101      	str	r1, [sp, #4]
 800b562:	9200      	str	r2, [sp, #0]
 800b564:	4b39      	ldr	r3, [pc, #228]	; (800b64c <LmHandlerConfigure+0x240>)
 800b566:	2200      	movs	r2, #0
 800b568:	2100      	movs	r1, #0
 800b56a:	2002      	movs	r0, #2
 800b56c:	f00e fa56 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800b570:	4b37      	ldr	r3, [pc, #220]	; (800b650 <LmHandlerConfigure+0x244>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	461a      	mov	r2, r3
 800b576:	4b37      	ldr	r3, [pc, #220]	; (800b654 <LmHandlerConfigure+0x248>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	4619      	mov	r1, r3
 800b57c:	4b36      	ldr	r3, [pc, #216]	; (800b658 <LmHandlerConfigure+0x24c>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	4b36      	ldr	r3, [pc, #216]	; (800b65c <LmHandlerConfigure+0x250>)
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	9002      	str	r0, [sp, #8]
 800b58a:	9101      	str	r1, [sp, #4]
 800b58c:	9200      	str	r2, [sp, #0]
 800b58e:	4b34      	ldr	r3, [pc, #208]	; (800b660 <LmHandlerConfigure+0x254>)
 800b590:	2200      	movs	r2, #0
 800b592:	2100      	movs	r1, #0
 800b594:	2002      	movs	r0, #2
 800b596:	f00e fa41 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b59a:	230f      	movs	r3, #15
 800b59c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b5a2:	f107 0314 	add.w	r3, r7, #20
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f004 ff12 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800b5ac:	2305      	movs	r3, #5
 800b5ae:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b5b4:	f107 0314 	add.w	r3, r7, #20
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f004 ff09 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b5be:	2310      	movs	r3, #16
 800b5c0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b5c6:	f107 0314 	add.w	r3, r7, #20
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f004 ff00 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b5d4:	4b14      	ldr	r3, [pc, #80]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b5d6:	789b      	ldrb	r3, [r3, #2]
 800b5d8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b5da:	f107 0314 	add.w	r3, r7, #20
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f004 fef6 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b5e4:	230f      	movs	r3, #15
 800b5e6:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	f107 020c 	add.w	r2, r7, #12
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f007 fcc6 	bl	8012f84 <RegionGetPhyParam>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bf14      	ite	ne
 800b602:	2301      	movne	r3, #1
 800b604:	2300      	moveq	r3, #0
 800b606:	b2da      	uxtb	r2, r3
 800b608:	4b07      	ldr	r3, [pc, #28]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b60a:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800b60c:	2014      	movs	r0, #20
 800b60e:	f000 fa6f 	bl	800baf0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b612:	4b05      	ldr	r3, [pc, #20]	; (800b628 <LmHandlerConfigure+0x21c>)
 800b614:	795b      	ldrb	r3, [r3, #5]
 800b616:	4618      	mov	r0, r3
 800b618:	f005 fc4e 	bl	8010eb8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3744      	adds	r7, #68	; 0x44
 800b622:	46bd      	mov	sp, r7
 800b624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b626:	bf00      	nop
 800b628:	200002e0 	.word	0x200002e0
 800b62c:	20000304 	.word	0x20000304
 800b630:	200002f4 	.word	0x200002f4
 800b634:	0801a55c 	.word	0x0801a55c
 800b638:	20000422 	.word	0x20000422
 800b63c:	200000a0 	.word	0x200000a0
 800b640:	200000a8 	.word	0x200000a8
 800b644:	200002f0 	.word	0x200002f0
 800b648:	0801a5a8 	.word	0x0801a5a8
 800b64c:	0801a5e4 	.word	0x0801a5e4
 800b650:	200000b7 	.word	0x200000b7
 800b654:	200000b6 	.word	0x200000b6
 800b658:	200000b5 	.word	0x200000b5
 800b65c:	200000b4 	.word	0x200000b4
 800b660:	0801a620 	.word	0x0801a620

0800b664 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800b668:	f002 f9b8 	bl	800d9dc <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800b66c:	f000 fc9a 	bl	800bfa4 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800b670:	f000 fcee 	bl	800c050 <NvmDataMgmtStore>
}
 800b674:	bf00      	nop
 800b676:	bd80      	pop	{r7, pc}

0800b678 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b090      	sub	sp, #64	; 0x40
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d111      	bne.n	800b6ac <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b688:	4b23      	ldr	r3, [pc, #140]	; (800b718 <LmHandlerJoin+0xa0>)
 800b68a:	2202      	movs	r2, #2
 800b68c:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800b68e:	f004 fcab 	bl	800ffe8 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800b692:	2301      	movs	r3, #1
 800b694:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b696:	4b21      	ldr	r3, [pc, #132]	; (800b71c <LmHandlerJoin+0xa4>)
 800b698:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800b6a0:	f107 0308 	add.w	r3, r7, #8
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f005 f9d1 	bl	8010a4c <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800b6aa:	e030      	b.n	800b70e <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b6ac:	4b1a      	ldr	r3, [pc, #104]	; (800b718 <LmHandlerJoin+0xa0>)
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b6b2:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <LmHandlerJoin+0xa4>)
 800b6b4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800b6b8:	4b17      	ldr	r3, [pc, #92]	; (800b718 <LmHandlerJoin+0xa0>)
 800b6ba:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b6bc:	4b16      	ldr	r3, [pc, #88]	; (800b718 <LmHandlerJoin+0xa0>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800b6c2:	4b17      	ldr	r3, [pc, #92]	; (800b720 <LmHandlerJoin+0xa8>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	f083 0301 	eor.w	r3, r3, #1
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d008      	beq.n	800b6e2 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b6d0:	2327      	movs	r3, #39	; 0x27
 800b6d2:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b6d4:	4b13      	ldr	r3, [pc, #76]	; (800b724 <LmHandlerJoin+0xac>)
 800b6d6:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800b6d8:	f107 031c 	add.w	r3, r7, #28
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f004 fe77 	bl	80103d0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800b6e2:	f004 fc81 	bl	800ffe8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b6f0:	f107 031c 	add.w	r3, r7, #28
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f004 fe6b 	bl	80103d0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b6fa:	4b0b      	ldr	r3, [pc, #44]	; (800b728 <LmHandlerJoin+0xb0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	69db      	ldr	r3, [r3, #28]
 800b700:	4805      	ldr	r0, [pc, #20]	; (800b718 <LmHandlerJoin+0xa0>)
 800b702:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800b704:	4b05      	ldr	r3, [pc, #20]	; (800b71c <LmHandlerJoin+0xa4>)
 800b706:	785b      	ldrb	r3, [r3, #1]
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 f917 	bl	800b93c <LmHandlerRequestClass>
}
 800b70e:	bf00      	nop
 800b710:	3740      	adds	r7, #64	; 0x40
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	200000c4 	.word	0x200000c4
 800b71c:	200002e0 	.word	0x200002e0
 800b720:	20000422 	.word	0x20000422
 800b724:	01000300 	.word	0x01000300
 800b728:	200002f0 	.word	0x200002f0

0800b72c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08a      	sub	sp, #40	; 0x28
 800b730:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b732:	2301      	movs	r3, #1
 800b734:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b736:	463b      	mov	r3, r7
 800b738:	4618      	mov	r0, r3
 800b73a:	f004 fceb 	bl	8010114 <LoRaMacMibGetRequestConfirm>
 800b73e:	4603      	mov	r3, r0
 800b740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800b744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b74c:	793b      	ldrb	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d101      	bne.n	800b756 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800b752:	2300      	movs	r3, #0
 800b754:	e002      	b.n	800b75c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800b756:	2301      	movs	r3, #1
 800b758:	e000      	b.n	800b75c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800b75a:	2300      	movs	r3, #0
    }
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3728      	adds	r7, #40	; 0x28
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b08c      	sub	sp, #48	; 0x30
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	607a      	str	r2, [r7, #4]
 800b76e:	461a      	mov	r2, r3
 800b770:	460b      	mov	r3, r1
 800b772:	72fb      	strb	r3, [r7, #11]
 800b774:	4613      	mov	r3, r2
 800b776:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b778:	23ff      	movs	r3, #255	; 0xff
 800b77a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800b77e:	f001 fe97 	bl	800d4b0 <LoRaMacIsBusy>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b788:	f06f 0301 	mvn.w	r3, #1
 800b78c:	e0b4      	b.n	800b8f8 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b78e:	f7ff ffcd 	bl	800b72c <LmHandlerJoinStatus>
 800b792:	4603      	mov	r3, r0
 800b794:	2b01      	cmp	r3, #1
 800b796:	d007      	beq.n	800b7a8 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800b798:	4b59      	ldr	r3, [pc, #356]	; (800b900 <LmHandlerSend+0x19c>)
 800b79a:	789b      	ldrb	r3, [r3, #2]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7ff ff6b 	bl	800b678 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b7a2:	f06f 0302 	mvn.w	r3, #2
 800b7a6:	e0a7      	b.n	800b8f8 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800b7a8:	4b56      	ldr	r3, [pc, #344]	; (800b904 <LmHandlerSend+0x1a0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	4798      	blx	r3
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00d      	beq.n	800b7d2 <LmHandlerSend+0x6e>
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	4b52      	ldr	r3, [pc, #328]	; (800b904 <LmHandlerSend+0x1a0>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d006      	beq.n	800b7d2 <LmHandlerSend+0x6e>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800b7cc:	f06f 0303 	mvn.w	r3, #3
 800b7d0:	e092      	b.n	800b8f8 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b7d2:	4b4d      	ldr	r3, [pc, #308]	; (800b908 <LmHandlerSend+0x1a4>)
 800b7d4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800b7d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	785b      	ldrb	r3, [r3, #1]
 800b7e0:	f107 0214 	add.w	r2, r7, #20
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f004 fc0c 	bl	8010004 <LoRaMacQueryTxPossible>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d009      	beq.n	800b806 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800b7f2:	4b46      	ldr	r3, [pc, #280]	; (800b90c <LmHandlerSend+0x1a8>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b804:	e017      	b.n	800b836 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800b806:	4a41      	ldr	r2, [pc, #260]	; (800b90c <LmHandlerSend+0x1a8>)
 800b808:	7afb      	ldrb	r3, [r7, #11]
 800b80a:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	785b      	ldrb	r3, [r3, #1]
 800b816:	b29b      	uxth	r3, r3
 800b818:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800b820:	7afb      	ldrb	r3, [r7, #11]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800b826:	2300      	movs	r3, #0
 800b828:	763b      	strb	r3, [r7, #24]
 800b82a:	e004      	b.n	800b836 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800b82c:	2301      	movs	r3, #1
 800b82e:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800b830:	2308      	movs	r3, #8
 800b832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800b836:	4b35      	ldr	r3, [pc, #212]	; (800b90c <LmHandlerSend+0x1a8>)
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	330c      	adds	r3, #12
 800b83c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b840:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800b844:	4b30      	ldr	r3, [pc, #192]	; (800b908 <LmHandlerSend+0x1a4>)
 800b846:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800b84a:	4b30      	ldr	r3, [pc, #192]	; (800b90c <LmHandlerSend+0x1a8>)
 800b84c:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800b84e:	7aba      	ldrb	r2, [r7, #10]
 800b850:	f107 0318 	add.w	r3, r7, #24
 800b854:	4611      	mov	r1, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f005 fa38 	bl	8010ccc <LoRaMacMcpsRequest>
 800b85c:	4603      	mov	r3, r0
 800b85e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800b868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800b86e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b872:	2b11      	cmp	r3, #17
 800b874:	d83a      	bhi.n	800b8ec <LmHandlerSend+0x188>
 800b876:	a201      	add	r2, pc, #4	; (adr r2, 800b87c <LmHandlerSend+0x118>)
 800b878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87c:	0800b8c5 	.word	0x0800b8c5
 800b880:	0800b8cd 	.word	0x0800b8cd
 800b884:	0800b8ed 	.word	0x0800b8ed
 800b888:	0800b8ed 	.word	0x0800b8ed
 800b88c:	0800b8ed 	.word	0x0800b8ed
 800b890:	0800b8ed 	.word	0x0800b8ed
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b8d5 	.word	0x0800b8d5
 800b89c:	0800b8ed 	.word	0x0800b8ed
 800b8a0:	0800b8ed 	.word	0x0800b8ed
 800b8a4:	0800b8ed 	.word	0x0800b8ed
 800b8a8:	0800b8e5 	.word	0x0800b8e5
 800b8ac:	0800b8ed 	.word	0x0800b8ed
 800b8b0:	0800b8ed 	.word	0x0800b8ed
 800b8b4:	0800b8cd 	.word	0x0800b8cd
 800b8b8:	0800b8cd 	.word	0x0800b8cd
 800b8bc:	0800b8cd 	.word	0x0800b8cd
 800b8c0:	0800b8dd 	.word	0x0800b8dd
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8ca:	e013      	b.n	800b8f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800b8cc:	23fe      	movs	r3, #254	; 0xfe
 800b8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8d2:	e00f      	b.n	800b8f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b8d4:	23fd      	movs	r3, #253	; 0xfd
 800b8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8da:	e00b      	b.n	800b8f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800b8dc:	23fb      	movs	r3, #251	; 0xfb
 800b8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8e2:	e007      	b.n	800b8f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800b8e4:	23fa      	movs	r3, #250	; 0xfa
 800b8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8ea:	e003      	b.n	800b8f4 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b8ec:	23ff      	movs	r3, #255	; 0xff
 800b8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b8f2:	bf00      	nop
    }

    return lmhStatus;
 800b8f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3730      	adds	r7, #48	; 0x30
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	200000c4 	.word	0x200000c4
 800b904:	200002cc 	.word	0x200002cc
 800b908:	200002e0 	.word	0x200002e0
 800b90c:	20000318 	.word	0x20000318

0800b910 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800b916:	230a      	movs	r3, #10
 800b918:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800b91a:	463b      	mov	r3, r7
 800b91c:	4618      	mov	r0, r3
 800b91e:	f005 f895 	bl	8010a4c <LoRaMacMlmeRequest>
 800b922:	4603      	mov	r3, r0
 800b924:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800b92c:	2300      	movs	r3, #0
 800b92e:	e001      	b.n	800b934 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800b930:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800b934:	4618      	mov	r0, r3
 800b936:	3718      	adds	r7, #24
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08c      	sub	sp, #48	; 0x30
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b946:	2300      	movs	r3, #0
 800b948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800b94c:	f001 fdb0 	bl	800d4b0 <LoRaMacIsBusy>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b956:	f06f 0301 	mvn.w	r3, #1
 800b95a:	e07b      	b.n	800ba54 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800b95c:	f7ff fee6 	bl	800b72c <LmHandlerJoinStatus>
 800b960:	4603      	mov	r3, r0
 800b962:	2b01      	cmp	r3, #1
 800b964:	d002      	beq.n	800b96c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b966:	f06f 0302 	mvn.w	r3, #2
 800b96a:	e073      	b.n	800ba54 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800b96c:	2300      	movs	r3, #0
 800b96e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b970:	f107 0308 	add.w	r3, r7, #8
 800b974:	4618      	mov	r0, r3
 800b976:	f004 fbcd 	bl	8010114 <LoRaMacMibGetRequestConfirm>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800b980:	f04f 33ff 	mov.w	r3, #4294967295
 800b984:	e066      	b.n	800ba54 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800b986:	7b3b      	ldrb	r3, [r7, #12]
 800b988:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800b98c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	429a      	cmp	r2, r3
 800b994:	d055      	beq.n	800ba42 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d02c      	beq.n	800b9f6 <LmHandlerRequestClass+0xba>
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	dc52      	bgt.n	800ba46 <LmHandlerRequestClass+0x10a>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <LmHandlerRequestClass+0x6e>
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d022      	beq.n	800b9ee <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800b9a8:	e04d      	b.n	800ba46 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800b9aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d04b      	beq.n	800ba4a <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800b9b2:	79fb      	ldrb	r3, [r7, #7]
 800b9b4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b9b6:	f107 0308 	add.w	r3, r7, #8
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f004 fd08 	bl	80103d0 <LoRaMacMibSetRequestConfirm>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10f      	bne.n	800b9e6 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 fb1f 	bl	800c00c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800b9ce:	4b23      	ldr	r3, [pc, #140]	; (800ba5c <LmHandlerRequestClass+0x120>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d038      	beq.n	800ba4a <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800b9d8:	4b20      	ldr	r3, [pc, #128]	; (800ba5c <LmHandlerRequestClass+0x120>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	79fa      	ldrb	r2, [r7, #7]
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
            break;
 800b9e4:	e031      	b.n	800ba4a <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800b9e6:	23ff      	movs	r3, #255	; 0xff
 800b9e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b9ec:	e02d      	b.n	800ba4a <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800b9ee:	23ff      	movs	r3, #255	; 0xff
 800b9f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800b9f4:	e02c      	b.n	800ba50 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800b9f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800b9fe:	23ff      	movs	r3, #255	; 0xff
 800ba00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ba04:	e023      	b.n	800ba4e <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800ba0a:	f107 0308 	add.w	r3, r7, #8
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f004 fcde 	bl	80103d0 <LoRaMacMibSetRequestConfirm>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10f      	bne.n	800ba3a <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 faf5 	bl	800c00c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800ba22:	4b0e      	ldr	r3, [pc, #56]	; (800ba5c <LmHandlerRequestClass+0x120>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d010      	beq.n	800ba4e <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800ba2c:	4b0b      	ldr	r3, [pc, #44]	; (800ba5c <LmHandlerRequestClass+0x120>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba32:	79fa      	ldrb	r2, [r7, #7]
 800ba34:	4610      	mov	r0, r2
 800ba36:	4798      	blx	r3
            break;
 800ba38:	e009      	b.n	800ba4e <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ba3a:	23ff      	movs	r3, #255	; 0xff
 800ba3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800ba40:	e005      	b.n	800ba4e <LmHandlerRequestClass+0x112>
        }
    }
 800ba42:	bf00      	nop
 800ba44:	e004      	b.n	800ba50 <LmHandlerRequestClass+0x114>
            break;
 800ba46:	bf00      	nop
 800ba48:	e002      	b.n	800ba50 <LmHandlerRequestClass+0x114>
            break;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <LmHandlerRequestClass+0x114>
            break;
 800ba4e:	bf00      	nop
    return errorStatus;
 800ba50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3730      	adds	r7, #48	; 0x30
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	200002f0 	.word	0x200002f0

0800ba60 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08c      	sub	sp, #48	; 0x30
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba72:	e010      	b.n	800ba96 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ba74:	2300      	movs	r3, #0
 800ba76:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800ba78:	f107 030c 	add.w	r3, r7, #12
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f004 fb49 	bl	8010114 <LoRaMacMibGetRequestConfirm>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8c:	e003      	b.n	800ba96 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800ba8e:	7c3a      	ldrb	r2, [r7, #16]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3730      	adds	r7, #48	; 0x30
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08c      	sub	sp, #48	; 0x30
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800baae:	f04f 33ff 	mov.w	r3, #4294967295
 800bab2:	e016      	b.n	800bae2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800bab4:	231f      	movs	r3, #31
 800bab6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800bab8:	f107 030c 	add.w	r3, r7, #12
 800babc:	4618      	mov	r0, r3
 800babe:	f004 fb29 	bl	8010114 <LoRaMacMibGetRequestConfirm>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bac8:	f04f 33ff 	mov.w	r3, #4294967295
 800bacc:	e009      	b.n	800bae2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800bace:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f993 2000 	ldrsb.w	r2, [r3]
 800badc:	4b03      	ldr	r3, [pc, #12]	; (800baec <LmHandlerGetTxDatarate+0x4c>)
 800bade:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3730      	adds	r7, #48	; 0x30
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200002e0 	.word	0x200002e0

0800baf0 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08c      	sub	sp, #48	; 0x30
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800baf8:	2322      	movs	r3, #34	; 0x22
 800bafa:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bb00:	f107 030c 	add.w	r3, r7, #12
 800bb04:	4618      	mov	r0, r3
 800bb06:	f004 fc63 	bl	80103d0 <LoRaMacMibSetRequestConfirm>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295
 800bb14:	e000      	b.n	800bb18 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3730      	adds	r7, #48	; 0x30
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800bb28:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <McpsConfirm+0x60>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	785a      	ldrb	r2, [r3, #1]
 800bb32:	4b13      	ldr	r3, [pc, #76]	; (800bb80 <McpsConfirm+0x60>)
 800bb34:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	789b      	ldrb	r3, [r3, #2]
 800bb3a:	b25a      	sxtb	r2, r3
 800bb3c:	4b10      	ldr	r3, [pc, #64]	; (800bb80 <McpsConfirm+0x60>)
 800bb3e:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	4a0e      	ldr	r2, [pc, #56]	; (800bb80 <McpsConfirm+0x60>)
 800bb46:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <McpsConfirm+0x60>)
 800bb50:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <McpsConfirm+0x60>)
 800bb5a:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	791b      	ldrb	r3, [r3, #4]
 800bb60:	461a      	mov	r2, r3
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <McpsConfirm+0x60>)
 800bb64:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800bb66:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <McpsConfirm+0x64>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	4804      	ldr	r0, [pc, #16]	; (800bb80 <McpsConfirm+0x60>)
 800bb6e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800bb70:	6879      	ldr	r1, [r7, #4]
 800bb72:	2000      	movs	r0, #0
 800bb74:	f000 f99a 	bl	800beac <LmHandlerPackagesNotify>
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20000318 	.word	0x20000318
 800bb84:	200002f0 	.word	0x200002f0

0800bb88 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800bb92:	2300      	movs	r3, #0
 800bb94:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800bb96:	4b32      	ldr	r3, [pc, #200]	; (800bc60 <McpsIndication+0xd8>)
 800bb98:	2201      	movs	r2, #1
 800bb9a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	785a      	ldrb	r2, [r3, #1]
 800bba0:	4b2f      	ldr	r3, [pc, #188]	; (800bc60 <McpsIndication+0xd8>)
 800bba2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800bba4:	4b2e      	ldr	r3, [pc, #184]	; (800bc60 <McpsIndication+0xd8>)
 800bba6:	785b      	ldrb	r3, [r3, #1]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d154      	bne.n	800bc56 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	791b      	ldrb	r3, [r3, #4]
 800bbb0:	b25a      	sxtb	r2, r3
 800bbb2:	4b2b      	ldr	r3, [pc, #172]	; (800bc60 <McpsIndication+0xd8>)
 800bbb4:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbbc:	b25a      	sxtb	r2, r3
 800bbbe:	4b28      	ldr	r3, [pc, #160]	; (800bc60 <McpsIndication+0xd8>)
 800bbc0:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bbc8:	4b25      	ldr	r3, [pc, #148]	; (800bc60 <McpsIndication+0xd8>)
 800bbca:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	78db      	ldrb	r3, [r3, #3]
 800bbd0:	b25a      	sxtb	r2, r3
 800bbd2:	4b23      	ldr	r3, [pc, #140]	; (800bc60 <McpsIndication+0xd8>)
 800bbd4:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	4a21      	ldr	r2, [pc, #132]	; (800bc60 <McpsIndication+0xd8>)
 800bbdc:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	78db      	ldrb	r3, [r3, #3]
 800bbe2:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7b1b      	ldrb	r3, [r3, #12]
 800bbe8:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800bbf0:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <McpsIndication+0xdc>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	f107 0218 	add.w	r2, r7, #24
 800bbfa:	4919      	ldr	r1, [pc, #100]	; (800bc60 <McpsIndication+0xd8>)
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800bc00:	4b18      	ldr	r3, [pc, #96]	; (800bc64 <McpsIndication+0xdc>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d007      	beq.n	800bc1a <McpsIndication+0x92>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	7e1b      	ldrb	r3, [r3, #24]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800bc12:	4b14      	ldr	r3, [pc, #80]	; (800bc64 <McpsIndication+0xdc>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc18:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	2001      	movs	r0, #1
 800bc1e:	f000 f945 	bl	800beac <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800bc22:	f107 0317 	add.w	r3, r7, #23
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff ff1a 	bl	800ba60 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	795b      	ldrb	r3, [r3, #5]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d111      	bne.n	800bc58 <McpsIndication+0xd0>
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10e      	bne.n	800bc58 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	733b      	strb	r3, [r7, #12]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	737b      	strb	r3, [r7, #13]
 800bc42:	2300      	movs	r3, #0
 800bc44:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800bc46:	f107 000c 	add.w	r0, r7, #12
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	f7ff fd88 	bl	800b764 <LmHandlerSend>
 800bc54:	e000      	b.n	800bc58 <McpsIndication+0xd0>
        return;
 800bc56:	bf00      	nop
    }
}
 800bc58:	3720      	adds	r7, #32
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200000c8 	.word	0x200000c8
 800bc64:	200002f0 	.word	0x200002f0

0800bc68 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08c      	sub	sp, #48	; 0x30
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800bc70:	4b28      	ldr	r3, [pc, #160]	; (800bd14 <MlmeConfirm+0xac>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	785a      	ldrb	r2, [r3, #1]
 800bc7a:	4b26      	ldr	r3, [pc, #152]	; (800bd14 <MlmeConfirm+0xac>)
 800bc7c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800bc7e:	4b26      	ldr	r3, [pc, #152]	; (800bd18 <MlmeConfirm+0xb0>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	4823      	ldr	r0, [pc, #140]	; (800bd14 <MlmeConfirm+0xac>)
 800bc86:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800bc88:	6879      	ldr	r1, [r7, #4]
 800bc8a:	2002      	movs	r0, #2
 800bc8c:	f000 f90e 	bl	800beac <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b0a      	cmp	r3, #10
 800bc96:	d035      	beq.n	800bd04 <MlmeConfirm+0x9c>
 800bc98:	2b0a      	cmp	r3, #10
 800bc9a:	dc35      	bgt.n	800bd08 <MlmeConfirm+0xa0>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d002      	beq.n	800bca6 <MlmeConfirm+0x3e>
 800bca0:	2b04      	cmp	r3, #4
 800bca2:	d023      	beq.n	800bcec <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800bca4:	e030      	b.n	800bd08 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800bca6:	2306      	movs	r3, #6
 800bca8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bcaa:	f107 030c 	add.w	r3, r7, #12
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f004 fa30 	bl	8010114 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	4a19      	ldr	r2, [pc, #100]	; (800bd1c <MlmeConfirm+0xb4>)
 800bcb8:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800bcba:	4819      	ldr	r0, [pc, #100]	; (800bd20 <MlmeConfirm+0xb8>)
 800bcbc:	f7ff fef0 	bl	800baa0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	785b      	ldrb	r3, [r3, #1]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d108      	bne.n	800bcda <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800bcc8:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <MlmeConfirm+0xb8>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800bcce:	4b15      	ldr	r3, [pc, #84]	; (800bd24 <MlmeConfirm+0xbc>)
 800bcd0:	785b      	ldrb	r3, [r3, #1]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff fe32 	bl	800b93c <LmHandlerRequestClass>
 800bcd8:	e002      	b.n	800bce0 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800bcda:	4b11      	ldr	r3, [pc, #68]	; (800bd20 <MlmeConfirm+0xb8>)
 800bcdc:	22ff      	movs	r2, #255	; 0xff
 800bcde:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bce0:	4b0d      	ldr	r3, [pc, #52]	; (800bd18 <MlmeConfirm+0xb0>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	480e      	ldr	r0, [pc, #56]	; (800bd20 <MlmeConfirm+0xb8>)
 800bce8:	4798      	blx	r3
        break;
 800bcea:	e00e      	b.n	800bd0a <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800bcec:	4b0e      	ldr	r3, [pc, #56]	; (800bd28 <MlmeConfirm+0xc0>)
 800bcee:	2201      	movs	r2, #1
 800bcf0:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	7a1a      	ldrb	r2, [r3, #8]
 800bcf6:	4b0c      	ldr	r3, [pc, #48]	; (800bd28 <MlmeConfirm+0xc0>)
 800bcf8:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7a5a      	ldrb	r2, [r3, #9]
 800bcfe:	4b0a      	ldr	r3, [pc, #40]	; (800bd28 <MlmeConfirm+0xc0>)
 800bd00:	73da      	strb	r2, [r3, #15]
        break;
 800bd02:	e002      	b.n	800bd0a <MlmeConfirm+0xa2>
        break;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <MlmeConfirm+0xa2>
        break;
 800bd08:	bf00      	nop
    }
}
 800bd0a:	bf00      	nop
 800bd0c:	3730      	adds	r7, #48	; 0x30
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20000318 	.word	0x20000318
 800bd18:	200002f0 	.word	0x200002f0
 800bd1c:	200000a0 	.word	0x200000a0
 800bd20:	200000c4 	.word	0x200000c4
 800bd24:	200002e0 	.word	0x200002e0
 800bd28:	200000c8 	.word	0x200000c8

0800bd2c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800bd36:	4b22      	ldr	r3, [pc, #136]	; (800bdc0 <MlmeIndication+0x94>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	785a      	ldrb	r2, [r3, #1]
 800bd40:	4b1f      	ldr	r3, [pc, #124]	; (800bdc0 <MlmeIndication+0x94>)
 800bd42:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd4a:	b25a      	sxtb	r2, r3
 800bd4c:	4b1c      	ldr	r3, [pc, #112]	; (800bdc0 <MlmeIndication+0x94>)
 800bd4e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <MlmeIndication+0x94>)
 800bd58:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	78db      	ldrb	r3, [r3, #3]
 800bd5e:	b25a      	sxtb	r2, r3
 800bd60:	4b17      	ldr	r3, [pc, #92]	; (800bdc0 <MlmeIndication+0x94>)
 800bd62:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800bd64:	4b16      	ldr	r3, [pc, #88]	; (800bdc0 <MlmeIndication+0x94>)
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	2b0e      	cmp	r3, #14
 800bd6a:	d005      	beq.n	800bd78 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800bd6c:	4b15      	ldr	r3, [pc, #84]	; (800bdc4 <MlmeIndication+0x98>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	4913      	ldr	r1, [pc, #76]	; (800bdc0 <MlmeIndication+0x94>)
 800bd74:	2000      	movs	r0, #0
 800bd76:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	2b07      	cmp	r3, #7
 800bd7e:	d117      	bne.n	800bdb0 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800bd80:	2300      	movs	r3, #0
 800bd82:	723b      	strb	r3, [r7, #8]
 800bd84:	2300      	movs	r3, #0
 800bd86:	727b      	strb	r3, [r7, #9]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <MlmeIndication+0x9c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	4798      	blx	r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	f083 0301 	eor.w	r3, r3, #1
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d009      	beq.n	800bdb4 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800bda0:	f107 0008 	add.w	r0, r7, #8
 800bda4:	2301      	movs	r3, #1
 800bda6:	2200      	movs	r2, #0
 800bda8:	2100      	movs	r1, #0
 800bdaa:	f7ff fcdb 	bl	800b764 <LmHandlerSend>
            }
        }
        break;
 800bdae:	e001      	b.n	800bdb4 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800bdb0:	bf00      	nop
 800bdb2:	e000      	b.n	800bdb6 <MlmeIndication+0x8a>
        break;
 800bdb4:	bf00      	nop
    }
}
 800bdb6:	bf00      	nop
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	200000c8 	.word	0x200000c8
 800bdc4:	200002f0 	.word	0x200002f0
 800bdc8:	200002cc 	.word	0x200002cc

0800bdcc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]
    switch( id )
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d103      	bne.n	800bdea <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800bde2:	f000 f943 	bl	800c06c <LmhpCompliancePackageFactory>
 800bde6:	60f8      	str	r0, [r7, #12]
            break;
 800bde8:	e000      	b.n	800bdec <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800bdea:	bf00      	nop
        }
    }
    if( package != NULL )
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d02b      	beq.n	800be4a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	4918      	ldr	r1, [pc, #96]	; (800be58 <LmHandlerPackageRegister+0x8c>)
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	4a16      	ldr	r2, [pc, #88]	; (800be58 <LmHandlerPackageRegister+0x8c>)
 800be00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be04:	4a15      	ldr	r2, [pc, #84]	; (800be5c <LmHandlerPackageRegister+0x90>)
 800be06:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	4a13      	ldr	r2, [pc, #76]	; (800be58 <LmHandlerPackageRegister+0x8c>)
 800be0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be10:	4a13      	ldr	r2, [pc, #76]	; (800be60 <LmHandlerPackageRegister+0x94>)
 800be12:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	4a10      	ldr	r2, [pc, #64]	; (800be58 <LmHandlerPackageRegister+0x8c>)
 800be18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be1c:	4a11      	ldr	r2, [pc, #68]	; (800be64 <LmHandlerPackageRegister+0x98>)
 800be1e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800be20:	4b11      	ldr	r3, [pc, #68]	; (800be68 <LmHandlerPackageRegister+0x9c>)
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	79fb      	ldrb	r3, [r7, #7]
 800be26:	490c      	ldr	r1, [pc, #48]	; (800be58 <LmHandlerPackageRegister+0x8c>)
 800be28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800be2c:	6912      	ldr	r2, [r2, #16]
 800be2e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	4a09      	ldr	r2, [pc, #36]	; (800be58 <LmHandlerPackageRegister+0x8c>)
 800be34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	4a0c      	ldr	r2, [pc, #48]	; (800be6c <LmHandlerPackageRegister+0xa0>)
 800be3c:	6851      	ldr	r1, [r2, #4]
 800be3e:	4a0b      	ldr	r2, [pc, #44]	; (800be6c <LmHandlerPackageRegister+0xa0>)
 800be40:	7852      	ldrb	r2, [r2, #1]
 800be42:	6838      	ldr	r0, [r7, #0]
 800be44:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800be46:	2300      	movs	r3, #0
 800be48:	e001      	b.n	800be4e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800be4a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	200002cc 	.word	0x200002cc
 800be5c:	0800b679 	.word	0x0800b679
 800be60:	0800b765 	.word	0x0800b765
 800be64:	0800b911 	.word	0x0800b911
 800be68:	200002f0 	.word	0x200002f0
 800be6c:	200000d8 	.word	0x200000d8

0800be70 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	4603      	mov	r3, r0
 800be78:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d80e      	bhi.n	800be9e <LmHandlerPackageIsInitialized+0x2e>
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	4a09      	ldr	r2, [pc, #36]	; (800bea8 <LmHandlerPackageIsInitialized+0x38>)
 800be84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800be8e:	79fb      	ldrb	r3, [r7, #7]
 800be90:	4a05      	ldr	r2, [pc, #20]	; (800bea8 <LmHandlerPackageIsInitialized+0x38>)
 800be92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	4798      	blx	r3
 800be9a:	4603      	mov	r3, r0
 800be9c:	e000      	b.n	800bea0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800be9e:	2300      	movs	r3, #0
    }
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	200002cc 	.word	0x200002cc

0800beac <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	6039      	str	r1, [r7, #0]
 800beb6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800beb8:	2300      	movs	r3, #0
 800beba:	73fb      	strb	r3, [r7, #15]
 800bebc:	e067      	b.n	800bf8e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800bebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bec2:	4a37      	ldr	r2, [pc, #220]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d051      	beq.n	800bf70 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d03d      	beq.n	800bf4e <LmHandlerPackagesNotify+0xa2>
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	dc4e      	bgt.n	800bf74 <LmHandlerPackagesNotify+0xc8>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <LmHandlerPackagesNotify+0x34>
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d011      	beq.n	800bf02 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800bede:	e049      	b.n	800bf74 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800bee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bee4:	4a2e      	ldr	r2, [pc, #184]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d043      	beq.n	800bf78 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800bef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bef4:	4a2a      	ldr	r2, [pc, #168]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	6838      	ldr	r0, [r7, #0]
 800befe:	4798      	blx	r3
                    break;
 800bf00:	e03a      	b.n	800bf78 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800bf02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf06:	4a26      	ldr	r2, [pc, #152]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bf08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d034      	beq.n	800bf7c <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800bf12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf16:	4a22      	ldr	r2, [pc, #136]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bf18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d00a      	beq.n	800bf3c <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800bf26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d126      	bne.n	800bf7c <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800bf2e:	4b1c      	ldr	r3, [pc, #112]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	4798      	blx	r3
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d01f      	beq.n	800bf7c <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800bf3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf40:	4a17      	ldr	r2, [pc, #92]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bf42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf46:	69db      	ldr	r3, [r3, #28]
 800bf48:	6838      	ldr	r0, [r7, #0]
 800bf4a:	4798      	blx	r3
                    break;
 800bf4c:	e016      	b.n	800bf7c <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800bf4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf52:	4a13      	ldr	r2, [pc, #76]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d010      	beq.n	800bf80 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800bf5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf62:	4a0f      	ldr	r2, [pc, #60]	; (800bfa0 <LmHandlerPackagesNotify+0xf4>)
 800bf64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	6838      	ldr	r0, [r7, #0]
 800bf6c:	4798      	blx	r3
                    break;
 800bf6e:	e007      	b.n	800bf80 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800bf70:	bf00      	nop
 800bf72:	e006      	b.n	800bf82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf74:	bf00      	nop
 800bf76:	e004      	b.n	800bf82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf78:	bf00      	nop
 800bf7a:	e002      	b.n	800bf82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf7c:	bf00      	nop
 800bf7e:	e000      	b.n	800bf82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800bf80:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800bf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	3301      	adds	r3, #1
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	73fb      	strb	r3, [r7, #15]
 800bf8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf92:	2b04      	cmp	r3, #4
 800bf94:	dd93      	ble.n	800bebe <LmHandlerPackagesNotify+0x12>
    }
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	200002cc 	.word	0x200002cc

0800bfa4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800bfaa:	2300      	movs	r3, #0
 800bfac:	71fb      	strb	r3, [r7, #7]
 800bfae:	e022      	b.n	800bff6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800bfb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb4:	4a14      	ldr	r2, [pc, #80]	; (800c008 <LmHandlerPackagesProcess+0x64>)
 800bfb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d015      	beq.n	800bfea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800bfbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfc2:	4a11      	ldr	r2, [pc, #68]	; (800c008 <LmHandlerPackagesProcess+0x64>)
 800bfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00d      	beq.n	800bfea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff ff4d 	bl	800be70 <LmHandlerPackageIsInitialized>
 800bfd6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800bfdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfe0:	4a09      	ldr	r2, [pc, #36]	; (800c008 <LmHandlerPackagesProcess+0x64>)
 800bfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800bfea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	3301      	adds	r3, #1
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	71fb      	strb	r3, [r7, #7]
 800bff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	ddd8      	ble.n	800bfb0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	200002cc 	.word	0x200002cc

0800c00c <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af02      	add	r7, sp, #8
 800c012:	4603      	mov	r3, r0
 800c014:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	4a06      	ldr	r2, [pc, #24]	; (800c034 <DisplayClassUpdate+0x28>)
 800c01a:	5cd3      	ldrb	r3, [r2, r3]
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	4b06      	ldr	r3, [pc, #24]	; (800c038 <DisplayClassUpdate+0x2c>)
 800c020:	2200      	movs	r2, #0
 800c022:	2100      	movs	r1, #0
 800c024:	2002      	movs	r0, #2
 800c026:	f00d fcf9 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 800c02a:	bf00      	nop
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	0801a664 	.word	0x0801a664
 800c038:	0801a648 	.word	0x0801a648

0800c03c <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	4603      	mov	r3, r0
 800c044:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c046:	bf00      	nop
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bc80      	pop	{r7}
 800c04e:	4770      	bx	lr

0800c050 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800c054:	2300      	movs	r3, #0
#endif
}
 800c056:	4618      	mov	r0, r3
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr

0800c05e <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800c05e:	b480      	push	{r7}
 800c060:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	46bd      	mov	sp, r7
 800c068:	bc80      	pop	{r7}
 800c06a:	4770      	bx	lr

0800c06c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c070:	4b02      	ldr	r3, [pc, #8]	; (800c07c <LmhpCompliancePackageFactory+0x10>)
}
 800c072:	4618      	mov	r0, r3
 800c074:	46bd      	mov	sp, r7
 800c076:	bc80      	pop	{r7}
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	200000e0 	.word	0x200000e0

0800c080 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	4613      	mov	r3, r2
 800c08c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00f      	beq.n	800c0b4 <LmhpComplianceInit+0x34>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00c      	beq.n	800c0b4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800c09a:	4a0c      	ldr	r2, [pc, #48]	; (800c0cc <LmhpComplianceInit+0x4c>)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c0a0:	4a0b      	ldr	r2, [pc, #44]	; (800c0d0 <LmhpComplianceInit+0x50>)
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c0a6:	4a0a      	ldr	r2, [pc, #40]	; (800c0d0 <LmhpComplianceInit+0x50>)
 800c0a8:	79fb      	ldrb	r3, [r7, #7]
 800c0aa:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c0ac:	4b08      	ldr	r3, [pc, #32]	; (800c0d0 <LmhpComplianceInit+0x50>)
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	701a      	strb	r2, [r3, #0]
 800c0b2:	e006      	b.n	800c0c2 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c0b4:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <LmhpComplianceInit+0x4c>)
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <LmhpComplianceInit+0x50>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	701a      	strb	r2, [r3, #0]
    }
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bc80      	pop	{r7}
 800c0ca:	4770      	bx	lr
 800c0cc:	20000450 	.word	0x20000450
 800c0d0:	2000043c 	.word	0x2000043c

0800c0d4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c0d8:	4b02      	ldr	r3, [pc, #8]	; (800c0e4 <LmhpComplianceIsInitialized+0x10>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bc80      	pop	{r7}
 800c0e2:	4770      	bx	lr
 800c0e4:	2000043c 	.word	0x2000043c

0800c0e8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c0ec:	4b07      	ldr	r3, [pc, #28]	; (800c10c <LmhpComplianceIsRunning+0x24>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f083 0301 	eor.w	r3, r3, #1
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e001      	b.n	800c102 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c0fe:	4b03      	ldr	r3, [pc, #12]	; (800c10c <LmhpComplianceIsRunning+0x24>)
 800c100:	785b      	ldrb	r3, [r3, #1]
}
 800c102:	4618      	mov	r0, r3
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	2000043c 	.word	0x2000043c

0800c110 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800c118:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f083 0301 	eor.w	r3, r3, #1
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d112      	bne.n	800c14c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c126:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c128:	785b      	ldrb	r3, [r3, #1]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00f      	beq.n	800c14e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800c132:	2b01      	cmp	r3, #1
 800c134:	d10b      	bne.n	800c14e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c13e:	4b06      	ldr	r3, [pc, #24]	; (800c158 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c140:	899b      	ldrh	r3, [r3, #12]
 800c142:	3301      	adds	r3, #1
 800c144:	b29a      	uxth	r2, r3
 800c146:	4b04      	ldr	r3, [pc, #16]	; (800c158 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c148:	819a      	strh	r2, [r3, #12]
 800c14a:	e000      	b.n	800c14e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c14c:	bf00      	nop
    }
}
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	bc80      	pop	{r7}
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	2000043c 	.word	0x2000043c

0800c15c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c164:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f083 0301 	eor.w	r3, r3, #1
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d116      	bne.n	800c1a0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	f083 0301 	eor.w	r3, r3, #1
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d111      	bne.n	800c1a4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b04      	cmp	r3, #4
 800c186:	d10e      	bne.n	800c1a6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c188:	4b09      	ldr	r3, [pc, #36]	; (800c1b0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c18a:	2201      	movs	r2, #1
 800c18c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7a1a      	ldrb	r2, [r3, #8]
 800c192:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c194:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	7a5a      	ldrb	r2, [r3, #9]
 800c19a:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800c19c:	741a      	strb	r2, [r3, #16]
 800c19e:	e002      	b.n	800c1a6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c1a4:	bf00      	nop
    }
}
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bc80      	pop	{r7}
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	2000043c 	.word	0x2000043c

0800c1b4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c1ba:	4b33      	ldr	r3, [pc, #204]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	f083 0301 	eor.w	r3, r3, #1
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1cc:	e058      	b.n	800c280 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800c1ce:	4b2e      	ldr	r3, [pc, #184]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1d0:	785b      	ldrb	r3, [r3, #1]
 800c1d2:	f083 0301 	eor.w	r3, r3, #1
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e04f      	b.n	800c280 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c1e0:	4b29      	ldr	r3, [pc, #164]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1e2:	7b9b      	ldrb	r3, [r3, #14]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d019      	beq.n	800c21c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c1e8:	4b27      	ldr	r3, [pc, #156]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c1ee:	4b26      	ldr	r3, [pc, #152]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c1f4:	4b24      	ldr	r3, [pc, #144]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	2205      	movs	r2, #5
 800c1fa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c1fc:	4b22      	ldr	r3, [pc, #136]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	3301      	adds	r3, #1
 800c202:	4a21      	ldr	r2, [pc, #132]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c204:	7bd2      	ldrb	r2, [r2, #15]
 800c206:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c208:	4b1f      	ldr	r3, [pc, #124]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	3302      	adds	r3, #2
 800c20e:	4a1e      	ldr	r2, [pc, #120]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c210:	7c12      	ldrb	r2, [r2, #16]
 800c212:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c214:	4b1c      	ldr	r3, [pc, #112]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c216:	2201      	movs	r2, #1
 800c218:	709a      	strb	r2, [r3, #2]
 800c21a:	e01c      	b.n	800c256 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c21c:	4b1a      	ldr	r3, [pc, #104]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c21e:	789b      	ldrb	r3, [r3, #2]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d005      	beq.n	800c230 <LmhpComplianceTxProcess+0x7c>
 800c224:	2b04      	cmp	r3, #4
 800c226:	d116      	bne.n	800c256 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800c228:	4b17      	ldr	r3, [pc, #92]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c22a:	2201      	movs	r2, #1
 800c22c:	709a      	strb	r2, [r3, #2]
            break;
 800c22e:	e012      	b.n	800c256 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800c230:	4b15      	ldr	r3, [pc, #84]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c232:	2202      	movs	r2, #2
 800c234:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c236:	4b14      	ldr	r3, [pc, #80]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c238:	899b      	ldrh	r3, [r3, #12]
 800c23a:	0a1b      	lsrs	r3, r3, #8
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	4b12      	ldr	r3, [pc, #72]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c246:	4b10      	ldr	r3, [pc, #64]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c248:	899a      	ldrh	r2, [r3, #12]
 800c24a:	4b0f      	ldr	r3, [pc, #60]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	3301      	adds	r3, #1
 800c250:	b2d2      	uxtb	r2, r2
 800c252:	701a      	strb	r2, [r3, #0]
            break;
 800c254:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c256:	23e0      	movs	r3, #224	; 0xe0
 800c258:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c25a:	4b0b      	ldr	r3, [pc, #44]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c25c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c25e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c262:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c264:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800c266:	4809      	ldr	r0, [pc, #36]	; (800c28c <LmhpComplianceTxProcess+0xd8>)
 800c268:	f00d f960 	bl	801952c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800c26c:	4b08      	ldr	r3, [pc, #32]	; (800c290 <LmhpComplianceTxProcess+0xdc>)
 800c26e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800c270:	4b05      	ldr	r3, [pc, #20]	; (800c288 <LmhpComplianceTxProcess+0xd4>)
 800c272:	78db      	ldrb	r3, [r3, #3]
 800c274:	4619      	mov	r1, r3
 800c276:	4638      	mov	r0, r7
 800c278:	2301      	movs	r3, #1
 800c27a:	2200      	movs	r2, #0
 800c27c:	47a0      	blx	r4
 800c27e:	4603      	mov	r3, r0
}
 800c280:	4618      	mov	r0, r3
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	bd90      	pop	{r4, r7, pc}
 800c288:	2000043c 	.word	0x2000043c
 800c28c:	20000424 	.word	0x20000424
 800c290:	200000e0 	.word	0x200000e0

0800c294 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b0a2      	sub	sp, #136	; 0x88
 800c298:	af02      	add	r7, sp, #8
 800c29a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c29c:	4bae      	ldr	r3, [pc, #696]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	f083 0301 	eor.w	r3, r3, #1
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f040 81c0 	bne.w	800c62c <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7b5b      	ldrb	r3, [r3, #13]
 800c2b0:	f083 0301 	eor.w	r3, r3, #1
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f040 81ba 	bne.w	800c630 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800c2bc:	4ba6      	ldr	r3, [pc, #664]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2be:	785b      	ldrb	r3, [r3, #1]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00c      	beq.n	800c2de <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7b9b      	ldrb	r3, [r3, #14]
 800c2c8:	f083 0301 	eor.w	r3, r3, #1
 800c2cc:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d005      	beq.n	800c2de <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c2d2:	4ba1      	ldr	r3, [pc, #644]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2d4:	899b      	ldrh	r3, [r3, #12]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	4b9f      	ldr	r3, [pc, #636]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2dc:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	78db      	ldrb	r3, [r3, #3]
 800c2e2:	2be0      	cmp	r3, #224	; 0xe0
 800c2e4:	f040 81a6 	bne.w	800c634 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c2e8:	4b9b      	ldr	r3, [pc, #620]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	f083 0301 	eor.w	r3, r3, #1
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d060      	beq.n	800c3b8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7b1b      	ldrb	r3, [r3, #12]
 800c2fa:	2b04      	cmp	r3, #4
 800c2fc:	f040 819f 	bne.w	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c306:	2b01      	cmp	r3, #1
 800c308:	f040 8199 	bne.w	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	3301      	adds	r3, #1
 800c312:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c314:	2b01      	cmp	r3, #1
 800c316:	f040 8192 	bne.w	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	3302      	adds	r3, #2
 800c320:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c322:	2b01      	cmp	r3, #1
 800c324:	f040 818b 	bne.w	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	3303      	adds	r3, #3
 800c32e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c330:	2b01      	cmp	r3, #1
 800c332:	f040 8184 	bne.w	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800c336:	4b88      	ldr	r3, [pc, #544]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c338:	2200      	movs	r2, #0
 800c33a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800c33c:	4b86      	ldr	r3, [pc, #536]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c33e:	22e0      	movs	r2, #224	; 0xe0
 800c340:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800c342:	4b85      	ldr	r3, [pc, #532]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c344:	2202      	movs	r2, #2
 800c346:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800c348:	4b83      	ldr	r3, [pc, #524]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800c34e:	4b82      	ldr	r3, [pc, #520]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c350:	2200      	movs	r2, #0
 800c352:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800c354:	4b80      	ldr	r3, [pc, #512]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c356:	2200      	movs	r2, #0
 800c358:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800c35a:	4b7f      	ldr	r3, [pc, #508]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800c360:	4b7d      	ldr	r3, [pc, #500]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c362:	2201      	movs	r2, #1
 800c364:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800c366:	4b7c      	ldr	r3, [pc, #496]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c368:	2201      	movs	r2, #1
 800c36a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800c36c:	2304      	movs	r3, #4
 800c36e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800c370:	2301      	movs	r3, #1
 800c372:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c374:	f107 0308 	add.w	r3, r7, #8
 800c378:	4618      	mov	r0, r3
 800c37a:	f004 f829 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800c37e:	2000      	movs	r0, #0
 800c380:	f004 fd9a 	bl	8010eb8 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800c384:	4b75      	ldr	r3, [pc, #468]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800c38e:	4b73      	ldr	r3, [pc, #460]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800c396:	2300      	movs	r3, #0
 800c398:	9300      	str	r3, [sp, #0]
 800c39a:	4b71      	ldr	r3, [pc, #452]	; (800c560 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	f04f 31ff 	mov.w	r1, #4294967295
 800c3a2:	4870      	ldr	r0, [pc, #448]	; (800c564 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c3a4:	f00d f88c 	bl	80194c0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800c3a8:	f241 3188 	movw	r1, #5000	; 0x1388
 800c3ac:	486d      	ldr	r0, [pc, #436]	; (800c564 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c3ae:	f00d f99b 	bl	80196e8 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800c3b2:	f7ff feff 	bl	800c1b4 <LmhpComplianceTxProcess>
 800c3b6:	e142      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	781a      	ldrb	r2, [r3, #0]
 800c3be:	4b66      	ldr	r3, [pc, #408]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c3c0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800c3c2:	4b65      	ldr	r3, [pc, #404]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c3c4:	789b      	ldrb	r3, [r3, #2]
 800c3c6:	2b0a      	cmp	r3, #10
 800c3c8:	f200 8136 	bhi.w	800c638 <LmhpComplianceOnMcpsIndication+0x3a4>
 800c3cc:	a201      	add	r2, pc, #4	; (adr r2, 800c3d4 <LmhpComplianceOnMcpsIndication+0x140>)
 800c3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d2:	bf00      	nop
 800c3d4:	0800c401 	.word	0x0800c401
 800c3d8:	0800c44b 	.word	0x0800c44b
 800c3dc:	0800c453 	.word	0x0800c453
 800c3e0:	0800c461 	.word	0x0800c461
 800c3e4:	0800c46f 	.word	0x0800c46f
 800c3e8:	0800c4c7 	.word	0x0800c4c7
 800c3ec:	0800c4d9 	.word	0x0800c4d9
 800c3f0:	0800c529 	.word	0x0800c529
 800c3f4:	0800c5e5 	.word	0x0800c5e5
 800c3f8:	0800c5f7 	.word	0x0800c5f7
 800c3fc:	0800c611 	.word	0x0800c611
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800c400:	4858      	ldr	r0, [pc, #352]	; (800c564 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c402:	f00d f901 	bl	8019608 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c406:	4b54      	ldr	r3, [pc, #336]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c408:	2200      	movs	r2, #0
 800c40a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c40c:	4b52      	ldr	r3, [pc, #328]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c40e:	2200      	movs	r2, #0
 800c410:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800c412:	2304      	movs	r3, #4
 800c414:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c416:	4b51      	ldr	r3, [pc, #324]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c41e:	f107 0308 	add.w	r3, r7, #8
 800c422:	4618      	mov	r0, r3
 800c424:	f003 ffd4 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c428:	4b4c      	ldr	r3, [pc, #304]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	4618      	mov	r0, r3
 800c430:	f004 fd42 	bl	8010eb8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c434:	4b49      	ldr	r3, [pc, #292]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 80fe 	beq.w	800c63c <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c440:	4b46      	ldr	r3, [pc, #280]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	4798      	blx	r3
                }
            }
            break;
 800c448:	e0f8      	b.n	800c63c <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800c44a:	4b43      	ldr	r3, [pc, #268]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c44c:	2202      	movs	r2, #2
 800c44e:	719a      	strb	r2, [r3, #6]
            break;
 800c450:	e0f5      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800c452:	4b41      	ldr	r3, [pc, #260]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c454:	2201      	movs	r2, #1
 800c456:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c458:	4b3f      	ldr	r3, [pc, #252]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	709a      	strb	r2, [r3, #2]
            break;
 800c45e:	e0ee      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800c460:	4b3d      	ldr	r3, [pc, #244]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c462:	2200      	movs	r2, #0
 800c464:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800c466:	4b3c      	ldr	r3, [pc, #240]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c468:	2201      	movs	r2, #1
 800c46a:	709a      	strb	r2, [r3, #2]
            break;
 800c46c:	e0e7      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	7b1a      	ldrb	r2, [r3, #12]
 800c472:	4b39      	ldr	r3, [pc, #228]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c474:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800c476:	4b38      	ldr	r3, [pc, #224]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	2204      	movs	r2, #4
 800c47c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c484:	e012      	b.n	800c4ac <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	689a      	ldr	r2, [r3, #8]
 800c48a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c48e:	4413      	add	r3, r2
 800c490:	781a      	ldrb	r2, [r3, #0]
 800c492:	4b31      	ldr	r3, [pc, #196]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c494:	6899      	ldr	r1, [r3, #8]
 800c496:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c49a:	440b      	add	r3, r1
 800c49c:	3201      	adds	r2, #1
 800c49e:	b2d2      	uxtb	r2, r2
 800c4a0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800c4a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c4ac:	4b2a      	ldr	r3, [pc, #168]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c4ae:	795a      	ldrb	r2, [r3, #5]
 800c4b0:	4b29      	ldr	r3, [pc, #164]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c4b2:	799b      	ldrb	r3, [r3, #6]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	bf28      	it	cs
 800c4b8:	4613      	movcs	r3, r2
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d3e0      	bcc.n	800c486 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800c4c4:	e0bb      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800c4cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f004 fabb 	bl	8010a4c <LoRaMacMlmeRequest>
            }
            break;
 800c4d6:	e0b2      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800c4d8:	4822      	ldr	r0, [pc, #136]	; (800c564 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800c4da:	f00d f895 	bl	8019608 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800c4de:	4b1e      	ldr	r3, [pc, #120]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800c4e4:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800c4ea:	2304      	movs	r3, #4
 800c4ec:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800c4ee:	4b1b      	ldr	r3, [pc, #108]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c4f6:	f107 0308 	add.w	r3, r7, #8
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f003 ff68 	bl	80103d0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800c500:	4b16      	ldr	r3, [pc, #88]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	785b      	ldrb	r3, [r3, #1]
 800c506:	4618      	mov	r0, r3
 800c508:	f004 fcd6 	bl	8010eb8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800c50c:	4b13      	ldr	r3, [pc, #76]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800c516:	4b11      	ldr	r3, [pc, #68]	; (800c55c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800c51e:	4b12      	ldr	r3, [pc, #72]	; (800c568 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800c520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c522:	2002      	movs	r0, #2
 800c524:	4798      	blx	r3
            }
            break;
 800c526:	e08a      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7b1b      	ldrb	r3, [r3, #12]
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d11d      	bne.n	800c56c <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800c530:	2305      	movs	r3, #5
 800c532:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	3301      	adds	r3, #1
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	b21a      	sxth	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	3302      	adds	r3, #2
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	b21b      	sxth	r3, r3
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b21b      	sxth	r3, r3
 800c550:	b29b      	uxth	r3, r3
 800c552:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800c556:	e03c      	b.n	800c5d2 <LmhpComplianceOnMcpsIndication+0x33e>
 800c558:	2000043c 	.word	0x2000043c
 800c55c:	20000450 	.word	0x20000450
 800c560:	0800c655 	.word	0x0800c655
 800c564:	20000424 	.word	0x20000424
 800c568:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	7b1b      	ldrb	r3, [r3, #12]
 800c570:	2b07      	cmp	r3, #7
 800c572:	d12e      	bne.n	800c5d2 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800c574:	2306      	movs	r3, #6
 800c576:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	3301      	adds	r3, #1
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	021b      	lsls	r3, r3, #8
 800c584:	b21a      	sxth	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	3302      	adds	r3, #2
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	b21b      	sxth	r3, r3
 800c590:	4313      	orrs	r3, r2
 800c592:	b21b      	sxth	r3, r3
 800c594:	b29b      	uxth	r3, r3
 800c596:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	3303      	adds	r3, #3
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	041a      	lsls	r2, r3, #16
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	021b      	lsls	r3, r3, #8
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	6892      	ldr	r2, [r2, #8]
 800c5b4:	3205      	adds	r2, #5
 800c5b6:	7812      	ldrb	r2, [r2, #0]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	2364      	movs	r3, #100	; 0x64
 800c5be:	fb03 f302 	mul.w	r3, r3, r2
 800c5c2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	3306      	adds	r3, #6
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b25b      	sxtb	r3, r3
 800c5ce:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800c5d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f004 fa38 	bl	8010a4c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800c5dc:	4b19      	ldr	r3, [pc, #100]	; (800c644 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800c5de:	2201      	movs	r2, #1
 800c5e0:	709a      	strb	r2, [r3, #2]
            }
            break;
 800c5e2:	e02c      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800c5e4:	230a      	movs	r3, #10
 800c5e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800c5ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f004 fa2c 	bl	8010a4c <LoRaMacMlmeRequest>
            }
            break;
 800c5f4:	e023      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	3301      	adds	r3, #1
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4618      	mov	r0, r3
 800c60a:	f003 fee1 	bl	80103d0 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800c60e:	e016      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800c610:	230d      	movs	r3, #13
 800c612:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800c620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c624:	4618      	mov	r0, r3
 800c626:	f004 fa11 	bl	8010a4c <LoRaMacMlmeRequest>
            }
            break;
 800c62a:	e008      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800c62c:	bf00      	nop
 800c62e:	e006      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800c630:	bf00      	nop
 800c632:	e004      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800c634:	bf00      	nop
 800c636:	e002      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800c638:	bf00      	nop
 800c63a:	e000      	b.n	800c63e <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800c63c:	bf00      	nop
        }
    }
}
 800c63e:	3780      	adds	r7, #128	; 0x80
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	2000043c 	.word	0x2000043c

0800c648 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800c64c:	bf00      	nop
 800c64e:	46bd      	mov	sp, r7
 800c650:	bc80      	pop	{r7}
 800c652:	4770      	bx	lr

0800c654 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800c65c:	f7ff fdaa 	bl	800c1b4 <LmhpComplianceTxProcess>
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800c668:	b590      	push	{r4, r7, lr}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800c66e:	f00d f8e5 	bl	801983c <UTIL_TIMER_GetCurrentTime>
 800c672:	4603      	mov	r3, r0
 800c674:	4a16      	ldr	r2, [pc, #88]	; (800c6d0 <OnRadioTxDone+0x68>)
 800c676:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800c678:	4c16      	ldr	r4, [pc, #88]	; (800c6d4 <OnRadioTxDone+0x6c>)
 800c67a:	463b      	mov	r3, r7
 800c67c:	4618      	mov	r0, r3
 800c67e:	f00c fa6f 	bl	8018b60 <SysTimeGet>
 800c682:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800c686:	463a      	mov	r2, r7
 800c688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c68c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800c690:	4a11      	ldr	r2, [pc, #68]	; (800c6d8 <OnRadioTxDone+0x70>)
 800c692:	7813      	ldrb	r3, [r2, #0]
 800c694:	f043 0310 	orr.w	r3, r3, #16
 800c698:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c69a:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <OnRadioTxDone+0x6c>)
 800c69c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00a      	beq.n	800c6ba <OnRadioTxDone+0x52>
 800c6a4:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <OnRadioTxDone+0x6c>)
 800c6a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d004      	beq.n	800c6ba <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c6b0:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <OnRadioTxDone+0x6c>)
 800c6b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800c6ba:	4b08      	ldr	r3, [pc, #32]	; (800c6dc <OnRadioTxDone+0x74>)
 800c6bc:	2201      	movs	r2, #1
 800c6be:	2100      	movs	r1, #0
 800c6c0:	2002      	movs	r0, #2
 800c6c2:	f00d f9ab 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd90      	pop	{r4, r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20001764 	.word	0x20001764
 800c6d4:	20000454 	.word	0x20000454
 800c6d8:	20000ca8 	.word	0x20000ca8
 800c6dc:	0801a668 	.word	0x0801a668

0800c6e0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	4608      	mov	r0, r1
 800c6ea:	4611      	mov	r1, r2
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	817b      	strh	r3, [r7, #10]
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	813b      	strh	r3, [r7, #8]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800c6fa:	f00d f89f 	bl	801983c <UTIL_TIMER_GetCurrentTime>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4a16      	ldr	r2, [pc, #88]	; (800c75c <OnRadioRxDone+0x7c>)
 800c702:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800c704:	4a15      	ldr	r2, [pc, #84]	; (800c75c <OnRadioRxDone+0x7c>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800c70a:	4a14      	ldr	r2, [pc, #80]	; (800c75c <OnRadioRxDone+0x7c>)
 800c70c:	897b      	ldrh	r3, [r7, #10]
 800c70e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800c710:	4a12      	ldr	r2, [pc, #72]	; (800c75c <OnRadioRxDone+0x7c>)
 800c712:	893b      	ldrh	r3, [r7, #8]
 800c714:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800c716:	4a11      	ldr	r2, [pc, #68]	; (800c75c <OnRadioRxDone+0x7c>)
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800c71c:	4a10      	ldr	r2, [pc, #64]	; (800c760 <OnRadioRxDone+0x80>)
 800c71e:	7813      	ldrb	r3, [r2, #0]
 800c720:	f043 0308 	orr.w	r3, r3, #8
 800c724:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c726:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <OnRadioRxDone+0x84>)
 800c728:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <OnRadioRxDone+0x66>
 800c730:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <OnRadioRxDone+0x84>)
 800c732:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c73c:	4b09      	ldr	r3, [pc, #36]	; (800c764 <OnRadioRxDone+0x84>)
 800c73e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800c746:	4b08      	ldr	r3, [pc, #32]	; (800c768 <OnRadioRxDone+0x88>)
 800c748:	2201      	movs	r2, #1
 800c74a:	2100      	movs	r1, #0
 800c74c:	2002      	movs	r0, #2
 800c74e:	f00d f965 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 800c752:	bf00      	nop
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	20001768 	.word	0x20001768
 800c760:	20000ca8 	.word	0x20000ca8
 800c764:	20000454 	.word	0x20000454
 800c768:	0801a678 	.word	0x0801a678

0800c76c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800c770:	4a0e      	ldr	r2, [pc, #56]	; (800c7ac <OnRadioTxTimeout+0x40>)
 800c772:	7813      	ldrb	r3, [r2, #0]
 800c774:	f043 0304 	orr.w	r3, r3, #4
 800c778:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c77a:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <OnRadioTxTimeout+0x44>)
 800c77c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00a      	beq.n	800c79a <OnRadioTxTimeout+0x2e>
 800c784:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <OnRadioTxTimeout+0x44>)
 800c786:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d004      	beq.n	800c79a <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c790:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <OnRadioTxTimeout+0x44>)
 800c792:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800c79a:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <OnRadioTxTimeout+0x48>)
 800c79c:	2201      	movs	r2, #1
 800c79e:	2100      	movs	r1, #0
 800c7a0:	2002      	movs	r0, #2
 800c7a2:	f00d f93b 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 800c7a6:	bf00      	nop
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000ca8 	.word	0x20000ca8
 800c7b0:	20000454 	.word	0x20000454
 800c7b4:	0801a688 	.word	0x0801a688

0800c7b8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800c7bc:	4a0b      	ldr	r2, [pc, #44]	; (800c7ec <OnRadioRxError+0x34>)
 800c7be:	7813      	ldrb	r3, [r2, #0]
 800c7c0:	f043 0302 	orr.w	r3, r3, #2
 800c7c4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c7c6:	4b0a      	ldr	r3, [pc, #40]	; (800c7f0 <OnRadioRxError+0x38>)
 800c7c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00a      	beq.n	800c7e6 <OnRadioRxError+0x2e>
 800c7d0:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <OnRadioRxError+0x38>)
 800c7d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d004      	beq.n	800c7e6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c7dc:	4b04      	ldr	r3, [pc, #16]	; (800c7f0 <OnRadioRxError+0x38>)
 800c7de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	4798      	blx	r3
    }
}
 800c7e6:	bf00      	nop
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000ca8 	.word	0x20000ca8
 800c7f0:	20000454 	.word	0x20000454

0800c7f4 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800c7f8:	4a0e      	ldr	r2, [pc, #56]	; (800c834 <OnRadioRxTimeout+0x40>)
 800c7fa:	7813      	ldrb	r3, [r2, #0]
 800c7fc:	f043 0301 	orr.w	r3, r3, #1
 800c800:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c802:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <OnRadioRxTimeout+0x44>)
 800c804:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <OnRadioRxTimeout+0x2e>
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <OnRadioRxTimeout+0x44>)
 800c80e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c818:	4b07      	ldr	r3, [pc, #28]	; (800c838 <OnRadioRxTimeout+0x44>)
 800c81a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800c822:	4b06      	ldr	r3, [pc, #24]	; (800c83c <OnRadioRxTimeout+0x48>)
 800c824:	2201      	movs	r2, #1
 800c826:	2100      	movs	r1, #0
 800c828:	2002      	movs	r0, #2
 800c82a:	f00d f8f7 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 800c82e:	bf00      	nop
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	20000ca8 	.word	0x20000ca8
 800c838:	20000454 	.word	0x20000454
 800c83c:	0801a698 	.word	0x0801a698

0800c840 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800c840:	b480      	push	{r7}
 800c842:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c844:	4b08      	ldr	r3, [pc, #32]	; (800c868 <UpdateRxSlotIdleState+0x28>)
 800c846:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d004      	beq.n	800c858 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800c84e:	4b07      	ldr	r3, [pc, #28]	; (800c86c <UpdateRxSlotIdleState+0x2c>)
 800c850:	2206      	movs	r2, #6
 800c852:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800c856:	e003      	b.n	800c860 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c858:	4b04      	ldr	r3, [pc, #16]	; (800c86c <UpdateRxSlotIdleState+0x2c>)
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800c860:	bf00      	nop
 800c862:	46bd      	mov	sp, r7
 800c864:	bc80      	pop	{r7}
 800c866:	4770      	bx	lr
 800c868:	2000095c 	.word	0x2000095c
 800c86c:	20000454 	.word	0x20000454

0800c870 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08e      	sub	sp, #56	; 0x38
 800c874:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c876:	4b44      	ldr	r3, [pc, #272]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c878:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d002      	beq.n	800c886 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800c880:	4b42      	ldr	r3, [pc, #264]	; (800c98c <ProcessRadioTxDone+0x11c>)
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800c886:	4b42      	ldr	r3, [pc, #264]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c888:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800c88c:	4619      	mov	r1, r3
 800c88e:	4841      	ldr	r0, [pc, #260]	; (800c994 <ProcessRadioTxDone+0x124>)
 800c890:	f00c ff2a 	bl	80196e8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c894:	483f      	ldr	r0, [pc, #252]	; (800c994 <ProcessRadioTxDone+0x124>)
 800c896:	f00c fe49 	bl	801952c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800c89a:	4b3d      	ldr	r3, [pc, #244]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c89c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	483d      	ldr	r0, [pc, #244]	; (800c998 <ProcessRadioTxDone+0x128>)
 800c8a4:	f00c ff20 	bl	80196e8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c8a8:	483b      	ldr	r0, [pc, #236]	; (800c998 <ProcessRadioTxDone+0x128>)
 800c8aa:	f00c fe3f 	bl	801952c <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800c8ae:	4b36      	ldr	r3, [pc, #216]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c8b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d004      	beq.n	800c8c2 <ProcessRadioTxDone+0x52>
 800c8b8:	4b35      	ldr	r3, [pc, #212]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c8ba:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d019      	beq.n	800c8f6 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800c8c2:	2316      	movs	r3, #22
 800c8c4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c8c8:	4b2f      	ldr	r3, [pc, #188]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c8ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8ce:	f107 0220 	add.w	r2, r7, #32
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f006 fb55 	bl	8012f84 <RegionGetPhyParam>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c8de:	4b2c      	ldr	r3, [pc, #176]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c8e0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	482c      	ldr	r0, [pc, #176]	; (800c99c <ProcessRadioTxDone+0x12c>)
 800c8ec:	f00c fefc 	bl	80196e8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800c8f0:	482a      	ldr	r0, [pc, #168]	; (800c99c <ProcessRadioTxDone+0x12c>)
 800c8f2:	f00c fe1b 	bl	801952c <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c8f6:	4b2a      	ldr	r3, [pc, #168]	; (800c9a0 <ProcessRadioTxDone+0x130>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a23      	ldr	r2, [pc, #140]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c8fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800c8fe:	4b24      	ldr	r3, [pc, #144]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c900:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800c904:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c906:	4b26      	ldr	r3, [pc, #152]	; (800c9a0 <ProcessRadioTxDone+0x130>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c90c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c910:	4618      	mov	r0, r3
 800c912:	f00c f95d 	bl	8018bd0 <SysTimeGetMcuTime>
 800c916:	4638      	mov	r0, r7
 800c918:	4b1b      	ldr	r3, [pc, #108]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c91a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800c91e:	9200      	str	r2, [sp, #0]
 800c920:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c924:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c928:	ca06      	ldmia	r2, {r1, r2}
 800c92a:	f00c f8b2 	bl	8018a92 <SysTimeSub>
 800c92e:	f107 0314 	add.w	r3, r7, #20
 800c932:	463a      	mov	r2, r7
 800c934:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c938:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c93c:	4b14      	ldr	r3, [pc, #80]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c93e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800c942:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800c944:	2301      	movs	r3, #1
 800c946:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c948:	4b0f      	ldr	r3, [pc, #60]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c94a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800c952:	2300      	movs	r3, #0
 800c954:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c956:	4b0c      	ldr	r3, [pc, #48]	; (800c988 <ProcessRadioTxDone+0x118>)
 800c958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c95c:	f107 0208 	add.w	r2, r7, #8
 800c960:	4611      	mov	r1, r2
 800c962:	4618      	mov	r0, r3
 800c964:	f006 fb27 	bl	8012fb6 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800c968:	4b09      	ldr	r3, [pc, #36]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c96a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c96e:	f083 0301 	eor.w	r3, r3, #1
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c978:	4b05      	ldr	r3, [pc, #20]	; (800c990 <ProcessRadioTxDone+0x120>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800c980:	bf00      	nop
 800c982:	3730      	adds	r7, #48	; 0x30
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	2000095c 	.word	0x2000095c
 800c98c:	0801acfc 	.word	0x0801acfc
 800c990:	20000454 	.word	0x20000454
 800c994:	200007d4 	.word	0x200007d4
 800c998:	200007ec 	.word	0x200007ec
 800c99c:	2000084c 	.word	0x2000084c
 800c9a0:	20001764 	.word	0x20001764

0800c9a4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800c9a8:	4b10      	ldr	r3, [pc, #64]	; (800c9ec <PrepareRxDoneAbort+0x48>)
 800c9aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9b2:	4a0e      	ldr	r2, [pc, #56]	; (800c9ec <PrepareRxDoneAbort+0x48>)
 800c9b4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <PrepareRxDoneAbort+0x48>)
 800c9ba:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	f001 f8f8 	bl	800dbb8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800c9c8:	4a08      	ldr	r2, [pc, #32]	; (800c9ec <PrepareRxDoneAbort+0x48>)
 800c9ca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c9ce:	f043 0302 	orr.w	r3, r3, #2
 800c9d2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c9d6:	4a05      	ldr	r2, [pc, #20]	; (800c9ec <PrepareRxDoneAbort+0x48>)
 800c9d8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800c9dc:	f043 0320 	orr.w	r3, r3, #32
 800c9e0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800c9e4:	f7ff ff2c 	bl	800c840 <UpdateRxSlotIdleState>
}
 800c9e8:	bf00      	nop
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	20000454 	.word	0x20000454

0800c9f0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800c9f0:	b5b0      	push	{r4, r5, r7, lr}
 800c9f2:	b0a6      	sub	sp, #152	; 0x98
 800c9f4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800c9f6:	2313      	movs	r3, #19
 800c9f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800c9fc:	4bb9      	ldr	r3, [pc, #740]	; (800cce4 <ProcessRadioRxDone+0x2f4>)
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800ca02:	4bb8      	ldr	r3, [pc, #736]	; (800cce4 <ProcessRadioRxDone+0x2f4>)
 800ca04:	891b      	ldrh	r3, [r3, #8]
 800ca06:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800ca0a:	4bb6      	ldr	r3, [pc, #728]	; (800cce4 <ProcessRadioRxDone+0x2f4>)
 800ca0c:	895b      	ldrh	r3, [r3, #10]
 800ca0e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800ca12:	4bb4      	ldr	r3, [pc, #720]	; (800cce4 <ProcessRadioRxDone+0x2f4>)
 800ca14:	7b1b      	ldrb	r3, [r3, #12]
 800ca16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ca24:	4bb0      	ldr	r3, [pc, #704]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800ca26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ca2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800ca3a:	4bac      	ldr	r3, [pc, #688]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800ca42:	4aaa      	ldr	r2, [pc, #680]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ca48:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800ca4c:	4aa7      	ldr	r2, [pc, #668]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800ca52:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800ca56:	4ba5      	ldr	r3, [pc, #660]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca58:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800ca5c:	4ba3      	ldr	r3, [pc, #652]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca5e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800ca62:	4ba2      	ldr	r3, [pc, #648]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800ca6a:	4ba0      	ldr	r3, [pc, #640]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800ca72:	4b9e      	ldr	r3, [pc, #632]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800ca7a:	4b9c      	ldr	r3, [pc, #624]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800ca82:	4b9a      	ldr	r3, [pc, #616]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800ca8a:	4b98      	ldr	r3, [pc, #608]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800ca92:	4b96      	ldr	r3, [pc, #600]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ca9a:	4b94      	ldr	r3, [pc, #592]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800caa2:	4b92      	ldr	r3, [pc, #584]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800caaa:	4b90      	ldr	r3, [pc, #576]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800caac:	2200      	movs	r2, #0
 800caae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800cab2:	4b8e      	ldr	r3, [pc, #568]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800caba:	4b8d      	ldr	r3, [pc, #564]	; (800ccf0 <ProcessRadioRxDone+0x300>)
 800cabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabe:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800cac0:	488c      	ldr	r0, [pc, #560]	; (800ccf4 <ProcessRadioRxDone+0x304>)
 800cac2:	f00c fda1 	bl	8019608 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800cac6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800caca:	4619      	mov	r1, r3
 800cacc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cace:	f004 fb28 	bl	8011122 <LoRaMacClassBRxBeacon>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00a      	beq.n	800caee <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800cad8:	4a84      	ldr	r2, [pc, #528]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cada:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cade:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800cae2:	4a82      	ldr	r2, [pc, #520]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cae4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cae8:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800caec:	e3bf      	b.n	800d26e <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800caee:	4b7e      	ldr	r3, [pc, #504]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800caf0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d11e      	bne.n	800cb36 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800caf8:	f004 fb26 	bl	8011148 <LoRaMacClassBIsPingExpected>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00a      	beq.n	800cb18 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cb02:	2000      	movs	r0, #0
 800cb04:	f004 fad7 	bl	80110b6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f004 faf8 	bl	80110fe <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800cb0e:	4b77      	ldr	r3, [pc, #476]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cb10:	2204      	movs	r2, #4
 800cb12:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800cb16:	e00e      	b.n	800cb36 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800cb18:	f004 fb1d 	bl	8011156 <LoRaMacClassBIsMulticastExpected>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d009      	beq.n	800cb36 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cb22:	2000      	movs	r0, #0
 800cb24:	f004 fad1 	bl	80110ca <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cb28:	2000      	movs	r0, #0
 800cb2a:	f004 faf1 	bl	8011110 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800cb2e:	4b6f      	ldr	r3, [pc, #444]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cb30:	2205      	movs	r2, #5
 800cb32:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800cb36:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800cb40:	461a      	mov	r2, r3
 800cb42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb44:	4413      	add	r3, r2
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800cb4c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800cb50:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	3b01      	subs	r3, #1
 800cb58:	2b06      	cmp	r3, #6
 800cb5a:	f200 8362 	bhi.w	800d222 <ProcessRadioRxDone+0x832>
 800cb5e:	a201      	add	r2, pc, #4	; (adr r2, 800cb64 <ProcessRadioRxDone+0x174>)
 800cb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb64:	0800cb81 	.word	0x0800cb81
 800cb68:	0800d223 	.word	0x0800d223
 800cb6c:	0800cd01 	.word	0x0800cd01
 800cb70:	0800d223 	.word	0x0800d223
 800cb74:	0800ccf9 	.word	0x0800ccf9
 800cb78:	0800d223 	.word	0x0800d223
 800cb7c:	0800d1c9 	.word	0x0800d1c9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800cb80:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cb84:	2b10      	cmp	r3, #16
 800cb86:	d806      	bhi.n	800cb96 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb88:	4b58      	ldr	r3, [pc, #352]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cb90:	f7ff ff08 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cb94:	e36b      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800cb96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cb98:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800cb9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cba2:	4b51      	ldr	r3, [pc, #324]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cba4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d006      	beq.n	800cbba <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cbac:	4b4f      	ldr	r3, [pc, #316]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cbb4:	f7ff fef6 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cbb8:	e359      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800cbba:	f7fe fbcf 	bl	800b35c <SecureElementGetJoinEui>
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	f107 0308 	add.w	r3, r7, #8
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	20ff      	movs	r0, #255	; 0xff
 800cbc8:	f005 fc60 	bl	801248c <LoRaMacCryptoHandleJoinAccept>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800cbd2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d172      	bne.n	800ccc0 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800cbda:	7c7b      	ldrb	r3, [r7, #17]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	4b42      	ldr	r3, [pc, #264]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cbe0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800cbe4:	4b40      	ldr	r3, [pc, #256]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cbe6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cbea:	7cbb      	ldrb	r3, [r7, #18]
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	4a3d      	ldr	r2, [pc, #244]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cbf2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800cbf6:	4b3c      	ldr	r3, [pc, #240]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cbf8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cbfc:	7cfb      	ldrb	r3, [r7, #19]
 800cbfe:	041b      	lsls	r3, r3, #16
 800cc00:	4313      	orrs	r3, r2
 800cc02:	4a39      	ldr	r2, [pc, #228]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc04:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	4a37      	ldr	r2, [pc, #220]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc0c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cc10:	7e3b      	ldrb	r3, [r7, #24]
 800cc12:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	461a      	mov	r2, r3
 800cc1a:	4b33      	ldr	r3, [pc, #204]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cc20:	7e3b      	ldrb	r3, [r7, #24]
 800cc22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	461a      	mov	r2, r3
 800cc2a:	4b2f      	ldr	r3, [pc, #188]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc2c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cc30:	7e3b      	ldrb	r3, [r7, #24]
 800cc32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4b2b      	ldr	r3, [pc, #172]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800cc40:	7e7b      	ldrb	r3, [r7, #25]
 800cc42:	461a      	mov	r2, r3
 800cc44:	4b28      	ldr	r3, [pc, #160]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc46:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cc48:	4b27      	ldr	r3, [pc, #156]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cc50:	4b25      	ldr	r3, [pc, #148]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc52:	2201      	movs	r2, #1
 800cc54:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cc56:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc5e:	fb02 f303 	mul.w	r3, r2, r3
 800cc62:	4a21      	ldr	r2, [pc, #132]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc64:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cc66:	4b20      	ldr	r3, [pc, #128]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc6a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800cc6e:	4a1e      	ldr	r2, [pc, #120]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc70:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800cc72:	4b1d      	ldr	r3, [pc, #116]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	3312      	adds	r3, #18
 800cc80:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800cc82:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	3b11      	subs	r3, #17
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800cc90:	4b15      	ldr	r3, [pc, #84]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cc92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc96:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f006 f9c4 	bl	801302a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cca2:	4b11      	ldr	r3, [pc, #68]	; (800cce8 <ProcessRadioRxDone+0x2f8>)
 800cca4:	2202      	movs	r2, #2
 800cca6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ccaa:	2001      	movs	r0, #1
 800ccac:	f004 ff18 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00e      	beq.n	800ccd4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ccb6:	2101      	movs	r1, #1
 800ccb8:	2000      	movs	r0, #0
 800ccba:	f004 fe85 	bl	80119c8 <LoRaMacConfirmQueueSetStatus>
 800ccbe:	e009      	b.n	800ccd4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ccc0:	2001      	movs	r0, #1
 800ccc2:	f004 ff0d 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800cccc:	2101      	movs	r1, #1
 800ccce:	2007      	movs	r0, #7
 800ccd0:	f004 fe7a 	bl	80119c8 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ccd4:	4a05      	ldr	r2, [pc, #20]	; (800ccec <ProcessRadioRxDone+0x2fc>)
 800ccd6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ccda:	f043 0308 	orr.w	r3, r3, #8
 800ccde:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800cce2:	e2a5      	b.n	800d230 <ProcessRadioRxDone+0x840>
 800cce4:	20001768 	.word	0x20001768
 800cce8:	2000095c 	.word	0x2000095c
 800ccec:	20000454 	.word	0x20000454
 800ccf0:	0801acfc 	.word	0x0801acfc
 800ccf4:	200007ec 	.word	0x200007ec
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ccf8:	4bae      	ldr	r3, [pc, #696]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd00:	4bad      	ldr	r3, [pc, #692]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cd02:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800cd06:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800cd0a:	4baa      	ldr	r3, [pc, #680]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cd0c:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800cd10:	b25b      	sxtb	r3, r3
 800cd12:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800cd16:	230d      	movs	r3, #13
 800cd18:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800cd1c:	4ba6      	ldr	r3, [pc, #664]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cd1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d002      	beq.n	800cd2c <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cd26:	230e      	movs	r3, #14
 800cd28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cd2c:	4ba2      	ldr	r3, [pc, #648]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cd2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd32:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cd36:	4611      	mov	r1, r2
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f006 f923 	bl	8012f84 <RegionGetPhyParam>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800cd42:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd46:	3b0d      	subs	r3, #13
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	b21b      	sxth	r3, r3
 800cd4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd50:	b21a      	sxth	r2, r3
 800cd52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd54:	b21b      	sxth	r3, r3
 800cd56:	429a      	cmp	r2, r3
 800cd58:	dc03      	bgt.n	800cd62 <ProcessRadioRxDone+0x372>
 800cd5a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd5e:	2b0b      	cmp	r3, #11
 800cd60:	d806      	bhi.n	800cd70 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd62:	4b94      	ldr	r3, [pc, #592]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cd6a:	f7ff fe1b 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cd6e:	e27e      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800cd70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd72:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800cd74:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800cd7e:	4b8f      	ldr	r3, [pc, #572]	; (800cfbc <ProcessRadioRxDone+0x5cc>)
 800cd80:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800cd82:	23ff      	movs	r3, #255	; 0xff
 800cd84:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800cd88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f005 fe7c 	bl	8012a8a <LoRaMacParserData>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd98:	4b86      	ldr	r3, [pc, #536]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cda0:	f7ff fe00 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cda4:	e263      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	4a82      	ldr	r2, [pc, #520]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cdaa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800cdae:	1cba      	adds	r2, r7, #2
 800cdb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f002 fcde 	bl	800f778 <DetermineFrameType>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d006      	beq.n	800cdd0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cdc2:	4b7c      	ldr	r3, [pc, #496]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800cdca:	f7ff fdeb 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cdce:	e24e      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cdda:	2300      	movs	r3, #0
 800cddc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800cde0:	e049      	b.n	800ce76 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cde2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800cde6:	4a74      	ldr	r2, [pc, #464]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cde8:	212c      	movs	r1, #44	; 0x2c
 800cdea:	fb01 f303 	mul.w	r3, r1, r3
 800cdee:	4413      	add	r3, r2
 800cdf0:	33d4      	adds	r3, #212	; 0xd4
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d138      	bne.n	800ce6c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800cdfa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800cdfe:	4a6e      	ldr	r2, [pc, #440]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800ce00:	212c      	movs	r1, #44	; 0x2c
 800ce02:	fb01 f303 	mul.w	r3, r1, r3
 800ce06:	4413      	add	r3, r2
 800ce08:	33d2      	adds	r3, #210	; 0xd2
 800ce0a:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d02d      	beq.n	800ce6c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800ce10:	2301      	movs	r3, #1
 800ce12:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ce16:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce1a:	4a67      	ldr	r2, [pc, #412]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800ce1c:	212c      	movs	r1, #44	; 0x2c
 800ce1e:	fb01 f303 	mul.w	r3, r1, r3
 800ce22:	4413      	add	r3, r2
 800ce24:	33d3      	adds	r3, #211	; 0xd3
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ce2c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce30:	4a61      	ldr	r2, [pc, #388]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800ce32:	212c      	movs	r1, #44	; 0x2c
 800ce34:	fb01 f303 	mul.w	r3, r1, r3
 800ce38:	4413      	add	r3, r2
 800ce3a:	33f0      	adds	r3, #240	; 0xf0
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ce42:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce46:	4a5c      	ldr	r2, [pc, #368]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800ce48:	212c      	movs	r1, #44	; 0x2c
 800ce4a:	fb01 f303 	mul.w	r3, r1, r3
 800ce4e:	4413      	add	r3, r2
 800ce50:	33d4      	adds	r3, #212	; 0xd4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ce58:	4b57      	ldr	r3, [pc, #348]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800ce5a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d10e      	bne.n	800ce80 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ce62:	4b54      	ldr	r3, [pc, #336]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800ce64:	2203      	movs	r2, #3
 800ce66:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800ce6a:	e009      	b.n	800ce80 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce6c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce70:	3301      	adds	r3, #1
 800ce72:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800ce76:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0b1      	beq.n	800cde2 <ProcessRadioRxDone+0x3f2>
 800ce7e:	e000      	b.n	800ce82 <ProcessRadioRxDone+0x492>
                    break;
 800ce80:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ce82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d117      	bne.n	800ceba <ProcessRadioRxDone+0x4ca>
 800ce8a:	78bb      	ldrb	r3, [r7, #2]
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	d10d      	bne.n	800ceac <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ce90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce94:	f003 0320 	and.w	r3, r3, #32
 800ce98:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ce9e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d006      	beq.n	800ceba <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ceac:	4b41      	ldr	r3, [pc, #260]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800ceb4:	f7ff fd76 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800ceb8:	e1d9      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ceba:	2315      	movs	r3, #21
 800cebc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cec0:	4b3d      	ldr	r3, [pc, #244]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cec6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ceca:	4611      	mov	r1, r2
 800cecc:	4618      	mov	r0, r3
 800cece:	f006 f859 	bl	8012f84 <RegionGetPhyParam>
 800ced2:	4603      	mov	r3, r0
 800ced4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ced6:	78b9      	ldrb	r1, [r7, #2]
 800ced8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	4d36      	ldr	r5, [pc, #216]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cede:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800cee2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800cee6:	1d3a      	adds	r2, r7, #4
 800cee8:	9202      	str	r2, [sp, #8]
 800ceea:	1cfa      	adds	r2, r7, #3
 800ceec:	9201      	str	r2, [sp, #4]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800cef4:	4622      	mov	r2, r4
 800cef6:	f000 fe95 	bl	800dc24 <GetFCntDown>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cf00:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d031      	beq.n	800cf6c <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800cf08:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf0c:	2b07      	cmp	r3, #7
 800cf0e:	d119      	bne.n	800cf44 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800cf10:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cf12:	2208      	movs	r2, #8
 800cf14:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800cf18:	4b27      	ldr	r3, [pc, #156]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cf1a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d11d      	bne.n	800cf5e <ProcessRadioRxDone+0x56e>
 800cf22:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800cf26:	f023 031f 	bic.w	r3, r3, #31
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2ba0      	cmp	r3, #160	; 0xa0
 800cf2e:	d116      	bne.n	800cf5e <ProcessRadioRxDone+0x56e>
 800cf30:	4b21      	ldr	r3, [pc, #132]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cf32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d111      	bne.n	800cf5e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800cf3a:	4b1f      	ldr	r3, [pc, #124]	; (800cfb8 <ProcessRadioRxDone+0x5c8>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800cf42:	e00c      	b.n	800cf5e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800cf44:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf48:	2b08      	cmp	r3, #8
 800cf4a:	d104      	bne.n	800cf56 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800cf4c:	4b19      	ldr	r3, [pc, #100]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cf4e:	220a      	movs	r2, #10
 800cf50:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800cf54:	e003      	b.n	800cf5e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf56:	4b17      	ldr	r3, [pc, #92]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a14      	ldr	r2, [pc, #80]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cf62:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800cf66:	f7ff fd1d 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cf6a:	e180      	b.n	800d26e <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800cf6c:	78fa      	ldrb	r2, [r7, #3]
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800cf74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cf80:	f005 fbd0 	bl	8012724 <LoRaMacCryptoUnsecureMessage>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cf8a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d016      	beq.n	800cfc0 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800cf92:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d104      	bne.n	800cfa4 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800cf9a:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cf9c:	220b      	movs	r2, #11
 800cf9e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800cfa2:	e003      	b.n	800cfac <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800cfa4:	4b03      	ldr	r3, [pc, #12]	; (800cfb4 <ProcessRadioRxDone+0x5c4>)
 800cfa6:	220c      	movs	r2, #12
 800cfa8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800cfac:	f7ff fcfa 	bl	800c9a4 <PrepareRxDoneAbort>
                return;
 800cfb0:	e15d      	b.n	800d26e <ProcessRadioRxDone+0x87e>
 800cfb2:	bf00      	nop
 800cfb4:	20000454 	.word	0x20000454
 800cfb8:	2000095c 	.word	0x2000095c
 800cfbc:	2000068c 	.word	0x2000068c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cfc0:	4bac      	ldr	r3, [pc, #688]	; (800d274 <ProcessRadioRxDone+0x884>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800cfc8:	4aaa      	ldr	r2, [pc, #680]	; (800d274 <ProcessRadioRxDone+0x884>)
 800cfca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800cfce:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800cfd2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cfd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	461a      	mov	r2, r3
 800cfde:	4ba5      	ldr	r3, [pc, #660]	; (800d274 <ProcessRadioRxDone+0x884>)
 800cfe0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800cfe4:	4ba3      	ldr	r3, [pc, #652]	; (800d274 <ProcessRadioRxDone+0x884>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800cfec:	4ba1      	ldr	r3, [pc, #644]	; (800d274 <ProcessRadioRxDone+0x884>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a9f      	ldr	r2, [pc, #636]	; (800d274 <ProcessRadioRxDone+0x884>)
 800cff8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cffc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d000:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	bf14      	ite	ne
 800d00a:	2301      	movne	r3, #1
 800d00c:	2300      	moveq	r3, #0
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	4b98      	ldr	r3, [pc, #608]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d012:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d016:	4b97      	ldr	r3, [pc, #604]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d018:	2200      	movs	r2, #0
 800d01a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d01e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d022:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bf14      	ite	ne
 800d02c:	2301      	movne	r3, #1
 800d02e:	2300      	moveq	r3, #0
 800d030:	b2da      	uxtb	r2, r3
 800d032:	4b90      	ldr	r3, [pc, #576]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d034:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d038:	4b8e      	ldr	r3, [pc, #568]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d03a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d004      	beq.n	800d04c <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d042:	4b8c      	ldr	r3, [pc, #560]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d044:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d102      	bne.n	800d052 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d04c:	4b8a      	ldr	r3, [pc, #552]	; (800d278 <ProcessRadioRxDone+0x888>)
 800d04e:	2200      	movs	r2, #0
 800d050:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d052:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d056:	2b01      	cmp	r3, #1
 800d058:	d104      	bne.n	800d064 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d05a:	4b86      	ldr	r3, [pc, #536]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d05c:	2202      	movs	r2, #2
 800d05e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d062:	e01f      	b.n	800d0a4 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d064:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d068:	f023 031f 	bic.w	r3, r3, #31
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2ba0      	cmp	r3, #160	; 0xa0
 800d070:	d110      	bne.n	800d094 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d072:	4b81      	ldr	r3, [pc, #516]	; (800d278 <ProcessRadioRxDone+0x888>)
 800d074:	2201      	movs	r2, #1
 800d076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d07a:	4b7f      	ldr	r3, [pc, #508]	; (800d278 <ProcessRadioRxDone+0x888>)
 800d07c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800d080:	2b00      	cmp	r3, #0
 800d082:	d102      	bne.n	800d08a <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d086:	4a7c      	ldr	r2, [pc, #496]	; (800d278 <ProcessRadioRxDone+0x888>)
 800d088:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d08a:	4b7a      	ldr	r3, [pc, #488]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d08c:	2201      	movs	r2, #1
 800d08e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800d092:	e007      	b.n	800d0a4 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d094:	4b78      	ldr	r3, [pc, #480]	; (800d278 <ProcessRadioRxDone+0x888>)
 800d096:	2200      	movs	r2, #0
 800d098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d09c:	4b75      	ldr	r3, [pc, #468]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d0a4:	4b73      	ldr	r3, [pc, #460]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d0a6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d0aa:	4a72      	ldr	r2, [pc, #456]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d0ac:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800d0b0:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f001 ff0d 	bl	800eed4 <RemoveMacCommands>

            switch( fType )
 800d0ba:	78bb      	ldrb	r3, [r7, #2]
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d874      	bhi.n	800d1aa <ProcessRadioRxDone+0x7ba>
 800d0c0:	a201      	add	r2, pc, #4	; (adr r2, 800d0c8 <ProcessRadioRxDone+0x6d8>)
 800d0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c6:	bf00      	nop
 800d0c8:	0800d0d9 	.word	0x0800d0d9
 800d0cc:	0800d129 	.word	0x0800d129
 800d0d0:	0800d15f 	.word	0x0800d15f
 800d0d4:	0800d185 	.word	0x0800d185
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d0d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d0dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	461c      	mov	r4, r3
 800d0e4:	4b63      	ldr	r3, [pc, #396]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d0e6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d0ea:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d0ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d0f2:	f102 0010 	add.w	r0, r2, #16
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	f000 ff03 	bl	800df08 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d102:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d106:	4b5b      	ldr	r3, [pc, #364]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d108:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d10c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d10e:	4a59      	ldr	r2, [pc, #356]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d110:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d114:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d118:	4b56      	ldr	r3, [pc, #344]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d11a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d11e:	4b55      	ldr	r3, [pc, #340]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d126:	e047      	b.n	800d1b8 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d128:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d12c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d130:	b2db      	uxtb	r3, r3
 800d132:	461c      	mov	r4, r3
 800d134:	4b4f      	ldr	r3, [pc, #316]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d136:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d13a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d13e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d142:	f102 0010 	add.w	r0, r2, #16
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	460b      	mov	r3, r1
 800d14a:	4622      	mov	r2, r4
 800d14c:	2100      	movs	r1, #0
 800d14e:	f000 fedb 	bl	800df08 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d152:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d156:	4b47      	ldr	r3, [pc, #284]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d158:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d15c:	e02c      	b.n	800d1b8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d15e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d160:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d164:	4b43      	ldr	r3, [pc, #268]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d166:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800d16a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	460b      	mov	r3, r1
 800d172:	2100      	movs	r1, #0
 800d174:	f000 fec8 	bl	800df08 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d178:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d17c:	4b3d      	ldr	r3, [pc, #244]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d17e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800d182:	e019      	b.n	800d1b8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d184:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d188:	4b3a      	ldr	r3, [pc, #232]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d18a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d190:	4a38      	ldr	r2, [pc, #224]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d192:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d196:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800d19a:	4b36      	ldr	r3, [pc, #216]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d19c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800d1a0:	4b34      	ldr	r3, [pc, #208]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800d1a8:	e006      	b.n	800d1b8 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1aa:	4b32      	ldr	r3, [pc, #200]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800d1b2:	f7ff fbf7 	bl	800c9a4 <PrepareRxDoneAbort>
                    break;
 800d1b6:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d1b8:	4a2e      	ldr	r2, [pc, #184]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d1ba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d1be:	f043 0302 	orr.w	r3, r3, #2
 800d1c2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800d1c6:	e033      	b.n	800d230 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d1c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d1cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d1ce:	18d1      	adds	r1, r2, r3
 800d1d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	461a      	mov	r2, r3
 800d1e0:	4826      	ldr	r0, [pc, #152]	; (800d27c <ProcessRadioRxDone+0x88c>)
 800d1e2:	f008 f9da 	bl	801559a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d1e6:	4b23      	ldr	r3, [pc, #140]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d1e8:	2203      	movs	r2, #3
 800d1ea:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d1ee:	4b21      	ldr	r3, [pc, #132]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d1f6:	4b1f      	ldr	r3, [pc, #124]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d1f8:	4a20      	ldr	r2, [pc, #128]	; (800d27c <ProcessRadioRxDone+0x88c>)
 800d1fa:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d1fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d202:	b2da      	uxtb	r2, r3
 800d204:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	4b19      	ldr	r3, [pc, #100]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d20e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d212:	4a18      	ldr	r2, [pc, #96]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d214:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d218:	f043 0302 	orr.w	r3, r3, #2
 800d21c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800d220:	e006      	b.n	800d230 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d222:	4b14      	ldr	r3, [pc, #80]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d224:	2201      	movs	r2, #1
 800d226:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800d22a:	f7ff fbbb 	bl	800c9a4 <PrepareRxDoneAbort>
            break;
 800d22e:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d230:	4b10      	ldr	r3, [pc, #64]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d232:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d236:	2b00      	cmp	r3, #0
 800d238:	d008      	beq.n	800d24c <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d23a:	4b0e      	ldr	r3, [pc, #56]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d23c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00b      	beq.n	800d25c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d244:	2000      	movs	r0, #0
 800d246:	f000 fcb7 	bl	800dbb8 <OnAckTimeoutTimerEvent>
 800d24a:	e007      	b.n	800d25c <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d24c:	4b0a      	ldr	r3, [pc, #40]	; (800d278 <ProcessRadioRxDone+0x888>)
 800d24e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d252:	2b02      	cmp	r3, #2
 800d254:	d102      	bne.n	800d25c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d256:	2000      	movs	r0, #0
 800d258:	f000 fcae 	bl	800dbb8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d25c:	4a05      	ldr	r2, [pc, #20]	; (800d274 <ProcessRadioRxDone+0x884>)
 800d25e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d262:	f043 0320 	orr.w	r3, r3, #32
 800d266:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d26a:	f7ff fae9 	bl	800c840 <UpdateRxSlotIdleState>
}
 800d26e:	3788      	adds	r7, #136	; 0x88
 800d270:	46bd      	mov	sp, r7
 800d272:	bdb0      	pop	{r4, r5, r7, pc}
 800d274:	20000454 	.word	0x20000454
 800d278:	2000095c 	.word	0x2000095c
 800d27c:	2000068c 	.word	0x2000068c

0800d280 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d284:	4b11      	ldr	r3, [pc, #68]	; (800d2cc <ProcessRadioTxTimeout+0x4c>)
 800d286:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d28a:	2b02      	cmp	r3, #2
 800d28c:	d002      	beq.n	800d294 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800d28e:	4b10      	ldr	r3, [pc, #64]	; (800d2d0 <ProcessRadioTxTimeout+0x50>)
 800d290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d292:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800d294:	f7ff fad4 	bl	800c840 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d298:	4b0e      	ldr	r3, [pc, #56]	; (800d2d4 <ProcessRadioTxTimeout+0x54>)
 800d29a:	2202      	movs	r2, #2
 800d29c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d2a0:	2002      	movs	r0, #2
 800d2a2:	f004 fbe9 	bl	8011a78 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d2a6:	4b0b      	ldr	r3, [pc, #44]	; (800d2d4 <ProcessRadioTxTimeout+0x54>)
 800d2a8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800d2b0:	4b08      	ldr	r3, [pc, #32]	; (800d2d4 <ProcessRadioTxTimeout+0x54>)
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d2b8:	4a06      	ldr	r2, [pc, #24]	; (800d2d4 <ProcessRadioTxTimeout+0x54>)
 800d2ba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d2be:	f043 0320 	orr.w	r3, r3, #32
 800d2c2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800d2c6:	bf00      	nop
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	2000095c 	.word	0x2000095c
 800d2d0:	0801acfc 	.word	0x0801acfc
 800d2d4:	20000454 	.word	0x20000454

0800d2d8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	4603      	mov	r3, r0
 800d2e0:	460a      	mov	r2, r1
 800d2e2:	71fb      	strb	r3, [r7, #7]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d2ec:	4b40      	ldr	r3, [pc, #256]	; (800d3f0 <HandleRadioRxErrorTimeout+0x118>)
 800d2ee:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d002      	beq.n	800d2fc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800d2f6:	4b3f      	ldr	r3, [pc, #252]	; (800d3f4 <HandleRadioRxErrorTimeout+0x11c>)
 800d2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fa:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d2fc:	f003 ff1d 	bl	801113a <LoRaMacClassBIsBeaconExpected>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d007      	beq.n	800d316 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d306:	2002      	movs	r0, #2
 800d308:	f003 fecb 	bl	80110a2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d30c:	2000      	movs	r0, #0
 800d30e:	f003 feed 	bl	80110ec <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d312:	2301      	movs	r3, #1
 800d314:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d316:	4b36      	ldr	r3, [pc, #216]	; (800d3f0 <HandleRadioRxErrorTimeout+0x118>)
 800d318:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d119      	bne.n	800d354 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d320:	f003 ff12 	bl	8011148 <LoRaMacClassBIsPingExpected>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d007      	beq.n	800d33a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d32a:	2000      	movs	r0, #0
 800d32c:	f003 fec3 	bl	80110b6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d330:	2000      	movs	r0, #0
 800d332:	f003 fee4 	bl	80110fe <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d336:	2301      	movs	r3, #1
 800d338:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d33a:	f003 ff0c 	bl	8011156 <LoRaMacClassBIsMulticastExpected>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d007      	beq.n	800d354 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d344:	2000      	movs	r0, #0
 800d346:	f003 fec0 	bl	80110ca <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d34a:	2000      	movs	r0, #0
 800d34c:	f003 fee0 	bl	8011110 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800d350:	2301      	movs	r3, #1
 800d352:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	f083 0301 	eor.w	r3, r3, #1
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d040      	beq.n	800d3e2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d360:	4b25      	ldr	r3, [pc, #148]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d362:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800d366:	2b00      	cmp	r3, #0
 800d368:	d122      	bne.n	800d3b0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800d36a:	4b23      	ldr	r3, [pc, #140]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d36c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d374:	4a20      	ldr	r2, [pc, #128]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	4618      	mov	r0, r3
 800d380:	f004 fb7a 	bl	8011a78 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d384:	4b1a      	ldr	r3, [pc, #104]	; (800d3f0 <HandleRadioRxErrorTimeout+0x118>)
 800d386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d388:	4618      	mov	r0, r3
 800d38a:	f00c fa69 	bl	8019860 <UTIL_TIMER_GetElapsedTime>
 800d38e:	4602      	mov	r2, r0
 800d390:	4b19      	ldr	r3, [pc, #100]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d392:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d396:	429a      	cmp	r2, r3
 800d398:	d323      	bcc.n	800d3e2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d39a:	4818      	ldr	r0, [pc, #96]	; (800d3fc <HandleRadioRxErrorTimeout+0x124>)
 800d39c:	f00c f934 	bl	8019608 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d3a0:	4a15      	ldr	r2, [pc, #84]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d3a2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d3a6:	f043 0320 	orr.w	r3, r3, #32
 800d3aa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800d3ae:	e018      	b.n	800d3e2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800d3b0:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d3b2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d003      	beq.n	800d3c2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d3ba:	4a0f      	ldr	r2, [pc, #60]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d3bc:	79bb      	ldrb	r3, [r7, #6]
 800d3be:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d3c2:	79bb      	ldrb	r3, [r7, #6]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f004 fb57 	bl	8011a78 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d3ca:	4b09      	ldr	r3, [pc, #36]	; (800d3f0 <HandleRadioRxErrorTimeout+0x118>)
 800d3cc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d006      	beq.n	800d3e2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d3d4:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <HandleRadioRxErrorTimeout+0x120>)
 800d3d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d3da:	f043 0320 	orr.w	r3, r3, #32
 800d3de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800d3e2:	f7ff fa2d 	bl	800c840 <UpdateRxSlotIdleState>
}
 800d3e6:	bf00      	nop
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2000095c 	.word	0x2000095c
 800d3f4:	0801acfc 	.word	0x0801acfc
 800d3f8:	20000454 	.word	0x20000454
 800d3fc:	200007ec 	.word	0x200007ec

0800d400 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d404:	2106      	movs	r1, #6
 800d406:	2005      	movs	r0, #5
 800d408:	f7ff ff66 	bl	800d2d8 <HandleRadioRxErrorTimeout>
}
 800d40c:	bf00      	nop
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d414:	2104      	movs	r1, #4
 800d416:	2003      	movs	r0, #3
 800d418:	f7ff ff5e 	bl	800d2d8 <HandleRadioRxErrorTimeout>
}
 800d41c:	bf00      	nop
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d426:	f3ef 8310 	mrs	r3, PRIMASK
 800d42a:	607b      	str	r3, [r7, #4]
  return(result);
 800d42c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800d42e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800d430:	b672      	cpsid	i
}
 800d432:	bf00      	nop
    events = LoRaMacRadioEvents;
 800d434:	4b1d      	ldr	r3, [pc, #116]	; (800d4ac <LoRaMacHandleIrqEvents+0x8c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800d43a:	4b1c      	ldr	r3, [pc, #112]	; (800d4ac <LoRaMacHandleIrqEvents+0x8c>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	601a      	str	r2, [r3, #0]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	f383 8810 	msr	PRIMASK, r3
}
 800d44a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d027      	beq.n	800d4a2 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800d452:	783b      	ldrb	r3, [r7, #0]
 800d454:	f003 0310 	and.w	r3, r3, #16
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d001      	beq.n	800d462 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800d45e:	f7ff fa07 	bl	800c870 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800d462:	783b      	ldrb	r3, [r7, #0]
 800d464:	f003 0308 	and.w	r3, r3, #8
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800d46e:	f7ff fabf 	bl	800c9f0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800d472:	783b      	ldrb	r3, [r7, #0]
 800d474:	f003 0304 	and.w	r3, r3, #4
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800d47e:	f7ff feff 	bl	800d280 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800d482:	783b      	ldrb	r3, [r7, #0]
 800d484:	f003 0302 	and.w	r3, r3, #2
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800d48e:	f7ff ffb7 	bl	800d400 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800d492:	783b      	ldrb	r3, [r7, #0]
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800d49e:	f7ff ffb7 	bl	800d410 <ProcessRadioRxTimeout>
        }
    }
}
 800d4a2:	bf00      	nop
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20000ca8 	.word	0x20000ca8

0800d4b0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d4b4:	4b08      	ldr	r3, [pc, #32]	; (800d4d8 <LoRaMacIsBusy+0x28>)
 800d4b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800d4be:	4b06      	ldr	r3, [pc, #24]	; (800d4d8 <LoRaMacIsBusy+0x28>)
 800d4c0:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d101      	bne.n	800d4cc <LoRaMacIsBusy+0x1c>
    {
        return false;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	e000      	b.n	800d4ce <LoRaMacIsBusy+0x1e>
    }
    return true;
 800d4cc:	2301      	movs	r3, #1
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bc80      	pop	{r7}
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	20000454 	.word	0x20000454

0800d4dc <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800d4e6:	4a04      	ldr	r2, [pc, #16]	; (800d4f8 <LoRaMacEnableRequests+0x1c>)
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800d4ee:	bf00      	nop
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bc80      	pop	{r7}
 800d4f6:	4770      	bx	lr
 800d4f8:	20000454 	.word	0x20000454

0800d4fc <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800d502:	4b2c      	ldr	r3, [pc, #176]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d504:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d508:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800d50a:	4b2a      	ldr	r3, [pc, #168]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d50c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d510:	2b00      	cmp	r3, #0
 800d512:	d14a      	bne.n	800d5aa <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d514:	4b27      	ldr	r3, [pc, #156]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d516:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d51a:	f003 0301 	and.w	r3, r3, #1
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b00      	cmp	r3, #0
 800d522:	d006      	beq.n	800d532 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d524:	4a23      	ldr	r2, [pc, #140]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d526:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d52a:	f36f 0300 	bfc	r3, #0, #1
 800d52e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d532:	4b20      	ldr	r3, [pc, #128]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d534:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d538:	f003 0304 	and.w	r3, r3, #4
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d006      	beq.n	800d550 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d542:	4a1c      	ldr	r2, [pc, #112]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d544:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d548:	f36f 0382 	bfc	r3, #2, #1
 800d54c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d550:	2001      	movs	r0, #1
 800d552:	f7ff ffc3 	bl	800d4dc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800d556:	793b      	ldrb	r3, [r7, #4]
 800d558:	f003 0301 	and.w	r3, r3, #1
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d005      	beq.n	800d56e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d562:	4b14      	ldr	r3, [pc, #80]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d564:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4813      	ldr	r0, [pc, #76]	; (800d5b8 <LoRaMacHandleRequestEvents+0xbc>)
 800d56c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800d56e:	793b      	ldrb	r3, [r7, #4]
 800d570:	f003 0304 	and.w	r3, r3, #4
 800d574:	b2db      	uxtb	r3, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00e      	beq.n	800d598 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d57a:	4810      	ldr	r0, [pc, #64]	; (800d5bc <LoRaMacHandleRequestEvents+0xc0>)
 800d57c:	f004 faca 	bl	8011b14 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d580:	f004 fb14 	bl	8011bac <LoRaMacConfirmQueueGetCnt>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d58a:	4a0a      	ldr	r2, [pc, #40]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d58c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d590:	f043 0304 	orr.w	r3, r3, #4
 800d594:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800d598:	f003 fdfb 	bl	8011192 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d59c:	4a05      	ldr	r2, [pc, #20]	; (800d5b4 <LoRaMacHandleRequestEvents+0xb8>)
 800d59e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d5a2:	f36f 1345 	bfc	r3, #5, #1
 800d5a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800d5aa:	bf00      	nop
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	20000454 	.word	0x20000454
 800d5b8:	2000088c 	.word	0x2000088c
 800d5bc:	200008a0 	.word	0x200008a0

0800d5c0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	; (800d5f0 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800d5c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10a      	bne.n	800d5e6 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800d5d4:	1dfb      	adds	r3, r7, #7
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f004 f882 	bl	80116e0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800d5e2:	f000 fc81 	bl	800dee8 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20000454 	.word	0x20000454

0800d5f4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b088      	sub	sp, #32
 800d5f8:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800d5fa:	4b25      	ldr	r3, [pc, #148]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d5fc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00d      	beq.n	800d626 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800d60a:	4a21      	ldr	r2, [pc, #132]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d60c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d610:	f36f 03c3 	bfc	r3, #3, #1
 800d614:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800d618:	4b1d      	ldr	r3, [pc, #116]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d61a:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	491c      	ldr	r1, [pc, #112]	; (800d694 <LoRaMacHandleIndicationEvents+0xa0>)
 800d622:	481d      	ldr	r0, [pc, #116]	; (800d698 <LoRaMacHandleIndicationEvents+0xa4>)
 800d624:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800d626:	4b1a      	ldr	r3, [pc, #104]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d628:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d62c:	f003 0310 	and.w	r3, r3, #16
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	d012      	beq.n	800d65c <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800d636:	2307      	movs	r3, #7
 800d638:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800d63e:	4b14      	ldr	r3, [pc, #80]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d640:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	1d3a      	adds	r2, r7, #4
 800d648:	4912      	ldr	r1, [pc, #72]	; (800d694 <LoRaMacHandleIndicationEvents+0xa0>)
 800d64a:	4610      	mov	r0, r2
 800d64c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800d64e:	4a10      	ldr	r2, [pc, #64]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d650:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d654:	f36f 1304 	bfc	r3, #4, #1
 800d658:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800d65c:	4b0c      	ldr	r3, [pc, #48]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d65e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d662:	f003 0302 	and.w	r3, r3, #2
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00d      	beq.n	800d688 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800d66c:	4a08      	ldr	r2, [pc, #32]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d66e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d672:	f36f 0341 	bfc	r3, #1, #1
 800d676:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <LoRaMacHandleIndicationEvents+0x9c>)
 800d67c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	4904      	ldr	r1, [pc, #16]	; (800d694 <LoRaMacHandleIndicationEvents+0xa0>)
 800d684:	4805      	ldr	r0, [pc, #20]	; (800d69c <LoRaMacHandleIndicationEvents+0xa8>)
 800d686:	4798      	blx	r3
    }
}
 800d688:	bf00      	nop
 800d68a:	3720      	adds	r7, #32
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	20000454 	.word	0x20000454
 800d694:	200008d0 	.word	0x200008d0
 800d698:	200008b4 	.word	0x200008b4
 800d69c:	20000870 	.word	0x20000870

0800d6a0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d6a6:	4b32      	ldr	r3, [pc, #200]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d6a8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d6ac:	f003 0301 	and.w	r3, r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d058      	beq.n	800d768 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d6be:	4b2c      	ldr	r3, [pc, #176]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d6c0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d004      	beq.n	800d6d2 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800d6c8:	4b29      	ldr	r3, [pc, #164]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d6ca:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d104      	bne.n	800d6dc <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d6d2:	f002 f89f 	bl	800f814 <CheckRetransUnconfirmedUplink>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	71fb      	strb	r3, [r7, #7]
 800d6da:	e020      	b.n	800d71e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d6dc:	4b24      	ldr	r3, [pc, #144]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d6de:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d11b      	bne.n	800d71e <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800d6e6:	4b22      	ldr	r3, [pc, #136]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d6e8:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d014      	beq.n	800d71a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d6f0:	f002 f8bc 	bl	800f86c <CheckRetransConfirmedUplink>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d6f8:	4b1e      	ldr	r3, [pc, #120]	; (800d774 <LoRaMacHandleMcpsRequest+0xd4>)
 800d6fa:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10d      	bne.n	800d71e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	f083 0301 	eor.w	r3, r3, #1
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d002      	beq.n	800d714 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800d70e:	f002 f929 	bl	800f964 <AckTimeoutRetriesProcess>
 800d712:	e004      	b.n	800d71e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800d714:	f002 f964 	bl	800f9e0 <AckTimeoutRetriesFinalize>
 800d718:	e001      	b.n	800d71e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800d71a:	2301      	movs	r3, #1
 800d71c:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800d71e:	79fb      	ldrb	r3, [r7, #7]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00d      	beq.n	800d740 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800d724:	4814      	ldr	r0, [pc, #80]	; (800d778 <LoRaMacHandleMcpsRequest+0xd8>)
 800d726:	f00b ff6f 	bl	8019608 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d72a:	4b11      	ldr	r3, [pc, #68]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d72c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d730:	f023 0320 	bic.w	r3, r3, #32
 800d734:	4a0e      	ldr	r2, [pc, #56]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d736:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800d73a:	f002 f8b9 	bl	800f8b0 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800d73e:	e013      	b.n	800d768 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800d740:	79bb      	ldrb	r3, [r7, #6]
 800d742:	f083 0301 	eor.w	r3, r3, #1
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00d      	beq.n	800d768 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d74c:	4a08      	ldr	r2, [pc, #32]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d74e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d752:	f36f 1345 	bfc	r3, #5, #1
 800d756:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800d75a:	4b05      	ldr	r3, [pc, #20]	; (800d770 <LoRaMacHandleMcpsRequest+0xd0>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800d762:	2000      	movs	r0, #0
 800d764:	f000 f97e 	bl	800da64 <OnTxDelayedTimerEvent>
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20000454 	.word	0x20000454
 800d774:	2000095c 	.word	0x2000095c
 800d778:	200007bc 	.word	0x200007bc

0800d77c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d780:	4b1b      	ldr	r3, [pc, #108]	; (800d7f0 <LoRaMacHandleMlmeRequest+0x74>)
 800d782:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d786:	f003 0304 	and.w	r3, r3, #4
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d02c      	beq.n	800d7ea <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d790:	2001      	movs	r0, #1
 800d792:	f004 f9a5 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d012      	beq.n	800d7c2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800d79c:	2001      	movs	r0, #1
 800d79e:	f004 f941 	bl	8011a24 <LoRaMacConfirmQueueGetStatus>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d103      	bne.n	800d7b0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800d7a8:	4b11      	ldr	r3, [pc, #68]	; (800d7f0 <LoRaMacHandleMlmeRequest+0x74>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	; (800d7f0 <LoRaMacHandleMlmeRequest+0x74>)
 800d7b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7b6:	f023 0302 	bic.w	r3, r3, #2
 800d7ba:	4a0d      	ldr	r2, [pc, #52]	; (800d7f0 <LoRaMacHandleMlmeRequest+0x74>)
 800d7bc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800d7c0:	e013      	b.n	800d7ea <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800d7c2:	2005      	movs	r0, #5
 800d7c4:	f004 f98c 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d105      	bne.n	800d7da <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800d7ce:	2006      	movs	r0, #6
 800d7d0:	f004 f986 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800d7d4:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d007      	beq.n	800d7ea <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <LoRaMacHandleMlmeRequest+0x74>)
 800d7dc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7e0:	f023 0302 	bic.w	r3, r3, #2
 800d7e4:	4a02      	ldr	r2, [pc, #8]	; (800d7f0 <LoRaMacHandleMlmeRequest+0x74>)
 800d7e6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800d7ea:	bf00      	nop
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20000454 	.word	0x20000454

0800d7f4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800d7f8:	200c      	movs	r0, #12
 800d7fa:	f004 f971 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d019      	beq.n	800d838 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800d804:	4b0e      	ldr	r3, [pc, #56]	; (800d840 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d806:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800d810:	2b00      	cmp	r3, #0
 800d812:	d111      	bne.n	800d838 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d814:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d816:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d81a:	f003 0304 	and.w	r3, r3, #4
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	d009      	beq.n	800d838 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d824:	4b06      	ldr	r3, [pc, #24]	; (800d840 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d826:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d82a:	f023 0302 	bic.w	r3, r3, #2
 800d82e:	4a04      	ldr	r2, [pc, #16]	; (800d840 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800d830:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	20000454 	.word	0x20000454

0800d844 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800d844:	b480      	push	{r7}
 800d846:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800d848:	4b0d      	ldr	r3, [pc, #52]	; (800d880 <LoRaMacCheckForRxAbort+0x3c>)
 800d84a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00f      	beq.n	800d876 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800d856:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <LoRaMacCheckForRxAbort+0x3c>)
 800d858:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d85c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d860:	4a07      	ldr	r2, [pc, #28]	; (800d880 <LoRaMacCheckForRxAbort+0x3c>)
 800d862:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d866:	4b06      	ldr	r3, [pc, #24]	; (800d880 <LoRaMacCheckForRxAbort+0x3c>)
 800d868:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d86c:	f023 0302 	bic.w	r3, r3, #2
 800d870:	4a03      	ldr	r2, [pc, #12]	; (800d880 <LoRaMacCheckForRxAbort+0x3c>)
 800d872:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800d876:	bf00      	nop
 800d878:	46bd      	mov	sp, r7
 800d87a:	bc80      	pop	{r7}
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	20000454 	.word	0x20000454

0800d884 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d890:	2300      	movs	r3, #0
 800d892:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800d894:	4b50      	ldr	r3, [pc, #320]	; (800d9d8 <LoRaMacHandleNvm+0x154>)
 800d896:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f040 8097 	bne.w	800d9ce <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2124      	movs	r1, #36	; 0x24
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f007 fecd 	bl	8015644 <Crc32>
 800d8aa:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d006      	beq.n	800d8c4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800d8bc:	89fb      	ldrh	r3, [r7, #14]
 800d8be:	f043 0301 	orr.w	r3, r3, #1
 800d8c2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	3328      	adds	r3, #40	; 0x28
 800d8c8:	2114      	movs	r1, #20
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f007 feba 	bl	8015644 <Crc32>
 800d8d0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d006      	beq.n	800d8ea <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800d8e2:	89fb      	ldrh	r3, [r7, #14]
 800d8e4:	f043 0302 	orr.w	r3, r3, #2
 800d8e8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	3340      	adds	r3, #64	; 0x40
 800d8ee:	21d4      	movs	r1, #212	; 0xd4
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f007 fea7 	bl	8015644 <Crc32>
 800d8f6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d8fe:	68ba      	ldr	r2, [r7, #8]
 800d900:	429a      	cmp	r2, r3
 800d902:	d007      	beq.n	800d914 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800d90c:	89fb      	ldrh	r3, [r7, #14]
 800d90e:	f043 0304 	orr.w	r3, r3, #4
 800d912:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800d91a:	21bc      	movs	r1, #188	; 0xbc
 800d91c:	4618      	mov	r0, r3
 800d91e:	f007 fe91 	bl	8015644 <Crc32>
 800d922:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d007      	beq.n	800d940 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800d938:	89fb      	ldrh	r3, [r7, #14]
 800d93a:	f043 0308 	orr.w	r3, r3, #8
 800d93e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d946:	2190      	movs	r1, #144	; 0x90
 800d948:	4618      	mov	r0, r3
 800d94a:	f007 fe7b 	bl	8015644 <Crc32>
 800d94e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d007      	beq.n	800d96c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68ba      	ldr	r2, [r7, #8]
 800d960:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800d964:	89fb      	ldrh	r3, [r7, #14]
 800d966:	f043 0310 	orr.w	r3, r3, #16
 800d96a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800d972:	21c4      	movs	r1, #196	; 0xc4
 800d974:	4618      	mov	r0, r3
 800d976:	f007 fe65 	bl	8015644 <Crc32>
 800d97a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	429a      	cmp	r2, r3
 800d986:	d007      	beq.n	800d998 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800d990:	89fb      	ldrh	r3, [r7, #14]
 800d992:	f043 0320 	orr.w	r3, r3, #32
 800d996:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d99e:	2114      	movs	r1, #20
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f007 fe4f 	bl	8015644 <Crc32>
 800d9a6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d007      	beq.n	800d9c4 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800d9bc:	89fb      	ldrh	r3, [r7, #14]
 800d9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c2:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800d9c4:	89fb      	ldrh	r3, [r7, #14]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f001 ffae 	bl	800f928 <CallNvmDataChangeCallback>
 800d9cc:	e000      	b.n	800d9d0 <LoRaMacHandleNvm+0x14c>
        return;
 800d9ce:	bf00      	nop
}
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20000454 	.word	0x20000454

0800d9dc <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800d9e6:	f7ff fd1b 	bl	800d420 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800d9ea:	f003 fc36 	bl	801125a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800d9ee:	4b1b      	ldr	r3, [pc, #108]	; (800da5c <LoRaMacProcess+0x80>)
 800d9f0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800d9f4:	f003 0320 	and.w	r3, r3, #32
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d021      	beq.n	800da42 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800d9fe:	2000      	movs	r0, #0
 800da00:	f7ff fd6c 	bl	800d4dc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800da04:	f7ff ff1e 	bl	800d844 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800da08:	f002 f81e 	bl	800fa48 <IsRequestPending>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d006      	beq.n	800da20 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800da12:	f7ff feef 	bl	800d7f4 <LoRaMacCheckForBeaconAcquisition>
 800da16:	4603      	mov	r3, r0
 800da18:	461a      	mov	r2, r3
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800da20:	79fb      	ldrb	r3, [r7, #7]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d103      	bne.n	800da2e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800da26:	f7ff fea9 	bl	800d77c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800da2a:	f7ff fe39 	bl	800d6a0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800da2e:	f7ff fd65 	bl	800d4fc <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800da32:	f7ff fdc5 	bl	800d5c0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800da36:	480a      	ldr	r0, [pc, #40]	; (800da60 <LoRaMacProcess+0x84>)
 800da38:	f7ff ff24 	bl	800d884 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800da3c:	2001      	movs	r0, #1
 800da3e:	f7ff fd4d 	bl	800d4dc <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800da42:	f7ff fdd7 	bl	800d5f4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800da46:	4b05      	ldr	r3, [pc, #20]	; (800da5c <LoRaMacProcess+0x80>)
 800da48:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d101      	bne.n	800da54 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800da50:	f001 fb7c 	bl	800f14c <OpenContinuousRxCWindow>
    }
}
 800da54:	bf00      	nop
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20000454 	.word	0x20000454
 800da60:	2000095c 	.word	0x2000095c

0800da64 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800da6c:	4817      	ldr	r0, [pc, #92]	; (800dacc <OnTxDelayedTimerEvent+0x68>)
 800da6e:	f00b fdcb 	bl	8019608 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800da72:	4b17      	ldr	r3, [pc, #92]	; (800dad0 <OnTxDelayedTimerEvent+0x6c>)
 800da74:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da78:	f023 0320 	bic.w	r3, r3, #32
 800da7c:	4a14      	ldr	r2, [pc, #80]	; (800dad0 <OnTxDelayedTimerEvent+0x6c>)
 800da7e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800da82:	2001      	movs	r0, #1
 800da84:	f001 f8fc 	bl	800ec80 <ScheduleTx>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d018      	beq.n	800dac0 <OnTxDelayedTimerEvent+0x5c>
 800da8e:	2b0b      	cmp	r3, #11
 800da90:	d016      	beq.n	800dac0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800da92:	4b10      	ldr	r3, [pc, #64]	; (800dad4 <OnTxDelayedTimerEvent+0x70>)
 800da94:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	4b0d      	ldr	r3, [pc, #52]	; (800dad0 <OnTxDelayedTimerEvent+0x6c>)
 800da9c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800daa0:	4b0b      	ldr	r3, [pc, #44]	; (800dad0 <OnTxDelayedTimerEvent+0x6c>)
 800daa2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800daa6:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <OnTxDelayedTimerEvent+0x6c>)
 800daa8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800daac:	4b08      	ldr	r3, [pc, #32]	; (800dad0 <OnTxDelayedTimerEvent+0x6c>)
 800daae:	2209      	movs	r2, #9
 800dab0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800dab4:	2009      	movs	r0, #9
 800dab6:	f003 ffdf 	bl	8011a78 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800daba:	f001 fef9 	bl	800f8b0 <StopRetransmission>
            break;
 800dabe:	e000      	b.n	800dac2 <OnTxDelayedTimerEvent+0x5e>
            break;
 800dac0:	bf00      	nop
        }
    }
}
 800dac2:	bf00      	nop
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	200007bc 	.word	0x200007bc
 800dad0:	20000454 	.word	0x20000454
 800dad4:	2000095c 	.word	0x2000095c

0800dad8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800dae0:	4b14      	ldr	r3, [pc, #80]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800dae2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800dae6:	4b13      	ldr	r3, [pc, #76]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800dae8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800daec:	4b12      	ldr	r3, [pc, #72]	; (800db38 <OnRxWindow1TimerEvent+0x60>)
 800daee:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800daf2:	b25a      	sxtb	r2, r3
 800daf4:	4b0f      	ldr	r3, [pc, #60]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800daf6:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dafa:	4b0f      	ldr	r3, [pc, #60]	; (800db38 <OnRxWindow1TimerEvent+0x60>)
 800dafc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800db00:	4b0c      	ldr	r3, [pc, #48]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800db02:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <OnRxWindow1TimerEvent+0x60>)
 800db08:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800db0c:	4b09      	ldr	r3, [pc, #36]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800db0e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800db12:	4b08      	ldr	r3, [pc, #32]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800db14:	2200      	movs	r2, #0
 800db16:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800db1a:	4b06      	ldr	r3, [pc, #24]	; (800db34 <OnRxWindow1TimerEvent+0x5c>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800db22:	4906      	ldr	r1, [pc, #24]	; (800db3c <OnRxWindow1TimerEvent+0x64>)
 800db24:	4806      	ldr	r0, [pc, #24]	; (800db40 <OnRxWindow1TimerEvent+0x68>)
 800db26:	f001 fae3 	bl	800f0f0 <RxWindowSetup>
}
 800db2a:	bf00      	nop
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20000454 	.word	0x20000454
 800db38:	2000095c 	.word	0x2000095c
 800db3c:	2000080c 	.word	0x2000080c
 800db40:	200007d4 	.word	0x200007d4

0800db44 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800db4c:	4b16      	ldr	r3, [pc, #88]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db4e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800db52:	2b00      	cmp	r3, #0
 800db54:	d023      	beq.n	800db9e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800db56:	4b14      	ldr	r3, [pc, #80]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db58:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800db5c:	4b12      	ldr	r3, [pc, #72]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db5e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800db62:	4b12      	ldr	r3, [pc, #72]	; (800dbac <OnRxWindow2TimerEvent+0x68>)
 800db64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db66:	4a10      	ldr	r2, [pc, #64]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db68:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800db6c:	4b0f      	ldr	r3, [pc, #60]	; (800dbac <OnRxWindow2TimerEvent+0x68>)
 800db6e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800db72:	4b0d      	ldr	r3, [pc, #52]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db74:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800db78:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <OnRxWindow2TimerEvent+0x68>)
 800db7a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800db7e:	4b0a      	ldr	r3, [pc, #40]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db80:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800db84:	4b08      	ldr	r3, [pc, #32]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db86:	2200      	movs	r2, #0
 800db88:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800db8c:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <OnRxWindow2TimerEvent+0x64>)
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800db94:	4906      	ldr	r1, [pc, #24]	; (800dbb0 <OnRxWindow2TimerEvent+0x6c>)
 800db96:	4807      	ldr	r0, [pc, #28]	; (800dbb4 <OnRxWindow2TimerEvent+0x70>)
 800db98:	f001 faaa 	bl	800f0f0 <RxWindowSetup>
 800db9c:	e000      	b.n	800dba0 <OnRxWindow2TimerEvent+0x5c>
        return;
 800db9e:	bf00      	nop
}
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20000454 	.word	0x20000454
 800dbac:	2000095c 	.word	0x2000095c
 800dbb0:	20000820 	.word	0x20000820
 800dbb4:	200007ec 	.word	0x200007ec

0800dbb8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800dbc0:	4815      	ldr	r0, [pc, #84]	; (800dc18 <OnAckTimeoutTimerEvent+0x60>)
 800dbc2:	f00b fd21 	bl	8019608 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800dbc6:	4b15      	ldr	r3, [pc, #84]	; (800dc1c <OnAckTimeoutTimerEvent+0x64>)
 800dbc8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d003      	beq.n	800dbd8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800dbd0:	4b12      	ldr	r3, [pc, #72]	; (800dc1c <OnAckTimeoutTimerEvent+0x64>)
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dbd8:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <OnAckTimeoutTimerEvent+0x68>)
 800dbda:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d106      	bne.n	800dbf0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800dbe2:	4a0e      	ldr	r2, [pc, #56]	; (800dc1c <OnAckTimeoutTimerEvent+0x64>)
 800dbe4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dbe8:	f043 0320 	orr.w	r3, r3, #32
 800dbec:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dbf0:	4b0a      	ldr	r3, [pc, #40]	; (800dc1c <OnAckTimeoutTimerEvent+0x64>)
 800dbf2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <OnAckTimeoutTimerEvent+0x58>
 800dbfa:	4b08      	ldr	r3, [pc, #32]	; (800dc1c <OnAckTimeoutTimerEvent+0x64>)
 800dbfc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d004      	beq.n	800dc10 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dc06:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <OnAckTimeoutTimerEvent+0x64>)
 800dc08:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	4798      	blx	r3
    }
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	2000084c 	.word	0x2000084c
 800dc1c:	20000454 	.word	0x20000454
 800dc20:	2000095c 	.word	0x2000095c

0800dc24 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60ba      	str	r2, [r7, #8]
 800dc2c:	607b      	str	r3, [r7, #4]
 800dc2e:	4603      	mov	r3, r0
 800dc30:	73fb      	strb	r3, [r7, #15]
 800dc32:	460b      	mov	r3, r1
 800dc34:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d005      	beq.n	800dc48 <GetFCntDown+0x24>
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d002      	beq.n	800dc48 <GetFCntDown+0x24>
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d101      	bne.n	800dc4c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dc48:	230a      	movs	r3, #10
 800dc4a:	e029      	b.n	800dca0 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d016      	beq.n	800dc80 <GetFCntDown+0x5c>
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d118      	bne.n	800dc88 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800dc56:	79bb      	ldrb	r3, [r7, #6]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d10d      	bne.n	800dc78 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d002      	beq.n	800dc68 <GetFCntDown+0x44>
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	d103      	bne.n	800dc70 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800dc6e:	e00d      	b.n	800dc8c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	2201      	movs	r2, #1
 800dc74:	701a      	strb	r2, [r3, #0]
            break;
 800dc76:	e009      	b.n	800dc8c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	2203      	movs	r2, #3
 800dc7c:	701a      	strb	r2, [r3, #0]
            break;
 800dc7e:	e005      	b.n	800dc8c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	2204      	movs	r2, #4
 800dc84:	701a      	strb	r2, [r3, #0]
            break;
 800dc86:	e001      	b.n	800dc8c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800dc88:	2305      	movs	r3, #5
 800dc8a:	e009      	b.n	800dca0 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	7818      	ldrb	r0, [r3, #0]
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	89db      	ldrh	r3, [r3, #14]
 800dc94:	461a      	mov	r2, r3
 800dc96:	8b39      	ldrh	r1, [r7, #24]
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	f004 faf1 	bl	8012280 <LoRaMacCryptoGetFCntDown>
 800dc9e:	4603      	mov	r3, r0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800dca8:	b5b0      	push	{r4, r5, r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	4603      	mov	r3, r0
 800dcb0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800dcb6:	4b61      	ldr	r3, [pc, #388]	; (800de3c <SwitchClass+0x194>)
 800dcb8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	f000 80a5 	beq.w	800de0c <SwitchClass+0x164>
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	f300 80b4 	bgt.w	800de30 <SwitchClass+0x188>
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <SwitchClass+0x2c>
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	f000 808f 	beq.w	800ddf0 <SwitchClass+0x148>
 800dcd2:	e0ad      	b.n	800de30 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d107      	bne.n	800dcea <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800dcda:	4b58      	ldr	r3, [pc, #352]	; (800de3c <SwitchClass+0x194>)
 800dcdc:	4a57      	ldr	r2, [pc, #348]	; (800de3c <SwitchClass+0x194>)
 800dcde:	336c      	adds	r3, #108	; 0x6c
 800dce0:	3264      	adds	r2, #100	; 0x64
 800dce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dce6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d10c      	bne.n	800dd0a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f003 fa53 	bl	801119e <LoRaMacClassBSwitchClass>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d103      	bne.n	800dd0a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800dd02:	4a4e      	ldr	r2, [pc, #312]	; (800de3c <SwitchClass+0x194>)
 800dd04:	79fb      	ldrb	r3, [r7, #7]
 800dd06:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800dd0a:	79fb      	ldrb	r3, [r7, #7]
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	f040 808a 	bne.w	800de26 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800dd12:	4a4a      	ldr	r2, [pc, #296]	; (800de3c <SwitchClass+0x194>)
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800dd1a:	4a49      	ldr	r2, [pc, #292]	; (800de40 <SwitchClass+0x198>)
 800dd1c:	4b48      	ldr	r3, [pc, #288]	; (800de40 <SwitchClass+0x198>)
 800dd1e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800dd22:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800dd26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd2a:	682b      	ldr	r3, [r5, #0]
 800dd2c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dd2e:	4b44      	ldr	r3, [pc, #272]	; (800de40 <SwitchClass+0x198>)
 800dd30:	2202      	movs	r2, #2
 800dd32:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd36:	2300      	movs	r3, #0
 800dd38:	73bb      	strb	r3, [r7, #14]
 800dd3a:	e049      	b.n	800ddd0 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800dd3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd40:	4a3e      	ldr	r2, [pc, #248]	; (800de3c <SwitchClass+0x194>)
 800dd42:	212c      	movs	r1, #44	; 0x2c
 800dd44:	fb01 f303 	mul.w	r3, r1, r3
 800dd48:	4413      	add	r3, r2
 800dd4a:	33d2      	adds	r3, #210	; 0xd2
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d038      	beq.n	800ddc4 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800dd52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd56:	4a39      	ldr	r2, [pc, #228]	; (800de3c <SwitchClass+0x194>)
 800dd58:	212c      	movs	r1, #44	; 0x2c
 800dd5a:	fb01 f303 	mul.w	r3, r1, r3
 800dd5e:	4413      	add	r3, r2
 800dd60:	33e8      	adds	r3, #232	; 0xe8
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a35      	ldr	r2, [pc, #212]	; (800de3c <SwitchClass+0x194>)
 800dd66:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800dd68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd6c:	4a33      	ldr	r2, [pc, #204]	; (800de3c <SwitchClass+0x194>)
 800dd6e:	212c      	movs	r1, #44	; 0x2c
 800dd70:	fb01 f303 	mul.w	r3, r1, r3
 800dd74:	4413      	add	r3, r2
 800dd76:	33ec      	adds	r3, #236	; 0xec
 800dd78:	f993 3000 	ldrsb.w	r3, [r3]
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	4b2f      	ldr	r3, [pc, #188]	; (800de3c <SwitchClass+0x194>)
 800dd80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800dd84:	4b2e      	ldr	r3, [pc, #184]	; (800de40 <SwitchClass+0x198>)
 800dd86:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800dd8a:	4b2d      	ldr	r3, [pc, #180]	; (800de40 <SwitchClass+0x198>)
 800dd8c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800dd90:	4b2a      	ldr	r3, [pc, #168]	; (800de3c <SwitchClass+0x194>)
 800dd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd94:	4a2a      	ldr	r2, [pc, #168]	; (800de40 <SwitchClass+0x198>)
 800dd96:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dd9a:	4b28      	ldr	r3, [pc, #160]	; (800de3c <SwitchClass+0x194>)
 800dd9c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800dda0:	4b27      	ldr	r3, [pc, #156]	; (800de40 <SwitchClass+0x198>)
 800dda2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800dda6:	4b25      	ldr	r3, [pc, #148]	; (800de3c <SwitchClass+0x194>)
 800dda8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ddac:	4b24      	ldr	r3, [pc, #144]	; (800de40 <SwitchClass+0x198>)
 800ddae:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ddb2:	4b23      	ldr	r3, [pc, #140]	; (800de40 <SwitchClass+0x198>)
 800ddb4:	2203      	movs	r2, #3
 800ddb6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ddba:	4b21      	ldr	r3, [pc, #132]	; (800de40 <SwitchClass+0x198>)
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ddc2:	e009      	b.n	800ddd8 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ddc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	3301      	adds	r3, #1
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	73bb      	strb	r3, [r7, #14]
 800ddd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	ddb1      	ble.n	800dd3c <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ddd8:	4b19      	ldr	r3, [pc, #100]	; (800de40 <SwitchClass+0x198>)
 800ddda:	2200      	movs	r2, #0
 800dddc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800dde0:	4b18      	ldr	r3, [pc, #96]	; (800de44 <SwitchClass+0x19c>)
 800dde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800dde6:	f001 f9b1 	bl	800f14c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ddee:	e01a      	b.n	800de26 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f003 f9d3 	bl	801119e <LoRaMacClassBSwitchClass>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d113      	bne.n	800de2a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800de02:	4a0e      	ldr	r2, [pc, #56]	; (800de3c <SwitchClass+0x194>)
 800de04:	79fb      	ldrb	r3, [r7, #7]
 800de06:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800de0a:	e00e      	b.n	800de2a <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800de0c:	79fb      	ldrb	r3, [r7, #7]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d10d      	bne.n	800de2e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800de12:	4a0a      	ldr	r2, [pc, #40]	; (800de3c <SwitchClass+0x194>)
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800de1a:	4b0a      	ldr	r3, [pc, #40]	; (800de44 <SwitchClass+0x19c>)
 800de1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de1e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800de24:	e003      	b.n	800de2e <SwitchClass+0x186>
            break;
 800de26:	bf00      	nop
 800de28:	e002      	b.n	800de30 <SwitchClass+0x188>
            break;
 800de2a:	bf00      	nop
 800de2c:	e000      	b.n	800de30 <SwitchClass+0x188>
            break;
 800de2e:	bf00      	nop
        }
    }

    return status;
 800de30:	7bfb      	ldrb	r3, [r7, #15]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bdb0      	pop	{r4, r5, r7, pc}
 800de3a:	bf00      	nop
 800de3c:	2000095c 	.word	0x2000095c
 800de40:	20000454 	.word	0x20000454
 800de44:	0801acfc 	.word	0x0801acfc

0800de48 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4603      	mov	r3, r0
 800de50:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800de52:	4b10      	ldr	r3, [pc, #64]	; (800de94 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800de54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800de58:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800de5a:	79fb      	ldrb	r3, [r7, #7]
 800de5c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de5e:	230d      	movs	r3, #13
 800de60:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de62:	4b0c      	ldr	r3, [pc, #48]	; (800de94 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800de64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de6c:	230e      	movs	r3, #14
 800de6e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de70:	4b08      	ldr	r3, [pc, #32]	; (800de94 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800de72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de76:	f107 0210 	add.w	r2, r7, #16
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f005 f881 	bl	8012f84 <RegionGetPhyParam>
 800de82:	4603      	mov	r3, r0
 800de84:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	b2db      	uxtb	r3, r3
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	2000095c 	.word	0x2000095c

0800de98 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	71fb      	strb	r3, [r7, #7]
 800dea2:	460b      	mov	r3, r1
 800dea4:	71bb      	strb	r3, [r7, #6]
 800dea6:	4613      	mov	r3, r2
 800dea8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800deae:	2300      	movs	r3, #0
 800deb0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800deb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7ff ffc6 	bl	800de48 <GetMaxAppPayloadWithoutFOptsLength>
 800debc:	4603      	mov	r3, r0
 800debe:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	797b      	ldrb	r3, [r7, #5]
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	4413      	add	r3, r2
 800deca:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800decc:	89ba      	ldrh	r2, [r7, #12]
 800dece:	89fb      	ldrh	r3, [r7, #14]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d804      	bhi.n	800dede <ValidatePayloadLength+0x46>
 800ded4:	89bb      	ldrh	r3, [r7, #12]
 800ded6:	2bff      	cmp	r3, #255	; 0xff
 800ded8:	d801      	bhi.n	800dede <ValidatePayloadLength+0x46>
    {
        return true;
 800deda:	2301      	movs	r3, #1
 800dedc:	e000      	b.n	800dee0 <ValidatePayloadLength+0x48>
    }
    return false;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800dee8:	b480      	push	{r7}
 800deea:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800deec:	4a05      	ldr	r2, [pc, #20]	; (800df04 <SetMlmeScheduleUplinkIndication+0x1c>)
 800deee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800def2:	f043 0310 	orr.w	r3, r3, #16
 800def6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800defa:	bf00      	nop
 800defc:	46bd      	mov	sp, r7
 800defe:	bc80      	pop	{r7}
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	20000454 	.word	0x20000454

0800df08 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b0a5      	sub	sp, #148	; 0x94
 800df0c:	af02      	add	r7, sp, #8
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	4608      	mov	r0, r1
 800df12:	4611      	mov	r1, r2
 800df14:	461a      	mov	r2, r3
 800df16:	4603      	mov	r3, r0
 800df18:	70fb      	strb	r3, [r7, #3]
 800df1a:	460b      	mov	r3, r1
 800df1c:	70bb      	strb	r3, [r7, #2]
 800df1e:	4613      	mov	r3, r2
 800df20:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800df22:	2300      	movs	r3, #0
 800df24:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800df2e:	2300      	movs	r3, #0
 800df30:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800df34:	f000 bc73 	b.w	800e81e <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800df38:	78fb      	ldrb	r3, [r7, #3]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	4413      	add	r3, r2
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	4618      	mov	r0, r3
 800df42:	f003 fbf5 	bl	8011730 <LoRaMacCommandsGetCmdSize>
 800df46:	4603      	mov	r3, r0
 800df48:	461a      	mov	r2, r3
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	441a      	add	r2, r3
 800df4e:	78bb      	ldrb	r3, [r7, #2]
 800df50:	429a      	cmp	r2, r3
 800df52:	f300 846a 	bgt.w	800e82a <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800df56:	78fb      	ldrb	r3, [r7, #3]
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	70fa      	strb	r2, [r7, #3]
 800df5c:	461a      	mov	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4413      	add	r3, r2
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	3b02      	subs	r3, #2
 800df66:	2b11      	cmp	r3, #17
 800df68:	f200 8461 	bhi.w	800e82e <ProcessMacCommands+0x926>
 800df6c:	a201      	add	r2, pc, #4	; (adr r2, 800df74 <ProcessMacCommands+0x6c>)
 800df6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df72:	bf00      	nop
 800df74:	0800dfbd 	.word	0x0800dfbd
 800df78:	0800dfff 	.word	0x0800dfff
 800df7c:	0800e11b 	.word	0x0800e11b
 800df80:	0800e159 	.word	0x0800e159
 800df84:	0800e249 	.word	0x0800e249
 800df88:	0800e2a5 	.word	0x0800e2a5
 800df8c:	0800e361 	.word	0x0800e361
 800df90:	0800e3bb 	.word	0x0800e3bb
 800df94:	0800e49f 	.word	0x0800e49f
 800df98:	0800e82f 	.word	0x0800e82f
 800df9c:	0800e82f 	.word	0x0800e82f
 800dfa0:	0800e549 	.word	0x0800e549
 800dfa4:	0800e82f 	.word	0x0800e82f
 800dfa8:	0800e82f 	.word	0x0800e82f
 800dfac:	0800e65f 	.word	0x0800e65f
 800dfb0:	0800e693 	.word	0x0800e693
 800dfb4:	0800e723 	.word	0x0800e723
 800dfb8:	0800e799 	.word	0x0800e799
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800dfbc:	2004      	movs	r0, #4
 800dfbe:	f003 fd8f 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 842a 	beq.w	800e81e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800dfca:	2104      	movs	r1, #4
 800dfcc:	2000      	movs	r0, #0
 800dfce:	f003 fcfb 	bl	80119c8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800dfd2:	78fb      	ldrb	r3, [r7, #3]
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	70fa      	strb	r2, [r7, #3]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4413      	add	r3, r2
 800dfde:	781a      	ldrb	r2, [r3, #0]
 800dfe0:	4bad      	ldr	r3, [pc, #692]	; (800e298 <ProcessMacCommands+0x390>)
 800dfe2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800dfe6:	78fb      	ldrb	r3, [r7, #3]
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	70fa      	strb	r2, [r7, #3]
 800dfec:	461a      	mov	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4413      	add	r3, r2
 800dff2:	781a      	ldrb	r2, [r3, #0]
 800dff4:	4ba8      	ldr	r3, [pc, #672]	; (800e298 <ProcessMacCommands+0x390>)
 800dff6:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800dffa:	f000 bc10 	b.w	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800dffe:	2300      	movs	r3, #0
 800e000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e004:	2300      	movs	r3, #0
 800e006:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800e016:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800e01a:	f083 0301 	eor.w	r3, r3, #1
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	2b00      	cmp	r3, #0
 800e022:	d078      	beq.n	800e116 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800e024:	2301      	movs	r3, #1
 800e026:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e02a:	78fb      	ldrb	r3, [r7, #3]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	4413      	add	r3, r2
 800e032:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e034:	78ba      	ldrb	r2, [r7, #2]
 800e036:	78fb      	ldrb	r3, [r7, #3]
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	3301      	adds	r3, #1
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e044:	4b95      	ldr	r3, [pc, #596]	; (800e29c <ProcessMacCommands+0x394>)
 800e046:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800e04a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e04e:	4b93      	ldr	r3, [pc, #588]	; (800e29c <ProcessMacCommands+0x394>)
 800e050:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e054:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e058:	4b90      	ldr	r3, [pc, #576]	; (800e29c <ProcessMacCommands+0x394>)
 800e05a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e05e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e062:	4b8e      	ldr	r3, [pc, #568]	; (800e29c <ProcessMacCommands+0x394>)
 800e064:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e068:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e06c:	4b8b      	ldr	r3, [pc, #556]	; (800e29c <ProcessMacCommands+0x394>)
 800e06e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e072:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e076:	4b89      	ldr	r3, [pc, #548]	; (800e29c <ProcessMacCommands+0x394>)
 800e078:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e07c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e07e:	4b87      	ldr	r3, [pc, #540]	; (800e29c <ProcessMacCommands+0x394>)
 800e080:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e084:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800e088:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800e08c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e090:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	4623      	mov	r3, r4
 800e09e:	f005 f82f 	bl	8013100 <RegionLinkAdrReq>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e0a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e0ac:	f003 0307 	and.w	r3, r3, #7
 800e0b0:	2b07      	cmp	r3, #7
 800e0b2:	d10e      	bne.n	800e0d2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e0b4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800e0b8:	4b78      	ldr	r3, [pc, #480]	; (800e29c <ProcessMacCommands+0x394>)
 800e0ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e0be:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800e0c2:	4b76      	ldr	r3, [pc, #472]	; (800e29c <ProcessMacCommands+0x394>)
 800e0c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e0c8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800e0cc:	4b73      	ldr	r3, [pc, #460]	; (800e29c <ProcessMacCommands+0x394>)
 800e0ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e0d8:	e00b      	b.n	800e0f2 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e0da:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	2003      	movs	r0, #3
 800e0e4:	f003 f9d4 	bl	8011490 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e0e8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800e0f2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e0f6:	4a6a      	ldr	r2, [pc, #424]	; (800e2a0 <ProcessMacCommands+0x398>)
 800e0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0fc:	089b      	lsrs	r3, r3, #2
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800e104:	429a      	cmp	r2, r3
 800e106:	d3e8      	bcc.n	800e0da <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e108:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e10c:	78fb      	ldrb	r3, [r7, #3]
 800e10e:	4413      	add	r3, r2
 800e110:	b2db      	uxtb	r3, r3
 800e112:	3b01      	subs	r3, #1
 800e114:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800e116:	bf00      	nop
 800e118:	e381      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e11a:	78fb      	ldrb	r3, [r7, #3]
 800e11c:	1c5a      	adds	r2, r3, #1
 800e11e:	70fa      	strb	r2, [r7, #3]
 800e120:	461a      	mov	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4413      	add	r3, r2
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 030f 	and.w	r3, r3, #15
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	4b5b      	ldr	r3, [pc, #364]	; (800e29c <ProcessMacCommands+0x394>)
 800e130:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e134:	4b59      	ldr	r3, [pc, #356]	; (800e29c <ProcessMacCommands+0x394>)
 800e136:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800e13a:	461a      	mov	r2, r3
 800e13c:	2301      	movs	r3, #1
 800e13e:	4093      	lsls	r3, r2
 800e140:	b29a      	uxth	r2, r3
 800e142:	4b56      	ldr	r3, [pc, #344]	; (800e29c <ProcessMacCommands+0x394>)
 800e144:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e148:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e14c:	2200      	movs	r2, #0
 800e14e:	4619      	mov	r1, r3
 800e150:	2004      	movs	r0, #4
 800e152:	f003 f99d 	bl	8011490 <LoRaMacCommandsAddCmd>
                break;
 800e156:	e362      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e158:	2307      	movs	r3, #7
 800e15a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e15e:	78fb      	ldrb	r3, [r7, #3]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	4413      	add	r3, r2
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	091b      	lsrs	r3, r3, #4
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	b25b      	sxtb	r3, r3
 800e16c:	f003 0307 	and.w	r3, r3, #7
 800e170:	b25b      	sxtb	r3, r3
 800e172:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e176:	78fb      	ldrb	r3, [r7, #3]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	4413      	add	r3, r2
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b25b      	sxtb	r3, r3
 800e180:	f003 030f 	and.w	r3, r3, #15
 800e184:	b25b      	sxtb	r3, r3
 800e186:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800e18a:	78fb      	ldrb	r3, [r7, #3]
 800e18c:	3301      	adds	r3, #1
 800e18e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	1c5a      	adds	r2, r3, #1
 800e194:	70fa      	strb	r2, [r7, #3]
 800e196:	461a      	mov	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4413      	add	r3, r2
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e1a0:	78fb      	ldrb	r3, [r7, #3]
 800e1a2:	1c5a      	adds	r2, r3, #1
 800e1a4:	70fa      	strb	r2, [r7, #3]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	021a      	lsls	r2, r3, #8
 800e1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e1b6:	78fb      	ldrb	r3, [r7, #3]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	70fa      	strb	r2, [r7, #3]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	041a      	lsls	r2, r3, #16
 800e1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ce:	2264      	movs	r2, #100	; 0x64
 800e1d0:	fb02 f303 	mul.w	r3, r2, r3
 800e1d4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e1d6:	4b31      	ldr	r3, [pc, #196]	; (800e29c <ProcessMacCommands+0x394>)
 800e1d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f004 ffa6 	bl	8013134 <RegionRxParamSetupReq>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e1ee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e1f2:	f003 0307 	and.w	r3, r3, #7
 800e1f6:	2b07      	cmp	r3, #7
 800e1f8:	d117      	bne.n	800e22a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e1fa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	4b26      	ldr	r3, [pc, #152]	; (800e29c <ProcessMacCommands+0x394>)
 800e202:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e206:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	4b23      	ldr	r3, [pc, #140]	; (800e29c <ProcessMacCommands+0x394>)
 800e20e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e214:	4a21      	ldr	r2, [pc, #132]	; (800e29c <ProcessMacCommands+0x394>)
 800e216:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e21a:	4a20      	ldr	r2, [pc, #128]	; (800e29c <ProcessMacCommands+0x394>)
 800e21c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e21e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800e222:	b2da      	uxtb	r2, r3
 800e224:	4b1d      	ldr	r3, [pc, #116]	; (800e29c <ProcessMacCommands+0x394>)
 800e226:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800e22a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e22e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e232:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e236:	2201      	movs	r2, #1
 800e238:	4619      	mov	r1, r3
 800e23a:	2005      	movs	r0, #5
 800e23c:	f003 f928 	bl	8011490 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800e240:	f7ff fe52 	bl	800dee8 <SetMlmeScheduleUplinkIndication>
                break;
 800e244:	bf00      	nop
 800e246:	e2ea      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e248:	23ff      	movs	r3, #255	; 0xff
 800e24a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e24e:	4b12      	ldr	r3, [pc, #72]	; (800e298 <ProcessMacCommands+0x390>)
 800e250:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00d      	beq.n	800e274 <ProcessMacCommands+0x36c>
 800e258:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <ProcessMacCommands+0x390>)
 800e25a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d007      	beq.n	800e274 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e264:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <ProcessMacCommands+0x390>)
 800e266:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4798      	blx	r3
 800e26e:	4603      	mov	r3, r0
 800e270:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800e274:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800e278:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e27c:	787b      	ldrb	r3, [r7, #1]
 800e27e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e282:	b2db      	uxtb	r3, r3
 800e284:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e288:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e28c:	2202      	movs	r2, #2
 800e28e:	4619      	mov	r1, r3
 800e290:	2006      	movs	r0, #6
 800e292:	f003 f8fd 	bl	8011490 <LoRaMacCommandsAddCmd>
                break;
 800e296:	e2c2      	b.n	800e81e <ProcessMacCommands+0x916>
 800e298:	20000454 	.word	0x20000454
 800e29c:	2000095c 	.word	0x2000095c
 800e2a0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800e2a4:	2303      	movs	r3, #3
 800e2a6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800e2aa:	78fb      	ldrb	r3, [r7, #3]
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	70fa      	strb	r2, [r7, #3]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	b25b      	sxtb	r3, r3
 800e2ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800e2be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2c2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e2c4:	78fb      	ldrb	r3, [r7, #3]
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	70fa      	strb	r2, [r7, #3]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e2d4:	78fb      	ldrb	r3, [r7, #3]
 800e2d6:	1c5a      	adds	r2, r3, #1
 800e2d8:	70fa      	strb	r2, [r7, #3]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4413      	add	r3, r2
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	021a      	lsls	r2, r3, #8
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	1c5a      	adds	r2, r3, #1
 800e2ee:	70fa      	strb	r2, [r7, #3]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	041a      	lsls	r2, r3, #16
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	2264      	movs	r2, #100	; 0x64
 800e304:	fb02 f303 	mul.w	r3, r2, r3
 800e308:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800e30a:	2300      	movs	r3, #0
 800e30c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	1c5a      	adds	r2, r3, #1
 800e312:	70fa      	strb	r2, [r7, #3]
 800e314:	461a      	mov	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4413      	add	r3, r2
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	b25b      	sxtb	r3, r3
 800e31e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800e322:	4b87      	ldr	r3, [pc, #540]	; (800e540 <ProcessMacCommands+0x638>)
 800e324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e328:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e32c:	4611      	mov	r1, r2
 800e32e:	4618      	mov	r0, r3
 800e330:	f004 ff13 	bl	801315a <RegionNewChannelReq>
 800e334:	4603      	mov	r3, r0
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e33c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e340:	b25b      	sxtb	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	db0a      	blt.n	800e35c <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800e346:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e34a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800e34e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e352:	2201      	movs	r2, #1
 800e354:	4619      	mov	r1, r3
 800e356:	2007      	movs	r0, #7
 800e358:	f003 f89a 	bl	8011490 <LoRaMacCommandsAddCmd>
                }
                break;
 800e35c:	bf00      	nop
 800e35e:	e25e      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800e360:	78fb      	ldrb	r3, [r7, #3]
 800e362:	1c5a      	adds	r2, r3, #1
 800e364:	70fa      	strb	r2, [r7, #3]
 800e366:	461a      	mov	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4413      	add	r3, r2
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	f003 030f 	and.w	r3, r3, #15
 800e372:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800e376:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d104      	bne.n	800e388 <ProcessMacCommands+0x480>
                {
                    delay++;
 800e37e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e382:	3301      	adds	r3, #1
 800e384:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800e388:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800e38c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e390:	fb02 f303 	mul.w	r3, r2, r3
 800e394:	461a      	mov	r2, r3
 800e396:	4b6a      	ldr	r3, [pc, #424]	; (800e540 <ProcessMacCommands+0x638>)
 800e398:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e39a:	4b69      	ldr	r3, [pc, #420]	; (800e540 <ProcessMacCommands+0x638>)
 800e39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e39e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e3a2:	4a67      	ldr	r2, [pc, #412]	; (800e540 <ProcessMacCommands+0x638>)
 800e3a4:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800e3a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	2008      	movs	r0, #8
 800e3b0:	f003 f86e 	bl	8011490 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800e3b4:	f7ff fd98 	bl	800dee8 <SetMlmeScheduleUplinkIndication>
                break;
 800e3b8:	e231      	b.n	800e81e <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800e3ba:	78fb      	ldrb	r3, [r7, #3]
 800e3bc:	1c5a      	adds	r2, r3, #1
 800e3be:	70fa      	strb	r2, [r7, #3]
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800e3d8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e3dc:	f003 0320 	and.w	r3, r3, #32
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800e3ea:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e3ee:	f003 0310 	and.w	r3, r3, #16
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d002      	beq.n	800e3fc <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800e3fc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e400:	f003 030f 	and.w	r3, r3, #15
 800e404:	b2db      	uxtb	r3, r3
 800e406:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800e40a:	4b4d      	ldr	r3, [pc, #308]	; (800e540 <ProcessMacCommands+0x638>)
 800e40c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e410:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e414:	4611      	mov	r1, r2
 800e416:	4618      	mov	r0, r3
 800e418:	f004 feb2 	bl	8013180 <RegionTxParamSetupReq>
 800e41c:	4603      	mov	r3, r0
 800e41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e422:	d03a      	beq.n	800e49a <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800e424:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800e428:	4b45      	ldr	r3, [pc, #276]	; (800e540 <ProcessMacCommands+0x638>)
 800e42a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800e42e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e432:	4b43      	ldr	r3, [pc, #268]	; (800e540 <ProcessMacCommands+0x638>)
 800e434:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800e438:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e43c:	461a      	mov	r2, r3
 800e43e:	4b41      	ldr	r3, [pc, #260]	; (800e544 <ProcessMacCommands+0x63c>)
 800e440:	5c9b      	ldrb	r3, [r3, r2]
 800e442:	4618      	mov	r0, r3
 800e444:	f7f2 f9c2 	bl	80007cc <__aeabi_ui2f>
 800e448:	4603      	mov	r3, r0
 800e44a:	4a3d      	ldr	r2, [pc, #244]	; (800e540 <ProcessMacCommands+0x638>)
 800e44c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800e44e:	2302      	movs	r3, #2
 800e450:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e454:	4b3a      	ldr	r3, [pc, #232]	; (800e540 <ProcessMacCommands+0x638>)
 800e456:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e45a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e45e:	4b38      	ldr	r3, [pc, #224]	; (800e540 <ProcessMacCommands+0x638>)
 800e460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e464:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e468:	4611      	mov	r1, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f004 fd8a 	bl	8012f84 <RegionGetPhyParam>
 800e470:	4603      	mov	r3, r0
 800e472:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e476:	b25a      	sxtb	r2, r3
 800e478:	4b31      	ldr	r3, [pc, #196]	; (800e540 <ProcessMacCommands+0x638>)
 800e47a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e47e:	4293      	cmp	r3, r2
 800e480:	bfb8      	it	lt
 800e482:	4613      	movlt	r3, r2
 800e484:	b25a      	sxtb	r2, r3
 800e486:	4b2e      	ldr	r3, [pc, #184]	; (800e540 <ProcessMacCommands+0x638>)
 800e488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800e48c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e490:	2200      	movs	r2, #0
 800e492:	4619      	mov	r1, r3
 800e494:	2009      	movs	r0, #9
 800e496:	f002 fffb 	bl	8011490 <LoRaMacCommandsAddCmd>
                }
                break;
 800e49a:	bf00      	nop
 800e49c:	e1bf      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800e4a4:	78fb      	ldrb	r3, [r7, #3]
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	70fa      	strb	r2, [r7, #3]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	70fa      	strb	r2, [r7, #3]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e4c6:	78fb      	ldrb	r3, [r7, #3]
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	70fa      	strb	r2, [r7, #3]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	021a      	lsls	r2, r3, #8
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e4dc:	78fb      	ldrb	r3, [r7, #3]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	70fa      	strb	r2, [r7, #3]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	041a      	lsls	r2, r3, #16
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	2264      	movs	r2, #100	; 0x64
 800e4f6:	fb02 f303 	mul.w	r3, r2, r3
 800e4fa:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800e4fc:	4b10      	ldr	r3, [pc, #64]	; (800e540 <ProcessMacCommands+0x638>)
 800e4fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e502:	f107 0220 	add.w	r2, r7, #32
 800e506:	4611      	mov	r1, r2
 800e508:	4618      	mov	r0, r3
 800e50a:	f004 fe4c 	bl	80131a6 <RegionDlChannelReq>
 800e50e:	4603      	mov	r3, r0
 800e510:	b2db      	uxtb	r3, r3
 800e512:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800e516:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	db0c      	blt.n	800e53a <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800e520:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e524:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800e528:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e52c:	2201      	movs	r2, #1
 800e52e:	4619      	mov	r1, r3
 800e530:	200a      	movs	r0, #10
 800e532:	f002 ffad 	bl	8011490 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800e536:	f7ff fcd7 	bl	800dee8 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800e53a:	bf00      	nop
 800e53c:	e16f      	b.n	800e81e <ProcessMacCommands+0x916>
 800e53e:	bf00      	nop
 800e540:	2000095c 	.word	0x2000095c
 800e544:	0801acb4 	.word	0x0801acb4
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800e548:	200a      	movs	r0, #10
 800e54a:	f003 fac9 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	f000 8164 	beq.w	800e81e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800e556:	210a      	movs	r1, #10
 800e558:	2000      	movs	r0, #0
 800e55a:	f003 fa35 	bl	80119c8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800e55e:	f107 0318 	add.w	r3, r7, #24
 800e562:	2200      	movs	r2, #0
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800e568:	f107 0310 	add.w	r3, r7, #16
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800e572:	f107 0308 	add.w	r3, r7, #8
 800e576:	2200      	movs	r2, #0
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800e57c:	78fb      	ldrb	r3, [r7, #3]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	70fa      	strb	r2, [r7, #3]
 800e582:	461a      	mov	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4413      	add	r3, r2
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800e58c:	78fb      	ldrb	r3, [r7, #3]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	70fa      	strb	r2, [r7, #3]
 800e592:	461a      	mov	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4413      	add	r3, r2
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	021a      	lsls	r2, r3, #8
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800e5a2:	78fb      	ldrb	r3, [r7, #3]
 800e5a4:	1c5a      	adds	r2, r3, #1
 800e5a6:	70fa      	strb	r2, [r7, #3]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	041a      	lsls	r2, r3, #16
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800e5b8:	78fb      	ldrb	r3, [r7, #3]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	70fa      	strb	r2, [r7, #3]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	061a      	lsls	r2, r3, #24
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800e5ce:	78fb      	ldrb	r3, [r7, #3]
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	70fa      	strb	r2, [r7, #3]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4413      	add	r3, r2
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	b21b      	sxth	r3, r3
 800e5de:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800e5e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e5ea:	fb03 f302 	mul.w	r3, r3, r2
 800e5ee:	121b      	asrs	r3, r3, #8
 800e5f0:	b21b      	sxth	r3, r3
 800e5f2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800e5f4:	f107 0310 	add.w	r3, r7, #16
 800e5f8:	f107 0218 	add.w	r2, r7, #24
 800e5fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e600:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800e604:	693a      	ldr	r2, [r7, #16]
 800e606:	4b8c      	ldr	r3, [pc, #560]	; (800e838 <ProcessMacCommands+0x930>)
 800e608:	4413      	add	r3, r2
 800e60a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800e60c:	f107 0308 	add.w	r3, r7, #8
 800e610:	4618      	mov	r0, r3
 800e612:	f00a faa5 	bl	8018b60 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800e616:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e61a:	4b88      	ldr	r3, [pc, #544]	; (800e83c <ProcessMacCommands+0x934>)
 800e61c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800e620:	9200      	str	r2, [sp, #0]
 800e622:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800e626:	f107 0210 	add.w	r2, r7, #16
 800e62a:	ca06      	ldmia	r2, {r1, r2}
 800e62c:	f00a fa31 	bl	8018a92 <SysTimeSub>
 800e630:	f107 0010 	add.w	r0, r7, #16
 800e634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e636:	9300      	str	r3, [sp, #0]
 800e638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e63a:	f107 0208 	add.w	r2, r7, #8
 800e63e:	ca06      	ldmia	r2, {r1, r2}
 800e640:	f00a f9ee 	bl	8018a20 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800e644:	f107 0310 	add.w	r3, r7, #16
 800e648:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e64c:	f00a fa5a 	bl	8018b04 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800e650:	f002 fde3 	bl	801121a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800e654:	4b79      	ldr	r3, [pc, #484]	; (800e83c <ProcessMacCommands+0x934>)
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800e65c:	e0df      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800e65e:	200d      	movs	r0, #13
 800e660:	f003 fa3e 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	f000 80d9 	beq.w	800e81e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800e66c:	210d      	movs	r1, #13
 800e66e:	2000      	movs	r0, #0
 800e670:	f003 f9aa 	bl	80119c8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800e674:	4b71      	ldr	r3, [pc, #452]	; (800e83c <ProcessMacCommands+0x934>)
 800e676:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e67a:	2b04      	cmp	r3, #4
 800e67c:	f000 80cf 	beq.w	800e81e <ProcessMacCommands+0x916>
 800e680:	4b6e      	ldr	r3, [pc, #440]	; (800e83c <ProcessMacCommands+0x934>)
 800e682:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e686:	2b05      	cmp	r3, #5
 800e688:	f000 80c9 	beq.w	800e81e <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800e68c:	f002 fda6 	bl	80111dc <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800e690:	e0c5      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800e692:	2303      	movs	r3, #3
 800e694:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800e698:	2300      	movs	r3, #0
 800e69a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800e69c:	78fb      	ldrb	r3, [r7, #3]
 800e69e:	1c5a      	adds	r2, r3, #1
 800e6a0:	70fa      	strb	r2, [r7, #3]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	70fa      	strb	r2, [r7, #3]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	021b      	lsls	r3, r3, #8
 800e6bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e6c2:	78fb      	ldrb	r3, [r7, #3]
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	70fa      	strb	r2, [r7, #3]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	041b      	lsls	r3, r3, #16
 800e6d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800e6d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6da:	2264      	movs	r2, #100	; 0x64
 800e6dc:	fb02 f303 	mul.w	r3, r2, r3
 800e6e0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	1c5a      	adds	r2, r3, #1
 800e6e6:	70fa      	strb	r2, [r7, #3]
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	f003 030f 	and.w	r3, r3, #15
 800e6f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800e6f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e6fc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e6fe:	4618      	mov	r0, r3
 800e700:	f002 fd72 	bl	80111e8 <LoRaMacClassBPingSlotChannelReq>
 800e704:	4603      	mov	r3, r0
 800e706:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800e70a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e70e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800e712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e716:	2201      	movs	r2, #1
 800e718:	4619      	mov	r1, r3
 800e71a:	2011      	movs	r0, #17
 800e71c:	f002 feb8 	bl	8011490 <LoRaMacCommandsAddCmd>
                break;
 800e720:	e07d      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800e722:	200e      	movs	r0, #14
 800e724:	f003 f9dc 	bl	8011ae0 <LoRaMacConfirmQueueIsCmdActive>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d077      	beq.n	800e81e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800e72e:	210e      	movs	r1, #14
 800e730:	2000      	movs	r0, #0
 800e732:	f003 f949 	bl	80119c8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800e742:	78fb      	ldrb	r3, [r7, #3]
 800e744:	1c5a      	adds	r2, r3, #1
 800e746:	70fa      	strb	r2, [r7, #3]
 800e748:	461a      	mov	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4413      	add	r3, r2
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800e754:	78fb      	ldrb	r3, [r7, #3]
 800e756:	1c5a      	adds	r2, r3, #1
 800e758:	70fa      	strb	r2, [r7, #3]
 800e75a:	461a      	mov	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4413      	add	r3, r2
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	021b      	lsls	r3, r3, #8
 800e764:	b21a      	sxth	r2, r3
 800e766:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800e76a:	4313      	orrs	r3, r2
 800e76c:	b21b      	sxth	r3, r3
 800e76e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800e772:	78fb      	ldrb	r3, [r7, #3]
 800e774:	1c5a      	adds	r2, r3, #1
 800e776:	70fa      	strb	r2, [r7, #3]
 800e778:	461a      	mov	r2, r3
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800e784:	4b2e      	ldr	r3, [pc, #184]	; (800e840 <ProcessMacCommands+0x938>)
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800e78c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e790:	4618      	mov	r0, r3
 800e792:	f002 fd35 	bl	8011200 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800e796:	e042      	b.n	800e81e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800e79e:	78fb      	ldrb	r3, [r7, #3]
 800e7a0:	1c5a      	adds	r2, r3, #1
 800e7a2:	70fa      	strb	r2, [r7, #3]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e7b0:	78fb      	ldrb	r3, [r7, #3]
 800e7b2:	1c5a      	adds	r2, r3, #1
 800e7b4:	70fa      	strb	r2, [r7, #3]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	021b      	lsls	r3, r3, #8
 800e7c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e7ca:	78fb      	ldrb	r3, [r7, #3]
 800e7cc:	1c5a      	adds	r2, r3, #1
 800e7ce:	70fa      	strb	r2, [r7, #3]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	041b      	lsls	r3, r3, #16
 800e7da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800e7e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7e8:	2264      	movs	r2, #100	; 0x64
 800e7ea:	fb02 f303 	mul.w	r3, r2, r3
 800e7ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800e7f2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800e7f6:	f002 fd16 	bl	8011226 <LoRaMacClassBBeaconFreqReq>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d003      	beq.n	800e808 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800e800:	2301      	movs	r3, #1
 800e802:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800e806:	e002      	b.n	800e80e <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800e80e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e812:	2201      	movs	r2, #1
 800e814:	4619      	mov	r1, r3
 800e816:	2013      	movs	r0, #19
 800e818:	f002 fe3a 	bl	8011490 <LoRaMacCommandsAddCmd>
                }
                break;
 800e81c:	bf00      	nop
    while( macIndex < commandsSize )
 800e81e:	78fa      	ldrb	r2, [r7, #3]
 800e820:	78bb      	ldrb	r3, [r7, #2]
 800e822:	429a      	cmp	r2, r3
 800e824:	f4ff ab88 	bcc.w	800df38 <ProcessMacCommands+0x30>
 800e828:	e002      	b.n	800e830 <ProcessMacCommands+0x928>
            return;
 800e82a:	bf00      	nop
 800e82c:	e000      	b.n	800e830 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800e82e:	bf00      	nop
        }
    }
}
 800e830:	378c      	adds	r7, #140	; 0x8c
 800e832:	46bd      	mov	sp, r7
 800e834:	bd90      	pop	{r4, r7, pc}
 800e836:	bf00      	nop
 800e838:	12d53d80 	.word	0x12d53d80
 800e83c:	20000454 	.word	0x20000454
 800e840:	20001768 	.word	0x20001768

0800e844 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b08e      	sub	sp, #56	; 0x38
 800e848:	af02      	add	r7, sp, #8
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	607a      	str	r2, [r7, #4]
 800e84e:	461a      	mov	r2, r3
 800e850:	460b      	mov	r3, r1
 800e852:	72fb      	strb	r3, [r7, #11]
 800e854:	4613      	mov	r3, r2
 800e856:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e858:	2303      	movs	r3, #3
 800e85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e85e:	4b65      	ldr	r3, [pc, #404]	; (800e9f4 <Send+0x1b0>)
 800e860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e864:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800e868:	4b62      	ldr	r3, [pc, #392]	; (800e9f4 <Send+0x1b0>)
 800e86a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e86e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e872:	4b60      	ldr	r3, [pc, #384]	; (800e9f4 <Send+0x1b0>)
 800e874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e876:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e878:	4b5e      	ldr	r3, [pc, #376]	; (800e9f4 <Send+0x1b0>)
 800e87a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d101      	bne.n	800e886 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e882:	2307      	movs	r3, #7
 800e884:	e0b1      	b.n	800e9ea <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e886:	4b5b      	ldr	r3, [pc, #364]	; (800e9f4 <Send+0x1b0>)
 800e888:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e890:	4b58      	ldr	r3, [pc, #352]	; (800e9f4 <Send+0x1b0>)
 800e892:	2200      	movs	r2, #0
 800e894:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800e89c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8a0:	f36f 0303 	bfc	r3, #0, #4
 800e8a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e8a8:	4b52      	ldr	r3, [pc, #328]	; (800e9f4 <Send+0x1b0>)
 800e8aa:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800e8ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8b2:	f362 13c7 	bfi	r3, r2, #7, #1
 800e8b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e8ba:	4b4e      	ldr	r3, [pc, #312]	; (800e9f4 <Send+0x1b0>)
 800e8bc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d106      	bne.n	800e8d2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800e8c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8c8:	f043 0310 	orr.w	r3, r3, #16
 800e8cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800e8d0:	e005      	b.n	800e8de <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800e8d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8d6:	f36f 1304 	bfc	r3, #4, #1
 800e8da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e8de:	4b45      	ldr	r3, [pc, #276]	; (800e9f4 <Send+0x1b0>)
 800e8e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d005      	beq.n	800e8f4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800e8e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8ec:	f043 0320 	orr.w	r3, r3, #32
 800e8f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800e8f4:	4b3f      	ldr	r3, [pc, #252]	; (800e9f4 <Send+0x1b0>)
 800e8f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800e8fa:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e900:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e904:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bf14      	ite	ne
 800e90e:	2301      	movne	r3, #1
 800e910:	2300      	moveq	r3, #0
 800e912:	b2db      	uxtb	r3, r3
 800e914:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e916:	4b37      	ldr	r3, [pc, #220]	; (800e9f4 <Send+0x1b0>)
 800e918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800e91c:	4b36      	ldr	r3, [pc, #216]	; (800e9f8 <Send+0x1b4>)
 800e91e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800e922:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800e924:	4b34      	ldr	r3, [pc, #208]	; (800e9f8 <Send+0x1b4>)
 800e926:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800e92a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e92c:	4b31      	ldr	r3, [pc, #196]	; (800e9f4 <Send+0x1b0>)
 800e92e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e932:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e936:	4b2f      	ldr	r3, [pc, #188]	; (800e9f4 <Send+0x1b0>)
 800e938:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800e93c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e940:	4b2c      	ldr	r3, [pc, #176]	; (800e9f4 <Send+0x1b0>)
 800e942:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800e94a:	4b2a      	ldr	r3, [pc, #168]	; (800e9f4 <Send+0x1b0>)
 800e94c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e958:	f107 0014 	add.w	r0, r7, #20
 800e95c:	4a27      	ldr	r2, [pc, #156]	; (800e9fc <Send+0x1b8>)
 800e95e:	4928      	ldr	r1, [pc, #160]	; (800ea00 <Send+0x1bc>)
 800e960:	f002 fb7c 	bl	801105c <LoRaMacAdrCalcNext>
 800e964:	4603      	mov	r3, r0
 800e966:	461a      	mov	r2, r3
 800e968:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e96c:	f362 1386 	bfi	r3, r2, #6, #1
 800e970:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800e974:	7afa      	ldrb	r2, [r7, #11]
 800e976:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e97a:	893b      	ldrh	r3, [r7, #8]
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f000 fc21 	bl	800f1c8 <PrepareFrame>
 800e986:	4603      	mov	r3, r0
 800e988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e98c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e990:	2b00      	cmp	r3, #0
 800e992:	d003      	beq.n	800e99c <Send+0x158>
 800e994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e998:	2b0a      	cmp	r3, #10
 800e99a:	d107      	bne.n	800e9ac <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800e99c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f000 f96d 	bl	800ec80 <ScheduleTx>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800e9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00a      	beq.n	800e9ca <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e9b4:	4a0f      	ldr	r2, [pc, #60]	; (800e9f4 <Send+0x1b0>)
 800e9b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e9ba:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e9be:	4a0d      	ldr	r2, [pc, #52]	; (800e9f4 <Send+0x1b0>)
 800e9c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e9c4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800e9c8:	e00d      	b.n	800e9e6 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800e9ca:	4b0a      	ldr	r3, [pc, #40]	; (800e9f4 <Send+0x1b0>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	4a07      	ldr	r2, [pc, #28]	; (800e9f4 <Send+0x1b0>)
 800e9d6:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e9d8:	f002 fdd2 	bl	8011580 <LoRaMacCommandsRemoveNoneStickyCmds>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d001      	beq.n	800e9e6 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e9e2:	2313      	movs	r3, #19
 800e9e4:	e001      	b.n	800e9ea <Send+0x1a6>
        }
    }
    return status;
 800e9e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3730      	adds	r7, #48	; 0x30
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	2000095c 	.word	0x2000095c
 800e9f8:	20000454 	.word	0x20000454
 800e9fc:	20000994 	.word	0x20000994
 800ea00:	20000995 	.word	0x20000995

0800ea04 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800ea16:	2301      	movs	r3, #1
 800ea18:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800ea1a:	79fb      	ldrb	r3, [r7, #7]
 800ea1c:	2bff      	cmp	r3, #255	; 0xff
 800ea1e:	d129      	bne.n	800ea74 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800ea20:	2000      	movs	r0, #0
 800ea22:	f7ff f941 	bl	800dca8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800ea26:	4b1a      	ldr	r3, [pc, #104]	; (800ea90 <SendReJoinReq+0x8c>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800ea2e:	4b18      	ldr	r3, [pc, #96]	; (800ea90 <SendReJoinReq+0x8c>)
 800ea30:	4a18      	ldr	r2, [pc, #96]	; (800ea94 <SendReJoinReq+0x90>)
 800ea32:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ea36:	4b16      	ldr	r3, [pc, #88]	; (800ea90 <SendReJoinReq+0x8c>)
 800ea38:	22ff      	movs	r2, #255	; 0xff
 800ea3a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ea3e:	7b3b      	ldrb	r3, [r7, #12]
 800ea40:	f36f 1347 	bfc	r3, #5, #3
 800ea44:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800ea46:	7b3a      	ldrb	r2, [r7, #12]
 800ea48:	4b11      	ldr	r3, [pc, #68]	; (800ea90 <SendReJoinReq+0x8c>)
 800ea4a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ea4e:	f7fc fc85 	bl	800b35c <SecureElementGetJoinEui>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2208      	movs	r2, #8
 800ea56:	4619      	mov	r1, r3
 800ea58:	480f      	ldr	r0, [pc, #60]	; (800ea98 <SendReJoinReq+0x94>)
 800ea5a:	f006 fd9e 	bl	801559a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ea5e:	f7fc fc5b 	bl	800b318 <SecureElementGetDevEui>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2208      	movs	r2, #8
 800ea66:	4619      	mov	r1, r3
 800ea68:	480c      	ldr	r0, [pc, #48]	; (800ea9c <SendReJoinReq+0x98>)
 800ea6a:	f006 fd96 	bl	801559a <memcpy1>

            allowDelayedTx = false;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]

            break;
 800ea72:	e002      	b.n	800ea7a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ea74:	2302      	movs	r3, #2
 800ea76:	73bb      	strb	r3, [r7, #14]
            break;
 800ea78:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f000 f8ff 	bl	800ec80 <ScheduleTx>
 800ea82:	4603      	mov	r3, r0
 800ea84:	73bb      	strb	r3, [r7, #14]
    return status;
 800ea86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	20000454 	.word	0x20000454
 800ea94:	20000456 	.word	0x20000456
 800ea98:	20000562 	.word	0x20000562
 800ea9c:	2000056a 	.word	0x2000056a

0800eaa0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800eaa4:	f002 fb49 	bl	801113a <LoRaMacClassBIsBeaconExpected>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d001      	beq.n	800eab2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800eaae:	230e      	movs	r3, #14
 800eab0:	e013      	b.n	800eada <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800eab2:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <CheckForClassBCollision+0x40>)
 800eab4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d10d      	bne.n	800ead8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800eabc:	f002 fb44 	bl	8011148 <LoRaMacClassBIsPingExpected>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800eac6:	230f      	movs	r3, #15
 800eac8:	e007      	b.n	800eada <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800eaca:	f002 fb44 	bl	8011156 <LoRaMacClassBIsMulticastExpected>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d001      	beq.n	800ead8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ead4:	230f      	movs	r3, #15
 800ead6:	e000      	b.n	800eada <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	2000095c 	.word	0x2000095c

0800eae4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800eae4:	b590      	push	{r4, r7, lr}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eaea:	4b2d      	ldr	r3, [pc, #180]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eaec:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800eaf0:	4b2b      	ldr	r3, [pc, #172]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eaf2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800eaf6:	4b2a      	ldr	r3, [pc, #168]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eaf8:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800eafc:	4b28      	ldr	r3, [pc, #160]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eafe:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800eb02:	4b27      	ldr	r3, [pc, #156]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb04:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800eb08:	b25b      	sxtb	r3, r3
 800eb0a:	f004 fba3 	bl	8013254 <RegionApplyDrOffset>
 800eb0e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eb10:	b259      	sxtb	r1, r3
 800eb12:	4b23      	ldr	r3, [pc, #140]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb14:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800eb18:	4b21      	ldr	r3, [pc, #132]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb1c:	4821      	ldr	r0, [pc, #132]	; (800eba4 <ComputeRxWindowParameters+0xc0>)
 800eb1e:	9000      	str	r0, [sp, #0]
 800eb20:	4620      	mov	r0, r4
 800eb22:	f004 faa7 	bl	8013074 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eb26:	4b1e      	ldr	r3, [pc, #120]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb28:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800eb2c:	4b1c      	ldr	r3, [pc, #112]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb2e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800eb32:	b259      	sxtb	r1, r3
 800eb34:	4b1a      	ldr	r3, [pc, #104]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb36:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800eb3a:	4b19      	ldr	r3, [pc, #100]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb3e:	4c1a      	ldr	r4, [pc, #104]	; (800eba8 <ComputeRxWindowParameters+0xc4>)
 800eb40:	9400      	str	r4, [sp, #0]
 800eb42:	f004 fa97 	bl	8013074 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800eb46:	4b16      	ldr	r3, [pc, #88]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb4a:	4a18      	ldr	r2, [pc, #96]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb4c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800eb50:	4413      	add	r3, r2
 800eb52:	4a16      	ldr	r2, [pc, #88]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb54:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800eb58:	4b11      	ldr	r3, [pc, #68]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb5c:	4a13      	ldr	r2, [pc, #76]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb5e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800eb62:	4413      	add	r3, r2
 800eb64:	4a11      	ldr	r2, [pc, #68]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb66:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800eb6a:	4b0d      	ldr	r3, [pc, #52]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb6c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d111      	bne.n	800eb98 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800eb74:	4b0a      	ldr	r3, [pc, #40]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb78:	4a0c      	ldr	r2, [pc, #48]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb7a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800eb7e:	4413      	add	r3, r2
 800eb80:	4a0a      	ldr	r2, [pc, #40]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb82:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800eb86:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <ComputeRxWindowParameters+0xbc>)
 800eb88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb8a:	4a08      	ldr	r2, [pc, #32]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb8c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800eb90:	4413      	add	r3, r2
 800eb92:	4a06      	ldr	r2, [pc, #24]	; (800ebac <ComputeRxWindowParameters+0xc8>)
 800eb94:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800eb98:	bf00      	nop
 800eb9a:	3704      	adds	r7, #4
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd90      	pop	{r4, r7, pc}
 800eba0:	2000095c 	.word	0x2000095c
 800eba4:	2000080c 	.word	0x2000080c
 800eba8:	20000820 	.word	0x20000820
 800ebac:	20000454 	.word	0x20000454

0800ebb0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ebba:	4b13      	ldr	r3, [pc, #76]	; (800ec08 <VerifyTxFrame+0x58>)
 800ebbc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d01b      	beq.n	800ebfc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ebc4:	1d3b      	adds	r3, r7, #4
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f002 fd20 	bl	801160c <LoRaMacCommandsGetSizeSerializedCmds>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ebd2:	2313      	movs	r3, #19
 800ebd4:	e013      	b.n	800ebfe <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ebd6:	4b0d      	ldr	r3, [pc, #52]	; (800ec0c <VerifyTxFrame+0x5c>)
 800ebd8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800ebdc:	4a0a      	ldr	r2, [pc, #40]	; (800ec08 <VerifyTxFrame+0x58>)
 800ebde:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	b2d2      	uxtb	r2, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff f956 	bl	800de98 <ValidatePayloadLength>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f083 0301 	eor.w	r3, r3, #1
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d001      	beq.n	800ebfc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ebf8:	2308      	movs	r3, #8
 800ebfa:	e000      	b.n	800ebfe <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	2000095c 	.word	0x2000095c
 800ec0c:	20000454 	.word	0x20000454

0800ec10 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ec16:	4b18      	ldr	r3, [pc, #96]	; (800ec78 <SerializeTxFrame+0x68>)
 800ec18:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d002      	beq.n	800ec26 <SerializeTxFrame+0x16>
 800ec20:	2b04      	cmp	r3, #4
 800ec22:	d011      	beq.n	800ec48 <SerializeTxFrame+0x38>
 800ec24:	e021      	b.n	800ec6a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ec26:	4815      	ldr	r0, [pc, #84]	; (800ec7c <SerializeTxFrame+0x6c>)
 800ec28:	f004 f823 	bl	8012c72 <LoRaMacSerializerJoinRequest>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ec30:	79fb      	ldrb	r3, [r7, #7]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec36:	2311      	movs	r3, #17
 800ec38:	e01a      	b.n	800ec70 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ec3a:	4b0f      	ldr	r3, [pc, #60]	; (800ec78 <SerializeTxFrame+0x68>)
 800ec3c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	4b0d      	ldr	r3, [pc, #52]	; (800ec78 <SerializeTxFrame+0x68>)
 800ec44:	801a      	strh	r2, [r3, #0]
            break;
 800ec46:	e012      	b.n	800ec6e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ec48:	480c      	ldr	r0, [pc, #48]	; (800ec7c <SerializeTxFrame+0x6c>)
 800ec4a:	f004 f894 	bl	8012d76 <LoRaMacSerializerData>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec58:	2311      	movs	r3, #17
 800ec5a:	e009      	b.n	800ec70 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ec5c:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <SerializeTxFrame+0x68>)
 800ec5e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	4b04      	ldr	r3, [pc, #16]	; (800ec78 <SerializeTxFrame+0x68>)
 800ec66:	801a      	strh	r2, [r3, #0]
            break;
 800ec68:	e001      	b.n	800ec6e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e000      	b.n	800ec70 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20000454 	.word	0x20000454
 800ec7c:	2000055c 	.word	0x2000055c

0800ec80 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b090      	sub	sp, #64	; 0x40
 800ec84:	af02      	add	r7, sp, #8
 800ec86:	4603      	mov	r3, r0
 800ec88:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800ec90:	f7ff ff06 	bl	800eaa0 <CheckForClassBCollision>
 800ec94:	4603      	mov	r3, r0
 800ec96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ec9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <ScheduleTx+0x28>
    {
        return status;
 800eca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eca6:	e08f      	b.n	800edc8 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800eca8:	f000 f8fa 	bl	800eea0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800ecac:	f7ff ffb0 	bl	800ec10 <SerializeTxFrame>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800ecb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d002      	beq.n	800ecc4 <ScheduleTx+0x44>
    {
        return status;
 800ecbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecc2:	e081      	b.n	800edc8 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800ecc4:	4b42      	ldr	r3, [pc, #264]	; (800edd0 <ScheduleTx+0x150>)
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ecca:	4b41      	ldr	r3, [pc, #260]	; (800edd0 <ScheduleTx+0x150>)
 800eccc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ecd0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800ecd2:	4b3f      	ldr	r3, [pc, #252]	; (800edd0 <ScheduleTx+0x150>)
 800ecd4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800ecd8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ecda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecde:	4618      	mov	r0, r3
 800ece0:	f009 ff76 	bl	8018bd0 <SysTimeGetMcuTime>
 800ece4:	4638      	mov	r0, r7
 800ece6:	4b3a      	ldr	r3, [pc, #232]	; (800edd0 <ScheduleTx+0x150>)
 800ece8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800ecec:	9200      	str	r2, [sp, #0]
 800ecee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ecf2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ecf6:	ca06      	ldmia	r2, {r1, r2}
 800ecf8:	f009 fecb 	bl	8018a92 <SysTimeSub>
 800ecfc:	f107 0320 	add.w	r3, r7, #32
 800ed00:	463a      	mov	r2, r7
 800ed02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed06:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800ed0a:	4b31      	ldr	r3, [pc, #196]	; (800edd0 <ScheduleTx+0x150>)
 800ed0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800ed10:	2300      	movs	r3, #0
 800ed12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800ed16:	2301      	movs	r3, #1
 800ed18:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800ed1a:	4b2e      	ldr	r3, [pc, #184]	; (800edd4 <ScheduleTx+0x154>)
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ed20:	4b2b      	ldr	r3, [pc, #172]	; (800edd0 <ScheduleTx+0x150>)
 800ed22:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d104      	bne.n	800ed34 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800ed30:	2300      	movs	r3, #0
 800ed32:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800ed34:	4b26      	ldr	r3, [pc, #152]	; (800edd0 <ScheduleTx+0x150>)
 800ed36:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed3a:	f107 0114 	add.w	r1, r7, #20
 800ed3e:	4b26      	ldr	r3, [pc, #152]	; (800edd8 <ScheduleTx+0x158>)
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	4b26      	ldr	r3, [pc, #152]	; (800eddc <ScheduleTx+0x15c>)
 800ed44:	4a26      	ldr	r2, [pc, #152]	; (800ede0 <ScheduleTx+0x160>)
 800ed46:	f004 fa5b 	bl	8013200 <RegionNextChannel>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800ed50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d022      	beq.n	800ed9e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800ed58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed5c:	2b0b      	cmp	r3, #11
 800ed5e:	d11b      	bne.n	800ed98 <ScheduleTx+0x118>
 800ed60:	7bfb      	ldrb	r3, [r7, #15]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d018      	beq.n	800ed98 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800ed66:	4b1b      	ldr	r3, [pc, #108]	; (800edd4 <ScheduleTx+0x154>)
 800ed68:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d011      	beq.n	800ed94 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800ed70:	4b18      	ldr	r3, [pc, #96]	; (800edd4 <ScheduleTx+0x154>)
 800ed72:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ed76:	f043 0320 	orr.w	r3, r3, #32
 800ed7a:	4a16      	ldr	r2, [pc, #88]	; (800edd4 <ScheduleTx+0x154>)
 800ed7c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800ed80:	4b14      	ldr	r3, [pc, #80]	; (800edd4 <ScheduleTx+0x154>)
 800ed82:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800ed86:	4619      	mov	r1, r3
 800ed88:	4816      	ldr	r0, [pc, #88]	; (800ede4 <ScheduleTx+0x164>)
 800ed8a:	f00a fcad 	bl	80196e8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800ed8e:	4815      	ldr	r0, [pc, #84]	; (800ede4 <ScheduleTx+0x164>)
 800ed90:	f00a fbcc 	bl	801952c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800ed94:	2300      	movs	r3, #0
 800ed96:	e017      	b.n	800edc8 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800ed98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed9c:	e014      	b.n	800edc8 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800ed9e:	f7ff fea1 	bl	800eae4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800eda2:	f7ff ff05 	bl	800ebb0 <VerifyTxFrame>
 800eda6:	4603      	mov	r3, r0
 800eda8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800edac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <ScheduleTx+0x13a>
    {
        return status;
 800edb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edb8:	e006      	b.n	800edc8 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800edba:	4b06      	ldr	r3, [pc, #24]	; (800edd4 <ScheduleTx+0x154>)
 800edbc:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 fb1d 	bl	800f400 <SendFrameOnChannel>
 800edc6:	4603      	mov	r3, r0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3738      	adds	r7, #56	; 0x38
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	2000095c 	.word	0x2000095c
 800edd4:	20000454 	.word	0x20000454
 800edd8:	2000098c 	.word	0x2000098c
 800eddc:	200008d8 	.word	0x200008d8
 800ede0:	20000869 	.word	0x20000869
 800ede4:	200007bc 	.word	0x200007bc

0800ede8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	460a      	mov	r2, r1
 800edf2:	71fb      	strb	r3, [r7, #7]
 800edf4:	4613      	mov	r3, r2
 800edf6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800edf8:	2313      	movs	r3, #19
 800edfa:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ee00:	4b25      	ldr	r3, [pc, #148]	; (800ee98 <SecureFrame+0xb0>)
 800ee02:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <SecureFrame+0x28>
 800ee0a:	2b04      	cmp	r3, #4
 800ee0c:	d011      	beq.n	800ee32 <SecureFrame+0x4a>
 800ee0e:	e03b      	b.n	800ee88 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ee10:	4822      	ldr	r0, [pc, #136]	; (800ee9c <SecureFrame+0xb4>)
 800ee12:	f003 faf7 	bl	8012404 <LoRaMacCryptoPrepareJoinRequest>
 800ee16:	4603      	mov	r3, r0
 800ee18:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ee1a:	7bfb      	ldrb	r3, [r7, #15]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d001      	beq.n	800ee24 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee20:	2311      	movs	r3, #17
 800ee22:	e034      	b.n	800ee8e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ee24:	4b1c      	ldr	r3, [pc, #112]	; (800ee98 <SecureFrame+0xb0>)
 800ee26:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	4b1a      	ldr	r3, [pc, #104]	; (800ee98 <SecureFrame+0xb0>)
 800ee2e:	801a      	strh	r2, [r3, #0]
            break;
 800ee30:	e02c      	b.n	800ee8c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ee32:	f107 0308 	add.w	r3, r7, #8
 800ee36:	4618      	mov	r0, r3
 800ee38:	f003 fa0a 	bl	8012250 <LoRaMacCryptoGetFCntUp>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ee42:	2312      	movs	r3, #18
 800ee44:	e023      	b.n	800ee8e <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ee46:	4b14      	ldr	r3, [pc, #80]	; (800ee98 <SecureFrame+0xb0>)
 800ee48:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d104      	bne.n	800ee5a <SecureFrame+0x72>
 800ee50:	4b11      	ldr	r3, [pc, #68]	; (800ee98 <SecureFrame+0xb0>)
 800ee52:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d902      	bls.n	800ee60 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ee60:	68b8      	ldr	r0, [r7, #8]
 800ee62:	79ba      	ldrb	r2, [r7, #6]
 800ee64:	79f9      	ldrb	r1, [r7, #7]
 800ee66:	4b0d      	ldr	r3, [pc, #52]	; (800ee9c <SecureFrame+0xb4>)
 800ee68:	f003 fbe4 	bl	8012634 <LoRaMacCryptoSecureMessage>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee76:	2311      	movs	r3, #17
 800ee78:	e009      	b.n	800ee8e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ee7a:	4b07      	ldr	r3, [pc, #28]	; (800ee98 <SecureFrame+0xb0>)
 800ee7c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <SecureFrame+0xb0>)
 800ee84:	801a      	strh	r2, [r3, #0]
            break;
 800ee86:	e001      	b.n	800ee8c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee88:	2303      	movs	r3, #3
 800ee8a:	e000      	b.n	800ee8e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	20000454 	.word	0x20000454
 800ee9c:	2000055c 	.word	0x2000055c

0800eea0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800eea0:	b480      	push	{r7}
 800eea2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800eea4:	4b09      	ldr	r3, [pc, #36]	; (800eecc <CalculateBackOff+0x2c>)
 800eea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d10a      	bne.n	800eec2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800eeac:	4b07      	ldr	r3, [pc, #28]	; (800eecc <CalculateBackOff+0x2c>)
 800eeae:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	4a06      	ldr	r2, [pc, #24]	; (800eed0 <CalculateBackOff+0x30>)
 800eeb6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800eeba:	fb02 f303 	mul.w	r3, r2, r3
 800eebe:	4a03      	ldr	r2, [pc, #12]	; (800eecc <CalculateBackOff+0x2c>)
 800eec0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800eec2:	bf00      	nop
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bc80      	pop	{r7}
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	2000095c 	.word	0x2000095c
 800eed0:	20000454 	.word	0x20000454

0800eed4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	7139      	strb	r1, [r7, #4]
 800eede:	71fb      	strb	r3, [r7, #7]
 800eee0:	4613      	mov	r3, r2
 800eee2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800eee4:	79fb      	ldrb	r3, [r7, #7]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <RemoveMacCommands+0x1c>
 800eeea:	79fb      	ldrb	r3, [r7, #7]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d10d      	bne.n	800ef0c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800eef0:	79bb      	ldrb	r3, [r7, #6]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d108      	bne.n	800ef08 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800eef6:	793b      	ldrb	r3, [r7, #4]
 800eef8:	f003 0320 	and.w	r3, r3, #32
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d004      	beq.n	800ef0c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800ef02:	f002 fb61 	bl	80115c8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800ef06:	e001      	b.n	800ef0c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800ef08:	f002 fb5e 	bl	80115c8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800ef14:	b5b0      	push	{r4, r5, r7, lr}
 800ef16:	b08e      	sub	sp, #56	; 0x38
 800ef18:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800ef1a:	4b68      	ldr	r3, [pc, #416]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800ef22:	4b66      	ldr	r3, [pc, #408]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800ef28:	4b65      	ldr	r3, [pc, #404]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800ef30:	4b63      	ldr	r3, [pc, #396]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800ef32:	2201      	movs	r2, #1
 800ef34:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800ef38:	4b61      	ldr	r3, [pc, #388]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800ef40:	4b5f      	ldr	r3, [pc, #380]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800ef48:	4b5c      	ldr	r3, [pc, #368]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800ef50:	4b5a      	ldr	r3, [pc, #360]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef52:	2201      	movs	r2, #1
 800ef54:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ef58:	4b58      	ldr	r3, [pc, #352]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef5a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800ef5e:	4b57      	ldr	r3, [pc, #348]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ef64:	4b55      	ldr	r3, [pc, #340]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef66:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800ef6a:	4b54      	ldr	r3, [pc, #336]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800ef70:	4b52      	ldr	r3, [pc, #328]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef72:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800ef76:	4b51      	ldr	r3, [pc, #324]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ef7c:	4b4f      	ldr	r3, [pc, #316]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef7e:	4a4f      	ldr	r2, [pc, #316]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef80:	3364      	adds	r3, #100	; 0x64
 800ef82:	32a4      	adds	r2, #164	; 0xa4
 800ef84:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef88:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ef8c:	4b4b      	ldr	r3, [pc, #300]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef8e:	4a4b      	ldr	r2, [pc, #300]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef90:	336c      	adds	r3, #108	; 0x6c
 800ef92:	32ac      	adds	r2, #172	; 0xac
 800ef94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef98:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800ef9c:	4b47      	ldr	r3, [pc, #284]	; (800f0bc <ResetMacParameters+0x1a8>)
 800ef9e:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800efa2:	4b46      	ldr	r3, [pc, #280]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800efa8:	4b44      	ldr	r3, [pc, #272]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efaa:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800efae:	4b43      	ldr	r3, [pc, #268]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efb0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800efb4:	4b41      	ldr	r3, [pc, #260]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800efba:	4a40      	ldr	r2, [pc, #256]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efbc:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800efbe:	4b3f      	ldr	r3, [pc, #252]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efc4:	4a3d      	ldr	r2, [pc, #244]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efc6:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800efc8:	4b3d      	ldr	r3, [pc, #244]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800efca:	2200      	movs	r2, #0
 800efcc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800efd0:	4b3a      	ldr	r3, [pc, #232]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800efd8:	2301      	movs	r3, #1
 800efda:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800efdc:	4b39      	ldr	r3, [pc, #228]	; (800f0c4 <ResetMacParameters+0x1b0>)
 800efde:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800efe0:	4b39      	ldr	r3, [pc, #228]	; (800f0c8 <ResetMacParameters+0x1b4>)
 800efe2:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800efe4:	4b35      	ldr	r3, [pc, #212]	; (800f0bc <ResetMacParameters+0x1a8>)
 800efe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efea:	1d3a      	adds	r2, r7, #4
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f003 fff2 	bl	8012fd8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800eff4:	4b32      	ldr	r3, [pc, #200]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800effc:	4b30      	ldr	r3, [pc, #192]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800effe:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f002:	4b2f      	ldr	r3, [pc, #188]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f004:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f008:	4b2c      	ldr	r3, [pc, #176]	; (800f0bc <ResetMacParameters+0x1a8>)
 800f00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f00c:	4a2c      	ldr	r2, [pc, #176]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f00e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f012:	4b2a      	ldr	r3, [pc, #168]	; (800f0bc <ResetMacParameters+0x1a8>)
 800f014:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f018:	4b29      	ldr	r3, [pc, #164]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f01a:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f01e:	4b27      	ldr	r3, [pc, #156]	; (800f0bc <ResetMacParameters+0x1a8>)
 800f020:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f024:	4b26      	ldr	r3, [pc, #152]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f026:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f02a:	4b25      	ldr	r3, [pc, #148]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f032:	4b23      	ldr	r3, [pc, #140]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f034:	2201      	movs	r2, #1
 800f036:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f03a:	4a21      	ldr	r2, [pc, #132]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f03c:	4b20      	ldr	r3, [pc, #128]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f03e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800f042:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800f046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f04a:	682b      	ldr	r3, [r5, #0]
 800f04c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f04e:	4b1c      	ldr	r3, [pc, #112]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f050:	2201      	movs	r2, #1
 800f052:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f056:	4b1a      	ldr	r3, [pc, #104]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f058:	2202      	movs	r2, #2
 800f05a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f05e:	2300      	movs	r3, #0
 800f060:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800f062:	2300      	movs	r3, #0
 800f064:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800f066:	4b16      	ldr	r3, [pc, #88]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f068:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d009      	beq.n	800f084 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f070:	4b13      	ldr	r3, [pc, #76]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f072:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f07a:	4b11      	ldr	r3, [pc, #68]	; (800f0c0 <ResetMacParameters+0x1ac>)
 800f07c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f080:	691b      	ldr	r3, [r3, #16]
 800f082:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f084:	4b11      	ldr	r3, [pc, #68]	; (800f0cc <ResetMacParameters+0x1b8>)
 800f086:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f088:	4b11      	ldr	r3, [pc, #68]	; (800f0d0 <ResetMacParameters+0x1bc>)
 800f08a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f08c:	4b11      	ldr	r3, [pc, #68]	; (800f0d4 <ResetMacParameters+0x1c0>)
 800f08e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f090:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <ResetMacParameters+0x1c4>)
 800f092:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f094:	4b11      	ldr	r3, [pc, #68]	; (800f0dc <ResetMacParameters+0x1c8>)
 800f096:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f098:	4b11      	ldr	r3, [pc, #68]	; (800f0e0 <ResetMacParameters+0x1cc>)
 800f09a:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f09c:	4b11      	ldr	r3, [pc, #68]	; (800f0e4 <ResetMacParameters+0x1d0>)
 800f09e:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f0a0:	4b11      	ldr	r3, [pc, #68]	; (800f0e8 <ResetMacParameters+0x1d4>)
 800f0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f0a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f0a8:	f107 0310 	add.w	r3, r7, #16
 800f0ac:	4a0f      	ldr	r2, [pc, #60]	; (800f0ec <ResetMacParameters+0x1d8>)
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f001 ffec 	bl	801108c <LoRaMacClassBInit>
}
 800f0b4:	bf00      	nop
 800f0b6:	3738      	adds	r7, #56	; 0x38
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bdb0      	pop	{r4, r5, r7, pc}
 800f0bc:	2000095c 	.word	0x2000095c
 800f0c0:	20000454 	.word	0x20000454
 800f0c4:	20000b34 	.word	0x20000b34
 800f0c8:	20000bc8 	.word	0x20000bc8
 800f0cc:	200008b4 	.word	0x200008b4
 800f0d0:	20000870 	.word	0x20000870
 800f0d4:	200008a0 	.word	0x200008a0
 800f0d8:	200008d5 	.word	0x200008d5
 800f0dc:	20000a28 	.word	0x20000a28
 800f0e0:	2000099c 	.word	0x2000099c
 800f0e4:	200009a0 	.word	0x200009a0
 800f0e8:	20000a2c 	.word	0x20000a2c
 800f0ec:	20000c90 	.word	0x20000c90

0800f0f0 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f00a fa84 	bl	8019608 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f100:	4b0e      	ldr	r3, [pc, #56]	; (800f13c <RxWindowSetup+0x4c>)
 800f102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f104:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f106:	4b0e      	ldr	r3, [pc, #56]	; (800f140 <RxWindowSetup+0x50>)
 800f108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f10c:	4a0d      	ldr	r2, [pc, #52]	; (800f144 <RxWindowSetup+0x54>)
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	4618      	mov	r0, r3
 800f112:	f003 ffc9 	bl	80130a8 <RegionRxConfig>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00a      	beq.n	800f132 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f11c:	4b07      	ldr	r3, [pc, #28]	; (800f13c <RxWindowSetup+0x4c>)
 800f11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f120:	4a07      	ldr	r2, [pc, #28]	; (800f140 <RxWindowSetup+0x50>)
 800f122:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800f124:	4610      	mov	r0, r2
 800f126:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	7cda      	ldrb	r2, [r3, #19]
 800f12c:	4b06      	ldr	r3, [pc, #24]	; (800f148 <RxWindowSetup+0x58>)
 800f12e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	0801acfc 	.word	0x0801acfc
 800f140:	2000095c 	.word	0x2000095c
 800f144:	20000874 	.word	0x20000874
 800f148:	20000454 	.word	0x20000454

0800f14c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f14c:	b590      	push	{r4, r7, lr}
 800f14e:	b083      	sub	sp, #12
 800f150:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f152:	4b18      	ldr	r3, [pc, #96]	; (800f1b4 <OpenContinuousRxCWindow+0x68>)
 800f154:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f158:	4b16      	ldr	r3, [pc, #88]	; (800f1b4 <OpenContinuousRxCWindow+0x68>)
 800f15a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f15e:	b259      	sxtb	r1, r3
 800f160:	4b14      	ldr	r3, [pc, #80]	; (800f1b4 <OpenContinuousRxCWindow+0x68>)
 800f162:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f166:	4b13      	ldr	r3, [pc, #76]	; (800f1b4 <OpenContinuousRxCWindow+0x68>)
 800f168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f16a:	4c13      	ldr	r4, [pc, #76]	; (800f1b8 <OpenContinuousRxCWindow+0x6c>)
 800f16c:	9400      	str	r4, [sp, #0]
 800f16e:	f003 ff81 	bl	8013074 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f172:	4b12      	ldr	r3, [pc, #72]	; (800f1bc <OpenContinuousRxCWindow+0x70>)
 800f174:	2202      	movs	r2, #2
 800f176:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f17a:	4b10      	ldr	r3, [pc, #64]	; (800f1bc <OpenContinuousRxCWindow+0x70>)
 800f17c:	2201      	movs	r2, #1
 800f17e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f182:	4b0c      	ldr	r3, [pc, #48]	; (800f1b4 <OpenContinuousRxCWindow+0x68>)
 800f184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f188:	4a0d      	ldr	r2, [pc, #52]	; (800f1c0 <OpenContinuousRxCWindow+0x74>)
 800f18a:	490b      	ldr	r1, [pc, #44]	; (800f1b8 <OpenContinuousRxCWindow+0x6c>)
 800f18c:	4618      	mov	r0, r3
 800f18e:	f003 ff8b 	bl	80130a8 <RegionRxConfig>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d009      	beq.n	800f1ac <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800f198:	4b0a      	ldr	r3, [pc, #40]	; (800f1c4 <OpenContinuousRxCWindow+0x78>)
 800f19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19c:	2000      	movs	r0, #0
 800f19e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f1a0:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <OpenContinuousRxCWindow+0x70>)
 800f1a2:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800f1a6:	4b05      	ldr	r3, [pc, #20]	; (800f1bc <OpenContinuousRxCWindow+0x70>)
 800f1a8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800f1ac:	bf00      	nop
 800f1ae:	3704      	adds	r7, #4
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd90      	pop	{r4, r7, pc}
 800f1b4:	2000095c 	.word	0x2000095c
 800f1b8:	20000834 	.word	0x20000834
 800f1bc:	20000454 	.word	0x20000454
 800f1c0:	20000874 	.word	0x20000874
 800f1c4:	0801acfc 	.word	0x0801acfc

0800f1c8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b088      	sub	sp, #32
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	603b      	str	r3, [r7, #0]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f1d8:	4b82      	ldr	r3, [pc, #520]	; (800f3e4 <PrepareFrame+0x21c>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f1de:	4b81      	ldr	r3, [pc, #516]	; (800f3e4 <PrepareFrame+0x21c>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d101      	bne.n	800f1fc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f1fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f1fe:	461a      	mov	r2, r3
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	4879      	ldr	r0, [pc, #484]	; (800f3e8 <PrepareFrame+0x220>)
 800f204:	f006 f9c9 	bl	801559a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f20a:	b2da      	uxtb	r2, r3
 800f20c:	4b75      	ldr	r3, [pc, #468]	; (800f3e4 <PrepareFrame+0x21c>)
 800f20e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	781a      	ldrb	r2, [r3, #0]
 800f216:	4b73      	ldr	r3, [pc, #460]	; (800f3e4 <PrepareFrame+0x21c>)
 800f218:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b07      	cmp	r3, #7
 800f226:	f000 80b9 	beq.w	800f39c <PrepareFrame+0x1d4>
 800f22a:	2b07      	cmp	r3, #7
 800f22c:	f300 80d0 	bgt.w	800f3d0 <PrepareFrame+0x208>
 800f230:	2b02      	cmp	r3, #2
 800f232:	d006      	beq.n	800f242 <PrepareFrame+0x7a>
 800f234:	2b04      	cmp	r3, #4
 800f236:	f040 80cb 	bne.w	800f3d0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f23a:	4b6a      	ldr	r3, [pc, #424]	; (800f3e4 <PrepareFrame+0x21c>)
 800f23c:	2201      	movs	r2, #1
 800f23e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f242:	4b68      	ldr	r3, [pc, #416]	; (800f3e4 <PrepareFrame+0x21c>)
 800f244:	2204      	movs	r2, #4
 800f246:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f24a:	4b66      	ldr	r3, [pc, #408]	; (800f3e4 <PrepareFrame+0x21c>)
 800f24c:	4a67      	ldr	r2, [pc, #412]	; (800f3ec <PrepareFrame+0x224>)
 800f24e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f252:	4b64      	ldr	r3, [pc, #400]	; (800f3e4 <PrepareFrame+0x21c>)
 800f254:	22ff      	movs	r2, #255	; 0xff
 800f256:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	781a      	ldrb	r2, [r3, #0]
 800f25e:	4b61      	ldr	r3, [pc, #388]	; (800f3e4 <PrepareFrame+0x21c>)
 800f260:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f264:	4a5f      	ldr	r2, [pc, #380]	; (800f3e4 <PrepareFrame+0x21c>)
 800f266:	79fb      	ldrb	r3, [r7, #7]
 800f268:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800f26c:	4b60      	ldr	r3, [pc, #384]	; (800f3f0 <PrepareFrame+0x228>)
 800f26e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f272:	4a5c      	ldr	r2, [pc, #368]	; (800f3e4 <PrepareFrame+0x21c>)
 800f274:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	781a      	ldrb	r2, [r3, #0]
 800f27c:	4b59      	ldr	r3, [pc, #356]	; (800f3e4 <PrepareFrame+0x21c>)
 800f27e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800f282:	4b58      	ldr	r3, [pc, #352]	; (800f3e4 <PrepareFrame+0x21c>)
 800f284:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 800f288:	4b56      	ldr	r3, [pc, #344]	; (800f3e4 <PrepareFrame+0x21c>)
 800f28a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800f28e:	4b55      	ldr	r3, [pc, #340]	; (800f3e4 <PrepareFrame+0x21c>)
 800f290:	4a55      	ldr	r2, [pc, #340]	; (800f3e8 <PrepareFrame+0x220>)
 800f292:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f296:	f107 0318 	add.w	r3, r7, #24
 800f29a:	4618      	mov	r0, r3
 800f29c:	f002 ffd8 	bl	8012250 <LoRaMacCryptoGetFCntUp>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f2a6:	2312      	movs	r3, #18
 800f2a8:	e098      	b.n	800f3dc <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	4b4d      	ldr	r3, [pc, #308]	; (800f3e4 <PrepareFrame+0x21c>)
 800f2b0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 800f2b4:	4b4b      	ldr	r3, [pc, #300]	; (800f3e4 <PrepareFrame+0x21c>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 800f2bc:	4b49      	ldr	r3, [pc, #292]	; (800f3e4 <PrepareFrame+0x21c>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	4a47      	ldr	r2, [pc, #284]	; (800f3e4 <PrepareFrame+0x21c>)
 800f2c8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f2cc:	f107 0314 	add.w	r3, r7, #20
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f002 f99b 	bl	801160c <LoRaMacCommandsGetSizeSerializedCmds>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d001      	beq.n	800f2e0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2dc:	2313      	movs	r3, #19
 800f2de:	e07d      	b.n	800f3dc <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d076      	beq.n	800f3d4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800f2e6:	4b42      	ldr	r3, [pc, #264]	; (800f3f0 <PrepareFrame+0x228>)
 800f2e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fe fdab 	bl	800de48 <GetMaxAppPayloadWithoutFOptsLength>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f2f6:	4b3b      	ldr	r3, [pc, #236]	; (800f3e4 <PrepareFrame+0x21c>)
 800f2f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01d      	beq.n	800f33c <PrepareFrame+0x174>
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	2b0f      	cmp	r3, #15
 800f304:	d81a      	bhi.n	800f33c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800f306:	f107 0314 	add.w	r3, r7, #20
 800f30a:	4a3a      	ldr	r2, [pc, #232]	; (800f3f4 <PrepareFrame+0x22c>)
 800f30c:	4619      	mov	r1, r3
 800f30e:	200f      	movs	r0, #15
 800f310:	f002 f992 	bl	8011638 <LoRaMacCommandsSerializeCmds>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d001      	beq.n	800f31e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f31a:	2313      	movs	r3, #19
 800f31c:	e05e      	b.n	800f3dc <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f003 030f 	and.w	r3, r3, #15
 800f324:	b2d9      	uxtb	r1, r3
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	7813      	ldrb	r3, [r2, #0]
 800f32a:	f361 0303 	bfi	r3, r1, #0, #4
 800f32e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	781a      	ldrb	r2, [r3, #0]
 800f334:	4b2b      	ldr	r3, [pc, #172]	; (800f3e4 <PrepareFrame+0x21c>)
 800f336:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800f33a:	e04b      	b.n	800f3d4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800f33c:	4b29      	ldr	r3, [pc, #164]	; (800f3e4 <PrepareFrame+0x21c>)
 800f33e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f342:	2b00      	cmp	r3, #0
 800f344:	d010      	beq.n	800f368 <PrepareFrame+0x1a0>
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	2b0f      	cmp	r3, #15
 800f34a:	d90d      	bls.n	800f368 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f34c:	7ffb      	ldrb	r3, [r7, #31]
 800f34e:	f107 0114 	add.w	r1, r7, #20
 800f352:	4a29      	ldr	r2, [pc, #164]	; (800f3f8 <PrepareFrame+0x230>)
 800f354:	4618      	mov	r0, r3
 800f356:	f002 f96f 	bl	8011638 <LoRaMacCommandsSerializeCmds>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d001      	beq.n	800f364 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f360:	2313      	movs	r3, #19
 800f362:	e03b      	b.n	800f3dc <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800f364:	230a      	movs	r3, #10
 800f366:	e039      	b.n	800f3dc <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800f368:	7ffb      	ldrb	r3, [r7, #31]
 800f36a:	f107 0114 	add.w	r1, r7, #20
 800f36e:	4a22      	ldr	r2, [pc, #136]	; (800f3f8 <PrepareFrame+0x230>)
 800f370:	4618      	mov	r0, r3
 800f372:	f002 f961 	bl	8011638 <LoRaMacCommandsSerializeCmds>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f37c:	2313      	movs	r3, #19
 800f37e:	e02d      	b.n	800f3dc <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800f380:	4b18      	ldr	r3, [pc, #96]	; (800f3e4 <PrepareFrame+0x21c>)
 800f382:	2200      	movs	r2, #0
 800f384:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800f388:	4b16      	ldr	r3, [pc, #88]	; (800f3e4 <PrepareFrame+0x21c>)
 800f38a:	4a1b      	ldr	r2, [pc, #108]	; (800f3f8 <PrepareFrame+0x230>)
 800f38c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	b2da      	uxtb	r2, r3
 800f394:	4b13      	ldr	r3, [pc, #76]	; (800f3e4 <PrepareFrame+0x21c>)
 800f396:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 800f39a:	e01b      	b.n	800f3d4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d01a      	beq.n	800f3d8 <PrepareFrame+0x210>
 800f3a2:	4b10      	ldr	r3, [pc, #64]	; (800f3e4 <PrepareFrame+0x21c>)
 800f3a4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d015      	beq.n	800f3d8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800f3ac:	4813      	ldr	r0, [pc, #76]	; (800f3fc <PrepareFrame+0x234>)
 800f3ae:	4b0d      	ldr	r3, [pc, #52]	; (800f3e4 <PrepareFrame+0x21c>)
 800f3b0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	f006 f8ee 	bl	801559a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800f3be:	4b09      	ldr	r3, [pc, #36]	; (800f3e4 <PrepareFrame+0x21c>)
 800f3c0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	b29a      	uxth	r2, r3
 800f3ca:	4b06      	ldr	r3, [pc, #24]	; (800f3e4 <PrepareFrame+0x21c>)
 800f3cc:	801a      	strh	r2, [r3, #0]
            }
            break;
 800f3ce:	e003      	b.n	800f3d8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	e003      	b.n	800f3dc <PrepareFrame+0x214>
            break;
 800f3d4:	bf00      	nop
 800f3d6:	e000      	b.n	800f3da <PrepareFrame+0x212>
            break;
 800f3d8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3720      	adds	r7, #32
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	20000454 	.word	0x20000454
 800f3e8:	2000058c 	.word	0x2000058c
 800f3ec:	20000456 	.word	0x20000456
 800f3f0:	2000095c 	.word	0x2000095c
 800f3f4:	2000056c 	.word	0x2000056c
 800f3f8:	200008dc 	.word	0x200008dc
 800f3fc:	20000457 	.word	0x20000457

0800f400 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08a      	sub	sp, #40	; 0x28
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f40a:	2303      	movs	r3, #3
 800f40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800f414:	79fb      	ldrb	r3, [r7, #7]
 800f416:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f418:	4b47      	ldr	r3, [pc, #284]	; (800f538 <SendFrameOnChannel+0x138>)
 800f41a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f41e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f420:	4b45      	ldr	r3, [pc, #276]	; (800f538 <SendFrameOnChannel+0x138>)
 800f422:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f426:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f428:	4b43      	ldr	r3, [pc, #268]	; (800f538 <SendFrameOnChannel+0x138>)
 800f42a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f42c:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f42e:	4b42      	ldr	r3, [pc, #264]	; (800f538 <SendFrameOnChannel+0x138>)
 800f430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f432:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800f434:	4b41      	ldr	r3, [pc, #260]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800f43a:	4b3f      	ldr	r3, [pc, #252]	; (800f538 <SendFrameOnChannel+0x138>)
 800f43c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f440:	f107 020f 	add.w	r2, r7, #15
 800f444:	f107 0110 	add.w	r1, r7, #16
 800f448:	4b3d      	ldr	r3, [pc, #244]	; (800f540 <SendFrameOnChannel+0x140>)
 800f44a:	f003 fe42 	bl	80130d2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f44e:	4b3b      	ldr	r3, [pc, #236]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f450:	2201      	movs	r2, #1
 800f452:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f456:	4b38      	ldr	r3, [pc, #224]	; (800f538 <SendFrameOnChannel+0x138>)
 800f458:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f45c:	b2da      	uxtb	r2, r3
 800f45e:	4b37      	ldr	r3, [pc, #220]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f460:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 800f464:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800f468:	4b34      	ldr	r3, [pc, #208]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f46a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 800f46e:	79fb      	ldrb	r3, [r7, #7]
 800f470:	4a32      	ldr	r2, [pc, #200]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f472:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f476:	4b31      	ldr	r3, [pc, #196]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f478:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f47c:	4a2f      	ldr	r2, [pc, #188]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f47e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800f482:	4b2e      	ldr	r3, [pc, #184]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f484:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f488:	4a2c      	ldr	r2, [pc, #176]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f48a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800f48e:	f001 fe69 	bl	8011164 <LoRaMacClassBIsBeaconModeActive>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00b      	beq.n	800f4b0 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f498:	4b28      	ldr	r3, [pc, #160]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f49a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f001 fecb 	bl	801123a <LoRaMacClassBIsUplinkCollision>
 800f4a4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f4ac:	2310      	movs	r3, #16
 800f4ae:	e03e      	b.n	800f52e <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f4b0:	4b21      	ldr	r3, [pc, #132]	; (800f538 <SendFrameOnChannel+0x138>)
 800f4b2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d101      	bne.n	800f4be <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800f4ba:	f001 fec8 	bl	801124e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800f4be:	f001 fe62 	bl	8011186 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800f4c2:	4b1d      	ldr	r3, [pc, #116]	; (800f538 <SendFrameOnChannel+0x138>)
 800f4c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	4a1c      	ldr	r2, [pc, #112]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f4cc:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 800f4d0:	4611      	mov	r1, r2
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7ff fc88 	bl	800ede8 <SecureFrame>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 800f4de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d002      	beq.n	800f4ec <SendFrameOnChannel+0xec>
    {
        return status;
 800f4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4ea:	e020      	b.n	800f52e <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f4ec:	4b13      	ldr	r3, [pc, #76]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f4ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f4f2:	f043 0302 	orr.w	r3, r3, #2
 800f4f6:	4a11      	ldr	r2, [pc, #68]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f4f8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 800f4fc:	4b0f      	ldr	r3, [pc, #60]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f4fe:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800f502:	f083 0301 	eor.w	r3, r3, #1
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d007      	beq.n	800f51c <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 800f50c:	4b0b      	ldr	r3, [pc, #44]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f50e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800f512:	3301      	adds	r3, #1
 800f514:	b2da      	uxtb	r2, r3
 800f516:	4b09      	ldr	r3, [pc, #36]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f518:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f51c:	4b09      	ldr	r3, [pc, #36]	; (800f544 <SendFrameOnChannel+0x144>)
 800f51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f520:	4a06      	ldr	r2, [pc, #24]	; (800f53c <SendFrameOnChannel+0x13c>)
 800f522:	8812      	ldrh	r2, [r2, #0]
 800f524:	b2d2      	uxtb	r2, r2
 800f526:	4611      	mov	r1, r2
 800f528:	4807      	ldr	r0, [pc, #28]	; (800f548 <SendFrameOnChannel+0x148>)
 800f52a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800f52c:	2300      	movs	r3, #0
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3728      	adds	r7, #40	; 0x28
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	2000095c 	.word	0x2000095c
 800f53c:	20000454 	.word	0x20000454
 800f540:	2000086c 	.word	0x2000086c
 800f544:	0801acfc 	.word	0x0801acfc
 800f548:	20000456 	.word	0x20000456

0800f54c <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b086      	sub	sp, #24
 800f550:	af00      	add	r7, sp, #0
 800f552:	4603      	mov	r3, r0
 800f554:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800f556:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <SetTxContinuousWave+0x60>)
 800f558:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800f55c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f55e:	4b14      	ldr	r3, [pc, #80]	; (800f5b0 <SetTxContinuousWave+0x64>)
 800f560:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f564:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f566:	4b12      	ldr	r3, [pc, #72]	; (800f5b0 <SetTxContinuousWave+0x64>)
 800f568:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f56c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800f56e:	4b10      	ldr	r3, [pc, #64]	; (800f5b0 <SetTxContinuousWave+0x64>)
 800f570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f572:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800f574:	4b0e      	ldr	r3, [pc, #56]	; (800f5b0 <SetTxContinuousWave+0x64>)
 800f576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f578:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800f57a:	88fb      	ldrh	r3, [r7, #6]
 800f57c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800f57e:	4b0c      	ldr	r3, [pc, #48]	; (800f5b0 <SetTxContinuousWave+0x64>)
 800f580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f584:	f107 0208 	add.w	r2, r7, #8
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f003 fe50 	bl	8013230 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f590:	4b06      	ldr	r3, [pc, #24]	; (800f5ac <SetTxContinuousWave+0x60>)
 800f592:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f596:	f043 0302 	orr.w	r3, r3, #2
 800f59a:	4a04      	ldr	r2, [pc, #16]	; (800f5ac <SetTxContinuousWave+0x60>)
 800f59c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3718      	adds	r7, #24
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20000454 	.word	0x20000454
 800f5b0:	2000095c 	.word	0x2000095c

0800f5b4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	80fb      	strh	r3, [r7, #6]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800f5c4:	4b09      	ldr	r3, [pc, #36]	; (800f5ec <SetTxContinuousWave1+0x38>)
 800f5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800f5cc:	88fa      	ldrh	r2, [r7, #6]
 800f5ce:	6838      	ldr	r0, [r7, #0]
 800f5d0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f5d2:	4b07      	ldr	r3, [pc, #28]	; (800f5f0 <SetTxContinuousWave1+0x3c>)
 800f5d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5d8:	f043 0302 	orr.w	r3, r3, #2
 800f5dc:	4a04      	ldr	r2, [pc, #16]	; (800f5f0 <SetTxContinuousWave1+0x3c>)
 800f5de:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 800f5e2:	2300      	movs	r3, #0
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	0801acfc 	.word	0x0801acfc
 800f5f0:	20000454 	.word	0x20000454

0800f5f4 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	af00      	add	r7, sp, #0
    return &Nvm;
 800f5f8:	4b02      	ldr	r3, [pc, #8]	; (800f604 <GetNvmData+0x10>)
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bc80      	pop	{r7}
 800f600:	4770      	bx	lr
 800f602:	bf00      	nop
 800f604:	2000095c 	.word	0x2000095c

0800f608 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e09a      	b.n	800f754 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800f61e:	4b4f      	ldr	r3, [pc, #316]	; (800f75c <RestoreNvmData+0x154>)
 800f620:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f624:	2b01      	cmp	r3, #1
 800f626:	d001      	beq.n	800f62c <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800f628:	2301      	movs	r3, #1
 800f62a:	e093      	b.n	800f754 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2124      	movs	r1, #36	; 0x24
 800f630:	4618      	mov	r0, r3
 800f632:	f006 f807 	bl	8015644 <Crc32>
 800f636:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d105      	bne.n	800f64e <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2228      	movs	r2, #40	; 0x28
 800f646:	4619      	mov	r1, r3
 800f648:	4845      	ldr	r0, [pc, #276]	; (800f760 <RestoreNvmData+0x158>)
 800f64a:	f005 ffa6 	bl	801559a <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3328      	adds	r3, #40	; 0x28
 800f652:	2114      	movs	r1, #20
 800f654:	4618      	mov	r0, r3
 800f656:	f005 fff5 	bl	8015644 <Crc32>
 800f65a:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f660:	68fa      	ldr	r2, [r7, #12]
 800f662:	429a      	cmp	r2, r3
 800f664:	d106      	bne.n	800f674 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	3328      	adds	r3, #40	; 0x28
 800f66a:	2218      	movs	r2, #24
 800f66c:	4619      	mov	r1, r3
 800f66e:	483d      	ldr	r0, [pc, #244]	; (800f764 <RestoreNvmData+0x15c>)
 800f670:	f005 ff93 	bl	801559a <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	3340      	adds	r3, #64	; 0x40
 800f678:	21d4      	movs	r1, #212	; 0xd4
 800f67a:	4618      	mov	r0, r3
 800f67c:	f005 ffe2 	bl	8015644 <Crc32>
 800f680:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d11f      	bne.n	800f6ce <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3340      	adds	r3, #64	; 0x40
 800f692:	22d8      	movs	r2, #216	; 0xd8
 800f694:	4619      	mov	r1, r3
 800f696:	4834      	ldr	r0, [pc, #208]	; (800f768 <RestoreNvmData+0x160>)
 800f698:	f005 ff7f 	bl	801559a <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f69c:	4b2f      	ldr	r3, [pc, #188]	; (800f75c <RestoreNvmData+0x154>)
 800f69e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800f6a2:	4b2e      	ldr	r3, [pc, #184]	; (800f75c <RestoreNvmData+0x154>)
 800f6a4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f6a8:	4b2d      	ldr	r3, [pc, #180]	; (800f760 <RestoreNvmData+0x158>)
 800f6aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ac:	4a2b      	ldr	r2, [pc, #172]	; (800f75c <RestoreNvmData+0x154>)
 800f6ae:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f6b2:	4b2b      	ldr	r3, [pc, #172]	; (800f760 <RestoreNvmData+0x158>)
 800f6b4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f6b8:	4b28      	ldr	r3, [pc, #160]	; (800f75c <RestoreNvmData+0x154>)
 800f6ba:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f6be:	4b27      	ldr	r3, [pc, #156]	; (800f75c <RestoreNvmData+0x154>)
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f6c6:	4b25      	ldr	r3, [pc, #148]	; (800f75c <RestoreNvmData+0x154>)
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800f6d4:	21bc      	movs	r1, #188	; 0xbc
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f005 ffb4 	bl	8015644 <Crc32>
 800f6dc:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800f6e4:	68fa      	ldr	r2, [r7, #12]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d107      	bne.n	800f6fa <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800f6f0:	22c0      	movs	r2, #192	; 0xc0
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	481d      	ldr	r0, [pc, #116]	; (800f76c <RestoreNvmData+0x164>)
 800f6f6:	f005 ff50 	bl	801559a <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800f700:	2190      	movs	r1, #144	; 0x90
 800f702:	4618      	mov	r0, r3
 800f704:	f005 ff9e 	bl	8015644 <Crc32>
 800f708:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	429a      	cmp	r2, r3
 800f714:	d107      	bne.n	800f726 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800f71c:	2294      	movs	r2, #148	; 0x94
 800f71e:	4619      	mov	r1, r3
 800f720:	4813      	ldr	r0, [pc, #76]	; (800f770 <RestoreNvmData+0x168>)
 800f722:	f005 ff3a 	bl	801559a <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800f72c:	2114      	movs	r1, #20
 800f72e:	4618      	mov	r0, r3
 800f730:	f005 ff88 	bl	8015644 <Crc32>
 800f734:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d107      	bne.n	800f752 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800f748:	2218      	movs	r2, #24
 800f74a:	4619      	mov	r1, r3
 800f74c:	4809      	ldr	r0, [pc, #36]	; (800f774 <RestoreNvmData+0x16c>)
 800f74e:	f005 ff24 	bl	801559a <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	20000454 	.word	0x20000454
 800f760:	2000095c 	.word	0x2000095c
 800f764:	20000984 	.word	0x20000984
 800f768:	2000099c 	.word	0x2000099c
 800f76c:	20000a74 	.word	0x20000a74
 800f770:	20000b34 	.word	0x20000b34
 800f774:	20000c90 	.word	0x20000c90

0800f778 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800f778:	b480      	push	{r7}
 800f77a:	b083      	sub	sp, #12
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d002      	beq.n	800f78e <DetermineFrameType+0x16>
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f78e:	2303      	movs	r3, #3
 800f790:	e03b      	b.n	800f80a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	7b1b      	ldrb	r3, [r3, #12]
 800f796:	f003 030f 	and.w	r3, r3, #15
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d008      	beq.n	800f7b2 <DetermineFrameType+0x3a>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d003      	beq.n	800f7b2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
 800f7b0:	e02a      	b.n	800f808 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d103      	bne.n	800f7c4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	701a      	strb	r2, [r3, #0]
 800f7c2:	e021      	b.n	800f808 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	7b1b      	ldrb	r3, [r3, #12]
 800f7c8:	f003 030f 	and.w	r3, r3, #15
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d108      	bne.n	800f7e4 <DetermineFrameType+0x6c>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d103      	bne.n	800f7e4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	2202      	movs	r2, #2
 800f7e0:	701a      	strb	r2, [r3, #0]
 800f7e2:	e011      	b.n	800f808 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	7b1b      	ldrb	r3, [r3, #12]
 800f7e8:	f003 030f 	and.w	r3, r3, #15
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d108      	bne.n	800f804 <DetermineFrameType+0x8c>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d003      	beq.n	800f804 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2203      	movs	r2, #3
 800f800:	701a      	strb	r2, [r3, #0]
 800f802:	e001      	b.n	800f808 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800f804:	2317      	movs	r3, #23
 800f806:	e000      	b.n	800f80a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800f808:	2300      	movs	r3, #0
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	bc80      	pop	{r7}
 800f812:	4770      	bx	lr

0800f814 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800f814:	b480      	push	{r7}
 800f816:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800f818:	4b12      	ldr	r3, [pc, #72]	; (800f864 <CheckRetransUnconfirmedUplink+0x50>)
 800f81a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800f81e:	4b12      	ldr	r3, [pc, #72]	; (800f868 <CheckRetransUnconfirmedUplink+0x54>)
 800f820:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 800f824:	429a      	cmp	r2, r3
 800f826:	d301      	bcc.n	800f82c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800f828:	2301      	movs	r3, #1
 800f82a:	e016      	b.n	800f85a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f82c:	4b0d      	ldr	r3, [pc, #52]	; (800f864 <CheckRetransUnconfirmedUplink+0x50>)
 800f82e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f832:	f003 0302 	and.w	r3, r3, #2
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00d      	beq.n	800f858 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f83c:	4b0a      	ldr	r3, [pc, #40]	; (800f868 <CheckRetransUnconfirmedUplink+0x54>)
 800f83e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800f846:	2301      	movs	r3, #1
 800f848:	e007      	b.n	800f85a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800f84a:	4b06      	ldr	r3, [pc, #24]	; (800f864 <CheckRetransUnconfirmedUplink+0x50>)
 800f84c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800f850:	2b00      	cmp	r3, #0
 800f852:	d101      	bne.n	800f858 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800f854:	2301      	movs	r3, #1
 800f856:	e000      	b.n	800f85a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bc80      	pop	{r7}
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	20000454 	.word	0x20000454
 800f868:	2000095c 	.word	0x2000095c

0800f86c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800f86c:	b480      	push	{r7}
 800f86e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800f870:	4b0e      	ldr	r3, [pc, #56]	; (800f8ac <CheckRetransConfirmedUplink+0x40>)
 800f872:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 800f876:	4b0d      	ldr	r3, [pc, #52]	; (800f8ac <CheckRetransConfirmedUplink+0x40>)
 800f878:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d301      	bcc.n	800f884 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800f880:	2301      	movs	r3, #1
 800f882:	e00f      	b.n	800f8a4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f884:	4b09      	ldr	r3, [pc, #36]	; (800f8ac <CheckRetransConfirmedUplink+0x40>)
 800f886:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f88a:	f003 0302 	and.w	r3, r3, #2
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	d006      	beq.n	800f8a2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f894:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <CheckRetransConfirmedUplink+0x40>)
 800f896:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d001      	beq.n	800f8a2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e000      	b.n	800f8a4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bc80      	pop	{r7}
 800f8aa:	4770      	bx	lr
 800f8ac:	20000454 	.word	0x20000454

0800f8b0 <StopRetransmission>:

static bool StopRetransmission( void )
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800f8b4:	4b1a      	ldr	r3, [pc, #104]	; (800f920 <StopRetransmission+0x70>)
 800f8b6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800f8ba:	f003 0302 	and.w	r3, r3, #2
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d009      	beq.n	800f8d8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f8c4:	4b16      	ldr	r3, [pc, #88]	; (800f920 <StopRetransmission+0x70>)
 800f8c6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00e      	beq.n	800f8ec <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800f8ce:	4b14      	ldr	r3, [pc, #80]	; (800f920 <StopRetransmission+0x70>)
 800f8d0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d009      	beq.n	800f8ec <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f8d8:	4b12      	ldr	r3, [pc, #72]	; (800f924 <StopRetransmission+0x74>)
 800f8da:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 800f8e2:	4b10      	ldr	r3, [pc, #64]	; (800f924 <StopRetransmission+0x74>)
 800f8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	4a0e      	ldr	r2, [pc, #56]	; (800f924 <StopRetransmission+0x74>)
 800f8ea:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800f8ec:	4b0c      	ldr	r3, [pc, #48]	; (800f920 <StopRetransmission+0x70>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 800f8f4:	4b0a      	ldr	r3, [pc, #40]	; (800f920 <StopRetransmission+0x70>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 800f8fc:	4b08      	ldr	r3, [pc, #32]	; (800f920 <StopRetransmission+0x70>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f904:	4b06      	ldr	r3, [pc, #24]	; (800f920 <StopRetransmission+0x70>)
 800f906:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f90a:	f023 0302 	bic.w	r3, r3, #2
 800f90e:	4a04      	ldr	r2, [pc, #16]	; (800f920 <StopRetransmission+0x70>)
 800f910:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 800f914:	2301      	movs	r3, #1
}
 800f916:	4618      	mov	r0, r3
 800f918:	46bd      	mov	sp, r7
 800f91a:	bc80      	pop	{r7}
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	20000454 	.word	0x20000454
 800f924:	2000095c 	.word	0x2000095c

0800f928 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	4603      	mov	r3, r0
 800f930:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800f932:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <CallNvmDataChangeCallback+0x38>)
 800f934:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00c      	beq.n	800f956 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800f93c:	4b08      	ldr	r3, [pc, #32]	; (800f960 <CallNvmDataChangeCallback+0x38>)
 800f93e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f942:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800f944:	2b00      	cmp	r3, #0
 800f946:	d006      	beq.n	800f956 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800f948:	4b05      	ldr	r3, [pc, #20]	; (800f960 <CallNvmDataChangeCallback+0x38>)
 800f94a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	88fa      	ldrh	r2, [r7, #6]
 800f952:	4610      	mov	r0, r2
 800f954:	4798      	blx	r3
    }
}
 800f956:	bf00      	nop
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20000454 	.word	0x20000454

0800f964 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800f96a:	4b1b      	ldr	r3, [pc, #108]	; (800f9d8 <AckTimeoutRetriesProcess+0x74>)
 800f96c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800f970:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <AckTimeoutRetriesProcess+0x74>)
 800f972:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 800f976:	429a      	cmp	r2, r3
 800f978:	d229      	bcs.n	800f9ce <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 800f97a:	4b17      	ldr	r3, [pc, #92]	; (800f9d8 <AckTimeoutRetriesProcess+0x74>)
 800f97c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f980:	3301      	adds	r3, #1
 800f982:	b2da      	uxtb	r2, r3
 800f984:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <AckTimeoutRetriesProcess+0x74>)
 800f986:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800f98a:	4b13      	ldr	r3, [pc, #76]	; (800f9d8 <AckTimeoutRetriesProcess+0x74>)
 800f98c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800f990:	f003 0301 	and.w	r3, r3, #1
 800f994:	b2db      	uxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d019      	beq.n	800f9ce <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f99a:	2322      	movs	r3, #34	; 0x22
 800f99c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f99e:	4b0f      	ldr	r3, [pc, #60]	; (800f9dc <AckTimeoutRetriesProcess+0x78>)
 800f9a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f9a4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9a6:	4b0d      	ldr	r3, [pc, #52]	; (800f9dc <AckTimeoutRetriesProcess+0x78>)
 800f9a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f9ac:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f9ae:	4b0b      	ldr	r3, [pc, #44]	; (800f9dc <AckTimeoutRetriesProcess+0x78>)
 800f9b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9b4:	f107 0208 	add.w	r2, r7, #8
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f003 fae2 	bl	8012f84 <RegionGetPhyParam>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	b25a      	sxtb	r2, r3
 800f9c8:	4b04      	ldr	r3, [pc, #16]	; (800f9dc <AckTimeoutRetriesProcess+0x78>)
 800f9ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 800f9ce:	bf00      	nop
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20000454 	.word	0x20000454
 800f9dc:	2000095c 	.word	0x2000095c

0800f9e0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 800f9e6:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <AckTimeoutRetriesFinalize+0x58>)
 800f9e8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800f9ec:	f083 0301 	eor.w	r3, r3, #1
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d015      	beq.n	800fa22 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800f9fa:	4b10      	ldr	r3, [pc, #64]	; (800fa3c <AckTimeoutRetriesFinalize+0x5c>)
 800f9fc:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800f9fe:	4b10      	ldr	r3, [pc, #64]	; (800fa40 <AckTimeoutRetriesFinalize+0x60>)
 800fa00:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fa02:	4b10      	ldr	r3, [pc, #64]	; (800fa44 <AckTimeoutRetriesFinalize+0x64>)
 800fa04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa08:	1d3a      	adds	r2, r7, #4
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f003 fae3 	bl	8012fd8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 800fa12:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <AckTimeoutRetriesFinalize+0x58>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 800fa1a:	4b07      	ldr	r3, [pc, #28]	; (800fa38 <AckTimeoutRetriesFinalize+0x58>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800fa22:	4b05      	ldr	r3, [pc, #20]	; (800fa38 <AckTimeoutRetriesFinalize+0x58>)
 800fa24:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800fa28:	4b03      	ldr	r3, [pc, #12]	; (800fa38 <AckTimeoutRetriesFinalize+0x58>)
 800fa2a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 800fa2e:	bf00      	nop
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20000454 	.word	0x20000454
 800fa3c:	20000b34 	.word	0x20000b34
 800fa40:	20000bc8 	.word	0x20000bc8
 800fa44:	2000095c 	.word	0x2000095c

0800fa48 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 800fa48:	b480      	push	{r7}
 800fa4a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fa4c:	4b0b      	ldr	r3, [pc, #44]	; (800fa7c <IsRequestPending+0x34>)
 800fa4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fa52:	f003 0304 	and.w	r3, r3, #4
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d107      	bne.n	800fa6c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800fa5c:	4b07      	ldr	r3, [pc, #28]	; (800fa7c <IsRequestPending+0x34>)
 800fa5e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800fa62:	f003 0301 	and.w	r3, r3, #1
 800fa66:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <IsRequestPending+0x28>
    {
        return 1;
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e000      	b.n	800fa72 <IsRequestPending+0x2a>
    }
    return 0;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bc80      	pop	{r7}
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	20000454 	.word	0x20000454

0800fa80 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800fa80:	b590      	push	{r4, r7, lr}
 800fa82:	b08f      	sub	sp, #60	; 0x3c
 800fa84:	af02      	add	r7, sp, #8
 800fa86:	6178      	str	r0, [r7, #20]
 800fa88:	6139      	str	r1, [r7, #16]
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d002      	beq.n	800fa9a <LoRaMacInitialization+0x1a>
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d101      	bne.n	800fa9e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fa9a:	2303      	movs	r3, #3
 800fa9c:	e275      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00b      	beq.n	800fabe <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d007      	beq.n	800fabe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d101      	bne.n	800fac2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fabe:	2303      	movs	r3, #3
 800fac0:	e263      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800fac2:	7bfb      	ldrb	r3, [r7, #15]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f003 fa4d 	bl	8012f64 <RegionIsActive>
 800faca:	4603      	mov	r3, r0
 800facc:	f083 0301 	eor.w	r3, r3, #1
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d001      	beq.n	800fada <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800fad6:	2309      	movs	r3, #9
 800fad8:	e257      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800fada:	6978      	ldr	r0, [r7, #20]
 800fadc:	f001 fef6 	bl	80118cc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800fae0:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800fae4:	2100      	movs	r1, #0
 800fae6:	48c7      	ldr	r0, [pc, #796]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fae8:	f005 fd92 	bl	8015610 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800faec:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800faf0:	2100      	movs	r1, #0
 800faf2:	48c5      	ldr	r0, [pc, #788]	; (800fe08 <LoRaMacInitialization+0x388>)
 800faf4:	f005 fd8c 	bl	8015610 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800faf8:	4bc3      	ldr	r3, [pc, #780]	; (800fe08 <LoRaMacInitialization+0x388>)
 800fafa:	2201      	movs	r2, #1
 800fafc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 800fb00:	4bc1      	ldr	r3, [pc, #772]	; (800fe08 <LoRaMacInitialization+0x388>)
 800fb02:	2201      	movs	r2, #1
 800fb04:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 800fb08:	4abe      	ldr	r2, [pc, #760]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb0a:	7bfb      	ldrb	r3, [r7, #15]
 800fb0c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800fb10:	4bbc      	ldr	r3, [pc, #752]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb12:	2200      	movs	r2, #0
 800fb14:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800fb18:	4bba      	ldr	r3, [pc, #744]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800fb20:	4bb8      	ldr	r3, [pc, #736]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb22:	4aba      	ldr	r2, [pc, #744]	; (800fe0c <LoRaMacInitialization+0x38c>)
 800fb24:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800fb28:	230f      	movs	r3, #15
 800fb2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb2e:	4bb5      	ldr	r3, [pc, #724]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb38:	4611      	mov	r1, r2
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f003 fa22 	bl	8012f84 <RegionGetPhyParam>
 800fb40:	4603      	mov	r3, r0
 800fb42:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	bf14      	ite	ne
 800fb4a:	2301      	movne	r3, #1
 800fb4c:	2300      	moveq	r3, #0
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	4bac      	ldr	r3, [pc, #688]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb52:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800fb56:	230a      	movs	r3, #10
 800fb58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb5c:	4ba9      	ldr	r3, [pc, #676]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb66:	4611      	mov	r1, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f003 fa0b 	bl	8012f84 <RegionGetPhyParam>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800fb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb74:	b25a      	sxtb	r2, r3
 800fb76:	4ba3      	ldr	r3, [pc, #652]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb78:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 800fb7c:	2306      	movs	r3, #6
 800fb7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb82:	4ba0      	ldr	r3, [pc, #640]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fb88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f003 f9f8 	bl	8012f84 <RegionGetPhyParam>
 800fb94:	4603      	mov	r3, r0
 800fb96:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800fb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9a:	b25a      	sxtb	r2, r3
 800fb9c:	4b99      	ldr	r3, [pc, #612]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fb9e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800fba2:	2310      	movs	r3, #16
 800fba4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fba8:	4b96      	ldr	r3, [pc, #600]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fbaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fbb2:	4611      	mov	r1, r2
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f003 f9e5 	bl	8012f84 <RegionGetPhyParam>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc0:	4a90      	ldr	r2, [pc, #576]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fbc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800fbc6:	2311      	movs	r3, #17
 800fbc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fbcc:	4b8d      	ldr	r3, [pc, #564]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fbce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f003 f9d3 	bl	8012f84 <RegionGetPhyParam>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800fbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe4:	4a87      	ldr	r2, [pc, #540]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fbe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800fbea:	2312      	movs	r3, #18
 800fbec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fbf0:	4b84      	ldr	r3, [pc, #528]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fbf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fbfa:	4611      	mov	r1, r2
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f003 f9c1 	bl	8012f84 <RegionGetPhyParam>
 800fc02:	4603      	mov	r3, r0
 800fc04:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	4a7e      	ldr	r2, [pc, #504]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800fc0e:	2313      	movs	r3, #19
 800fc10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc14:	4b7b      	ldr	r3, [pc, #492]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc1e:	4611      	mov	r1, r2
 800fc20:	4618      	mov	r0, r3
 800fc22:	f003 f9af 	bl	8012f84 <RegionGetPhyParam>
 800fc26:	4603      	mov	r3, r0
 800fc28:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	4a75      	ldr	r2, [pc, #468]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800fc32:	2314      	movs	r3, #20
 800fc34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc38:	4b72      	ldr	r3, [pc, #456]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc42:	4611      	mov	r1, r2
 800fc44:	4618      	mov	r0, r3
 800fc46:	f003 f99d 	bl	8012f84 <RegionGetPhyParam>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	4a6c      	ldr	r2, [pc, #432]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800fc56:	2317      	movs	r3, #23
 800fc58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc5c:	4b69      	ldr	r3, [pc, #420]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc66:	4611      	mov	r1, r2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f003 f98b 	bl	8012f84 <RegionGetPhyParam>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	b2da      	uxtb	r2, r3
 800fc76:	4b63      	ldr	r3, [pc, #396]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800fc7c:	2318      	movs	r3, #24
 800fc7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fc82:	4b60      	ldr	r3, [pc, #384]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f003 f978 	bl	8012f84 <RegionGetPhyParam>
 800fc94:	4603      	mov	r3, r0
 800fc96:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800fc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9a:	4a5a      	ldr	r2, [pc, #360]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fc9c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	4a58      	ldr	r2, [pc, #352]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fca4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800fca8:	2319      	movs	r3, #25
 800fcaa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fcae:	4b55      	ldr	r3, [pc, #340]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fcb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fcb8:	4611      	mov	r1, r2
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f003 f962 	bl	8012f84 <RegionGetPhyParam>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800fcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc6:	b2da      	uxtb	r2, r3
 800fcc8:	4b4e      	ldr	r3, [pc, #312]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fcca:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	4b4c      	ldr	r3, [pc, #304]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fcd4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800fcd8:	231e      	movs	r3, #30
 800fcda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fcde:	4b49      	ldr	r3, [pc, #292]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fce4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fce8:	4611      	mov	r1, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f003 f94a 	bl	8012f84 <RegionGetPhyParam>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf6:	b2da      	uxtb	r2, r3
 800fcf8:	4b42      	ldr	r3, [pc, #264]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fcfa:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800fcfe:	231f      	movs	r3, #31
 800fd00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd04:	4b3f      	ldr	r3, [pc, #252]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd0e:	4611      	mov	r1, r2
 800fd10:	4618      	mov	r0, r3
 800fd12:	f003 f937 	bl	8012f84 <RegionGetPhyParam>
 800fd16:	4603      	mov	r3, r0
 800fd18:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	4b39      	ldr	r3, [pc, #228]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd20:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800fd24:	2320      	movs	r3, #32
 800fd26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd2a:	4b36      	ldr	r3, [pc, #216]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd34:	4611      	mov	r1, r2
 800fd36:	4618      	mov	r0, r3
 800fd38:	f003 f924 	bl	8012f84 <RegionGetPhyParam>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	4a30      	ldr	r2, [pc, #192]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd44:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800fd48:	2321      	movs	r3, #33	; 0x21
 800fd4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd4e:	4b2d      	ldr	r3, [pc, #180]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd58:	4611      	mov	r1, r2
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f003 f912 	bl	8012f84 <RegionGetPhyParam>
 800fd60:	4603      	mov	r3, r0
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	4a27      	ldr	r2, [pc, #156]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd68:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800fd6c:	230b      	movs	r3, #11
 800fd6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd72:	4b24      	ldr	r3, [pc, #144]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fd7c:	4611      	mov	r1, r2
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f003 f900 	bl	8012f84 <RegionGetPhyParam>
 800fd84:	4603      	mov	r3, r0
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800fd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	4b1e      	ldr	r3, [pc, #120]	; (800fe08 <LoRaMacInitialization+0x388>)
 800fd8e:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800fd92:	230c      	movs	r3, #12
 800fd94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd98:	4b1a      	ldr	r3, [pc, #104]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fd9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f003 f8ed 	bl	8012f84 <RegionGetPhyParam>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800fdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	4b15      	ldr	r3, [pc, #84]	; (800fe08 <LoRaMacInitialization+0x388>)
 800fdb4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800fdb8:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800fdc0:	4b10      	ldr	r3, [pc, #64]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdc2:	220a      	movs	r2, #10
 800fdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800fdc8:	4b0e      	ldr	r3, [pc, #56]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdca:	2206      	movs	r2, #6
 800fdcc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800fdd0:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdd6:	4a0b      	ldr	r2, [pc, #44]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdd8:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800fdda:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fddc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800fde0:	4b08      	ldr	r3, [pc, #32]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fde2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800fde6:	4b07      	ldr	r3, [pc, #28]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fde8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdec:	4a05      	ldr	r2, [pc, #20]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdee:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800fdf0:	4b04      	ldr	r3, [pc, #16]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdf6:	4a03      	ldr	r2, [pc, #12]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdf8:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800fdfa:	4b02      	ldr	r3, [pc, #8]	; (800fe04 <LoRaMacInitialization+0x384>)
 800fdfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe00:	e006      	b.n	800fe10 <LoRaMacInitialization+0x390>
 800fe02:	bf00      	nop
 800fe04:	2000095c 	.word	0x2000095c
 800fe08:	20000454 	.word	0x20000454
 800fe0c:	01000300 	.word	0x01000300
 800fe10:	4a60      	ldr	r2, [pc, #384]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe12:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800fe14:	4b5f      	ldr	r3, [pc, #380]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe1a:	4a5e      	ldr	r2, [pc, #376]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe1c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800fe1e:	4b5d      	ldr	r3, [pc, #372]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fe24:	4a5b      	ldr	r2, [pc, #364]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe26:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800fe28:	4b5a      	ldr	r3, [pc, #360]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe2a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800fe2e:	4b59      	ldr	r3, [pc, #356]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe30:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800fe34:	2300      	movs	r3, #0
 800fe36:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fe3a:	4b57      	ldr	r3, [pc, #348]	; (800ff98 <LoRaMacInitialization+0x518>)
 800fe3c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fe3e:	4b57      	ldr	r3, [pc, #348]	; (800ff9c <LoRaMacInitialization+0x51c>)
 800fe40:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fe42:	4b54      	ldr	r3, [pc, #336]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe48:	f107 0218 	add.w	r2, r7, #24
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f003 f8c2 	bl	8012fd8 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800fe54:	4a52      	ldr	r2, [pc, #328]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 800fe5c:	f7ff f85a 	bl	800ef14 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800fe60:	4b4c      	ldr	r3, [pc, #304]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 800fe68:	4a4d      	ldr	r2, [pc, #308]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800fe70:	4b4b      	ldr	r3, [pc, #300]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800fe78:	4b49      	ldr	r3, [pc, #292]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800fe80:	4b44      	ldr	r3, [pc, #272]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fe86:	4b43      	ldr	r3, [pc, #268]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	4b44      	ldr	r3, [pc, #272]	; (800ffa4 <LoRaMacInitialization+0x524>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	f04f 31ff 	mov.w	r1, #4294967295
 800fe98:	4843      	ldr	r0, [pc, #268]	; (800ffa8 <LoRaMacInitialization+0x528>)
 800fe9a:	f009 fb11 	bl	80194c0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	4b42      	ldr	r3, [pc, #264]	; (800ffac <LoRaMacInitialization+0x52c>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f04f 31ff 	mov.w	r1, #4294967295
 800feaa:	4841      	ldr	r0, [pc, #260]	; (800ffb0 <LoRaMacInitialization+0x530>)
 800feac:	f009 fb08 	bl	80194c0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800feb0:	2300      	movs	r3, #0
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	4b3f      	ldr	r3, [pc, #252]	; (800ffb4 <LoRaMacInitialization+0x534>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	f04f 31ff 	mov.w	r1, #4294967295
 800febc:	483e      	ldr	r0, [pc, #248]	; (800ffb8 <LoRaMacInitialization+0x538>)
 800febe:	f009 faff 	bl	80194c0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800fec2:	2300      	movs	r3, #0
 800fec4:	9300      	str	r3, [sp, #0]
 800fec6:	4b3d      	ldr	r3, [pc, #244]	; (800ffbc <LoRaMacInitialization+0x53c>)
 800fec8:	2200      	movs	r2, #0
 800feca:	f04f 31ff 	mov.w	r1, #4294967295
 800fece:	483c      	ldr	r0, [pc, #240]	; (800ffc0 <LoRaMacInitialization+0x540>)
 800fed0:	f009 faf6 	bl	80194c0 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800fed4:	4c2f      	ldr	r4, [pc, #188]	; (800ff94 <LoRaMacInitialization+0x514>)
 800fed6:	463b      	mov	r3, r7
 800fed8:	4618      	mov	r0, r3
 800feda:	f008 fe79 	bl	8018bd0 <SysTimeGetMcuTime>
 800fede:	f504 7382 	add.w	r3, r4, #260	; 0x104
 800fee2:	463a      	mov	r2, r7
 800fee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fee8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800feec:	4b2c      	ldr	r3, [pc, #176]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800feee:	4a35      	ldr	r2, [pc, #212]	; (800ffc4 <LoRaMacInitialization+0x544>)
 800fef0:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800fef4:	4b2a      	ldr	r3, [pc, #168]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800fef6:	4a34      	ldr	r2, [pc, #208]	; (800ffc8 <LoRaMacInitialization+0x548>)
 800fef8:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800fefc:	4b28      	ldr	r3, [pc, #160]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800fefe:	4a33      	ldr	r2, [pc, #204]	; (800ffcc <LoRaMacInitialization+0x54c>)
 800ff00:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800ff04:	4b26      	ldr	r3, [pc, #152]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800ff06:	4a32      	ldr	r2, [pc, #200]	; (800ffd0 <LoRaMacInitialization+0x550>)
 800ff08:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800ff0c:	4b24      	ldr	r3, [pc, #144]	; (800ffa0 <LoRaMacInitialization+0x520>)
 800ff0e:	4a31      	ldr	r2, [pc, #196]	; (800ffd4 <LoRaMacInitialization+0x554>)
 800ff10:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800ff14:	4b30      	ldr	r3, [pc, #192]	; (800ffd8 <LoRaMacInitialization+0x558>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	4830      	ldr	r0, [pc, #192]	; (800ffdc <LoRaMacInitialization+0x55c>)
 800ff1a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	4619      	mov	r1, r3
 800ff22:	482f      	ldr	r0, [pc, #188]	; (800ffe0 <LoRaMacInitialization+0x560>)
 800ff24:	f7fa ff3e 	bl	800ada4 <SecureElementInit>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff2e:	2311      	movs	r3, #17
 800ff30:	e02b      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800ff32:	4818      	ldr	r0, [pc, #96]	; (800ff94 <LoRaMacInitialization+0x514>)
 800ff34:	f002 f950 	bl	80121d8 <LoRaMacCryptoInit>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff3e:	2311      	movs	r3, #17
 800ff40:	e023      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800ff42:	f001 fa95 	bl	8011470 <LoRaMacCommandsInit>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff4c:	2313      	movs	r3, #19
 800ff4e:	e01c      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800ff50:	4824      	ldr	r0, [pc, #144]	; (800ffe4 <LoRaMacInitialization+0x564>)
 800ff52:	f002 f9ff 	bl	8012354 <LoRaMacCryptoSetMulticastReference>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff5c:	2311      	movs	r3, #17
 800ff5e:	e014      	b.n	800ff8a <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800ff60:	4b1d      	ldr	r3, [pc, #116]	; (800ffd8 <LoRaMacInitialization+0x558>)
 800ff62:	695b      	ldr	r3, [r3, #20]
 800ff64:	4798      	blx	r3
 800ff66:	4603      	mov	r3, r0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f005 faf1 	bl	8015550 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ff6e:	4b1a      	ldr	r3, [pc, #104]	; (800ffd8 <LoRaMacInitialization+0x558>)
 800ff70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff72:	4a08      	ldr	r2, [pc, #32]	; (800ff94 <LoRaMacInitialization+0x514>)
 800ff74:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 800ff78:	4610      	mov	r0, r2
 800ff7a:	4798      	blx	r3
    Radio.Sleep( );
 800ff7c:	4b16      	ldr	r3, [pc, #88]	; (800ffd8 <LoRaMacInitialization+0x558>)
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ff82:	2001      	movs	r0, #1
 800ff84:	f7fd faaa 	bl	800d4dc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3734      	adds	r7, #52	; 0x34
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd90      	pop	{r4, r7, pc}
 800ff92:	bf00      	nop
 800ff94:	2000095c 	.word	0x2000095c
 800ff98:	20000b34 	.word	0x20000b34
 800ff9c:	20000bc8 	.word	0x20000bc8
 800ffa0:	20000454 	.word	0x20000454
 800ffa4:	0800da65 	.word	0x0800da65
 800ffa8:	200007bc 	.word	0x200007bc
 800ffac:	0800dad9 	.word	0x0800dad9
 800ffb0:	200007d4 	.word	0x200007d4
 800ffb4:	0800db45 	.word	0x0800db45
 800ffb8:	200007ec 	.word	0x200007ec
 800ffbc:	0800dbb9 	.word	0x0800dbb9
 800ffc0:	2000084c 	.word	0x2000084c
 800ffc4:	0800c669 	.word	0x0800c669
 800ffc8:	0800c6e1 	.word	0x0800c6e1
 800ffcc:	0800c7b9 	.word	0x0800c7b9
 800ffd0:	0800c76d 	.word	0x0800c76d
 800ffd4:	0800c7f5 	.word	0x0800c7f5
 800ffd8:	0801acfc 	.word	0x0801acfc
 800ffdc:	200007a0 	.word	0x200007a0
 800ffe0:	20000a74 	.word	0x20000a74
 800ffe4:	20000a2c 	.word	0x20000a2c

0800ffe8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800ffec:	4b04      	ldr	r3, [pc, #16]	; (8010000 <LoRaMacStart+0x18>)
 800ffee:	2200      	movs	r2, #0
 800fff0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bc80      	pop	{r7}
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	20000454 	.word	0x20000454

08010004 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08a      	sub	sp, #40	; 0x28
 8010008:	af00      	add	r7, sp, #0
 801000a:	4603      	mov	r3, r0
 801000c:	6039      	str	r1, [r7, #0]
 801000e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010010:	4b3e      	ldr	r3, [pc, #248]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010014:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010016:	4b3d      	ldr	r3, [pc, #244]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010018:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 801001c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801001e:	4b3b      	ldr	r3, [pc, #236]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010020:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010024:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010026:	2300      	movs	r3, #0
 8010028:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d101      	bne.n	8010034 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010030:	2303      	movs	r3, #3
 8010032:	e066      	b.n	8010102 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010034:	4b35      	ldr	r3, [pc, #212]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010036:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801003a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 801003c:	2300      	movs	r3, #0
 801003e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010040:	4b32      	ldr	r3, [pc, #200]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010042:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010046:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010048:	4b30      	ldr	r3, [pc, #192]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 801004a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801004c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801004e:	4b30      	ldr	r3, [pc, #192]	; (8010110 <LoRaMacQueryTxPossible+0x10c>)
 8010050:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010054:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010056:	4b2e      	ldr	r3, [pc, #184]	; (8010110 <LoRaMacQueryTxPossible+0x10c>)
 8010058:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 801005c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801005e:	4b2b      	ldr	r3, [pc, #172]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010060:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010064:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010068:	4b28      	ldr	r3, [pc, #160]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 801006a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801006e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010072:	4b26      	ldr	r3, [pc, #152]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 8010074:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801007c:	4b23      	ldr	r3, [pc, #140]	; (801010c <LoRaMacQueryTxPossible+0x108>)
 801007e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010086:	f107 0310 	add.w	r3, r7, #16
 801008a:	f107 020e 	add.w	r2, r7, #14
 801008e:	f107 010f 	add.w	r1, r7, #15
 8010092:	f107 0014 	add.w	r0, r7, #20
 8010096:	f000 ffe1 	bl	801105c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801009a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fd fed2 	bl	800de48 <GetMaxAppPayloadWithoutFOptsLength>
 80100a4:	4603      	mov	r3, r0
 80100a6:	461a      	mov	r2, r3
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80100ac:	f107 0308 	add.w	r3, r7, #8
 80100b0:	4618      	mov	r0, r3
 80100b2:	f001 faab 	bl	801160c <LoRaMacCommandsGetSizeSerializedCmds>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80100bc:	2313      	movs	r3, #19
 80100be:	e020      	b.n	8010102 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	2b0f      	cmp	r3, #15
 80100c4:	d819      	bhi.n	80100fa <LoRaMacQueryTxPossible+0xf6>
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	785b      	ldrb	r3, [r3, #1]
 80100ca:	461a      	mov	r2, r3
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d313      	bcc.n	80100fa <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	785a      	ldrb	r2, [r3, #1]
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	785b      	ldrb	r3, [r3, #1]
 80100e6:	4619      	mov	r1, r3
 80100e8:	79fa      	ldrb	r2, [r7, #7]
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	4413      	add	r3, r2
 80100ee:	4299      	cmp	r1, r3
 80100f0:	d301      	bcc.n	80100f6 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	e005      	b.n	8010102 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80100f6:	2308      	movs	r3, #8
 80100f8:	e003      	b.n	8010102 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2200      	movs	r2, #0
 80100fe:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010100:	2308      	movs	r3, #8
    }
}
 8010102:	4618      	mov	r0, r3
 8010104:	3728      	adds	r7, #40	; 0x28
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	2000095c 	.word	0x2000095c
 8010110:	20000454 	.word	0x20000454

08010114 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010114:	b590      	push	{r4, r7, lr}
 8010116:	b087      	sub	sp, #28
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801011c:	2300      	movs	r3, #0
 801011e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d101      	bne.n	801012a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010126:	2303      	movs	r3, #3
 8010128:	e14b      	b.n	80103c2 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	2b28      	cmp	r3, #40	; 0x28
 8010130:	f200 8140 	bhi.w	80103b4 <LoRaMacMibGetRequestConfirm+0x2a0>
 8010134:	a201      	add	r2, pc, #4	; (adr r2, 801013c <LoRaMacMibGetRequestConfirm+0x28>)
 8010136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801013a:	bf00      	nop
 801013c:	080101e1 	.word	0x080101e1
 8010140:	080101ed 	.word	0x080101ed
 8010144:	080101f9 	.word	0x080101f9
 8010148:	08010205 	.word	0x08010205
 801014c:	08010211 	.word	0x08010211
 8010150:	0801021d 	.word	0x0801021d
 8010154:	08010229 	.word	0x08010229
 8010158:	080103b5 	.word	0x080103b5
 801015c:	080103b5 	.word	0x080103b5
 8010160:	080103b5 	.word	0x080103b5
 8010164:	080103b5 	.word	0x080103b5
 8010168:	080103b5 	.word	0x080103b5
 801016c:	080103b5 	.word	0x080103b5
 8010170:	080103b5 	.word	0x080103b5
 8010174:	080103b5 	.word	0x080103b5
 8010178:	08010235 	.word	0x08010235
 801017c:	08010241 	.word	0x08010241
 8010180:	0801024d 	.word	0x0801024d
 8010184:	0801026f 	.word	0x0801026f
 8010188:	08010281 	.word	0x08010281
 801018c:	08010293 	.word	0x08010293
 8010190:	080102a5 	.word	0x080102a5
 8010194:	080102d9 	.word	0x080102d9
 8010198:	080102b7 	.word	0x080102b7
 801019c:	080102fb 	.word	0x080102fb
 80101a0:	08010307 	.word	0x08010307
 80101a4:	08010311 	.word	0x08010311
 80101a8:	0801031b 	.word	0x0801031b
 80101ac:	08010325 	.word	0x08010325
 80101b0:	0801032f 	.word	0x0801032f
 80101b4:	08010339 	.word	0x08010339
 80101b8:	08010345 	.word	0x08010345
 80101bc:	0801035d 	.word	0x0801035d
 80101c0:	08010351 	.word	0x08010351
 80101c4:	08010369 	.word	0x08010369
 80101c8:	08010373 	.word	0x08010373
 80101cc:	0801037f 	.word	0x0801037f
 80101d0:	08010395 	.word	0x08010395
 80101d4:	08010389 	.word	0x08010389
 80101d8:	080103b5 	.word	0x080103b5
 80101dc:	080103a1 	.word	0x080103a1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80101e0:	4b7a      	ldr	r3, [pc, #488]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80101e2:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	711a      	strb	r2, [r3, #4]
            break;
 80101ea:	e0e9      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80101ec:	4b77      	ldr	r3, [pc, #476]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80101ee:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	711a      	strb	r2, [r3, #4]
            break;
 80101f6:	e0e3      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80101f8:	f7fb f88e 	bl	800b318 <SecureElementGetDevEui>
 80101fc:	4602      	mov	r2, r0
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	605a      	str	r2, [r3, #4]
            break;
 8010202:	e0dd      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8010204:	f7fb f8aa 	bl	800b35c <SecureElementGetJoinEui>
 8010208:	4602      	mov	r2, r0
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	605a      	str	r2, [r3, #4]
            break;
 801020e:	e0d7      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010210:	4b6e      	ldr	r3, [pc, #440]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010212:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	711a      	strb	r2, [r3, #4]
            break;
 801021a:	e0d1      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801021c:	4b6b      	ldr	r3, [pc, #428]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801021e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	605a      	str	r2, [r3, #4]
            break;
 8010226:	e0cb      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8010228:	4b68      	ldr	r3, [pc, #416]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801022a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	605a      	str	r2, [r3, #4]
            break;
 8010232:	e0c5      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010234:	4b65      	ldr	r3, [pc, #404]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010236:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	711a      	strb	r2, [r3, #4]
            break;
 801023e:	e0bf      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010240:	4b62      	ldr	r3, [pc, #392]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010242:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	711a      	strb	r2, [r3, #4]
            break;
 801024a:	e0b9      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801024c:	231d      	movs	r3, #29
 801024e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010250:	4b5e      	ldr	r3, [pc, #376]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010256:	f107 0210 	add.w	r2, r7, #16
 801025a:	4611      	mov	r1, r2
 801025c:	4618      	mov	r0, r3
 801025e:	f002 fe91 	bl	8012f84 <RegionGetPhyParam>
 8010262:	4603      	mov	r3, r0
 8010264:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	605a      	str	r2, [r3, #4]
            break;
 801026c:	e0a8      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4a56      	ldr	r2, [pc, #344]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010272:	3304      	adds	r3, #4
 8010274:	3264      	adds	r2, #100	; 0x64
 8010276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801027a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801027e:	e09f      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4a52      	ldr	r2, [pc, #328]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010284:	3304      	adds	r3, #4
 8010286:	32a4      	adds	r2, #164	; 0xa4
 8010288:	e892 0003 	ldmia.w	r2, {r0, r1}
 801028c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010290:	e096      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4a4d      	ldr	r2, [pc, #308]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010296:	3304      	adds	r3, #4
 8010298:	326c      	adds	r2, #108	; 0x6c
 801029a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801029e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80102a2:	e08d      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a49      	ldr	r2, [pc, #292]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102a8:	3304      	adds	r3, #4
 80102aa:	32ac      	adds	r2, #172	; 0xac
 80102ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102b0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80102b4:	e084      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80102b6:	231b      	movs	r3, #27
 80102b8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102ba:	4b44      	ldr	r3, [pc, #272]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102c0:	f107 0210 	add.w	r2, r7, #16
 80102c4:	4611      	mov	r1, r2
 80102c6:	4618      	mov	r0, r3
 80102c8:	f002 fe5c 	bl	8012f84 <RegionGetPhyParam>
 80102cc:	4603      	mov	r3, r0
 80102ce:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	605a      	str	r2, [r3, #4]
            break;
 80102d6:	e073      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80102d8:	231a      	movs	r3, #26
 80102da:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102dc:	4b3b      	ldr	r3, [pc, #236]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102e2:	f107 0210 	add.w	r2, r7, #16
 80102e6:	4611      	mov	r1, r2
 80102e8:	4618      	mov	r0, r3
 80102ea:	f002 fe4b 	bl	8012f84 <RegionGetPhyParam>
 80102ee:	4603      	mov	r3, r0
 80102f0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	605a      	str	r2, [r3, #4]
            break;
 80102f8:	e062      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80102fa:	4b34      	ldr	r3, [pc, #208]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80102fc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	711a      	strb	r2, [r3, #4]
            break;
 8010304:	e05c      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010306:	4b31      	ldr	r3, [pc, #196]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	605a      	str	r2, [r3, #4]
            break;
 801030e:	e057      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010310:	4b2e      	ldr	r3, [pc, #184]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	605a      	str	r2, [r3, #4]
            break;
 8010318:	e052      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801031a:	4b2c      	ldr	r3, [pc, #176]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801031c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	605a      	str	r2, [r3, #4]
            break;
 8010322:	e04d      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010324:	4b29      	ldr	r3, [pc, #164]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010326:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	605a      	str	r2, [r3, #4]
            break;
 801032c:	e048      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801032e:	4b27      	ldr	r3, [pc, #156]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	605a      	str	r2, [r3, #4]
            break;
 8010336:	e043      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010338:	4b24      	ldr	r3, [pc, #144]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801033a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	711a      	strb	r2, [r3, #4]
            break;
 8010342:	e03d      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010344:	4b21      	ldr	r3, [pc, #132]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010346:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	711a      	strb	r2, [r3, #4]
            break;
 801034e:	e037      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010350:	4b1e      	ldr	r3, [pc, #120]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010352:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	711a      	strb	r2, [r3, #4]
            break;
 801035a:	e031      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801035c:	4b1b      	ldr	r3, [pc, #108]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801035e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	711a      	strb	r2, [r3, #4]
            break;
 8010366:	e02b      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010368:	4b18      	ldr	r3, [pc, #96]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801036a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	605a      	str	r2, [r3, #4]
            break;
 8010370:	e026      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010372:	4b16      	ldr	r3, [pc, #88]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010374:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	711a      	strb	r2, [r3, #4]
            break;
 801037c:	e020      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801037e:	4b13      	ldr	r3, [pc, #76]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010380:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	605a      	str	r2, [r3, #4]
            break;
 8010386:	e01b      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8010388:	f7ff f934 	bl	800f5f4 <GetNvmData>
 801038c:	4602      	mov	r2, r0
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	605a      	str	r2, [r3, #4]
            break;
 8010392:	e015      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010394:	4b0d      	ldr	r3, [pc, #52]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010396:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	605a      	str	r2, [r3, #4]
            break;
 801039e:	e00f      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a0a      	ldr	r2, [pc, #40]	; (80103cc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80103a4:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80103a8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80103aa:	687c      	ldr	r4, [r7, #4]
 80103ac:	f002 ff74 	bl	8013298 <RegionGetVersion>
 80103b0:	60a0      	str	r0, [r4, #8]
            break;
 80103b2:	e005      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 fefd 	bl	80111b4 <LoRaMacClassBMibGetRequestConfirm>
 80103ba:	4603      	mov	r3, r0
 80103bc:	75fb      	strb	r3, [r7, #23]
            break;
 80103be:	bf00      	nop
        }
    }
    return status;
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	371c      	adds	r7, #28
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd90      	pop	{r4, r7, pc}
 80103ca:	bf00      	nop
 80103cc:	2000095c 	.word	0x2000095c

080103d0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d101      	bne.n	80103e6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e32b      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80103e6:	4bbe      	ldr	r3, [pc, #760]	; (80106e0 <LoRaMacMibSetRequestConfirm+0x310>)
 80103e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103ec:	f003 0302 	and.w	r3, r3, #2
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d001      	beq.n	80103f8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80103f4:	2301      	movs	r3, #1
 80103f6:	e322      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b27      	cmp	r3, #39	; 0x27
 80103fe:	f200 82fc 	bhi.w	80109fa <LoRaMacMibSetRequestConfirm+0x62a>
 8010402:	a201      	add	r2, pc, #4	; (adr r2, 8010408 <LoRaMacMibSetRequestConfirm+0x38>)
 8010404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010408:	080104a9 	.word	0x080104a9
 801040c:	080104b9 	.word	0x080104b9
 8010410:	080104d3 	.word	0x080104d3
 8010414:	080104eb 	.word	0x080104eb
 8010418:	08010503 	.word	0x08010503
 801041c:	0801050f 	.word	0x0801050f
 8010420:	0801051b 	.word	0x0801051b
 8010424:	08010527 	.word	0x08010527
 8010428:	0801054d 	.word	0x0801054d
 801042c:	08010573 	.word	0x08010573
 8010430:	08010599 	.word	0x08010599
 8010434:	080105bf 	.word	0x080105bf
 8010438:	080105e5 	.word	0x080105e5
 801043c:	0801060b 	.word	0x0801060b
 8010440:	08010631 	.word	0x08010631
 8010444:	08010657 	.word	0x08010657
 8010448:	08010677 	.word	0x08010677
 801044c:	080109fb 	.word	0x080109fb
 8010450:	08010683 	.word	0x08010683
 8010454:	080106ff 	.word	0x080106ff
 8010458:	0801073f 	.word	0x0801073f
 801045c:	080107a1 	.word	0x080107a1
 8010460:	08010811 	.word	0x08010811
 8010464:	080107e1 	.word	0x080107e1
 8010468:	08010841 	.word	0x08010841
 801046c:	08010863 	.word	0x08010863
 8010470:	0801086d 	.word	0x0801086d
 8010474:	08010877 	.word	0x08010877
 8010478:	08010881 	.word	0x08010881
 801047c:	0801088b 	.word	0x0801088b
 8010480:	08010895 	.word	0x08010895
 8010484:	080108c7 	.word	0x080108c7
 8010488:	08010933 	.word	0x08010933
 801048c:	08010901 	.word	0x08010901
 8010490:	08010965 	.word	0x08010965
 8010494:	0801097b 	.word	0x0801097b
 8010498:	08010993 	.word	0x08010993
 801049c:	0801099d 	.word	0x0801099d
 80104a0:	080109a9 	.word	0x080109a9
 80104a4:	080109d1 	.word	0x080109d1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	791b      	ldrb	r3, [r3, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7fd fbfb 	bl	800dca8 <SwitchClass>
 80104b2:	4603      	mov	r3, r0
 80104b4:	75fb      	strb	r3, [r7, #23]
            break;
 80104b6:	e2c1      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	791b      	ldrb	r3, [r3, #4]
 80104bc:	2b02      	cmp	r3, #2
 80104be:	d005      	beq.n	80104cc <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	791a      	ldrb	r2, [r3, #4]
 80104c4:	4b87      	ldr	r3, [pc, #540]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 80104c6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80104ca:	e2b7      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104cc:	2303      	movs	r3, #3
 80104ce:	75fb      	strb	r3, [r7, #23]
            break;
 80104d0:	e2b4      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fa ff06 	bl	800b2e8 <SecureElementSetDevEui>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 8291 	beq.w	8010a06 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104e4:	2303      	movs	r3, #3
 80104e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80104e8:	e28d      	b.n	8010a06 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fa ff1c 	bl	800b32c <SecureElementSetJoinEui>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f000 8287 	beq.w	8010a0a <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80104fc:	2303      	movs	r3, #3
 80104fe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010500:	e283      	b.n	8010a0a <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	791a      	ldrb	r2, [r3, #4]
 8010506:	4b77      	ldr	r3, [pc, #476]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 8010508:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 801050c:	e296      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	4a74      	ldr	r2, [pc, #464]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 8010514:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8010518:	e290      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	4a71      	ldr	r2, [pc, #452]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 8010520:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8010524:	e28a      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00b      	beq.n	8010546 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	4619      	mov	r1, r3
 8010534:	2000      	movs	r0, #0
 8010536:	f001 ff35 	bl	80123a4 <LoRaMacCryptoSetKey>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	f000 8266 	beq.w	8010a0e <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010542:	2311      	movs	r3, #17
 8010544:	e27b      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010546:	2303      	movs	r3, #3
 8010548:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801054a:	e260      	b.n	8010a0e <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00b      	beq.n	801056c <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	4619      	mov	r1, r3
 801055a:	2001      	movs	r0, #1
 801055c:	f001 ff22 	bl	80123a4 <LoRaMacCryptoSetKey>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	f000 8255 	beq.w	8010a12 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010568:	2311      	movs	r3, #17
 801056a:	e268      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801056c:	2303      	movs	r3, #3
 801056e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010570:	e24f      	b.n	8010a12 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00b      	beq.n	8010592 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	4619      	mov	r1, r3
 8010580:	2002      	movs	r0, #2
 8010582:	f001 ff0f 	bl	80123a4 <LoRaMacCryptoSetKey>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	f000 8244 	beq.w	8010a16 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801058e:	2311      	movs	r3, #17
 8010590:	e255      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010592:	2303      	movs	r3, #3
 8010594:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010596:	e23e      	b.n	8010a16 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00b      	beq.n	80105b8 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	4619      	mov	r1, r3
 80105a6:	2003      	movs	r0, #3
 80105a8:	f001 fefc 	bl	80123a4 <LoRaMacCryptoSetKey>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 8233 	beq.w	8010a1a <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80105b4:	2311      	movs	r3, #17
 80105b6:	e242      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105b8:	2303      	movs	r3, #3
 80105ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80105bc:	e22d      	b.n	8010a1a <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00b      	beq.n	80105de <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	4619      	mov	r1, r3
 80105cc:	207f      	movs	r0, #127	; 0x7f
 80105ce:	f001 fee9 	bl	80123a4 <LoRaMacCryptoSetKey>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 8222 	beq.w	8010a1e <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80105da:	2311      	movs	r3, #17
 80105dc:	e22f      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105de:	2303      	movs	r3, #3
 80105e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80105e2:	e21c      	b.n	8010a1e <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00b      	beq.n	8010604 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	4619      	mov	r1, r3
 80105f2:	2080      	movs	r0, #128	; 0x80
 80105f4:	f001 fed6 	bl	80123a4 <LoRaMacCryptoSetKey>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 8211 	beq.w	8010a22 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010600:	2311      	movs	r3, #17
 8010602:	e21c      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010604:	2303      	movs	r3, #3
 8010606:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010608:	e20b      	b.n	8010a22 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00b      	beq.n	801062a <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	4619      	mov	r1, r3
 8010618:	2081      	movs	r0, #129	; 0x81
 801061a:	f001 fec3 	bl	80123a4 <LoRaMacCryptoSetKey>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	f000 8200 	beq.w	8010a26 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010626:	2311      	movs	r3, #17
 8010628:	e209      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801062a:	2303      	movs	r3, #3
 801062c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801062e:	e1fa      	b.n	8010a26 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00b      	beq.n	8010650 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	4619      	mov	r1, r3
 801063e:	2082      	movs	r0, #130	; 0x82
 8010640:	f001 feb0 	bl	80123a4 <LoRaMacCryptoSetKey>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	f000 81ef 	beq.w	8010a2a <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801064c:	2311      	movs	r3, #17
 801064e:	e1f6      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010650:	2303      	movs	r3, #3
 8010652:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010654:	e1e9      	b.n	8010a2a <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	791a      	ldrb	r2, [r3, #4]
 801065a:	4b22      	ldr	r3, [pc, #136]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 801065c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010660:	4b21      	ldr	r3, [pc, #132]	; (80106e8 <LoRaMacMibSetRequestConfirm+0x318>)
 8010662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010664:	4a1f      	ldr	r2, [pc, #124]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 8010666:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801066a:	4610      	mov	r0, r2
 801066c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801066e:	4b1e      	ldr	r3, [pc, #120]	; (80106e8 <LoRaMacMibSetRequestConfirm+0x318>)
 8010670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010672:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8010674:	e1e2      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	791a      	ldrb	r2, [r3, #4]
 801067a:	4b1a      	ldr	r3, [pc, #104]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 801067c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8010680:	e1dc      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	7a1b      	ldrb	r3, [r3, #8]
 8010686:	b25b      	sxtb	r3, r3
 8010688:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801068a:	4b16      	ldr	r3, [pc, #88]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 801068c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8010690:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010692:	4b14      	ldr	r3, [pc, #80]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 8010694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010698:	f107 0108 	add.w	r1, r7, #8
 801069c:	2207      	movs	r2, #7
 801069e:	4618      	mov	r0, r3
 80106a0:	f002 fcac 	bl	8012ffc <RegionVerify>
 80106a4:	4603      	mov	r3, r0
 80106a6:	f083 0301 	eor.w	r3, r3, #1
 80106aa:	b2db      	uxtb	r3, r3
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d002      	beq.n	80106b6 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106b0:	2303      	movs	r3, #3
 80106b2:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80106b4:	e1c2      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80106bc:	4b09      	ldr	r3, [pc, #36]	; (80106e4 <LoRaMacMibSetRequestConfirm+0x314>)
 80106be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106c2:	f107 0108 	add.w	r1, r7, #8
 80106c6:	2200      	movs	r2, #0
 80106c8:	4618      	mov	r0, r3
 80106ca:	f002 fc97 	bl	8012ffc <RegionVerify>
 80106ce:	4603      	mov	r3, r0
 80106d0:	f083 0301 	eor.w	r3, r3, #1
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d008      	beq.n	80106ec <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80106da:	2303      	movs	r3, #3
 80106dc:	75fb      	strb	r3, [r7, #23]
            break;
 80106de:	e1ad      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
 80106e0:	20000454 	.word	0x20000454
 80106e4:	2000095c 	.word	0x2000095c
 80106e8:	0801acfc 	.word	0x0801acfc
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80106ec:	4bb6      	ldr	r3, [pc, #728]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	3364      	adds	r3, #100	; 0x64
 80106f2:	3204      	adds	r2, #4
 80106f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106f8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80106fc:	e19e      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	7a1b      	ldrb	r3, [r3, #8]
 8010702:	b25b      	sxtb	r3, r3
 8010704:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010706:	4bb0      	ldr	r3, [pc, #704]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010708:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801070c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801070e:	4bae      	ldr	r3, [pc, #696]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010714:	f107 0108 	add.w	r1, r7, #8
 8010718:	2207      	movs	r2, #7
 801071a:	4618      	mov	r0, r3
 801071c:	f002 fc6e 	bl	8012ffc <RegionVerify>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d008      	beq.n	8010738 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8010726:	4ba8      	ldr	r3, [pc, #672]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	33a4      	adds	r3, #164	; 0xa4
 801072c:	3204      	adds	r2, #4
 801072e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010732:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010736:	e181      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010738:	2303      	movs	r3, #3
 801073a:	75fb      	strb	r3, [r7, #23]
            break;
 801073c:	e17e      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	7a1b      	ldrb	r3, [r3, #8]
 8010742:	b25b      	sxtb	r3, r3
 8010744:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010746:	4ba0      	ldr	r3, [pc, #640]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010748:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801074c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801074e:	4b9e      	ldr	r3, [pc, #632]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010754:	f107 0108 	add.w	r1, r7, #8
 8010758:	2207      	movs	r2, #7
 801075a:	4618      	mov	r0, r3
 801075c:	f002 fc4e 	bl	8012ffc <RegionVerify>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d019      	beq.n	801079a <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8010766:	4b98      	ldr	r3, [pc, #608]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	336c      	adds	r3, #108	; 0x6c
 801076c:	3204      	adds	r2, #4
 801076e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010772:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010776:	4b94      	ldr	r3, [pc, #592]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010778:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801077c:	2b02      	cmp	r3, #2
 801077e:	f040 8156 	bne.w	8010a2e <LoRaMacMibSetRequestConfirm+0x65e>
 8010782:	4b91      	ldr	r3, [pc, #580]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010784:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8010788:	2b00      	cmp	r3, #0
 801078a:	f000 8150 	beq.w	8010a2e <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801078e:	4b8f      	ldr	r3, [pc, #572]	; (80109cc <LoRaMacMibSetRequestConfirm+0x5fc>)
 8010790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010792:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8010794:	f7fe fcda 	bl	800f14c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010798:	e149      	b.n	8010a2e <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801079a:	2303      	movs	r3, #3
 801079c:	75fb      	strb	r3, [r7, #23]
            break;
 801079e:	e146      	b.n	8010a2e <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7a1b      	ldrb	r3, [r3, #8]
 80107a4:	b25b      	sxtb	r3, r3
 80107a6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80107a8:	4b87      	ldr	r3, [pc, #540]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107aa:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80107ae:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80107b0:	4b85      	ldr	r3, [pc, #532]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107b6:	f107 0108 	add.w	r1, r7, #8
 80107ba:	2207      	movs	r2, #7
 80107bc:	4618      	mov	r0, r3
 80107be:	f002 fc1d 	bl	8012ffc <RegionVerify>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d008      	beq.n	80107da <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80107c8:	4b7f      	ldr	r3, [pc, #508]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	33ac      	adds	r3, #172	; 0xac
 80107ce:	3204      	adds	r2, #4
 80107d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80107d8:	e130      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107da:	2303      	movs	r3, #3
 80107dc:	75fb      	strb	r3, [r7, #23]
            break;
 80107de:	e12d      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80107e6:	2301      	movs	r3, #1
 80107e8:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80107ea:	4b77      	ldr	r3, [pc, #476]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80107ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107f0:	f107 020c 	add.w	r2, r7, #12
 80107f4:	4611      	mov	r1, r2
 80107f6:	4618      	mov	r0, r3
 80107f8:	f002 fc29 	bl	801304e <RegionChanMaskSet>
 80107fc:	4603      	mov	r3, r0
 80107fe:	f083 0301 	eor.w	r3, r3, #1
 8010802:	b2db      	uxtb	r3, r3
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8114 	beq.w	8010a32 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801080a:	2303      	movs	r3, #3
 801080c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801080e:	e110      	b.n	8010a32 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8010816:	2300      	movs	r3, #0
 8010818:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801081a:	4b6b      	ldr	r3, [pc, #428]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801081c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010820:	f107 020c 	add.w	r2, r7, #12
 8010824:	4611      	mov	r1, r2
 8010826:	4618      	mov	r0, r3
 8010828:	f002 fc11 	bl	801304e <RegionChanMaskSet>
 801082c:	4603      	mov	r3, r0
 801082e:	f083 0301 	eor.w	r3, r3, #1
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b00      	cmp	r3, #0
 8010836:	f000 80fe 	beq.w	8010a36 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801083a:	2303      	movs	r3, #3
 801083c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801083e:	e0fa      	b.n	8010a36 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	791b      	ldrb	r3, [r3, #4]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d009      	beq.n	801085c <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801084c:	2b0f      	cmp	r3, #15
 801084e:	d805      	bhi.n	801085c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	791a      	ldrb	r2, [r3, #4]
 8010854:	4b5c      	ldr	r3, [pc, #368]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010856:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801085a:	e0ef      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801085c:	2303      	movs	r3, #3
 801085e:	75fb      	strb	r3, [r7, #23]
            break;
 8010860:	e0ec      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	4a58      	ldr	r2, [pc, #352]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010868:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801086a:	e0e7      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	4a55      	ldr	r2, [pc, #340]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010872:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8010874:	e0e2      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	4a53      	ldr	r2, [pc, #332]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801087c:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801087e:	e0dd      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	4a50      	ldr	r2, [pc, #320]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010886:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8010888:	e0d8      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	4a4e      	ldr	r2, [pc, #312]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010890:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8010892:	e0d3      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801089a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801089c:	4b4a      	ldr	r3, [pc, #296]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801089e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108a2:	f107 0108 	add.w	r1, r7, #8
 80108a6:	2206      	movs	r2, #6
 80108a8:	4618      	mov	r0, r3
 80108aa:	f002 fba7 	bl	8012ffc <RegionVerify>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d005      	beq.n	80108c0 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80108b4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80108b8:	4b43      	ldr	r3, [pc, #268]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108ba:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80108be:	e0bd      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80108c0:	2303      	movs	r3, #3
 80108c2:	75fb      	strb	r3, [r7, #23]
            break;
 80108c4:	e0ba      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80108cc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80108ce:	4b3e      	ldr	r3, [pc, #248]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80108d4:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80108d6:	4b3c      	ldr	r3, [pc, #240]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108dc:	f107 0108 	add.w	r1, r7, #8
 80108e0:	2205      	movs	r2, #5
 80108e2:	4618      	mov	r0, r3
 80108e4:	f002 fb8a 	bl	8012ffc <RegionVerify>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d005      	beq.n	80108fa <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80108ee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80108f2:	4b35      	ldr	r3, [pc, #212]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80108f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80108f8:	e0a0      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80108fa:	2303      	movs	r3, #3
 80108fc:	75fb      	strb	r3, [r7, #23]
            break;
 80108fe:	e09d      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010906:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8010908:	4b2f      	ldr	r3, [pc, #188]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801090a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801090e:	f107 0108 	add.w	r1, r7, #8
 8010912:	220a      	movs	r2, #10
 8010914:	4618      	mov	r0, r3
 8010916:	f002 fb71 	bl	8012ffc <RegionVerify>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d005      	beq.n	801092c <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8010920:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010924:	4b28      	ldr	r3, [pc, #160]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010926:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801092a:	e087      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801092c:	2303      	movs	r3, #3
 801092e:	75fb      	strb	r3, [r7, #23]
            break;
 8010930:	e084      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010938:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 801093a:	4b23      	ldr	r3, [pc, #140]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801093c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010940:	f107 0108 	add.w	r1, r7, #8
 8010944:	2209      	movs	r2, #9
 8010946:	4618      	mov	r0, r3
 8010948:	f002 fb58 	bl	8012ffc <RegionVerify>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d005      	beq.n	801095e <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8010952:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010956:	4b1c      	ldr	r3, [pc, #112]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801095c:	e06e      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801095e:	2303      	movs	r3, #3
 8010960:	75fb      	strb	r3, [r7, #23]
            break;
 8010962:	e06b      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	4a17      	ldr	r2, [pc, #92]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801096a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 801096e:	4b16      	ldr	r3, [pc, #88]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010974:	4a14      	ldr	r2, [pc, #80]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010976:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8010978:	e060      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	791a      	ldrb	r2, [r3, #4]
 801097e:	4b12      	ldr	r3, [pc, #72]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010980:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8010984:	4b10      	ldr	r3, [pc, #64]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010986:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801098a:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801098c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8010990:	e054      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4a0c      	ldr	r2, [pc, #48]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8010998:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801099a:	e04f      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	4a09      	ldr	r2, [pc, #36]	; (80109c8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80109a2:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 80109a6:	e049      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d007      	beq.n	80109c0 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fe fe27 	bl	800f608 <RestoreNvmData>
 80109ba:	4603      	mov	r3, r0
 80109bc:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80109be:	e03d      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109c0:	2303      	movs	r3, #3
 80109c2:	75fb      	strb	r3, [r7, #23]
            break;
 80109c4:	e03a      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
 80109c6:	bf00      	nop
 80109c8:	2000095c 	.word	0x2000095c
 80109cc:	0801acfc 	.word	0x0801acfc
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	799b      	ldrb	r3, [r3, #6]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d80d      	bhi.n	80109f4 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80109d8:	4a1b      	ldr	r2, [pc, #108]	; (8010a48 <LoRaMacMibSetRequestConfirm+0x678>)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6858      	ldr	r0, [r3, #4]
 80109e6:	f001 fc23 	bl	8012230 <LoRaMacCryptoSetLrWanVersion>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d024      	beq.n	8010a3a <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80109f0:	2311      	movs	r3, #17
 80109f2:	e024      	b.n	8010a3e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109f4:	2303      	movs	r3, #3
 80109f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80109f8:	e01f      	b.n	8010a3a <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 fbe4 	bl	80111c8 <LoRaMacMibClassBSetRequestConfirm>
 8010a00:	4603      	mov	r3, r0
 8010a02:	75fb      	strb	r3, [r7, #23]
            break;
 8010a04:	e01a      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a06:	bf00      	nop
 8010a08:	e018      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a0a:	bf00      	nop
 8010a0c:	e016      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a0e:	bf00      	nop
 8010a10:	e014      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a12:	bf00      	nop
 8010a14:	e012      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a16:	bf00      	nop
 8010a18:	e010      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a1a:	bf00      	nop
 8010a1c:	e00e      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a1e:	bf00      	nop
 8010a20:	e00c      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a22:	bf00      	nop
 8010a24:	e00a      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a26:	bf00      	nop
 8010a28:	e008      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a2a:	bf00      	nop
 8010a2c:	e006      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a2e:	bf00      	nop
 8010a30:	e004      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a32:	bf00      	nop
 8010a34:	e002      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a36:	bf00      	nop
 8010a38:	e000      	b.n	8010a3c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8010a3a:	bf00      	nop
        }
    }
    return status;
 8010a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3718      	adds	r7, #24
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	2000095c 	.word	0x2000095c

08010a4c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b086      	sub	sp, #24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010a54:	2302      	movs	r3, #2
 8010a56:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010a58:	2300      	movs	r3, #0
 8010a5a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d101      	bne.n	8010a66 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a62:	2303      	movs	r3, #3
 8010a64:	e127      	b.n	8010cb6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8010a66:	f7fc fd23 	bl	800d4b0 <LoRaMacIsBusy>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010a70:	2301      	movs	r3, #1
 8010a72:	e120      	b.n	8010cb6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8010a74:	f001 f8a6 	bl	8011bc4 <LoRaMacConfirmQueueIsFull>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d001      	beq.n	8010a82 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e119      	b.n	8010cb6 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010a82:	f001 f893 	bl	8011bac <LoRaMacConfirmQueueGetCnt>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d104      	bne.n	8010a96 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8010a8c:	2214      	movs	r2, #20
 8010a8e:	2100      	movs	r1, #0
 8010a90:	488b      	ldr	r0, [pc, #556]	; (8010cc0 <LoRaMacMlmeRequest+0x274>)
 8010a92:	f004 fdbd 	bl	8015610 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010a96:	4b8b      	ldr	r3, [pc, #556]	; (8010cc4 <LoRaMacMlmeRequest+0x278>)
 8010a98:	2201      	movs	r2, #1
 8010a9a:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010a9e:	4a89      	ldr	r2, [pc, #548]	; (8010cc4 <LoRaMacMlmeRequest+0x278>)
 8010aa0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010aa4:	f043 0304 	orr.w	r3, r3, #4
 8010aa8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	3b01      	subs	r3, #1
 8010ac0:	2b0d      	cmp	r3, #13
 8010ac2:	f200 80ce 	bhi.w	8010c62 <LoRaMacMlmeRequest+0x216>
 8010ac6:	a201      	add	r2, pc, #4	; (adr r2, 8010acc <LoRaMacMlmeRequest+0x80>)
 8010ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010acc:	08010b05 	.word	0x08010b05
 8010ad0:	08010c63 	.word	0x08010c63
 8010ad4:	08010c63 	.word	0x08010c63
 8010ad8:	08010b6f 	.word	0x08010b6f
 8010adc:	08010b8d 	.word	0x08010b8d
 8010ae0:	08010b9d 	.word	0x08010b9d
 8010ae4:	08010c63 	.word	0x08010c63
 8010ae8:	08010c63 	.word	0x08010c63
 8010aec:	08010c63 	.word	0x08010c63
 8010af0:	08010bb9 	.word	0x08010bb9
 8010af4:	08010c63 	.word	0x08010c63
 8010af8:	08010c37 	.word	0x08010c37
 8010afc:	08010bd7 	.word	0x08010bd7
 8010b00:	08010c19 	.word	0x08010c19
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8010b04:	4b6f      	ldr	r3, [pc, #444]	; (8010cc4 <LoRaMacMlmeRequest+0x278>)
 8010b06:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010b0a:	f003 0320 	and.w	r3, r3, #32
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8010b12:	2301      	movs	r3, #1
 8010b14:	e0cf      	b.n	8010cb6 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8010b16:	f7fe f9fd 	bl	800ef14 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8010b1a:	4b6b      	ldr	r3, [pc, #428]	; (8010cc8 <LoRaMacMlmeRequest+0x27c>)
 8010b1c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	791b      	ldrb	r3, [r3, #4]
 8010b24:	b25b      	sxtb	r3, r3
 8010b26:	2200      	movs	r2, #0
 8010b28:	4619      	mov	r1, r3
 8010b2a:	f002 fb4f 	bl	80131cc <RegionAlternateDr>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	461a      	mov	r2, r3
 8010b32:	4b65      	ldr	r3, [pc, #404]	; (8010cc8 <LoRaMacMlmeRequest+0x27c>)
 8010b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8010b38:	2307      	movs	r3, #7
 8010b3a:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8010b3c:	20ff      	movs	r0, #255	; 0xff
 8010b3e:	f7fd ff61 	bl	800ea04 <SendReJoinReq>
 8010b42:	4603      	mov	r3, r0
 8010b44:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8010b46:	7dfb      	ldrb	r3, [r7, #23]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 808c 	beq.w	8010c66 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8010b4e:	4b5e      	ldr	r3, [pc, #376]	; (8010cc8 <LoRaMacMlmeRequest+0x27c>)
 8010b50:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	791b      	ldrb	r3, [r3, #4]
 8010b58:	b25b      	sxtb	r3, r3
 8010b5a:	2201      	movs	r2, #1
 8010b5c:	4619      	mov	r1, r3
 8010b5e:	f002 fb35 	bl	80131cc <RegionAlternateDr>
 8010b62:	4603      	mov	r3, r0
 8010b64:	461a      	mov	r2, r3
 8010b66:	4b58      	ldr	r3, [pc, #352]	; (8010cc8 <LoRaMacMlmeRequest+0x27c>)
 8010b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8010b6c:	e07b      	b.n	8010c66 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010b72:	f107 030c 	add.w	r3, r7, #12
 8010b76:	2200      	movs	r2, #0
 8010b78:	4619      	mov	r1, r3
 8010b7a:	2002      	movs	r0, #2
 8010b7c:	f000 fc88 	bl	8011490 <LoRaMacCommandsAddCmd>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d071      	beq.n	8010c6a <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b86:	2313      	movs	r3, #19
 8010b88:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010b8a:	e06e      	b.n	8010c6a <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	889b      	ldrh	r3, [r3, #4]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fe fcdb 	bl	800f54c <SetTxContinuousWave>
 8010b96:	4603      	mov	r3, r0
 8010b98:	75fb      	strb	r3, [r7, #23]
            break;
 8010b9a:	e06d      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	8898      	ldrh	r0, [r3, #4]
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6899      	ldr	r1, [r3, #8]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	461a      	mov	r2, r3
 8010bae:	f7fe fd01 	bl	800f5b4 <SetTxContinuousWave1>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	75fb      	strb	r3, [r7, #23]
            break;
 8010bb6:	e05f      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010bbc:	f107 030c 	add.w	r3, r7, #12
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	200d      	movs	r0, #13
 8010bc6:	f000 fc63 	bl	8011490 <LoRaMacCommandsAddCmd>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d04e      	beq.n	8010c6e <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010bd0:	2313      	movs	r3, #19
 8010bd2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010bd4:	e04b      	b.n	8010c6e <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010bd6:	4b3c      	ldr	r3, [pc, #240]	; (8010cc8 <LoRaMacMlmeRequest+0x27c>)
 8010bd8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d148      	bne.n	8010c72 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	791b      	ldrb	r3, [r3, #4]
 8010be4:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	791b      	ldrb	r3, [r3, #4]
 8010bea:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f000 fabe 	bl	8011172 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8010bf6:	7dbb      	ldrb	r3, [r7, #22]
 8010bf8:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8010bfe:	f107 030c 	add.w	r3, r7, #12
 8010c02:	2201      	movs	r2, #1
 8010c04:	4619      	mov	r1, r3
 8010c06:	2010      	movs	r0, #16
 8010c08:	f000 fc42 	bl	8011490 <LoRaMacCommandsAddCmd>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d02f      	beq.n	8010c72 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c12:	2313      	movs	r3, #19
 8010c14:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8010c16:	e02c      	b.n	8010c72 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010c1c:	f107 030c 	add.w	r3, r7, #12
 8010c20:	2200      	movs	r2, #0
 8010c22:	4619      	mov	r1, r3
 8010c24:	2012      	movs	r0, #18
 8010c26:	f000 fc33 	bl	8011490 <LoRaMacCommandsAddCmd>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d022      	beq.n	8010c76 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c30:	2313      	movs	r3, #19
 8010c32:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010c34:	e01f      	b.n	8010c76 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8010c36:	2301      	movs	r3, #1
 8010c38:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8010c3a:	f000 fa50 	bl	80110de <LoRaMacClassBIsAcquisitionInProgress>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	f083 0301 	eor.w	r3, r3, #1
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d008      	beq.n	8010c5c <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	f000 fa29 	bl	80110a2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8010c50:	2000      	movs	r0, #0
 8010c52:	f000 fa4b 	bl	80110ec <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8010c56:	2300      	movs	r3, #0
 8010c58:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8010c5a:	e00d      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	75fb      	strb	r3, [r7, #23]
            break;
 8010c60:	e00a      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8010c62:	bf00      	nop
 8010c64:	e008      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c66:	bf00      	nop
 8010c68:	e006      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c6a:	bf00      	nop
 8010c6c:	e004      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c6e:	bf00      	nop
 8010c70:	e002      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c72:	bf00      	nop
 8010c74:	e000      	b.n	8010c78 <LoRaMacMlmeRequest+0x22c>
            break;
 8010c76:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010c78:	4b12      	ldr	r3, [pc, #72]	; (8010cc4 <LoRaMacMlmeRequest+0x278>)
 8010c7a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8010c82:	7dfb      	ldrb	r3, [r7, #23]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d010      	beq.n	8010caa <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010c88:	f000 ff90 	bl	8011bac <LoRaMacConfirmQueueGetCnt>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d110      	bne.n	8010cb4 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8010c92:	4b0c      	ldr	r3, [pc, #48]	; (8010cc4 <LoRaMacMlmeRequest+0x278>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010c9a:	4a0a      	ldr	r2, [pc, #40]	; (8010cc4 <LoRaMacMlmeRequest+0x278>)
 8010c9c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010ca0:	f36f 0382 	bfc	r3, #2, #1
 8010ca4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8010ca8:	e004      	b.n	8010cb4 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8010caa:	f107 0310 	add.w	r3, r7, #16
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f000 fe2e 	bl	8011910 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8010cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3718      	adds	r7, #24
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	200008a0 	.word	0x200008a0
 8010cc4:	20000454 	.word	0x20000454
 8010cc8:	2000095c 	.word	0x2000095c

08010ccc <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b08c      	sub	sp, #48	; 0x30
 8010cd0:	af02      	add	r7, sp, #8
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010cd8:	2302      	movs	r3, #2
 8010cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8010cec:	2300      	movs	r3, #0
 8010cee:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010cf6:	2303      	movs	r3, #3
 8010cf8:	e0d4      	b.n	8010ea4 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8010cfa:	f7fc fbd9 	bl	800d4b0 <LoRaMacIsBusy>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d001      	beq.n	8010d08 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8010d04:	2301      	movs	r3, #1
 8010d06:	e0cd      	b.n	8010ea4 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8010d0c:	2214      	movs	r2, #20
 8010d0e:	2100      	movs	r1, #0
 8010d10:	4866      	ldr	r0, [pc, #408]	; (8010eac <LoRaMacMcpsRequest+0x1e0>)
 8010d12:	f004 fc7d 	bl	8015610 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d16:	4b66      	ldr	r3, [pc, #408]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010d18:	2201      	movs	r2, #1
 8010d1a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010d1e:	4b64      	ldr	r3, [pc, #400]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010d20:	2201      	movs	r2, #1
 8010d22:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	2b03      	cmp	r3, #3
 8010d2c:	d03d      	beq.n	8010daa <LoRaMacMcpsRequest+0xde>
 8010d2e:	2b03      	cmp	r3, #3
 8010d30:	dc4f      	bgt.n	8010dd2 <LoRaMacMcpsRequest+0x106>
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d002      	beq.n	8010d3c <LoRaMacMcpsRequest+0x70>
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d019      	beq.n	8010d6e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8010d3a:	e04a      	b.n	8010dd2 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8010d40:	4b5b      	ldr	r3, [pc, #364]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010d42:	2201      	movs	r2, #1
 8010d44:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8010d48:	7b3b      	ldrb	r3, [r7, #12]
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	f362 1347 	bfi	r3, r2, #5, #3
 8010d50:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	791b      	ldrb	r3, [r3, #4]
 8010d56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	689b      	ldr	r3, [r3, #8]
 8010d5e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	899b      	ldrh	r3, [r3, #12]
 8010d64:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	7b9b      	ldrb	r3, [r3, #14]
 8010d6a:	777b      	strb	r3, [r7, #29]
            break;
 8010d6c:	e032      	b.n	8010dd4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	7bdb      	ldrb	r3, [r3, #15]
 8010d76:	2b08      	cmp	r3, #8
 8010d78:	bf28      	it	cs
 8010d7a:	2308      	movcs	r3, #8
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	4b4c      	ldr	r3, [pc, #304]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010d80:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8010d84:	7b3b      	ldrb	r3, [r7, #12]
 8010d86:	2204      	movs	r2, #4
 8010d88:	f362 1347 	bfi	r3, r2, #5, #3
 8010d8c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	791b      	ldrb	r3, [r3, #4]
 8010d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	899b      	ldrh	r3, [r3, #12]
 8010da0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7b9b      	ldrb	r3, [r3, #14]
 8010da6:	777b      	strb	r3, [r7, #29]
            break;
 8010da8:	e014      	b.n	8010dd4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8010daa:	2301      	movs	r3, #1
 8010dac:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8010dae:	4b40      	ldr	r3, [pc, #256]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010db0:	2201      	movs	r2, #1
 8010db2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8010db6:	7b3b      	ldrb	r3, [r7, #12]
 8010db8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8010dbc:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	891b      	ldrh	r3, [r3, #8]
 8010dc8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	7a9b      	ldrb	r3, [r3, #10]
 8010dce:	777b      	strb	r3, [r7, #29]
            break;
 8010dd0:	e000      	b.n	8010dd4 <LoRaMacMcpsRequest+0x108>
            break;
 8010dd2:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010dd8:	4b36      	ldr	r3, [pc, #216]	; (8010eb4 <LoRaMacMcpsRequest+0x1e8>)
 8010dda:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010dde:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010de0:	4b34      	ldr	r3, [pc, #208]	; (8010eb4 <LoRaMacMcpsRequest+0x1e8>)
 8010de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010de6:	f107 0214 	add.w	r2, r7, #20
 8010dea:	4611      	mov	r1, r2
 8010dec:	4618      	mov	r0, r3
 8010dee:	f002 f8c9 	bl	8012f84 <RegionGetPhyParam>
 8010df2:	4603      	mov	r3, r0
 8010df4:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	b25b      	sxtb	r3, r3
 8010dfa:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	bfb8      	it	lt
 8010e02:	4613      	movlt	r3, r2
 8010e04:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8010e06:	7f3b      	ldrb	r3, [r7, #28]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d044      	beq.n	8010e96 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8010e0c:	4b29      	ldr	r3, [pc, #164]	; (8010eb4 <LoRaMacMcpsRequest+0x1e8>)
 8010e0e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010e12:	f083 0301 	eor.w	r3, r3, #1
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d019      	beq.n	8010e50 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8010e1c:	7f7b      	ldrb	r3, [r7, #29]
 8010e1e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e20:	4b24      	ldr	r3, [pc, #144]	; (8010eb4 <LoRaMacMcpsRequest+0x1e8>)
 8010e22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e26:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010e28:	4b22      	ldr	r3, [pc, #136]	; (8010eb4 <LoRaMacMcpsRequest+0x1e8>)
 8010e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e2e:	f107 0108 	add.w	r1, r7, #8
 8010e32:	2205      	movs	r2, #5
 8010e34:	4618      	mov	r0, r3
 8010e36:	f002 f8e1 	bl	8012ffc <RegionVerify>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d005      	beq.n	8010e4c <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010e40:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8010e44:	4b1b      	ldr	r3, [pc, #108]	; (8010eb4 <LoRaMacMcpsRequest+0x1e8>)
 8010e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8010e4a:	e001      	b.n	8010e50 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e4c:	2303      	movs	r3, #3
 8010e4e:	e029      	b.n	8010ea4 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010e50:	8bfa      	ldrh	r2, [r7, #30]
 8010e52:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8010e56:	f107 000c 	add.w	r0, r7, #12
 8010e5a:	78fb      	ldrb	r3, [r7, #3]
 8010e5c:	9300      	str	r3, [sp, #0]
 8010e5e:	4613      	mov	r3, r2
 8010e60:	6a3a      	ldr	r2, [r7, #32]
 8010e62:	f7fd fcef 	bl	800e844 <Send>
 8010e66:	4603      	mov	r3, r0
 8010e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8010e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d10c      	bne.n	8010e8e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	781a      	ldrb	r2, [r3, #0]
 8010e78:	4b0d      	ldr	r3, [pc, #52]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010e7a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8010e7e:	4a0c      	ldr	r2, [pc, #48]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010e80:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010e84:	f043 0301 	orr.w	r3, r3, #1
 8010e88:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8010e8c:	e003      	b.n	8010e96 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8010e8e:	4b08      	ldr	r3, [pc, #32]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010e96:	4b06      	ldr	r3, [pc, #24]	; (8010eb0 <LoRaMacMcpsRequest+0x1e4>)
 8010e98:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	611a      	str	r2, [r3, #16]

    return status;
 8010ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3728      	adds	r7, #40	; 0x28
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	2000088c 	.word	0x2000088c
 8010eb0:	20000454 	.word	0x20000454
 8010eb4:	2000095c 	.word	0x2000095c

08010eb8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8010ec6:	4b0a      	ldr	r3, [pc, #40]	; (8010ef0 <LoRaMacTestSetDutyCycleOn+0x38>)
 8010ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ecc:	f107 010c 	add.w	r1, r7, #12
 8010ed0:	220f      	movs	r2, #15
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f002 f892 	bl	8012ffc <RegionVerify>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d003      	beq.n	8010ee6 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8010ede:	4a04      	ldr	r2, [pc, #16]	; (8010ef0 <LoRaMacTestSetDutyCycleOn+0x38>)
 8010ee0:	79fb      	ldrb	r3, [r7, #7]
 8010ee2:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8010ee6:	bf00      	nop
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	2000095c 	.word	0x2000095c

08010ef4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b08c      	sub	sp, #48	; 0x30
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
 8010f00:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8010f02:	2300      	movs	r3, #0
 8010f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	7c1b      	ldrb	r3, [r3, #16]
 8010f0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	7c5b      	ldrb	r3, [r3, #17]
 8010f14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	689a      	ldr	r2, [r3, #8]
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	795b      	ldrb	r3, [r3, #5]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f000 808b 	beq.w	8011040 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8010f2a:	2302      	movs	r3, #2
 8010f2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	7c9b      	ldrb	r3, [r3, #18]
 8010f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	7cdb      	ldrb	r3, [r3, #19]
 8010f3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010f40:	4611      	mov	r1, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f002 f81e 	bl	8012f84 <RegionGetPhyParam>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8010f4c:	6a3b      	ldr	r3, [r7, #32]
 8010f4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8010f52:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8010f56:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	bfb8      	it	lt
 8010f5e:	4613      	movlt	r3, r2
 8010f60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8010f64:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8010f68:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d106      	bne.n	8010f7e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	2200      	movs	r2, #0
 8010f74:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8010f76:	2300      	movs	r3, #0
 8010f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f7c:	e060      	b.n	8011040 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	8992      	ldrh	r2, [r2, #12]
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d303      	bcc.n	8010f92 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f90:	e002      	b.n	8010f98 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8010f92:	2300      	movs	r3, #0
 8010f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	8992      	ldrh	r2, [r2, #12]
 8010fa0:	4611      	mov	r1, r2
 8010fa2:	68fa      	ldr	r2, [r7, #12]
 8010fa4:	89d2      	ldrh	r2, [r2, #14]
 8010fa6:	440a      	add	r2, r1
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d349      	bcc.n	8011040 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8010fac:	2308      	movs	r3, #8
 8010fae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	7cdb      	ldrb	r3, [r3, #19]
 8010fb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010fba:	4611      	mov	r1, r2
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f001 ffe1 	bl	8012f84 <RegionGetPhyParam>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8010fc6:	6a3b      	ldr	r3, [r7, #32]
 8010fc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	68fa      	ldr	r2, [r7, #12]
 8010fd2:	89d2      	ldrh	r2, [r2, #14]
 8010fd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fd8:	fb02 f201 	mul.w	r2, r2, r1
 8010fdc:	1a9b      	subs	r3, r3, r2
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d12e      	bne.n	8011040 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010fe2:	2322      	movs	r3, #34	; 0x22
 8010fe4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8010fe8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010fec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	7c9b      	ldrb	r3, [r3, #18]
 8010ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	7cdb      	ldrb	r3, [r3, #19]
 8010ffc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011000:	4611      	mov	r1, r2
 8011002:	4618      	mov	r0, r3
 8011004:	f001 ffbe 	bl	8012f84 <RegionGetPhyParam>
 8011008:	4603      	mov	r3, r0
 801100a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 801100c:	6a3b      	ldr	r3, [r7, #32]
 801100e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011012:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011016:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801101a:	429a      	cmp	r2, r3
 801101c:	d110      	bne.n	8011040 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801101e:	2300      	movs	r3, #0
 8011020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	791b      	ldrb	r3, [r3, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d009      	beq.n	8011040 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801102c:	2302      	movs	r3, #2
 801102e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	7cdb      	ldrb	r3, [r3, #19]
 8011034:	f107 0214 	add.w	r2, r7, #20
 8011038:	4611      	mov	r1, r2
 801103a:	4618      	mov	r0, r3
 801103c:	f001 ffcc 	bl	8012fd8 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011046:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801104e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011054:	4618      	mov	r0, r3
 8011056:	3730      	adds	r7, #48	; 0x30
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
 8011068:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	789b      	ldrb	r3, [r3, #2]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d107      	bne.n	8011082 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	687a      	ldr	r2, [r7, #4]
 8011076:	68b9      	ldr	r1, [r7, #8]
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f7ff ff3b 	bl	8010ef4 <CalcNextV10X>
 801107e:	4603      	mov	r3, r0
 8011080:	e000      	b.n	8011084 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011082:	2300      	movs	r3, #0
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 801108c:	b480      	push	{r7}
 801108e:	b085      	sub	sp, #20
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011098:	bf00      	nop
 801109a:	3714      	adds	r7, #20
 801109c:	46bd      	mov	sp, r7
 801109e:	bc80      	pop	{r7}
 80110a0:	4770      	bx	lr

080110a2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80110a2:	b480      	push	{r7}
 80110a4:	b083      	sub	sp, #12
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	4603      	mov	r3, r0
 80110aa:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110ac:	bf00      	nop
 80110ae:	370c      	adds	r7, #12
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bc80      	pop	{r7}
 80110b4:	4770      	bx	lr

080110b6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80110b6:	b480      	push	{r7}
 80110b8:	b083      	sub	sp, #12
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	4603      	mov	r3, r0
 80110be:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bc80      	pop	{r7}
 80110c8:	4770      	bx	lr

080110ca <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80110ca:	b480      	push	{r7}
 80110cc:	b083      	sub	sp, #12
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	4603      	mov	r3, r0
 80110d2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110d4:	bf00      	nop
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	bc80      	pop	{r7}
 80110dc:	4770      	bx	lr

080110de <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80110de:	b480      	push	{r7}
 80110e0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80110e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bc80      	pop	{r7}
 80110ea:	4770      	bx	lr

080110ec <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80110ec:	b480      	push	{r7}
 80110ee:	b083      	sub	sp, #12
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80110f4:	bf00      	nop
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bc80      	pop	{r7}
 80110fc:	4770      	bx	lr

080110fe <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80110fe:	b480      	push	{r7}
 8011100:	b083      	sub	sp, #12
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011106:	bf00      	nop
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	bc80      	pop	{r7}
 801110e:	4770      	bx	lr

08011110 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011110:	b480      	push	{r7}
 8011112:	b083      	sub	sp, #12
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011118:	bf00      	nop
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	bc80      	pop	{r7}
 8011120:	4770      	bx	lr

08011122 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801112e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011130:	4618      	mov	r0, r3
 8011132:	370c      	adds	r7, #12
 8011134:	46bd      	mov	sp, r7
 8011136:	bc80      	pop	{r7}
 8011138:	4770      	bx	lr

0801113a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801113a:	b480      	push	{r7}
 801113c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801113e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011140:	4618      	mov	r0, r3
 8011142:	46bd      	mov	sp, r7
 8011144:	bc80      	pop	{r7}
 8011146:	4770      	bx	lr

08011148 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011148:	b480      	push	{r7}
 801114a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801114c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801114e:	4618      	mov	r0, r3
 8011150:	46bd      	mov	sp, r7
 8011152:	bc80      	pop	{r7}
 8011154:	4770      	bx	lr

08011156 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011156:	b480      	push	{r7}
 8011158:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801115a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801115c:	4618      	mov	r0, r3
 801115e:	46bd      	mov	sp, r7
 8011160:	bc80      	pop	{r7}
 8011162:	4770      	bx	lr

08011164 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011164:	b480      	push	{r7}
 8011166:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011168:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801116a:	4618      	mov	r0, r3
 801116c:	46bd      	mov	sp, r7
 801116e:	bc80      	pop	{r7}
 8011170:	4770      	bx	lr

08011172 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011172:	b480      	push	{r7}
 8011174:	b083      	sub	sp, #12
 8011176:	af00      	add	r7, sp, #0
 8011178:	4603      	mov	r3, r0
 801117a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801117c:	bf00      	nop
 801117e:	370c      	adds	r7, #12
 8011180:	46bd      	mov	sp, r7
 8011182:	bc80      	pop	{r7}
 8011184:	4770      	bx	lr

08011186 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011186:	b480      	push	{r7}
 8011188:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801118a:	bf00      	nop
 801118c:	46bd      	mov	sp, r7
 801118e:	bc80      	pop	{r7}
 8011190:	4770      	bx	lr

08011192 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011192:	b480      	push	{r7}
 8011194:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011196:	bf00      	nop
 8011198:	46bd      	mov	sp, r7
 801119a:	bc80      	pop	{r7}
 801119c:	4770      	bx	lr

0801119e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801119e:	b480      	push	{r7}
 80111a0:	b083      	sub	sp, #12
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	4603      	mov	r3, r0
 80111a6:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80111a8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	370c      	adds	r7, #12
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bc80      	pop	{r7}
 80111b2:	4770      	bx	lr

080111b4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80111b4:	b480      	push	{r7}
 80111b6:	b083      	sub	sp, #12
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80111bc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bc80      	pop	{r7}
 80111c6:	4770      	bx	lr

080111c8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80111d0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	370c      	adds	r7, #12
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bc80      	pop	{r7}
 80111da:	4770      	bx	lr

080111dc <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80111dc:	b480      	push	{r7}
 80111de:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111e0:	bf00      	nop
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bc80      	pop	{r7}
 80111e6:	4770      	bx	lr

080111e8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	6039      	str	r1, [r7, #0]
 80111f2:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80111f4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	370c      	adds	r7, #12
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bc80      	pop	{r7}
 80111fe:	4770      	bx	lr

08011200 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	4603      	mov	r3, r0
 8011208:	603a      	str	r2, [r7, #0]
 801120a:	80fb      	strh	r3, [r7, #6]
 801120c:	460b      	mov	r3, r1
 801120e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011210:	bf00      	nop
 8011212:	370c      	adds	r7, #12
 8011214:	46bd      	mov	sp, r7
 8011216:	bc80      	pop	{r7}
 8011218:	4770      	bx	lr

0801121a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801121a:	b480      	push	{r7}
 801121c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801121e:	bf00      	nop
 8011220:	46bd      	mov	sp, r7
 8011222:	bc80      	pop	{r7}
 8011224:	4770      	bx	lr

08011226 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011226:	b480      	push	{r7}
 8011228:	b083      	sub	sp, #12
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801122e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011230:	4618      	mov	r0, r3
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	bc80      	pop	{r7}
 8011238:	4770      	bx	lr

0801123a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801123a:	b480      	push	{r7}
 801123c:	b083      	sub	sp, #12
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011242:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	bc80      	pop	{r7}
 801124c:	4770      	bx	lr

0801124e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801124e:	b480      	push	{r7}
 8011250:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011252:	bf00      	nop
 8011254:	46bd      	mov	sp, r7
 8011256:	bc80      	pop	{r7}
 8011258:	4770      	bx	lr

0801125a <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 801125a:	b480      	push	{r7}
 801125c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801125e:	bf00      	nop
 8011260:	46bd      	mov	sp, r7
 8011262:	bc80      	pop	{r7}
 8011264:	4770      	bx	lr

08011266 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011266:	b480      	push	{r7}
 8011268:	b085      	sub	sp, #20
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011272:	2300      	movs	r3, #0
 8011274:	81fb      	strh	r3, [r7, #14]
 8011276:	e00a      	b.n	801128e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011278:	89fb      	ldrh	r3, [r7, #14]
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	4413      	add	r3, r2
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d001      	beq.n	8011288 <IsSlotFree+0x22>
        {
            return false;
 8011284:	2300      	movs	r3, #0
 8011286:	e006      	b.n	8011296 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011288:	89fb      	ldrh	r3, [r7, #14]
 801128a:	3301      	adds	r3, #1
 801128c:	81fb      	strh	r3, [r7, #14]
 801128e:	89fb      	ldrh	r3, [r7, #14]
 8011290:	2b0f      	cmp	r3, #15
 8011292:	d9f1      	bls.n	8011278 <IsSlotFree+0x12>
        }
    }
    return true;
 8011294:	2301      	movs	r3, #1
}
 8011296:	4618      	mov	r0, r3
 8011298:	3714      	adds	r7, #20
 801129a:	46bd      	mov	sp, r7
 801129c:	bc80      	pop	{r7}
 801129e:	4770      	bx	lr

080112a0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80112aa:	e007      	b.n	80112bc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80112ac:	79fb      	ldrb	r3, [r7, #7]
 80112ae:	3301      	adds	r3, #1
 80112b0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80112b2:	79fb      	ldrb	r3, [r7, #7]
 80112b4:	2b0f      	cmp	r3, #15
 80112b6:	d101      	bne.n	80112bc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80112b8:	2300      	movs	r3, #0
 80112ba:	e012      	b.n	80112e2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80112bc:	79fb      	ldrb	r3, [r7, #7]
 80112be:	011b      	lsls	r3, r3, #4
 80112c0:	3308      	adds	r3, #8
 80112c2:	4a0a      	ldr	r2, [pc, #40]	; (80112ec <MallocNewMacCommandSlot+0x4c>)
 80112c4:	4413      	add	r3, r2
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7ff ffcd 	bl	8011266 <IsSlotFree>
 80112cc:	4603      	mov	r3, r0
 80112ce:	f083 0301 	eor.w	r3, r3, #1
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d1e9      	bne.n	80112ac <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80112d8:	79fb      	ldrb	r3, [r7, #7]
 80112da:	011b      	lsls	r3, r3, #4
 80112dc:	3308      	adds	r3, #8
 80112de:	4a03      	ldr	r2, [pc, #12]	; (80112ec <MallocNewMacCommandSlot+0x4c>)
 80112e0:	4413      	add	r3, r2
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	20000cac 	.word	0x20000cac

080112f0 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <FreeMacCommandSlot+0x12>
    {
        return false;
 80112fe:	2300      	movs	r3, #0
 8011300:	e005      	b.n	801130e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011302:	2210      	movs	r2, #16
 8011304:	2100      	movs	r1, #0
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f004 f982 	bl	8015610 <memset1>

    return true;
 801130c:	2301      	movs	r3, #1
}
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8011316:	b480      	push	{r7}
 8011318:	b083      	sub	sp, #12
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d101      	bne.n	8011328 <LinkedListInit+0x12>
    {
        return false;
 8011324:	2300      	movs	r3, #0
 8011326:	e006      	b.n	8011336 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2200      	movs	r2, #0
 8011332:	605a      	str	r2, [r3, #4]

    return true;
 8011334:	2301      	movs	r3, #1
}
 8011336:	4618      	mov	r0, r3
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	bc80      	pop	{r7}
 801133e:	4770      	bx	lr

08011340 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d002      	beq.n	8011356 <LinkedListAdd+0x16>
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <LinkedListAdd+0x1a>
    {
        return false;
 8011356:	2300      	movs	r3, #0
 8011358:	e015      	b.n	8011386 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <LinkedListAdd+0x28>
    {
        list->First = element;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d003      	beq.n	8011378 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	683a      	ldr	r2, [r7, #0]
 8011376:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2200      	movs	r2, #0
 801137c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	683a      	ldr	r2, [r7, #0]
 8011382:	605a      	str	r2, [r3, #4]

    return true;
 8011384:	2301      	movs	r3, #1
}
 8011386:	4618      	mov	r0, r3
 8011388:	370c      	adds	r7, #12
 801138a:	46bd      	mov	sp, r7
 801138c:	bc80      	pop	{r7}
 801138e:	4770      	bx	lr

08011390 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <LinkedListGetPrevious+0x16>
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d101      	bne.n	80113aa <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80113a6:	2300      	movs	r3, #0
 80113a8:	e016      	b.n	80113d8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d00c      	beq.n	80113d2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80113b8:	e002      	b.n	80113c0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d007      	beq.n	80113d6 <LinkedListGetPrevious+0x46>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d1f4      	bne.n	80113ba <LinkedListGetPrevious+0x2a>
 80113d0:	e001      	b.n	80113d6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80113d6:	68fb      	ldr	r3, [r7, #12]
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	bc80      	pop	{r7}
 80113e0:	4770      	bx	lr

080113e2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b084      	sub	sp, #16
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d002      	beq.n	80113f8 <LinkedListRemove+0x16>
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d101      	bne.n	80113fc <LinkedListRemove+0x1a>
    {
        return false;
 80113f8:	2300      	movs	r3, #0
 80113fa:	e020      	b.n	801143e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80113fc:	6839      	ldr	r1, [r7, #0]
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f7ff ffc6 	bl	8011390 <LinkedListGetPrevious>
 8011404:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	429a      	cmp	r2, r3
 801140e:	d103      	bne.n	8011418 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	683a      	ldr	r2, [r7, #0]
 801141e:	429a      	cmp	r2, r3
 8011420:	d102      	bne.n	8011428 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d003      	beq.n	8011436 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	2200      	movs	r2, #0
 801143a:	601a      	str	r2, [r3, #0]

    return true;
 801143c:	2301      	movs	r3, #1
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8011446:	b480      	push	{r7}
 8011448:	b083      	sub	sp, #12
 801144a:	af00      	add	r7, sp, #0
 801144c:	4603      	mov	r3, r0
 801144e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8011450:	79fb      	ldrb	r3, [r7, #7]
 8011452:	2b05      	cmp	r3, #5
 8011454:	d004      	beq.n	8011460 <IsSticky+0x1a>
 8011456:	2b05      	cmp	r3, #5
 8011458:	db04      	blt.n	8011464 <IsSticky+0x1e>
 801145a:	3b08      	subs	r3, #8
 801145c:	2b02      	cmp	r3, #2
 801145e:	d801      	bhi.n	8011464 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8011460:	2301      	movs	r3, #1
 8011462:	e000      	b.n	8011466 <IsSticky+0x20>
        default:
            return false;
 8011464:	2300      	movs	r3, #0
    }
}
 8011466:	4618      	mov	r0, r3
 8011468:	370c      	adds	r7, #12
 801146a:	46bd      	mov	sp, r7
 801146c:	bc80      	pop	{r7}
 801146e:	4770      	bx	lr

08011470 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011470:	b580      	push	{r7, lr}
 8011472:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011474:	22fc      	movs	r2, #252	; 0xfc
 8011476:	2100      	movs	r1, #0
 8011478:	4804      	ldr	r0, [pc, #16]	; (801148c <LoRaMacCommandsInit+0x1c>)
 801147a:	f004 f8c9 	bl	8015610 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801147e:	4803      	ldr	r0, [pc, #12]	; (801148c <LoRaMacCommandsInit+0x1c>)
 8011480:	f7ff ff49 	bl	8011316 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20000cac 	.word	0x20000cac

08011490 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af00      	add	r7, sp, #0
 8011496:	4603      	mov	r3, r0
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
 801149c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80114a4:	2301      	movs	r3, #1
 80114a6:	e033      	b.n	8011510 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80114a8:	f7ff fefa 	bl	80112a0 <MallocNewMacCommandSlot>
 80114ac:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d101      	bne.n	80114b8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80114b4:	2302      	movs	r3, #2
 80114b6:	e02b      	b.n	8011510 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80114b8:	6979      	ldr	r1, [r7, #20]
 80114ba:	4817      	ldr	r0, [pc, #92]	; (8011518 <LoRaMacCommandsAddCmd+0x88>)
 80114bc:	f7ff ff40 	bl	8011340 <LinkedListAdd>
 80114c0:	4603      	mov	r3, r0
 80114c2:	f083 0301 	eor.w	r3, r3, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80114cc:	2305      	movs	r3, #5
 80114ce:	e01f      	b.n	8011510 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	7bfa      	ldrb	r2, [r7, #15]
 80114d4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	3305      	adds	r3, #5
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	b292      	uxth	r2, r2
 80114e4:	68b9      	ldr	r1, [r7, #8]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f004 f857 	bl	801559a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80114ec:	7bfb      	ldrb	r3, [r7, #15]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff ffa9 	bl	8011446 <IsSticky>
 80114f4:	4603      	mov	r3, r0
 80114f6:	461a      	mov	r2, r3
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80114fc:	4b06      	ldr	r3, [pc, #24]	; (8011518 <LoRaMacCommandsAddCmd+0x88>)
 80114fe:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4413      	add	r3, r2
 8011506:	3301      	adds	r3, #1
 8011508:	4a03      	ldr	r2, [pc, #12]	; (8011518 <LoRaMacCommandsAddCmd+0x88>)
 801150a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	3718      	adds	r7, #24
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	20000cac 	.word	0x20000cac

0801151c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d101      	bne.n	801152e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801152a:	2301      	movs	r3, #1
 801152c:	e021      	b.n	8011572 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801152e:	6879      	ldr	r1, [r7, #4]
 8011530:	4812      	ldr	r0, [pc, #72]	; (801157c <LoRaMacCommandsRemoveCmd+0x60>)
 8011532:	f7ff ff56 	bl	80113e2 <LinkedListRemove>
 8011536:	4603      	mov	r3, r0
 8011538:	f083 0301 	eor.w	r3, r3, #1
 801153c:	b2db      	uxtb	r3, r3
 801153e:	2b00      	cmp	r3, #0
 8011540:	d001      	beq.n	8011546 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011542:	2303      	movs	r3, #3
 8011544:	e015      	b.n	8011572 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011546:	4b0d      	ldr	r3, [pc, #52]	; (801157c <LoRaMacCommandsRemoveCmd+0x60>)
 8011548:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	3b01      	subs	r3, #1
 8011554:	4a09      	ldr	r2, [pc, #36]	; (801157c <LoRaMacCommandsRemoveCmd+0x60>)
 8011556:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fec8 	bl	80112f0 <FreeMacCommandSlot>
 8011560:	4603      	mov	r3, r0
 8011562:	f083 0301 	eor.w	r3, r3, #1
 8011566:	b2db      	uxtb	r3, r3
 8011568:	2b00      	cmp	r3, #0
 801156a:	d001      	beq.n	8011570 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801156c:	2305      	movs	r3, #5
 801156e:	e000      	b.n	8011572 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20000cac 	.word	0x20000cac

08011580 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011586:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801158c:	e012      	b.n	80115b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	7b1b      	ldrb	r3, [r3, #12]
 8011592:	f083 0301 	eor.w	r3, r3, #1
 8011596:	b2db      	uxtb	r3, r3
 8011598:	2b00      	cmp	r3, #0
 801159a:	d008      	beq.n	80115ae <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7ff ffba 	bl	801151c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	607b      	str	r3, [r7, #4]
 80115ac:	e002      	b.n	80115b4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1e9      	bne.n	801158e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80115ba:	2300      	movs	r3, #0
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3708      	adds	r7, #8
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20000cac 	.word	0x20000cac

080115c8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80115ce:	4b0e      	ldr	r3, [pc, #56]	; (8011608 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80115d4:	e00f      	b.n	80115f6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	791b      	ldrb	r3, [r3, #4]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff ff30 	bl	8011446 <IsSticky>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7ff ff95 	bl	801151c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1ec      	bne.n	80115d6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3708      	adds	r7, #8
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	20000cac 	.word	0x20000cac

0801160c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801161a:	2301      	movs	r3, #1
 801161c:	e005      	b.n	801162a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801161e:	4b05      	ldr	r3, [pc, #20]	; (8011634 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8011620:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8011628:	2300      	movs	r3, #0
}
 801162a:	4618      	mov	r0, r3
 801162c:	370c      	adds	r7, #12
 801162e:	46bd      	mov	sp, r7
 8011630:	bc80      	pop	{r7}
 8011632:	4770      	bx	lr
 8011634:	20000cac 	.word	0x20000cac

08011638 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b088      	sub	sp, #32
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8011644:	4b25      	ldr	r3, [pc, #148]	; (80116dc <LoRaMacCommandsSerializeCmds+0xa4>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d002      	beq.n	801165a <LoRaMacCommandsSerializeCmds+0x22>
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d126      	bne.n	80116a8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801165a:	2301      	movs	r3, #1
 801165c:	e039      	b.n	80116d2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801165e:	7efb      	ldrb	r3, [r7, #27]
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	1ad2      	subs	r2, r2, r3
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	3301      	adds	r3, #1
 801166a:	429a      	cmp	r2, r3
 801166c:	d320      	bcc.n	80116b0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801166e:	7efb      	ldrb	r3, [r7, #27]
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	76fa      	strb	r2, [r7, #27]
 8011674:	461a      	mov	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4413      	add	r3, r2
 801167a:	69fa      	ldr	r2, [r7, #28]
 801167c:	7912      	ldrb	r2, [r2, #4]
 801167e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8011680:	7efb      	ldrb	r3, [r7, #27]
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	18d0      	adds	r0, r2, r3
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	1d59      	adds	r1, r3, #5
 801168a:	69fb      	ldr	r3, [r7, #28]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	b29b      	uxth	r3, r3
 8011690:	461a      	mov	r2, r3
 8011692:	f003 ff82 	bl	801559a <memcpy1>
            itr += curElement->PayloadSize;
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	b2da      	uxtb	r2, r3
 801169c:	7efb      	ldrb	r3, [r7, #27]
 801169e:	4413      	add	r3, r2
 80116a0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1d7      	bne.n	801165e <LoRaMacCommandsSerializeCmds+0x26>
 80116ae:	e009      	b.n	80116c4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80116b0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80116b2:	e007      	b.n	80116c4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80116ba:	69f8      	ldr	r0, [r7, #28]
 80116bc:	f7ff ff2e 	bl	801151c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d1f4      	bne.n	80116b4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80116ca:	68b8      	ldr	r0, [r7, #8]
 80116cc:	f7ff ff9e 	bl	801160c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3720      	adds	r7, #32
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	20000cac 	.word	0x20000cac

080116e0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d101      	bne.n	80116f2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80116ee:	2301      	movs	r3, #1
 80116f0:	e016      	b.n	8011720 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80116f2:	4b0e      	ldr	r3, [pc, #56]	; (801172c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80116fe:	e00b      	b.n	8011718 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	7b1b      	ldrb	r3, [r3, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d004      	beq.n	8011712 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2201      	movs	r2, #1
 801170c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801170e:	2300      	movs	r3, #0
 8011710:	e006      	b.n	8011720 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1f0      	bne.n	8011700 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	bc80      	pop	{r7}
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	20000cac 	.word	0x20000cac

08011730 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	4603      	mov	r3, r0
 8011738:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801173a:	2300      	movs	r3, #0
 801173c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801173e:	79fb      	ldrb	r3, [r7, #7]
 8011740:	3b02      	subs	r3, #2
 8011742:	2b11      	cmp	r3, #17
 8011744:	d850      	bhi.n	80117e8 <LoRaMacCommandsGetCmdSize+0xb8>
 8011746:	a201      	add	r2, pc, #4	; (adr r2, 801174c <LoRaMacCommandsGetCmdSize+0x1c>)
 8011748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174c:	08011795 	.word	0x08011795
 8011750:	0801179b 	.word	0x0801179b
 8011754:	080117a1 	.word	0x080117a1
 8011758:	080117a7 	.word	0x080117a7
 801175c:	080117ad 	.word	0x080117ad
 8011760:	080117b3 	.word	0x080117b3
 8011764:	080117b9 	.word	0x080117b9
 8011768:	080117bf 	.word	0x080117bf
 801176c:	080117c5 	.word	0x080117c5
 8011770:	080117e9 	.word	0x080117e9
 8011774:	080117e9 	.word	0x080117e9
 8011778:	080117cb 	.word	0x080117cb
 801177c:	080117e9 	.word	0x080117e9
 8011780:	080117e9 	.word	0x080117e9
 8011784:	080117d1 	.word	0x080117d1
 8011788:	080117d7 	.word	0x080117d7
 801178c:	080117dd 	.word	0x080117dd
 8011790:	080117e3 	.word	0x080117e3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8011794:	2303      	movs	r3, #3
 8011796:	73fb      	strb	r3, [r7, #15]
            break;
 8011798:	e027      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801179a:	2305      	movs	r3, #5
 801179c:	73fb      	strb	r3, [r7, #15]
            break;
 801179e:	e024      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80117a0:	2302      	movs	r3, #2
 80117a2:	73fb      	strb	r3, [r7, #15]
            break;
 80117a4:	e021      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80117a6:	2305      	movs	r3, #5
 80117a8:	73fb      	strb	r3, [r7, #15]
            break;
 80117aa:	e01e      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80117ac:	2301      	movs	r3, #1
 80117ae:	73fb      	strb	r3, [r7, #15]
            break;
 80117b0:	e01b      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80117b2:	2306      	movs	r3, #6
 80117b4:	73fb      	strb	r3, [r7, #15]
            break;
 80117b6:	e018      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80117b8:	2302      	movs	r3, #2
 80117ba:	73fb      	strb	r3, [r7, #15]
            break;
 80117bc:	e015      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80117be:	2302      	movs	r3, #2
 80117c0:	73fb      	strb	r3, [r7, #15]
            break;
 80117c2:	e012      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80117c4:	2305      	movs	r3, #5
 80117c6:	73fb      	strb	r3, [r7, #15]
            break;
 80117c8:	e00f      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80117ca:	2306      	movs	r3, #6
 80117cc:	73fb      	strb	r3, [r7, #15]
            break;
 80117ce:	e00c      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80117d0:	2301      	movs	r3, #1
 80117d2:	73fb      	strb	r3, [r7, #15]
            break;
 80117d4:	e009      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80117d6:	2305      	movs	r3, #5
 80117d8:	73fb      	strb	r3, [r7, #15]
            break;
 80117da:	e006      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80117dc:	2304      	movs	r3, #4
 80117de:	73fb      	strb	r3, [r7, #15]
            break;
 80117e0:	e003      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80117e2:	2304      	movs	r3, #4
 80117e4:	73fb      	strb	r3, [r7, #15]
            break;
 80117e6:	e000      	b.n	80117ea <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80117e8:	bf00      	nop
        }
    }
    return cidSize;
 80117ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3714      	adds	r7, #20
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bc80      	pop	{r7}
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop

080117f8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4a07      	ldr	r2, [pc, #28]	; (8011820 <IncreaseBufferPointer+0x28>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d102      	bne.n	801180e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011808:	4b06      	ldr	r3, [pc, #24]	; (8011824 <IncreaseBufferPointer+0x2c>)
 801180a:	607b      	str	r3, [r7, #4]
 801180c:	e002      	b.n	8011814 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	3304      	adds	r3, #4
 8011812:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8011814:	687b      	ldr	r3, [r7, #4]
}
 8011816:	4618      	mov	r0, r3
 8011818:	370c      	adds	r7, #12
 801181a:	46bd      	mov	sp, r7
 801181c:	bc80      	pop	{r7}
 801181e:	4770      	bx	lr
 8011820:	20000dc4 	.word	0x20000dc4
 8011824:	20000db4 	.word	0x20000db4

08011828 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	4603      	mov	r3, r0
 8011830:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8011832:	79fb      	ldrb	r3, [r7, #7]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d101      	bne.n	801183c <IsListEmpty+0x14>
    {
        return true;
 8011838:	2301      	movs	r3, #1
 801183a:	e000      	b.n	801183e <IsListEmpty+0x16>
    }
    return false;
 801183c:	2300      	movs	r3, #0
}
 801183e:	4618      	mov	r0, r3
 8011840:	370c      	adds	r7, #12
 8011842:	46bd      	mov	sp, r7
 8011844:	bc80      	pop	{r7}
 8011846:	4770      	bx	lr

08011848 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8011848:	b480      	push	{r7}
 801184a:	b083      	sub	sp, #12
 801184c:	af00      	add	r7, sp, #0
 801184e:	4603      	mov	r3, r0
 8011850:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8011852:	79fb      	ldrb	r3, [r7, #7]
 8011854:	2b04      	cmp	r3, #4
 8011856:	d901      	bls.n	801185c <IsListFull+0x14>
    {
        return true;
 8011858:	2301      	movs	r3, #1
 801185a:	e000      	b.n	801185e <IsListFull+0x16>
    }
    return false;
 801185c:	2300      	movs	r3, #0
}
 801185e:	4618      	mov	r0, r3
 8011860:	370c      	adds	r7, #12
 8011862:	46bd      	mov	sp, r7
 8011864:	bc80      	pop	{r7}
 8011866:	4770      	bx	lr

08011868 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b086      	sub	sp, #24
 801186c:	af00      	add	r7, sp, #0
 801186e:	4603      	mov	r3, r0
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
 8011874:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801187a:	4b13      	ldr	r3, [pc, #76]	; (80118c8 <GetElement+0x60>)
 801187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff ffd1 	bl	8011828 <IsListEmpty>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	d001      	beq.n	8011890 <GetElement+0x28>
    {
        return NULL;
 801188c:	2300      	movs	r3, #0
 801188e:	e017      	b.n	80118c0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8011890:	2300      	movs	r3, #0
 8011892:	74fb      	strb	r3, [r7, #19]
 8011894:	e00d      	b.n	80118b2 <GetElement+0x4a>
    {
        if( element->Request == request )
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	7bfa      	ldrb	r2, [r7, #15]
 801189c:	429a      	cmp	r2, r3
 801189e:	d101      	bne.n	80118a4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	e00d      	b.n	80118c0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80118a4:	6978      	ldr	r0, [r7, #20]
 80118a6:	f7ff ffa7 	bl	80117f8 <IncreaseBufferPointer>
 80118aa:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80118ac:	7cfb      	ldrb	r3, [r7, #19]
 80118ae:	3301      	adds	r3, #1
 80118b0:	74fb      	strb	r3, [r7, #19]
 80118b2:	4b05      	ldr	r3, [pc, #20]	; (80118c8 <GetElement+0x60>)
 80118b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118b8:	7cfa      	ldrb	r2, [r7, #19]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d3eb      	bcc.n	8011896 <GetElement+0x2e>
    }

    return NULL;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3718      	adds	r7, #24
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20000da8 	.word	0x20000da8

080118cc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80118d4:	4a0c      	ldr	r2, [pc, #48]	; (8011908 <LoRaMacConfirmQueueInit+0x3c>)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80118da:	4b0b      	ldr	r3, [pc, #44]	; (8011908 <LoRaMacConfirmQueueInit+0x3c>)
 80118dc:	2200      	movs	r2, #0
 80118de:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80118e2:	4b09      	ldr	r3, [pc, #36]	; (8011908 <LoRaMacConfirmQueueInit+0x3c>)
 80118e4:	4a09      	ldr	r2, [pc, #36]	; (801190c <LoRaMacConfirmQueueInit+0x40>)
 80118e6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80118e8:	4b07      	ldr	r3, [pc, #28]	; (8011908 <LoRaMacConfirmQueueInit+0x3c>)
 80118ea:	4a08      	ldr	r2, [pc, #32]	; (801190c <LoRaMacConfirmQueueInit+0x40>)
 80118ec:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80118ee:	2214      	movs	r2, #20
 80118f0:	21ff      	movs	r1, #255	; 0xff
 80118f2:	4806      	ldr	r0, [pc, #24]	; (801190c <LoRaMacConfirmQueueInit+0x40>)
 80118f4:	f003 fe8c 	bl	8015610 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118f8:	4b03      	ldr	r3, [pc, #12]	; (8011908 <LoRaMacConfirmQueueInit+0x3c>)
 80118fa:	2201      	movs	r2, #1
 80118fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8011900:	bf00      	nop
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	20000da8 	.word	0x20000da8
 801190c:	20000db4 	.word	0x20000db4

08011910 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011918:	4b19      	ldr	r3, [pc, #100]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 801191a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801191e:	4618      	mov	r0, r3
 8011920:	f7ff ff92 	bl	8011848 <IsListFull>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d001      	beq.n	801192e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801192a:	2300      	movs	r3, #0
 801192c:	e023      	b.n	8011976 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801192e:	4b14      	ldr	r3, [pc, #80]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	687a      	ldr	r2, [r7, #4]
 8011934:	7812      	ldrb	r2, [r2, #0]
 8011936:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8011938:	4b11      	ldr	r3, [pc, #68]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	7852      	ldrb	r2, [r2, #1]
 8011940:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8011942:	4b0f      	ldr	r3, [pc, #60]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 8011944:	689b      	ldr	r3, [r3, #8]
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	78d2      	ldrb	r2, [r2, #3]
 801194a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801194c:	4b0c      	ldr	r3, [pc, #48]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	2200      	movs	r2, #0
 8011952:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8011954:	4b0a      	ldr	r3, [pc, #40]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 8011956:	f893 3020 	ldrb.w	r3, [r3, #32]
 801195a:	3301      	adds	r3, #1
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b08      	ldr	r3, [pc, #32]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 8011960:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8011964:	4b06      	ldr	r3, [pc, #24]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 8011966:	689b      	ldr	r3, [r3, #8]
 8011968:	4618      	mov	r0, r3
 801196a:	f7ff ff45 	bl	80117f8 <IncreaseBufferPointer>
 801196e:	4603      	mov	r3, r0
 8011970:	4a03      	ldr	r2, [pc, #12]	; (8011980 <LoRaMacConfirmQueueAdd+0x70>)
 8011972:	6093      	str	r3, [r2, #8]

    return true;
 8011974:	2301      	movs	r3, #1
}
 8011976:	4618      	mov	r0, r3
 8011978:	3708      	adds	r7, #8
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	20000da8 	.word	0x20000da8

08011984 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8011984:	b580      	push	{r7, lr}
 8011986:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011988:	4b0e      	ldr	r3, [pc, #56]	; (80119c4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801198e:	4618      	mov	r0, r3
 8011990:	f7ff ff4a 	bl	8011828 <IsListEmpty>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	d001      	beq.n	801199e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801199a:	2300      	movs	r3, #0
 801199c:	e010      	b.n	80119c0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801199e:	4b09      	ldr	r3, [pc, #36]	; (80119c4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80119a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	b2da      	uxtb	r2, r3
 80119a8:	4b06      	ldr	r3, [pc, #24]	; (80119c4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80119aa:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80119ae:	4b05      	ldr	r3, [pc, #20]	; (80119c4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7ff ff20 	bl	80117f8 <IncreaseBufferPointer>
 80119b8:	4603      	mov	r3, r0
 80119ba:	4a02      	ldr	r2, [pc, #8]	; (80119c4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80119bc:	6053      	str	r3, [r2, #4]

    return true;
 80119be:	2301      	movs	r3, #1
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	20000da8 	.word	0x20000da8

080119c8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	4603      	mov	r3, r0
 80119d0:	460a      	mov	r2, r1
 80119d2:	71fb      	strb	r3, [r7, #7]
 80119d4:	4613      	mov	r3, r2
 80119d6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80119d8:	2300      	movs	r3, #0
 80119da:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80119dc:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <LoRaMacConfirmQueueSetStatus+0x58>)
 80119de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff ff20 	bl	8011828 <IsListEmpty>
 80119e8:	4603      	mov	r3, r0
 80119ea:	f083 0301 	eor.w	r3, r3, #1
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d011      	beq.n	8011a18 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80119f4:	4b0a      	ldr	r3, [pc, #40]	; (8011a20 <LoRaMacConfirmQueueSetStatus+0x58>)
 80119f6:	6859      	ldr	r1, [r3, #4]
 80119f8:	4b09      	ldr	r3, [pc, #36]	; (8011a20 <LoRaMacConfirmQueueSetStatus+0x58>)
 80119fa:	689a      	ldr	r2, [r3, #8]
 80119fc:	79bb      	ldrb	r3, [r7, #6]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff ff32 	bl	8011868 <GetElement>
 8011a04:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d005      	beq.n	8011a18 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	79fa      	ldrb	r2, [r7, #7]
 8011a10:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	2201      	movs	r2, #1
 8011a16:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8011a18:	bf00      	nop
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	20000da8 	.word	0x20000da8

08011a24 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a32:	4b10      	ldr	r3, [pc, #64]	; (8011a74 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7ff fef5 	bl	8011828 <IsListEmpty>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f083 0301 	eor.w	r3, r3, #1
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d00e      	beq.n	8011a68 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8011a4a:	4b0a      	ldr	r3, [pc, #40]	; (8011a74 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011a4c:	6859      	ldr	r1, [r3, #4]
 8011a4e:	4b09      	ldr	r3, [pc, #36]	; (8011a74 <LoRaMacConfirmQueueGetStatus+0x50>)
 8011a50:	689a      	ldr	r2, [r3, #8]
 8011a52:	79fb      	ldrb	r3, [r7, #7]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7ff ff07 	bl	8011868 <GetElement>
 8011a5a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d002      	beq.n	8011a68 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	785b      	ldrb	r3, [r3, #1]
 8011a66:	e000      	b.n	8011a6a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a68:	2301      	movs	r3, #1
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	20000da8 	.word	0x20000da8

08011a78 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	4603      	mov	r3, r0
 8011a80:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8011a82:	4b16      	ldr	r3, [pc, #88]	; (8011adc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8011a88:	4a14      	ldr	r2, [pc, #80]	; (8011adc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011a8a:	79fb      	ldrb	r3, [r7, #7]
 8011a8c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011a90:	4b12      	ldr	r3, [pc, #72]	; (8011adc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ff fec6 	bl	8011828 <IsListEmpty>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	f083 0301 	eor.w	r3, r3, #1
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d015      	beq.n	8011ad4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	79fa      	ldrb	r2, [r7, #7]
 8011aac:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	78db      	ldrb	r3, [r3, #3]
 8011ab2:	f083 0301 	eor.w	r3, r3, #1
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d002      	beq.n	8011ac2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2201      	movs	r2, #1
 8011ac0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8011ac2:	68f8      	ldr	r0, [r7, #12]
 8011ac4:	f7ff fe98 	bl	80117f8 <IncreaseBufferPointer>
 8011ac8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8011aca:	4b04      	ldr	r3, [pc, #16]	; (8011adc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8011acc:	689b      	ldr	r3, [r3, #8]
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d1e9      	bne.n	8011aa8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8011ad4:	bf00      	nop
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	20000da8 	.word	0x20000da8

08011ae0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011aea:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011aec:	6859      	ldr	r1, [r3, #4]
 8011aee:	4b08      	ldr	r3, [pc, #32]	; (8011b10 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8011af0:	689a      	ldr	r2, [r3, #8]
 8011af2:	79fb      	ldrb	r3, [r7, #7]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7ff feb7 	bl	8011868 <GetElement>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d001      	beq.n	8011b04 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8011b00:	2301      	movs	r3, #1
 8011b02:	e000      	b.n	8011b06 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	20000da8 	.word	0x20000da8

08011b14 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011b1c:	4b22      	ldr	r3, [pc, #136]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011b22:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8011b24:	2300      	movs	r3, #0
 8011b26:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8011b28:	2300      	movs	r3, #0
 8011b2a:	73fb      	strb	r3, [r7, #15]
 8011b2c:	e032      	b.n	8011b94 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8011b2e:	4b1e      	ldr	r3, [pc, #120]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	781a      	ldrb	r2, [r3, #0]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8011b38:	4b1b      	ldr	r3, [pc, #108]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	785a      	ldrb	r2, [r3, #1]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8011b42:	4b19      	ldr	r3, [pc, #100]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	789b      	ldrb	r3, [r3, #2]
 8011b48:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8011b4a:	7b7b      	ldrb	r3, [r7, #13]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d005      	beq.n	8011b5c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8011b50:	4b15      	ldr	r3, [pc, #84]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	689b      	ldr	r3, [r3, #8]
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	4798      	blx	r3
 8011b5a:	e00b      	b.n	8011b74 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8011b5c:	4b12      	ldr	r3, [pc, #72]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8011b64:	4b10      	ldr	r3, [pc, #64]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	785b      	ldrb	r3, [r3, #1]
 8011b6a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8011b6c:	4b0e      	ldr	r3, [pc, #56]	; (8011ba8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	78db      	ldrb	r3, [r3, #3]
 8011b72:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8011b74:	f7ff ff06 	bl	8011984 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8011b78:	7b7b      	ldrb	r3, [r7, #13]
 8011b7a:	f083 0301 	eor.w	r3, r3, #1
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d004      	beq.n	8011b8e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8011b84:	f107 0308 	add.w	r3, r7, #8
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7ff fec1 	bl	8011910 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	3301      	adds	r3, #1
 8011b92:	73fb      	strb	r3, [r7, #15]
 8011b94:	7bfa      	ldrb	r2, [r7, #15]
 8011b96:	7bbb      	ldrb	r3, [r7, #14]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d3c8      	bcc.n	8011b2e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8011b9c:	bf00      	nop
 8011b9e:	bf00      	nop
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	20000da8 	.word	0x20000da8

08011bac <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8011bac:	b480      	push	{r7}
 8011bae:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011bb0:	4b03      	ldr	r3, [pc, #12]	; (8011bc0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8011bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bc80      	pop	{r7}
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop
 8011bc0:	20000da8 	.word	0x20000da8

08011bc4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011bc8:	4b06      	ldr	r3, [pc, #24]	; (8011be4 <LoRaMacConfirmQueueIsFull+0x20>)
 8011bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7ff fe3a 	bl	8011848 <IsListFull>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d001      	beq.n	8011bde <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	e000      	b.n	8011be0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8011bde:	2300      	movs	r3, #0
    }
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	20000da8 	.word	0x20000da8

08011be8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b08e      	sub	sp, #56	; 0x38
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	607b      	str	r3, [r7, #4]
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	817b      	strh	r3, [r7, #10]
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d101      	bne.n	8011c04 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c00:	230a      	movs	r3, #10
 8011c02:	e087      	b.n	8011d14 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8011c0e:	2300      	movs	r3, #0
 8011c10:	623b      	str	r3, [r7, #32]
 8011c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	605a      	str	r2, [r3, #4]
 8011c1c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8011c1e:	2300      	movs	r3, #0
 8011c20:	613b      	str	r3, [r7, #16]
 8011c22:	f107 0314 	add.w	r3, r7, #20
 8011c26:	2200      	movs	r2, #0
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	605a      	str	r2, [r3, #4]
 8011c2c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8011c32:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8011c36:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	0a1b      	lsrs	r3, r3, #8
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	0c1b      	lsrs	r3, r3, #16
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	0e1b      	lsrs	r3, r3, #24
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8011c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8011c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c5e:	0a1b      	lsrs	r3, r3, #8
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c66:	0c1b      	lsrs	r3, r3, #16
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c6e:	0e1b      	lsrs	r3, r3, #24
 8011c70:	b2db      	uxtb	r3, r3
 8011c72:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8011c74:	e049      	b.n	8011d0a <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8011c76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8011c7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c7e:	3301      	adds	r3, #1
 8011c80:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8011c82:	f107 0320 	add.w	r3, r7, #32
 8011c86:	7a7a      	ldrb	r2, [r7, #9]
 8011c88:	f107 0010 	add.w	r0, r7, #16
 8011c8c:	2110      	movs	r1, #16
 8011c8e:	f7f9 f9fa 	bl	800b086 <SecureElementAesEncrypt>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d001      	beq.n	8011c9c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011c98:	230f      	movs	r3, #15
 8011c9a:	e03b      	b.n	8011d14 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011ca2:	e01f      	b.n	8011ce4 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8011ca4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011cac:	4413      	add	r3, r2
 8011cae:	461a      	mov	r2, r3
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	7819      	ldrb	r1, [r3, #0]
 8011cb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011cba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8011cbe:	4413      	add	r3, r2
 8011cc0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8011cc4:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8011cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011ccc:	4403      	add	r3, r0
 8011cce:	4618      	mov	r0, r3
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	4403      	add	r3, r0
 8011cd4:	404a      	eors	r2, r1
 8011cd6:	b2d2      	uxtb	r2, r2
 8011cd8:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011cde:	3301      	adds	r3, #1
 8011ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011ce8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011cec:	2a10      	cmp	r2, #16
 8011cee:	bfa8      	it	ge
 8011cf0:	2210      	movge	r2, #16
 8011cf2:	b212      	sxth	r2, r2
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	dbd5      	blt.n	8011ca4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8011cf8:	897b      	ldrh	r3, [r7, #10]
 8011cfa:	3b10      	subs	r3, #16
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8011d00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d04:	3310      	adds	r3, #16
 8011d06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8011d0a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	dcb1      	bgt.n	8011c76 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011d12:	2300      	movs	r3, #0
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3738      	adds	r7, #56	; 0x38
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8011d1c:	b490      	push	{r4, r7}
 8011d1e:	b082      	sub	sp, #8
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	4604      	mov	r4, r0
 8011d24:	4608      	mov	r0, r1
 8011d26:	4611      	mov	r1, r2
 8011d28:	461a      	mov	r2, r3
 8011d2a:	4623      	mov	r3, r4
 8011d2c:	80fb      	strh	r3, [r7, #6]
 8011d2e:	4603      	mov	r3, r0
 8011d30:	717b      	strb	r3, [r7, #5]
 8011d32:	460b      	mov	r3, r1
 8011d34:	713b      	strb	r3, [r7, #4]
 8011d36:	4613      	mov	r3, r2
 8011d38:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d101      	bne.n	8011d44 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d40:	230a      	movs	r3, #10
 8011d42:	e04e      	b.n	8011de2 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	2249      	movs	r2, #73	; 0x49
 8011d48:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	2200      	movs	r2, #0
 8011d50:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	3302      	adds	r3, #2
 8011d56:	2200      	movs	r2, #0
 8011d58:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	3303      	adds	r3, #3
 8011d5e:	2200      	movs	r2, #0
 8011d60:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	3304      	adds	r3, #4
 8011d66:	2200      	movs	r2, #0
 8011d68:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	3305      	adds	r3, #5
 8011d6e:	78fa      	ldrb	r2, [r7, #3]
 8011d70:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	3306      	adds	r3, #6
 8011d76:	693a      	ldr	r2, [r7, #16]
 8011d78:	b2d2      	uxtb	r2, r2
 8011d7a:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	0a1a      	lsrs	r2, r3, #8
 8011d80:	69bb      	ldr	r3, [r7, #24]
 8011d82:	3307      	adds	r3, #7
 8011d84:	b2d2      	uxtb	r2, r2
 8011d86:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	0c1a      	lsrs	r2, r3, #16
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	3308      	adds	r3, #8
 8011d90:	b2d2      	uxtb	r2, r2
 8011d92:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	0e1a      	lsrs	r2, r3, #24
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	3309      	adds	r3, #9
 8011d9c:	b2d2      	uxtb	r2, r2
 8011d9e:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	330a      	adds	r3, #10
 8011da4:	697a      	ldr	r2, [r7, #20]
 8011da6:	b2d2      	uxtb	r2, r2
 8011da8:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	0a1a      	lsrs	r2, r3, #8
 8011dae:	69bb      	ldr	r3, [r7, #24]
 8011db0:	330b      	adds	r3, #11
 8011db2:	b2d2      	uxtb	r2, r2
 8011db4:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	0c1a      	lsrs	r2, r3, #16
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	330c      	adds	r3, #12
 8011dbe:	b2d2      	uxtb	r2, r2
 8011dc0:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	0e1a      	lsrs	r2, r3, #24
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	330d      	adds	r3, #13
 8011dca:	b2d2      	uxtb	r2, r2
 8011dcc:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8011dce:	69bb      	ldr	r3, [r7, #24]
 8011dd0:	330e      	adds	r3, #14
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8011dd6:	69bb      	ldr	r3, [r7, #24]
 8011dd8:	330f      	adds	r3, #15
 8011dda:	88fa      	ldrh	r2, [r7, #6]
 8011ddc:	b2d2      	uxtb	r2, r2
 8011dde:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bc90      	pop	{r4, r7}
 8011dea:	4770      	bx	lr

08011dec <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8011dec:	b590      	push	{r4, r7, lr}
 8011dee:	b08b      	sub	sp, #44	; 0x2c
 8011df0:	af04      	add	r7, sp, #16
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	4608      	mov	r0, r1
 8011df6:	4611      	mov	r1, r2
 8011df8:	461a      	mov	r2, r3
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	807b      	strh	r3, [r7, #2]
 8011dfe:	460b      	mov	r3, r1
 8011e00:	707b      	strb	r3, [r7, #1]
 8011e02:	4613      	mov	r3, r2
 8011e04:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d002      	beq.n	8011e12 <ComputeCmacB0+0x26>
 8011e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d101      	bne.n	8011e16 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011e12:	230a      	movs	r3, #10
 8011e14:	e024      	b.n	8011e60 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011e16:	887b      	ldrh	r3, [r7, #2]
 8011e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e1c:	d901      	bls.n	8011e22 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011e1e:	230e      	movs	r3, #14
 8011e20:	e01e      	b.n	8011e60 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011e22:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8011e26:	783a      	ldrb	r2, [r7, #0]
 8011e28:	7879      	ldrb	r1, [r7, #1]
 8011e2a:	8878      	ldrh	r0, [r7, #2]
 8011e2c:	f107 0308 	add.w	r3, r7, #8
 8011e30:	9302      	str	r3, [sp, #8]
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	9301      	str	r3, [sp, #4]
 8011e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	4623      	mov	r3, r4
 8011e3c:	f7ff ff6e 	bl	8011d1c <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8011e40:	7879      	ldrb	r1, [r7, #1]
 8011e42:	887a      	ldrh	r2, [r7, #2]
 8011e44:	f107 0008 	add.w	r0, r7, #8
 8011e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e4a:	9300      	str	r3, [sp, #0]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	6879      	ldr	r1, [r7, #4]
 8011e50:	f7f9 f8cc 	bl	800afec <SecureElementComputeAesCmac>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d001      	beq.n	8011e5e <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e5a:	230f      	movs	r3, #15
 8011e5c:	e000      	b.n	8011e60 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011e5e:	2300      	movs	r3, #0
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	371c      	adds	r7, #28
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd90      	pop	{r4, r7, pc}

08011e68 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8011e68:	b590      	push	{r4, r7, lr}
 8011e6a:	b0cd      	sub	sp, #308	; 0x134
 8011e6c:	af04      	add	r7, sp, #16
 8011e6e:	1d3c      	adds	r4, r7, #4
 8011e70:	6020      	str	r0, [r4, #0]
 8011e72:	460c      	mov	r4, r1
 8011e74:	4610      	mov	r0, r2
 8011e76:	4619      	mov	r1, r3
 8011e78:	1cbb      	adds	r3, r7, #2
 8011e7a:	4622      	mov	r2, r4
 8011e7c:	801a      	strh	r2, [r3, #0]
 8011e7e:	1c7b      	adds	r3, r7, #1
 8011e80:	4602      	mov	r2, r0
 8011e82:	701a      	strb	r2, [r3, #0]
 8011e84:	463b      	mov	r3, r7
 8011e86:	460a      	mov	r2, r1
 8011e88:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8011e8a:	1d3b      	adds	r3, r7, #4
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d101      	bne.n	8011e96 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011e92:	230a      	movs	r3, #10
 8011e94:	e04b      	b.n	8011f2e <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8011e96:	1cbb      	adds	r3, r7, #2
 8011e98:	881b      	ldrh	r3, [r3, #0]
 8011e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e9e:	d901      	bls.n	8011ea4 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011ea0:	230e      	movs	r3, #14
 8011ea2:	e044      	b.n	8011f2e <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8011ea4:	f107 030c 	add.w	r3, r7, #12
 8011ea8:	f44f 7288 	mov.w	r2, #272	; 0x110
 8011eac:	2100      	movs	r1, #0
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f003 fbae 	bl	8015610 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011eb4:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8011eb8:	463b      	mov	r3, r7
 8011eba:	781a      	ldrb	r2, [r3, #0]
 8011ebc:	1c7b      	adds	r3, r7, #1
 8011ebe:	7819      	ldrb	r1, [r3, #0]
 8011ec0:	1cbb      	adds	r3, r7, #2
 8011ec2:	8818      	ldrh	r0, [r3, #0]
 8011ec4:	f107 030c 	add.w	r3, r7, #12
 8011ec8:	9302      	str	r3, [sp, #8]
 8011eca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011ece:	9301      	str	r3, [sp, #4]
 8011ed0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ed4:	9300      	str	r3, [sp, #0]
 8011ed6:	4623      	mov	r3, r4
 8011ed8:	f7ff ff20 	bl	8011d1c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011edc:	f107 030c 	add.w	r3, r7, #12
 8011ee0:	3310      	adds	r3, #16
 8011ee2:	1cba      	adds	r2, r7, #2
 8011ee4:	8812      	ldrh	r2, [r2, #0]
 8011ee6:	1d39      	adds	r1, r7, #4
 8011ee8:	6809      	ldr	r1, [r1, #0]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f003 fb55 	bl	801559a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8011ef0:	2306      	movs	r3, #6
 8011ef2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011ef6:	1cbb      	adds	r3, r7, #2
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	3310      	adds	r3, #16
 8011efc:	b299      	uxth	r1, r3
 8011efe:	1c7b      	adds	r3, r7, #1
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	f107 000c 	add.w	r0, r7, #12
 8011f06:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011f0a:	f7f9 f88d 	bl	800b028 <SecureElementVerifyAesCmac>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011f14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d101      	bne.n	8011f20 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	e006      	b.n	8011f2e <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8011f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d101      	bne.n	8011f2c <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	e000      	b.n	8011f2e <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011f2c:	230f      	movs	r3, #15
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd90      	pop	{r4, r7, pc}

08011f38 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b085      	sub	sp, #20
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	6039      	str	r1, [r7, #0]
 8011f42:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011f44:	2300      	movs	r3, #0
 8011f46:	73fb      	strb	r3, [r7, #15]
 8011f48:	e011      	b.n	8011f6e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8011f4a:	7bfb      	ldrb	r3, [r7, #15]
 8011f4c:	4a0c      	ldr	r2, [pc, #48]	; (8011f80 <GetKeyAddrItem+0x48>)
 8011f4e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8011f52:	79fa      	ldrb	r2, [r7, #7]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d107      	bne.n	8011f68 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8011f58:	7bfb      	ldrb	r3, [r7, #15]
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4a08      	ldr	r2, [pc, #32]	; (8011f80 <GetKeyAddrItem+0x48>)
 8011f5e:	441a      	add	r2, r3
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011f64:	2300      	movs	r3, #0
 8011f66:	e006      	b.n	8011f76 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011f68:	7bfb      	ldrb	r3, [r7, #15]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	73fb      	strb	r3, [r7, #15]
 8011f6e:	7bfb      	ldrb	r3, [r7, #15]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d9ea      	bls.n	8011f4a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011f74:	230c      	movs	r3, #12
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3714      	adds	r7, #20
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bc80      	pop	{r7}
 8011f7e:	4770      	bx	lr
 8011f80:	20000114 	.word	0x20000114

08011f84 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b088      	sub	sp, #32
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60b9      	str	r1, [r7, #8]
 8011f8c:	607a      	str	r2, [r7, #4]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	4603      	mov	r3, r0
 8011f92:	73fb      	strb	r3, [r7, #15]
 8011f94:	4613      	mov	r3, r2
 8011f96:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8011f98:	2300      	movs	r3, #0
 8011f9a:	613b      	str	r3, [r7, #16]
 8011f9c:	f107 0314 	add.w	r3, r7, #20
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	601a      	str	r2, [r3, #0]
 8011fa4:	605a      	str	r2, [r3, #4]
 8011fa6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8011fa8:	7bfb      	ldrb	r3, [r7, #15]
 8011faa:	2b02      	cmp	r3, #2
 8011fac:	d002      	beq.n	8011fb4 <DeriveSessionKey10x+0x30>
 8011fae:	2b03      	cmp	r3, #3
 8011fb0:	d003      	beq.n	8011fba <DeriveSessionKey10x+0x36>
 8011fb2:	e005      	b.n	8011fc0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	743b      	strb	r3, [r7, #16]
            break;
 8011fb8:	e004      	b.n	8011fc4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8011fba:	2302      	movs	r3, #2
 8011fbc:	743b      	strb	r3, [r7, #16]
            break;
 8011fbe:	e001      	b.n	8011fc4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011fc0:	230b      	movs	r3, #11
 8011fc2:	e02a      	b.n	801201a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	0a1b      	lsrs	r3, r3, #8
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	0c1b      	lsrs	r3, r3, #16
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	0a1b      	lsrs	r3, r3, #8
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	0c1b      	lsrs	r3, r3, #16
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8011ff0:	89bb      	ldrh	r3, [r7, #12]
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8011ff6:	89bb      	ldrh	r3, [r7, #12]
 8011ff8:	0a1b      	lsrs	r3, r3, #8
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012000:	7bfa      	ldrb	r2, [r7, #15]
 8012002:	f107 0310 	add.w	r3, r7, #16
 8012006:	2101      	movs	r1, #1
 8012008:	4618      	mov	r0, r3
 801200a:	f7f9 f89a 	bl	800b142 <SecureElementDeriveAndStoreKey>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d001      	beq.n	8012018 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012014:	230f      	movs	r3, #15
 8012016:	e000      	b.n	801201a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012018:	2300      	movs	r3, #0
}
 801201a:	4618      	mov	r0, r3
 801201c:	3720      	adds	r7, #32
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
	...

08012024 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	6039      	str	r1, [r7, #0]
 801202e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d101      	bne.n	801203a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012036:	230a      	movs	r3, #10
 8012038:	e03b      	b.n	80120b2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801203a:	79fb      	ldrb	r3, [r7, #7]
 801203c:	3b01      	subs	r3, #1
 801203e:	2b03      	cmp	r3, #3
 8012040:	d834      	bhi.n	80120ac <GetLastFcntDown+0x88>
 8012042:	a201      	add	r2, pc, #4	; (adr r2, 8012048 <GetLastFcntDown+0x24>)
 8012044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012048:	08012059 	.word	0x08012059
 801204c:	08012071 	.word	0x08012071
 8012050:	08012089 	.word	0x08012089
 8012054:	080120a1 	.word	0x080120a1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012058:	4b18      	ldr	r3, [pc, #96]	; (80120bc <GetLastFcntDown+0x98>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	691a      	ldr	r2, [r3, #16]
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012062:	4b16      	ldr	r3, [pc, #88]	; (80120bc <GetLastFcntDown+0x98>)
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	4b15      	ldr	r3, [pc, #84]	; (80120bc <GetLastFcntDown+0x98>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	6912      	ldr	r2, [r2, #16]
 801206c:	621a      	str	r2, [r3, #32]
            break;
 801206e:	e01f      	b.n	80120b0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012070:	4b12      	ldr	r3, [pc, #72]	; (80120bc <GetLastFcntDown+0x98>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	695a      	ldr	r2, [r3, #20]
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801207a:	4b10      	ldr	r3, [pc, #64]	; (80120bc <GetLastFcntDown+0x98>)
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	4b0f      	ldr	r3, [pc, #60]	; (80120bc <GetLastFcntDown+0x98>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	6952      	ldr	r2, [r2, #20]
 8012084:	621a      	str	r2, [r3, #32]
            break;
 8012086:	e013      	b.n	80120b0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012088:	4b0c      	ldr	r3, [pc, #48]	; (80120bc <GetLastFcntDown+0x98>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	699a      	ldr	r2, [r3, #24]
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012092:	4b0a      	ldr	r3, [pc, #40]	; (80120bc <GetLastFcntDown+0x98>)
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <GetLastFcntDown+0x98>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	6992      	ldr	r2, [r2, #24]
 801209c:	621a      	str	r2, [r3, #32]
            break;
 801209e:	e007      	b.n	80120b0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80120a0:	4b06      	ldr	r3, [pc, #24]	; (80120bc <GetLastFcntDown+0x98>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	69da      	ldr	r2, [r3, #28]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	601a      	str	r2, [r3, #0]
            break;
 80120aa:	e001      	b.n	80120b0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80120ac:	2305      	movs	r3, #5
 80120ae:	e000      	b.n	80120b2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80120b0:	2300      	movs	r3, #0
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	370c      	adds	r7, #12
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bc80      	pop	{r7}
 80120ba:	4770      	bx	lr
 80120bc:	20000dcc 	.word	0x20000dcc

080120c0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b084      	sub	sp, #16
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	4603      	mov	r3, r0
 80120c8:	6039      	str	r1, [r7, #0]
 80120ca:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80120cc:	2300      	movs	r3, #0
 80120ce:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80120d0:	f107 020c 	add.w	r2, r7, #12
 80120d4:	79fb      	ldrb	r3, [r7, #7]
 80120d6:	4611      	mov	r1, r2
 80120d8:	4618      	mov	r0, r3
 80120da:	f7ff ffa3 	bl	8012024 <GetLastFcntDown>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <CheckFCntDown+0x28>
    {
        return false;
 80120e4:	2300      	movs	r3, #0
 80120e6:	e00a      	b.n	80120fe <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d803      	bhi.n	80120f8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80120f0:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80120f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f6:	d101      	bne.n	80120fc <CheckFCntDown+0x3c>
    {
        return true;
 80120f8:	2301      	movs	r3, #1
 80120fa:	e000      	b.n	80120fe <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80120fc:	2300      	movs	r3, #0
    }
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
	...

08012108 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	4603      	mov	r3, r0
 8012110:	6039      	str	r1, [r7, #0]
 8012112:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012114:	79fb      	ldrb	r3, [r7, #7]
 8012116:	3b01      	subs	r3, #1
 8012118:	2b03      	cmp	r3, #3
 801211a:	d81f      	bhi.n	801215c <UpdateFCntDown+0x54>
 801211c:	a201      	add	r2, pc, #4	; (adr r2, 8012124 <UpdateFCntDown+0x1c>)
 801211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012122:	bf00      	nop
 8012124:	08012135 	.word	0x08012135
 8012128:	0801213f 	.word	0x0801213f
 801212c:	08012149 	.word	0x08012149
 8012130:	08012153 	.word	0x08012153
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012134:	4b0c      	ldr	r3, [pc, #48]	; (8012168 <UpdateFCntDown+0x60>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	683a      	ldr	r2, [r7, #0]
 801213a:	611a      	str	r2, [r3, #16]
            break;
 801213c:	e00f      	b.n	801215e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801213e:	4b0a      	ldr	r3, [pc, #40]	; (8012168 <UpdateFCntDown+0x60>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	683a      	ldr	r2, [r7, #0]
 8012144:	615a      	str	r2, [r3, #20]
            break;
 8012146:	e00a      	b.n	801215e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012148:	4b07      	ldr	r3, [pc, #28]	; (8012168 <UpdateFCntDown+0x60>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	683a      	ldr	r2, [r7, #0]
 801214e:	619a      	str	r2, [r3, #24]
            break;
 8012150:	e005      	b.n	801215e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012152:	4b05      	ldr	r3, [pc, #20]	; (8012168 <UpdateFCntDown+0x60>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	683a      	ldr	r2, [r7, #0]
 8012158:	61da      	str	r2, [r3, #28]
            break;
 801215a:	e000      	b.n	801215e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801215c:	bf00      	nop
    }
}
 801215e:	bf00      	nop
 8012160:	370c      	adds	r7, #12
 8012162:	46bd      	mov	sp, r7
 8012164:	bc80      	pop	{r7}
 8012166:	4770      	bx	lr
 8012168:	20000dcc 	.word	0x20000dcc

0801216c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012172:	4b18      	ldr	r3, [pc, #96]	; (80121d4 <ResetFCnts+0x68>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2200      	movs	r2, #0
 8012178:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801217a:	4b16      	ldr	r3, [pc, #88]	; (80121d4 <ResetFCnts+0x68>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f04f 32ff 	mov.w	r2, #4294967295
 8012182:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012184:	4b13      	ldr	r3, [pc, #76]	; (80121d4 <ResetFCnts+0x68>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f04f 32ff 	mov.w	r2, #4294967295
 801218c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801218e:	4b11      	ldr	r3, [pc, #68]	; (80121d4 <ResetFCnts+0x68>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f04f 32ff 	mov.w	r2, #4294967295
 8012196:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012198:	4b0e      	ldr	r3, [pc, #56]	; (80121d4 <ResetFCnts+0x68>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <ResetFCnts+0x68>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	6992      	ldr	r2, [r2, #24]
 80121a2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80121a4:	2300      	movs	r3, #0
 80121a6:	607b      	str	r3, [r7, #4]
 80121a8:	e00b      	b.n	80121c2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80121aa:	4b0a      	ldr	r3, [pc, #40]	; (80121d4 <ResetFCnts+0x68>)
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	3306      	adds	r3, #6
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	4413      	add	r3, r2
 80121b6:	f04f 32ff 	mov.w	r2, #4294967295
 80121ba:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	3301      	adds	r3, #1
 80121c0:	607b      	str	r3, [r7, #4]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	ddf0      	ble.n	80121aa <ResetFCnts+0x3e>
    }
}
 80121c8:	bf00      	nop
 80121ca:	bf00      	nop
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bc80      	pop	{r7}
 80121d2:	4770      	bx	lr
 80121d4:	20000dcc 	.word	0x20000dcc

080121d8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d101      	bne.n	80121ea <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80121e6:	2309      	movs	r3, #9
 80121e8:	e01c      	b.n	8012224 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80121ea:	4a10      	ldr	r2, [pc, #64]	; (801222c <LoRaMacCryptoInit+0x54>)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80121f0:	4b0e      	ldr	r3, [pc, #56]	; (801222c <LoRaMacCryptoInit+0x54>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2228      	movs	r2, #40	; 0x28
 80121f6:	2100      	movs	r1, #0
 80121f8:	4618      	mov	r0, r3
 80121fa:	f003 fa09 	bl	8015610 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80121fe:	4b0b      	ldr	r3, [pc, #44]	; (801222c <LoRaMacCryptoInit+0x54>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2201      	movs	r2, #1
 8012204:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012206:	4b09      	ldr	r3, [pc, #36]	; (801222c <LoRaMacCryptoInit+0x54>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2201      	movs	r2, #1
 801220c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801220e:	4b07      	ldr	r3, [pc, #28]	; (801222c <LoRaMacCryptoInit+0x54>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2201      	movs	r2, #1
 8012214:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012216:	4b05      	ldr	r3, [pc, #20]	; (801222c <LoRaMacCryptoInit+0x54>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2200      	movs	r2, #0
 801221c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801221e:	f7ff ffa5 	bl	801216c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	3708      	adds	r7, #8
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	20000dcc 	.word	0x20000dcc

08012230 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012238:	4b04      	ldr	r3, [pc, #16]	; (801224c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8012240:	2300      	movs	r3, #0
}
 8012242:	4618      	mov	r0, r3
 8012244:	370c      	adds	r7, #12
 8012246:	46bd      	mov	sp, r7
 8012248:	bc80      	pop	{r7}
 801224a:	4770      	bx	lr
 801224c:	20000dcc 	.word	0x20000dcc

08012250 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d101      	bne.n	8012262 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801225e:	230a      	movs	r3, #10
 8012260:	e006      	b.n	8012270 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012262:	4b06      	ldr	r3, [pc, #24]	; (801227c <LoRaMacCryptoGetFCntUp+0x2c>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	1c5a      	adds	r2, r3, #1
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801226e:	2300      	movs	r3, #0
}
 8012270:	4618      	mov	r0, r3
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	bc80      	pop	{r7}
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	20000dcc 	.word	0x20000dcc

08012280 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8012280:	b5b0      	push	{r4, r5, r7, lr}
 8012282:	b088      	sub	sp, #32
 8012284:	af00      	add	r7, sp, #0
 8012286:	60ba      	str	r2, [r7, #8]
 8012288:	607b      	str	r3, [r7, #4]
 801228a:	4603      	mov	r3, r0
 801228c:	73fb      	strb	r3, [r7, #15]
 801228e:	460b      	mov	r3, r1
 8012290:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 8012292:	2300      	movs	r3, #0
 8012294:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8012296:	2300      	movs	r3, #0
 8012298:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801229a:	2313      	movs	r3, #19
 801229c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d101      	bne.n	80122a8 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80122a4:	230a      	movs	r3, #10
 80122a6:	e04f      	b.n	8012348 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80122a8:	f107 0214 	add.w	r2, r7, #20
 80122ac:	7bfb      	ldrb	r3, [r7, #15]
 80122ae:	4611      	mov	r1, r2
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7ff feb7 	bl	8012024 <GetLastFcntDown>
 80122b6:	4603      	mov	r3, r0
 80122b8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80122ba:	7efb      	ldrb	r3, [r7, #27]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d001      	beq.n	80122c4 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 80122c0:	7efb      	ldrb	r3, [r7, #27]
 80122c2:	e041      	b.n	8012348 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122ca:	d103      	bne.n	80122d4 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	68ba      	ldr	r2, [r7, #8]
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	e01e      	b.n	8012312 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	68ba      	ldr	r2, [r7, #8]
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	dd05      	ble.n	80122f0 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80122e4:	697a      	ldr	r2, [r7, #20]
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	441a      	add	r2, r3
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	601a      	str	r2, [r3, #0]
 80122ee:	e010      	b.n	8012312 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d104      	bne.n	8012300 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80122f6:	697a      	ldr	r2, [r7, #20]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80122fc:	2307      	movs	r3, #7
 80122fe:	e023      	b.n	8012348 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	0c1b      	lsrs	r3, r3, #16
 8012304:	041b      	lsls	r3, r3, #16
 8012306:	68ba      	ldr	r2, [r7, #8]
 8012308:	4413      	add	r3, r2
 801230a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012312:	4b0f      	ldr	r3, [pc, #60]	; (8012350 <LoRaMacCryptoGetFCntDown+0xd0>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	789b      	ldrb	r3, [r3, #2]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d114      	bne.n	8012346 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4618      	mov	r0, r3
 8012322:	f04f 0100 	mov.w	r1, #0
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	461a      	mov	r2, r3
 801232a:	f04f 0300 	mov.w	r3, #0
 801232e:	1a84      	subs	r4, r0, r2
 8012330:	eb61 0503 	sbc.w	r5, r1, r3
 8012334:	89ba      	ldrh	r2, [r7, #12]
 8012336:	f04f 0300 	mov.w	r3, #0
 801233a:	4294      	cmp	r4, r2
 801233c:	eb75 0303 	sbcs.w	r3, r5, r3
 8012340:	db01      	blt.n	8012346 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012342:	2308      	movs	r3, #8
 8012344:	e000      	b.n	8012348 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012346:	2300      	movs	r3, #0
}
 8012348:	4618      	mov	r0, r3
 801234a:	3720      	adds	r7, #32
 801234c:	46bd      	mov	sp, r7
 801234e:	bdb0      	pop	{r4, r5, r7, pc}
 8012350:	20000dcc 	.word	0x20000dcc

08012354 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d101      	bne.n	8012366 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012362:	230a      	movs	r3, #10
 8012364:	e017      	b.n	8012396 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012366:	2300      	movs	r3, #0
 8012368:	60fb      	str	r3, [r7, #12]
 801236a:	e010      	b.n	801238e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801236c:	4b0c      	ldr	r3, [pc, #48]	; (80123a0 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801236e:	6819      	ldr	r1, [r3, #0]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	222c      	movs	r2, #44	; 0x2c
 8012374:	fb02 f303 	mul.w	r3, r2, r3
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	4413      	add	r3, r2
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	3206      	adds	r2, #6
 8012380:	0092      	lsls	r2, r2, #2
 8012382:	440a      	add	r2, r1
 8012384:	3204      	adds	r2, #4
 8012386:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	3301      	adds	r3, #1
 801238c:	60fb      	str	r3, [r7, #12]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	ddeb      	ble.n	801236c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3714      	adds	r7, #20
 801239a:	46bd      	mov	sp, r7
 801239c:	bc80      	pop	{r7}
 801239e:	4770      	bx	lr
 80123a0:	20000dcc 	.word	0x20000dcc

080123a4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	6039      	str	r1, [r7, #0]
 80123ae:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80123b0:	79fb      	ldrb	r3, [r7, #7]
 80123b2:	6839      	ldr	r1, [r7, #0]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7f8 fdbb 	bl	800af30 <SecureElementSetKey>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d001      	beq.n	80123c4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80123c0:	230f      	movs	r3, #15
 80123c2:	e018      	b.n	80123f6 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80123c4:	79fb      	ldrb	r3, [r7, #7]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d114      	bne.n	80123f4 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80123ca:	4b0d      	ldr	r3, [pc, #52]	; (8012400 <LoRaMacCryptoSetKey+0x5c>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	789b      	ldrb	r3, [r3, #2]
 80123d0:	79fa      	ldrb	r2, [r7, #7]
 80123d2:	4611      	mov	r1, r2
 80123d4:	4618      	mov	r0, r3
 80123d6:	f000 fa3f 	bl	8012858 <LoRaMacCryptoDeriveMcRootKey>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80123e0:	230f      	movs	r3, #15
 80123e2:	e008      	b.n	80123f6 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80123e4:	2004      	movs	r0, #4
 80123e6:	f000 fa62 	bl	80128ae <LoRaMacCryptoDeriveMcKEKey>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80123f0:	230f      	movs	r3, #15
 80123f2:	e000      	b.n	80123f6 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3708      	adds	r7, #8
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	20000dcc 	.word	0x20000dcc

08012404 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b086      	sub	sp, #24
 8012408:	af02      	add	r7, sp, #8
 801240a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012412:	230a      	movs	r3, #10
 8012414:	e033      	b.n	801247e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8012416:	2301      	movs	r3, #1
 8012418:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801241e:	f107 0308 	add.w	r3, r7, #8
 8012422:	4618      	mov	r0, r3
 8012424:	f7f8 ff4a 	bl	800b2bc <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	4b17      	ldr	r3, [pc, #92]	; (8012488 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	b292      	uxth	r2, r2
 8012430:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8012432:	4b15      	ldr	r3, [pc, #84]	; (8012488 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	889a      	ldrh	r2, [r3, #4]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 fc18 	bl	8012c72 <LoRaMacSerializerJoinRequest>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d001      	beq.n	801244c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012448:	2311      	movs	r3, #17
 801244a:	e018      	b.n	801247e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6819      	ldr	r1, [r3, #0]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	3318      	adds	r3, #24
 8012454:	7bfa      	ldrb	r2, [r7, #15]
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	4613      	mov	r3, r2
 801245a:	2213      	movs	r2, #19
 801245c:	2000      	movs	r0, #0
 801245e:	f7f8 fdc5 	bl	800afec <SecureElementComputeAesCmac>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	d001      	beq.n	801246c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012468:	230f      	movs	r3, #15
 801246a:	e008      	b.n	801247e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 fc00 	bl	8012c72 <LoRaMacSerializerJoinRequest>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d001      	beq.n	801247c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012478:	2311      	movs	r3, #17
 801247a:	e000      	b.n	801247e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801247c:	2300      	movs	r3, #0
}
 801247e:	4618      	mov	r0, r3
 8012480:	3710      	adds	r7, #16
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	20000dcc 	.word	0x20000dcc

0801248c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801248c:	b590      	push	{r4, r7, lr}
 801248e:	b097      	sub	sp, #92	; 0x5c
 8012490:	af04      	add	r7, sp, #16
 8012492:	4603      	mov	r3, r0
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	607a      	str	r2, [r7, #4]
 8012498:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80124a6:	230a      	movs	r3, #10
 80124a8:	e0bd      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80124aa:	2313      	movs	r3, #19
 80124ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80124b0:	2300      	movs	r3, #0
 80124b2:	61bb      	str	r3, [r7, #24]
 80124b4:	f107 031c 	add.w	r3, r7, #28
 80124b8:	221d      	movs	r2, #29
 80124ba:	2100      	movs	r1, #0
 80124bc:	4618      	mov	r0, r3
 80124be:	f007 fd4b 	bl	8019f58 <memset>
    uint8_t versionMinor         = 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80124c6:	4b5a      	ldr	r3, [pc, #360]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	889b      	ldrh	r3, [r3, #4]
 80124cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681c      	ldr	r4, [r3, #0]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	791b      	ldrb	r3, [r3, #4]
 80124d8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80124dc:	7bf8      	ldrb	r0, [r7, #15]
 80124de:	f107 0217 	add.w	r2, r7, #23
 80124e2:	9202      	str	r2, [sp, #8]
 80124e4:	f107 0218 	add.w	r2, r7, #24
 80124e8:	9201      	str	r2, [sp, #4]
 80124ea:	9300      	str	r3, [sp, #0]
 80124ec:	4623      	mov	r3, r4
 80124ee:	460a      	mov	r2, r1
 80124f0:	68b9      	ldr	r1, [r7, #8]
 80124f2:	f7f8 fe66 	bl	800b1c2 <SecureElementProcessJoinAccept>
 80124f6:	4603      	mov	r3, r0
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d001      	beq.n	8012500 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80124fc:	230f      	movs	r3, #15
 80124fe:	e092      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6818      	ldr	r0, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	791b      	ldrb	r3, [r3, #4]
 8012508:	b29a      	uxth	r2, r3
 801250a:	f107 0318 	add.w	r3, r7, #24
 801250e:	4619      	mov	r1, r3
 8012510:	f003 f843 	bl	801559a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f000 f9ed 	bl	80128f4 <LoRaMacParserJoinAccept>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012520:	2310      	movs	r3, #16
 8012522:	e080      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	799b      	ldrb	r3, [r3, #6]
 8012528:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	79db      	ldrb	r3, [r3, #7]
 801252e:	021b      	lsls	r3, r3, #8
 8012530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012532:	4313      	orrs	r3, r2
 8012534:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	7a1b      	ldrb	r3, [r3, #8]
 801253a:	041b      	lsls	r3, r3, #16
 801253c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801253e:	4313      	orrs	r3, r2
 8012540:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8012542:	4b3b      	ldr	r3, [pc, #236]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801254a:	429a      	cmp	r2, r3
 801254c:	d010      	beq.n	8012570 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801254e:	4b38      	ldr	r3, [pc, #224]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012554:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8012556:	7dfb      	ldrb	r3, [r7, #23]
 8012558:	2100      	movs	r1, #0
 801255a:	4618      	mov	r0, r3
 801255c:	f000 f97c 	bl	8012858 <LoRaMacCryptoDeriveMcRootKey>
 8012560:	4603      	mov	r3, r0
 8012562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012566:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801256a:	2b00      	cmp	r3, #0
 801256c:	d005      	beq.n	801257a <LoRaMacCryptoHandleJoinAccept+0xee>
 801256e:	e001      	b.n	8012574 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8012570:	2303      	movs	r3, #3
 8012572:	e058      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8012574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012578:	e055      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801257a:	2004      	movs	r0, #4
 801257c:	f000 f997 	bl	80128ae <LoRaMacCryptoDeriveMcKEKey>
 8012580:	4603      	mov	r3, r0
 8012582:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012586:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801258e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012592:	e048      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	7a5b      	ldrb	r3, [r3, #9]
 8012598:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	7a9b      	ldrb	r3, [r3, #10]
 801259e:	021b      	lsls	r3, r3, #8
 80125a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125a2:	4313      	orrs	r3, r2
 80125a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	7adb      	ldrb	r3, [r3, #11]
 80125aa:	041b      	lsls	r3, r3, #16
 80125ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125ae:	4313      	orrs	r3, r2
 80125b0:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80125b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80125ba:	2003      	movs	r0, #3
 80125bc:	f7ff fce2 	bl	8011f84 <DeriveSessionKey10x>
 80125c0:	4603      	mov	r3, r0
 80125c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80125c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d002      	beq.n	80125d4 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80125ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125d2:	e028      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80125d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80125da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80125dc:	2002      	movs	r0, #2
 80125de:	f7ff fcd1 	bl	8011f84 <DeriveSessionKey10x>
 80125e2:	4603      	mov	r3, r0
 80125e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80125e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d002      	beq.n	80125f6 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80125f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80125f4:	e017      	b.n	8012626 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80125f6:	4b0e      	ldr	r3, [pc, #56]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	7dfa      	ldrb	r2, [r7, #23]
 80125fc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80125fe:	4b0c      	ldr	r3, [pc, #48]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2200      	movs	r2, #0
 8012604:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012606:	4b0a      	ldr	r3, [pc, #40]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f04f 32ff 	mov.w	r2, #4294967295
 801260e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012610:	4b07      	ldr	r3, [pc, #28]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f04f 32ff 	mov.w	r2, #4294967295
 8012618:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801261a:	4b05      	ldr	r3, [pc, #20]	; (8012630 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f04f 32ff 	mov.w	r2, #4294967295
 8012622:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	374c      	adds	r7, #76	; 0x4c
 801262a:	46bd      	mov	sp, r7
 801262c:	bd90      	pop	{r4, r7, pc}
 801262e:	bf00      	nop
 8012630:	20000dcc 	.word	0x20000dcc

08012634 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8012634:	b590      	push	{r4, r7, lr}
 8012636:	b08b      	sub	sp, #44	; 0x2c
 8012638:	af04      	add	r7, sp, #16
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	607b      	str	r3, [r7, #4]
 801263e:	460b      	mov	r3, r1
 8012640:	72fb      	strb	r3, [r7, #11]
 8012642:	4613      	mov	r3, r2
 8012644:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012646:	2313      	movs	r3, #19
 8012648:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801264a:	2303      	movs	r3, #3
 801264c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d101      	bne.n	8012658 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012654:	230a      	movs	r3, #10
 8012656:	e05f      	b.n	8012718 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8012658:	4b31      	ldr	r3, [pc, #196]	; (8012720 <LoRaMacCryptoSecureMessage+0xec>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	68fa      	ldr	r2, [r7, #12]
 8012660:	429a      	cmp	r2, r3
 8012662:	d201      	bcs.n	8012668 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012664:	2306      	movs	r3, #6
 8012666:	e057      	b.n	8012718 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012672:	2302      	movs	r3, #2
 8012674:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8012676:	4b2a      	ldr	r3, [pc, #168]	; (8012720 <LoRaMacCryptoSecureMessage+0xec>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	429a      	cmp	r2, r3
 8012680:	d916      	bls.n	80126b0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801268c:	b219      	sxth	r1, r3
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	689c      	ldr	r4, [r3, #8]
 8012692:	7dfa      	ldrb	r2, [r7, #23]
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	9301      	str	r3, [sp, #4]
 8012698:	2300      	movs	r3, #0
 801269a:	9300      	str	r3, [sp, #0]
 801269c:	4623      	mov	r3, r4
 801269e:	f7ff faa3 	bl	8011be8 <PayloadEncrypt>
 80126a2:	4603      	mov	r3, r0
 80126a4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80126a6:	7dbb      	ldrb	r3, [r7, #22]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d001      	beq.n	80126b0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80126ac:	7dbb      	ldrb	r3, [r7, #22]
 80126ae:	e033      	b.n	8012718 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 fb60 	bl	8012d76 <LoRaMacSerializerData>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d001      	beq.n	80126c0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80126bc:	2311      	movs	r3, #17
 80126be:	e02b      	b.n	8012718 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80126c0:	2302      	movs	r3, #2
 80126c2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6818      	ldr	r0, [r3, #0]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	791b      	ldrb	r3, [r3, #4]
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	3b04      	subs	r3, #4
 80126d0:	b299      	uxth	r1, r3
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	322c      	adds	r2, #44	; 0x2c
 80126da:	7dfc      	ldrb	r4, [r7, #23]
 80126dc:	9203      	str	r2, [sp, #12]
 80126de:	68fa      	ldr	r2, [r7, #12]
 80126e0:	9202      	str	r2, [sp, #8]
 80126e2:	9301      	str	r3, [sp, #4]
 80126e4:	2300      	movs	r3, #0
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	2300      	movs	r3, #0
 80126ea:	4622      	mov	r2, r4
 80126ec:	f7ff fb7e 	bl	8011dec <ComputeCmacB0>
 80126f0:	4603      	mov	r3, r0
 80126f2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80126f4:	7dbb      	ldrb	r3, [r7, #22]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80126fa:	7dbb      	ldrb	r3, [r7, #22]
 80126fc:	e00c      	b.n	8012718 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f000 fb39 	bl	8012d76 <LoRaMacSerializerData>
 8012704:	4603      	mov	r3, r0
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801270a:	2311      	movs	r3, #17
 801270c:	e004      	b.n	8012718 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801270e:	4b04      	ldr	r3, [pc, #16]	; (8012720 <LoRaMacCryptoSecureMessage+0xec>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	68fa      	ldr	r2, [r7, #12]
 8012714:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	371c      	adds	r7, #28
 801271c:	46bd      	mov	sp, r7
 801271e:	bd90      	pop	{r4, r7, pc}
 8012720:	20000dcc 	.word	0x20000dcc

08012724 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8012724:	b590      	push	{r4, r7, lr}
 8012726:	b08b      	sub	sp, #44	; 0x2c
 8012728:	af04      	add	r7, sp, #16
 801272a:	60b9      	str	r1, [r7, #8]
 801272c:	607b      	str	r3, [r7, #4]
 801272e:	4603      	mov	r3, r0
 8012730:	73fb      	strb	r3, [r7, #15]
 8012732:	4613      	mov	r3, r2
 8012734:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	2b00      	cmp	r3, #0
 801273a:	d101      	bne.n	8012740 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801273c:	230a      	movs	r3, #10
 801273e:	e084      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8012740:	7bbb      	ldrb	r3, [r7, #14]
 8012742:	6879      	ldr	r1, [r7, #4]
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff fcbb 	bl	80120c0 <CheckFCntDown>
 801274a:	4603      	mov	r3, r0
 801274c:	f083 0301 	eor.w	r3, r3, #1
 8012750:	b2db      	uxtb	r3, r3
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8012756:	2306      	movs	r3, #6
 8012758:	e077      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801275a:	2313      	movs	r3, #19
 801275c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801275e:	2303      	movs	r3, #3
 8012760:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8012762:	2302      	movs	r3, #2
 8012764:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012768:	f000 f98f 	bl	8012a8a <LoRaMacParserData>
 801276c:	4603      	mov	r3, r0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8012772:	2310      	movs	r3, #16
 8012774:	e069      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8012776:	f107 0210 	add.w	r2, r7, #16
 801277a:	7bfb      	ldrb	r3, [r7, #15]
 801277c:	4611      	mov	r1, r2
 801277e:	4618      	mov	r0, r3
 8012780:	f7ff fbda 	bl	8011f38 <GetKeyAddrItem>
 8012784:	4603      	mov	r3, r0
 8012786:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012788:	7d7b      	ldrb	r3, [r7, #21]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d001      	beq.n	8012792 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801278e:	7d7b      	ldrb	r3, [r7, #21]
 8012790:	e05b      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	785b      	ldrb	r3, [r3, #1]
 8012796:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	789b      	ldrb	r3, [r3, #2]
 801279c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d001      	beq.n	80127ac <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80127a8:	2302      	movs	r3, #2
 80127aa:	e04e      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	7b1b      	ldrb	r3, [r3, #12]
 80127b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	bf14      	ite	ne
 80127ba:	2301      	movne	r3, #1
 80127bc:	2300      	moveq	r3, #0
 80127be:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80127c0:	4b24      	ldr	r3, [pc, #144]	; (8012854 <LoRaMacCryptoUnsecureMessage+0x130>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	789b      	ldrb	r3, [r3, #2]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d101      	bne.n	80127ce <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80127ca:	2300      	movs	r3, #0
 80127cc:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80127ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d0:	6818      	ldr	r0, [r3, #0]
 80127d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d4:	791b      	ldrb	r3, [r3, #4]
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	3b04      	subs	r3, #4
 80127da:	b299      	uxth	r1, r3
 80127dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e0:	7dbc      	ldrb	r4, [r7, #22]
 80127e2:	7d3a      	ldrb	r2, [r7, #20]
 80127e4:	9303      	str	r3, [sp, #12]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	9302      	str	r3, [sp, #8]
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	9301      	str	r3, [sp, #4]
 80127ee:	2301      	movs	r3, #1
 80127f0:	9300      	str	r3, [sp, #0]
 80127f2:	4623      	mov	r3, r4
 80127f4:	f7ff fb38 	bl	8011e68 <VerifyCmacB0>
 80127f8:	4603      	mov	r3, r0
 80127fa:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80127fc:	7d7b      	ldrb	r3, [r7, #21]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d001      	beq.n	8012806 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8012802:	7d7b      	ldrb	r3, [r7, #21]
 8012804:	e021      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8012806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012808:	f893 3020 	ldrb.w	r3, [r3, #32]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d101      	bne.n	8012814 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8012810:	2302      	movs	r3, #2
 8012812:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8012814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012816:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801281e:	b219      	sxth	r1, r3
 8012820:	7dfa      	ldrb	r2, [r7, #23]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	9301      	str	r3, [sp, #4]
 8012826:	2301      	movs	r3, #1
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	f7ff f9dc 	bl	8011be8 <PayloadEncrypt>
 8012830:	4603      	mov	r3, r0
 8012832:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8012834:	7d7b      	ldrb	r3, [r7, #21]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d001      	beq.n	801283e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801283a:	7d7b      	ldrb	r3, [r7, #21]
 801283c:	e005      	b.n	801284a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801283e:	7bbb      	ldrb	r3, [r7, #14]
 8012840:	6879      	ldr	r1, [r7, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff fc60 	bl	8012108 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8012848:	2300      	movs	r3, #0
}
 801284a:	4618      	mov	r0, r3
 801284c:	371c      	adds	r7, #28
 801284e:	46bd      	mov	sp, r7
 8012850:	bd90      	pop	{r4, r7, pc}
 8012852:	bf00      	nop
 8012854:	20000dcc 	.word	0x20000dcc

08012858 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b086      	sub	sp, #24
 801285c:	af00      	add	r7, sp, #0
 801285e:	4603      	mov	r3, r0
 8012860:	460a      	mov	r2, r1
 8012862:	71fb      	strb	r3, [r7, #7]
 8012864:	4613      	mov	r3, r2
 8012866:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8012868:	79bb      	ldrb	r3, [r7, #6]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d001      	beq.n	8012872 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801286e:	230b      	movs	r3, #11
 8012870:	e019      	b.n	80128a6 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8012872:	2300      	movs	r3, #0
 8012874:	60bb      	str	r3, [r7, #8]
 8012876:	f107 030c 	add.w	r3, r7, #12
 801287a:	2200      	movs	r2, #0
 801287c:	601a      	str	r2, [r3, #0]
 801287e:	605a      	str	r2, [r3, #4]
 8012880:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8012882:	79fb      	ldrb	r3, [r7, #7]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d101      	bne.n	801288c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8012888:	2320      	movs	r3, #32
 801288a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801288c:	79b9      	ldrb	r1, [r7, #6]
 801288e:	f107 0308 	add.w	r3, r7, #8
 8012892:	2204      	movs	r2, #4
 8012894:	4618      	mov	r0, r3
 8012896:	f7f8 fc54 	bl	800b142 <SecureElementDeriveAndStoreKey>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128a0:	230f      	movs	r3, #15
 80128a2:	e000      	b.n	80128a6 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3718      	adds	r7, #24
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}

080128ae <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80128ae:	b580      	push	{r7, lr}
 80128b0:	b086      	sub	sp, #24
 80128b2:	af00      	add	r7, sp, #0
 80128b4:	4603      	mov	r3, r0
 80128b6:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80128b8:	79fb      	ldrb	r3, [r7, #7]
 80128ba:	2b04      	cmp	r3, #4
 80128bc:	d001      	beq.n	80128c2 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80128be:	230b      	movs	r3, #11
 80128c0:	e014      	b.n	80128ec <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80128c2:	2300      	movs	r3, #0
 80128c4:	60bb      	str	r3, [r7, #8]
 80128c6:	f107 030c 	add.w	r3, r7, #12
 80128ca:	2200      	movs	r2, #0
 80128cc:	601a      	str	r2, [r3, #0]
 80128ce:	605a      	str	r2, [r3, #4]
 80128d0:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80128d2:	79f9      	ldrb	r1, [r7, #7]
 80128d4:	f107 0308 	add.w	r3, r7, #8
 80128d8:	227f      	movs	r2, #127	; 0x7f
 80128da:	4618      	mov	r0, r3
 80128dc:	f7f8 fc31 	bl	800b142 <SecureElementDeriveAndStoreKey>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128e6:	230f      	movs	r3, #15
 80128e8:	e000      	b.n	80128ec <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80128ea:	2300      	movs	r3, #0
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3718      	adds	r7, #24
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d003      	beq.n	801290a <LoRaMacParserJoinAccept+0x16>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d101      	bne.n	801290e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801290a:	2302      	movs	r3, #2
 801290c:	e0b9      	b.n	8012a82 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801290e:	2300      	movs	r3, #0
 8012910:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	89fb      	ldrh	r3, [r7, #14]
 8012918:	1c59      	adds	r1, r3, #1
 801291a:	81f9      	strh	r1, [r7, #14]
 801291c:	4413      	add	r3, r2
 801291e:	781a      	ldrb	r2, [r3, #0]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	1d98      	adds	r0, r3, #6
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681a      	ldr	r2, [r3, #0]
 801292c:	89fb      	ldrh	r3, [r7, #14]
 801292e:	4413      	add	r3, r2
 8012930:	2203      	movs	r2, #3
 8012932:	4619      	mov	r1, r3
 8012934:	f002 fe31 	bl	801559a <memcpy1>
    bufItr = bufItr + 3;
 8012938:	89fb      	ldrh	r3, [r7, #14]
 801293a:	3303      	adds	r3, #3
 801293c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f103 0009 	add.w	r0, r3, #9
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	89fb      	ldrh	r3, [r7, #14]
 801294a:	4413      	add	r3, r2
 801294c:	2203      	movs	r2, #3
 801294e:	4619      	mov	r1, r3
 8012950:	f002 fe23 	bl	801559a <memcpy1>
    bufItr = bufItr + 3;
 8012954:	89fb      	ldrh	r3, [r7, #14]
 8012956:	3303      	adds	r3, #3
 8012958:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681a      	ldr	r2, [r3, #0]
 801295e:	89fb      	ldrh	r3, [r7, #14]
 8012960:	1c59      	adds	r1, r3, #1
 8012962:	81f9      	strh	r1, [r7, #14]
 8012964:	4413      	add	r3, r2
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	461a      	mov	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	89fb      	ldrh	r3, [r7, #14]
 8012974:	1c59      	adds	r1, r3, #1
 8012976:	81f9      	strh	r1, [r7, #14]
 8012978:	4413      	add	r3, r2
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	021a      	lsls	r2, r3, #8
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	68db      	ldr	r3, [r3, #12]
 8012982:	431a      	orrs	r2, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	89fb      	ldrh	r3, [r7, #14]
 801298e:	1c59      	adds	r1, r3, #1
 8012990:	81f9      	strh	r1, [r7, #14]
 8012992:	4413      	add	r3, r2
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	041a      	lsls	r2, r3, #16
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	431a      	orrs	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	89fb      	ldrh	r3, [r7, #14]
 80129a8:	1c59      	adds	r1, r3, #1
 80129aa:	81f9      	strh	r1, [r7, #14]
 80129ac:	4413      	add	r3, r2
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	061a      	lsls	r2, r3, #24
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	431a      	orrs	r2, r3
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	89fb      	ldrh	r3, [r7, #14]
 80129c2:	1c59      	adds	r1, r3, #1
 80129c4:	81f9      	strh	r1, [r7, #14]
 80129c6:	4413      	add	r3, r2
 80129c8:	781a      	ldrb	r2, [r3, #0]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	89fb      	ldrh	r3, [r7, #14]
 80129d4:	1c59      	adds	r1, r3, #1
 80129d6:	81f9      	strh	r1, [r7, #14]
 80129d8:	4413      	add	r3, r2
 80129da:	781a      	ldrb	r2, [r3, #0]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	791b      	ldrb	r3, [r3, #4]
 80129e4:	1f1a      	subs	r2, r3, #4
 80129e6:	89fb      	ldrh	r3, [r7, #14]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	2b10      	cmp	r3, #16
 80129ec:	d10e      	bne.n	8012a0c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f103 0012 	add.w	r0, r3, #18
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	89fb      	ldrh	r3, [r7, #14]
 80129fa:	4413      	add	r3, r2
 80129fc:	2210      	movs	r2, #16
 80129fe:	4619      	mov	r1, r3
 8012a00:	f002 fdcb 	bl	801559a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8012a04:	89fb      	ldrh	r3, [r7, #14]
 8012a06:	3310      	adds	r3, #16
 8012a08:	81fb      	strh	r3, [r7, #14]
 8012a0a:	e008      	b.n	8012a1e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	791b      	ldrb	r3, [r3, #4]
 8012a10:	1f1a      	subs	r2, r3, #4
 8012a12:	89fb      	ldrh	r3, [r7, #14]
 8012a14:	1ad3      	subs	r3, r2, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	dd01      	ble.n	8012a1e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e031      	b.n	8012a82 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	89fb      	ldrh	r3, [r7, #14]
 8012a24:	1c59      	adds	r1, r3, #1
 8012a26:	81f9      	strh	r1, [r7, #14]
 8012a28:	4413      	add	r3, r2
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	89fb      	ldrh	r3, [r7, #14]
 8012a38:	1c59      	adds	r1, r3, #1
 8012a3a:	81f9      	strh	r1, [r7, #14]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	021a      	lsls	r2, r3, #8
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a46:	431a      	orrs	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	89fb      	ldrh	r3, [r7, #14]
 8012a52:	1c59      	adds	r1, r3, #1
 8012a54:	81f9      	strh	r1, [r7, #14]
 8012a56:	4413      	add	r3, r2
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	041a      	lsls	r2, r3, #16
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a60:	431a      	orrs	r2, r3
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	89fb      	ldrh	r3, [r7, #14]
 8012a6c:	1c59      	adds	r1, r3, #1
 8012a6e:	81f9      	strh	r1, [r7, #14]
 8012a70:	4413      	add	r3, r2
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	061a      	lsls	r2, r3, #24
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a7a:	431a      	orrs	r2, r3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8012a80:	2300      	movs	r3, #0
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b084      	sub	sp, #16
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d003      	beq.n	8012aa0 <LoRaMacParserData+0x16>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d101      	bne.n	8012aa4 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8012aa0:	2302      	movs	r3, #2
 8012aa2:	e0e2      	b.n	8012c6a <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	89fb      	ldrh	r3, [r7, #14]
 8012aae:	1c59      	adds	r1, r3, #1
 8012ab0:	81f9      	strh	r1, [r7, #14]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	781a      	ldrb	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	89fb      	ldrh	r3, [r7, #14]
 8012ac0:	1c59      	adds	r1, r3, #1
 8012ac2:	81f9      	strh	r1, [r7, #14]
 8012ac4:	4413      	add	r3, r2
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	461a      	mov	r2, r3
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	89fb      	ldrh	r3, [r7, #14]
 8012ad4:	1c59      	adds	r1, r3, #1
 8012ad6:	81f9      	strh	r1, [r7, #14]
 8012ad8:	4413      	add	r3, r2
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	021a      	lsls	r2, r3, #8
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	431a      	orrs	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	89fb      	ldrh	r3, [r7, #14]
 8012aee:	1c59      	adds	r1, r3, #1
 8012af0:	81f9      	strh	r1, [r7, #14]
 8012af2:	4413      	add	r3, r2
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	041a      	lsls	r2, r3, #16
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	689b      	ldr	r3, [r3, #8]
 8012afc:	431a      	orrs	r2, r3
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681a      	ldr	r2, [r3, #0]
 8012b06:	89fb      	ldrh	r3, [r7, #14]
 8012b08:	1c59      	adds	r1, r3, #1
 8012b0a:	81f9      	strh	r1, [r7, #14]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	061a      	lsls	r2, r3, #24
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	431a      	orrs	r2, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	89fb      	ldrh	r3, [r7, #14]
 8012b22:	1c59      	adds	r1, r3, #1
 8012b24:	81f9      	strh	r1, [r7, #14]
 8012b26:	4413      	add	r3, r2
 8012b28:	781a      	ldrb	r2, [r3, #0]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	89fb      	ldrh	r3, [r7, #14]
 8012b34:	1c59      	adds	r1, r3, #1
 8012b36:	81f9      	strh	r1, [r7, #14]
 8012b38:	4413      	add	r3, r2
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	b29a      	uxth	r2, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	89fb      	ldrh	r3, [r7, #14]
 8012b48:	1c59      	adds	r1, r3, #1
 8012b4a:	81f9      	strh	r1, [r7, #14]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	0219      	lsls	r1, r3, #8
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	89db      	ldrh	r3, [r3, #14]
 8012b56:	b21a      	sxth	r2, r3
 8012b58:	b20b      	sxth	r3, r1
 8012b5a:	4313      	orrs	r3, r2
 8012b5c:	b21b      	sxth	r3, r3
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f103 0010 	add.w	r0, r3, #16
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	89fb      	ldrh	r3, [r7, #14]
 8012b70:	18d1      	adds	r1, r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	7b1b      	ldrb	r3, [r3, #12]
 8012b76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	461a      	mov	r2, r3
 8012b80:	f002 fd0b 	bl	801559a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	7b1b      	ldrb	r3, [r3, #12]
 8012b88:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012b8c:	b2db      	uxtb	r3, r3
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	89fb      	ldrh	r3, [r7, #14]
 8012b92:	4413      	add	r3, r2
 8012b94:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	791b      	ldrb	r3, [r3, #4]
 8012baa:	461a      	mov	r2, r3
 8012bac:	89fb      	ldrh	r3, [r7, #14]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	2b04      	cmp	r3, #4
 8012bb2:	dd28      	ble.n	8012c06 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	89fb      	ldrh	r3, [r7, #14]
 8012bba:	1c59      	adds	r1, r3, #1
 8012bbc:	81f9      	strh	r1, [r7, #14]
 8012bbe:	4413      	add	r3, r2
 8012bc0:	781a      	ldrb	r2, [r3, #0]
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	791a      	ldrb	r2, [r3, #4]
 8012bcc:	89fb      	ldrh	r3, [r7, #14]
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	1ad3      	subs	r3, r2, r3
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	3b04      	subs	r3, #4
 8012bd6:	b2da      	uxtb	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	89fb      	ldrh	r3, [r7, #14]
 8012be8:	18d1      	adds	r1, r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	f002 fcd1 	bl	801559a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	89fb      	ldrh	r3, [r7, #14]
 8012c02:	4413      	add	r3, r2
 8012c04:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	791b      	ldrb	r3, [r3, #4]
 8012c0e:	3b04      	subs	r3, #4
 8012c10:	4413      	add	r3, r2
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	461a      	mov	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6819      	ldr	r1, [r3, #0]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	791b      	ldrb	r3, [r3, #4]
 8012c26:	3b03      	subs	r3, #3
 8012c28:	440b      	add	r3, r1
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	021b      	lsls	r3, r3, #8
 8012c2e:	431a      	orrs	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6819      	ldr	r1, [r3, #0]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	791b      	ldrb	r3, [r3, #4]
 8012c40:	3b02      	subs	r3, #2
 8012c42:	440b      	add	r3, r1
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	041b      	lsls	r3, r3, #16
 8012c48:	431a      	orrs	r2, r3
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6819      	ldr	r1, [r3, #0]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	791b      	ldrb	r3, [r3, #4]
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	440b      	add	r3, r1
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	061b      	lsls	r3, r3, #24
 8012c62:	431a      	orrs	r2, r3
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8012c68:	2300      	movs	r3, #0
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3710      	adds	r7, #16
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}

08012c72 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012c72:	b580      	push	{r7, lr}
 8012c74:	b084      	sub	sp, #16
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d003      	beq.n	8012c88 <LoRaMacSerializerJoinRequest+0x16>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d101      	bne.n	8012c8c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	e070      	b.n	8012d6e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	791b      	ldrb	r3, [r3, #4]
 8012c94:	2b16      	cmp	r3, #22
 8012c96:	d801      	bhi.n	8012c9c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012c98:	2302      	movs	r3, #2
 8012c9a:	e068      	b.n	8012d6e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	89fb      	ldrh	r3, [r7, #14]
 8012ca2:	1c59      	adds	r1, r3, #1
 8012ca4:	81f9      	strh	r1, [r7, #14]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	7952      	ldrb	r2, [r2, #5]
 8012cac:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	89fb      	ldrh	r3, [r7, #14]
 8012cb4:	18d0      	adds	r0, r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	3306      	adds	r3, #6
 8012cba:	2208      	movs	r2, #8
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	f002 fc87 	bl	80155d0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8012cc2:	89fb      	ldrh	r3, [r7, #14]
 8012cc4:	3308      	adds	r3, #8
 8012cc6:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681a      	ldr	r2, [r3, #0]
 8012ccc:	89fb      	ldrh	r3, [r7, #14]
 8012cce:	18d0      	adds	r0, r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	330e      	adds	r3, #14
 8012cd4:	2208      	movs	r2, #8
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	f002 fc7a 	bl	80155d0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8012cdc:	89fb      	ldrh	r3, [r7, #14]
 8012cde:	3308      	adds	r3, #8
 8012ce0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	8ad9      	ldrh	r1, [r3, #22]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	89fb      	ldrh	r3, [r7, #14]
 8012cec:	1c58      	adds	r0, r3, #1
 8012cee:	81f8      	strh	r0, [r7, #14]
 8012cf0:	4413      	add	r3, r2
 8012cf2:	b2ca      	uxtb	r2, r1
 8012cf4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	8adb      	ldrh	r3, [r3, #22]
 8012cfa:	0a1b      	lsrs	r3, r3, #8
 8012cfc:	b299      	uxth	r1, r3
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	89fb      	ldrh	r3, [r7, #14]
 8012d04:	1c58      	adds	r0, r3, #1
 8012d06:	81f8      	strh	r0, [r7, #14]
 8012d08:	4413      	add	r3, r2
 8012d0a:	b2ca      	uxtb	r2, r1
 8012d0c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6999      	ldr	r1, [r3, #24]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	89fb      	ldrh	r3, [r7, #14]
 8012d18:	1c58      	adds	r0, r3, #1
 8012d1a:	81f8      	strh	r0, [r7, #14]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	b2ca      	uxtb	r2, r1
 8012d20:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	699b      	ldr	r3, [r3, #24]
 8012d26:	0a19      	lsrs	r1, r3, #8
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	89fb      	ldrh	r3, [r7, #14]
 8012d2e:	1c58      	adds	r0, r3, #1
 8012d30:	81f8      	strh	r0, [r7, #14]
 8012d32:	4413      	add	r3, r2
 8012d34:	b2ca      	uxtb	r2, r1
 8012d36:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	699b      	ldr	r3, [r3, #24]
 8012d3c:	0c19      	lsrs	r1, r3, #16
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	89fb      	ldrh	r3, [r7, #14]
 8012d44:	1c58      	adds	r0, r3, #1
 8012d46:	81f8      	strh	r0, [r7, #14]
 8012d48:	4413      	add	r3, r2
 8012d4a:	b2ca      	uxtb	r2, r1
 8012d4c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	699b      	ldr	r3, [r3, #24]
 8012d52:	0e19      	lsrs	r1, r3, #24
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	89fb      	ldrh	r3, [r7, #14]
 8012d5a:	1c58      	adds	r0, r3, #1
 8012d5c:	81f8      	strh	r0, [r7, #14]
 8012d5e:	4413      	add	r3, r2
 8012d60:	b2ca      	uxtb	r2, r1
 8012d62:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012d64:	89fb      	ldrh	r3, [r7, #14]
 8012d66:	b2da      	uxtb	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3710      	adds	r7, #16
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8012d76:	b580      	push	{r7, lr}
 8012d78:	b084      	sub	sp, #16
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d003      	beq.n	8012d8c <LoRaMacSerializerData+0x16>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d101      	bne.n	8012d90 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e0e5      	b.n	8012f5c <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8012d94:	2308      	movs	r3, #8
 8012d96:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	7b1b      	ldrb	r3, [r3, #12]
 8012d9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	b29a      	uxth	r2, r3
 8012da4:	89bb      	ldrh	r3, [r7, #12]
 8012da6:	4413      	add	r3, r2
 8012da8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8012db4:	89bb      	ldrh	r3, [r7, #12]
 8012db6:	3301      	adds	r3, #1
 8012db8:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012dc0:	b29a      	uxth	r2, r3
 8012dc2:	89bb      	ldrh	r3, [r7, #12]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8012dc8:	89bb      	ldrh	r3, [r7, #12]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	791b      	ldrb	r3, [r3, #4]
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	89ba      	ldrh	r2, [r7, #12]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d901      	bls.n	8012dde <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012dda:	2302      	movs	r3, #2
 8012ddc:	e0be      	b.n	8012f5c <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681a      	ldr	r2, [r3, #0]
 8012de2:	89fb      	ldrh	r3, [r7, #14]
 8012de4:	1c59      	adds	r1, r3, #1
 8012de6:	81f9      	strh	r1, [r7, #14]
 8012de8:	4413      	add	r3, r2
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	7952      	ldrb	r2, [r2, #5]
 8012dee:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	6899      	ldr	r1, [r3, #8]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	89fb      	ldrh	r3, [r7, #14]
 8012dfa:	1c58      	adds	r0, r3, #1
 8012dfc:	81f8      	strh	r0, [r7, #14]
 8012dfe:	4413      	add	r3, r2
 8012e00:	b2ca      	uxtb	r2, r1
 8012e02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	0a19      	lsrs	r1, r3, #8
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681a      	ldr	r2, [r3, #0]
 8012e0e:	89fb      	ldrh	r3, [r7, #14]
 8012e10:	1c58      	adds	r0, r3, #1
 8012e12:	81f8      	strh	r0, [r7, #14]
 8012e14:	4413      	add	r3, r2
 8012e16:	b2ca      	uxtb	r2, r1
 8012e18:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	689b      	ldr	r3, [r3, #8]
 8012e1e:	0c19      	lsrs	r1, r3, #16
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	89fb      	ldrh	r3, [r7, #14]
 8012e26:	1c58      	adds	r0, r3, #1
 8012e28:	81f8      	strh	r0, [r7, #14]
 8012e2a:	4413      	add	r3, r2
 8012e2c:	b2ca      	uxtb	r2, r1
 8012e2e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	689b      	ldr	r3, [r3, #8]
 8012e34:	0e19      	lsrs	r1, r3, #24
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681a      	ldr	r2, [r3, #0]
 8012e3a:	89fb      	ldrh	r3, [r7, #14]
 8012e3c:	1c58      	adds	r0, r3, #1
 8012e3e:	81f8      	strh	r0, [r7, #14]
 8012e40:	4413      	add	r3, r2
 8012e42:	b2ca      	uxtb	r2, r1
 8012e44:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	89fb      	ldrh	r3, [r7, #14]
 8012e4c:	1c59      	adds	r1, r3, #1
 8012e4e:	81f9      	strh	r1, [r7, #14]
 8012e50:	4413      	add	r3, r2
 8012e52:	687a      	ldr	r2, [r7, #4]
 8012e54:	7b12      	ldrb	r2, [r2, #12]
 8012e56:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	89d9      	ldrh	r1, [r3, #14]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681a      	ldr	r2, [r3, #0]
 8012e60:	89fb      	ldrh	r3, [r7, #14]
 8012e62:	1c58      	adds	r0, r3, #1
 8012e64:	81f8      	strh	r0, [r7, #14]
 8012e66:	4413      	add	r3, r2
 8012e68:	b2ca      	uxtb	r2, r1
 8012e6a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	89db      	ldrh	r3, [r3, #14]
 8012e70:	0a1b      	lsrs	r3, r3, #8
 8012e72:	b299      	uxth	r1, r3
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	89fb      	ldrh	r3, [r7, #14]
 8012e7a:	1c58      	adds	r0, r3, #1
 8012e7c:	81f8      	strh	r0, [r7, #14]
 8012e7e:	4413      	add	r3, r2
 8012e80:	b2ca      	uxtb	r2, r1
 8012e82:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	89fb      	ldrh	r3, [r7, #14]
 8012e8a:	18d0      	adds	r0, r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f103 0110 	add.w	r1, r3, #16
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	7b1b      	ldrb	r3, [r3, #12]
 8012e96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	f002 fb7b 	bl	801559a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	7b1b      	ldrb	r3, [r3, #12]
 8012ea8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	89fb      	ldrh	r3, [r7, #14]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d009      	beq.n	8012ed4 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	1c59      	adds	r1, r3, #1
 8012ec8:	81f9      	strh	r1, [r7, #14]
 8012eca:	4413      	add	r3, r2
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	f892 2020 	ldrb.w	r2, [r2, #32]
 8012ed2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	89fb      	ldrh	r3, [r7, #14]
 8012eda:	18d0      	adds	r0, r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	461a      	mov	r2, r3
 8012eea:	f002 fb56 	bl	801559a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ef4:	b29a      	uxth	r2, r3
 8012ef6:	89fb      	ldrh	r3, [r7, #14]
 8012ef8:	4413      	add	r3, r2
 8012efa:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	89fb      	ldrh	r3, [r7, #14]
 8012f06:	1c58      	adds	r0, r3, #1
 8012f08:	81f8      	strh	r0, [r7, #14]
 8012f0a:	4413      	add	r3, r2
 8012f0c:	b2ca      	uxtb	r2, r1
 8012f0e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f14:	0a19      	lsrs	r1, r3, #8
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681a      	ldr	r2, [r3, #0]
 8012f1a:	89fb      	ldrh	r3, [r7, #14]
 8012f1c:	1c58      	adds	r0, r3, #1
 8012f1e:	81f8      	strh	r0, [r7, #14]
 8012f20:	4413      	add	r3, r2
 8012f22:	b2ca      	uxtb	r2, r1
 8012f24:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f2a:	0c19      	lsrs	r1, r3, #16
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	89fb      	ldrh	r3, [r7, #14]
 8012f32:	1c58      	adds	r0, r3, #1
 8012f34:	81f8      	strh	r0, [r7, #14]
 8012f36:	4413      	add	r3, r2
 8012f38:	b2ca      	uxtb	r2, r1
 8012f3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f40:	0e19      	lsrs	r1, r3, #24
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	89fb      	ldrh	r3, [r7, #14]
 8012f48:	1c58      	adds	r0, r3, #1
 8012f4a:	81f8      	strh	r0, [r7, #14]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	b2ca      	uxtb	r2, r1
 8012f50:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8012f52:	89fb      	ldrh	r3, [r7, #14]
 8012f54:	b2da      	uxtb	r2, r3
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8012f64:	b480      	push	{r7}
 8012f66:	b083      	sub	sp, #12
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012f6e:	79fb      	ldrb	r3, [r7, #7]
 8012f70:	2b05      	cmp	r3, #5
 8012f72:	d101      	bne.n	8012f78 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8012f74:	2301      	movs	r3, #1
 8012f76:	e000      	b.n	8012f7a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8012f78:	2300      	movs	r3, #0
        }
    }
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	370c      	adds	r7, #12
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bc80      	pop	{r7}
 8012f82:	4770      	bx	lr

08012f84 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	6039      	str	r1, [r7, #0]
 8012f8e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8012f90:	2300      	movs	r3, #0
 8012f92:	60bb      	str	r3, [r7, #8]
    switch( region )
 8012f94:	79fb      	ldrb	r3, [r7, #7]
 8012f96:	2b05      	cmp	r3, #5
 8012f98:	d105      	bne.n	8012fa6 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8012f9a:	6838      	ldr	r0, [r7, #0]
 8012f9c:	f001 f992 	bl	80142c4 <RegionEU868GetPhyParam>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	60fb      	str	r3, [r7, #12]
 8012fa4:	e001      	b.n	8012faa <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	2300      	movs	r3, #0
 8012fac:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b082      	sub	sp, #8
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	6039      	str	r1, [r7, #0]
 8012fc0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012fc2:	79fb      	ldrb	r3, [r7, #7]
 8012fc4:	2b05      	cmp	r3, #5
 8012fc6:	d103      	bne.n	8012fd0 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8012fc8:	6838      	ldr	r0, [r7, #0]
 8012fca:	f001 fac5 	bl	8014558 <RegionEU868SetBandTxDone>
 8012fce:	e000      	b.n	8012fd2 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8012fd0:	bf00      	nop
        }
    }
}
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	4603      	mov	r3, r0
 8012fe0:	6039      	str	r1, [r7, #0]
 8012fe2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8012fe4:	79fb      	ldrb	r3, [r7, #7]
 8012fe6:	2b05      	cmp	r3, #5
 8012fe8:	d103      	bne.n	8012ff2 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8012fea:	6838      	ldr	r0, [r7, #0]
 8012fec:	f001 fae0 	bl	80145b0 <RegionEU868InitDefaults>
 8012ff0:	e000      	b.n	8012ff4 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8012ff2:	bf00      	nop
        }
    }
}
 8012ff4:	bf00      	nop
 8012ff6:	3708      	adds	r7, #8
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	4603      	mov	r3, r0
 8013004:	6039      	str	r1, [r7, #0]
 8013006:	71fb      	strb	r3, [r7, #7]
 8013008:	4613      	mov	r3, r2
 801300a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801300c:	79fb      	ldrb	r3, [r7, #7]
 801300e:	2b05      	cmp	r3, #5
 8013010:	d106      	bne.n	8013020 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013012:	79bb      	ldrb	r3, [r7, #6]
 8013014:	4619      	mov	r1, r3
 8013016:	6838      	ldr	r0, [r7, #0]
 8013018:	f001 fb66 	bl	80146e8 <RegionEU868Verify>
 801301c:	4603      	mov	r3, r0
 801301e:	e000      	b.n	8013022 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013020:	2300      	movs	r3, #0
        }
    }
}
 8013022:	4618      	mov	r0, r3
 8013024:	3708      	adds	r7, #8
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801302a:	b580      	push	{r7, lr}
 801302c:	b082      	sub	sp, #8
 801302e:	af00      	add	r7, sp, #0
 8013030:	4603      	mov	r3, r0
 8013032:	6039      	str	r1, [r7, #0]
 8013034:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013036:	79fb      	ldrb	r3, [r7, #7]
 8013038:	2b05      	cmp	r3, #5
 801303a:	d103      	bne.n	8013044 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 801303c:	6838      	ldr	r0, [r7, #0]
 801303e:	f001 fbcf 	bl	80147e0 <RegionEU868ApplyCFList>
 8013042:	e000      	b.n	8013046 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013044:	bf00      	nop
        }
    }
}
 8013046:	bf00      	nop
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b082      	sub	sp, #8
 8013052:	af00      	add	r7, sp, #0
 8013054:	4603      	mov	r3, r0
 8013056:	6039      	str	r1, [r7, #0]
 8013058:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801305a:	79fb      	ldrb	r3, [r7, #7]
 801305c:	2b05      	cmp	r3, #5
 801305e:	d104      	bne.n	801306a <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013060:	6838      	ldr	r0, [r7, #0]
 8013062:	f001 fc31 	bl	80148c8 <RegionEU868ChanMaskSet>
 8013066:	4603      	mov	r3, r0
 8013068:	e000      	b.n	801306c <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801306a:	2300      	movs	r3, #0
        }
    }
}
 801306c:	4618      	mov	r0, r3
 801306e:	3708      	adds	r7, #8
 8013070:	46bd      	mov	sp, r7
 8013072:	bd80      	pop	{r7, pc}

08013074 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	603b      	str	r3, [r7, #0]
 801307c:	4603      	mov	r3, r0
 801307e:	71fb      	strb	r3, [r7, #7]
 8013080:	460b      	mov	r3, r1
 8013082:	71bb      	strb	r3, [r7, #6]
 8013084:	4613      	mov	r3, r2
 8013086:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013088:	79fb      	ldrb	r3, [r7, #7]
 801308a:	2b05      	cmp	r3, #5
 801308c:	d107      	bne.n	801309e <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801308e:	7979      	ldrb	r1, [r7, #5]
 8013090:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	683a      	ldr	r2, [r7, #0]
 8013098:	f001 fc40 	bl	801491c <RegionEU868ComputeRxWindowParameters>
 801309c:	e000      	b.n	80130a0 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801309e:	bf00      	nop
        }
    }
}
 80130a0:	bf00      	nop
 80130a2:	3708      	adds	r7, #8
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	4603      	mov	r3, r0
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
 80130b4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80130b6:	7bfb      	ldrb	r3, [r7, #15]
 80130b8:	2b05      	cmp	r3, #5
 80130ba:	d105      	bne.n	80130c8 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80130bc:	6879      	ldr	r1, [r7, #4]
 80130be:	68b8      	ldr	r0, [r7, #8]
 80130c0:	f001 fc86 	bl	80149d0 <RegionEU868RxConfig>
 80130c4:	4603      	mov	r3, r0
 80130c6:	e000      	b.n	80130ca <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80130c8:	2300      	movs	r3, #0
        }
    }
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	607a      	str	r2, [r7, #4]
 80130dc:	603b      	str	r3, [r7, #0]
 80130de:	4603      	mov	r3, r0
 80130e0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80130e2:	7bfb      	ldrb	r3, [r7, #15]
 80130e4:	2b05      	cmp	r3, #5
 80130e6:	d106      	bne.n	80130f6 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	6879      	ldr	r1, [r7, #4]
 80130ec:	68b8      	ldr	r0, [r7, #8]
 80130ee:	f001 fd3f 	bl	8014b70 <RegionEU868TxConfig>
 80130f2:	4603      	mov	r3, r0
 80130f4:	e000      	b.n	80130f8 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80130f6:	2300      	movs	r3, #0
        }
    }
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3710      	adds	r7, #16
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af02      	add	r7, sp, #8
 8013106:	60b9      	str	r1, [r7, #8]
 8013108:	607a      	str	r2, [r7, #4]
 801310a:	603b      	str	r3, [r7, #0]
 801310c:	4603      	mov	r3, r0
 801310e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013110:	7bfb      	ldrb	r3, [r7, #15]
 8013112:	2b05      	cmp	r3, #5
 8013114:	d109      	bne.n	801312a <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013116:	69fb      	ldr	r3, [r7, #28]
 8013118:	9300      	str	r3, [sp, #0]
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	683a      	ldr	r2, [r7, #0]
 801311e:	6879      	ldr	r1, [r7, #4]
 8013120:	68b8      	ldr	r0, [r7, #8]
 8013122:	f001 fdf5 	bl	8014d10 <RegionEU868LinkAdrReq>
 8013126:	4603      	mov	r3, r0
 8013128:	e000      	b.n	801312c <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801312a:	2300      	movs	r3, #0
        }
    }
}
 801312c:	4618      	mov	r0, r3
 801312e:	3710      	adds	r7, #16
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}

08013134 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	4603      	mov	r3, r0
 801313c:	6039      	str	r1, [r7, #0]
 801313e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013140:	79fb      	ldrb	r3, [r7, #7]
 8013142:	2b05      	cmp	r3, #5
 8013144:	d104      	bne.n	8013150 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013146:	6838      	ldr	r0, [r7, #0]
 8013148:	f001 ff04 	bl	8014f54 <RegionEU868RxParamSetupReq>
 801314c:	4603      	mov	r3, r0
 801314e:	e000      	b.n	8013152 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013150:	2300      	movs	r3, #0
        }
    }
}
 8013152:	4618      	mov	r0, r3
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}

0801315a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801315a:	b580      	push	{r7, lr}
 801315c:	b082      	sub	sp, #8
 801315e:	af00      	add	r7, sp, #0
 8013160:	4603      	mov	r3, r0
 8013162:	6039      	str	r1, [r7, #0]
 8013164:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013166:	79fb      	ldrb	r3, [r7, #7]
 8013168:	2b05      	cmp	r3, #5
 801316a:	d104      	bne.n	8013176 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 801316c:	6838      	ldr	r0, [r7, #0]
 801316e:	f001 ff2f 	bl	8014fd0 <RegionEU868NewChannelReq>
 8013172:	4603      	mov	r3, r0
 8013174:	e000      	b.n	8013178 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013176:	2300      	movs	r3, #0
        }
    }
}
 8013178:	4618      	mov	r0, r3
 801317a:	3708      	adds	r7, #8
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}

08013180 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	4603      	mov	r3, r0
 8013188:	6039      	str	r1, [r7, #0]
 801318a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801318c:	79fb      	ldrb	r3, [r7, #7]
 801318e:	2b05      	cmp	r3, #5
 8013190:	d104      	bne.n	801319c <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013192:	6838      	ldr	r0, [r7, #0]
 8013194:	f001 ff7a 	bl	801508c <RegionEU868TxParamSetupReq>
 8013198:	4603      	mov	r3, r0
 801319a:	e000      	b.n	801319e <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801319c:	2300      	movs	r3, #0
        }
    }
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b082      	sub	sp, #8
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	4603      	mov	r3, r0
 80131ae:	6039      	str	r1, [r7, #0]
 80131b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80131b2:	79fb      	ldrb	r3, [r7, #7]
 80131b4:	2b05      	cmp	r3, #5
 80131b6:	d104      	bne.n	80131c2 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80131b8:	6838      	ldr	r0, [r7, #0]
 80131ba:	f001 ff73 	bl	80150a4 <RegionEU868DlChannelReq>
 80131be:	4603      	mov	r3, r0
 80131c0:	e000      	b.n	80131c4 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80131c2:	2300      	movs	r3, #0
        }
    }
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	4603      	mov	r3, r0
 80131d4:	71fb      	strb	r3, [r7, #7]
 80131d6:	460b      	mov	r3, r1
 80131d8:	71bb      	strb	r3, [r7, #6]
 80131da:	4613      	mov	r3, r2
 80131dc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80131de:	79fb      	ldrb	r3, [r7, #7]
 80131e0:	2b05      	cmp	r3, #5
 80131e2:	d108      	bne.n	80131f6 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80131e4:	797a      	ldrb	r2, [r7, #5]
 80131e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80131ea:	4611      	mov	r1, r2
 80131ec:	4618      	mov	r0, r3
 80131ee:	f001 ff9d 	bl	801512c <RegionEU868AlternateDr>
 80131f2:	4603      	mov	r3, r0
 80131f4:	e000      	b.n	80131f8 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80131f6:	2300      	movs	r3, #0
        }
    }
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}

08013200 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	60b9      	str	r1, [r7, #8]
 8013208:	607a      	str	r2, [r7, #4]
 801320a:	603b      	str	r3, [r7, #0]
 801320c:	4603      	mov	r3, r0
 801320e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013210:	7bfb      	ldrb	r3, [r7, #15]
 8013212:	2b05      	cmp	r3, #5
 8013214:	d107      	bne.n	8013226 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013216:	69bb      	ldr	r3, [r7, #24]
 8013218:	683a      	ldr	r2, [r7, #0]
 801321a:	6879      	ldr	r1, [r7, #4]
 801321c:	68b8      	ldr	r0, [r7, #8]
 801321e:	f001 ff95 	bl	801514c <RegionEU868NextChannel>
 8013222:	4603      	mov	r3, r0
 8013224:	e000      	b.n	8013228 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013226:	2309      	movs	r3, #9
        }
    }
}
 8013228:	4618      	mov	r0, r3
 801322a:	3710      	adds	r7, #16
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	4603      	mov	r3, r0
 8013238:	6039      	str	r1, [r7, #0]
 801323a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801323c:	79fb      	ldrb	r3, [r7, #7]
 801323e:	2b05      	cmp	r3, #5
 8013240:	d103      	bne.n	801324a <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8013242:	6838      	ldr	r0, [r7, #0]
 8013244:	f002 f8fa 	bl	801543c <RegionEU868SetContinuousWave>
 8013248:	e000      	b.n	801324c <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801324a:	bf00      	nop
        }
    }
}
 801324c:	bf00      	nop
 801324e:	3708      	adds	r7, #8
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013254:	b590      	push	{r4, r7, lr}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
 801325a:	4604      	mov	r4, r0
 801325c:	4608      	mov	r0, r1
 801325e:	4611      	mov	r1, r2
 8013260:	461a      	mov	r2, r3
 8013262:	4623      	mov	r3, r4
 8013264:	71fb      	strb	r3, [r7, #7]
 8013266:	4603      	mov	r3, r0
 8013268:	71bb      	strb	r3, [r7, #6]
 801326a:	460b      	mov	r3, r1
 801326c:	717b      	strb	r3, [r7, #5]
 801326e:	4613      	mov	r3, r2
 8013270:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013272:	79fb      	ldrb	r3, [r7, #7]
 8013274:	2b05      	cmp	r3, #5
 8013276:	d109      	bne.n	801328c <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8013278:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801327c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013280:	79bb      	ldrb	r3, [r7, #6]
 8013282:	4618      	mov	r0, r3
 8013284:	f002 f928 	bl	80154d8 <RegionEU868ApplyDrOffset>
 8013288:	4603      	mov	r3, r0
 801328a:	e000      	b.n	801328e <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801328c:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801328e:	4618      	mov	r0, r3
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	bd90      	pop	{r4, r7, pc}
	...

08013298 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801329e:	4b04      	ldr	r3, [pc, #16]	; (80132b0 <RegionGetVersion+0x18>)
 80132a0:	607b      	str	r3, [r7, #4]

    return version;
 80132a2:	687b      	ldr	r3, [r7, #4]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	370c      	adds	r7, #12
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bc80      	pop	{r7}
 80132ac:	4770      	bx	lr
 80132ae:	bf00      	nop
 80132b0:	01000300 	.word	0x01000300

080132b4 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80132b4:	b480      	push	{r7}
 80132b6:	b087      	sub	sp, #28
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	4608      	mov	r0, r1
 80132be:	4639      	mov	r1, r7
 80132c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80132c4:	4603      	mov	r3, r0
 80132c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	881b      	ldrh	r3, [r3, #0]
 80132cc:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80132ce:	7afb      	ldrb	r3, [r7, #11]
 80132d0:	f083 0301 	eor.w	r3, r3, #1
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d01b      	beq.n	8013312 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80132da:	f242 7310 	movw	r3, #10000	; 0x2710
 80132de:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80132e6:	d202      	bcs.n	80132ee <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80132e8:	2364      	movs	r3, #100	; 0x64
 80132ea:	82bb      	strh	r3, [r7, #20]
 80132ec:	e00b      	b.n	8013306 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d803      	bhi.n	8013300 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80132f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80132fc:	82bb      	strh	r3, [r7, #20]
 80132fe:	e002      	b.n	8013306 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8013300:	f242 7310 	movw	r3, #10000	; 0x2710
 8013304:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8013306:	8aba      	ldrh	r2, [r7, #20]
 8013308:	8afb      	ldrh	r3, [r7, #22]
 801330a:	4293      	cmp	r3, r2
 801330c:	bf38      	it	cc
 801330e:	4613      	movcc	r3, r2
 8013310:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8013312:	8afb      	ldrh	r3, [r7, #22]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d101      	bne.n	801331c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8013318:	2301      	movs	r3, #1
 801331a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801331c:	8afb      	ldrh	r3, [r7, #22]
}
 801331e:	4618      	mov	r0, r3
 8013320:	371c      	adds	r7, #28
 8013322:	46bd      	mov	sp, r7
 8013324:	bc80      	pop	{r7}
 8013326:	4770      	bx	lr

08013328 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b08e      	sub	sp, #56	; 0x38
 801332c:	af02      	add	r7, sp, #8
 801332e:	60f8      	str	r0, [r7, #12]
 8013330:	4608      	mov	r0, r1
 8013332:	4639      	mov	r1, r7
 8013334:	e881 000c 	stmia.w	r1, {r2, r3}
 8013338:	4603      	mov	r3, r0
 801333a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	881b      	ldrh	r3, [r3, #0]
 8013340:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013342:	4b4b      	ldr	r3, [pc, #300]	; (8013470 <SetMaxTimeCredits+0x148>)
 8013344:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8013346:	463b      	mov	r3, r7
 8013348:	e893 0003 	ldmia.w	r3, {r0, r1}
 801334c:	f005 fc60 	bl	8018c10 <SysTimeToMs>
 8013350:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8013352:	f107 0314 	add.w	r3, r7, #20
 8013356:	2200      	movs	r2, #0
 8013358:	601a      	str	r2, [r3, #0]
 801335a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801335c:	7af9      	ldrb	r1, [r7, #11]
 801335e:	463b      	mov	r3, r7
 8013360:	cb0c      	ldmia	r3, {r2, r3}
 8013362:	68f8      	ldr	r0, [r7, #12]
 8013364:	f7ff ffa6 	bl	80132b4 <GetDutyCycle>
 8013368:	4603      	mov	r3, r0
 801336a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801336c:	7afb      	ldrb	r3, [r7, #11]
 801336e:	f083 0301 	eor.w	r3, r3, #1
 8013372:	b2db      	uxtb	r3, r3
 8013374:	2b00      	cmp	r3, #0
 8013376:	d062      	beq.n	801343e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013378:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801337a:	2b64      	cmp	r3, #100	; 0x64
 801337c:	d105      	bne.n	801338a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801337e:	4b3c      	ldr	r3, [pc, #240]	; (8013470 <SetMaxTimeCredits+0x148>)
 8013380:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013386:	609a      	str	r2, [r3, #8]
 8013388:	e00b      	b.n	80133a2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801338a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801338c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013390:	d105      	bne.n	801339e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8013392:	4b38      	ldr	r3, [pc, #224]	; (8013474 <SetMaxTimeCredits+0x14c>)
 8013394:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801339a:	609a      	str	r2, [r3, #8]
 801339c:	e001      	b.n	80133a2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801339e:	4b36      	ldr	r3, [pc, #216]	; (8013478 <SetMaxTimeCredits+0x150>)
 80133a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	689a      	ldr	r2, [r3, #8]
 80133a6:	f107 031c 	add.w	r3, r7, #28
 80133aa:	4611      	mov	r1, r2
 80133ac:	4618      	mov	r0, r3
 80133ae:	f005 fc57 	bl	8018c60 <SysTimeFromMs>
 80133b2:	f107 0014 	add.w	r0, r7, #20
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	9300      	str	r3, [sp, #0]
 80133ba:	69fb      	ldr	r3, [r7, #28]
 80133bc:	463a      	mov	r2, r7
 80133be:	ca06      	ldmia	r2, {r1, r2}
 80133c0:	f005 fb67 	bl	8018a92 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80133c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80133c8:	f083 0301 	eor.w	r3, r3, #1
 80133cc:	b2db      	uxtb	r3, r3
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d006      	beq.n	80133e0 <SetMaxTimeCredits+0xb8>
 80133d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80133d6:	f083 0301 	eor.w	r3, r3, #1
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d108      	bne.n	80133f2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80133e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d103      	bne.n	80133f2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80133ea:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80133ec:	4a23      	ldr	r2, [pc, #140]	; (801347c <SetMaxTimeCredits+0x154>)
 80133ee:	4293      	cmp	r3, r2
 80133f0:	d92f      	bls.n	8013452 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133f6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	4a21      	ldr	r2, [pc, #132]	; (8013480 <SetMaxTimeCredits+0x158>)
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d928      	bls.n	8013452 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013406:	3b30      	subs	r3, #48	; 0x30
 8013408:	4a1e      	ldr	r2, [pc, #120]	; (8013484 <SetMaxTimeCredits+0x15c>)
 801340a:	fba2 2303 	umull	r2, r3, r2, r3
 801340e:	0c1b      	lsrs	r3, r3, #16
 8013410:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	4a1c      	ldr	r2, [pc, #112]	; (8013488 <SetMaxTimeCredits+0x160>)
 8013416:	fb02 f303 	mul.w	r3, r2, r3
 801341a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8013422:	3330      	adds	r3, #48	; 0x30
 8013424:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8013426:	2300      	movs	r3, #0
 8013428:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801342a:	f107 0314 	add.w	r3, r7, #20
 801342e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013432:	f005 fbed 	bl	8018c10 <SysTimeToMs>
 8013436:	4602      	mov	r2, r0
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	609a      	str	r2, [r3, #8]
 801343c:	e009      	b.n	8013452 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801343e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013442:	f083 0301 	eor.w	r3, r3, #1
 8013446:	b2db      	uxtb	r3, r3
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013450:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d102      	bne.n	8013460 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801345e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013464:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8013466:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8013468:	4618      	mov	r0, r3
 801346a:	3730      	adds	r7, #48	; 0x30
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}
 8013470:	001b7740 	.word	0x001b7740
 8013474:	0112a880 	.word	0x0112a880
 8013478:	02932e00 	.word	0x02932e00
 801347c:	0001517f 	.word	0x0001517f
 8013480:	0001ec2f 	.word	0x0001ec2f
 8013484:	c22e4507 	.word	0xc22e4507
 8013488:	00015180 	.word	0x00015180

0801348c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b086      	sub	sp, #24
 8013490:	af02      	add	r7, sp, #8
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	4608      	mov	r0, r1
 8013496:	4611      	mov	r1, r2
 8013498:	461a      	mov	r2, r3
 801349a:	4603      	mov	r3, r0
 801349c:	70fb      	strb	r3, [r7, #3]
 801349e:	460b      	mov	r3, r1
 80134a0:	70bb      	strb	r3, [r7, #2]
 80134a2:	4613      	mov	r3, r2
 80134a4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80134a6:	78f9      	ldrb	r1, [r7, #3]
 80134a8:	787b      	ldrb	r3, [r7, #1]
 80134aa:	9301      	str	r3, [sp, #4]
 80134ac:	78bb      	ldrb	r3, [r7, #2]
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	f107 0318 	add.w	r3, r7, #24
 80134b4:	cb0c      	ldmia	r3, {r2, r3}
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7ff ff36 	bl	8013328 <SetMaxTimeCredits>
 80134bc:	4603      	mov	r3, r0
 80134be:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80134c0:	78fb      	ldrb	r3, [r7, #3]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00a      	beq.n	80134dc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f006 f9c8 	bl	8019860 <UTIL_TIMER_GetElapsedTime>
 80134d0:	4602      	mov	r2, r0
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	68db      	ldr	r3, [r3, #12]
 80134d6:	441a      	add	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	68da      	ldr	r2, [r3, #12]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	691b      	ldr	r3, [r3, #16]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d903      	bls.n	80134f0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	691a      	ldr	r2, [r3, #16]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6a3a      	ldr	r2, [r7, #32]
 80134f4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80134f6:	89fb      	ldrh	r3, [r7, #14]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3710      	adds	r7, #16
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8013500:	b480      	push	{r7}
 8013502:	b085      	sub	sp, #20
 8013504:	af00      	add	r7, sp, #0
 8013506:	4603      	mov	r3, r0
 8013508:	460a      	mov	r2, r1
 801350a:	80fb      	strh	r3, [r7, #6]
 801350c:	4613      	mov	r3, r2
 801350e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8013514:	2300      	movs	r3, #0
 8013516:	73bb      	strb	r3, [r7, #14]
 8013518:	e011      	b.n	801353e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801351a:	88fa      	ldrh	r2, [r7, #6]
 801351c:	7bbb      	ldrb	r3, [r7, #14]
 801351e:	2101      	movs	r1, #1
 8013520:	fa01 f303 	lsl.w	r3, r1, r3
 8013524:	401a      	ands	r2, r3
 8013526:	7bbb      	ldrb	r3, [r7, #14]
 8013528:	2101      	movs	r1, #1
 801352a:	fa01 f303 	lsl.w	r3, r1, r3
 801352e:	429a      	cmp	r2, r3
 8013530:	d102      	bne.n	8013538 <CountChannels+0x38>
        {
            nbActiveBits++;
 8013532:	7bfb      	ldrb	r3, [r7, #15]
 8013534:	3301      	adds	r3, #1
 8013536:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8013538:	7bbb      	ldrb	r3, [r7, #14]
 801353a:	3301      	adds	r3, #1
 801353c:	73bb      	strb	r3, [r7, #14]
 801353e:	7bba      	ldrb	r2, [r7, #14]
 8013540:	797b      	ldrb	r3, [r7, #5]
 8013542:	429a      	cmp	r2, r3
 8013544:	d3e9      	bcc.n	801351a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8013546:	7bfb      	ldrb	r3, [r7, #15]
}
 8013548:	4618      	mov	r0, r3
 801354a:	3714      	adds	r7, #20
 801354c:	46bd      	mov	sp, r7
 801354e:	bc80      	pop	{r7}
 8013550:	4770      	bx	lr

08013552 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8013552:	b580      	push	{r7, lr}
 8013554:	b084      	sub	sp, #16
 8013556:	af00      	add	r7, sp, #0
 8013558:	6039      	str	r1, [r7, #0]
 801355a:	4611      	mov	r1, r2
 801355c:	461a      	mov	r2, r3
 801355e:	4603      	mov	r3, r0
 8013560:	71fb      	strb	r3, [r7, #7]
 8013562:	460b      	mov	r3, r1
 8013564:	71bb      	strb	r3, [r7, #6]
 8013566:	4613      	mov	r3, r2
 8013568:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801356a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801356e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013572:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013576:	4618      	mov	r0, r3
 8013578:	f000 f85d 	bl	8013636 <RegionCommonValueInRange>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d101      	bne.n	8013586 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8013582:	2300      	movs	r3, #0
 8013584:	e053      	b.n	801362e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013586:	2300      	movs	r3, #0
 8013588:	73fb      	strb	r3, [r7, #15]
 801358a:	2300      	movs	r3, #0
 801358c:	73bb      	strb	r3, [r7, #14]
 801358e:	e049      	b.n	8013624 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013590:	2300      	movs	r3, #0
 8013592:	737b      	strb	r3, [r7, #13]
 8013594:	e03d      	b.n	8013612 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8013596:	7bbb      	ldrb	r3, [r7, #14]
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	4413      	add	r3, r2
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	461a      	mov	r2, r3
 80135a2:	7b7b      	ldrb	r3, [r7, #13]
 80135a4:	fa42 f303 	asr.w	r3, r2, r3
 80135a8:	f003 0301 	and.w	r3, r3, #1
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d02d      	beq.n	801360c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80135b0:	7bfa      	ldrb	r2, [r7, #15]
 80135b2:	7b7b      	ldrb	r3, [r7, #13]
 80135b4:	4413      	add	r3, r2
 80135b6:	461a      	mov	r2, r3
 80135b8:	4613      	mov	r3, r2
 80135ba:	005b      	lsls	r3, r3, #1
 80135bc:	4413      	add	r3, r2
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	461a      	mov	r2, r3
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	4413      	add	r3, r2
 80135c6:	7a1b      	ldrb	r3, [r3, #8]
 80135c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80135cc:	b25b      	sxtb	r3, r3
 80135ce:	f003 030f 	and.w	r3, r3, #15
 80135d2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80135d4:	7bfa      	ldrb	r2, [r7, #15]
 80135d6:	7b7b      	ldrb	r3, [r7, #13]
 80135d8:	4413      	add	r3, r2
 80135da:	461a      	mov	r2, r3
 80135dc:	4613      	mov	r3, r2
 80135de:	005b      	lsls	r3, r3, #1
 80135e0:	4413      	add	r3, r2
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	461a      	mov	r2, r3
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	4413      	add	r3, r2
 80135ea:	7a1b      	ldrb	r3, [r3, #8]
 80135ec:	f343 1303 	sbfx	r3, r3, #4, #4
 80135f0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80135f2:	f003 030f 	and.w	r3, r3, #15
 80135f6:	b25a      	sxtb	r2, r3
 80135f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f000 f81a 	bl	8013636 <RegionCommonValueInRange>
 8013602:	4603      	mov	r3, r0
 8013604:	2b01      	cmp	r3, #1
 8013606:	d101      	bne.n	801360c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8013608:	2301      	movs	r3, #1
 801360a:	e010      	b.n	801362e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801360c:	7b7b      	ldrb	r3, [r7, #13]
 801360e:	3301      	adds	r3, #1
 8013610:	737b      	strb	r3, [r7, #13]
 8013612:	7b7b      	ldrb	r3, [r7, #13]
 8013614:	2b0f      	cmp	r3, #15
 8013616:	d9be      	bls.n	8013596 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013618:	7bfb      	ldrb	r3, [r7, #15]
 801361a:	3310      	adds	r3, #16
 801361c:	73fb      	strb	r3, [r7, #15]
 801361e:	7bbb      	ldrb	r3, [r7, #14]
 8013620:	3301      	adds	r3, #1
 8013622:	73bb      	strb	r3, [r7, #14]
 8013624:	7bfa      	ldrb	r2, [r7, #15]
 8013626:	79fb      	ldrb	r3, [r7, #7]
 8013628:	429a      	cmp	r2, r3
 801362a:	d3b1      	bcc.n	8013590 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801362c:	2300      	movs	r3, #0
}
 801362e:	4618      	mov	r0, r3
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}

08013636 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8013636:	b480      	push	{r7}
 8013638:	b083      	sub	sp, #12
 801363a:	af00      	add	r7, sp, #0
 801363c:	4603      	mov	r3, r0
 801363e:	71fb      	strb	r3, [r7, #7]
 8013640:	460b      	mov	r3, r1
 8013642:	71bb      	strb	r3, [r7, #6]
 8013644:	4613      	mov	r3, r2
 8013646:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8013648:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801364c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013650:	429a      	cmp	r2, r3
 8013652:	db07      	blt.n	8013664 <RegionCommonValueInRange+0x2e>
 8013654:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013658:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801365c:	429a      	cmp	r2, r3
 801365e:	dc01      	bgt.n	8013664 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8013660:	2301      	movs	r3, #1
 8013662:	e000      	b.n	8013666 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	bc80      	pop	{r7}
 801366e:	4770      	bx	lr

08013670 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8013670:	b480      	push	{r7}
 8013672:	b085      	sub	sp, #20
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	460b      	mov	r3, r1
 801367a:	70fb      	strb	r3, [r7, #3]
 801367c:	4613      	mov	r3, r2
 801367e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8013680:	78fb      	ldrb	r3, [r7, #3]
 8013682:	091b      	lsrs	r3, r3, #4
 8013684:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8013686:	78bb      	ldrb	r3, [r7, #2]
 8013688:	091b      	lsrs	r3, r3, #4
 801368a:	b2db      	uxtb	r3, r3
 801368c:	7bfa      	ldrb	r2, [r7, #15]
 801368e:	429a      	cmp	r2, r3
 8013690:	d803      	bhi.n	801369a <RegionCommonChanDisable+0x2a>
 8013692:	78fa      	ldrb	r2, [r7, #3]
 8013694:	78bb      	ldrb	r3, [r7, #2]
 8013696:	429a      	cmp	r2, r3
 8013698:	d301      	bcc.n	801369e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801369a:	2300      	movs	r3, #0
 801369c:	e017      	b.n	80136ce <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801369e:	7bfb      	ldrb	r3, [r7, #15]
 80136a0:	005b      	lsls	r3, r3, #1
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	4413      	add	r3, r2
 80136a6:	881b      	ldrh	r3, [r3, #0]
 80136a8:	b21a      	sxth	r2, r3
 80136aa:	78fb      	ldrb	r3, [r7, #3]
 80136ac:	f003 030f 	and.w	r3, r3, #15
 80136b0:	2101      	movs	r1, #1
 80136b2:	fa01 f303 	lsl.w	r3, r1, r3
 80136b6:	b21b      	sxth	r3, r3
 80136b8:	43db      	mvns	r3, r3
 80136ba:	b21b      	sxth	r3, r3
 80136bc:	4013      	ands	r3, r2
 80136be:	b219      	sxth	r1, r3
 80136c0:	7bfb      	ldrb	r3, [r7, #15]
 80136c2:	005b      	lsls	r3, r3, #1
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	4413      	add	r3, r2
 80136c8:	b28a      	uxth	r2, r1
 80136ca:	801a      	strh	r2, [r3, #0]

    return true;
 80136cc:	2301      	movs	r3, #1
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3714      	adds	r7, #20
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bc80      	pop	{r7}
 80136d6:	4770      	bx	lr

080136d8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b084      	sub	sp, #16
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	460b      	mov	r3, r1
 80136e2:	70fb      	strb	r3, [r7, #3]
 80136e4:	4613      	mov	r3, r2
 80136e6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d101      	bne.n	80136f6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	e018      	b.n	8013728 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80136f6:	78fb      	ldrb	r3, [r7, #3]
 80136f8:	73bb      	strb	r3, [r7, #14]
 80136fa:	e010      	b.n	801371e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80136fc:	7bbb      	ldrb	r3, [r7, #14]
 80136fe:	005b      	lsls	r3, r3, #1
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	4413      	add	r3, r2
 8013704:	881b      	ldrh	r3, [r3, #0]
 8013706:	2110      	movs	r1, #16
 8013708:	4618      	mov	r0, r3
 801370a:	f7ff fef9 	bl	8013500 <CountChannels>
 801370e:	4603      	mov	r3, r0
 8013710:	461a      	mov	r2, r3
 8013712:	7bfb      	ldrb	r3, [r7, #15]
 8013714:	4413      	add	r3, r2
 8013716:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8013718:	7bbb      	ldrb	r3, [r7, #14]
 801371a:	3301      	adds	r3, #1
 801371c:	73bb      	strb	r3, [r7, #14]
 801371e:	7bba      	ldrb	r2, [r7, #14]
 8013720:	78bb      	ldrb	r3, [r7, #2]
 8013722:	429a      	cmp	r2, r3
 8013724:	d3ea      	bcc.n	80136fc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8013726:	7bfb      	ldrb	r3, [r7, #15]
}
 8013728:	4618      	mov	r0, r3
 801372a:	3710      	adds	r7, #16
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}

08013730 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8013730:	b480      	push	{r7}
 8013732:	b087      	sub	sp, #28
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	4613      	mov	r3, r2
 801373c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d016      	beq.n	8013772 <RegionCommonChanMaskCopy+0x42>
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d013      	beq.n	8013772 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801374a:	2300      	movs	r3, #0
 801374c:	75fb      	strb	r3, [r7, #23]
 801374e:	e00c      	b.n	801376a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013750:	7dfb      	ldrb	r3, [r7, #23]
 8013752:	005b      	lsls	r3, r3, #1
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	441a      	add	r2, r3
 8013758:	7dfb      	ldrb	r3, [r7, #23]
 801375a:	005b      	lsls	r3, r3, #1
 801375c:	68f9      	ldr	r1, [r7, #12]
 801375e:	440b      	add	r3, r1
 8013760:	8812      	ldrh	r2, [r2, #0]
 8013762:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8013764:	7dfb      	ldrb	r3, [r7, #23]
 8013766:	3301      	adds	r3, #1
 8013768:	75fb      	strb	r3, [r7, #23]
 801376a:	7dfa      	ldrb	r2, [r7, #23]
 801376c:	79fb      	ldrb	r3, [r7, #7]
 801376e:	429a      	cmp	r2, r3
 8013770:	d3ee      	bcc.n	8013750 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8013772:	bf00      	nop
 8013774:	371c      	adds	r7, #28
 8013776:	46bd      	mov	sp, r7
 8013778:	bc80      	pop	{r7}
 801377a:	4770      	bx	lr

0801377c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801377c:	b082      	sub	sp, #8
 801377e:	b580      	push	{r7, lr}
 8013780:	b086      	sub	sp, #24
 8013782:	af00      	add	r7, sp, #0
 8013784:	60f8      	str	r0, [r7, #12]
 8013786:	60b9      	str	r1, [r7, #8]
 8013788:	627b      	str	r3, [r7, #36]	; 0x24
 801378a:	4613      	mov	r3, r2
 801378c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801378e:	79f9      	ldrb	r1, [r7, #7]
 8013790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013794:	cb0c      	ldmia	r3, {r2, r3}
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f7ff fd8c 	bl	80132b4 <GetDutyCycle>
 801379c:	4603      	mov	r3, r0
 801379e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	68da      	ldr	r2, [r3, #12]
 80137a4:	8afb      	ldrh	r3, [r7, #22]
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	fb01 f303 	mul.w	r3, r1, r3
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d909      	bls.n	80137c4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	68da      	ldr	r2, [r3, #12]
 80137b4:	8afb      	ldrh	r3, [r7, #22]
 80137b6:	68b9      	ldr	r1, [r7, #8]
 80137b8:	fb01 f303 	mul.w	r3, r1, r3
 80137bc:	1ad2      	subs	r2, r2, r3
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80137c2:	e002      	b.n	80137ca <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2200      	movs	r2, #0
 80137c8:	60da      	str	r2, [r3, #12]
}
 80137ca:	bf00      	nop
 80137cc:	3718      	adds	r7, #24
 80137ce:	46bd      	mov	sp, r7
 80137d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80137d4:	b002      	add	sp, #8
 80137d6:	4770      	bx	lr

080137d8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80137d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137da:	b08f      	sub	sp, #60	; 0x3c
 80137dc:	af04      	add	r7, sp, #16
 80137de:	6039      	str	r1, [r7, #0]
 80137e0:	4611      	mov	r1, r2
 80137e2:	461a      	mov	r2, r3
 80137e4:	4603      	mov	r3, r0
 80137e6:	71fb      	strb	r3, [r7, #7]
 80137e8:	460b      	mov	r3, r1
 80137ea:	71bb      	strb	r3, [r7, #6]
 80137ec:	4613      	mov	r3, r2
 80137ee:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80137f0:	f04f 33ff 	mov.w	r3, #4294967295
 80137f4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80137f6:	f006 f821 	bl	801983c <UTIL_TIMER_GetCurrentTime>
 80137fa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80137fc:	2300      	movs	r3, #0
 80137fe:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8013800:	2301      	movs	r3, #1
 8013802:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8013804:	2300      	movs	r3, #0
 8013806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801380a:	2300      	movs	r3, #0
 801380c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013810:	e0ba      	b.n	8013988 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8013812:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013816:	4613      	mov	r3, r2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	4413      	add	r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	461a      	mov	r2, r3
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	189c      	adds	r4, r3, r2
 8013824:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8013828:	797a      	ldrb	r2, [r7, #5]
 801382a:	79fd      	ldrb	r5, [r7, #7]
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	9302      	str	r3, [sp, #8]
 8013830:	46ec      	mov	ip, sp
 8013832:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013836:	e893 0003 	ldmia.w	r3, {r0, r1}
 801383a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801383e:	4633      	mov	r3, r6
 8013840:	4629      	mov	r1, r5
 8013842:	4620      	mov	r0, r4
 8013844:	f7ff fe22 	bl	801348c <UpdateTimeCredits>
 8013848:	4603      	mov	r3, r0
 801384a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801384c:	8afa      	ldrh	r2, [r7, #22]
 801384e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013850:	fb02 f303 	mul.w	r3, r2, r3
 8013854:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013856:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	461a      	mov	r2, r3
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	4413      	add	r3, r2
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	69ba      	ldr	r2, [r7, #24]
 801386c:	429a      	cmp	r2, r3
 801386e:	d308      	bcc.n	8013882 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8013870:	797b      	ldrb	r3, [r7, #5]
 8013872:	f083 0301 	eor.w	r3, r3, #1
 8013876:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8013878:	2b00      	cmp	r3, #0
 801387a:	d013      	beq.n	80138a4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801387c:	79fb      	ldrb	r3, [r7, #7]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d010      	beq.n	80138a4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8013882:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013886:	4613      	mov	r3, r2
 8013888:	005b      	lsls	r3, r3, #1
 801388a:	4413      	add	r3, r2
 801388c:	00db      	lsls	r3, r3, #3
 801388e:	461a      	mov	r2, r3
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	4413      	add	r3, r2
 8013894:	2201      	movs	r2, #1
 8013896:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8013898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801389c:	3301      	adds	r3, #1
 801389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80138a2:	e06c      	b.n	801397e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80138a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80138a8:	4613      	mov	r3, r2
 80138aa:	005b      	lsls	r3, r3, #1
 80138ac:	4413      	add	r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	461a      	mov	r2, r3
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	4413      	add	r3, r2
 80138b6:	2200      	movs	r2, #0
 80138b8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80138ba:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80138be:	4613      	mov	r3, r2
 80138c0:	005b      	lsls	r3, r3, #1
 80138c2:	4413      	add	r3, r2
 80138c4:	00db      	lsls	r3, r3, #3
 80138c6:	461a      	mov	r2, r3
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	4413      	add	r3, r2
 80138cc:	691b      	ldr	r3, [r3, #16]
 80138ce:	69ba      	ldr	r2, [r7, #24]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d215      	bcs.n	8013900 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80138d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80138d8:	4613      	mov	r3, r2
 80138da:	005b      	lsls	r3, r3, #1
 80138dc:	4413      	add	r3, r2
 80138de:	00db      	lsls	r3, r3, #3
 80138e0:	461a      	mov	r2, r3
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	4413      	add	r3, r2
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	69ba      	ldr	r2, [r7, #24]
 80138ea:	1ad3      	subs	r3, r2, r3
 80138ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138ee:	4293      	cmp	r3, r2
 80138f0:	bf28      	it	cs
 80138f2:	4613      	movcs	r3, r2
 80138f4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80138f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138fa:	3301      	adds	r3, #1
 80138fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8013900:	79fb      	ldrb	r3, [r7, #7]
 8013902:	f083 0301 	eor.w	r3, r3, #1
 8013906:	b2db      	uxtb	r3, r3
 8013908:	2b00      	cmp	r3, #0
 801390a:	d038      	beq.n	801397e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801390c:	2300      	movs	r3, #0
 801390e:	60fb      	str	r3, [r7, #12]
 8013910:	2300      	movs	r3, #0
 8013912:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013914:	8afb      	ldrh	r3, [r7, #22]
 8013916:	2b64      	cmp	r3, #100	; 0x64
 8013918:	d103      	bne.n	8013922 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801391a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801391e:	60fb      	str	r3, [r7, #12]
 8013920:	e009      	b.n	8013936 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013922:	8afb      	ldrh	r3, [r7, #22]
 8013924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013928:	d103      	bne.n	8013932 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801392a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801392e:	60fb      	str	r3, [r7, #12]
 8013930:	e001      	b.n	8013936 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013932:	4b1e      	ldr	r3, [pc, #120]	; (80139ac <RegionCommonUpdateBandTimeOff+0x1d4>)
 8013934:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8013936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013938:	4a1c      	ldr	r2, [pc, #112]	; (80139ac <RegionCommonUpdateBandTimeOff+0x1d4>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d90e      	bls.n	801395c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013942:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013946:	3b30      	subs	r3, #48	; 0x30
 8013948:	4919      	ldr	r1, [pc, #100]	; (80139b0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801394a:	fba1 1303 	umull	r1, r3, r1, r3
 801394e:	0c1b      	lsrs	r3, r3, #16
 8013950:	3301      	adds	r3, #1
 8013952:	4918      	ldr	r1, [pc, #96]	; (80139b4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8013954:	fb01 f303 	mul.w	r3, r1, r3
 8013958:	4413      	add	r3, r2
 801395a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801395c:	f107 000c 	add.w	r0, r7, #12
 8013960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013966:	f107 020c 	add.w	r2, r7, #12
 801396a:	ca06      	ldmia	r2, {r1, r2}
 801396c:	f005 f891 	bl	8018a92 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8013970:	f107 030c 	add.w	r3, r7, #12
 8013974:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013978:	f005 f94a 	bl	8018c10 <SysTimeToMs>
 801397c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801397e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013982:	3301      	adds	r3, #1
 8013984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013988:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801398c:	79bb      	ldrb	r3, [r7, #6]
 801398e:	429a      	cmp	r2, r3
 8013990:	f4ff af3f 	bcc.w	8013812 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8013994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013998:	2b00      	cmp	r3, #0
 801399a:	d102      	bne.n	80139a2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801399c:	f04f 33ff 	mov.w	r3, #4294967295
 80139a0:	e000      	b.n	80139a4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80139a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	372c      	adds	r7, #44	; 0x2c
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ac:	0001ec30 	.word	0x0001ec30
 80139b0:	c22e4507 	.word	0xc22e4507
 80139b4:	00015180 	.word	0x00015180

080139b8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80139c2:	2300      	movs	r3, #0
 80139c4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	2b03      	cmp	r3, #3
 80139cc:	d13f      	bne.n	8013a4e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	3301      	adds	r3, #1
 80139d2:	781b      	ldrb	r3, [r3, #0]
 80139d4:	b25a      	sxtb	r2, r3
 80139d6:	683b      	ldr	r3, [r7, #0]
 80139d8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80139e0:	f003 030f 	and.w	r3, r3, #15
 80139e4:	b25a      	sxtb	r2, r3
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	091b      	lsrs	r3, r3, #4
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	b25a      	sxtb	r2, r3
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	3302      	adds	r3, #2
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	889b      	ldrh	r3, [r3, #4]
 8013a0c:	b21a      	sxth	r2, r3
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	3303      	adds	r3, #3
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	021b      	lsls	r3, r3, #8
 8013a16:	b21b      	sxth	r3, r3
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	b21b      	sxth	r3, r3
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	791a      	ldrb	r2, [r3, #4]
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	091b      	lsrs	r3, r3, #4
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	f003 0307 	and.w	r3, r3, #7
 8013a36:	b2da      	uxtb	r2, r3
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	f003 030f 	and.w	r3, r3, #15
 8013a44:	b2da      	uxtb	r2, r3
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8013a4a:	2305      	movs	r3, #5
 8013a4c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8013a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3714      	adds	r7, #20
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bc80      	pop	{r7}
 8013a58:	4770      	bx	lr

08013a5a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8013a5a:	b5b0      	push	{r4, r5, r7, lr}
 8013a5c:	b088      	sub	sp, #32
 8013a5e:	af02      	add	r7, sp, #8
 8013a60:	60f8      	str	r0, [r7, #12]
 8013a62:	60b9      	str	r1, [r7, #8]
 8013a64:	607a      	str	r2, [r7, #4]
 8013a66:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	791b      	ldrb	r3, [r3, #4]
 8013a6c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	799b      	ldrb	r3, [r3, #6]
 8013a72:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	79db      	ldrb	r3, [r3, #7]
 8013a78:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	7a1b      	ldrb	r3, [r3, #8]
 8013a7e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	795b      	ldrb	r3, [r3, #5]
 8013a84:	f083 0301 	eor.w	r3, r3, #1
 8013a88:	b2db      	uxtb	r3, r3
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d008      	beq.n	8013aa0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	7adb      	ldrb	r3, [r3, #11]
 8013a92:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	7a5b      	ldrb	r3, [r3, #9]
 8013a98:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	7a9b      	ldrb	r3, [r3, #10]
 8013a9e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8013aa0:	7dfb      	ldrb	r3, [r7, #23]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d03a      	beq.n	8013b1c <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	7b18      	ldrb	r0, [r3, #12]
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6919      	ldr	r1, [r3, #16]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	6992      	ldr	r2, [r2, #24]
 8013abe:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8013ac2:	9201      	str	r2, [sp, #4]
 8013ac4:	9300      	str	r3, [sp, #0]
 8013ac6:	462b      	mov	r3, r5
 8013ac8:	4622      	mov	r2, r4
 8013aca:	f7ff fd42 	bl	8013552 <RegionCommonChanVerifyDr>
 8013ace:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8013ad0:	f083 0301 	eor.w	r3, r3, #1
 8013ad4:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d003      	beq.n	8013ae2 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
 8013adc:	f023 0302 	bic.w	r3, r3, #2
 8013ae0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8013aee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7ff fd9f 	bl	8013636 <RegionCommonValueInRange>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d10e      	bne.n	8013b1c <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8013b04:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	da03      	bge.n	8013b14 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	7f5b      	ldrb	r3, [r3, #29]
 8013b10:	757b      	strb	r3, [r7, #21]
 8013b12:	e003      	b.n	8013b1c <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013b14:	7dfb      	ldrb	r3, [r7, #23]
 8013b16:	f023 0304 	bic.w	r3, r3, #4
 8013b1a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8013b1c:	7dfb      	ldrb	r3, [r7, #23]
 8013b1e:	2b07      	cmp	r3, #7
 8013b20:	d105      	bne.n	8013b2e <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8013b22:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d101      	bne.n	8013b2e <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	7dba      	ldrb	r2, [r7, #22]
 8013b32:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	7d7a      	ldrb	r2, [r7, #21]
 8013b38:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8013b3a:	7d3a      	ldrb	r2, [r7, #20]
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	701a      	strb	r2, [r3, #0]

    return status;
 8013b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3718      	adds	r7, #24
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013b4c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	4603      	mov	r3, r0
 8013b54:	6039      	str	r1, [r7, #0]
 8013b56:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8013b58:	79fb      	ldrb	r3, [r7, #7]
 8013b5a:	4a06      	ldr	r2, [pc, #24]	; (8013b74 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8013b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b60:	461a      	mov	r2, r3
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	370c      	adds	r7, #12
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bc80      	pop	{r7}
 8013b70:	4770      	bx	lr
 8013b72:	bf00      	nop
 8013b74:	000f4240 	.word	0x000f4240

08013b78 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	4603      	mov	r3, r0
 8013b80:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8013b82:	79fb      	ldrb	r3, [r7, #7]
 8013b84:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013b88:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bc80      	pop	{r7}
 8013b94:	4770      	bx	lr
	...

08013b98 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b085      	sub	sp, #20
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	607a      	str	r2, [r7, #4]
 8013ba2:	603b      	str	r3, [r7, #0]
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013ba8:	7afa      	ldrb	r2, [r7, #11]
 8013baa:	7afb      	ldrb	r3, [r7, #11]
 8013bac:	3b04      	subs	r3, #4
 8013bae:	4619      	mov	r1, r3
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	fb03 f101 	mul.w	r1, r3, r1
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013bbc:	fb00 f303 	mul.w	r3, r0, r3
 8013bc0:	440b      	add	r3, r1
 8013bc2:	005b      	lsls	r3, r3, #1
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d013      	beq.n	8013bf0 <RegionCommonComputeRxWindowParameters+0x58>
 8013bc8:	7afb      	ldrb	r3, [r7, #11]
 8013bca:	3b04      	subs	r3, #4
 8013bcc:	4619      	mov	r1, r3
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	fb03 f101 	mul.w	r1, r3, r1
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013bda:	fb00 f303 	mul.w	r3, r0, r3
 8013bde:	440b      	add	r3, r1
 8013be0:	0059      	lsls	r1, r3, #1
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	440b      	add	r3, r1
 8013be6:	1e59      	subs	r1, r3, #1
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8013bee:	e00f      	b.n	8013c10 <RegionCommonComputeRxWindowParameters+0x78>
 8013bf0:	7afb      	ldrb	r3, [r7, #11]
 8013bf2:	3b04      	subs	r3, #4
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	fb03 f101 	mul.w	r1, r3, r1
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013c02:	fb00 f303 	mul.w	r3, r0, r3
 8013c06:	440b      	add	r3, r1
 8013c08:	0059      	lsls	r1, r3, #1
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8013c10:	429a      	cmp	r2, r3
 8013c12:	bf38      	it	cc
 8013c14:	461a      	movcc	r2, r3
 8013c16:	69bb      	ldr	r3, [r7, #24]
 8013c18:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	4619      	mov	r1, r3
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	fb02 f303 	mul.w	r3, r2, r3
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d007      	beq.n	8013c3e <RegionCommonComputeRxWindowParameters+0xa6>
 8013c2e:	69bb      	ldr	r3, [r7, #24]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	fb02 f303 	mul.w	r3, r2, r3
 8013c38:	3301      	adds	r3, #1
 8013c3a:	085b      	lsrs	r3, r3, #1
 8013c3c:	e005      	b.n	8013c4a <RegionCommonComputeRxWindowParameters+0xb2>
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	fb02 f303 	mul.w	r3, r2, r3
 8013c48:	085b      	lsrs	r3, r3, #1
 8013c4a:	1acb      	subs	r3, r1, r3
 8013c4c:	683a      	ldr	r2, [r7, #0]
 8013c4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013c52:	fb01 f202 	mul.w	r2, r1, r2
 8013c56:	1a9b      	subs	r3, r3, r2
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	dd27      	ble.n	8013cac <RegionCommonComputeRxWindowParameters+0x114>
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	4619      	mov	r1, r3
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	68fa      	ldr	r2, [r7, #12]
 8013c68:	fb02 f303 	mul.w	r3, r2, r3
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d007      	beq.n	8013c80 <RegionCommonComputeRxWindowParameters+0xe8>
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	fb02 f303 	mul.w	r3, r2, r3
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	085b      	lsrs	r3, r3, #1
 8013c7e:	e005      	b.n	8013c8c <RegionCommonComputeRxWindowParameters+0xf4>
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	68fa      	ldr	r2, [r7, #12]
 8013c86:	fb02 f303 	mul.w	r3, r2, r3
 8013c8a:	085b      	lsrs	r3, r3, #1
 8013c8c:	1acb      	subs	r3, r1, r3
 8013c8e:	683a      	ldr	r2, [r7, #0]
 8013c90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013c94:	fb01 f202 	mul.w	r2, r1, r2
 8013c98:	1a9b      	subs	r3, r3, r2
 8013c9a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8013c9e:	4a19      	ldr	r2, [pc, #100]	; (8013d04 <RegionCommonComputeRxWindowParameters+0x16c>)
 8013ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8013ca4:	1192      	asrs	r2, r2, #6
 8013ca6:	17db      	asrs	r3, r3, #31
 8013ca8:	1ad3      	subs	r3, r2, r3
 8013caa:	e024      	b.n	8013cf6 <RegionCommonComputeRxWindowParameters+0x15e>
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	009b      	lsls	r3, r3, #2
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	fb02 f303 	mul.w	r3, r2, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d007      	beq.n	8013cd0 <RegionCommonComputeRxWindowParameters+0x138>
 8013cc0:	69bb      	ldr	r3, [r7, #24]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68fa      	ldr	r2, [r7, #12]
 8013cc6:	fb02 f303 	mul.w	r3, r2, r3
 8013cca:	3301      	adds	r3, #1
 8013ccc:	085b      	lsrs	r3, r3, #1
 8013cce:	e005      	b.n	8013cdc <RegionCommonComputeRxWindowParameters+0x144>
 8013cd0:	69bb      	ldr	r3, [r7, #24]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	fb02 f303 	mul.w	r3, r2, r3
 8013cda:	085b      	lsrs	r3, r3, #1
 8013cdc:	1acb      	subs	r3, r1, r3
 8013cde:	683a      	ldr	r2, [r7, #0]
 8013ce0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013ce4:	fb01 f202 	mul.w	r2, r1, r2
 8013ce8:	1a9b      	subs	r3, r3, r2
 8013cea:	4a06      	ldr	r2, [pc, #24]	; (8013d04 <RegionCommonComputeRxWindowParameters+0x16c>)
 8013cec:	fb82 1203 	smull	r1, r2, r2, r3
 8013cf0:	1192      	asrs	r2, r2, #6
 8013cf2:	17db      	asrs	r3, r3, #31
 8013cf4:	1ad3      	subs	r3, r2, r3
 8013cf6:	69fa      	ldr	r2, [r7, #28]
 8013cf8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8013cfa:	bf00      	nop
 8013cfc:	3714      	adds	r7, #20
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bc80      	pop	{r7}
 8013d02:	4770      	bx	lr
 8013d04:	10624dd3 	.word	0x10624dd3

08013d08 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b086      	sub	sp, #24
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
 8013d14:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d1e:	005b      	lsls	r3, r3, #1
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ec fd53 	bl	80007cc <__aeabi_ui2f>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4619      	mov	r1, r3
 8013d2a:	68b8      	ldr	r0, [r7, #8]
 8013d2c:	f7ec fc9c 	bl	8000668 <__aeabi_fsub>
 8013d30:	4603      	mov	r3, r0
 8013d32:	6879      	ldr	r1, [r7, #4]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7ec fc97 	bl	8000668 <__aeabi_fsub>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7ec fb87 	bl	8000450 <__aeabi_f2d>
 8013d42:	4602      	mov	r2, r0
 8013d44:	460b      	mov	r3, r1
 8013d46:	4610      	mov	r0, r2
 8013d48:	4619      	mov	r1, r3
 8013d4a:	f006 f90d 	bl	8019f68 <floor>
 8013d4e:	4602      	mov	r2, r0
 8013d50:	460b      	mov	r3, r1
 8013d52:	4610      	mov	r0, r2
 8013d54:	4619      	mov	r1, r3
 8013d56:	f7ec fc5b 	bl	8000610 <__aeabi_d2iz>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8013d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3718      	adds	r7, #24
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8013d6a:	b590      	push	{r4, r7, lr}
 8013d6c:	b087      	sub	sp, #28
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	60b9      	str	r1, [r7, #8]
 8013d74:	607a      	str	r2, [r7, #4]
 8013d76:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013d80:	2300      	movs	r3, #0
 8013d82:	757b      	strb	r3, [r7, #21]
 8013d84:	2300      	movs	r3, #0
 8013d86:	753b      	strb	r3, [r7, #20]
 8013d88:	e09c      	b.n	8013ec4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	74fb      	strb	r3, [r7, #19]
 8013d8e:	e08f      	b.n	8013eb0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	685a      	ldr	r2, [r3, #4]
 8013d94:	7d3b      	ldrb	r3, [r7, #20]
 8013d96:	005b      	lsls	r3, r3, #1
 8013d98:	4413      	add	r3, r2
 8013d9a:	881b      	ldrh	r3, [r3, #0]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	7cfb      	ldrb	r3, [r7, #19]
 8013da0:	fa42 f303 	asr.w	r3, r2, r3
 8013da4:	f003 0301 	and.w	r3, r3, #1
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d07e      	beq.n	8013eaa <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	689a      	ldr	r2, [r3, #8]
 8013db0:	7d79      	ldrb	r1, [r7, #21]
 8013db2:	7cfb      	ldrb	r3, [r7, #19]
 8013db4:	440b      	add	r3, r1
 8013db6:	4619      	mov	r1, r3
 8013db8:	460b      	mov	r3, r1
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	440b      	add	r3, r1
 8013dbe:	009b      	lsls	r3, r3, #2
 8013dc0:	4413      	add	r3, r2
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d06b      	beq.n	8013ea0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	f083 0301 	eor.w	r3, r3, #1
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d011      	beq.n	8013dfa <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00d      	beq.n	8013dfa <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	695a      	ldr	r2, [r3, #20]
 8013de2:	7d3b      	ldrb	r3, [r7, #20]
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	881b      	ldrh	r3, [r3, #0]
 8013dea:	461a      	mov	r2, r3
 8013dec:	7cfb      	ldrb	r3, [r7, #19]
 8013dee:	fa42 f303 	asr.w	r3, r2, r3
 8013df2:	f003 0301 	and.w	r3, r3, #1
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d054      	beq.n	8013ea4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	785b      	ldrb	r3, [r3, #1]
 8013dfe:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	689a      	ldr	r2, [r3, #8]
 8013e04:	7d79      	ldrb	r1, [r7, #21]
 8013e06:	7cfb      	ldrb	r3, [r7, #19]
 8013e08:	440b      	add	r3, r1
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	005b      	lsls	r3, r3, #1
 8013e10:	440b      	add	r3, r1
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	4413      	add	r3, r2
 8013e16:	7a1b      	ldrb	r3, [r3, #8]
 8013e18:	f343 0303 	sbfx	r3, r3, #0, #4
 8013e1c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013e1e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	689a      	ldr	r2, [r3, #8]
 8013e24:	7d79      	ldrb	r1, [r7, #21]
 8013e26:	7cfb      	ldrb	r3, [r7, #19]
 8013e28:	440b      	add	r3, r1
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	440b      	add	r3, r1
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	4413      	add	r3, r2
 8013e36:	7a1b      	ldrb	r3, [r3, #8]
 8013e38:	f343 1303 	sbfx	r3, r3, #4, #4
 8013e3c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013e3e:	461a      	mov	r2, r3
 8013e40:	4621      	mov	r1, r4
 8013e42:	f7ff fbf8 	bl	8013636 <RegionCommonValueInRange>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d02d      	beq.n	8013ea8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	68da      	ldr	r2, [r3, #12]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	6899      	ldr	r1, [r3, #8]
 8013e54:	7d78      	ldrb	r0, [r7, #21]
 8013e56:	7cfb      	ldrb	r3, [r7, #19]
 8013e58:	4403      	add	r3, r0
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	4403      	add	r3, r0
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	440b      	add	r3, r1
 8013e66:	7a5b      	ldrb	r3, [r3, #9]
 8013e68:	4619      	mov	r1, r3
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	440b      	add	r3, r1
 8013e70:	00db      	lsls	r3, r3, #3
 8013e72:	4413      	add	r3, r2
 8013e74:	7d1b      	ldrb	r3, [r3, #20]
 8013e76:	f083 0301 	eor.w	r3, r3, #1
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d003      	beq.n	8013e88 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8013e80:	7dbb      	ldrb	r3, [r7, #22]
 8013e82:	3301      	adds	r3, #1
 8013e84:	75bb      	strb	r3, [r7, #22]
                    continue;
 8013e86:	e010      	b.n	8013eaa <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8013e88:	7dfb      	ldrb	r3, [r7, #23]
 8013e8a:	1c5a      	adds	r2, r3, #1
 8013e8c:	75fa      	strb	r2, [r7, #23]
 8013e8e:	461a      	mov	r2, r3
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	4413      	add	r3, r2
 8013e94:	7d79      	ldrb	r1, [r7, #21]
 8013e96:	7cfa      	ldrb	r2, [r7, #19]
 8013e98:	440a      	add	r2, r1
 8013e9a:	b2d2      	uxtb	r2, r2
 8013e9c:	701a      	strb	r2, [r3, #0]
 8013e9e:	e004      	b.n	8013eaa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8013ea0:	bf00      	nop
 8013ea2:	e002      	b.n	8013eaa <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8013ea4:	bf00      	nop
 8013ea6:	e000      	b.n	8013eaa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8013ea8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8013eaa:	7cfb      	ldrb	r3, [r7, #19]
 8013eac:	3301      	adds	r3, #1
 8013eae:	74fb      	strb	r3, [r7, #19]
 8013eb0:	7cfb      	ldrb	r3, [r7, #19]
 8013eb2:	2b0f      	cmp	r3, #15
 8013eb4:	f67f af6c 	bls.w	8013d90 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013eb8:	7d7b      	ldrb	r3, [r7, #21]
 8013eba:	3310      	adds	r3, #16
 8013ebc:	757b      	strb	r3, [r7, #21]
 8013ebe:	7d3b      	ldrb	r3, [r7, #20]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	753b      	strb	r3, [r7, #20]
 8013ec4:	7d7b      	ldrb	r3, [r7, #21]
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	8a1b      	ldrh	r3, [r3, #16]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	f4ff af5c 	bcc.w	8013d8a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	7dfa      	ldrb	r2, [r7, #23]
 8013ed6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	7dba      	ldrb	r2, [r7, #22]
 8013edc:	701a      	strb	r2, [r3, #0]
}
 8013ede:	bf00      	nop
 8013ee0:	371c      	adds	r7, #28
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd90      	pop	{r4, r7, pc}

08013ee6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8013ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ee8:	b08b      	sub	sp, #44	; 0x2c
 8013eea:	af04      	add	r7, sp, #16
 8013eec:	60f8      	str	r0, [r7, #12]
 8013eee:	60b9      	str	r1, [r7, #8]
 8013ef0:	607a      	str	r2, [r7, #4]
 8013ef2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	685b      	ldr	r3, [r3, #4]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f005 fcb1 	bl	8019860 <UTIL_TIMER_GetElapsedTime>
 8013efe:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	1ad2      	subs	r2, r2, r3
 8013f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f0a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8013f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0e:	2201      	movs	r2, #1
 8013f10:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	2200      	movs	r2, #0
 8013f16:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d004      	beq.n	8013f2a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013f24:	697a      	ldr	r2, [r7, #20]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d32b      	bcc.n	8013f82 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	69db      	ldr	r3, [r3, #28]
 8013f34:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8013f3a:	68dd      	ldr	r5, [r3, #12]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	7a5e      	ldrb	r6, [r3, #9]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	f893 c008 	ldrb.w	ip, [r3, #8]
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	7d1b      	ldrb	r3, [r3, #20]
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	6992      	ldr	r2, [r2, #24]
 8013f4e:	9203      	str	r2, [sp, #12]
 8013f50:	68fa      	ldr	r2, [r7, #12]
 8013f52:	f10d 0e04 	add.w	lr, sp, #4
 8013f56:	320c      	adds	r2, #12
 8013f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f5c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	4663      	mov	r3, ip
 8013f64:	4632      	mov	r2, r6
 8013f66:	4629      	mov	r1, r5
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f7ff fc35 	bl	80137d8 <RegionCommonUpdateBandTimeOff>
 8013f6e:	4602      	mov	r2, r0
 8013f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f72:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	69d8      	ldr	r0, [r3, #28]
 8013f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	6879      	ldr	r1, [r7, #4]
 8013f7e:	f7ff fef4 	bl	8013d6a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d004      	beq.n	8013f94 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8013f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8013f90:	2300      	movs	r3, #0
 8013f92:	e006      	b.n	8013fa2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8013f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013f9c:	230b      	movs	r3, #11
 8013f9e:	e000      	b.n	8013fa2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013fa0:	230c      	movs	r3, #12
    }
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	371c      	adds	r7, #28
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013faa <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8013faa:	b5b0      	push	{r4, r5, r7, lr}
 8013fac:	b086      	sub	sp, #24
 8013fae:	af02      	add	r7, sp, #8
 8013fb0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f993 2000 	ldrsb.w	r2, [r3]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d103      	bne.n	8013fd0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013fce:	e026      	b.n	801401e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8013fd0:	7bfb      	ldrb	r3, [r7, #15]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	b2db      	uxtb	r3, r3
 8013fd6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8013fde:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d019      	beq.n	801401a <RegionCommonGetNextLowerTxDr+0x70>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	78d8      	ldrb	r0, [r3, #3]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6859      	ldr	r1, [r3, #4]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	6892      	ldr	r2, [r2, #8]
 8013ffe:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014002:	9201      	str	r2, [sp, #4]
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	462b      	mov	r3, r5
 8014008:	4622      	mov	r2, r4
 801400a:	f7ff faa2 	bl	8013552 <RegionCommonChanVerifyDr>
 801400e:	4603      	mov	r3, r0
 8014010:	f083 0301 	eor.w	r3, r3, #1
 8014014:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1da      	bne.n	8013fd0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bdb0      	pop	{r4, r5, r7, pc}

08014026 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014026:	b480      	push	{r7}
 8014028:	b083      	sub	sp, #12
 801402a:	af00      	add	r7, sp, #0
 801402c:	4603      	mov	r3, r0
 801402e:	460a      	mov	r2, r1
 8014030:	71fb      	strb	r3, [r7, #7]
 8014032:	4613      	mov	r3, r2
 8014034:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014036:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801403e:	4293      	cmp	r3, r2
 8014040:	bfb8      	it	lt
 8014042:	4613      	movlt	r3, r2
 8014044:	b25b      	sxtb	r3, r3
}
 8014046:	4618      	mov	r0, r3
 8014048:	370c      	adds	r7, #12
 801404a:	46bd      	mov	sp, r7
 801404c:	bc80      	pop	{r7}
 801404e:	4770      	bx	lr

08014050 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	4413      	add	r3, r2
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	4a07      	ldr	r2, [pc, #28]	; (8014084 <RegionCommonGetBandwidth+0x34>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d004      	beq.n	8014074 <RegionCommonGetBandwidth+0x24>
 801406a:	4a07      	ldr	r2, [pc, #28]	; (8014088 <RegionCommonGetBandwidth+0x38>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d003      	beq.n	8014078 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014070:	2300      	movs	r3, #0
 8014072:	e002      	b.n	801407a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014074:	2301      	movs	r3, #1
 8014076:	e000      	b.n	801407a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014078:	2302      	movs	r3, #2
    }
}
 801407a:	4618      	mov	r0, r3
 801407c:	370c      	adds	r7, #12
 801407e:	46bd      	mov	sp, r7
 8014080:	bc80      	pop	{r7}
 8014082:	4770      	bx	lr
 8014084:	0003d090 	.word	0x0003d090
 8014088:	0007a120 	.word	0x0007a120

0801408c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801408c:	b5b0      	push	{r4, r5, r7, lr}
 801408e:	b08c      	sub	sp, #48	; 0x30
 8014090:	af04      	add	r7, sp, #16
 8014092:	4603      	mov	r3, r0
 8014094:	6039      	str	r1, [r7, #0]
 8014096:	71fb      	strb	r3, [r7, #7]
 8014098:	4613      	mov	r3, r2
 801409a:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 801409c:	4b17      	ldr	r3, [pc, #92]	; (80140fc <RegionCommonRxConfigPrint+0x70>)
 801409e:	f107 0408 	add.w	r4, r7, #8
 80140a2:	461d      	mov	r5, r3
 80140a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80140ac:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 80140b0:	79fb      	ldrb	r3, [r7, #7]
 80140b2:	2b05      	cmp	r3, #5
 80140b4:	d813      	bhi.n	80140de <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 80140b6:	79fb      	ldrb	r3, [r7, #7]
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	f107 0220 	add.w	r2, r7, #32
 80140be:	4413      	add	r3, r2
 80140c0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80140c4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80140c8:	9202      	str	r2, [sp, #8]
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	9201      	str	r2, [sp, #4]
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	4b0b      	ldr	r3, [pc, #44]	; (8014100 <RegionCommonRxConfigPrint+0x74>)
 80140d2:	2201      	movs	r2, #1
 80140d4:	2100      	movs	r1, #0
 80140d6:	2002      	movs	r0, #2
 80140d8:	f005 fca0 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80140dc:	e00a      	b.n	80140f4 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80140de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80140e2:	9301      	str	r3, [sp, #4]
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	4b06      	ldr	r3, [pc, #24]	; (8014104 <RegionCommonRxConfigPrint+0x78>)
 80140ea:	2201      	movs	r2, #1
 80140ec:	2100      	movs	r1, #0
 80140ee:	2002      	movs	r0, #2
 80140f0:	f005 fc94 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 80140f4:	bf00      	nop
 80140f6:	3720      	adds	r7, #32
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bdb0      	pop	{r4, r5, r7, pc}
 80140fc:	0801a724 	.word	0x0801a724
 8014100:	0801a6e8 	.word	0x0801a6e8
 8014104:	0801a708 	.word	0x0801a708

08014108 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b084      	sub	sp, #16
 801410c:	af02      	add	r7, sp, #8
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	460b      	mov	r3, r1
 8014112:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014118:	9301      	str	r3, [sp, #4]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	4b05      	ldr	r3, [pc, #20]	; (8014134 <RegionCommonTxConfigPrint+0x2c>)
 8014120:	2201      	movs	r2, #1
 8014122:	2100      	movs	r1, #0
 8014124:	2002      	movs	r0, #2
 8014126:	f005 fc79 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
}
 801412a:	bf00      	nop
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
 8014132:	bf00      	nop
 8014134:	0801a73c 	.word	0x0801a73c

08014138 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014142:	4b2d      	ldr	r3, [pc, #180]	; (80141f8 <VerifyRfFreq+0xc0>)
 8014144:	6a1b      	ldr	r3, [r3, #32]
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	4798      	blx	r3
 801414a:	4603      	mov	r3, r0
 801414c:	f083 0301 	eor.w	r3, r3, #1
 8014150:	b2db      	uxtb	r3, r3
 8014152:	2b00      	cmp	r3, #0
 8014154:	d001      	beq.n	801415a <VerifyRfFreq+0x22>
    {
        return false;
 8014156:	2300      	movs	r3, #0
 8014158:	e04a      	b.n	80141f0 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	4a27      	ldr	r2, [pc, #156]	; (80141fc <VerifyRfFreq+0xc4>)
 801415e:	4293      	cmp	r3, r2
 8014160:	d307      	bcc.n	8014172 <VerifyRfFreq+0x3a>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	4a26      	ldr	r2, [pc, #152]	; (8014200 <VerifyRfFreq+0xc8>)
 8014166:	4293      	cmp	r3, r2
 8014168:	d803      	bhi.n	8014172 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	2202      	movs	r2, #2
 801416e:	701a      	strb	r2, [r3, #0]
 8014170:	e03d      	b.n	80141ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	4a22      	ldr	r2, [pc, #136]	; (8014200 <VerifyRfFreq+0xc8>)
 8014176:	4293      	cmp	r3, r2
 8014178:	d907      	bls.n	801418a <VerifyRfFreq+0x52>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	4a21      	ldr	r2, [pc, #132]	; (8014204 <VerifyRfFreq+0xcc>)
 801417e:	4293      	cmp	r3, r2
 8014180:	d803      	bhi.n	801418a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	2200      	movs	r2, #0
 8014186:	701a      	strb	r2, [r3, #0]
 8014188:	e031      	b.n	80141ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	4a1d      	ldr	r2, [pc, #116]	; (8014204 <VerifyRfFreq+0xcc>)
 801418e:	4293      	cmp	r3, r2
 8014190:	d907      	bls.n	80141a2 <VerifyRfFreq+0x6a>
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	4a1c      	ldr	r2, [pc, #112]	; (8014208 <VerifyRfFreq+0xd0>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d803      	bhi.n	80141a2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	2201      	movs	r2, #1
 801419e:	701a      	strb	r2, [r3, #0]
 80141a0:	e025      	b.n	80141ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	4a19      	ldr	r2, [pc, #100]	; (801420c <VerifyRfFreq+0xd4>)
 80141a6:	4293      	cmp	r3, r2
 80141a8:	d907      	bls.n	80141ba <VerifyRfFreq+0x82>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	4a18      	ldr	r2, [pc, #96]	; (8014210 <VerifyRfFreq+0xd8>)
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d803      	bhi.n	80141ba <VerifyRfFreq+0x82>
    {
        *band = 5;
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	2205      	movs	r2, #5
 80141b6:	701a      	strb	r2, [r3, #0]
 80141b8:	e019      	b.n	80141ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4a15      	ldr	r2, [pc, #84]	; (8014214 <VerifyRfFreq+0xdc>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d907      	bls.n	80141d2 <VerifyRfFreq+0x9a>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	4a14      	ldr	r2, [pc, #80]	; (8014218 <VerifyRfFreq+0xe0>)
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d803      	bhi.n	80141d2 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	2203      	movs	r2, #3
 80141ce:	701a      	strb	r2, [r3, #0]
 80141d0:	e00d      	b.n	80141ee <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	4a11      	ldr	r2, [pc, #68]	; (801421c <VerifyRfFreq+0xe4>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d307      	bcc.n	80141ea <VerifyRfFreq+0xb2>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	4a10      	ldr	r2, [pc, #64]	; (8014220 <VerifyRfFreq+0xe8>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d803      	bhi.n	80141ea <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	2204      	movs	r2, #4
 80141e6:	701a      	strb	r2, [r3, #0]
 80141e8:	e001      	b.n	80141ee <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80141ea:	2300      	movs	r3, #0
 80141ec:	e000      	b.n	80141f0 <VerifyRfFreq+0xb8>
    }
    return true;
 80141ee:	2301      	movs	r3, #1
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	0801acfc 	.word	0x0801acfc
 80141fc:	337055c0 	.word	0x337055c0
 8014200:	338eda3f 	.word	0x338eda3f
 8014204:	33bca100 	.word	0x33bca100
 8014208:	33c5c8c0 	.word	0x33c5c8c0
 801420c:	33c74f5f 	.word	0x33c74f5f
 8014210:	33cef080 	.word	0x33cef080
 8014214:	33d1fdbf 	.word	0x33d1fdbf
 8014218:	33d5ce50 	.word	0x33d5ce50
 801421c:	33d691a0 	.word	0x33d691a0
 8014220:	33db2580 	.word	0x33db2580

08014224 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014224:	b590      	push	{r4, r7, lr}
 8014226:	b08b      	sub	sp, #44	; 0x2c
 8014228:	af04      	add	r7, sp, #16
 801422a:	4603      	mov	r3, r0
 801422c:	460a      	mov	r2, r1
 801422e:	71fb      	strb	r3, [r7, #7]
 8014230:	4613      	mov	r3, r2
 8014232:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8014234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014238:	4a1f      	ldr	r2, [pc, #124]	; (80142b8 <GetTimeOnAir+0x94>)
 801423a:	5cd3      	ldrb	r3, [r2, r3]
 801423c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014242:	491e      	ldr	r1, [pc, #120]	; (80142bc <GetTimeOnAir+0x98>)
 8014244:	4618      	mov	r0, r3
 8014246:	f7ff ff03 	bl	8014050 <RegionCommonGetBandwidth>
 801424a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801424c:	2300      	movs	r3, #0
 801424e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014254:	2b07      	cmp	r3, #7
 8014256:	d118      	bne.n	801428a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014258:	4b19      	ldr	r3, [pc, #100]	; (80142c0 <GetTimeOnAir+0x9c>)
 801425a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801425c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014260:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014264:	fb02 f303 	mul.w	r3, r2, r3
 8014268:	4619      	mov	r1, r3
 801426a:	88bb      	ldrh	r3, [r7, #4]
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2201      	movs	r2, #1
 8014270:	9203      	str	r2, [sp, #12]
 8014272:	9302      	str	r3, [sp, #8]
 8014274:	2300      	movs	r3, #0
 8014276:	9301      	str	r3, [sp, #4]
 8014278:	2305      	movs	r3, #5
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	2300      	movs	r3, #0
 801427e:	460a      	mov	r2, r1
 8014280:	68f9      	ldr	r1, [r7, #12]
 8014282:	2000      	movs	r0, #0
 8014284:	47a0      	blx	r4
 8014286:	6178      	str	r0, [r7, #20]
 8014288:	e011      	b.n	80142ae <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801428a:	4b0d      	ldr	r3, [pc, #52]	; (80142c0 <GetTimeOnAir+0x9c>)
 801428c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801428e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014292:	88bb      	ldrh	r3, [r7, #4]
 8014294:	b2db      	uxtb	r3, r3
 8014296:	2101      	movs	r1, #1
 8014298:	9103      	str	r1, [sp, #12]
 801429a:	9302      	str	r3, [sp, #8]
 801429c:	2300      	movs	r3, #0
 801429e:	9301      	str	r3, [sp, #4]
 80142a0:	2308      	movs	r3, #8
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	2301      	movs	r3, #1
 80142a6:	68f9      	ldr	r1, [r7, #12]
 80142a8:	2001      	movs	r0, #1
 80142aa:	47a0      	blx	r4
 80142ac:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80142ae:	697b      	ldr	r3, [r7, #20]
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	371c      	adds	r7, #28
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd90      	pop	{r4, r7, pc}
 80142b8:	0801acc4 	.word	0x0801acc4
 80142bc:	0801accc 	.word	0x0801accc
 80142c0:	0801acfc 	.word	0x0801acfc

080142c4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b088      	sub	sp, #32
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80142cc:	2300      	movs	r3, #0
 80142ce:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	3b01      	subs	r3, #1
 80142d6:	2b38      	cmp	r3, #56	; 0x38
 80142d8:	f200 8125 	bhi.w	8014526 <RegionEU868GetPhyParam+0x262>
 80142dc:	a201      	add	r2, pc, #4	; (adr r2, 80142e4 <RegionEU868GetPhyParam+0x20>)
 80142de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142e2:	bf00      	nop
 80142e4:	080143c9 	.word	0x080143c9
 80142e8:	080143cf 	.word	0x080143cf
 80142ec:	08014527 	.word	0x08014527
 80142f0:	08014527 	.word	0x08014527
 80142f4:	08014527 	.word	0x08014527
 80142f8:	080143d5 	.word	0x080143d5
 80142fc:	08014527 	.word	0x08014527
 8014300:	0801440d 	.word	0x0801440d
 8014304:	08014527 	.word	0x08014527
 8014308:	08014413 	.word	0x08014413
 801430c:	08014419 	.word	0x08014419
 8014310:	0801441f 	.word	0x0801441f
 8014314:	08014425 	.word	0x08014425
 8014318:	08014435 	.word	0x08014435
 801431c:	08014445 	.word	0x08014445
 8014320:	0801444b 	.word	0x0801444b
 8014324:	08014453 	.word	0x08014453
 8014328:	0801445b 	.word	0x0801445b
 801432c:	08014463 	.word	0x08014463
 8014330:	0801446b 	.word	0x0801446b
 8014334:	08014473 	.word	0x08014473
 8014338:	0801447b 	.word	0x0801447b
 801433c:	0801448f 	.word	0x0801448f
 8014340:	08014495 	.word	0x08014495
 8014344:	0801449b 	.word	0x0801449b
 8014348:	080144a1 	.word	0x080144a1
 801434c:	080144ab 	.word	0x080144ab
 8014350:	080144b5 	.word	0x080144b5
 8014354:	080144bb 	.word	0x080144bb
 8014358:	080144c3 	.word	0x080144c3
 801435c:	080144c9 	.word	0x080144c9
 8014360:	080144cf 	.word	0x080144cf
 8014364:	080144d7 	.word	0x080144d7
 8014368:	080143db 	.word	0x080143db
 801436c:	08014527 	.word	0x08014527
 8014370:	08014527 	.word	0x08014527
 8014374:	08014527 	.word	0x08014527
 8014378:	08014527 	.word	0x08014527
 801437c:	08014527 	.word	0x08014527
 8014380:	08014527 	.word	0x08014527
 8014384:	08014527 	.word	0x08014527
 8014388:	08014527 	.word	0x08014527
 801438c:	08014527 	.word	0x08014527
 8014390:	08014527 	.word	0x08014527
 8014394:	08014527 	.word	0x08014527
 8014398:	08014527 	.word	0x08014527
 801439c:	08014527 	.word	0x08014527
 80143a0:	080144dd 	.word	0x080144dd
 80143a4:	080144e3 	.word	0x080144e3
 80143a8:	080144f1 	.word	0x080144f1
 80143ac:	08014527 	.word	0x08014527
 80143b0:	08014527 	.word	0x08014527
 80143b4:	080144f7 	.word	0x080144f7
 80143b8:	080144fd 	.word	0x080144fd
 80143bc:	08014527 	.word	0x08014527
 80143c0:	08014503 	.word	0x08014503
 80143c4:	08014513 	.word	0x08014513
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80143c8:	2300      	movs	r3, #0
 80143ca:	61bb      	str	r3, [r7, #24]
            break;
 80143cc:	e0ac      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80143ce:	2300      	movs	r3, #0
 80143d0:	61bb      	str	r3, [r7, #24]
            break;
 80143d2:	e0a9      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80143d4:	2300      	movs	r3, #0
 80143d6:	61bb      	str	r3, [r7, #24]
            break;
 80143d8:	e0a6      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80143e0:	733b      	strb	r3, [r7, #12]
 80143e2:	2307      	movs	r3, #7
 80143e4:	737b      	strb	r3, [r7, #13]
 80143e6:	2300      	movs	r3, #0
 80143e8:	73bb      	strb	r3, [r7, #14]
 80143ea:	2310      	movs	r3, #16
 80143ec:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80143ee:	4b52      	ldr	r3, [pc, #328]	; (8014538 <RegionEU868GetPhyParam+0x274>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80143f4:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80143f6:	4b50      	ldr	r3, [pc, #320]	; (8014538 <RegionEU868GetPhyParam+0x274>)
 80143f8:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80143fa:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80143fc:	f107 030c 	add.w	r3, r7, #12
 8014400:	4618      	mov	r0, r3
 8014402:	f7ff fdd2 	bl	8013faa <RegionCommonGetNextLowerTxDr>
 8014406:	4603      	mov	r3, r0
 8014408:	61bb      	str	r3, [r7, #24]
            break;
 801440a:	e08d      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801440c:	2300      	movs	r3, #0
 801440e:	61bb      	str	r3, [r7, #24]
            break;
 8014410:	e08a      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8014412:	2300      	movs	r3, #0
 8014414:	61bb      	str	r3, [r7, #24]
            break;
 8014416:	e087      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014418:	2340      	movs	r3, #64	; 0x40
 801441a:	61bb      	str	r3, [r7, #24]
            break;
 801441c:	e084      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801441e:	2320      	movs	r3, #32
 8014420:	61bb      	str	r3, [r7, #24]
            break;
 8014422:	e081      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801442a:	461a      	mov	r2, r3
 801442c:	4b43      	ldr	r3, [pc, #268]	; (801453c <RegionEU868GetPhyParam+0x278>)
 801442e:	5c9b      	ldrb	r3, [r3, r2]
 8014430:	61bb      	str	r3, [r7, #24]
            break;
 8014432:	e079      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801443a:	461a      	mov	r2, r3
 801443c:	4b40      	ldr	r3, [pc, #256]	; (8014540 <RegionEU868GetPhyParam+0x27c>)
 801443e:	5c9b      	ldrb	r3, [r3, r2]
 8014440:	61bb      	str	r3, [r7, #24]
            break;
 8014442:	e071      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8014444:	2301      	movs	r3, #1
 8014446:	61bb      	str	r3, [r7, #24]
            break;
 8014448:	e06e      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801444a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801444e:	61bb      	str	r3, [r7, #24]
            break;
 8014450:	e06a      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014456:	61bb      	str	r3, [r7, #24]
            break;
 8014458:	e066      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801445a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801445e:	61bb      	str	r3, [r7, #24]
            break;
 8014460:	e062      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014462:	f241 3388 	movw	r3, #5000	; 0x1388
 8014466:	61bb      	str	r3, [r7, #24]
            break;
 8014468:	e05e      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801446a:	f241 7370 	movw	r3, #6000	; 0x1770
 801446e:	61bb      	str	r3, [r7, #24]
            break;
 8014470:	e05a      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8014472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014476:	61bb      	str	r3, [r7, #24]
            break;
 8014478:	e056      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801447a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801447e:	4831      	ldr	r0, [pc, #196]	; (8014544 <RegionEU868GetPhyParam+0x280>)
 8014480:	f001 f874 	bl	801556c <randr>
 8014484:	4603      	mov	r3, r0
 8014486:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801448a:	61bb      	str	r3, [r7, #24]
            break;
 801448c:	e04c      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801448e:	2300      	movs	r3, #0
 8014490:	61bb      	str	r3, [r7, #24]
            break;
 8014492:	e049      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8014494:	4b2c      	ldr	r3, [pc, #176]	; (8014548 <RegionEU868GetPhyParam+0x284>)
 8014496:	61bb      	str	r3, [r7, #24]
            break;
 8014498:	e046      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801449a:	2300      	movs	r3, #0
 801449c:	61bb      	str	r3, [r7, #24]
            break;
 801449e:	e043      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80144a0:	4b25      	ldr	r3, [pc, #148]	; (8014538 <RegionEU868GetPhyParam+0x274>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	33c0      	adds	r3, #192	; 0xc0
 80144a6:	61bb      	str	r3, [r7, #24]
            break;
 80144a8:	e03e      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80144aa:	4b23      	ldr	r3, [pc, #140]	; (8014538 <RegionEU868GetPhyParam+0x274>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	33c2      	adds	r3, #194	; 0xc2
 80144b0:	61bb      	str	r3, [r7, #24]
            break;
 80144b2:	e039      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80144b4:	2310      	movs	r3, #16
 80144b6:	61bb      	str	r3, [r7, #24]
            break;
 80144b8:	e036      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80144ba:	4b1f      	ldr	r3, [pc, #124]	; (8014538 <RegionEU868GetPhyParam+0x274>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	61bb      	str	r3, [r7, #24]
            break;
 80144c0:	e032      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80144c2:	2300      	movs	r3, #0
 80144c4:	61bb      	str	r3, [r7, #24]
            break;
 80144c6:	e02f      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80144c8:	2300      	movs	r3, #0
 80144ca:	61bb      	str	r3, [r7, #24]
            break;
 80144cc:	e02c      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80144ce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80144d2:	61bb      	str	r3, [r7, #24]
            break;
 80144d4:	e028      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80144d6:	4b1d      	ldr	r3, [pc, #116]	; (801454c <RegionEU868GetPhyParam+0x288>)
 80144d8:	61bb      	str	r3, [r7, #24]
            break;
 80144da:	e025      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80144dc:	4b1a      	ldr	r3, [pc, #104]	; (8014548 <RegionEU868GetPhyParam+0x284>)
 80144de:	61bb      	str	r3, [r7, #24]
            break;
 80144e0:	e022      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80144e2:	2311      	movs	r3, #17
 80144e4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80144e6:	2302      	movs	r3, #2
 80144e8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80144ea:	2300      	movs	r3, #0
 80144ec:	76bb      	strb	r3, [r7, #26]
            break;
 80144ee:	e01b      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80144f0:	2303      	movs	r3, #3
 80144f2:	61bb      	str	r3, [r7, #24]
            break;
 80144f4:	e018      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80144f6:	4b14      	ldr	r3, [pc, #80]	; (8014548 <RegionEU868GetPhyParam+0x284>)
 80144f8:	61bb      	str	r3, [r7, #24]
            break;
 80144fa:	e015      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80144fc:	2303      	movs	r3, #3
 80144fe:	61bb      	str	r3, [r7, #24]
            break;
 8014500:	e012      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014508:	461a      	mov	r2, r3
 801450a:	4b11      	ldr	r3, [pc, #68]	; (8014550 <RegionEU868GetPhyParam+0x28c>)
 801450c:	5c9b      	ldrb	r3, [r3, r2]
 801450e:	61bb      	str	r3, [r7, #24]
            break;
 8014510:	e00a      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014518:	490e      	ldr	r1, [pc, #56]	; (8014554 <RegionEU868GetPhyParam+0x290>)
 801451a:	4618      	mov	r0, r3
 801451c:	f7ff fd98 	bl	8014050 <RegionCommonGetBandwidth>
 8014520:	4603      	mov	r3, r0
 8014522:	61bb      	str	r3, [r7, #24]
            break;
 8014524:	e000      	b.n	8014528 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 8014526:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	61fb      	str	r3, [r7, #28]
 801452c:	2300      	movs	r3, #0
 801452e:	69fb      	ldr	r3, [r7, #28]
}
 8014530:	4618      	mov	r0, r3
 8014532:	3720      	adds	r7, #32
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	20000dd4 	.word	0x20000dd4
 801453c:	0801acec 	.word	0x0801acec
 8014540:	0801acf4 	.word	0x0801acf4
 8014544:	fffffc18 	.word	0xfffffc18
 8014548:	33d3e608 	.word	0x33d3e608
 801454c:	4009999a 	.word	0x4009999a
 8014550:	0801acc4 	.word	0x0801acc4
 8014554:	0801accc 	.word	0x0801accc

08014558 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014558:	b590      	push	{r4, r7, lr}
 801455a:	b085      	sub	sp, #20
 801455c:	af02      	add	r7, sp, #8
 801455e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014560:	4b11      	ldr	r3, [pc, #68]	; (80145a8 <RegionEU868SetBandTxDone+0x50>)
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	4b11      	ldr	r3, [pc, #68]	; (80145ac <RegionEU868SetBandTxDone+0x54>)
 8014566:	6819      	ldr	r1, [r3, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	4618      	mov	r0, r3
 801456e:	4603      	mov	r3, r0
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	4403      	add	r3, r0
 8014574:	009b      	lsls	r3, r3, #2
 8014576:	440b      	add	r3, r1
 8014578:	3309      	adds	r3, #9
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	4619      	mov	r1, r3
 801457e:	460b      	mov	r3, r1
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	440b      	add	r3, r1
 8014584:	00db      	lsls	r3, r3, #3
 8014586:	18d0      	adds	r0, r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6899      	ldr	r1, [r3, #8]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	785c      	ldrb	r4, [r3, #1]
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	691a      	ldr	r2, [r3, #16]
 8014594:	9200      	str	r2, [sp, #0]
 8014596:	68db      	ldr	r3, [r3, #12]
 8014598:	4622      	mov	r2, r4
 801459a:	f7ff f8ef 	bl	801377c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 801459e:	bf00      	nop
 80145a0:	370c      	adds	r7, #12
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd90      	pop	{r4, r7, pc}
 80145a6:	bf00      	nop
 80145a8:	20000dd0 	.word	0x20000dd0
 80145ac:	20000dd4 	.word	0x20000dd4

080145b0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b0b0      	sub	sp, #192	; 0xc0
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80145b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80145bc:	2290      	movs	r2, #144	; 0x90
 80145be:	2100      	movs	r1, #0
 80145c0:	4618      	mov	r0, r3
 80145c2:	f005 fcc9 	bl	8019f58 <memset>
 80145c6:	2364      	movs	r3, #100	; 0x64
 80145c8:	863b      	strh	r3, [r7, #48]	; 0x30
 80145ca:	2364      	movs	r3, #100	; 0x64
 80145cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80145d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80145d4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80145d8:	230a      	movs	r3, #10
 80145da:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80145de:	2364      	movs	r3, #100	; 0x64
 80145e0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80145e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80145e8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	7a1b      	ldrb	r3, [r3, #8]
 80145f0:	2b02      	cmp	r3, #2
 80145f2:	d05c      	beq.n	80146ae <RegionEU868InitDefaults+0xfe>
 80145f4:	2b02      	cmp	r3, #2
 80145f6:	dc69      	bgt.n	80146cc <RegionEU868InitDefaults+0x11c>
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d002      	beq.n	8014602 <RegionEU868InitDefaults+0x52>
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d03e      	beq.n	801467e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8014600:	e064      	b.n	80146cc <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d061      	beq.n	80146ce <RegionEU868InitDefaults+0x11e>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d05d      	beq.n	80146ce <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	4a2f      	ldr	r2, [pc, #188]	; (80146d4 <RegionEU868InitDefaults+0x124>)
 8014618:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	4a2e      	ldr	r2, [pc, #184]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014620:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8014622:	4b2c      	ldr	r3, [pc, #176]	; (80146d4 <RegionEU868InitDefaults+0x124>)
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	4618      	mov	r0, r3
 8014628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801462c:	2290      	movs	r2, #144	; 0x90
 801462e:	4619      	mov	r1, r3
 8014630:	f000 ffb3 	bl	801559a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8014634:	4b28      	ldr	r3, [pc, #160]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4a28      	ldr	r2, [pc, #160]	; (80146dc <RegionEU868InitDefaults+0x12c>)
 801463a:	ca07      	ldmia	r2, {r0, r1, r2}
 801463c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8014640:	4b25      	ldr	r3, [pc, #148]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	4a26      	ldr	r2, [pc, #152]	; (80146e0 <RegionEU868InitDefaults+0x130>)
 8014646:	330c      	adds	r3, #12
 8014648:	ca07      	ldmia	r2, {r0, r1, r2}
 801464a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801464e:	4b22      	ldr	r3, [pc, #136]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4a24      	ldr	r2, [pc, #144]	; (80146e4 <RegionEU868InitDefaults+0x134>)
 8014654:	3318      	adds	r3, #24
 8014656:	ca07      	ldmia	r2, {r0, r1, r2}
 8014658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801465c:	4b1e      	ldr	r3, [pc, #120]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2207      	movs	r2, #7
 8014662:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014666:	4b1c      	ldr	r3, [pc, #112]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801466e:	4b1a      	ldr	r3, [pc, #104]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	33c2      	adds	r3, #194	; 0xc2
 8014674:	2201      	movs	r2, #1
 8014676:	4619      	mov	r1, r3
 8014678:	f7ff f85a 	bl	8013730 <RegionCommonChanMaskCopy>
 801467c:	e027      	b.n	80146ce <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801467e:	4b16      	ldr	r3, [pc, #88]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2200      	movs	r2, #0
 8014684:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014686:	4b14      	ldr	r3, [pc, #80]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2200      	movs	r2, #0
 801468c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801468e:	4b12      	ldr	r3, [pc, #72]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2200      	movs	r2, #0
 8014694:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014696:	4b10      	ldr	r3, [pc, #64]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801469e:	4b0e      	ldr	r3, [pc, #56]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	33c2      	adds	r3, #194	; 0xc2
 80146a4:	2201      	movs	r2, #1
 80146a6:	4619      	mov	r1, r3
 80146a8:	f7ff f842 	bl	8013730 <RegionCommonChanMaskCopy>
            break;
 80146ac:	e00f      	b.n	80146ce <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80146ae:	4b0a      	ldr	r3, [pc, #40]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80146b6:	4b08      	ldr	r3, [pc, #32]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80146be:	4b06      	ldr	r3, [pc, #24]	; (80146d8 <RegionEU868InitDefaults+0x128>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	430a      	orrs	r2, r1
 80146c4:	b292      	uxth	r2, r2
 80146c6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 80146ca:	e000      	b.n	80146ce <RegionEU868InitDefaults+0x11e>
            break;
 80146cc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80146ce:	37c0      	adds	r7, #192	; 0xc0
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	20000dd0 	.word	0x20000dd0
 80146d8:	20000dd4 	.word	0x20000dd4
 80146dc:	0801a758 	.word	0x0801a758
 80146e0:	0801a764 	.word	0x0801a764
 80146e4:	0801a770 	.word	0x0801a770

080146e8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b084      	sub	sp, #16
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80146f4:	78fb      	ldrb	r3, [r7, #3]
 80146f6:	2b0f      	cmp	r3, #15
 80146f8:	d86c      	bhi.n	80147d4 <RegionEU868Verify+0xec>
 80146fa:	a201      	add	r2, pc, #4	; (adr r2, 8014700 <RegionEU868Verify+0x18>)
 80146fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014700:	08014741 	.word	0x08014741
 8014704:	080147d5 	.word	0x080147d5
 8014708:	080147d5 	.word	0x080147d5
 801470c:	080147d5 	.word	0x080147d5
 8014710:	080147d5 	.word	0x080147d5
 8014714:	08014759 	.word	0x08014759
 8014718:	08014777 	.word	0x08014777
 801471c:	08014795 	.word	0x08014795
 8014720:	080147d5 	.word	0x080147d5
 8014724:	080147b3 	.word	0x080147b3
 8014728:	080147b3 	.word	0x080147b3
 801472c:	080147d5 	.word	0x080147d5
 8014730:	080147d5 	.word	0x080147d5
 8014734:	080147d5 	.word	0x080147d5
 8014738:	080147d5 	.word	0x080147d5
 801473c:	080147d1 	.word	0x080147d1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8014740:	2300      	movs	r3, #0
 8014742:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	f107 020f 	add.w	r2, r7, #15
 801474c:	4611      	mov	r1, r2
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff fcf2 	bl	8014138 <VerifyRfFreq>
 8014754:	4603      	mov	r3, r0
 8014756:	e03e      	b.n	80147d6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f993 3000 	ldrsb.w	r3, [r3]
 801475e:	2207      	movs	r2, #7
 8014760:	2100      	movs	r1, #0
 8014762:	4618      	mov	r0, r3
 8014764:	f7fe ff67 	bl	8013636 <RegionCommonValueInRange>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	bf14      	ite	ne
 801476e:	2301      	movne	r3, #1
 8014770:	2300      	moveq	r3, #0
 8014772:	b2db      	uxtb	r3, r3
 8014774:	e02f      	b.n	80147d6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f993 3000 	ldrsb.w	r3, [r3]
 801477c:	2205      	movs	r2, #5
 801477e:	2100      	movs	r1, #0
 8014780:	4618      	mov	r0, r3
 8014782:	f7fe ff58 	bl	8013636 <RegionCommonValueInRange>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	bf14      	ite	ne
 801478c:	2301      	movne	r3, #1
 801478e:	2300      	moveq	r3, #0
 8014790:	b2db      	uxtb	r3, r3
 8014792:	e020      	b.n	80147d6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f993 3000 	ldrsb.w	r3, [r3]
 801479a:	2207      	movs	r2, #7
 801479c:	2100      	movs	r1, #0
 801479e:	4618      	mov	r0, r3
 80147a0:	f7fe ff49 	bl	8013636 <RegionCommonValueInRange>
 80147a4:	4603      	mov	r3, r0
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	bf14      	ite	ne
 80147aa:	2301      	movne	r3, #1
 80147ac:	2300      	moveq	r3, #0
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	e011      	b.n	80147d6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f993 3000 	ldrsb.w	r3, [r3]
 80147b8:	2207      	movs	r2, #7
 80147ba:	2100      	movs	r1, #0
 80147bc:	4618      	mov	r0, r3
 80147be:	f7fe ff3a 	bl	8013636 <RegionCommonValueInRange>
 80147c2:	4603      	mov	r3, r0
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	bf14      	ite	ne
 80147c8:	2301      	movne	r3, #1
 80147ca:	2300      	moveq	r3, #0
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	e002      	b.n	80147d6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80147d0:	2301      	movs	r3, #1
 80147d2:	e000      	b.n	80147d6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80147d4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop

080147e0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b08a      	sub	sp, #40	; 0x28
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80147e8:	2350      	movs	r3, #80	; 0x50
 80147ea:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	791b      	ldrb	r3, [r3, #4]
 80147f2:	2b10      	cmp	r3, #16
 80147f4:	d162      	bne.n	80148bc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	330f      	adds	r3, #15
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d15e      	bne.n	80148c0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014802:	2300      	movs	r3, #0
 8014804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014808:	2303      	movs	r3, #3
 801480a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801480e:	e050      	b.n	80148b2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8014810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014814:	2b07      	cmp	r3, #7
 8014816:	d824      	bhi.n	8014862 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681a      	ldr	r2, [r3, #0]
 801481c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014820:	4413      	add	r3, r2
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014826:	69ba      	ldr	r2, [r7, #24]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6819      	ldr	r1, [r3, #0]
 801482c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014830:	3301      	adds	r3, #1
 8014832:	440b      	add	r3, r1
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	021b      	lsls	r3, r3, #8
 8014838:	4313      	orrs	r3, r2
 801483a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801483c:	69ba      	ldr	r2, [r7, #24]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6819      	ldr	r1, [r3, #0]
 8014842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014846:	3302      	adds	r3, #2
 8014848:	440b      	add	r3, r1
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	041b      	lsls	r3, r3, #16
 801484e:	4313      	orrs	r3, r2
 8014850:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	2264      	movs	r2, #100	; 0x64
 8014856:	fb02 f303 	mul.w	r3, r2, r3
 801485a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801485c:	2300      	movs	r3, #0
 801485e:	61fb      	str	r3, [r7, #28]
 8014860:	e006      	b.n	8014870 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014866:	2300      	movs	r3, #0
 8014868:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801486c:	2300      	movs	r3, #0
 801486e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014870:	69bb      	ldr	r3, [r7, #24]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d00b      	beq.n	801488e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014876:	f107 0318 	add.w	r3, r7, #24
 801487a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801487c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014880:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8014882:	f107 0310 	add.w	r3, r7, #16
 8014886:	4618      	mov	r0, r3
 8014888:	f000 fd0e 	bl	80152a8 <RegionEU868ChannelAdd>
 801488c:	e007      	b.n	801489e <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801488e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014892:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8014894:	f107 030c 	add.w	r3, r7, #12
 8014898:	4618      	mov	r0, r3
 801489a:	f000 fda7 	bl	80153ec <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801489e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148a2:	3303      	adds	r3, #3
 80148a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148ac:	3301      	adds	r3, #1
 80148ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80148b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80148b6:	2b0f      	cmp	r3, #15
 80148b8:	d9aa      	bls.n	8014810 <RegionEU868ApplyCFList+0x30>
 80148ba:	e002      	b.n	80148c2 <RegionEU868ApplyCFList+0xe2>
        return;
 80148bc:	bf00      	nop
 80148be:	e000      	b.n	80148c2 <RegionEU868ApplyCFList+0xe2>
        return;
 80148c0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80148c2:	3728      	adds	r7, #40	; 0x28
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	791b      	ldrb	r3, [r3, #4]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d002      	beq.n	80148de <RegionEU868ChanMaskSet+0x16>
 80148d8:	2b01      	cmp	r3, #1
 80148da:	d00b      	beq.n	80148f4 <RegionEU868ChanMaskSet+0x2c>
 80148dc:	e015      	b.n	801490a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80148de:	4b0e      	ldr	r3, [pc, #56]	; (8014918 <RegionEU868ChanMaskSet+0x50>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2201      	movs	r2, #1
 80148ec:	4619      	mov	r1, r3
 80148ee:	f7fe ff1f 	bl	8013730 <RegionCommonChanMaskCopy>
            break;
 80148f2:	e00c      	b.n	801490e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80148f4:	4b08      	ldr	r3, [pc, #32]	; (8014918 <RegionEU868ChanMaskSet+0x50>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	2201      	movs	r2, #1
 8014902:	4619      	mov	r1, r3
 8014904:	f7fe ff14 	bl	8013730 <RegionCommonChanMaskCopy>
            break;
 8014908:	e001      	b.n	801490e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801490a:	2300      	movs	r3, #0
 801490c:	e000      	b.n	8014910 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801490e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}
 8014918:	20000dd4 	.word	0x20000dd4

0801491c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b088      	sub	sp, #32
 8014920:	af02      	add	r7, sp, #8
 8014922:	60ba      	str	r2, [r7, #8]
 8014924:	607b      	str	r3, [r7, #4]
 8014926:	4603      	mov	r3, r0
 8014928:	73fb      	strb	r3, [r7, #15]
 801492a:	460b      	mov	r3, r1
 801492c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801492e:	2300      	movs	r3, #0
 8014930:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8014932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014936:	2b07      	cmp	r3, #7
 8014938:	bfa8      	it	ge
 801493a:	2307      	movge	r3, #7
 801493c:	b25a      	sxtb	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014948:	491e      	ldr	r1, [pc, #120]	; (80149c4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801494a:	4618      	mov	r0, r3
 801494c:	f7ff fb80 	bl	8014050 <RegionCommonGetBandwidth>
 8014950:	4603      	mov	r3, r0
 8014952:	b2da      	uxtb	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801495e:	2b07      	cmp	r3, #7
 8014960:	d10a      	bne.n	8014978 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014968:	461a      	mov	r2, r3
 801496a:	4b17      	ldr	r3, [pc, #92]	; (80149c8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801496c:	5c9b      	ldrb	r3, [r3, r2]
 801496e:	4618      	mov	r0, r3
 8014970:	f7ff f902 	bl	8013b78 <RegionCommonComputeSymbolTimeFsk>
 8014974:	6178      	str	r0, [r7, #20]
 8014976:	e011      	b.n	801499c <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801497e:	461a      	mov	r2, r3
 8014980:	4b11      	ldr	r3, [pc, #68]	; (80149c8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8014982:	5c9a      	ldrb	r2, [r3, r2]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801498a:	4619      	mov	r1, r3
 801498c:	4b0d      	ldr	r3, [pc, #52]	; (80149c4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801498e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014992:	4619      	mov	r1, r3
 8014994:	4610      	mov	r0, r2
 8014996:	f7ff f8d9 	bl	8013b4c <RegionCommonComputeSymbolTimeLoRa>
 801499a:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801499c:	4b0b      	ldr	r3, [pc, #44]	; (80149cc <RegionEU868ComputeRxWindowParameters+0xb0>)
 801499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149a0:	4798      	blx	r3
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	3308      	adds	r3, #8
 80149a6:	687a      	ldr	r2, [r7, #4]
 80149a8:	320c      	adds	r2, #12
 80149aa:	7bb9      	ldrb	r1, [r7, #14]
 80149ac:	9201      	str	r2, [sp, #4]
 80149ae:	9300      	str	r3, [sp, #0]
 80149b0:	4603      	mov	r3, r0
 80149b2:	68ba      	ldr	r2, [r7, #8]
 80149b4:	6978      	ldr	r0, [r7, #20]
 80149b6:	f7ff f8ef 	bl	8013b98 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80149ba:	bf00      	nop
 80149bc:	3718      	adds	r7, #24
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	0801accc 	.word	0x0801accc
 80149c8:	0801acc4 	.word	0x0801acc4
 80149cc:	0801acfc 	.word	0x0801acfc

080149d0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80149d0:	b5b0      	push	{r4, r5, r7, lr}
 80149d2:	b090      	sub	sp, #64	; 0x40
 80149d4:	af0a      	add	r7, sp, #40	; 0x28
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	785b      	ldrb	r3, [r3, #1]
 80149de:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80149e0:	2300      	movs	r3, #0
 80149e2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80149e4:	2300      	movs	r3, #0
 80149e6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80149ee:	4b5a      	ldr	r3, [pc, #360]	; (8014b58 <RegionEU868RxConfig+0x188>)
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	4798      	blx	r3
 80149f4:	4603      	mov	r3, r0
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d001      	beq.n	80149fe <RegionEU868RxConfig+0x2e>
    {
        return false;
 80149fa:	2300      	movs	r3, #0
 80149fc:	e0a8      	b.n	8014b50 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	7cdb      	ldrb	r3, [r3, #19]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d126      	bne.n	8014a54 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014a06:	4b55      	ldr	r3, [pc, #340]	; (8014b5c <RegionEU868RxConfig+0x18c>)
 8014a08:	681a      	ldr	r2, [r3, #0]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	4619      	mov	r1, r3
 8014a10:	460b      	mov	r3, r1
 8014a12:	005b      	lsls	r3, r3, #1
 8014a14:	440b      	add	r3, r1
 8014a16:	009b      	lsls	r3, r3, #2
 8014a18:	4413      	add	r3, r2
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014a1e:	4b4f      	ldr	r3, [pc, #316]	; (8014b5c <RegionEU868RxConfig+0x18c>)
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	4619      	mov	r1, r3
 8014a28:	460b      	mov	r3, r1
 8014a2a:	005b      	lsls	r3, r3, #1
 8014a2c:	440b      	add	r3, r1
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	4413      	add	r3, r2
 8014a32:	3304      	adds	r3, #4
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00c      	beq.n	8014a54 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014a3a:	4b48      	ldr	r3, [pc, #288]	; (8014b5c <RegionEU868RxConfig+0x18c>)
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	4619      	mov	r1, r3
 8014a44:	460b      	mov	r3, r1
 8014a46:	005b      	lsls	r3, r3, #1
 8014a48:	440b      	add	r3, r1
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4413      	add	r3, r2
 8014a4e:	3304      	adds	r3, #4
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8014a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a58:	4a41      	ldr	r2, [pc, #260]	; (8014b60 <RegionEU868RxConfig+0x190>)
 8014a5a:	5cd3      	ldrb	r3, [r2, r3]
 8014a5c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014a5e:	4b3e      	ldr	r3, [pc, #248]	; (8014b58 <RegionEU868RxConfig+0x188>)
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	6938      	ldr	r0, [r7, #16]
 8014a64:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a6a:	2b07      	cmp	r3, #7
 8014a6c:	d128      	bne.n	8014ac0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014a72:	4b39      	ldr	r3, [pc, #228]	; (8014b58 <RegionEU868RxConfig+0x188>)
 8014a74:	699c      	ldr	r4, [r3, #24]
 8014a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a7e:	fb02 f303 	mul.w	r3, r2, r3
 8014a82:	4619      	mov	r1, r3
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	689b      	ldr	r3, [r3, #8]
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	7c92      	ldrb	r2, [r2, #18]
 8014a8e:	7df8      	ldrb	r0, [r7, #23]
 8014a90:	9209      	str	r2, [sp, #36]	; 0x24
 8014a92:	2200      	movs	r2, #0
 8014a94:	9208      	str	r2, [sp, #32]
 8014a96:	2200      	movs	r2, #0
 8014a98:	9207      	str	r2, [sp, #28]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	9206      	str	r2, [sp, #24]
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	9205      	str	r2, [sp, #20]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	9204      	str	r2, [sp, #16]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	9203      	str	r2, [sp, #12]
 8014aaa:	9302      	str	r3, [sp, #8]
 8014aac:	2305      	movs	r3, #5
 8014aae:	9301      	str	r3, [sp, #4]
 8014ab0:	4b2c      	ldr	r3, [pc, #176]	; (8014b64 <RegionEU868RxConfig+0x194>)
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	460a      	mov	r2, r1
 8014ab8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014abc:	47a0      	blx	r4
 8014abe:	e024      	b.n	8014b0a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014ac4:	4b24      	ldr	r3, [pc, #144]	; (8014b58 <RegionEU868RxConfig+0x188>)
 8014ac6:	699c      	ldr	r4, [r3, #24]
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	789b      	ldrb	r3, [r3, #2]
 8014acc:	461d      	mov	r5, r3
 8014ace:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	689b      	ldr	r3, [r3, #8]
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	7c92      	ldrb	r2, [r2, #18]
 8014adc:	7df8      	ldrb	r0, [r7, #23]
 8014ade:	9209      	str	r2, [sp, #36]	; 0x24
 8014ae0:	2201      	movs	r2, #1
 8014ae2:	9208      	str	r2, [sp, #32]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	9207      	str	r2, [sp, #28]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	9206      	str	r2, [sp, #24]
 8014aec:	2200      	movs	r2, #0
 8014aee:	9205      	str	r2, [sp, #20]
 8014af0:	2200      	movs	r2, #0
 8014af2:	9204      	str	r2, [sp, #16]
 8014af4:	2200      	movs	r2, #0
 8014af6:	9203      	str	r2, [sp, #12]
 8014af8:	9302      	str	r3, [sp, #8]
 8014afa:	2308      	movs	r3, #8
 8014afc:	9301      	str	r3, [sp, #4]
 8014afe:	2300      	movs	r3, #0
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	2301      	movs	r3, #1
 8014b04:	460a      	mov	r2, r1
 8014b06:	4629      	mov	r1, r5
 8014b08:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	7c5b      	ldrb	r3, [r3, #17]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d005      	beq.n	8014b1e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8014b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b16:	4a14      	ldr	r2, [pc, #80]	; (8014b68 <RegionEU868RxConfig+0x198>)
 8014b18:	5cd3      	ldrb	r3, [r2, r3]
 8014b1a:	75bb      	strb	r3, [r7, #22]
 8014b1c:	e004      	b.n	8014b28 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8014b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b22:	4a12      	ldr	r2, [pc, #72]	; (8014b6c <RegionEU868RxConfig+0x19c>)
 8014b24:	5cd3      	ldrb	r3, [r2, r3]
 8014b26:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014b28:	4b0b      	ldr	r3, [pc, #44]	; (8014b58 <RegionEU868RxConfig+0x188>)
 8014b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b2c:	7dba      	ldrb	r2, [r7, #22]
 8014b2e:	320d      	adds	r2, #13
 8014b30:	b2d1      	uxtb	r1, r2
 8014b32:	7dfa      	ldrb	r2, [r7, #23]
 8014b34:	4610      	mov	r0, r2
 8014b36:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	7cdb      	ldrb	r3, [r3, #19]
 8014b3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014b40:	6939      	ldr	r1, [r7, #16]
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7ff faa2 	bl	801408c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	7bfa      	ldrb	r2, [r7, #15]
 8014b4c:	701a      	strb	r2, [r3, #0]
    return true;
 8014b4e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3718      	adds	r7, #24
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bdb0      	pop	{r4, r5, r7, pc}
 8014b58:	0801acfc 	.word	0x0801acfc
 8014b5c:	20000dd4 	.word	0x20000dd4
 8014b60:	0801acc4 	.word	0x0801acc4
 8014b64:	00014585 	.word	0x00014585
 8014b68:	0801acf4 	.word	0x0801acf4
 8014b6c:	0801acec 	.word	0x0801acec

08014b70 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014b70:	b590      	push	{r4, r7, lr}
 8014b72:	b093      	sub	sp, #76	; 0x4c
 8014b74:	af0a      	add	r7, sp, #40	; 0x28
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	60b9      	str	r1, [r7, #8]
 8014b7a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b82:	461a      	mov	r2, r3
 8014b84:	4b5d      	ldr	r3, [pc, #372]	; (8014cfc <RegionEU868TxConfig+0x18c>)
 8014b86:	5c9b      	ldrb	r3, [r3, r2]
 8014b88:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014b90:	4b5b      	ldr	r3, [pc, #364]	; (8014d00 <RegionEU868TxConfig+0x190>)
 8014b92:	681a      	ldr	r2, [r3, #0]
 8014b94:	4b5b      	ldr	r3, [pc, #364]	; (8014d04 <RegionEU868TxConfig+0x194>)
 8014b96:	6819      	ldr	r1, [r3, #0]
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	461c      	mov	r4, r3
 8014b9e:	4623      	mov	r3, r4
 8014ba0:	005b      	lsls	r3, r3, #1
 8014ba2:	4423      	add	r3, r4
 8014ba4:	009b      	lsls	r3, r3, #2
 8014ba6:	440b      	add	r3, r1
 8014ba8:	3309      	adds	r3, #9
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	4619      	mov	r1, r3
 8014bae:	460b      	mov	r3, r1
 8014bb0:	005b      	lsls	r3, r3, #1
 8014bb2:	440b      	add	r3, r1
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	4413      	add	r3, r2
 8014bb8:	3302      	adds	r3, #2
 8014bba:	f993 3000 	ldrsb.w	r3, [r3]
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	f7ff fa31 	bl	8014026 <RegionCommonLimitTxPower>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014bce:	494e      	ldr	r1, [pc, #312]	; (8014d08 <RegionEU868TxConfig+0x198>)
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7ff fa3d 	bl	8014050 <RegionCommonGetBandwidth>
 8014bd6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	6859      	ldr	r1, [r3, #4]
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	689a      	ldr	r2, [r3, #8]
 8014be4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7ff f88d 	bl	8013d08 <RegionCommonComputeTxPower>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8014bf2:	4b46      	ldr	r3, [pc, #280]	; (8014d0c <RegionEU868TxConfig+0x19c>)
 8014bf4:	68da      	ldr	r2, [r3, #12]
 8014bf6:	4b43      	ldr	r3, [pc, #268]	; (8014d04 <RegionEU868TxConfig+0x194>)
 8014bf8:	6819      	ldr	r1, [r3, #0]
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	4603      	mov	r3, r0
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4403      	add	r3, r0
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	440b      	add	r3, r1
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c16:	2b07      	cmp	r3, #7
 8014c18:	d124      	bne.n	8014c64 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8014c1e:	4b3b      	ldr	r3, [pc, #236]	; (8014d0c <RegionEU868TxConfig+0x19c>)
 8014c20:	69dc      	ldr	r4, [r3, #28]
 8014c22:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c2a:	fb02 f303 	mul.w	r3, r2, r3
 8014c2e:	461a      	mov	r2, r3
 8014c30:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014c34:	7ff8      	ldrb	r0, [r7, #31]
 8014c36:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8014c3a:	9308      	str	r3, [sp, #32]
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	9307      	str	r3, [sp, #28]
 8014c40:	2300      	movs	r3, #0
 8014c42:	9306      	str	r3, [sp, #24]
 8014c44:	2300      	movs	r3, #0
 8014c46:	9305      	str	r3, [sp, #20]
 8014c48:	2301      	movs	r3, #1
 8014c4a:	9304      	str	r3, [sp, #16]
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	9303      	str	r3, [sp, #12]
 8014c50:	2305      	movs	r3, #5
 8014c52:	9302      	str	r3, [sp, #8]
 8014c54:	2300      	movs	r3, #0
 8014c56:	9301      	str	r3, [sp, #4]
 8014c58:	9200      	str	r2, [sp, #0]
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8014c60:	47a0      	blx	r4
 8014c62:	e01d      	b.n	8014ca0 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8014c64:	2301      	movs	r3, #1
 8014c66:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8014c68:	4b28      	ldr	r3, [pc, #160]	; (8014d0c <RegionEU868TxConfig+0x19c>)
 8014c6a:	69dc      	ldr	r4, [r3, #28]
 8014c6c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014c70:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014c74:	7ff8      	ldrb	r0, [r7, #31]
 8014c76:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8014c7a:	9208      	str	r2, [sp, #32]
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	9207      	str	r2, [sp, #28]
 8014c80:	2200      	movs	r2, #0
 8014c82:	9206      	str	r2, [sp, #24]
 8014c84:	2200      	movs	r2, #0
 8014c86:	9205      	str	r2, [sp, #20]
 8014c88:	2201      	movs	r2, #1
 8014c8a:	9204      	str	r2, [sp, #16]
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	9203      	str	r2, [sp, #12]
 8014c90:	2208      	movs	r2, #8
 8014c92:	9202      	str	r2, [sp, #8]
 8014c94:	2201      	movs	r2, #1
 8014c96:	9201      	str	r2, [sp, #4]
 8014c98:	9300      	str	r3, [sp, #0]
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8014ca0:	4b18      	ldr	r3, [pc, #96]	; (8014d04 <RegionEU868TxConfig+0x194>)
 8014ca2:	681a      	ldr	r2, [r3, #0]
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	4619      	mov	r1, r3
 8014caa:	460b      	mov	r3, r1
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	440b      	add	r3, r1
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	4413      	add	r3, r2
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	4610      	mov	r0, r2
 8014cc0:	f7ff fa22 	bl	8014108 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	899b      	ldrh	r3, [r3, #12]
 8014cce:	4619      	mov	r1, r3
 8014cd0:	4610      	mov	r0, r2
 8014cd2:	f7ff faa7 	bl	8014224 <GetTimeOnAir>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8014cdc:	4b0b      	ldr	r3, [pc, #44]	; (8014d0c <RegionEU868TxConfig+0x19c>)
 8014cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ce0:	68fa      	ldr	r2, [r7, #12]
 8014ce2:	8992      	ldrh	r2, [r2, #12]
 8014ce4:	b2d1      	uxtb	r1, r2
 8014ce6:	7ffa      	ldrb	r2, [r7, #31]
 8014ce8:	4610      	mov	r0, r2
 8014cea:	4798      	blx	r3

    *txPower = txPowerLimited;
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	7f7a      	ldrb	r2, [r7, #29]
 8014cf0:	701a      	strb	r2, [r3, #0]
    return true;
 8014cf2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3724      	adds	r7, #36	; 0x24
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd90      	pop	{r4, r7, pc}
 8014cfc:	0801acc4 	.word	0x0801acc4
 8014d00:	20000dd0 	.word	0x20000dd0
 8014d04:	20000dd4 	.word	0x20000dd4
 8014d08:	0801accc 	.word	0x0801accc
 8014d0c:	0801acfc 	.word	0x0801acfc

08014d10 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014d10:	b590      	push	{r4, r7, lr}
 8014d12:	b093      	sub	sp, #76	; 0x4c
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
 8014d1c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014d1e:	2307      	movs	r3, #7
 8014d20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014d24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014d28:	2200      	movs	r2, #0
 8014d2a:	601a      	str	r2, [r3, #0]
 8014d2c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8014d34:	2300      	movs	r3, #0
 8014d36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014d3e:	e085      	b.n	8014e4c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	685a      	ldr	r2, [r3, #4]
 8014d44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014d48:	4413      	add	r3, r2
 8014d4a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014d4e:	4611      	mov	r1, r2
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7fe fe31 	bl	80139b8 <RegionCommonParseLinkAdrReq>
 8014d56:	4603      	mov	r3, r0
 8014d58:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8014d5c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d07b      	beq.n	8014e5c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014d64:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8014d68:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8014d6c:	4413      	add	r3, r2
 8014d6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014d72:	2307      	movs	r3, #7
 8014d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8014d78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014d7c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8014d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d109      	bne.n	8014d9a <RegionEU868LinkAdrReq+0x8a>
 8014d86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d106      	bne.n	8014d9a <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8014d8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014d90:	f023 0301 	bic.w	r3, r3, #1
 8014d94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014d98:	e058      	b.n	8014e4c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014d9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <RegionEU868LinkAdrReq+0x9a>
 8014da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014da6:	2b05      	cmp	r3, #5
 8014da8:	d903      	bls.n	8014db2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8014daa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014dae:	2b06      	cmp	r3, #6
 8014db0:	d906      	bls.n	8014dc0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8014db2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014db6:	f023 0301 	bic.w	r3, r3, #1
 8014dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8014dbe:	e045      	b.n	8014e4c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8014dc6:	e03d      	b.n	8014e44 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8014dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014dcc:	2b06      	cmp	r3, #6
 8014dce:	d118      	bne.n	8014e02 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8014dd0:	4b5f      	ldr	r3, [pc, #380]	; (8014f50 <RegionEU868LinkAdrReq+0x240>)
 8014dd2:	6819      	ldr	r1, [r3, #0]
 8014dd4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8014dd8:	4613      	mov	r3, r2
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	4413      	add	r3, r2
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	440b      	add	r3, r1
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d028      	beq.n	8014e3a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8014de8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014dec:	2201      	movs	r2, #1
 8014dee:	fa02 f303 	lsl.w	r3, r2, r3
 8014df2:	b21a      	sxth	r2, r3
 8014df4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014df6:	b21b      	sxth	r3, r3
 8014df8:	4313      	orrs	r3, r2
 8014dfa:	b21b      	sxth	r3, r3
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014e00:	e01b      	b.n	8014e3a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014e02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e04:	461a      	mov	r2, r3
 8014e06:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014e0a:	fa42 f303 	asr.w	r3, r2, r3
 8014e0e:	f003 0301 	and.w	r3, r3, #1
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d011      	beq.n	8014e3a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8014e16:	4b4e      	ldr	r3, [pc, #312]	; (8014f50 <RegionEU868LinkAdrReq+0x240>)
 8014e18:	6819      	ldr	r1, [r3, #0]
 8014e1a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8014e1e:	4613      	mov	r3, r2
 8014e20:	005b      	lsls	r3, r3, #1
 8014e22:	4413      	add	r3, r2
 8014e24:	009b      	lsls	r3, r3, #2
 8014e26:	440b      	add	r3, r1
 8014e28:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d105      	bne.n	8014e3a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8014e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e32:	f023 0301 	bic.w	r3, r3, #1
 8014e36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8014e3a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014e3e:	3301      	adds	r3, #1
 8014e40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8014e44:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8014e48:	2b0f      	cmp	r3, #15
 8014e4a:	d9bd      	bls.n	8014dc8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	7a1b      	ldrb	r3, [r3, #8]
 8014e50:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8014e54:	429a      	cmp	r2, r3
 8014e56:	f4ff af73 	bcc.w	8014d40 <RegionEU868LinkAdrReq+0x30>
 8014e5a:	e000      	b.n	8014e5e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8014e5c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014e5e:	2302      	movs	r3, #2
 8014e60:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	7a5b      	ldrb	r3, [r3, #9]
 8014e68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8014e6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7ff fa27 	bl	80142c4 <RegionEU868GetPhyParam>
 8014e76:	4603      	mov	r3, r0
 8014e78:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8014e7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014e7e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	7a9b      	ldrb	r3, [r3, #10]
 8014e84:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014e86:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8014e8a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8014e8c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8014e90:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014e92:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014e96:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8014e9e:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014ea6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	7b5b      	ldrb	r3, [r3, #13]
 8014eac:	b25b      	sxtb	r3, r3
 8014eae:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8014eb0:	2310      	movs	r3, #16
 8014eb2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8014eb4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8014eb8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ebc:	b25b      	sxtb	r3, r3
 8014ebe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8014ec2:	2307      	movs	r3, #7
 8014ec4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8014ec8:	4b21      	ldr	r3, [pc, #132]	; (8014f50 <RegionEU868LinkAdrReq+0x240>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8014ece:	2307      	movs	r3, #7
 8014ed0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014ee0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8014ee4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014ee8:	1c9a      	adds	r2, r3, #2
 8014eea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014eee:	1c59      	adds	r1, r3, #1
 8014ef0:	f107 0010 	add.w	r0, r7, #16
 8014ef4:	4623      	mov	r3, r4
 8014ef6:	f7fe fdb0 	bl	8013a5a <RegionCommonLinkAdrReqVerifyParams>
 8014efa:	4603      	mov	r3, r0
 8014efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014f00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014f04:	2b07      	cmp	r3, #7
 8014f06:	d10c      	bne.n	8014f22 <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8014f08:	4b11      	ldr	r3, [pc, #68]	; (8014f50 <RegionEU868LinkAdrReq+0x240>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	33c0      	adds	r3, #192	; 0xc0
 8014f0e:	2202      	movs	r2, #2
 8014f10:	2100      	movs	r1, #0
 8014f12:	4618      	mov	r0, r3
 8014f14:	f000 fb7c 	bl	8015610 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8014f18:	4b0d      	ldr	r3, [pc, #52]	; (8014f50 <RegionEU868LinkAdrReq+0x240>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f1e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014f22:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8014f26:	68bb      	ldr	r3, [r7, #8]
 8014f28:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014f2a:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014f32:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f3c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8014f40:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8014f42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	374c      	adds	r7, #76	; 0x4c
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd90      	pop	{r4, r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	20000dd4 	.word	0x20000dd4

08014f54 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014f5c:	2307      	movs	r3, #7
 8014f5e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8014f60:	2300      	movs	r3, #0
 8014f62:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	f107 020e 	add.w	r2, r7, #14
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7ff f8e2 	bl	8014138 <VerifyRfFreq>
 8014f74:	4603      	mov	r3, r0
 8014f76:	f083 0301 	eor.w	r3, r3, #1
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d003      	beq.n	8014f88 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8014f80:	7bfb      	ldrb	r3, [r7, #15]
 8014f82:	f023 0301 	bic.w	r3, r3, #1
 8014f86:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8014f8e:	2207      	movs	r2, #7
 8014f90:	2100      	movs	r1, #0
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fe fb4f 	bl	8013636 <RegionCommonValueInRange>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d103      	bne.n	8014fa6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8014f9e:	7bfb      	ldrb	r3, [r7, #15]
 8014fa0:	f023 0302 	bic.w	r3, r3, #2
 8014fa4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014fac:	2205      	movs	r2, #5
 8014fae:	2100      	movs	r1, #0
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7fe fb40 	bl	8013636 <RegionCommonValueInRange>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d103      	bne.n	8014fc4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014fbc:	7bfb      	ldrb	r3, [r7, #15]
 8014fbe:	f023 0304 	bic.w	r3, r3, #4
 8014fc2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8014fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}
	...

08014fd0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8014fd8:	2303      	movs	r3, #3
 8014fda:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d114      	bne.n	8015010 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8014ff0:	f107 0308 	add.w	r3, r7, #8
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f000 f9f9 	bl	80153ec <RegionEU868ChannelsRemove>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	f083 0301 	eor.w	r3, r3, #1
 8015000:	b2db      	uxtb	r3, r3
 8015002:	2b00      	cmp	r3, #0
 8015004:	d03b      	beq.n	801507e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015006:	7dfb      	ldrb	r3, [r7, #23]
 8015008:	f023 0303 	bic.w	r3, r3, #3
 801500c:	75fb      	strb	r3, [r7, #23]
 801500e:	e036      	b.n	801507e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801501c:	b2db      	uxtb	r3, r3
 801501e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015020:	f107 030c 	add.w	r3, r7, #12
 8015024:	4618      	mov	r0, r3
 8015026:	f000 f93f 	bl	80152a8 <RegionEU868ChannelAdd>
 801502a:	4603      	mov	r3, r0
 801502c:	2b06      	cmp	r3, #6
 801502e:	d820      	bhi.n	8015072 <RegionEU868NewChannelReq+0xa2>
 8015030:	a201      	add	r2, pc, #4	; (adr r2, 8015038 <RegionEU868NewChannelReq+0x68>)
 8015032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015036:	bf00      	nop
 8015038:	0801507d 	.word	0x0801507d
 801503c:	08015073 	.word	0x08015073
 8015040:	08015073 	.word	0x08015073
 8015044:	08015073 	.word	0x08015073
 8015048:	08015055 	.word	0x08015055
 801504c:	0801505f 	.word	0x0801505f
 8015050:	08015069 	.word	0x08015069
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015054:	7dfb      	ldrb	r3, [r7, #23]
 8015056:	f023 0301 	bic.w	r3, r3, #1
 801505a:	75fb      	strb	r3, [r7, #23]
                break;
 801505c:	e00f      	b.n	801507e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801505e:	7dfb      	ldrb	r3, [r7, #23]
 8015060:	f023 0302 	bic.w	r3, r3, #2
 8015064:	75fb      	strb	r3, [r7, #23]
                break;
 8015066:	e00a      	b.n	801507e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015068:	7dfb      	ldrb	r3, [r7, #23]
 801506a:	f023 0303 	bic.w	r3, r3, #3
 801506e:	75fb      	strb	r3, [r7, #23]
                break;
 8015070:	e005      	b.n	801507e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015072:	7dfb      	ldrb	r3, [r7, #23]
 8015074:	f023 0303 	bic.w	r3, r3, #3
 8015078:	75fb      	strb	r3, [r7, #23]
                break;
 801507a:	e000      	b.n	801507e <RegionEU868NewChannelReq+0xae>
                break;
 801507c:	bf00      	nop
            }
        }
    }

    return status;
 801507e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015082:	4618      	mov	r0, r3
 8015084:	3718      	adds	r7, #24
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop

0801508c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801508c:	b480      	push	{r7}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015098:	4618      	mov	r0, r3
 801509a:	370c      	adds	r7, #12
 801509c:	46bd      	mov	sp, r7
 801509e:	bc80      	pop	{r7}
 80150a0:	4770      	bx	lr
	...

080150a4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b084      	sub	sp, #16
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80150ac:	2303      	movs	r3, #3
 80150ae:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80150b0:	2300      	movs	r3, #0
 80150b2:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	f107 020e 	add.w	r2, r7, #14
 80150bc:	4611      	mov	r1, r2
 80150be:	4618      	mov	r0, r3
 80150c0:	f7ff f83a 	bl	8014138 <VerifyRfFreq>
 80150c4:	4603      	mov	r3, r0
 80150c6:	f083 0301 	eor.w	r3, r3, #1
 80150ca:	b2db      	uxtb	r3, r3
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d003      	beq.n	80150d8 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80150d0:	7bfb      	ldrb	r3, [r7, #15]
 80150d2:	f023 0301 	bic.w	r3, r3, #1
 80150d6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80150d8:	4b13      	ldr	r3, [pc, #76]	; (8015128 <RegionEU868DlChannelReq+0x84>)
 80150da:	681a      	ldr	r2, [r3, #0]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	4619      	mov	r1, r3
 80150e2:	460b      	mov	r3, r1
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	440b      	add	r3, r1
 80150e8:	009b      	lsls	r3, r3, #2
 80150ea:	4413      	add	r3, r2
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d103      	bne.n	80150fa <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80150f2:	7bfb      	ldrb	r3, [r7, #15]
 80150f4:	f023 0302 	bic.w	r3, r3, #2
 80150f8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80150fa:	7bfb      	ldrb	r3, [r7, #15]
 80150fc:	2b03      	cmp	r3, #3
 80150fe:	d10d      	bne.n	801511c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015100:	4b09      	ldr	r3, [pc, #36]	; (8015128 <RegionEU868DlChannelReq+0x84>)
 8015102:	6819      	ldr	r1, [r3, #0]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	4618      	mov	r0, r3
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	685a      	ldr	r2, [r3, #4]
 801510e:	4603      	mov	r3, r0
 8015110:	005b      	lsls	r3, r3, #1
 8015112:	4403      	add	r3, r0
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	440b      	add	r3, r1
 8015118:	3304      	adds	r3, #4
 801511a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801511c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015120:	4618      	mov	r0, r3
 8015122:	3710      	adds	r7, #16
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	20000dd4 	.word	0x20000dd4

0801512c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801512c:	b480      	push	{r7}
 801512e:	b083      	sub	sp, #12
 8015130:	af00      	add	r7, sp, #0
 8015132:	4603      	mov	r3, r0
 8015134:	460a      	mov	r2, r1
 8015136:	71fb      	strb	r3, [r7, #7]
 8015138:	4613      	mov	r3, r2
 801513a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015140:	4618      	mov	r0, r3
 8015142:	370c      	adds	r7, #12
 8015144:	46bd      	mov	sp, r7
 8015146:	bc80      	pop	{r7}
 8015148:	4770      	bx	lr
	...

0801514c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b09a      	sub	sp, #104	; 0x68
 8015150:	af02      	add	r7, sp, #8
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
 8015158:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801515a:	2300      	movs	r3, #0
 801515c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015160:	2300      	movs	r3, #0
 8015162:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015166:	2300      	movs	r3, #0
 8015168:	64fb      	str	r3, [r7, #76]	; 0x4c
 801516a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801516e:	2200      	movs	r2, #0
 8015170:	601a      	str	r2, [r3, #0]
 8015172:	605a      	str	r2, [r3, #4]
 8015174:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015176:	230c      	movs	r3, #12
 8015178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801517c:	2307      	movs	r3, #7
 801517e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015180:	4b47      	ldr	r3, [pc, #284]	; (80152a0 <RegionEU868NextChannel+0x154>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	33c0      	adds	r3, #192	; 0xc0
 8015186:	2201      	movs	r2, #1
 8015188:	2100      	movs	r1, #0
 801518a:	4618      	mov	r0, r3
 801518c:	f7fe faa4 	bl	80136d8 <RegionCommonCountChannels>
 8015190:	4603      	mov	r3, r0
 8015192:	2b00      	cmp	r3, #0
 8015194:	d10a      	bne.n	80151ac <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015196:	4b42      	ldr	r3, [pc, #264]	; (80152a0 <RegionEU868NextChannel+0x154>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 801519e:	4b40      	ldr	r3, [pc, #256]	; (80152a0 <RegionEU868NextChannel+0x154>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	f042 0207 	orr.w	r2, r2, #7
 80151a6:	b292      	uxth	r2, r2
 80151a8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	7a5b      	ldrb	r3, [r3, #9]
 80151b0:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80151bc:	4b38      	ldr	r3, [pc, #224]	; (80152a0 <RegionEU868NextChannel+0x154>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	33c0      	adds	r3, #192	; 0xc0
 80151c2:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80151c4:	4b36      	ldr	r3, [pc, #216]	; (80152a0 <RegionEU868NextChannel+0x154>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80151ca:	4b36      	ldr	r3, [pc, #216]	; (80152a4 <RegionEU868NextChannel+0x158>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80151d0:	2310      	movs	r3, #16
 80151d2:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80151d4:	f107 0312 	add.w	r3, r7, #18
 80151d8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	685b      	ldr	r3, [r3, #4]
 80151e4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	7a9b      	ldrb	r3, [r3, #10]
 80151ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80151ee:	2306      	movs	r3, #6
 80151f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80151f4:	68fa      	ldr	r2, [r7, #12]
 80151f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80151fa:	320c      	adds	r2, #12
 80151fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015200:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	7d1b      	ldrb	r3, [r3, #20]
 8015208:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	8adb      	ldrh	r3, [r3, #22]
 8015216:	4619      	mov	r1, r3
 8015218:	4610      	mov	r0, r2
 801521a:	f7ff f803 	bl	8014224 <GetTimeOnAir>
 801521e:	4603      	mov	r3, r0
 8015220:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015222:	f107 0314 	add.w	r3, r7, #20
 8015226:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015228:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801522c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015230:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	9301      	str	r3, [sp, #4]
 8015238:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	460b      	mov	r3, r1
 8015240:	6839      	ldr	r1, [r7, #0]
 8015242:	f7fe fe50 	bl	8013ee6 <RegionCommonIdentifyChannels>
 8015246:	4603      	mov	r3, r0
 8015248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801524c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015250:	2b00      	cmp	r3, #0
 8015252:	d10f      	bne.n	8015274 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015254:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8015258:	3b01      	subs	r3, #1
 801525a:	4619      	mov	r1, r3
 801525c:	2000      	movs	r0, #0
 801525e:	f000 f985 	bl	801556c <randr>
 8015262:	4603      	mov	r3, r0
 8015264:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8015268:	4413      	add	r3, r2
 801526a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	701a      	strb	r2, [r3, #0]
 8015272:	e00e      	b.n	8015292 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015274:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015278:	2b0c      	cmp	r3, #12
 801527a:	d10a      	bne.n	8015292 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801527c:	4b08      	ldr	r3, [pc, #32]	; (80152a0 <RegionEU868NextChannel+0x154>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8015284:	4b06      	ldr	r3, [pc, #24]	; (80152a0 <RegionEU868NextChannel+0x154>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f042 0207 	orr.w	r2, r2, #7
 801528c:	b292      	uxth	r2, r2
 801528e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 8015292:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8015296:	4618      	mov	r0, r3
 8015298:	3760      	adds	r7, #96	; 0x60
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	20000dd4 	.word	0x20000dd4
 80152a4:	20000dd0 	.word	0x20000dd0

080152a8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80152b0:	2300      	movs	r3, #0
 80152b2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80152b4:	2300      	movs	r3, #0
 80152b6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80152b8:	2300      	movs	r3, #0
 80152ba:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	791b      	ldrb	r3, [r3, #4]
 80152c0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80152c2:	7b7b      	ldrb	r3, [r7, #13]
 80152c4:	2b02      	cmp	r3, #2
 80152c6:	d801      	bhi.n	80152cc <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80152c8:	2306      	movs	r3, #6
 80152ca:	e089      	b.n	80153e0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80152cc:	7b7b      	ldrb	r3, [r7, #13]
 80152ce:	2b0f      	cmp	r3, #15
 80152d0:	d901      	bls.n	80152d6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80152d2:	2303      	movs	r3, #3
 80152d4:	e084      	b.n	80153e0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	7a1b      	ldrb	r3, [r3, #8]
 80152dc:	f343 0303 	sbfx	r3, r3, #0, #4
 80152e0:	b25b      	sxtb	r3, r3
 80152e2:	2207      	movs	r2, #7
 80152e4:	2100      	movs	r1, #0
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7fe f9a5 	bl	8013636 <RegionCommonValueInRange>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d101      	bne.n	80152f6 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80152f2:	2301      	movs	r3, #1
 80152f4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	7a1b      	ldrb	r3, [r3, #8]
 80152fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8015300:	b25b      	sxtb	r3, r3
 8015302:	2207      	movs	r2, #7
 8015304:	2100      	movs	r1, #0
 8015306:	4618      	mov	r0, r3
 8015308:	f7fe f995 	bl	8013636 <RegionCommonValueInRange>
 801530c:	4603      	mov	r3, r0
 801530e:	2b00      	cmp	r3, #0
 8015310:	d101      	bne.n	8015316 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8015312:	2301      	movs	r3, #1
 8015314:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	7a1b      	ldrb	r3, [r3, #8]
 801531c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015320:	b25a      	sxtb	r2, r3
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	7a1b      	ldrb	r3, [r3, #8]
 8015328:	f343 1303 	sbfx	r3, r3, #4, #4
 801532c:	b25b      	sxtb	r3, r3
 801532e:	429a      	cmp	r2, r3
 8015330:	dd01      	ble.n	8015336 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8015332:	2301      	movs	r3, #1
 8015334:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015336:	7bbb      	ldrb	r3, [r7, #14]
 8015338:	f083 0301 	eor.w	r3, r3, #1
 801533c:	b2db      	uxtb	r3, r3
 801533e:	2b00      	cmp	r3, #0
 8015340:	d010      	beq.n	8015364 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	f107 020c 	add.w	r2, r7, #12
 801534c:	4611      	mov	r1, r2
 801534e:	4618      	mov	r0, r3
 8015350:	f7fe fef2 	bl	8014138 <VerifyRfFreq>
 8015354:	4603      	mov	r3, r0
 8015356:	f083 0301 	eor.w	r3, r3, #1
 801535a:	b2db      	uxtb	r3, r3
 801535c:	2b00      	cmp	r3, #0
 801535e:	d001      	beq.n	8015364 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8015360:	2301      	movs	r3, #1
 8015362:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015364:	7bfb      	ldrb	r3, [r7, #15]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d004      	beq.n	8015374 <RegionEU868ChannelAdd+0xcc>
 801536a:	7bbb      	ldrb	r3, [r7, #14]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d001      	beq.n	8015374 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015370:	2306      	movs	r3, #6
 8015372:	e035      	b.n	80153e0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8015374:	7bfb      	ldrb	r3, [r7, #15]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801537a:	2305      	movs	r3, #5
 801537c:	e030      	b.n	80153e0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801537e:	7bbb      	ldrb	r3, [r7, #14]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d001      	beq.n	8015388 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015384:	2304      	movs	r3, #4
 8015386:	e02b      	b.n	80153e0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015388:	4b17      	ldr	r3, [pc, #92]	; (80153e8 <RegionEU868ChannelAdd+0x140>)
 801538a:	6819      	ldr	r1, [r3, #0]
 801538c:	7b7a      	ldrb	r2, [r7, #13]
 801538e:	4613      	mov	r3, r2
 8015390:	005b      	lsls	r3, r3, #1
 8015392:	4413      	add	r3, r2
 8015394:	009b      	lsls	r3, r3, #2
 8015396:	18c8      	adds	r0, r1, r3
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	220c      	movs	r2, #12
 801539e:	4619      	mov	r1, r3
 80153a0:	f000 f8fb 	bl	801559a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80153a4:	4b10      	ldr	r3, [pc, #64]	; (80153e8 <RegionEU868ChannelAdd+0x140>)
 80153a6:	6819      	ldr	r1, [r3, #0]
 80153a8:	7b7a      	ldrb	r2, [r7, #13]
 80153aa:	7b38      	ldrb	r0, [r7, #12]
 80153ac:	4613      	mov	r3, r2
 80153ae:	005b      	lsls	r3, r3, #1
 80153b0:	4413      	add	r3, r2
 80153b2:	009b      	lsls	r3, r3, #2
 80153b4:	440b      	add	r3, r1
 80153b6:	3309      	adds	r3, #9
 80153b8:	4602      	mov	r2, r0
 80153ba:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80153bc:	4b0a      	ldr	r3, [pc, #40]	; (80153e8 <RegionEU868ChannelAdd+0x140>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80153c4:	b21a      	sxth	r2, r3
 80153c6:	7b7b      	ldrb	r3, [r7, #13]
 80153c8:	2101      	movs	r1, #1
 80153ca:	fa01 f303 	lsl.w	r3, r1, r3
 80153ce:	b21b      	sxth	r3, r3
 80153d0:	4313      	orrs	r3, r2
 80153d2:	b21a      	sxth	r2, r3
 80153d4:	4b04      	ldr	r3, [pc, #16]	; (80153e8 <RegionEU868ChannelAdd+0x140>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	b292      	uxth	r2, r2
 80153da:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80153de:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3710      	adds	r7, #16
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	20000dd4 	.word	0x20000dd4

080153ec <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b086      	sub	sp, #24
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	781b      	ldrb	r3, [r3, #0]
 80153f8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80153fa:	7dfb      	ldrb	r3, [r7, #23]
 80153fc:	2b02      	cmp	r3, #2
 80153fe:	d801      	bhi.n	8015404 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8015400:	2300      	movs	r3, #0
 8015402:	e015      	b.n	8015430 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015404:	4b0c      	ldr	r3, [pc, #48]	; (8015438 <RegionEU868ChannelsRemove+0x4c>)
 8015406:	6819      	ldr	r1, [r3, #0]
 8015408:	7dfa      	ldrb	r2, [r7, #23]
 801540a:	4613      	mov	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	4413      	add	r3, r2
 8015410:	009b      	lsls	r3, r3, #2
 8015412:	440b      	add	r3, r1
 8015414:	461a      	mov	r2, r3
 8015416:	2300      	movs	r3, #0
 8015418:	6013      	str	r3, [r2, #0]
 801541a:	6053      	str	r3, [r2, #4]
 801541c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801541e:	4b06      	ldr	r3, [pc, #24]	; (8015438 <RegionEU868ChannelsRemove+0x4c>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	33c0      	adds	r3, #192	; 0xc0
 8015424:	7df9      	ldrb	r1, [r7, #23]
 8015426:	2210      	movs	r2, #16
 8015428:	4618      	mov	r0, r3
 801542a:	f7fe f921 	bl	8013670 <RegionCommonChanDisable>
 801542e:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8015430:	4618      	mov	r0, r3
 8015432:	3718      	adds	r7, #24
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	20000dd4 	.word	0x20000dd4

0801543c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801543c:	b590      	push	{r4, r7, lr}
 801543e:	b085      	sub	sp, #20
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801544a:	4b20      	ldr	r3, [pc, #128]	; (80154cc <RegionEU868SetContinuousWave+0x90>)
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	4b20      	ldr	r3, [pc, #128]	; (80154d0 <RegionEU868SetContinuousWave+0x94>)
 8015450:	6819      	ldr	r1, [r3, #0]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	461c      	mov	r4, r3
 8015458:	4623      	mov	r3, r4
 801545a:	005b      	lsls	r3, r3, #1
 801545c:	4423      	add	r3, r4
 801545e:	009b      	lsls	r3, r3, #2
 8015460:	440b      	add	r3, r1
 8015462:	3309      	adds	r3, #9
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	4619      	mov	r1, r3
 8015468:	460b      	mov	r3, r1
 801546a:	005b      	lsls	r3, r3, #1
 801546c:	440b      	add	r3, r1
 801546e:	00db      	lsls	r3, r3, #3
 8015470:	4413      	add	r3, r2
 8015472:	3302      	adds	r3, #2
 8015474:	f993 3000 	ldrsb.w	r3, [r3]
 8015478:	4619      	mov	r1, r3
 801547a:	f7fe fdd4 	bl	8014026 <RegionCommonLimitTxPower>
 801547e:	4603      	mov	r3, r0
 8015480:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015482:	2300      	movs	r3, #0
 8015484:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8015486:	4b12      	ldr	r3, [pc, #72]	; (80154d0 <RegionEU868SetContinuousWave+0x94>)
 8015488:	681a      	ldr	r2, [r3, #0]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	4619      	mov	r1, r3
 8015490:	460b      	mov	r3, r1
 8015492:	005b      	lsls	r3, r3, #1
 8015494:	440b      	add	r3, r1
 8015496:	009b      	lsls	r3, r3, #2
 8015498:	4413      	add	r3, r2
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6859      	ldr	r1, [r3, #4]
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	689a      	ldr	r2, [r3, #8]
 80154a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7fe fc2c 	bl	8013d08 <RegionCommonComputeTxPower>
 80154b0:	4603      	mov	r3, r0
 80154b2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80154b4:	4b07      	ldr	r3, [pc, #28]	; (80154d4 <RegionEU868SetContinuousWave+0x98>)
 80154b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154b8:	687a      	ldr	r2, [r7, #4]
 80154ba:	8992      	ldrh	r2, [r2, #12]
 80154bc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80154c0:	68b8      	ldr	r0, [r7, #8]
 80154c2:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80154c4:	bf00      	nop
 80154c6:	3714      	adds	r7, #20
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd90      	pop	{r4, r7, pc}
 80154cc:	20000dd0 	.word	0x20000dd0
 80154d0:	20000dd4 	.word	0x20000dd4
 80154d4:	0801acfc 	.word	0x0801acfc

080154d8 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80154d8:	b480      	push	{r7}
 80154da:	b085      	sub	sp, #20
 80154dc:	af00      	add	r7, sp, #0
 80154de:	4603      	mov	r3, r0
 80154e0:	71fb      	strb	r3, [r7, #7]
 80154e2:	460b      	mov	r3, r1
 80154e4:	71bb      	strb	r3, [r7, #6]
 80154e6:	4613      	mov	r3, r2
 80154e8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80154ea:	79ba      	ldrb	r2, [r7, #6]
 80154ec:	797b      	ldrb	r3, [r7, #5]
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80154f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	da01      	bge.n	8015500 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80154fc:	2300      	movs	r3, #0
 80154fe:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015500:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8015502:	4618      	mov	r0, r3
 8015504:	3714      	adds	r7, #20
 8015506:	46bd      	mov	sp, r7
 8015508:	bc80      	pop	{r7}
 801550a:	4770      	bx	lr

0801550c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801550c:	b480      	push	{r7}
 801550e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8015510:	4b0d      	ldr	r3, [pc, #52]	; (8015548 <rand1+0x3c>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a0d      	ldr	r2, [pc, #52]	; (801554c <rand1+0x40>)
 8015516:	fb02 f303 	mul.w	r3, r2, r3
 801551a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801551e:	3339      	adds	r3, #57	; 0x39
 8015520:	4a09      	ldr	r2, [pc, #36]	; (8015548 <rand1+0x3c>)
 8015522:	6013      	str	r3, [r2, #0]
 8015524:	4b08      	ldr	r3, [pc, #32]	; (8015548 <rand1+0x3c>)
 8015526:	681a      	ldr	r2, [r3, #0]
 8015528:	2303      	movs	r3, #3
 801552a:	fba3 1302 	umull	r1, r3, r3, r2
 801552e:	1ad1      	subs	r1, r2, r3
 8015530:	0849      	lsrs	r1, r1, #1
 8015532:	440b      	add	r3, r1
 8015534:	0f99      	lsrs	r1, r3, #30
 8015536:	460b      	mov	r3, r1
 8015538:	07db      	lsls	r3, r3, #31
 801553a:	1a5b      	subs	r3, r3, r1
 801553c:	1ad1      	subs	r1, r2, r3
 801553e:	460b      	mov	r3, r1
}
 8015540:	4618      	mov	r0, r3
 8015542:	46bd      	mov	sp, r7
 8015544:	bc80      	pop	{r7}
 8015546:	4770      	bx	lr
 8015548:	2000011c 	.word	0x2000011c
 801554c:	41c64e6d 	.word	0x41c64e6d

08015550 <srand1>:

void srand1( uint32_t seed )
{
 8015550:	b480      	push	{r7}
 8015552:	b083      	sub	sp, #12
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
    next = seed;
 8015558:	4a03      	ldr	r2, [pc, #12]	; (8015568 <srand1+0x18>)
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6013      	str	r3, [r2, #0]
}
 801555e:	bf00      	nop
 8015560:	370c      	adds	r7, #12
 8015562:	46bd      	mov	sp, r7
 8015564:	bc80      	pop	{r7}
 8015566:	4770      	bx	lr
 8015568:	2000011c 	.word	0x2000011c

0801556c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b082      	sub	sp, #8
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8015576:	f7ff ffc9 	bl	801550c <rand1>
 801557a:	4602      	mov	r2, r0
 801557c:	6839      	ldr	r1, [r7, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	1acb      	subs	r3, r1, r3
 8015582:	3301      	adds	r3, #1
 8015584:	fb92 f1f3 	sdiv	r1, r2, r3
 8015588:	fb03 f301 	mul.w	r3, r3, r1
 801558c:	1ad2      	subs	r2, r2, r3
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	4413      	add	r3, r2
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801559a:	b480      	push	{r7}
 801559c:	b085      	sub	sp, #20
 801559e:	af00      	add	r7, sp, #0
 80155a0:	60f8      	str	r0, [r7, #12]
 80155a2:	60b9      	str	r1, [r7, #8]
 80155a4:	4613      	mov	r3, r2
 80155a6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80155a8:	e007      	b.n	80155ba <memcpy1+0x20>
    {
        *dst++ = *src++;
 80155aa:	68ba      	ldr	r2, [r7, #8]
 80155ac:	1c53      	adds	r3, r2, #1
 80155ae:	60bb      	str	r3, [r7, #8]
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	1c59      	adds	r1, r3, #1
 80155b4:	60f9      	str	r1, [r7, #12]
 80155b6:	7812      	ldrb	r2, [r2, #0]
 80155b8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80155ba:	88fb      	ldrh	r3, [r7, #6]
 80155bc:	1e5a      	subs	r2, r3, #1
 80155be:	80fa      	strh	r2, [r7, #6]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d1f2      	bne.n	80155aa <memcpy1+0x10>
    }
}
 80155c4:	bf00      	nop
 80155c6:	bf00      	nop
 80155c8:	3714      	adds	r7, #20
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bc80      	pop	{r7}
 80155ce:	4770      	bx	lr

080155d0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80155d0:	b480      	push	{r7}
 80155d2:	b085      	sub	sp, #20
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	4613      	mov	r3, r2
 80155dc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80155de:	88fb      	ldrh	r3, [r7, #6]
 80155e0:	3b01      	subs	r3, #1
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	4413      	add	r3, r2
 80155e6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80155e8:	e007      	b.n	80155fa <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80155ea:	68ba      	ldr	r2, [r7, #8]
 80155ec:	1c53      	adds	r3, r2, #1
 80155ee:	60bb      	str	r3, [r7, #8]
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	1e59      	subs	r1, r3, #1
 80155f4:	60f9      	str	r1, [r7, #12]
 80155f6:	7812      	ldrb	r2, [r2, #0]
 80155f8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80155fa:	88fb      	ldrh	r3, [r7, #6]
 80155fc:	1e5a      	subs	r2, r3, #1
 80155fe:	80fa      	strh	r2, [r7, #6]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d1f2      	bne.n	80155ea <memcpyr+0x1a>
    }
}
 8015604:	bf00      	nop
 8015606:	bf00      	nop
 8015608:	3714      	adds	r7, #20
 801560a:	46bd      	mov	sp, r7
 801560c:	bc80      	pop	{r7}
 801560e:	4770      	bx	lr

08015610 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8015610:	b480      	push	{r7}
 8015612:	b083      	sub	sp, #12
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
 8015618:	460b      	mov	r3, r1
 801561a:	70fb      	strb	r3, [r7, #3]
 801561c:	4613      	mov	r3, r2
 801561e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8015620:	e004      	b.n	801562c <memset1+0x1c>
    {
        *dst++ = value;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	1c5a      	adds	r2, r3, #1
 8015626:	607a      	str	r2, [r7, #4]
 8015628:	78fa      	ldrb	r2, [r7, #3]
 801562a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801562c:	883b      	ldrh	r3, [r7, #0]
 801562e:	1e5a      	subs	r2, r3, #1
 8015630:	803a      	strh	r2, [r7, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d1f5      	bne.n	8015622 <memset1+0x12>
    }
}
 8015636:	bf00      	nop
 8015638:	bf00      	nop
 801563a:	370c      	adds	r7, #12
 801563c:	46bd      	mov	sp, r7
 801563e:	bc80      	pop	{r7}
 8015640:	4770      	bx	lr
	...

08015644 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8015644:	b480      	push	{r7}
 8015646:	b087      	sub	sp, #28
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	460b      	mov	r3, r1
 801564e:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8015650:	4b1a      	ldr	r3, [pc, #104]	; (80156bc <Crc32+0x78>)
 8015652:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8015654:	f04f 33ff 	mov.w	r3, #4294967295
 8015658:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d101      	bne.n	8015664 <Crc32+0x20>
    {
        return 0;
 8015660:	2300      	movs	r3, #0
 8015662:	e026      	b.n	80156b2 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8015664:	2300      	movs	r3, #0
 8015666:	827b      	strh	r3, [r7, #18]
 8015668:	e01d      	b.n	80156a6 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801566a:	8a7b      	ldrh	r3, [r7, #18]
 801566c:	687a      	ldr	r2, [r7, #4]
 801566e:	4413      	add	r3, r2
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	461a      	mov	r2, r3
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	4053      	eors	r3, r2
 8015678:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801567a:	2300      	movs	r3, #0
 801567c:	823b      	strh	r3, [r7, #16]
 801567e:	e00c      	b.n	801569a <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	085a      	lsrs	r2, r3, #1
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	f003 0301 	and.w	r3, r3, #1
 801568a:	4259      	negs	r1, r3
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	400b      	ands	r3, r1
 8015690:	4053      	eors	r3, r2
 8015692:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8015694:	8a3b      	ldrh	r3, [r7, #16]
 8015696:	3301      	adds	r3, #1
 8015698:	823b      	strh	r3, [r7, #16]
 801569a:	8a3b      	ldrh	r3, [r7, #16]
 801569c:	2b07      	cmp	r3, #7
 801569e:	d9ef      	bls.n	8015680 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80156a0:	8a7b      	ldrh	r3, [r7, #18]
 80156a2:	3301      	adds	r3, #1
 80156a4:	827b      	strh	r3, [r7, #18]
 80156a6:	8a7a      	ldrh	r2, [r7, #18]
 80156a8:	887b      	ldrh	r3, [r7, #2]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d3dd      	bcc.n	801566a <Crc32+0x26>
        }
    }

    return ~crc;
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	43db      	mvns	r3, r3
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	371c      	adds	r7, #28
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bc80      	pop	{r7}
 80156ba:	4770      	bx	lr
 80156bc:	edb88320 	.word	0xedb88320

080156c0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b083      	sub	sp, #12
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	619a      	str	r2, [r3, #24]
}
 80156d0:	bf00      	nop
 80156d2:	370c      	adds	r7, #12
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bc80      	pop	{r7}
 80156d8:	4770      	bx	lr

080156da <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80156da:	b480      	push	{r7}
 80156dc:	b083      	sub	sp, #12
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
 80156e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	683a      	ldr	r2, [r7, #0]
 80156e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80156ea:	bf00      	nop
 80156ec:	370c      	adds	r7, #12
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bc80      	pop	{r7}
 80156f2:	4770      	bx	lr

080156f4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af02      	add	r7, sp, #8
 80156fa:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80156fc:	4a21      	ldr	r2, [pc, #132]	; (8015784 <RadioInit+0x90>)
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8015702:	4b21      	ldr	r3, [pc, #132]	; (8015788 <RadioInit+0x94>)
 8015704:	2200      	movs	r2, #0
 8015706:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8015708:	4b1f      	ldr	r3, [pc, #124]	; (8015788 <RadioInit+0x94>)
 801570a:	2200      	movs	r2, #0
 801570c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801570e:	4b1e      	ldr	r3, [pc, #120]	; (8015788 <RadioInit+0x94>)
 8015710:	2200      	movs	r2, #0
 8015712:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8015714:	481d      	ldr	r0, [pc, #116]	; (801578c <RadioInit+0x98>)
 8015716:	f001 fee3 	bl	80174e0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 801571a:	2000      	movs	r0, #0
 801571c:	f001 f82a 	bl	8016774 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8015720:	f002 f974 	bl	8017a0c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8015724:	2100      	movs	r1, #0
 8015726:	2000      	movs	r0, #0
 8015728:	f002 fcca 	bl	80180c0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801572c:	2204      	movs	r2, #4
 801572e:	2100      	movs	r1, #0
 8015730:	2001      	movs	r0, #1
 8015732:	f002 faf5 	bl	8017d20 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8015736:	2300      	movs	r3, #0
 8015738:	2200      	movs	r2, #0
 801573a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801573e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015742:	f002 fa29 	bl	8017b98 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8015746:	f000 fea1 	bl	801648c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801574a:	2300      	movs	r3, #0
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	4b10      	ldr	r3, [pc, #64]	; (8015790 <RadioInit+0x9c>)
 8015750:	2200      	movs	r2, #0
 8015752:	f04f 31ff 	mov.w	r1, #4294967295
 8015756:	480f      	ldr	r0, [pc, #60]	; (8015794 <RadioInit+0xa0>)
 8015758:	f003 feb2 	bl	80194c0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801575c:	2300      	movs	r3, #0
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	4b0d      	ldr	r3, [pc, #52]	; (8015798 <RadioInit+0xa4>)
 8015762:	2200      	movs	r2, #0
 8015764:	f04f 31ff 	mov.w	r1, #4294967295
 8015768:	480c      	ldr	r0, [pc, #48]	; (801579c <RadioInit+0xa8>)
 801576a:	f003 fea9 	bl	80194c0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801576e:	4809      	ldr	r0, [pc, #36]	; (8015794 <RadioInit+0xa0>)
 8015770:	f003 ff4a 	bl	8019608 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8015774:	4809      	ldr	r0, [pc, #36]	; (801579c <RadioInit+0xa8>)
 8015776:	f003 ff47 	bl	8019608 <UTIL_TIMER_Stop>
}
 801577a:	bf00      	nop
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	20000ed8 	.word	0x20000ed8
 8015788:	20001778 	.word	0x20001778
 801578c:	0801686d 	.word	0x0801686d
 8015790:	080167e1 	.word	0x080167e1
 8015794:	200017d0 	.word	0x200017d0
 8015798:	080167f5 	.word	0x080167f5
 801579c:	200017e8 	.word	0x200017e8

080157a0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80157a4:	f001 fede 	bl	8017564 <SUBGRF_GetOperatingMode>
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b07      	cmp	r3, #7
 80157ac:	d00a      	beq.n	80157c4 <RadioGetStatus+0x24>
 80157ae:	2b07      	cmp	r3, #7
 80157b0:	dc0a      	bgt.n	80157c8 <RadioGetStatus+0x28>
 80157b2:	2b04      	cmp	r3, #4
 80157b4:	d002      	beq.n	80157bc <RadioGetStatus+0x1c>
 80157b6:	2b05      	cmp	r3, #5
 80157b8:	d002      	beq.n	80157c0 <RadioGetStatus+0x20>
 80157ba:	e005      	b.n	80157c8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80157bc:	2302      	movs	r3, #2
 80157be:	e004      	b.n	80157ca <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80157c0:	2301      	movs	r3, #1
 80157c2:	e002      	b.n	80157ca <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80157c4:	2303      	movs	r3, #3
 80157c6:	e000      	b.n	80157ca <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80157c8:	2300      	movs	r3, #0
    }
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	bd80      	pop	{r7, pc}
	...

080157d0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	4603      	mov	r3, r0
 80157d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80157da:	4a25      	ldr	r2, [pc, #148]	; (8015870 <RadioSetModem+0xa0>)
 80157dc:	79fb      	ldrb	r3, [r7, #7]
 80157de:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80157e0:	79fb      	ldrb	r3, [r7, #7]
 80157e2:	4618      	mov	r0, r3
 80157e4:	f003 f831 	bl	801884a <RFW_SetRadioModem>
    switch( modem )
 80157e8:	79fb      	ldrb	r3, [r7, #7]
 80157ea:	3b01      	subs	r3, #1
 80157ec:	2b03      	cmp	r3, #3
 80157ee:	d80b      	bhi.n	8015808 <RadioSetModem+0x38>
 80157f0:	a201      	add	r2, pc, #4	; (adr r2, 80157f8 <RadioSetModem+0x28>)
 80157f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157f6:	bf00      	nop
 80157f8:	08015817 	.word	0x08015817
 80157fc:	0801583d 	.word	0x0801583d
 8015800:	0801584b 	.word	0x0801584b
 8015804:	08015859 	.word	0x08015859
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015808:	2000      	movs	r0, #0
 801580a:	f002 fa63 	bl	8017cd4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801580e:	4b18      	ldr	r3, [pc, #96]	; (8015870 <RadioSetModem+0xa0>)
 8015810:	2200      	movs	r2, #0
 8015812:	735a      	strb	r2, [r3, #13]
        break;
 8015814:	e028      	b.n	8015868 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8015816:	2001      	movs	r0, #1
 8015818:	f002 fa5c 	bl	8017cd4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801581c:	4b14      	ldr	r3, [pc, #80]	; (8015870 <RadioSetModem+0xa0>)
 801581e:	7b5a      	ldrb	r2, [r3, #13]
 8015820:	4b13      	ldr	r3, [pc, #76]	; (8015870 <RadioSetModem+0xa0>)
 8015822:	7b1b      	ldrb	r3, [r3, #12]
 8015824:	429a      	cmp	r2, r3
 8015826:	d01e      	beq.n	8015866 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8015828:	4b11      	ldr	r3, [pc, #68]	; (8015870 <RadioSetModem+0xa0>)
 801582a:	7b1a      	ldrb	r2, [r3, #12]
 801582c:	4b10      	ldr	r3, [pc, #64]	; (8015870 <RadioSetModem+0xa0>)
 801582e:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8015830:	4b0f      	ldr	r3, [pc, #60]	; (8015870 <RadioSetModem+0xa0>)
 8015832:	7b5b      	ldrb	r3, [r3, #13]
 8015834:	4618      	mov	r0, r3
 8015836:	f000 ff9d 	bl	8016774 <RadioSetPublicNetwork>
        }
        break;
 801583a:	e014      	b.n	8015866 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801583c:	2002      	movs	r0, #2
 801583e:	f002 fa49 	bl	8017cd4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015842:	4b0b      	ldr	r3, [pc, #44]	; (8015870 <RadioSetModem+0xa0>)
 8015844:	2200      	movs	r2, #0
 8015846:	735a      	strb	r2, [r3, #13]
        break;
 8015848:	e00e      	b.n	8015868 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801584a:	2002      	movs	r0, #2
 801584c:	f002 fa42 	bl	8017cd4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8015850:	4b07      	ldr	r3, [pc, #28]	; (8015870 <RadioSetModem+0xa0>)
 8015852:	2200      	movs	r2, #0
 8015854:	735a      	strb	r2, [r3, #13]
        break;
 8015856:	e007      	b.n	8015868 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015858:	2000      	movs	r0, #0
 801585a:	f002 fa3b 	bl	8017cd4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801585e:	4b04      	ldr	r3, [pc, #16]	; (8015870 <RadioSetModem+0xa0>)
 8015860:	2200      	movs	r2, #0
 8015862:	735a      	strb	r2, [r3, #13]
        break;
 8015864:	e000      	b.n	8015868 <RadioSetModem+0x98>
        break;
 8015866:	bf00      	nop
    }
}
 8015868:	bf00      	nop
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	20001778 	.word	0x20001778

08015874 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f002 f9e7 	bl	8017c50 <SUBGRF_SetRfFrequency>
}
 8015882:	bf00      	nop
 8015884:	3708      	adds	r7, #8
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}

0801588a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b090      	sub	sp, #64	; 0x40
 801588e:	af0a      	add	r7, sp, #40	; 0x28
 8015890:	60f8      	str	r0, [r7, #12]
 8015892:	60b9      	str	r1, [r7, #8]
 8015894:	603b      	str	r3, [r7, #0]
 8015896:	4613      	mov	r3, r2
 8015898:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801589a:	2301      	movs	r3, #1
 801589c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801589e:	2300      	movs	r3, #0
 80158a0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80158a2:	2300      	movs	r3, #0
 80158a4:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80158a6:	f000 fe04 	bl	80164b2 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80158aa:	2000      	movs	r0, #0
 80158ac:	f7ff ff90 	bl	80157d0 <RadioSetModem>

    RadioSetChannel( freq );
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f7ff ffdf 	bl	8015874 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80158b6:	2301      	movs	r3, #1
 80158b8:	9309      	str	r3, [sp, #36]	; 0x24
 80158ba:	2300      	movs	r3, #0
 80158bc:	9308      	str	r3, [sp, #32]
 80158be:	2300      	movs	r3, #0
 80158c0:	9307      	str	r3, [sp, #28]
 80158c2:	2300      	movs	r3, #0
 80158c4:	9306      	str	r3, [sp, #24]
 80158c6:	2300      	movs	r3, #0
 80158c8:	9305      	str	r3, [sp, #20]
 80158ca:	2300      	movs	r3, #0
 80158cc:	9304      	str	r3, [sp, #16]
 80158ce:	2300      	movs	r3, #0
 80158d0:	9303      	str	r3, [sp, #12]
 80158d2:	2300      	movs	r3, #0
 80158d4:	9302      	str	r3, [sp, #8]
 80158d6:	2303      	movs	r3, #3
 80158d8:	9301      	str	r3, [sp, #4]
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	9300      	str	r3, [sp, #0]
 80158de:	2300      	movs	r3, #0
 80158e0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80158e4:	68b9      	ldr	r1, [r7, #8]
 80158e6:	2000      	movs	r0, #0
 80158e8:	f000 f840 	bl	801596c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80158ec:	2000      	movs	r0, #0
 80158ee:	f000 fde7 	bl	80164c0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80158f2:	f000 ff6d 	bl	80167d0 <RadioGetWakeupTime>
 80158f6:	4603      	mov	r3, r0
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7ec f826 	bl	800194a <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80158fe:	f003 ff9d 	bl	801983c <UTIL_TIMER_GetCurrentTime>
 8015902:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015904:	e00d      	b.n	8015922 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8015906:	2000      	movs	r0, #0
 8015908:	f000 feb2 	bl	8016670 <RadioRssi>
 801590c:	4603      	mov	r3, r0
 801590e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8015910:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8015914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015918:	429a      	cmp	r2, r3
 801591a:	dd02      	ble.n	8015922 <RadioIsChannelFree+0x98>
        {
            status = false;
 801591c:	2300      	movs	r3, #0
 801591e:	75fb      	strb	r3, [r7, #23]
            break;
 8015920:	e006      	b.n	8015930 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8015922:	6938      	ldr	r0, [r7, #16]
 8015924:	f003 ff9c 	bl	8019860 <UTIL_TIMER_GetElapsedTime>
 8015928:	4602      	mov	r2, r0
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	4293      	cmp	r3, r2
 801592e:	d8ea      	bhi.n	8015906 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8015930:	f000 fdbf 	bl	80164b2 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8015934:	7dfb      	ldrb	r3, [r7, #23]
}
 8015936:	4618      	mov	r0, r3
 8015938:	3718      	adds	r7, #24
 801593a:	46bd      	mov	sp, r7
 801593c:	bd80      	pop	{r7, pc}

0801593e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801593e:	b580      	push	{r7, lr}
 8015940:	b082      	sub	sp, #8
 8015942:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8015944:	2300      	movs	r3, #0
 8015946:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8015948:	2001      	movs	r0, #1
 801594a:	f7ff ff41 	bl	80157d0 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801594e:	2300      	movs	r3, #0
 8015950:	2200      	movs	r2, #0
 8015952:	2100      	movs	r1, #0
 8015954:	2000      	movs	r0, #0
 8015956:	f002 f91f 	bl	8017b98 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801595a:	f001 fed4 	bl	8017706 <SUBGRF_GetRandom>
 801595e:	6078      	str	r0, [r7, #4]

    return rnd;
 8015960:	687b      	ldr	r3, [r7, #4]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
	...

0801596c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b08a      	sub	sp, #40	; 0x28
 8015970:	af00      	add	r7, sp, #0
 8015972:	60b9      	str	r1, [r7, #8]
 8015974:	607a      	str	r2, [r7, #4]
 8015976:	461a      	mov	r2, r3
 8015978:	4603      	mov	r3, r0
 801597a:	73fb      	strb	r3, [r7, #15]
 801597c:	4613      	mov	r3, r2
 801597e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8015980:	4abd      	ldr	r2, [pc, #756]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015982:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8015986:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8015988:	f002 ff1d 	bl	80187c6 <RFW_DeInit>
    if( rxContinuous == true )
 801598c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8015990:	2b00      	cmp	r3, #0
 8015992:	d001      	beq.n	8015998 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8015994:	2300      	movs	r3, #0
 8015996:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8015998:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801599c:	2b00      	cmp	r3, #0
 801599e:	d004      	beq.n	80159aa <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80159a0:	4ab6      	ldr	r2, [pc, #728]	; (8015c7c <RadioSetRxConfig+0x310>)
 80159a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80159a6:	7013      	strb	r3, [r2, #0]
 80159a8:	e002      	b.n	80159b0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80159aa:	4bb4      	ldr	r3, [pc, #720]	; (8015c7c <RadioSetRxConfig+0x310>)
 80159ac:	22ff      	movs	r2, #255	; 0xff
 80159ae:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80159b0:	7bfb      	ldrb	r3, [r7, #15]
 80159b2:	2b04      	cmp	r3, #4
 80159b4:	d009      	beq.n	80159ca <RadioSetRxConfig+0x5e>
 80159b6:	2b04      	cmp	r3, #4
 80159b8:	f300 81da 	bgt.w	8015d70 <RadioSetRxConfig+0x404>
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f000 80bf 	beq.w	8015b40 <RadioSetRxConfig+0x1d4>
 80159c2:	2b01      	cmp	r3, #1
 80159c4:	f000 812c 	beq.w	8015c20 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80159c8:	e1d2      	b.n	8015d70 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80159ca:	2001      	movs	r0, #1
 80159cc:	f001 ffe0 	bl	8017990 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80159d0:	4ba9      	ldr	r3, [pc, #676]	; (8015c78 <RadioSetRxConfig+0x30c>)
 80159d2:	2200      	movs	r2, #0
 80159d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80159d8:	4aa7      	ldr	r2, [pc, #668]	; (8015c78 <RadioSetRxConfig+0x30c>)
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80159de:	4ba6      	ldr	r3, [pc, #664]	; (8015c78 <RadioSetRxConfig+0x30c>)
 80159e0:	2209      	movs	r2, #9
 80159e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80159e6:	4ba4      	ldr	r3, [pc, #656]	; (8015c78 <RadioSetRxConfig+0x30c>)
 80159e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80159ec:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80159ee:	68b8      	ldr	r0, [r7, #8]
 80159f0:	f002 fe1a 	bl	8018628 <SUBGRF_GetFskBandwidthRegValue>
 80159f4:	4603      	mov	r3, r0
 80159f6:	461a      	mov	r2, r3
 80159f8:	4b9f      	ldr	r3, [pc, #636]	; (8015c78 <RadioSetRxConfig+0x30c>)
 80159fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80159fe:	4b9e      	ldr	r3, [pc, #632]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a00:	2200      	movs	r2, #0
 8015a02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015a04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015a06:	00db      	lsls	r3, r3, #3
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	4b9b      	ldr	r3, [pc, #620]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a0c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8015a0e:	4b9a      	ldr	r3, [pc, #616]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a10:	2200      	movs	r2, #0
 8015a12:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8015a14:	4b98      	ldr	r3, [pc, #608]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a16:	2210      	movs	r2, #16
 8015a18:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015a1a:	4b97      	ldr	r3, [pc, #604]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8015a20:	4b95      	ldr	r3, [pc, #596]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a22:	2200      	movs	r2, #0
 8015a24:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015a26:	4b95      	ldr	r3, [pc, #596]	; (8015c7c <RadioSetRxConfig+0x310>)
 8015a28:	781a      	ldrb	r2, [r3, #0]
 8015a2a:	4b93      	ldr	r3, [pc, #588]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a2c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015a2e:	4b92      	ldr	r3, [pc, #584]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a30:	2201      	movs	r2, #1
 8015a32:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8015a34:	4b90      	ldr	r3, [pc, #576]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015a36:	2200      	movs	r2, #0
 8015a38:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8015a3a:	2004      	movs	r0, #4
 8015a3c:	f7ff fec8 	bl	80157d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015a40:	488f      	ldr	r0, [pc, #572]	; (8015c80 <RadioSetRxConfig+0x314>)
 8015a42:	f002 f9d3 	bl	8017dec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015a46:	488f      	ldr	r0, [pc, #572]	; (8015c84 <RadioSetRxConfig+0x318>)
 8015a48:	f002 fa9c 	bl	8017f84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015a4c:	4a8e      	ldr	r2, [pc, #568]	; (8015c88 <RadioSetRxConfig+0x31c>)
 8015a4e:	f107 031c 	add.w	r3, r7, #28
 8015a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a56:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a5a:	f107 031c 	add.w	r3, r7, #28
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f001 fdcf 	bl	8017602 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015a64:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015a68:	f001 fe1a 	bl	80176a0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8015a6c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015a70:	f000 fe1d 	bl	80166ae <RadioRead>
 8015a74:	4603      	mov	r3, r0
 8015a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8015a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a7e:	f023 0310 	bic.w	r3, r3, #16
 8015a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8015a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8015a90:	f000 fdfb 	bl	801668a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8015a94:	2104      	movs	r1, #4
 8015a96:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8015a9a:	f000 fdf6 	bl	801668a <RadioWrite>
            modReg= RadioRead(0x89b);
 8015a9e:	f640 009b 	movw	r0, #2203	; 0x89b
 8015aa2:	f000 fe04 	bl	80166ae <RadioRead>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ab0:	f023 031c 	bic.w	r3, r3, #28
 8015ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8015ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015abc:	f043 0308 	orr.w	r3, r3, #8
 8015ac0:	b2db      	uxtb	r3, r3
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	f640 009b 	movw	r0, #2203	; 0x89b
 8015ac8:	f000 fddf 	bl	801668a <RadioWrite>
            modReg= RadioRead(0x6d1);
 8015acc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015ad0:	f000 fded 	bl	80166ae <RadioRead>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8015ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ade:	f023 0318 	bic.w	r3, r3, #24
 8015ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8015ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aea:	f043 0318 	orr.w	r3, r3, #24
 8015aee:	b2db      	uxtb	r3, r3
 8015af0:	4619      	mov	r1, r3
 8015af2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8015af6:	f000 fdc8 	bl	801668a <RadioWrite>
            modReg= RadioRead(0x6ac);
 8015afa:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015afe:	f000 fdd6 	bl	80166ae <RadioRead>
 8015b02:	4603      	mov	r3, r0
 8015b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8015b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8015b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b18:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8015b1c:	b2db      	uxtb	r3, r3
 8015b1e:	4619      	mov	r1, r3
 8015b20:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015b24:	f000 fdb1 	bl	801668a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8015b28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015b2a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015b2e:	fb02 f303 	mul.w	r3, r2, r3
 8015b32:	461a      	mov	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b3a:	4a4f      	ldr	r2, [pc, #316]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b3c:	6093      	str	r3, [r2, #8]
            break;
 8015b3e:	e118      	b.n	8015d72 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015b40:	2000      	movs	r0, #0
 8015b42:	f001 ff25 	bl	8017990 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015b46:	4b4c      	ldr	r3, [pc, #304]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b48:	2200      	movs	r2, #0
 8015b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015b4e:	4a4a      	ldr	r2, [pc, #296]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015b54:	4b48      	ldr	r3, [pc, #288]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b56:	220b      	movs	r2, #11
 8015b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8015b5c:	68b8      	ldr	r0, [r7, #8]
 8015b5e:	f002 fd63 	bl	8018628 <SUBGRF_GetFskBandwidthRegValue>
 8015b62:	4603      	mov	r3, r0
 8015b64:	461a      	mov	r2, r3
 8015b66:	4b44      	ldr	r3, [pc, #272]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015b6c:	4b42      	ldr	r3, [pc, #264]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b6e:	2200      	movs	r2, #0
 8015b70:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015b72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015b74:	00db      	lsls	r3, r3, #3
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	4b3f      	ldr	r3, [pc, #252]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b7a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015b7c:	4b3e      	ldr	r3, [pc, #248]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b7e:	2204      	movs	r2, #4
 8015b80:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8015b82:	4b3d      	ldr	r3, [pc, #244]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b84:	2218      	movs	r2, #24
 8015b86:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015b88:	4b3b      	ldr	r3, [pc, #236]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015b8e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015b92:	f083 0301 	eor.w	r3, r3, #1
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	461a      	mov	r2, r3
 8015b9a:	4b37      	ldr	r3, [pc, #220]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015b9c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015b9e:	4b37      	ldr	r3, [pc, #220]	; (8015c7c <RadioSetRxConfig+0x310>)
 8015ba0:	781a      	ldrb	r2, [r3, #0]
 8015ba2:	4b35      	ldr	r3, [pc, #212]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015ba4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8015ba6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d003      	beq.n	8015bb6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015bae:	4b32      	ldr	r3, [pc, #200]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015bb0:	22f2      	movs	r2, #242	; 0xf2
 8015bb2:	75da      	strb	r2, [r3, #23]
 8015bb4:	e002      	b.n	8015bbc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015bb6:	4b30      	ldr	r3, [pc, #192]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015bb8:	2201      	movs	r2, #1
 8015bba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015bbc:	4b2e      	ldr	r3, [pc, #184]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8015bc2:	f000 fc76 	bl	80164b2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015bc6:	4b2c      	ldr	r3, [pc, #176]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	bf14      	ite	ne
 8015bd0:	2301      	movne	r3, #1
 8015bd2:	2300      	moveq	r3, #0
 8015bd4:	b2db      	uxtb	r3, r3
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7ff fdfa 	bl	80157d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015bdc:	4828      	ldr	r0, [pc, #160]	; (8015c80 <RadioSetRxConfig+0x314>)
 8015bde:	f002 f905 	bl	8017dec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015be2:	4828      	ldr	r0, [pc, #160]	; (8015c84 <RadioSetRxConfig+0x318>)
 8015be4:	f002 f9ce 	bl	8017f84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015be8:	4a28      	ldr	r2, [pc, #160]	; (8015c8c <RadioSetRxConfig+0x320>)
 8015bea:	f107 0314 	add.w	r3, r7, #20
 8015bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bf2:	e883 0003 	stmia.w	r3, {r0, r1}
 8015bf6:	f107 0314 	add.w	r3, r7, #20
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f001 fd01 	bl	8017602 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015c00:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015c04:	f001 fd4c 	bl	80176a0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8015c08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015c0a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8015c0e:	fb02 f303 	mul.w	r3, r2, r3
 8015c12:	461a      	mov	r2, r3
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8015c1a:	4a17      	ldr	r2, [pc, #92]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015c1c:	6093      	str	r3, [r2, #8]
            break;
 8015c1e:	e0a8      	b.n	8015d72 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015c20:	2000      	movs	r0, #0
 8015c22:	f001 feb5 	bl	8017990 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015c26:	4b14      	ldr	r3, [pc, #80]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015c28:	2201      	movs	r2, #1
 8015c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	b2da      	uxtb	r2, r3
 8015c32:	4b11      	ldr	r3, [pc, #68]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8015c38:	4a15      	ldr	r2, [pc, #84]	; (8015c90 <RadioSetRxConfig+0x324>)
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	4413      	add	r3, r2
 8015c3e:	781a      	ldrb	r2, [r3, #0]
 8015c40:	4b0d      	ldr	r3, [pc, #52]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8015c46:	4a0c      	ldr	r2, [pc, #48]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015c48:	7bbb      	ldrb	r3, [r7, #14]
 8015c4a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d105      	bne.n	8015c60 <RadioSetRxConfig+0x2f4>
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b0b      	cmp	r3, #11
 8015c58:	d008      	beq.n	8015c6c <RadioSetRxConfig+0x300>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	2b0c      	cmp	r3, #12
 8015c5e:	d005      	beq.n	8015c6c <RadioSetRxConfig+0x300>
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	2b01      	cmp	r3, #1
 8015c64:	d116      	bne.n	8015c94 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2b0c      	cmp	r3, #12
 8015c6a:	d113      	bne.n	8015c94 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8015c6c:	4b02      	ldr	r3, [pc, #8]	; (8015c78 <RadioSetRxConfig+0x30c>)
 8015c6e:	2201      	movs	r2, #1
 8015c70:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015c74:	e012      	b.n	8015c9c <RadioSetRxConfig+0x330>
 8015c76:	bf00      	nop
 8015c78:	20001778 	.word	0x20001778
 8015c7c:	20000120 	.word	0x20000120
 8015c80:	200017b0 	.word	0x200017b0
 8015c84:	20001786 	.word	0x20001786
 8015c88:	0801a77c 	.word	0x0801a77c
 8015c8c:	0801a784 	.word	0x0801a784
 8015c90:	0801ad80 	.word	0x0801ad80
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015c94:	4b39      	ldr	r3, [pc, #228]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015c96:	2200      	movs	r2, #0
 8015c98:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015c9c:	4b37      	ldr	r3, [pc, #220]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015ca2:	4b36      	ldr	r3, [pc, #216]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015ca8:	2b05      	cmp	r3, #5
 8015caa:	d004      	beq.n	8015cb6 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8015cac:	4b33      	ldr	r3, [pc, #204]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015cb2:	2b06      	cmp	r3, #6
 8015cb4:	d10a      	bne.n	8015ccc <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8015cb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015cb8:	2b0b      	cmp	r3, #11
 8015cba:	d803      	bhi.n	8015cc4 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8015cbc:	4b2f      	ldr	r3, [pc, #188]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cbe:	220c      	movs	r2, #12
 8015cc0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8015cc2:	e006      	b.n	8015cd2 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015cc4:	4a2d      	ldr	r2, [pc, #180]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015cc8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8015cca:	e002      	b.n	8015cd2 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015ccc:	4a2b      	ldr	r2, [pc, #172]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015cd0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8015cd2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015cd6:	4b29      	ldr	r3, [pc, #164]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cd8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015cda:	4b29      	ldr	r3, [pc, #164]	; (8015d80 <RadioSetRxConfig+0x414>)
 8015cdc:	781a      	ldrb	r2, [r3, #0]
 8015cde:	4b27      	ldr	r3, [pc, #156]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015ce0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8015ce2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8015ce6:	4b25      	ldr	r3, [pc, #148]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015ce8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8015cec:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8015cf0:	4b22      	ldr	r3, [pc, #136]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8015cf6:	f000 fbdc 	bl	80164b2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015cfa:	4b20      	ldr	r3, [pc, #128]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	bf14      	ite	ne
 8015d04:	2301      	movne	r3, #1
 8015d06:	2300      	moveq	r3, #0
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff fd60 	bl	80157d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015d10:	481c      	ldr	r0, [pc, #112]	; (8015d84 <RadioSetRxConfig+0x418>)
 8015d12:	f002 f86b 	bl	8017dec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015d16:	481c      	ldr	r0, [pc, #112]	; (8015d88 <RadioSetRxConfig+0x41c>)
 8015d18:	f002 f934 	bl	8017f84 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8015d1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	4618      	mov	r0, r3
 8015d22:	f001 fe44 	bl	80179ae <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8015d26:	4b15      	ldr	r3, [pc, #84]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015d28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8015d2c:	2b01      	cmp	r3, #1
 8015d2e:	d10d      	bne.n	8015d4c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8015d30:	f240 7036 	movw	r0, #1846	; 0x736
 8015d34:	f002 fa82 	bl	801823c <SUBGRF_ReadRegister>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	f023 0304 	bic.w	r3, r3, #4
 8015d3e:	b2db      	uxtb	r3, r3
 8015d40:	4619      	mov	r1, r3
 8015d42:	f240 7036 	movw	r0, #1846	; 0x736
 8015d46:	f002 fa65 	bl	8018214 <SUBGRF_WriteRegister>
 8015d4a:	e00c      	b.n	8015d66 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8015d4c:	f240 7036 	movw	r0, #1846	; 0x736
 8015d50:	f002 fa74 	bl	801823c <SUBGRF_ReadRegister>
 8015d54:	4603      	mov	r3, r0
 8015d56:	f043 0304 	orr.w	r3, r3, #4
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	f240 7036 	movw	r0, #1846	; 0x736
 8015d62:	f002 fa57 	bl	8018214 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8015d66:	4b05      	ldr	r3, [pc, #20]	; (8015d7c <RadioSetRxConfig+0x410>)
 8015d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d6c:	609a      	str	r2, [r3, #8]
            break;
 8015d6e:	e000      	b.n	8015d72 <RadioSetRxConfig+0x406>
            break;
 8015d70:	bf00      	nop
    }
}
 8015d72:	bf00      	nop
 8015d74:	3728      	adds	r7, #40	; 0x28
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	20001778 	.word	0x20001778
 8015d80:	20000120 	.word	0x20000120
 8015d84:	200017b0 	.word	0x200017b0
 8015d88:	20001786 	.word	0x20001786

08015d8c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b086      	sub	sp, #24
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	60ba      	str	r2, [r7, #8]
 8015d94:	607b      	str	r3, [r7, #4]
 8015d96:	4603      	mov	r3, r0
 8015d98:	73fb      	strb	r3, [r7, #15]
 8015d9a:	460b      	mov	r3, r1
 8015d9c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8015d9e:	f002 fd12 	bl	80187c6 <RFW_DeInit>
    switch( modem )
 8015da2:	7bfb      	ldrb	r3, [r7, #15]
 8015da4:	2b03      	cmp	r3, #3
 8015da6:	f000 80d7 	beq.w	8015f58 <RadioSetTxConfig+0x1cc>
 8015daa:	2b03      	cmp	r3, #3
 8015dac:	f300 80e6 	bgt.w	8015f7c <RadioSetTxConfig+0x1f0>
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d002      	beq.n	8015dba <RadioSetTxConfig+0x2e>
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d061      	beq.n	8015e7c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8015db8:	e0e0      	b.n	8015f7c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015dba:	4b7c      	ldr	r3, [pc, #496]	; (8015fac <RadioSetTxConfig+0x220>)
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015dc2:	4a7a      	ldr	r2, [pc, #488]	; (8015fac <RadioSetTxConfig+0x220>)
 8015dc4:	6a3b      	ldr	r3, [r7, #32]
 8015dc6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015dc8:	4b78      	ldr	r3, [pc, #480]	; (8015fac <RadioSetTxConfig+0x220>)
 8015dca:	220b      	movs	r2, #11
 8015dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f002 fc29 	bl	8018628 <SUBGRF_GetFskBandwidthRegValue>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	461a      	mov	r2, r3
 8015dda:	4b74      	ldr	r3, [pc, #464]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8015de0:	4a72      	ldr	r2, [pc, #456]	; (8015fac <RadioSetTxConfig+0x220>)
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015de6:	4b71      	ldr	r3, [pc, #452]	; (8015fac <RadioSetTxConfig+0x220>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015dec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015dee:	00db      	lsls	r3, r3, #3
 8015df0:	b29a      	uxth	r2, r3
 8015df2:	4b6e      	ldr	r3, [pc, #440]	; (8015fac <RadioSetTxConfig+0x220>)
 8015df4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015df6:	4b6d      	ldr	r3, [pc, #436]	; (8015fac <RadioSetTxConfig+0x220>)
 8015df8:	2204      	movs	r2, #4
 8015dfa:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8015dfc:	4b6b      	ldr	r3, [pc, #428]	; (8015fac <RadioSetTxConfig+0x220>)
 8015dfe:	2218      	movs	r2, #24
 8015e00:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015e02:	4b6a      	ldr	r3, [pc, #424]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e04:	2200      	movs	r2, #0
 8015e06:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015e08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015e0c:	f083 0301 	eor.w	r3, r3, #1
 8015e10:	b2db      	uxtb	r3, r3
 8015e12:	461a      	mov	r2, r3
 8015e14:	4b65      	ldr	r3, [pc, #404]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e16:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8015e18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d003      	beq.n	8015e28 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8015e20:	4b62      	ldr	r3, [pc, #392]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e22:	22f2      	movs	r2, #242	; 0xf2
 8015e24:	75da      	strb	r2, [r3, #23]
 8015e26:	e002      	b.n	8015e2e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8015e28:	4b60      	ldr	r3, [pc, #384]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015e2e:	4b5f      	ldr	r3, [pc, #380]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e30:	2201      	movs	r2, #1
 8015e32:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8015e34:	f000 fb3d 	bl	80164b2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015e38:	4b5c      	ldr	r3, [pc, #368]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	bf14      	ite	ne
 8015e42:	2301      	movne	r3, #1
 8015e44:	2300      	moveq	r3, #0
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7ff fcc1 	bl	80157d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015e4e:	4858      	ldr	r0, [pc, #352]	; (8015fb0 <RadioSetTxConfig+0x224>)
 8015e50:	f001 ffcc 	bl	8017dec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015e54:	4857      	ldr	r0, [pc, #348]	; (8015fb4 <RadioSetTxConfig+0x228>)
 8015e56:	f002 f895 	bl	8017f84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015e5a:	4a57      	ldr	r2, [pc, #348]	; (8015fb8 <RadioSetTxConfig+0x22c>)
 8015e5c:	f107 0310 	add.w	r3, r7, #16
 8015e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015e64:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e68:	f107 0310 	add.w	r3, r7, #16
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f001 fbc8 	bl	8017602 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015e76:	f001 fc13 	bl	80176a0 <SUBGRF_SetWhiteningSeed>
            break;
 8015e7a:	e080      	b.n	8015f7e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015e7c:	4b4b      	ldr	r3, [pc, #300]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e7e:	2201      	movs	r2, #1
 8015e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	b2da      	uxtb	r2, r3
 8015e88:	4b48      	ldr	r3, [pc, #288]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8015e8e:	4a4b      	ldr	r2, [pc, #300]	; (8015fbc <RadioSetTxConfig+0x230>)
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	4413      	add	r3, r2
 8015e94:	781a      	ldrb	r2, [r3, #0]
 8015e96:	4b45      	ldr	r3, [pc, #276]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8015e9c:	4a43      	ldr	r2, [pc, #268]	; (8015fac <RadioSetTxConfig+0x220>)
 8015e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ea2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d105      	bne.n	8015eb8 <RadioSetTxConfig+0x12c>
 8015eac:	6a3b      	ldr	r3, [r7, #32]
 8015eae:	2b0b      	cmp	r3, #11
 8015eb0:	d008      	beq.n	8015ec4 <RadioSetTxConfig+0x138>
 8015eb2:	6a3b      	ldr	r3, [r7, #32]
 8015eb4:	2b0c      	cmp	r3, #12
 8015eb6:	d005      	beq.n	8015ec4 <RadioSetTxConfig+0x138>
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	d107      	bne.n	8015ece <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015ebe:	6a3b      	ldr	r3, [r7, #32]
 8015ec0:	2b0c      	cmp	r3, #12
 8015ec2:	d104      	bne.n	8015ece <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8015ec4:	4b39      	ldr	r3, [pc, #228]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8015ecc:	e003      	b.n	8015ed6 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015ece:	4b37      	ldr	r3, [pc, #220]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8015ed6:	4b35      	ldr	r3, [pc, #212]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ed8:	2201      	movs	r2, #1
 8015eda:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015edc:	4b33      	ldr	r3, [pc, #204]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015ee2:	2b05      	cmp	r3, #5
 8015ee4:	d004      	beq.n	8015ef0 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8015ee6:	4b31      	ldr	r3, [pc, #196]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015eec:	2b06      	cmp	r3, #6
 8015eee:	d10a      	bne.n	8015f06 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8015ef0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015ef2:	2b0b      	cmp	r3, #11
 8015ef4:	d803      	bhi.n	8015efe <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8015ef6:	4b2d      	ldr	r3, [pc, #180]	; (8015fac <RadioSetTxConfig+0x220>)
 8015ef8:	220c      	movs	r2, #12
 8015efa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8015efc:	e006      	b.n	8015f0c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015efe:	4a2b      	ldr	r2, [pc, #172]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015f02:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8015f04:	e002      	b.n	8015f0c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015f06:	4a29      	ldr	r2, [pc, #164]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015f0a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8015f0c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015f10:	4b26      	ldr	r3, [pc, #152]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f12:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015f14:	4b2a      	ldr	r3, [pc, #168]	; (8015fc0 <RadioSetTxConfig+0x234>)
 8015f16:	781a      	ldrb	r2, [r3, #0]
 8015f18:	4b24      	ldr	r3, [pc, #144]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f1a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8015f1c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8015f20:	4b22      	ldr	r3, [pc, #136]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f22:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8015f26:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015f2a:	4b20      	ldr	r3, [pc, #128]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8015f30:	f000 fabf 	bl	80164b2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8015f34:	4b1d      	ldr	r3, [pc, #116]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	bf14      	ite	ne
 8015f3e:	2301      	movne	r3, #1
 8015f40:	2300      	moveq	r3, #0
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7ff fc43 	bl	80157d0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015f4a:	4819      	ldr	r0, [pc, #100]	; (8015fb0 <RadioSetTxConfig+0x224>)
 8015f4c:	f001 ff4e 	bl	8017dec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015f50:	4818      	ldr	r0, [pc, #96]	; (8015fb4 <RadioSetTxConfig+0x228>)
 8015f52:	f002 f817 	bl	8017f84 <SUBGRF_SetPacketParams>
            break;
 8015f56:	e012      	b.n	8015f7e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8015f58:	2003      	movs	r0, #3
 8015f5a:	f7ff fc39 	bl	80157d0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8015f5e:	4b13      	ldr	r3, [pc, #76]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f60:	2202      	movs	r2, #2
 8015f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8015f66:	4a11      	ldr	r2, [pc, #68]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f68:	6a3b      	ldr	r3, [r7, #32]
 8015f6a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8015f6c:	4b0f      	ldr	r3, [pc, #60]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f6e:	2216      	movs	r2, #22
 8015f70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015f74:	480e      	ldr	r0, [pc, #56]	; (8015fb0 <RadioSetTxConfig+0x224>)
 8015f76:	f001 ff39 	bl	8017dec <SUBGRF_SetModulationParams>
            break;
 8015f7a:	e000      	b.n	8015f7e <RadioSetTxConfig+0x1f2>
            break;
 8015f7c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8015f7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f82:	4618      	mov	r0, r3
 8015f84:	f002 fa62 	bl	801844c <SUBGRF_SetRfTxPower>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	4b07      	ldr	r3, [pc, #28]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f8e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8015f92:	4b06      	ldr	r3, [pc, #24]	; (8015fac <RadioSetTxConfig+0x220>)
 8015f94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f002 fc28 	bl	80187ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8015f9e:	4a03      	ldr	r2, [pc, #12]	; (8015fac <RadioSetTxConfig+0x220>)
 8015fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fa2:	6053      	str	r3, [r2, #4]
}
 8015fa4:	bf00      	nop
 8015fa6:	3718      	adds	r7, #24
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}
 8015fac:	20001778 	.word	0x20001778
 8015fb0:	200017b0 	.word	0x200017b0
 8015fb4:	20001786 	.word	0x20001786
 8015fb8:	0801a784 	.word	0x0801a784
 8015fbc:	0801ad80 	.word	0x0801ad80
 8015fc0:	20000120 	.word	0x20000120

08015fc4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8015fc4:	b480      	push	{r7}
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
    return true;
 8015fcc:	2301      	movs	r3, #1
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bc80      	pop	{r7}
 8015fd6:	4770      	bx	lr

08015fd8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b085      	sub	sp, #20
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	4603      	mov	r3, r0
 8015fe0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8015fe6:	79fb      	ldrb	r3, [r7, #7]
 8015fe8:	2b0a      	cmp	r3, #10
 8015fea:	d83e      	bhi.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
 8015fec:	a201      	add	r2, pc, #4	; (adr r2, 8015ff4 <RadioGetLoRaBandwidthInHz+0x1c>)
 8015fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff2:	bf00      	nop
 8015ff4:	08016021 	.word	0x08016021
 8015ff8:	08016031 	.word	0x08016031
 8015ffc:	08016041 	.word	0x08016041
 8016000:	08016051 	.word	0x08016051
 8016004:	08016059 	.word	0x08016059
 8016008:	0801605f 	.word	0x0801605f
 801600c:	08016065 	.word	0x08016065
 8016010:	0801606b 	.word	0x0801606b
 8016014:	08016029 	.word	0x08016029
 8016018:	08016039 	.word	0x08016039
 801601c:	08016049 	.word	0x08016049
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016020:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016024:	60fb      	str	r3, [r7, #12]
        break;
 8016026:	e020      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016028:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801602c:	60fb      	str	r3, [r7, #12]
        break;
 801602e:	e01c      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016030:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016034:	60fb      	str	r3, [r7, #12]
        break;
 8016036:	e018      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016038:	f245 1361 	movw	r3, #20833	; 0x5161
 801603c:	60fb      	str	r3, [r7, #12]
        break;
 801603e:	e014      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016040:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016044:	60fb      	str	r3, [r7, #12]
        break;
 8016046:	e010      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016048:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801604c:	60fb      	str	r3, [r7, #12]
        break;
 801604e:	e00c      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016050:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016054:	60fb      	str	r3, [r7, #12]
        break;
 8016056:	e008      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016058:	4b07      	ldr	r3, [pc, #28]	; (8016078 <RadioGetLoRaBandwidthInHz+0xa0>)
 801605a:	60fb      	str	r3, [r7, #12]
        break;
 801605c:	e005      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801605e:	4b07      	ldr	r3, [pc, #28]	; (801607c <RadioGetLoRaBandwidthInHz+0xa4>)
 8016060:	60fb      	str	r3, [r7, #12]
        break;
 8016062:	e002      	b.n	801606a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016064:	4b06      	ldr	r3, [pc, #24]	; (8016080 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016066:	60fb      	str	r3, [r7, #12]
        break;
 8016068:	bf00      	nop
    }

    return bandwidthInHz;
 801606a:	68fb      	ldr	r3, [r7, #12]
}
 801606c:	4618      	mov	r0, r3
 801606e:	3714      	adds	r7, #20
 8016070:	46bd      	mov	sp, r7
 8016072:	bc80      	pop	{r7}
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	0001e848 	.word	0x0001e848
 801607c:	0003d090 	.word	0x0003d090
 8016080:	0007a120 	.word	0x0007a120

08016084 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016084:	b480      	push	{r7}
 8016086:	b083      	sub	sp, #12
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	4608      	mov	r0, r1
 801608e:	4611      	mov	r1, r2
 8016090:	461a      	mov	r2, r3
 8016092:	4603      	mov	r3, r0
 8016094:	70fb      	strb	r3, [r7, #3]
 8016096:	460b      	mov	r3, r1
 8016098:	803b      	strh	r3, [r7, #0]
 801609a:	4613      	mov	r3, r2
 801609c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801609e:	883b      	ldrh	r3, [r7, #0]
 80160a0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80160a2:	78ba      	ldrb	r2, [r7, #2]
 80160a4:	f082 0201 	eor.w	r2, r2, #1
 80160a8:	b2d2      	uxtb	r2, r2
 80160aa:	2a00      	cmp	r2, #0
 80160ac:	d001      	beq.n	80160b2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80160ae:	2208      	movs	r2, #8
 80160b0:	e000      	b.n	80160b4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80160b2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80160b4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80160b6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80160ba:	7c3b      	ldrb	r3, [r7, #16]
 80160bc:	7d39      	ldrb	r1, [r7, #20]
 80160be:	2900      	cmp	r1, #0
 80160c0:	d001      	beq.n	80160c6 <RadioGetGfskTimeOnAirNumerator+0x42>
 80160c2:	2102      	movs	r1, #2
 80160c4:	e000      	b.n	80160c8 <RadioGetGfskTimeOnAirNumerator+0x44>
 80160c6:	2100      	movs	r1, #0
 80160c8:	440b      	add	r3, r1
 80160ca:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80160cc:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	370c      	adds	r7, #12
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bc80      	pop	{r7}
 80160d6:	4770      	bx	lr

080160d8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80160d8:	b480      	push	{r7}
 80160da:	b08b      	sub	sp, #44	; 0x2c
 80160dc:	af00      	add	r7, sp, #0
 80160de:	60f8      	str	r0, [r7, #12]
 80160e0:	60b9      	str	r1, [r7, #8]
 80160e2:	4611      	mov	r1, r2
 80160e4:	461a      	mov	r2, r3
 80160e6:	460b      	mov	r3, r1
 80160e8:	71fb      	strb	r3, [r7, #7]
 80160ea:	4613      	mov	r3, r2
 80160ec:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80160ee:	79fb      	ldrb	r3, [r7, #7]
 80160f0:	3304      	adds	r3, #4
 80160f2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80160f4:	2300      	movs	r3, #0
 80160f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80160fa:	68bb      	ldr	r3, [r7, #8]
 80160fc:	2b05      	cmp	r3, #5
 80160fe:	d002      	beq.n	8016106 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	2b06      	cmp	r3, #6
 8016104:	d104      	bne.n	8016110 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016106:	88bb      	ldrh	r3, [r7, #4]
 8016108:	2b0b      	cmp	r3, #11
 801610a:	d801      	bhi.n	8016110 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801610c:	230c      	movs	r3, #12
 801610e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d105      	bne.n	8016122 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	2b0b      	cmp	r3, #11
 801611a:	d008      	beq.n	801612e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	2b0c      	cmp	r3, #12
 8016120:	d005      	beq.n	801612e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2b01      	cmp	r3, #1
 8016126:	d105      	bne.n	8016134 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	2b0c      	cmp	r3, #12
 801612c:	d102      	bne.n	8016134 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801612e:	2301      	movs	r3, #1
 8016130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016134:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016138:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801613a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801613e:	2a00      	cmp	r2, #0
 8016140:	d001      	beq.n	8016146 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016142:	2210      	movs	r2, #16
 8016144:	e000      	b.n	8016148 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016146:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016148:	4413      	add	r3, r2
 801614a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016150:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016152:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016156:	2a00      	cmp	r2, #0
 8016158:	d001      	beq.n	801615e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801615a:	2200      	movs	r2, #0
 801615c:	e000      	b.n	8016160 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801615e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016160:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016162:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016164:	68bb      	ldr	r3, [r7, #8]
 8016166:	2b06      	cmp	r3, #6
 8016168:	d803      	bhi.n	8016172 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	009b      	lsls	r3, r3, #2
 801616e:	623b      	str	r3, [r7, #32]
 8016170:	e00e      	b.n	8016190 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	3308      	adds	r3, #8
 8016176:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801617c:	2b00      	cmp	r3, #0
 801617e:	d004      	beq.n	801618a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	3b02      	subs	r3, #2
 8016184:	009b      	lsls	r3, r3, #2
 8016186:	623b      	str	r3, [r7, #32]
 8016188:	e002      	b.n	8016190 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	009b      	lsls	r3, r3, #2
 801618e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	2b00      	cmp	r3, #0
 8016194:	da01      	bge.n	801619a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016196:	2300      	movs	r3, #0
 8016198:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801619a:	69fa      	ldr	r2, [r7, #28]
 801619c:	6a3b      	ldr	r3, [r7, #32]
 801619e:	4413      	add	r3, r2
 80161a0:	1e5a      	subs	r2, r3, #1
 80161a2:	6a3b      	ldr	r3, [r7, #32]
 80161a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80161a8:	697a      	ldr	r2, [r7, #20]
 80161aa:	fb02 f203 	mul.w	r2, r2, r3
 80161ae:	88bb      	ldrh	r3, [r7, #4]
 80161b0:	4413      	add	r3, r2
    int32_t intermediate =
 80161b2:	330c      	adds	r3, #12
 80161b4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	2b06      	cmp	r3, #6
 80161ba:	d802      	bhi.n	80161c2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80161bc:	69bb      	ldr	r3, [r7, #24]
 80161be:	3302      	adds	r3, #2
 80161c0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	009b      	lsls	r3, r3, #2
 80161c6:	1c5a      	adds	r2, r3, #1
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	3b02      	subs	r3, #2
 80161cc:	fa02 f303 	lsl.w	r3, r2, r3
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	372c      	adds	r7, #44	; 0x2c
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bc80      	pop	{r7}
 80161d8:	4770      	bx	lr
	...

080161dc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b08a      	sub	sp, #40	; 0x28
 80161e0:	af04      	add	r7, sp, #16
 80161e2:	60b9      	str	r1, [r7, #8]
 80161e4:	607a      	str	r2, [r7, #4]
 80161e6:	461a      	mov	r2, r3
 80161e8:	4603      	mov	r3, r0
 80161ea:	73fb      	strb	r3, [r7, #15]
 80161ec:	4613      	mov	r3, r2
 80161ee:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80161f0:	2300      	movs	r3, #0
 80161f2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80161f4:	2301      	movs	r3, #1
 80161f6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80161f8:	7bfb      	ldrb	r3, [r7, #15]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d002      	beq.n	8016204 <RadioTimeOnAir+0x28>
 80161fe:	2b01      	cmp	r3, #1
 8016200:	d017      	beq.n	8016232 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8016202:	e035      	b.n	8016270 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8016204:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8016208:	8c3a      	ldrh	r2, [r7, #32]
 801620a:	7bb9      	ldrb	r1, [r7, #14]
 801620c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016210:	9301      	str	r3, [sp, #4]
 8016212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	4603      	mov	r3, r0
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f7ff ff32 	bl	8016084 <RadioGetGfskTimeOnAirNumerator>
 8016220:	4603      	mov	r3, r0
 8016222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016226:	fb02 f303 	mul.w	r3, r2, r3
 801622a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	613b      	str	r3, [r7, #16]
        break;
 8016230:	e01e      	b.n	8016270 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8016232:	8c39      	ldrh	r1, [r7, #32]
 8016234:	7bba      	ldrb	r2, [r7, #14]
 8016236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801623a:	9302      	str	r3, [sp, #8]
 801623c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016240:	9301      	str	r3, [sp, #4]
 8016242:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016246:	9300      	str	r3, [sp, #0]
 8016248:	460b      	mov	r3, r1
 801624a:	6879      	ldr	r1, [r7, #4]
 801624c:	68b8      	ldr	r0, [r7, #8]
 801624e:	f7ff ff43 	bl	80160d8 <RadioGetLoRaTimeOnAirNumerator>
 8016252:	4603      	mov	r3, r0
 8016254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016258:	fb02 f303 	mul.w	r3, r2, r3
 801625c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801625e:	4a0a      	ldr	r2, [pc, #40]	; (8016288 <RadioTimeOnAir+0xac>)
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	4413      	add	r3, r2
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	4618      	mov	r0, r3
 8016268:	f7ff feb6 	bl	8015fd8 <RadioGetLoRaBandwidthInHz>
 801626c:	6138      	str	r0, [r7, #16]
        break;
 801626e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8016270:	697a      	ldr	r2, [r7, #20]
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	4413      	add	r3, r2
 8016276:	1e5a      	subs	r2, r3, #1
 8016278:	693b      	ldr	r3, [r7, #16]
 801627a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801627e:	4618      	mov	r0, r3
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	0801ad80 	.word	0x0801ad80

0801628c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b084      	sub	sp, #16
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
 8016294:	460b      	mov	r3, r1
 8016296:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8016298:	2300      	movs	r3, #0
 801629a:	2200      	movs	r2, #0
 801629c:	f240 2101 	movw	r1, #513	; 0x201
 80162a0:	f240 2001 	movw	r0, #513	; 0x201
 80162a4:	f001 fc78 	bl	8017b98 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 80162a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80162ac:	4871      	ldr	r0, [pc, #452]	; (8016474 <RadioSend+0x1e8>)
 80162ae:	f7ff fa07 	bl	80156c0 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80162b2:	4b71      	ldr	r3, [pc, #452]	; (8016478 <RadioSend+0x1ec>)
 80162b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80162b8:	2101      	movs	r1, #1
 80162ba:	4618      	mov	r0, r3
 80162bc:	f002 f89e 	bl	80183fc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80162c0:	4b6d      	ldr	r3, [pc, #436]	; (8016478 <RadioSend+0x1ec>)
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	d112      	bne.n	80162ee <RadioSend+0x62>
 80162c8:	4b6b      	ldr	r3, [pc, #428]	; (8016478 <RadioSend+0x1ec>)
 80162ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80162ce:	2b06      	cmp	r3, #6
 80162d0:	d10d      	bne.n	80162ee <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80162d2:	f640 0089 	movw	r0, #2185	; 0x889
 80162d6:	f001 ffb1 	bl	801823c <SUBGRF_ReadRegister>
 80162da:	4603      	mov	r3, r0
 80162dc:	f023 0304 	bic.w	r3, r3, #4
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	4619      	mov	r1, r3
 80162e4:	f640 0089 	movw	r0, #2185	; 0x889
 80162e8:	f001 ff94 	bl	8018214 <SUBGRF_WriteRegister>
 80162ec:	e00c      	b.n	8016308 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80162ee:	f640 0089 	movw	r0, #2185	; 0x889
 80162f2:	f001 ffa3 	bl	801823c <SUBGRF_ReadRegister>
 80162f6:	4603      	mov	r3, r0
 80162f8:	f043 0304 	orr.w	r3, r3, #4
 80162fc:	b2db      	uxtb	r3, r3
 80162fe:	4619      	mov	r1, r3
 8016300:	f640 0089 	movw	r0, #2185	; 0x889
 8016304:	f001 ff86 	bl	8018214 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8016308:	4b5b      	ldr	r3, [pc, #364]	; (8016478 <RadioSend+0x1ec>)
 801630a:	781b      	ldrb	r3, [r3, #0]
 801630c:	2b03      	cmp	r3, #3
 801630e:	f200 80a4 	bhi.w	801645a <RadioSend+0x1ce>
 8016312:	a201      	add	r2, pc, #4	; (adr r2, 8016318 <RadioSend+0x8c>)
 8016314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016318:	08016343 	.word	0x08016343
 801631c:	08016329 	.word	0x08016329
 8016320:	080163a3 	.word	0x080163a3
 8016324:	080163c3 	.word	0x080163c3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8016328:	4a53      	ldr	r2, [pc, #332]	; (8016478 <RadioSend+0x1ec>)
 801632a:	78fb      	ldrb	r3, [r7, #3]
 801632c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801632e:	4853      	ldr	r0, [pc, #332]	; (801647c <RadioSend+0x1f0>)
 8016330:	f001 fe28 	bl	8017f84 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8016334:	78fb      	ldrb	r3, [r7, #3]
 8016336:	2200      	movs	r2, #0
 8016338:	4619      	mov	r1, r3
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	f001 f94e 	bl	80175dc <SUBGRF_SendPayload>
            break;
 8016340:	e08c      	b.n	801645c <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8016342:	f002 fa46 	bl	80187d2 <RFW_Is_Init>
 8016346:	4603      	mov	r3, r0
 8016348:	2b01      	cmp	r3, #1
 801634a:	d11d      	bne.n	8016388 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801634c:	f107 020d 	add.w	r2, r7, #13
 8016350:	78fb      	ldrb	r3, [r7, #3]
 8016352:	4619      	mov	r1, r3
 8016354:	6878      	ldr	r0, [r7, #4]
 8016356:	f002 fa54 	bl	8018802 <RFW_TransmitInit>
 801635a:	4603      	mov	r3, r0
 801635c:	2b00      	cmp	r3, #0
 801635e:	d10c      	bne.n	801637a <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8016360:	7b7a      	ldrb	r2, [r7, #13]
 8016362:	4b45      	ldr	r3, [pc, #276]	; (8016478 <RadioSend+0x1ec>)
 8016364:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016366:	4845      	ldr	r0, [pc, #276]	; (801647c <RadioSend+0x1f0>)
 8016368:	f001 fe0c 	bl	8017f84 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801636c:	7b7b      	ldrb	r3, [r7, #13]
 801636e:	2200      	movs	r2, #0
 8016370:	4619      	mov	r1, r3
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f001 f932 	bl	80175dc <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8016378:	e070      	b.n	801645c <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801637a:	4b41      	ldr	r3, [pc, #260]	; (8016480 <RadioSend+0x1f4>)
 801637c:	2201      	movs	r2, #1
 801637e:	2100      	movs	r1, #0
 8016380:	2002      	movs	r0, #2
 8016382:	f003 fb4b 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
 8016386:	e072      	b.n	801646e <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8016388:	4a3b      	ldr	r2, [pc, #236]	; (8016478 <RadioSend+0x1ec>)
 801638a:	78fb      	ldrb	r3, [r7, #3]
 801638c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801638e:	483b      	ldr	r0, [pc, #236]	; (801647c <RadioSend+0x1f0>)
 8016390:	f001 fdf8 	bl	8017f84 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8016394:	78fb      	ldrb	r3, [r7, #3]
 8016396:	2200      	movs	r2, #0
 8016398:	4619      	mov	r1, r3
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f001 f91e 	bl	80175dc <SUBGRF_SendPayload>
            break;
 80163a0:	e05c      	b.n	801645c <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80163a2:	4b35      	ldr	r3, [pc, #212]	; (8016478 <RadioSend+0x1ec>)
 80163a4:	2202      	movs	r2, #2
 80163a6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80163a8:	4a33      	ldr	r2, [pc, #204]	; (8016478 <RadioSend+0x1ec>)
 80163aa:	78fb      	ldrb	r3, [r7, #3]
 80163ac:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80163ae:	4833      	ldr	r0, [pc, #204]	; (801647c <RadioSend+0x1f0>)
 80163b0:	f001 fde8 	bl	8017f84 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80163b4:	78fb      	ldrb	r3, [r7, #3]
 80163b6:	2200      	movs	r2, #0
 80163b8:	4619      	mov	r1, r3
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f001 f90e 	bl	80175dc <SUBGRF_SendPayload>
            break;
 80163c0:	e04c      	b.n	801645c <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80163c2:	78fb      	ldrb	r3, [r7, #3]
 80163c4:	461a      	mov	r2, r3
 80163c6:	6879      	ldr	r1, [r7, #4]
 80163c8:	482e      	ldr	r0, [pc, #184]	; (8016484 <RadioSend+0x1f8>)
 80163ca:	f000 fc8e 	bl	8016cea <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80163ce:	4b2a      	ldr	r3, [pc, #168]	; (8016478 <RadioSend+0x1ec>)
 80163d0:	2202      	movs	r2, #2
 80163d2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80163d4:	78fb      	ldrb	r3, [r7, #3]
 80163d6:	3301      	adds	r3, #1
 80163d8:	b2da      	uxtb	r2, r3
 80163da:	4b27      	ldr	r3, [pc, #156]	; (8016478 <RadioSend+0x1ec>)
 80163dc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80163de:	4827      	ldr	r0, [pc, #156]	; (801647c <RadioSend+0x1f0>)
 80163e0:	f001 fdd0 	bl	8017f84 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80163e4:	2100      	movs	r1, #0
 80163e6:	20f1      	movs	r0, #241	; 0xf1
 80163e8:	f000 f94f 	bl	801668a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80163ec:	2100      	movs	r1, #0
 80163ee:	20f0      	movs	r0, #240	; 0xf0
 80163f0:	f000 f94b 	bl	801668a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80163f4:	4b20      	ldr	r3, [pc, #128]	; (8016478 <RadioSend+0x1ec>)
 80163f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163f8:	2b64      	cmp	r3, #100	; 0x64
 80163fa:	d108      	bne.n	801640e <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80163fc:	2170      	movs	r1, #112	; 0x70
 80163fe:	20f3      	movs	r0, #243	; 0xf3
 8016400:	f000 f943 	bl	801668a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8016404:	211d      	movs	r1, #29
 8016406:	20f2      	movs	r0, #242	; 0xf2
 8016408:	f000 f93f 	bl	801668a <RadioWrite>
 801640c:	e007      	b.n	801641e <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 801640e:	21e1      	movs	r1, #225	; 0xe1
 8016410:	20f3      	movs	r0, #243	; 0xf3
 8016412:	f000 f93a 	bl	801668a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8016416:	2104      	movs	r1, #4
 8016418:	20f2      	movs	r0, #242	; 0xf2
 801641a:	f000 f936 	bl	801668a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801641e:	78fb      	ldrb	r3, [r7, #3]
 8016420:	b29b      	uxth	r3, r3
 8016422:	00db      	lsls	r3, r3, #3
 8016424:	b29b      	uxth	r3, r3
 8016426:	3302      	adds	r3, #2
 8016428:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801642a:	89fb      	ldrh	r3, [r7, #14]
 801642c:	0a1b      	lsrs	r3, r3, #8
 801642e:	b29b      	uxth	r3, r3
 8016430:	b2db      	uxtb	r3, r3
 8016432:	4619      	mov	r1, r3
 8016434:	20f4      	movs	r0, #244	; 0xf4
 8016436:	f000 f928 	bl	801668a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801643a:	89fb      	ldrh	r3, [r7, #14]
 801643c:	b2db      	uxtb	r3, r3
 801643e:	4619      	mov	r1, r3
 8016440:	20f5      	movs	r0, #245	; 0xf5
 8016442:	f000 f922 	bl	801668a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8016446:	78fb      	ldrb	r3, [r7, #3]
 8016448:	3301      	adds	r3, #1
 801644a:	b2db      	uxtb	r3, r3
 801644c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8016450:	4619      	mov	r1, r3
 8016452:	480c      	ldr	r0, [pc, #48]	; (8016484 <RadioSend+0x1f8>)
 8016454:	f001 f8c2 	bl	80175dc <SUBGRF_SendPayload>
            break;
 8016458:	e000      	b.n	801645c <RadioSend+0x1d0>
        }
        default:
            break;
 801645a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801645c:	4b06      	ldr	r3, [pc, #24]	; (8016478 <RadioSend+0x1ec>)
 801645e:	685b      	ldr	r3, [r3, #4]
 8016460:	4619      	mov	r1, r3
 8016462:	4809      	ldr	r0, [pc, #36]	; (8016488 <RadioSend+0x1fc>)
 8016464:	f003 f940 	bl	80196e8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8016468:	4807      	ldr	r0, [pc, #28]	; (8016488 <RadioSend+0x1fc>)
 801646a:	f003 f85f 	bl	801952c <UTIL_TIMER_Start>
}
 801646e:	3710      	adds	r7, #16
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	48000400 	.word	0x48000400
 8016478:	20001778 	.word	0x20001778
 801647c:	20001786 	.word	0x20001786
 8016480:	0801a78c 	.word	0x0801a78c
 8016484:	20000dd8 	.word	0x20000dd8
 8016488:	200017d0 	.word	0x200017d0

0801648c <RadioSleep>:

static void RadioSleep( void )
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8016492:	2300      	movs	r3, #0
 8016494:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8016496:	793b      	ldrb	r3, [r7, #4]
 8016498:	f043 0304 	orr.w	r3, r3, #4
 801649c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801649e:	7938      	ldrb	r0, [r7, #4]
 80164a0:	f001 f978 	bl	8017794 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80164a4:	2002      	movs	r0, #2
 80164a6:	f7eb fa50 	bl	800194a <HAL_Delay>
}
 80164aa:	bf00      	nop
 80164ac:	3708      	adds	r7, #8
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}

080164b2 <RadioStandby>:

static void RadioStandby( void )
{
 80164b2:	b580      	push	{r7, lr}
 80164b4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80164b6:	2000      	movs	r0, #0
 80164b8:	f001 f99e 	bl	80177f8 <SUBGRF_SetStandby>
}
 80164bc:	bf00      	nop
 80164be:	bd80      	pop	{r7, pc}

080164c0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 80164c8:	f002 f983 	bl	80187d2 <RFW_Is_Init>
 80164cc:	4603      	mov	r3, r0
 80164ce:	2b01      	cmp	r3, #1
 80164d0:	d102      	bne.n	80164d8 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 80164d2:	f002 f9a6 	bl	8018822 <RFW_ReceiveInit>
 80164d6:	e007      	b.n	80164e8 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80164d8:	2300      	movs	r3, #0
 80164da:	2200      	movs	r2, #0
 80164dc:	f240 2162 	movw	r1, #610	; 0x262
 80164e0:	f240 2062 	movw	r0, #610	; 0x262
 80164e4:	f001 fb58 	bl	8017b98 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d006      	beq.n	80164fc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80164ee:	6879      	ldr	r1, [r7, #4]
 80164f0:	4812      	ldr	r0, [pc, #72]	; (801653c <RadioRx+0x7c>)
 80164f2:	f003 f8f9 	bl	80196e8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80164f6:	4811      	ldr	r0, [pc, #68]	; (801653c <RadioRx+0x7c>)
 80164f8:	f003 f818 	bl	801952c <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 80164fc:	2101      	movs	r1, #1
 80164fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016502:	f7ff f8dd 	bl	80156c0 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8016506:	4b0e      	ldr	r3, [pc, #56]	; (8016540 <RadioRx+0x80>)
 8016508:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801650c:	2100      	movs	r1, #0
 801650e:	4618      	mov	r0, r3
 8016510:	f001 ff74 	bl	80183fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8016514:	4b0a      	ldr	r3, [pc, #40]	; (8016540 <RadioRx+0x80>)
 8016516:	785b      	ldrb	r3, [r3, #1]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d004      	beq.n	8016526 <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801651c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8016520:	f001 f9a6 	bl	8017870 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8016524:	e005      	b.n	8016532 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8016526:	4b06      	ldr	r3, [pc, #24]	; (8016540 <RadioRx+0x80>)
 8016528:	689b      	ldr	r3, [r3, #8]
 801652a:	019b      	lsls	r3, r3, #6
 801652c:	4618      	mov	r0, r3
 801652e:	f001 f99f 	bl	8017870 <SUBGRF_SetRx>
}
 8016532:	bf00      	nop
 8016534:	3708      	adds	r7, #8
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	200017e8 	.word	0x200017e8
 8016540:	20001778 	.word	0x20001778

08016544 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 801654c:	f002 f941 	bl	80187d2 <RFW_Is_Init>
 8016550:	4603      	mov	r3, r0
 8016552:	2b01      	cmp	r3, #1
 8016554:	d102      	bne.n	801655c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8016556:	f002 f964 	bl	8018822 <RFW_ReceiveInit>
 801655a:	e007      	b.n	801656c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801655c:	2300      	movs	r3, #0
 801655e:	2200      	movs	r2, #0
 8016560:	f240 2162 	movw	r1, #610	; 0x262
 8016564:	f240 2062 	movw	r0, #610	; 0x262
 8016568:	f001 fb16 	bl	8017b98 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d006      	beq.n	8016580 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8016572:	6879      	ldr	r1, [r7, #4]
 8016574:	480f      	ldr	r0, [pc, #60]	; (80165b4 <RadioRxBoosted+0x70>)
 8016576:	f003 f8b7 	bl	80196e8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801657a:	480e      	ldr	r0, [pc, #56]	; (80165b4 <RadioRxBoosted+0x70>)
 801657c:	f002 ffd6 	bl	801952c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8016580:	4b0d      	ldr	r3, [pc, #52]	; (80165b8 <RadioRxBoosted+0x74>)
 8016582:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016586:	2100      	movs	r1, #0
 8016588:	4618      	mov	r0, r3
 801658a:	f001 ff37 	bl	80183fc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801658e:	4b0a      	ldr	r3, [pc, #40]	; (80165b8 <RadioRxBoosted+0x74>)
 8016590:	785b      	ldrb	r3, [r3, #1]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d004      	beq.n	80165a0 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8016596:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801659a:	f001 f989 	bl	80178b0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801659e:	e005      	b.n	80165ac <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80165a0:	4b05      	ldr	r3, [pc, #20]	; (80165b8 <RadioRxBoosted+0x74>)
 80165a2:	689b      	ldr	r3, [r3, #8]
 80165a4:	019b      	lsls	r3, r3, #6
 80165a6:	4618      	mov	r0, r3
 80165a8:	f001 f982 	bl	80178b0 <SUBGRF_SetRxBoosted>
}
 80165ac:	bf00      	nop
 80165ae:	3708      	adds	r7, #8
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	200017e8 	.word	0x200017e8
 80165b8:	20001778 	.word	0x20001778

080165bc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
 80165c4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80165c6:	4b07      	ldr	r3, [pc, #28]	; (80165e4 <RadioSetRxDutyCycle+0x28>)
 80165c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80165cc:	2100      	movs	r1, #0
 80165ce:	4618      	mov	r0, r3
 80165d0:	f001 ff14 	bl	80183fc <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f001 f98e 	bl	80178f8 <SUBGRF_SetRxDutyCycle>
}
 80165dc:	bf00      	nop
 80165de:	3708      	adds	r7, #8
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}
 80165e4:	20001778 	.word	0x20001778

080165e8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80165ec:	4b09      	ldr	r3, [pc, #36]	; (8016614 <RadioStartCad+0x2c>)
 80165ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80165f2:	2100      	movs	r1, #0
 80165f4:	4618      	mov	r0, r3
 80165f6:	f001 ff01 	bl	80183fc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80165fa:	2300      	movs	r3, #0
 80165fc:	2200      	movs	r2, #0
 80165fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8016602:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8016606:	f001 fac7 	bl	8017b98 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801660a:	f001 f9a1 	bl	8017950 <SUBGRF_SetCad>
}
 801660e:	bf00      	nop
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	20001778 	.word	0x20001778

08016618 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	460b      	mov	r3, r1
 8016622:	70fb      	strb	r3, [r7, #3]
 8016624:	4613      	mov	r3, r2
 8016626:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8016628:	883b      	ldrh	r3, [r7, #0]
 801662a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801662e:	fb02 f303 	mul.w	r3, r2, r3
 8016632:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f001 fb0b 	bl	8017c50 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801663a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801663e:	4618      	mov	r0, r3
 8016640:	f001 ff04 	bl	801844c <SUBGRF_SetRfTxPower>
 8016644:	4603      	mov	r3, r0
 8016646:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8016648:	7afb      	ldrb	r3, [r7, #11]
 801664a:	2101      	movs	r1, #1
 801664c:	4618      	mov	r0, r3
 801664e:	f001 fed5 	bl	80183fc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8016652:	f001 f98b 	bl	801796c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8016656:	68f9      	ldr	r1, [r7, #12]
 8016658:	4804      	ldr	r0, [pc, #16]	; (801666c <RadioSetTxContinuousWave+0x54>)
 801665a:	f003 f845 	bl	80196e8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801665e:	4803      	ldr	r0, [pc, #12]	; (801666c <RadioSetTxContinuousWave+0x54>)
 8016660:	f002 ff64 	bl	801952c <UTIL_TIMER_Start>
}
 8016664:	bf00      	nop
 8016666:	3710      	adds	r7, #16
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	200017d0 	.word	0x200017d0

08016670 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	4603      	mov	r3, r0
 8016678:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801667a:	f001 fd38 	bl	80180ee <SUBGRF_GetRssiInst>
 801667e:	4603      	mov	r3, r0
 8016680:	b21b      	sxth	r3, r3
}
 8016682:	4618      	mov	r0, r3
 8016684:	3708      	adds	r7, #8
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}

0801668a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801668a:	b580      	push	{r7, lr}
 801668c:	b082      	sub	sp, #8
 801668e:	af00      	add	r7, sp, #0
 8016690:	4603      	mov	r3, r0
 8016692:	460a      	mov	r2, r1
 8016694:	80fb      	strh	r3, [r7, #6]
 8016696:	4613      	mov	r3, r2
 8016698:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801669a:	797a      	ldrb	r2, [r7, #5]
 801669c:	88fb      	ldrh	r3, [r7, #6]
 801669e:	4611      	mov	r1, r2
 80166a0:	4618      	mov	r0, r3
 80166a2:	f001 fdb7 	bl	8018214 <SUBGRF_WriteRegister>
}
 80166a6:	bf00      	nop
 80166a8:	3708      	adds	r7, #8
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}

080166ae <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80166ae:	b580      	push	{r7, lr}
 80166b0:	b082      	sub	sp, #8
 80166b2:	af00      	add	r7, sp, #0
 80166b4:	4603      	mov	r3, r0
 80166b6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80166b8:	88fb      	ldrh	r3, [r7, #6]
 80166ba:	4618      	mov	r0, r3
 80166bc:	f001 fdbe 	bl	801823c <SUBGRF_ReadRegister>
 80166c0:	4603      	mov	r3, r0
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3708      	adds	r7, #8
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}

080166ca <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80166ca:	b580      	push	{r7, lr}
 80166cc:	b082      	sub	sp, #8
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	4603      	mov	r3, r0
 80166d2:	6039      	str	r1, [r7, #0]
 80166d4:	80fb      	strh	r3, [r7, #6]
 80166d6:	4613      	mov	r3, r2
 80166d8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80166da:	797b      	ldrb	r3, [r7, #5]
 80166dc:	b29a      	uxth	r2, r3
 80166de:	88fb      	ldrh	r3, [r7, #6]
 80166e0:	6839      	ldr	r1, [r7, #0]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f001 fdbe 	bl	8018264 <SUBGRF_WriteRegisters>
}
 80166e8:	bf00      	nop
 80166ea:	3708      	adds	r7, #8
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	4603      	mov	r3, r0
 80166f8:	6039      	str	r1, [r7, #0]
 80166fa:	80fb      	strh	r3, [r7, #6]
 80166fc:	4613      	mov	r3, r2
 80166fe:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8016700:	797b      	ldrb	r3, [r7, #5]
 8016702:	b29a      	uxth	r2, r3
 8016704:	88fb      	ldrh	r3, [r7, #6]
 8016706:	6839      	ldr	r1, [r7, #0]
 8016708:	4618      	mov	r0, r3
 801670a:	f001 fdcd 	bl	80182a8 <SUBGRF_ReadRegisters>
}
 801670e:	bf00      	nop
 8016710:	3708      	adds	r7, #8
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
	...

08016718 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	4603      	mov	r3, r0
 8016720:	460a      	mov	r2, r1
 8016722:	71fb      	strb	r3, [r7, #7]
 8016724:	4613      	mov	r3, r2
 8016726:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8016728:	79fb      	ldrb	r3, [r7, #7]
 801672a:	2b01      	cmp	r3, #1
 801672c:	d10a      	bne.n	8016744 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801672e:	4a0e      	ldr	r2, [pc, #56]	; (8016768 <RadioSetMaxPayloadLength+0x50>)
 8016730:	79bb      	ldrb	r3, [r7, #6]
 8016732:	7013      	strb	r3, [r2, #0]
 8016734:	4b0c      	ldr	r3, [pc, #48]	; (8016768 <RadioSetMaxPayloadLength+0x50>)
 8016736:	781a      	ldrb	r2, [r3, #0]
 8016738:	4b0c      	ldr	r3, [pc, #48]	; (801676c <RadioSetMaxPayloadLength+0x54>)
 801673a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801673c:	480c      	ldr	r0, [pc, #48]	; (8016770 <RadioSetMaxPayloadLength+0x58>)
 801673e:	f001 fc21 	bl	8017f84 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8016742:	e00d      	b.n	8016760 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8016744:	4b09      	ldr	r3, [pc, #36]	; (801676c <RadioSetMaxPayloadLength+0x54>)
 8016746:	7d5b      	ldrb	r3, [r3, #21]
 8016748:	2b01      	cmp	r3, #1
 801674a:	d109      	bne.n	8016760 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801674c:	4a06      	ldr	r2, [pc, #24]	; (8016768 <RadioSetMaxPayloadLength+0x50>)
 801674e:	79bb      	ldrb	r3, [r7, #6]
 8016750:	7013      	strb	r3, [r2, #0]
 8016752:	4b05      	ldr	r3, [pc, #20]	; (8016768 <RadioSetMaxPayloadLength+0x50>)
 8016754:	781a      	ldrb	r2, [r3, #0]
 8016756:	4b05      	ldr	r3, [pc, #20]	; (801676c <RadioSetMaxPayloadLength+0x54>)
 8016758:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801675a:	4805      	ldr	r0, [pc, #20]	; (8016770 <RadioSetMaxPayloadLength+0x58>)
 801675c:	f001 fc12 	bl	8017f84 <SUBGRF_SetPacketParams>
}
 8016760:	bf00      	nop
 8016762:	3708      	adds	r7, #8
 8016764:	46bd      	mov	sp, r7
 8016766:	bd80      	pop	{r7, pc}
 8016768:	20000120 	.word	0x20000120
 801676c:	20001778 	.word	0x20001778
 8016770:	20001786 	.word	0x20001786

08016774 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	4603      	mov	r3, r0
 801677c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801677e:	4a13      	ldr	r2, [pc, #76]	; (80167cc <RadioSetPublicNetwork+0x58>)
 8016780:	79fb      	ldrb	r3, [r7, #7]
 8016782:	7313      	strb	r3, [r2, #12]
 8016784:	4b11      	ldr	r3, [pc, #68]	; (80167cc <RadioSetPublicNetwork+0x58>)
 8016786:	7b1a      	ldrb	r2, [r3, #12]
 8016788:	4b10      	ldr	r3, [pc, #64]	; (80167cc <RadioSetPublicNetwork+0x58>)
 801678a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801678c:	2001      	movs	r0, #1
 801678e:	f7ff f81f 	bl	80157d0 <RadioSetModem>
    if( enable == true )
 8016792:	79fb      	ldrb	r3, [r7, #7]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d00a      	beq.n	80167ae <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8016798:	2134      	movs	r1, #52	; 0x34
 801679a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801679e:	f001 fd39 	bl	8018214 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80167a2:	2144      	movs	r1, #68	; 0x44
 80167a4:	f240 7041 	movw	r0, #1857	; 0x741
 80167a8:	f001 fd34 	bl	8018214 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80167ac:	e009      	b.n	80167c2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80167ae:	2114      	movs	r1, #20
 80167b0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80167b4:	f001 fd2e 	bl	8018214 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80167b8:	2124      	movs	r1, #36	; 0x24
 80167ba:	f240 7041 	movw	r0, #1857	; 0x741
 80167be:	f001 fd29 	bl	8018214 <SUBGRF_WriteRegister>
}
 80167c2:	bf00      	nop
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	20001778 	.word	0x20001778

080167d0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80167d4:	f001 fe6e 	bl	80184b4 <SUBGRF_GetRadioWakeUpTime>
 80167d8:	4603      	mov	r3, r0
 80167da:	3303      	adds	r3, #3
}
 80167dc:	4618      	mov	r0, r3
 80167de:	bd80      	pop	{r7, pc}

080167e0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80167e8:	f000 f80e 	bl	8016808 <RadioOnTxTimeoutProcess>
}
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80167fc:	f000 f81e 	bl	801683c <RadioOnRxTimeoutProcess>
}
 8016800:	bf00      	nop
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8016808:	b580      	push	{r7, lr}
 801680a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 801680c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016810:	4808      	ldr	r0, [pc, #32]	; (8016834 <RadioOnTxTimeoutProcess+0x2c>)
 8016812:	f7fe ff62 	bl	80156da <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016816:	4b08      	ldr	r3, [pc, #32]	; (8016838 <RadioOnTxTimeoutProcess+0x30>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d008      	beq.n	8016830 <RadioOnTxTimeoutProcess+0x28>
 801681e:	4b06      	ldr	r3, [pc, #24]	; (8016838 <RadioOnTxTimeoutProcess+0x30>)
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d003      	beq.n	8016830 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8016828:	4b03      	ldr	r3, [pc, #12]	; (8016838 <RadioOnTxTimeoutProcess+0x30>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	4798      	blx	r3
    }
}
 8016830:	bf00      	nop
 8016832:	bd80      	pop	{r7, pc}
 8016834:	48000400 	.word	0x48000400
 8016838:	20000ed8 	.word	0x20000ed8

0801683c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801683c:	b580      	push	{r7, lr}
 801683e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8016840:	2101      	movs	r1, #1
 8016842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016846:	f7fe ff48 	bl	80156da <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801684a:	4b07      	ldr	r3, [pc, #28]	; (8016868 <RadioOnRxTimeoutProcess+0x2c>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d008      	beq.n	8016864 <RadioOnRxTimeoutProcess+0x28>
 8016852:	4b05      	ldr	r3, [pc, #20]	; (8016868 <RadioOnRxTimeoutProcess+0x2c>)
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	68db      	ldr	r3, [r3, #12]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d003      	beq.n	8016864 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 801685c:	4b02      	ldr	r3, [pc, #8]	; (8016868 <RadioOnRxTimeoutProcess+0x2c>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	4798      	blx	r3
    }
}
 8016864:	bf00      	nop
 8016866:	bd80      	pop	{r7, pc}
 8016868:	20000ed8 	.word	0x20000ed8

0801686c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	4603      	mov	r3, r0
 8016874:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8016876:	4a05      	ldr	r2, [pc, #20]	; (801688c <RadioOnDioIrq+0x20>)
 8016878:	88fb      	ldrh	r3, [r7, #6]
 801687a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801687e:	f000 f807 	bl	8016890 <RadioIrqProcess>
}
 8016882:	bf00      	nop
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	20001778 	.word	0x20001778

08016890 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8016890:	b590      	push	{r4, r7, lr}
 8016892:	b083      	sub	sp, #12
 8016894:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8016896:	2300      	movs	r3, #0
 8016898:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801689a:	2300      	movs	r3, #0
 801689c:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801689e:	4bbf      	ldr	r3, [pc, #764]	; (8016b9c <RadioIrqProcess+0x30c>)
 80168a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80168a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168a8:	f000 8116 	beq.w	8016ad8 <RadioIrqProcess+0x248>
 80168ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168b0:	f300 81cb 	bgt.w	8016c4a <RadioIrqProcess+0x3ba>
 80168b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168b8:	f000 80fa 	beq.w	8016ab0 <RadioIrqProcess+0x220>
 80168bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80168c0:	f300 81c3 	bgt.w	8016c4a <RadioIrqProcess+0x3ba>
 80168c4:	2b80      	cmp	r3, #128	; 0x80
 80168c6:	f000 80df 	beq.w	8016a88 <RadioIrqProcess+0x1f8>
 80168ca:	2b80      	cmp	r3, #128	; 0x80
 80168cc:	f300 81bd 	bgt.w	8016c4a <RadioIrqProcess+0x3ba>
 80168d0:	2b20      	cmp	r3, #32
 80168d2:	dc49      	bgt.n	8016968 <RadioIrqProcess+0xd8>
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	f340 81b8 	ble.w	8016c4a <RadioIrqProcess+0x3ba>
 80168da:	3b01      	subs	r3, #1
 80168dc:	2b1f      	cmp	r3, #31
 80168de:	f200 81b4 	bhi.w	8016c4a <RadioIrqProcess+0x3ba>
 80168e2:	a201      	add	r2, pc, #4	; (adr r2, 80168e8 <RadioIrqProcess+0x58>)
 80168e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168e8:	08016971 	.word	0x08016971
 80168ec:	080169b5 	.word	0x080169b5
 80168f0:	08016c4b 	.word	0x08016c4b
 80168f4:	08016b65 	.word	0x08016b65
 80168f8:	08016c4b 	.word	0x08016c4b
 80168fc:	08016c4b 	.word	0x08016c4b
 8016900:	08016c4b 	.word	0x08016c4b
 8016904:	08016b73 	.word	0x08016b73
 8016908:	08016c4b 	.word	0x08016c4b
 801690c:	08016c4b 	.word	0x08016c4b
 8016910:	08016c4b 	.word	0x08016c4b
 8016914:	08016c4b 	.word	0x08016c4b
 8016918:	08016c4b 	.word	0x08016c4b
 801691c:	08016c4b 	.word	0x08016c4b
 8016920:	08016c4b 	.word	0x08016c4b
 8016924:	08016b8f 	.word	0x08016b8f
 8016928:	08016c4b 	.word	0x08016c4b
 801692c:	08016c4b 	.word	0x08016c4b
 8016930:	08016c4b 	.word	0x08016c4b
 8016934:	08016c4b 	.word	0x08016c4b
 8016938:	08016c4b 	.word	0x08016c4b
 801693c:	08016c4b 	.word	0x08016c4b
 8016940:	08016c4b 	.word	0x08016c4b
 8016944:	08016c4b 	.word	0x08016c4b
 8016948:	08016c4b 	.word	0x08016c4b
 801694c:	08016c4b 	.word	0x08016c4b
 8016950:	08016c4b 	.word	0x08016c4b
 8016954:	08016c4b 	.word	0x08016c4b
 8016958:	08016c4b 	.word	0x08016c4b
 801695c:	08016c4b 	.word	0x08016c4b
 8016960:	08016c4b 	.word	0x08016c4b
 8016964:	08016bcd 	.word	0x08016bcd
 8016968:	2b40      	cmp	r3, #64	; 0x40
 801696a:	f000 8150 	beq.w	8016c0e <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801696e:	e16c      	b.n	8016c4a <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8016970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016974:	488a      	ldr	r0, [pc, #552]	; (8016ba0 <RadioIrqProcess+0x310>)
 8016976:	f7fe feb0 	bl	80156da <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 801697a:	488a      	ldr	r0, [pc, #552]	; (8016ba4 <RadioIrqProcess+0x314>)
 801697c:	f002 fe44 	bl	8019608 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8016980:	2000      	movs	r0, #0
 8016982:	f000 ff39 	bl	80177f8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8016986:	f001 ff2b 	bl	80187e0 <RFW_Is_LongPacketModeEnabled>
 801698a:	4603      	mov	r3, r0
 801698c:	2b01      	cmp	r3, #1
 801698e:	d101      	bne.n	8016994 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8016990:	f001 ff4f 	bl	8018832 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8016994:	4b84      	ldr	r3, [pc, #528]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	f000 8158 	beq.w	8016c4e <RadioIrqProcess+0x3be>
 801699e:	4b82      	ldr	r3, [pc, #520]	; (8016ba8 <RadioIrqProcess+0x318>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	f000 8152 	beq.w	8016c4e <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 80169aa:	4b7f      	ldr	r3, [pc, #508]	; (8016ba8 <RadioIrqProcess+0x318>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4798      	blx	r3
        break;
 80169b2:	e14c      	b.n	8016c4e <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 80169b4:	2101      	movs	r1, #1
 80169b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80169ba:	f7fe fe8e 	bl	80156da <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80169be:	487b      	ldr	r0, [pc, #492]	; (8016bac <RadioIrqProcess+0x31c>)
 80169c0:	f002 fe22 	bl	8019608 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80169c4:	4b75      	ldr	r3, [pc, #468]	; (8016b9c <RadioIrqProcess+0x30c>)
 80169c6:	785b      	ldrb	r3, [r3, #1]
 80169c8:	f083 0301 	eor.w	r3, r3, #1
 80169cc:	b2db      	uxtb	r3, r3
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d014      	beq.n	80169fc <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 80169d2:	2000      	movs	r0, #0
 80169d4:	f000 ff10 	bl	80177f8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80169d8:	2100      	movs	r1, #0
 80169da:	f640 1002 	movw	r0, #2306	; 0x902
 80169de:	f001 fc19 	bl	8018214 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80169e2:	f640 1044 	movw	r0, #2372	; 0x944
 80169e6:	f001 fc29 	bl	801823c <SUBGRF_ReadRegister>
 80169ea:	4603      	mov	r3, r0
 80169ec:	f043 0302 	orr.w	r3, r3, #2
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	4619      	mov	r1, r3
 80169f4:	f640 1044 	movw	r0, #2372	; 0x944
 80169f8:	f001 fc0c 	bl	8018214 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80169fc:	1dfb      	adds	r3, r7, #7
 80169fe:	22ff      	movs	r2, #255	; 0xff
 8016a00:	4619      	mov	r1, r3
 8016a02:	486b      	ldr	r0, [pc, #428]	; (8016bb0 <RadioIrqProcess+0x320>)
 8016a04:	f000 fdc8 	bl	8017598 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8016a08:	486a      	ldr	r0, [pc, #424]	; (8016bb4 <RadioIrqProcess+0x324>)
 8016a0a:	f001 fbb1 	bl	8018170 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8016a0e:	4b66      	ldr	r3, [pc, #408]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d036      	beq.n	8016a84 <RadioIrqProcess+0x1f4>
 8016a16:	4b64      	ldr	r3, [pc, #400]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	689b      	ldr	r3, [r3, #8]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d031      	beq.n	8016a84 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8016a20:	4b5e      	ldr	r3, [pc, #376]	; (8016b9c <RadioIrqProcess+0x30c>)
 8016a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016a26:	2b01      	cmp	r3, #1
 8016a28:	d10e      	bne.n	8016a48 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8016a2a:	4b5f      	ldr	r3, [pc, #380]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	689c      	ldr	r4, [r3, #8]
 8016a30:	79fb      	ldrb	r3, [r7, #7]
 8016a32:	b299      	uxth	r1, r3
 8016a34:	4b59      	ldr	r3, [pc, #356]	; (8016b9c <RadioIrqProcess+0x30c>)
 8016a36:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8016a3a:	b21a      	sxth	r2, r3
 8016a3c:	4b57      	ldr	r3, [pc, #348]	; (8016b9c <RadioIrqProcess+0x30c>)
 8016a3e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8016a42:	485b      	ldr	r0, [pc, #364]	; (8016bb0 <RadioIrqProcess+0x320>)
 8016a44:	47a0      	blx	r4
                break;
 8016a46:	e01e      	b.n	8016a86 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8016a48:	4b54      	ldr	r3, [pc, #336]	; (8016b9c <RadioIrqProcess+0x30c>)
 8016a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a4c:	463a      	mov	r2, r7
 8016a4e:	4611      	mov	r1, r2
 8016a50:	4618      	mov	r0, r3
 8016a52:	f001 fe11 	bl	8018678 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8016a56:	4b54      	ldr	r3, [pc, #336]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	689c      	ldr	r4, [r3, #8]
 8016a5c:	79fb      	ldrb	r3, [r7, #7]
 8016a5e:	b299      	uxth	r1, r3
 8016a60:	4b4e      	ldr	r3, [pc, #312]	; (8016b9c <RadioIrqProcess+0x30c>)
 8016a62:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8016a66:	b218      	sxth	r0, r3
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016a6e:	4a52      	ldr	r2, [pc, #328]	; (8016bb8 <RadioIrqProcess+0x328>)
 8016a70:	fb82 c203 	smull	ip, r2, r2, r3
 8016a74:	1192      	asrs	r2, r2, #6
 8016a76:	17db      	asrs	r3, r3, #31
 8016a78:	1ad3      	subs	r3, r2, r3
 8016a7a:	b25b      	sxtb	r3, r3
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	484c      	ldr	r0, [pc, #304]	; (8016bb0 <RadioIrqProcess+0x320>)
 8016a80:	47a0      	blx	r4
                break;
 8016a82:	e000      	b.n	8016a86 <RadioIrqProcess+0x1f6>
        }
 8016a84:	bf00      	nop
        break;
 8016a86:	e0ef      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8016a88:	2000      	movs	r0, #0
 8016a8a:	f000 feb5 	bl	80177f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016a8e:	4b46      	ldr	r3, [pc, #280]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f000 80dd 	beq.w	8016c52 <RadioIrqProcess+0x3c2>
 8016a98:	4b43      	ldr	r3, [pc, #268]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	699b      	ldr	r3, [r3, #24]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	f000 80d7 	beq.w	8016c52 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8016aa4:	4b40      	ldr	r3, [pc, #256]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	699b      	ldr	r3, [r3, #24]
 8016aaa:	2000      	movs	r0, #0
 8016aac:	4798      	blx	r3
        break;
 8016aae:	e0d0      	b.n	8016c52 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	f000 fea1 	bl	80177f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8016ab6:	4b3c      	ldr	r3, [pc, #240]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	f000 80cb 	beq.w	8016c56 <RadioIrqProcess+0x3c6>
 8016ac0:	4b39      	ldr	r3, [pc, #228]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	699b      	ldr	r3, [r3, #24]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	f000 80c5 	beq.w	8016c56 <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8016acc:	4b36      	ldr	r3, [pc, #216]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	699b      	ldr	r3, [r3, #24]
 8016ad2:	2001      	movs	r0, #1
 8016ad4:	4798      	blx	r3
        break;
 8016ad6:	e0be      	b.n	8016c56 <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8016ad8:	4b38      	ldr	r3, [pc, #224]	; (8016bbc <RadioIrqProcess+0x32c>)
 8016ada:	2201      	movs	r2, #1
 8016adc:	2100      	movs	r1, #0
 8016ade:	2002      	movs	r0, #2
 8016ae0:	f002 ff9c 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8016ae4:	f000 fd3e 	bl	8017564 <SUBGRF_GetOperatingMode>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b04      	cmp	r3, #4
 8016aec:	d11a      	bne.n	8016b24 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 8016aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016af2:	482b      	ldr	r0, [pc, #172]	; (8016ba0 <RadioIrqProcess+0x310>)
 8016af4:	f7fe fdf1 	bl	80156da <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8016af8:	482a      	ldr	r0, [pc, #168]	; (8016ba4 <RadioIrqProcess+0x314>)
 8016afa:	f002 fd85 	bl	8019608 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8016afe:	2000      	movs	r0, #0
 8016b00:	f000 fe7a 	bl	80177f8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8016b04:	4b28      	ldr	r3, [pc, #160]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	f000 80a6 	beq.w	8016c5a <RadioIrqProcess+0x3ca>
 8016b0e:	4b26      	ldr	r3, [pc, #152]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	f000 80a0 	beq.w	8016c5a <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 8016b1a:	4b23      	ldr	r3, [pc, #140]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	685b      	ldr	r3, [r3, #4]
 8016b20:	4798      	blx	r3
        break;
 8016b22:	e09a      	b.n	8016c5a <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8016b24:	f000 fd1e 	bl	8017564 <SUBGRF_GetOperatingMode>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	2b05      	cmp	r3, #5
 8016b2c:	f040 8095 	bne.w	8016c5a <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8016b30:	2101      	movs	r1, #1
 8016b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016b36:	f7fe fdd0 	bl	80156da <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8016b3a:	481c      	ldr	r0, [pc, #112]	; (8016bac <RadioIrqProcess+0x31c>)
 8016b3c:	f002 fd64 	bl	8019608 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8016b40:	2000      	movs	r0, #0
 8016b42:	f000 fe59 	bl	80177f8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016b46:	4b18      	ldr	r3, [pc, #96]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	f000 8085 	beq.w	8016c5a <RadioIrqProcess+0x3ca>
 8016b50:	4b15      	ldr	r3, [pc, #84]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d07f      	beq.n	8016c5a <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 8016b5a:	4b13      	ldr	r3, [pc, #76]	; (8016ba8 <RadioIrqProcess+0x318>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	68db      	ldr	r3, [r3, #12]
 8016b60:	4798      	blx	r3
        break;
 8016b62:	e07a      	b.n	8016c5a <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8016b64:	4b16      	ldr	r3, [pc, #88]	; (8016bc0 <RadioIrqProcess+0x330>)
 8016b66:	2201      	movs	r2, #1
 8016b68:	2100      	movs	r1, #0
 8016b6a:	2002      	movs	r0, #2
 8016b6c:	f002 ff56 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8016b70:	e07a      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8016b72:	4b14      	ldr	r3, [pc, #80]	; (8016bc4 <RadioIrqProcess+0x334>)
 8016b74:	2201      	movs	r2, #1
 8016b76:	2100      	movs	r1, #0
 8016b78:	2002      	movs	r0, #2
 8016b7a:	f002 ff4f 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8016b7e:	f001 fe28 	bl	80187d2 <RFW_Is_Init>
 8016b82:	4603      	mov	r3, r0
 8016b84:	2b01      	cmp	r3, #1
 8016b86:	d16a      	bne.n	8016c5e <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8016b88:	f001 fe59 	bl	801883e <RFW_ReceivePayload>
        break;
 8016b8c:	e067      	b.n	8016c5e <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8016b8e:	4b0e      	ldr	r3, [pc, #56]	; (8016bc8 <RadioIrqProcess+0x338>)
 8016b90:	2201      	movs	r2, #1
 8016b92:	2100      	movs	r1, #0
 8016b94:	2002      	movs	r0, #2
 8016b96:	f002 ff41 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8016b9a:	e065      	b.n	8016c68 <RadioIrqProcess+0x3d8>
 8016b9c:	20001778 	.word	0x20001778
 8016ba0:	48000400 	.word	0x48000400
 8016ba4:	200017d0 	.word	0x200017d0
 8016ba8:	20000ed8 	.word	0x20000ed8
 8016bac:	200017e8 	.word	0x200017e8
 8016bb0:	20000dd8 	.word	0x20000dd8
 8016bb4:	2000179c 	.word	0x2000179c
 8016bb8:	10624dd3 	.word	0x10624dd3
 8016bbc:	0801a7a4 	.word	0x0801a7a4
 8016bc0:	0801a7b8 	.word	0x0801a7b8
 8016bc4:	0801a7c4 	.word	0x0801a7c4
 8016bc8:	0801a7d0 	.word	0x0801a7d0
        TimerStop( &RxTimeoutTimer );
 8016bcc:	4828      	ldr	r0, [pc, #160]	; (8016c70 <RadioIrqProcess+0x3e0>)
 8016bce:	f002 fd1b 	bl	8019608 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8016bd2:	4b28      	ldr	r3, [pc, #160]	; (8016c74 <RadioIrqProcess+0x3e4>)
 8016bd4:	785b      	ldrb	r3, [r3, #1]
 8016bd6:	f083 0301 	eor.w	r3, r3, #1
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d002      	beq.n	8016be6 <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8016be0:	2000      	movs	r0, #0
 8016be2:	f000 fe09 	bl	80177f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8016be6:	4b24      	ldr	r3, [pc, #144]	; (8016c78 <RadioIrqProcess+0x3e8>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d039      	beq.n	8016c62 <RadioIrqProcess+0x3d2>
 8016bee:	4b22      	ldr	r3, [pc, #136]	; (8016c78 <RadioIrqProcess+0x3e8>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	68db      	ldr	r3, [r3, #12]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d034      	beq.n	8016c62 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8016bf8:	4b1f      	ldr	r3, [pc, #124]	; (8016c78 <RadioIrqProcess+0x3e8>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8016c00:	4b1e      	ldr	r3, [pc, #120]	; (8016c7c <RadioIrqProcess+0x3ec>)
 8016c02:	2201      	movs	r2, #1
 8016c04:	2100      	movs	r1, #0
 8016c06:	2002      	movs	r0, #2
 8016c08:	f002 ff08 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8016c0c:	e029      	b.n	8016c62 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8016c0e:	4b1c      	ldr	r3, [pc, #112]	; (8016c80 <RadioIrqProcess+0x3f0>)
 8016c10:	2201      	movs	r2, #1
 8016c12:	2100      	movs	r1, #0
 8016c14:	2002      	movs	r0, #2
 8016c16:	f002 ff01 	bl	8019a1c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8016c1a:	4b16      	ldr	r3, [pc, #88]	; (8016c74 <RadioIrqProcess+0x3e4>)
 8016c1c:	785b      	ldrb	r3, [r3, #1]
 8016c1e:	f083 0301 	eor.w	r3, r3, #1
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d002      	beq.n	8016c2e <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8016c28:	2000      	movs	r0, #0
 8016c2a:	f000 fde5 	bl	80177f8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8016c2e:	4b12      	ldr	r3, [pc, #72]	; (8016c78 <RadioIrqProcess+0x3e8>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d017      	beq.n	8016c66 <RadioIrqProcess+0x3d6>
 8016c36:	4b10      	ldr	r3, [pc, #64]	; (8016c78 <RadioIrqProcess+0x3e8>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	691b      	ldr	r3, [r3, #16]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d012      	beq.n	8016c66 <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8016c40:	4b0d      	ldr	r3, [pc, #52]	; (8016c78 <RadioIrqProcess+0x3e8>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	691b      	ldr	r3, [r3, #16]
 8016c46:	4798      	blx	r3
        break;
 8016c48:	e00d      	b.n	8016c66 <RadioIrqProcess+0x3d6>
        break;
 8016c4a:	bf00      	nop
 8016c4c:	e00c      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c4e:	bf00      	nop
 8016c50:	e00a      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c52:	bf00      	nop
 8016c54:	e008      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c56:	bf00      	nop
 8016c58:	e006      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c5a:	bf00      	nop
 8016c5c:	e004      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c5e:	bf00      	nop
 8016c60:	e002      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c62:	bf00      	nop
 8016c64:	e000      	b.n	8016c68 <RadioIrqProcess+0x3d8>
        break;
 8016c66:	bf00      	nop
  }
}
 8016c68:	bf00      	nop
 8016c6a:	370c      	adds	r7, #12
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd90      	pop	{r4, r7, pc}
 8016c70:	200017e8 	.word	0x200017e8
 8016c74:	20001778 	.word	0x20001778
 8016c78:	20000ed8 	.word	0x20000ed8
 8016c7c:	0801a7dc 	.word	0x0801a7dc
 8016c80:	0801a7e8 	.word	0x0801a7e8

08016c84 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8016c88:	4b09      	ldr	r3, [pc, #36]	; (8016cb0 <RadioTxPrbs+0x2c>)
 8016c8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016c8e:	2101      	movs	r1, #1
 8016c90:	4618      	mov	r0, r3
 8016c92:	f001 fbb3 	bl	80183fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8016c96:	4b07      	ldr	r3, [pc, #28]	; (8016cb4 <RadioTxPrbs+0x30>)
 8016c98:	212d      	movs	r1, #45	; 0x2d
 8016c9a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8016c9e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8016ca0:	f000 fe6d 	bl	801797e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8016ca4:	4804      	ldr	r0, [pc, #16]	; (8016cb8 <RadioTxPrbs+0x34>)
 8016ca6:	f000 fdc3 	bl	8017830 <SUBGRF_SetTx>
}
 8016caa:	bf00      	nop
 8016cac:	bd80      	pop	{r7, pc}
 8016cae:	bf00      	nop
 8016cb0:	20001778 	.word	0x20001778
 8016cb4:	0801668b 	.word	0x0801668b
 8016cb8:	000fffff 	.word	0x000fffff

08016cbc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b084      	sub	sp, #16
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8016cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f001 fbbe 	bl	801844c <SUBGRF_SetRfTxPower>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8016cd4:	7bfb      	ldrb	r3, [r7, #15]
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f001 fb8f 	bl	80183fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8016cde:	f000 fe45 	bl	801796c <SUBGRF_SetTxContinuousWave>
}
 8016ce2:	bf00      	nop
 8016ce4:	3710      	adds	r7, #16
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}

08016cea <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8016cea:	b480      	push	{r7}
 8016cec:	b089      	sub	sp, #36	; 0x24
 8016cee:	af00      	add	r7, sp, #0
 8016cf0:	60f8      	str	r0, [r7, #12]
 8016cf2:	60b9      	str	r1, [r7, #8]
 8016cf4:	4613      	mov	r3, r2
 8016cf6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8016d00:	2300      	movs	r3, #0
 8016d02:	61bb      	str	r3, [r7, #24]
 8016d04:	e011      	b.n	8016d2a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8016d06:	69bb      	ldr	r3, [r7, #24]
 8016d08:	68ba      	ldr	r2, [r7, #8]
 8016d0a:	4413      	add	r3, r2
 8016d0c:	781a      	ldrb	r2, [r3, #0]
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	68b9      	ldr	r1, [r7, #8]
 8016d12:	440b      	add	r3, r1
 8016d14:	43d2      	mvns	r2, r2
 8016d16:	b2d2      	uxtb	r2, r2
 8016d18:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	68fa      	ldr	r2, [r7, #12]
 8016d1e:	4413      	add	r3, r2
 8016d20:	2200      	movs	r2, #0
 8016d22:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8016d24:	69bb      	ldr	r3, [r7, #24]
 8016d26:	3301      	adds	r3, #1
 8016d28:	61bb      	str	r3, [r7, #24]
 8016d2a:	79fb      	ldrb	r3, [r7, #7]
 8016d2c:	69ba      	ldr	r2, [r7, #24]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	dbe9      	blt.n	8016d06 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8016d32:	2300      	movs	r3, #0
 8016d34:	61bb      	str	r3, [r7, #24]
 8016d36:	e049      	b.n	8016dcc <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8016d38:	69bb      	ldr	r3, [r7, #24]
 8016d3a:	425a      	negs	r2, r3
 8016d3c:	f003 0307 	and.w	r3, r3, #7
 8016d40:	f002 0207 	and.w	r2, r2, #7
 8016d44:	bf58      	it	pl
 8016d46:	4253      	negpl	r3, r2
 8016d48:	b2db      	uxtb	r3, r3
 8016d4a:	f1c3 0307 	rsb	r3, r3, #7
 8016d4e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8016d50:	69bb      	ldr	r3, [r7, #24]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	da00      	bge.n	8016d58 <payload_integration+0x6e>
 8016d56:	3307      	adds	r3, #7
 8016d58:	10db      	asrs	r3, r3, #3
 8016d5a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8016d5c:	69bb      	ldr	r3, [r7, #24]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	425a      	negs	r2, r3
 8016d62:	f003 0307 	and.w	r3, r3, #7
 8016d66:	f002 0207 	and.w	r2, r2, #7
 8016d6a:	bf58      	it	pl
 8016d6c:	4253      	negpl	r3, r2
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	f1c3 0307 	rsb	r3, r3, #7
 8016d74:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	3301      	adds	r3, #1
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	da00      	bge.n	8016d80 <payload_integration+0x96>
 8016d7e:	3307      	adds	r3, #7
 8016d80:	10db      	asrs	r3, r3, #3
 8016d82:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8016d84:	7dbb      	ldrb	r3, [r7, #22]
 8016d86:	68ba      	ldr	r2, [r7, #8]
 8016d88:	4413      	add	r3, r2
 8016d8a:	781b      	ldrb	r3, [r3, #0]
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	7dfb      	ldrb	r3, [r7, #23]
 8016d90:	fa42 f303 	asr.w	r3, r2, r3
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	f003 0301 	and.w	r3, r3, #1
 8016d9a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8016d9c:	7ffa      	ldrb	r2, [r7, #31]
 8016d9e:	7cfb      	ldrb	r3, [r7, #19]
 8016da0:	4053      	eors	r3, r2
 8016da2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8016da4:	7d3b      	ldrb	r3, [r7, #20]
 8016da6:	68fa      	ldr	r2, [r7, #12]
 8016da8:	4413      	add	r3, r2
 8016daa:	781b      	ldrb	r3, [r3, #0]
 8016dac:	b25a      	sxtb	r2, r3
 8016dae:	7ff9      	ldrb	r1, [r7, #31]
 8016db0:	7d7b      	ldrb	r3, [r7, #21]
 8016db2:	fa01 f303 	lsl.w	r3, r1, r3
 8016db6:	b25b      	sxtb	r3, r3
 8016db8:	4313      	orrs	r3, r2
 8016dba:	b259      	sxtb	r1, r3
 8016dbc:	7d3b      	ldrb	r3, [r7, #20]
 8016dbe:	68fa      	ldr	r2, [r7, #12]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	b2ca      	uxtb	r2, r1
 8016dc4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8016dc6:	69bb      	ldr	r3, [r7, #24]
 8016dc8:	3301      	adds	r3, #1
 8016dca:	61bb      	str	r3, [r7, #24]
 8016dcc:	79fb      	ldrb	r3, [r7, #7]
 8016dce:	00db      	lsls	r3, r3, #3
 8016dd0:	69ba      	ldr	r2, [r7, #24]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	dbb0      	blt.n	8016d38 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8016dd6:	7ffb      	ldrb	r3, [r7, #31]
 8016dd8:	01db      	lsls	r3, r3, #7
 8016dda:	b25a      	sxtb	r2, r3
 8016ddc:	7ffb      	ldrb	r3, [r7, #31]
 8016dde:	019b      	lsls	r3, r3, #6
 8016de0:	b25b      	sxtb	r3, r3
 8016de2:	4313      	orrs	r3, r2
 8016de4:	b25b      	sxtb	r3, r3
 8016de6:	7ffa      	ldrb	r2, [r7, #31]
 8016de8:	2a00      	cmp	r2, #0
 8016dea:	d101      	bne.n	8016df0 <payload_integration+0x106>
 8016dec:	2220      	movs	r2, #32
 8016dee:	e000      	b.n	8016df2 <payload_integration+0x108>
 8016df0:	2200      	movs	r2, #0
 8016df2:	4313      	orrs	r3, r2
 8016df4:	b259      	sxtb	r1, r3
 8016df6:	79fb      	ldrb	r3, [r7, #7]
 8016df8:	68fa      	ldr	r2, [r7, #12]
 8016dfa:	4413      	add	r3, r2
 8016dfc:	b2ca      	uxtb	r2, r1
 8016dfe:	701a      	strb	r2, [r3, #0]
}
 8016e00:	bf00      	nop
 8016e02:	3724      	adds	r7, #36	; 0x24
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bc80      	pop	{r7}
 8016e08:	4770      	bx	lr
	...

08016e0c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8016e0c:	b580      	push	{r7, lr}
 8016e0e:	b08c      	sub	sp, #48	; 0x30
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	60b9      	str	r1, [r7, #8]
 8016e14:	607a      	str	r2, [r7, #4]
 8016e16:	603b      	str	r3, [r7, #0]
 8016e18:	4603      	mov	r3, r0
 8016e1a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8016e20:	2300      	movs	r3, #0
 8016e22:	61fb      	str	r3, [r7, #28]
 8016e24:	2300      	movs	r3, #0
 8016e26:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8016e28:	f001 fccd 	bl	80187c6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d001      	beq.n	8016e36 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	bf14      	ite	ne
 8016e3c:	2301      	movne	r3, #1
 8016e3e:	2300      	moveq	r3, #0
 8016e40:	b2da      	uxtb	r2, r3
 8016e42:	4ba9      	ldr	r3, [pc, #676]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016e44:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8016e46:	7bfb      	ldrb	r3, [r7, #15]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d003      	beq.n	8016e54 <RadioSetRxGenericConfig+0x48>
 8016e4c:	2b01      	cmp	r3, #1
 8016e4e:	f000 80e8 	beq.w	8017022 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8016e52:	e1a0      	b.n	8017196 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d003      	beq.n	8016e64 <RadioSetRxGenericConfig+0x58>
 8016e5c:	68bb      	ldr	r3, [r7, #8]
 8016e5e:	691b      	ldr	r3, [r3, #16]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d102      	bne.n	8016e6a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8016e64:	f04f 33ff 	mov.w	r3, #4294967295
 8016e68:	e196      	b.n	8017198 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	7d5b      	ldrb	r3, [r3, #21]
 8016e6e:	2b08      	cmp	r3, #8
 8016e70:	d902      	bls.n	8016e78 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8016e72:	f04f 33ff 	mov.w	r3, #4294967295
 8016e76:	e18f      	b.n	8017198 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8016e78:	2300      	movs	r3, #0
 8016e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e7c:	e00d      	b.n	8016e9a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	699a      	ldr	r2, [r3, #24]
 8016e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e84:	4413      	add	r3, r2
 8016e86:	7819      	ldrb	r1, [r3, #0]
 8016e88:	f107 021c 	add.w	r2, r7, #28
 8016e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8e:	4413      	add	r3, r2
 8016e90:	460a      	mov	r2, r1
 8016e92:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8016e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e96:	3301      	adds	r3, #1
 8016e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e9a:	68bb      	ldr	r3, [r7, #8]
 8016e9c:	7d5b      	ldrb	r3, [r3, #21]
 8016e9e:	461a      	mov	r2, r3
 8016ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	dbeb      	blt.n	8016e7e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8016ea6:	68bb      	ldr	r3, [r7, #8]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	bf14      	ite	ne
 8016eae:	2301      	movne	r3, #1
 8016eb0:	2300      	moveq	r3, #0
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f000 fd6b 	bl	8017990 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016eba:	4b8b      	ldr	r3, [pc, #556]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016ebc:	2200      	movs	r2, #0
 8016ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	68db      	ldr	r3, [r3, #12]
 8016ec6:	4a88      	ldr	r2, [pc, #544]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016ec8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	791a      	ldrb	r2, [r3, #4]
 8016ece:	4b86      	ldr	r3, [pc, #536]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	689b      	ldr	r3, [r3, #8]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f001 fba5 	bl	8018628 <SUBGRF_GetFskBandwidthRegValue>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	461a      	mov	r2, r3
 8016ee2:	4b81      	ldr	r3, [pc, #516]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016ee8:	4b7f      	ldr	r3, [pc, #508]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016eea:	2200      	movs	r2, #0
 8016eec:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	691b      	ldr	r3, [r3, #16]
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	00db      	lsls	r3, r3, #3
 8016ef6:	b29a      	uxth	r2, r3
 8016ef8:	4b7b      	ldr	r3, [pc, #492]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016efa:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	7d1a      	ldrb	r2, [r3, #20]
 8016f00:	4b79      	ldr	r3, [pc, #484]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016f02:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8016f04:	68bb      	ldr	r3, [r7, #8]
 8016f06:	7d5b      	ldrb	r3, [r3, #21]
 8016f08:	00db      	lsls	r3, r3, #3
 8016f0a:	b2da      	uxtb	r2, r3
 8016f0c:	4b76      	ldr	r3, [pc, #472]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016f0e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8016f16:	4b74      	ldr	r3, [pc, #464]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016f18:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d105      	bne.n	8016f30 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	69db      	ldr	r3, [r3, #28]
 8016f28:	b2da      	uxtb	r2, r3
 8016f2a:	4b6f      	ldr	r3, [pc, #444]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016f2c:	759a      	strb	r2, [r3, #22]
 8016f2e:	e00b      	b.n	8016f48 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8016f36:	2b02      	cmp	r3, #2
 8016f38:	d103      	bne.n	8016f42 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8016f3a:	4b6b      	ldr	r3, [pc, #428]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016f3c:	22ff      	movs	r2, #255	; 0xff
 8016f3e:	759a      	strb	r2, [r3, #22]
 8016f40:	e002      	b.n	8016f48 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8016f42:	4b69      	ldr	r3, [pc, #420]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016f44:	22ff      	movs	r2, #255	; 0xff
 8016f46:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8016f4e:	2b02      	cmp	r3, #2
 8016f50:	d004      	beq.n	8016f5c <RadioSetRxGenericConfig+0x150>
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8016f58:	2b02      	cmp	r3, #2
 8016f5a:	d12d      	bne.n	8016fb8 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016f62:	2bf1      	cmp	r3, #241	; 0xf1
 8016f64:	d00c      	beq.n	8016f80 <RadioSetRxGenericConfig+0x174>
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016f6c:	2bf2      	cmp	r3, #242	; 0xf2
 8016f6e:	d007      	beq.n	8016f80 <RadioSetRxGenericConfig+0x174>
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d002      	beq.n	8016f80 <RadioSetRxGenericConfig+0x174>
            return -1;
 8016f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f7e:	e10b      	b.n	8017198 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8016f80:	2300      	movs	r3, #0
 8016f82:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8016f88:	4b58      	ldr	r3, [pc, #352]	; (80170ec <RadioSetRxGenericConfig+0x2e0>)
 8016f8a:	6819      	ldr	r1, [r3, #0]
 8016f8c:	f107 0310 	add.w	r3, r7, #16
 8016f90:	4a57      	ldr	r2, [pc, #348]	; (80170f0 <RadioSetRxGenericConfig+0x2e4>)
 8016f92:	4618      	mov	r0, r3
 8016f94:	f001 fc0a 	bl	80187ac <RFW_Init>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d002      	beq.n	8016fa4 <RadioSetRxGenericConfig+0x198>
            return -1;
 8016f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa2:	e0f9      	b.n	8017198 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8016fa4:	4b50      	ldr	r3, [pc, #320]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8016faa:	4b4f      	ldr	r3, [pc, #316]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016fac:	2201      	movs	r2, #1
 8016fae:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8016fb0:	4b4d      	ldr	r3, [pc, #308]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	755a      	strb	r2, [r3, #21]
        {
 8016fb6:	e00e      	b.n	8016fd6 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8016fbe:	4b4a      	ldr	r3, [pc, #296]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016fc0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016fc8:	4b47      	ldr	r3, [pc, #284]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016fca:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8016fd2:	4b45      	ldr	r3, [pc, #276]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8016fd4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8016fd6:	f7ff fa6c 	bl	80164b2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8016fda:	2000      	movs	r0, #0
 8016fdc:	f7fe fbf8 	bl	80157d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016fe0:	4844      	ldr	r0, [pc, #272]	; (80170f4 <RadioSetRxGenericConfig+0x2e8>)
 8016fe2:	f000 ff03 	bl	8017dec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016fe6:	4844      	ldr	r0, [pc, #272]	; (80170f8 <RadioSetRxGenericConfig+0x2ec>)
 8016fe8:	f000 ffcc 	bl	8017f84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8016fec:	f107 031c 	add.w	r3, r7, #28
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f000 fb06 	bl	8017602 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8016ff6:	68bb      	ldr	r3, [r7, #8]
 8016ff8:	8c1b      	ldrh	r3, [r3, #32]
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f000 fb50 	bl	80176a0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017004:	4618      	mov	r0, r3
 8017006:	f000 fb2b 	bl	8017660 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017010:	fb02 f203 	mul.w	r2, r2, r3
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	68db      	ldr	r3, [r3, #12]
 8017018:	fbb2 f3f3 	udiv	r3, r2, r3
 801701c:	4a32      	ldr	r2, [pc, #200]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 801701e:	6093      	str	r3, [r2, #8]
        break;
 8017020:	e0b9      	b.n	8017196 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017026:	2b00      	cmp	r3, #0
 8017028:	d102      	bne.n	8017030 <RadioSetRxGenericConfig+0x224>
            return -1;
 801702a:	f04f 33ff 	mov.w	r3, #4294967295
 801702e:	e0b3      	b.n	8017198 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017036:	2b01      	cmp	r3, #1
 8017038:	d104      	bne.n	8017044 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	69db      	ldr	r3, [r3, #28]
 801703e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017042:	e002      	b.n	801704a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017044:	23ff      	movs	r3, #255	; 0xff
 8017046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801704e:	2b00      	cmp	r3, #0
 8017050:	bf14      	ite	ne
 8017052:	2301      	movne	r3, #1
 8017054:	2300      	moveq	r3, #0
 8017056:	b2db      	uxtb	r3, r3
 8017058:	4618      	mov	r0, r3
 801705a:	f000 fc99 	bl	8017990 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	b2db      	uxtb	r3, r3
 8017062:	4618      	mov	r0, r3
 8017064:	f000 fca3 	bl	80179ae <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017068:	4b1f      	ldr	r3, [pc, #124]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 801706a:	2201      	movs	r2, #1
 801706c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017076:	4b1c      	ldr	r3, [pc, #112]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8017078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801707c:	68bb      	ldr	r3, [r7, #8]
 801707e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017082:	4b19      	ldr	r3, [pc, #100]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8017084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801708e:	4b16      	ldr	r3, [pc, #88]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 8017090:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801709a:	2b02      	cmp	r3, #2
 801709c:	d010      	beq.n	80170c0 <RadioSetRxGenericConfig+0x2b4>
 801709e:	2b02      	cmp	r3, #2
 80170a0:	dc2c      	bgt.n	80170fc <RadioSetRxGenericConfig+0x2f0>
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d002      	beq.n	80170ac <RadioSetRxGenericConfig+0x2a0>
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d005      	beq.n	80170b6 <RadioSetRxGenericConfig+0x2aa>
            break;
 80170aa:	e027      	b.n	80170fc <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80170ac:	4b0e      	ldr	r3, [pc, #56]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 80170ae:	2200      	movs	r2, #0
 80170b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80170b4:	e023      	b.n	80170fe <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80170b6:	4b0c      	ldr	r3, [pc, #48]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 80170b8:	2201      	movs	r2, #1
 80170ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80170be:	e01e      	b.n	80170fe <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80170c6:	2b0b      	cmp	r3, #11
 80170c8:	d004      	beq.n	80170d4 <RadioSetRxGenericConfig+0x2c8>
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80170d0:	2b0c      	cmp	r3, #12
 80170d2:	d104      	bne.n	80170de <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80170d4:	4b04      	ldr	r3, [pc, #16]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 80170d6:	2201      	movs	r2, #1
 80170d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80170dc:	e00f      	b.n	80170fe <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80170de:	4b02      	ldr	r3, [pc, #8]	; (80170e8 <RadioSetRxGenericConfig+0x2dc>)
 80170e0:	2200      	movs	r2, #0
 80170e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80170e6:	e00a      	b.n	80170fe <RadioSetRxGenericConfig+0x2f2>
 80170e8:	20001778 	.word	0x20001778
 80170ec:	20000ed8 	.word	0x20000ed8
 80170f0:	200017e8 	.word	0x200017e8
 80170f4:	200017b0 	.word	0x200017b0
 80170f8:	20001786 	.word	0x20001786
            break;
 80170fc:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80170fe:	4b28      	ldr	r3, [pc, #160]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 8017100:	2201      	movs	r2, #1
 8017102:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017108:	4b25      	ldr	r3, [pc, #148]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 801710a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017112:	4b23      	ldr	r3, [pc, #140]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 8017114:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017116:	4a22      	ldr	r2, [pc, #136]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 8017118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801711c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017124:	4b1e      	ldr	r3, [pc, #120]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 8017126:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017130:	4b1b      	ldr	r3, [pc, #108]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 8017132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017136:	f7ff f9bc 	bl	80164b2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801713a:	2001      	movs	r0, #1
 801713c:	f7fe fb48 	bl	80157d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017140:	4818      	ldr	r0, [pc, #96]	; (80171a4 <RadioSetRxGenericConfig+0x398>)
 8017142:	f000 fe53 	bl	8017dec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017146:	4818      	ldr	r0, [pc, #96]	; (80171a8 <RadioSetRxGenericConfig+0x39c>)
 8017148:	f000 ff1c 	bl	8017f84 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801714c:	4b14      	ldr	r3, [pc, #80]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 801714e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017152:	2b01      	cmp	r3, #1
 8017154:	d10d      	bne.n	8017172 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8017156:	f240 7036 	movw	r0, #1846	; 0x736
 801715a:	f001 f86f 	bl	801823c <SUBGRF_ReadRegister>
 801715e:	4603      	mov	r3, r0
 8017160:	f023 0304 	bic.w	r3, r3, #4
 8017164:	b2db      	uxtb	r3, r3
 8017166:	4619      	mov	r1, r3
 8017168:	f240 7036 	movw	r0, #1846	; 0x736
 801716c:	f001 f852 	bl	8018214 <SUBGRF_WriteRegister>
 8017170:	e00c      	b.n	801718c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8017172:	f240 7036 	movw	r0, #1846	; 0x736
 8017176:	f001 f861 	bl	801823c <SUBGRF_ReadRegister>
 801717a:	4603      	mov	r3, r0
 801717c:	f043 0304 	orr.w	r3, r3, #4
 8017180:	b2db      	uxtb	r3, r3
 8017182:	4619      	mov	r1, r3
 8017184:	f240 7036 	movw	r0, #1846	; 0x736
 8017188:	f001 f844 	bl	8018214 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801718c:	4b04      	ldr	r3, [pc, #16]	; (80171a0 <RadioSetRxGenericConfig+0x394>)
 801718e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017192:	609a      	str	r2, [r3, #8]
        break;
 8017194:	bf00      	nop
    }
    return status;
 8017196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017198:	4618      	mov	r0, r3
 801719a:	3730      	adds	r7, #48	; 0x30
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	20001778 	.word	0x20001778
 80171a4:	200017b0 	.word	0x200017b0
 80171a8:	20001786 	.word	0x20001786

080171ac <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b08a      	sub	sp, #40	; 0x28
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	60b9      	str	r1, [r7, #8]
 80171b4:	607b      	str	r3, [r7, #4]
 80171b6:	4603      	mov	r3, r0
 80171b8:	73fb      	strb	r3, [r7, #15]
 80171ba:	4613      	mov	r3, r2
 80171bc:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80171be:	2300      	movs	r3, #0
 80171c0:	61fb      	str	r3, [r7, #28]
 80171c2:	2300      	movs	r3, #0
 80171c4:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80171c6:	f001 fafe 	bl	80187c6 <RFW_DeInit>
    switch( modem )
 80171ca:	7bfb      	ldrb	r3, [r7, #15]
 80171cc:	2b02      	cmp	r3, #2
 80171ce:	f000 8144 	beq.w	801745a <RadioSetTxGenericConfig+0x2ae>
 80171d2:	2b02      	cmp	r3, #2
 80171d4:	f300 8160 	bgt.w	8017498 <RadioSetTxGenericConfig+0x2ec>
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d003      	beq.n	80171e4 <RadioSetTxGenericConfig+0x38>
 80171dc:	2b01      	cmp	r3, #1
 80171de:	f000 80b7 	beq.w	8017350 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80171e2:	e159      	b.n	8017498 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	689b      	ldr	r3, [r3, #8]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d003      	beq.n	80171f4 <RadioSetTxGenericConfig+0x48>
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	691b      	ldr	r3, [r3, #16]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d102      	bne.n	80171fa <RadioSetTxGenericConfig+0x4e>
            return -1;
 80171f4:	f04f 33ff 	mov.w	r3, #4294967295
 80171f8:	e163      	b.n	80174c2 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	7d1b      	ldrb	r3, [r3, #20]
 80171fe:	2b08      	cmp	r3, #8
 8017200:	d902      	bls.n	8017208 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8017202:	f04f 33ff 	mov.w	r3, #4294967295
 8017206:	e15c      	b.n	80174c2 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017208:	2300      	movs	r3, #0
 801720a:	627b      	str	r3, [r7, #36]	; 0x24
 801720c:	e00d      	b.n	801722a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	699a      	ldr	r2, [r3, #24]
 8017212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017214:	4413      	add	r3, r2
 8017216:	7819      	ldrb	r1, [r3, #0]
 8017218:	f107 021c 	add.w	r2, r7, #28
 801721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721e:	4413      	add	r3, r2
 8017220:	460a      	mov	r2, r1
 8017222:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017226:	3301      	adds	r3, #1
 8017228:	627b      	str	r3, [r7, #36]	; 0x24
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	7d1b      	ldrb	r3, [r3, #20]
 801722e:	461a      	mov	r2, r3
 8017230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017232:	4293      	cmp	r3, r2
 8017234:	dbeb      	blt.n	801720e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017236:	4ba5      	ldr	r3, [pc, #660]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017238:	2200      	movs	r2, #0
 801723a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	689b      	ldr	r3, [r3, #8]
 8017242:	4aa2      	ldr	r2, [pc, #648]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017244:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	781a      	ldrb	r2, [r3, #0]
 801724a:	4ba0      	ldr	r3, [pc, #640]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801724c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017250:	68bb      	ldr	r3, [r7, #8]
 8017252:	685b      	ldr	r3, [r3, #4]
 8017254:	4618      	mov	r0, r3
 8017256:	f001 f9e7 	bl	8018628 <SUBGRF_GetFskBandwidthRegValue>
 801725a:	4603      	mov	r3, r0
 801725c:	461a      	mov	r2, r3
 801725e:	4b9b      	ldr	r3, [pc, #620]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	68db      	ldr	r3, [r3, #12]
 8017268:	4a98      	ldr	r2, [pc, #608]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801726a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801726c:	4b97      	ldr	r3, [pc, #604]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801726e:	2200      	movs	r2, #0
 8017270:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	691b      	ldr	r3, [r3, #16]
 8017276:	b29b      	uxth	r3, r3
 8017278:	00db      	lsls	r3, r3, #3
 801727a:	b29a      	uxth	r2, r3
 801727c:	4b93      	ldr	r3, [pc, #588]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801727e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8017280:	4b92      	ldr	r3, [pc, #584]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017282:	2204      	movs	r2, #4
 8017284:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017286:	68bb      	ldr	r3, [r7, #8]
 8017288:	7d1b      	ldrb	r3, [r3, #20]
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	b2da      	uxtb	r2, r3
 801728e:	4b8f      	ldr	r3, [pc, #572]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017290:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8017292:	4b8e      	ldr	r3, [pc, #568]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017294:	2200      	movs	r2, #0
 8017296:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017298:	68bb      	ldr	r3, [r7, #8]
 801729a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801729e:	2b02      	cmp	r3, #2
 80172a0:	d003      	beq.n	80172aa <RadioSetTxGenericConfig+0xfe>
 80172a2:	68bb      	ldr	r3, [r7, #8]
 80172a4:	7f9b      	ldrb	r3, [r3, #30]
 80172a6:	2b02      	cmp	r3, #2
 80172a8:	d12a      	bne.n	8017300 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	7fdb      	ldrb	r3, [r3, #31]
 80172ae:	2bf1      	cmp	r3, #241	; 0xf1
 80172b0:	d00a      	beq.n	80172c8 <RadioSetTxGenericConfig+0x11c>
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	7fdb      	ldrb	r3, [r3, #31]
 80172b6:	2bf2      	cmp	r3, #242	; 0xf2
 80172b8:	d006      	beq.n	80172c8 <RadioSetTxGenericConfig+0x11c>
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	7fdb      	ldrb	r3, [r3, #31]
 80172be:	2b01      	cmp	r3, #1
 80172c0:	d002      	beq.n	80172c8 <RadioSetTxGenericConfig+0x11c>
                return -1;
 80172c2:	f04f 33ff 	mov.w	r3, #4294967295
 80172c6:	e0fc      	b.n	80174c2 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80172c8:	2301      	movs	r3, #1
 80172ca:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80172d0:	4b7f      	ldr	r3, [pc, #508]	; (80174d0 <RadioSetTxGenericConfig+0x324>)
 80172d2:	6819      	ldr	r1, [r3, #0]
 80172d4:	f107 0310 	add.w	r3, r7, #16
 80172d8:	4a7e      	ldr	r2, [pc, #504]	; (80174d4 <RadioSetTxGenericConfig+0x328>)
 80172da:	4618      	mov	r0, r3
 80172dc:	f001 fa66 	bl	80187ac <RFW_Init>
 80172e0:	4603      	mov	r3, r0
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d002      	beq.n	80172ec <RadioSetTxGenericConfig+0x140>
              return -1;
 80172e6:	f04f 33ff 	mov.w	r3, #4294967295
 80172ea:	e0ea      	b.n	80174c2 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80172ec:	4b77      	ldr	r3, [pc, #476]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80172ee:	2200      	movs	r2, #0
 80172f0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80172f2:	4b76      	ldr	r3, [pc, #472]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80172f4:	2201      	movs	r2, #1
 80172f6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80172f8:	4b74      	ldr	r3, [pc, #464]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80172fa:	2200      	movs	r2, #0
 80172fc:	755a      	strb	r2, [r3, #21]
        {
 80172fe:	e00c      	b.n	801731a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	7fda      	ldrb	r2, [r3, #31]
 8017304:	4b71      	ldr	r3, [pc, #452]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017306:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801730e:	4b6f      	ldr	r3, [pc, #444]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017310:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	7f9a      	ldrb	r2, [r3, #30]
 8017316:	4b6d      	ldr	r3, [pc, #436]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017318:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801731a:	f7ff f8ca 	bl	80164b2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801731e:	2000      	movs	r0, #0
 8017320:	f7fe fa56 	bl	80157d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017324:	486c      	ldr	r0, [pc, #432]	; (80174d8 <RadioSetTxGenericConfig+0x32c>)
 8017326:	f000 fd61 	bl	8017dec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801732a:	486c      	ldr	r0, [pc, #432]	; (80174dc <RadioSetTxGenericConfig+0x330>)
 801732c:	f000 fe2a 	bl	8017f84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017330:	f107 031c 	add.w	r3, r7, #28
 8017334:	4618      	mov	r0, r3
 8017336:	f000 f964 	bl	8017602 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	8b9b      	ldrh	r3, [r3, #28]
 801733e:	4618      	mov	r0, r3
 8017340:	f000 f9ae 	bl	80176a0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8017344:	68bb      	ldr	r3, [r7, #8]
 8017346:	8c1b      	ldrh	r3, [r3, #32]
 8017348:	4618      	mov	r0, r3
 801734a:	f000 f989 	bl	8017660 <SUBGRF_SetCrcPolynomial>
        break;
 801734e:	e0a4      	b.n	801749a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017350:	4b5e      	ldr	r3, [pc, #376]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017352:	2201      	movs	r2, #1
 8017354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801735e:	4b5b      	ldr	r3, [pc, #364]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801736a:	4b58      	ldr	r3, [pc, #352]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801736c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017370:	68bb      	ldr	r3, [r7, #8]
 8017372:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017376:	4b55      	ldr	r3, [pc, #340]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017378:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017382:	2b02      	cmp	r3, #2
 8017384:	d010      	beq.n	80173a8 <RadioSetTxGenericConfig+0x1fc>
 8017386:	2b02      	cmp	r3, #2
 8017388:	dc22      	bgt.n	80173d0 <RadioSetTxGenericConfig+0x224>
 801738a:	2b00      	cmp	r3, #0
 801738c:	d002      	beq.n	8017394 <RadioSetTxGenericConfig+0x1e8>
 801738e:	2b01      	cmp	r3, #1
 8017390:	d005      	beq.n	801739e <RadioSetTxGenericConfig+0x1f2>
            break;
 8017392:	e01d      	b.n	80173d0 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017394:	4b4d      	ldr	r3, [pc, #308]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017396:	2200      	movs	r2, #0
 8017398:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801739c:	e019      	b.n	80173d2 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801739e:	4b4b      	ldr	r3, [pc, #300]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173a0:	2201      	movs	r2, #1
 80173a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80173a6:	e014      	b.n	80173d2 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173ae:	2b0b      	cmp	r3, #11
 80173b0:	d004      	beq.n	80173bc <RadioSetTxGenericConfig+0x210>
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173b8:	2b0c      	cmp	r3, #12
 80173ba:	d104      	bne.n	80173c6 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80173bc:	4b43      	ldr	r3, [pc, #268]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173be:	2201      	movs	r2, #1
 80173c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80173c4:	e005      	b.n	80173d2 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80173c6:	4b41      	ldr	r3, [pc, #260]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173c8:	2200      	movs	r2, #0
 80173ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80173ce:	e000      	b.n	80173d2 <RadioSetTxGenericConfig+0x226>
            break;
 80173d0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80173d2:	4b3e      	ldr	r3, [pc, #248]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173d4:	2201      	movs	r2, #1
 80173d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80173dc:	4b3b      	ldr	r3, [pc, #236]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173de:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80173e0:	68bb      	ldr	r3, [r7, #8]
 80173e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80173e6:	4b39      	ldr	r3, [pc, #228]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173e8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80173ea:	68bb      	ldr	r3, [r7, #8]
 80173ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80173f0:	4b36      	ldr	r3, [pc, #216]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173f2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80173fc:	4b33      	ldr	r3, [pc, #204]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80173fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017402:	f7ff f856 	bl	80164b2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017406:	2001      	movs	r0, #1
 8017408:	f7fe f9e2 	bl	80157d0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801740c:	4832      	ldr	r0, [pc, #200]	; (80174d8 <RadioSetTxGenericConfig+0x32c>)
 801740e:	f000 fced 	bl	8017dec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017412:	4832      	ldr	r0, [pc, #200]	; (80174dc <RadioSetTxGenericConfig+0x330>)
 8017414:	f000 fdb6 	bl	8017f84 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8017418:	4b2c      	ldr	r3, [pc, #176]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801741a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801741e:	2b06      	cmp	r3, #6
 8017420:	d10d      	bne.n	801743e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8017422:	f640 0089 	movw	r0, #2185	; 0x889
 8017426:	f000 ff09 	bl	801823c <SUBGRF_ReadRegister>
 801742a:	4603      	mov	r3, r0
 801742c:	f023 0304 	bic.w	r3, r3, #4
 8017430:	b2db      	uxtb	r3, r3
 8017432:	4619      	mov	r1, r3
 8017434:	f640 0089 	movw	r0, #2185	; 0x889
 8017438:	f000 feec 	bl	8018214 <SUBGRF_WriteRegister>
        break;
 801743c:	e02d      	b.n	801749a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801743e:	f640 0089 	movw	r0, #2185	; 0x889
 8017442:	f000 fefb 	bl	801823c <SUBGRF_ReadRegister>
 8017446:	4603      	mov	r3, r0
 8017448:	f043 0304 	orr.w	r3, r3, #4
 801744c:	b2db      	uxtb	r3, r3
 801744e:	4619      	mov	r1, r3
 8017450:	f640 0089 	movw	r0, #2185	; 0x889
 8017454:	f000 fede 	bl	8018214 <SUBGRF_WriteRegister>
        break;
 8017458:	e01f      	b.n	801749a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801745e:	2b00      	cmp	r3, #0
 8017460:	d004      	beq.n	801746c <RadioSetTxGenericConfig+0x2c0>
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801746a:	d902      	bls.n	8017472 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801746c:	f04f 33ff 	mov.w	r3, #4294967295
 8017470:	e027      	b.n	80174c2 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8017472:	2002      	movs	r0, #2
 8017474:	f7fe f9ac 	bl	80157d0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017478:	4b14      	ldr	r3, [pc, #80]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801747a:	2202      	movs	r2, #2
 801747c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8017480:	68bb      	ldr	r3, [r7, #8]
 8017482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017484:	4a11      	ldr	r2, [pc, #68]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 8017486:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017488:	4b10      	ldr	r3, [pc, #64]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 801748a:	2216      	movs	r2, #22
 801748c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017490:	4811      	ldr	r0, [pc, #68]	; (80174d8 <RadioSetTxGenericConfig+0x32c>)
 8017492:	f000 fcab 	bl	8017dec <SUBGRF_SetModulationParams>
        break;
 8017496:	e000      	b.n	801749a <RadioSetTxGenericConfig+0x2ee>
        break;
 8017498:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801749a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801749e:	4618      	mov	r0, r3
 80174a0:	f000 ffd4 	bl	801844c <SUBGRF_SetRfTxPower>
 80174a4:	4603      	mov	r3, r0
 80174a6:	461a      	mov	r2, r3
 80174a8:	4b08      	ldr	r3, [pc, #32]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80174aa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80174ae:	4b07      	ldr	r3, [pc, #28]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80174b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80174b4:	4618      	mov	r0, r3
 80174b6:	f001 f99a 	bl	80187ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80174ba:	4a04      	ldr	r2, [pc, #16]	; (80174cc <RadioSetTxGenericConfig+0x320>)
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6053      	str	r3, [r2, #4]
    return 0;
 80174c0:	2300      	movs	r3, #0
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	3728      	adds	r7, #40	; 0x28
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}
 80174ca:	bf00      	nop
 80174cc:	20001778 	.word	0x20001778
 80174d0:	20000ed8 	.word	0x20000ed8
 80174d4:	200017d0 	.word	0x200017d0
 80174d8:	200017b0 	.word	0x200017b0
 80174dc:	20001786 	.word	0x20001786

080174e0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d002      	beq.n	80174f4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80174ee:	4a1a      	ldr	r2, [pc, #104]	; (8017558 <SUBGRF_Init+0x78>)
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80174f4:	f7ea f868 	bl	80015c8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80174f8:	2002      	movs	r0, #2
 80174fa:	f001 f873 	bl	80185e4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80174fe:	4b17      	ldr	r3, [pc, #92]	; (801755c <SUBGRF_Init+0x7c>)
 8017500:	2200      	movs	r2, #0
 8017502:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8017504:	2000      	movs	r0, #0
 8017506:	f000 f977 	bl	80177f8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801750a:	f7f2 fb11 	bl	8009b30 <RBI_IsTCXO>
 801750e:	4603      	mov	r3, r0
 8017510:	2b01      	cmp	r3, #1
 8017512:	d10e      	bne.n	8017532 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8017514:	2140      	movs	r1, #64	; 0x40
 8017516:	2001      	movs	r0, #1
 8017518:	f000 fb78 	bl	8017c0c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801751c:	2100      	movs	r1, #0
 801751e:	f640 1011 	movw	r0, #2321	; 0x911
 8017522:	f000 fe77 	bl	8018214 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8017526:	237f      	movs	r3, #127	; 0x7f
 8017528:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801752a:	7b38      	ldrb	r0, [r7, #12]
 801752c:	f000 fa85 	bl	8017a3a <SUBGRF_Calibrate>
 8017530:	e009      	b.n	8017546 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8017532:	2120      	movs	r1, #32
 8017534:	f640 1011 	movw	r0, #2321	; 0x911
 8017538:	f000 fe6c 	bl	8018214 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801753c:	2120      	movs	r1, #32
 801753e:	f640 1012 	movw	r0, #2322	; 0x912
 8017542:	f000 fe67 	bl	8018214 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8017546:	f7f2 fad7 	bl	8009af8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801754a:	4b05      	ldr	r3, [pc, #20]	; (8017560 <SUBGRF_Init+0x80>)
 801754c:	2201      	movs	r2, #1
 801754e:	701a      	strb	r2, [r3, #0]
}
 8017550:	bf00      	nop
 8017552:	3710      	adds	r7, #16
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	20000ee8 	.word	0x20000ee8
 801755c:	20000ee4 	.word	0x20000ee4
 8017560:	20000edc 	.word	0x20000edc

08017564 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8017564:	b480      	push	{r7}
 8017566:	af00      	add	r7, sp, #0
    return OperatingMode;
 8017568:	4b02      	ldr	r3, [pc, #8]	; (8017574 <SUBGRF_GetOperatingMode+0x10>)
 801756a:	781b      	ldrb	r3, [r3, #0]
}
 801756c:	4618      	mov	r0, r3
 801756e:	46bd      	mov	sp, r7
 8017570:	bc80      	pop	{r7}
 8017572:	4770      	bx	lr
 8017574:	20000edc 	.word	0x20000edc

08017578 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
 8017580:	460b      	mov	r3, r1
 8017582:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8017584:	78fb      	ldrb	r3, [r7, #3]
 8017586:	461a      	mov	r2, r3
 8017588:	6879      	ldr	r1, [r7, #4]
 801758a:	2000      	movs	r0, #0
 801758c:	f000 feae 	bl	80182ec <SUBGRF_WriteBuffer>
}
 8017590:	bf00      	nop
 8017592:	3708      	adds	r7, #8
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b086      	sub	sp, #24
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	4613      	mov	r3, r2
 80175a4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80175a6:	2300      	movs	r3, #0
 80175a8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80175aa:	f107 0317 	add.w	r3, r7, #23
 80175ae:	4619      	mov	r1, r3
 80175b0:	68b8      	ldr	r0, [r7, #8]
 80175b2:	f000 fdb1 	bl	8018118 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	79fa      	ldrb	r2, [r7, #7]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d201      	bcs.n	80175c4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80175c0:	2301      	movs	r3, #1
 80175c2:	e007      	b.n	80175d4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80175c4:	7df8      	ldrb	r0, [r7, #23]
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	461a      	mov	r2, r3
 80175cc:	68f9      	ldr	r1, [r7, #12]
 80175ce:	f000 feaf 	bl	8018330 <SUBGRF_ReadBuffer>

    return 0;
 80175d2:	2300      	movs	r3, #0
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3718      	adds	r7, #24
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	460b      	mov	r3, r1
 80175e6:	607a      	str	r2, [r7, #4]
 80175e8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80175ea:	7afb      	ldrb	r3, [r7, #11]
 80175ec:	4619      	mov	r1, r3
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	f7ff ffc2 	bl	8017578 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80175f4:	6878      	ldr	r0, [r7, #4]
 80175f6:	f000 f91b 	bl	8017830 <SUBGRF_SetTx>
}
 80175fa:	bf00      	nop
 80175fc:	3710      	adds	r7, #16
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}

08017602 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8017602:	b580      	push	{r7, lr}
 8017604:	b082      	sub	sp, #8
 8017606:	af00      	add	r7, sp, #0
 8017608:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801760a:	2208      	movs	r2, #8
 801760c:	6879      	ldr	r1, [r7, #4]
 801760e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8017612:	f000 fe27 	bl	8018264 <SUBGRF_WriteRegisters>
    return 0;
 8017616:	2300      	movs	r3, #0
}
 8017618:	4618      	mov	r0, r3
 801761a:	3708      	adds	r7, #8
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}

08017620 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b084      	sub	sp, #16
 8017624:	af00      	add	r7, sp, #0
 8017626:	4603      	mov	r3, r0
 8017628:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801762a:	88fb      	ldrh	r3, [r7, #6]
 801762c:	0a1b      	lsrs	r3, r3, #8
 801762e:	b29b      	uxth	r3, r3
 8017630:	b2db      	uxtb	r3, r3
 8017632:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8017634:	88fb      	ldrh	r3, [r7, #6]
 8017636:	b2db      	uxtb	r3, r3
 8017638:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801763a:	f000 fb67 	bl	8017d0c <SUBGRF_GetPacketType>
 801763e:	4603      	mov	r3, r0
 8017640:	2b00      	cmp	r3, #0
 8017642:	d108      	bne.n	8017656 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8017644:	f107 030c 	add.w	r3, r7, #12
 8017648:	2202      	movs	r2, #2
 801764a:	4619      	mov	r1, r3
 801764c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8017650:	f000 fe08 	bl	8018264 <SUBGRF_WriteRegisters>
            break;
 8017654:	e000      	b.n	8017658 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8017656:	bf00      	nop
    }
}
 8017658:	bf00      	nop
 801765a:	3710      	adds	r7, #16
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}

08017660 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b084      	sub	sp, #16
 8017664:	af00      	add	r7, sp, #0
 8017666:	4603      	mov	r3, r0
 8017668:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801766a:	88fb      	ldrh	r3, [r7, #6]
 801766c:	0a1b      	lsrs	r3, r3, #8
 801766e:	b29b      	uxth	r3, r3
 8017670:	b2db      	uxtb	r3, r3
 8017672:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8017674:	88fb      	ldrh	r3, [r7, #6]
 8017676:	b2db      	uxtb	r3, r3
 8017678:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801767a:	f000 fb47 	bl	8017d0c <SUBGRF_GetPacketType>
 801767e:	4603      	mov	r3, r0
 8017680:	2b00      	cmp	r3, #0
 8017682:	d108      	bne.n	8017696 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8017684:	f107 030c 	add.w	r3, r7, #12
 8017688:	2202      	movs	r2, #2
 801768a:	4619      	mov	r1, r3
 801768c:	f240 60be 	movw	r0, #1726	; 0x6be
 8017690:	f000 fde8 	bl	8018264 <SUBGRF_WriteRegisters>
            break;
 8017694:	e000      	b.n	8017698 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8017696:	bf00      	nop
    }
}
 8017698:	bf00      	nop
 801769a:	3710      	adds	r7, #16
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}

080176a0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b084      	sub	sp, #16
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	4603      	mov	r3, r0
 80176a8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80176ae:	f000 fb2d 	bl	8017d0c <SUBGRF_GetPacketType>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d121      	bne.n	80176fc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80176b8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80176bc:	f000 fdbe 	bl	801823c <SUBGRF_ReadRegister>
 80176c0:	4603      	mov	r3, r0
 80176c2:	f023 0301 	bic.w	r3, r3, #1
 80176c6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80176c8:	88fb      	ldrh	r3, [r7, #6]
 80176ca:	0a1b      	lsrs	r3, r3, #8
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	b25b      	sxtb	r3, r3
 80176d0:	f003 0301 	and.w	r3, r3, #1
 80176d4:	b25a      	sxtb	r2, r3
 80176d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176da:	4313      	orrs	r3, r2
 80176dc:	b25b      	sxtb	r3, r3
 80176de:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80176e0:	7bfb      	ldrb	r3, [r7, #15]
 80176e2:	4619      	mov	r1, r3
 80176e4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80176e8:	f000 fd94 	bl	8018214 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80176ec:	88fb      	ldrh	r3, [r7, #6]
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	4619      	mov	r1, r3
 80176f2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80176f6:	f000 fd8d 	bl	8018214 <SUBGRF_WriteRegister>
            break;
 80176fa:	e000      	b.n	80176fe <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80176fc:	bf00      	nop
    }
}
 80176fe:	bf00      	nop
 8017700:	3710      	adds	r7, #16
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}

08017706 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8017706:	b580      	push	{r7, lr}
 8017708:	b082      	sub	sp, #8
 801770a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801770c:	2300      	movs	r3, #0
 801770e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8017710:	2300      	movs	r3, #0
 8017712:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8017714:	2300      	movs	r3, #0
 8017716:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8017718:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801771c:	f000 fd8e 	bl	801823c <SUBGRF_ReadRegister>
 8017720:	4603      	mov	r3, r0
 8017722:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8017724:	79fb      	ldrb	r3, [r7, #7]
 8017726:	f023 0301 	bic.w	r3, r3, #1
 801772a:	b2db      	uxtb	r3, r3
 801772c:	4619      	mov	r1, r3
 801772e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017732:	f000 fd6f 	bl	8018214 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8017736:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801773a:	f000 fd7f 	bl	801823c <SUBGRF_ReadRegister>
 801773e:	4603      	mov	r3, r0
 8017740:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8017742:	79bb      	ldrb	r3, [r7, #6]
 8017744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017748:	b2db      	uxtb	r3, r3
 801774a:	4619      	mov	r1, r3
 801774c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017750:	f000 fd60 	bl	8018214 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017754:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017758:	f000 f88a 	bl	8017870 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801775c:	463b      	mov	r3, r7
 801775e:	2204      	movs	r2, #4
 8017760:	4619      	mov	r1, r3
 8017762:	f640 0019 	movw	r0, #2073	; 0x819
 8017766:	f000 fd9f 	bl	80182a8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801776a:	2000      	movs	r0, #0
 801776c:	f000 f844 	bl	80177f8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8017770:	79fb      	ldrb	r3, [r7, #7]
 8017772:	4619      	mov	r1, r3
 8017774:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8017778:	f000 fd4c 	bl	8018214 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801777c:	79bb      	ldrb	r3, [r7, #6]
 801777e:	4619      	mov	r1, r3
 8017780:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8017784:	f000 fd46 	bl	8018214 <SUBGRF_WriteRegister>

    return number;
 8017788:	683b      	ldr	r3, [r7, #0]
}
 801778a:	4618      	mov	r0, r3
 801778c:	3708      	adds	r7, #8
 801778e:	46bd      	mov	sp, r7
 8017790:	bd80      	pop	{r7, pc}
	...

08017794 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b084      	sub	sp, #16
 8017798:	af00      	add	r7, sp, #0
 801779a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801779c:	2000      	movs	r0, #0
 801779e:	f7f2 f9b2 	bl	8009b06 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80177a2:	2002      	movs	r0, #2
 80177a4:	f000 ff1e 	bl	80185e4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80177a8:	793b      	ldrb	r3, [r7, #4]
 80177aa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80177b4:	793b      	ldrb	r3, [r7, #4]
 80177b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80177be:	b25b      	sxtb	r3, r3
 80177c0:	4313      	orrs	r3, r2
 80177c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80177c4:	793b      	ldrb	r3, [r7, #4]
 80177c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80177ce:	4313      	orrs	r3, r2
 80177d0:	b25b      	sxtb	r3, r3
 80177d2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80177d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80177d6:	f107 030f 	add.w	r3, r7, #15
 80177da:	2201      	movs	r2, #1
 80177dc:	4619      	mov	r1, r3
 80177de:	2084      	movs	r0, #132	; 0x84
 80177e0:	f000 fdc8 	bl	8018374 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80177e4:	4b03      	ldr	r3, [pc, #12]	; (80177f4 <SUBGRF_SetSleep+0x60>)
 80177e6:	2200      	movs	r2, #0
 80177e8:	701a      	strb	r2, [r3, #0]
}
 80177ea:	bf00      	nop
 80177ec:	3710      	adds	r7, #16
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	bf00      	nop
 80177f4:	20000edc 	.word	0x20000edc

080177f8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	4603      	mov	r3, r0
 8017800:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8017802:	1dfb      	adds	r3, r7, #7
 8017804:	2201      	movs	r2, #1
 8017806:	4619      	mov	r1, r3
 8017808:	2080      	movs	r0, #128	; 0x80
 801780a:	f000 fdb3 	bl	8018374 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801780e:	79fb      	ldrb	r3, [r7, #7]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d103      	bne.n	801781c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8017814:	4b05      	ldr	r3, [pc, #20]	; (801782c <SUBGRF_SetStandby+0x34>)
 8017816:	2201      	movs	r2, #1
 8017818:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801781a:	e002      	b.n	8017822 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801781c:	4b03      	ldr	r3, [pc, #12]	; (801782c <SUBGRF_SetStandby+0x34>)
 801781e:	2202      	movs	r2, #2
 8017820:	701a      	strb	r2, [r3, #0]
}
 8017822:	bf00      	nop
 8017824:	3708      	adds	r7, #8
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	20000edc 	.word	0x20000edc

08017830 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b084      	sub	sp, #16
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8017838:	4b0c      	ldr	r3, [pc, #48]	; (801786c <SUBGRF_SetTx+0x3c>)
 801783a:	2204      	movs	r2, #4
 801783c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	0c1b      	lsrs	r3, r3, #16
 8017842:	b2db      	uxtb	r3, r3
 8017844:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	0a1b      	lsrs	r3, r3, #8
 801784a:	b2db      	uxtb	r3, r3
 801784c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	b2db      	uxtb	r3, r3
 8017852:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8017854:	f107 030c 	add.w	r3, r7, #12
 8017858:	2203      	movs	r2, #3
 801785a:	4619      	mov	r1, r3
 801785c:	2083      	movs	r0, #131	; 0x83
 801785e:	f000 fd89 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017862:	bf00      	nop
 8017864:	3710      	adds	r7, #16
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	20000edc 	.word	0x20000edc

08017870 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b084      	sub	sp, #16
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8017878:	4b0c      	ldr	r3, [pc, #48]	; (80178ac <SUBGRF_SetRx+0x3c>)
 801787a:	2205      	movs	r2, #5
 801787c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	0c1b      	lsrs	r3, r3, #16
 8017882:	b2db      	uxtb	r3, r3
 8017884:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	0a1b      	lsrs	r3, r3, #8
 801788a:	b2db      	uxtb	r3, r3
 801788c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	b2db      	uxtb	r3, r3
 8017892:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8017894:	f107 030c 	add.w	r3, r7, #12
 8017898:	2203      	movs	r2, #3
 801789a:	4619      	mov	r1, r3
 801789c:	2082      	movs	r0, #130	; 0x82
 801789e:	f000 fd69 	bl	8018374 <SUBGRF_WriteCommand>
}
 80178a2:	bf00      	nop
 80178a4:	3710      	adds	r7, #16
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	20000edc 	.word	0x20000edc

080178b0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b084      	sub	sp, #16
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80178b8:	4b0e      	ldr	r3, [pc, #56]	; (80178f4 <SUBGRF_SetRxBoosted+0x44>)
 80178ba:	2205      	movs	r2, #5
 80178bc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80178be:	2197      	movs	r1, #151	; 0x97
 80178c0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80178c4:	f000 fca6 	bl	8018214 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	0c1b      	lsrs	r3, r3, #16
 80178cc:	b2db      	uxtb	r3, r3
 80178ce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	0a1b      	lsrs	r3, r3, #8
 80178d4:	b2db      	uxtb	r3, r3
 80178d6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80178de:	f107 030c 	add.w	r3, r7, #12
 80178e2:	2203      	movs	r2, #3
 80178e4:	4619      	mov	r1, r3
 80178e6:	2082      	movs	r0, #130	; 0x82
 80178e8:	f000 fd44 	bl	8018374 <SUBGRF_WriteCommand>
}
 80178ec:	bf00      	nop
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	20000edc 	.word	0x20000edc

080178f8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	0c1b      	lsrs	r3, r3, #16
 8017906:	b2db      	uxtb	r3, r3
 8017908:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	0a1b      	lsrs	r3, r3, #8
 801790e:	b2db      	uxtb	r3, r3
 8017910:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	b2db      	uxtb	r3, r3
 8017916:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	0c1b      	lsrs	r3, r3, #16
 801791c:	b2db      	uxtb	r3, r3
 801791e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	0a1b      	lsrs	r3, r3, #8
 8017924:	b2db      	uxtb	r3, r3
 8017926:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	b2db      	uxtb	r3, r3
 801792c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801792e:	f107 0308 	add.w	r3, r7, #8
 8017932:	2206      	movs	r2, #6
 8017934:	4619      	mov	r1, r3
 8017936:	2094      	movs	r0, #148	; 0x94
 8017938:	f000 fd1c 	bl	8018374 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801793c:	4b03      	ldr	r3, [pc, #12]	; (801794c <SUBGRF_SetRxDutyCycle+0x54>)
 801793e:	2206      	movs	r2, #6
 8017940:	701a      	strb	r2, [r3, #0]
}
 8017942:	bf00      	nop
 8017944:	3710      	adds	r7, #16
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}
 801794a:	bf00      	nop
 801794c:	20000edc 	.word	0x20000edc

08017950 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8017950:	b580      	push	{r7, lr}
 8017952:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8017954:	2200      	movs	r2, #0
 8017956:	2100      	movs	r1, #0
 8017958:	20c5      	movs	r0, #197	; 0xc5
 801795a:	f000 fd0b 	bl	8018374 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801795e:	4b02      	ldr	r3, [pc, #8]	; (8017968 <SUBGRF_SetCad+0x18>)
 8017960:	2207      	movs	r2, #7
 8017962:	701a      	strb	r2, [r3, #0]
}
 8017964:	bf00      	nop
 8017966:	bd80      	pop	{r7, pc}
 8017968:	20000edc 	.word	0x20000edc

0801796c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801796c:	b580      	push	{r7, lr}
 801796e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8017970:	2200      	movs	r2, #0
 8017972:	2100      	movs	r1, #0
 8017974:	20d1      	movs	r0, #209	; 0xd1
 8017976:	f000 fcfd 	bl	8018374 <SUBGRF_WriteCommand>
}
 801797a:	bf00      	nop
 801797c:	bd80      	pop	{r7, pc}

0801797e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801797e:	b580      	push	{r7, lr}
 8017980:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8017982:	2200      	movs	r2, #0
 8017984:	2100      	movs	r1, #0
 8017986:	20d2      	movs	r0, #210	; 0xd2
 8017988:	f000 fcf4 	bl	8018374 <SUBGRF_WriteCommand>
}
 801798c:	bf00      	nop
 801798e:	bd80      	pop	{r7, pc}

08017990 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	4603      	mov	r3, r0
 8017998:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801799a:	1dfb      	adds	r3, r7, #7
 801799c:	2201      	movs	r2, #1
 801799e:	4619      	mov	r1, r3
 80179a0:	209f      	movs	r0, #159	; 0x9f
 80179a2:	f000 fce7 	bl	8018374 <SUBGRF_WriteCommand>
}
 80179a6:	bf00      	nop
 80179a8:	3708      	adds	r7, #8
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80179ae:	b580      	push	{r7, lr}
 80179b0:	b084      	sub	sp, #16
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	4603      	mov	r3, r0
 80179b6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80179b8:	1dfb      	adds	r3, r7, #7
 80179ba:	2201      	movs	r2, #1
 80179bc:	4619      	mov	r1, r3
 80179be:	20a0      	movs	r0, #160	; 0xa0
 80179c0:	f000 fcd8 	bl	8018374 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80179c4:	79fb      	ldrb	r3, [r7, #7]
 80179c6:	2b3f      	cmp	r3, #63	; 0x3f
 80179c8:	d91c      	bls.n	8017a04 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80179ca:	79fb      	ldrb	r3, [r7, #7]
 80179cc:	085b      	lsrs	r3, r3, #1
 80179ce:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80179d0:	2300      	movs	r3, #0
 80179d2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80179d4:	2300      	movs	r3, #0
 80179d6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80179d8:	e005      	b.n	80179e6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80179da:	7bfb      	ldrb	r3, [r7, #15]
 80179dc:	089b      	lsrs	r3, r3, #2
 80179de:	73fb      	strb	r3, [r7, #15]
            exp++;
 80179e0:	7bbb      	ldrb	r3, [r7, #14]
 80179e2:	3301      	adds	r3, #1
 80179e4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80179e6:	7bfb      	ldrb	r3, [r7, #15]
 80179e8:	2b1f      	cmp	r3, #31
 80179ea:	d8f6      	bhi.n	80179da <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80179ec:	7bfb      	ldrb	r3, [r7, #15]
 80179ee:	00db      	lsls	r3, r3, #3
 80179f0:	b2da      	uxtb	r2, r3
 80179f2:	7bbb      	ldrb	r3, [r7, #14]
 80179f4:	4413      	add	r3, r2
 80179f6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80179f8:	7b7b      	ldrb	r3, [r7, #13]
 80179fa:	4619      	mov	r1, r3
 80179fc:	f240 7006 	movw	r0, #1798	; 0x706
 8017a00:	f000 fc08 	bl	8018214 <SUBGRF_WriteRegister>
    }
}
 8017a04:	bf00      	nop
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8017a12:	f7f2 f894 	bl	8009b3e <RBI_IsDCDC>
 8017a16:	4603      	mov	r3, r0
 8017a18:	2b01      	cmp	r3, #1
 8017a1a:	d102      	bne.n	8017a22 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8017a1c:	2301      	movs	r3, #1
 8017a1e:	71fb      	strb	r3, [r7, #7]
 8017a20:	e001      	b.n	8017a26 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8017a22:	2300      	movs	r3, #0
 8017a24:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8017a26:	1dfb      	adds	r3, r7, #7
 8017a28:	2201      	movs	r2, #1
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	2096      	movs	r0, #150	; 0x96
 8017a2e:	f000 fca1 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017a32:	bf00      	nop
 8017a34:	3708      	adds	r7, #8
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}

08017a3a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8017a3a:	b580      	push	{r7, lr}
 8017a3c:	b084      	sub	sp, #16
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8017a42:	793b      	ldrb	r3, [r7, #4]
 8017a44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	019b      	lsls	r3, r3, #6
 8017a4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8017a4e:	793b      	ldrb	r3, [r7, #4]
 8017a50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8017a58:	b25b      	sxtb	r3, r3
 8017a5a:	4313      	orrs	r3, r2
 8017a5c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8017a5e:	793b      	ldrb	r3, [r7, #4]
 8017a60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8017a64:	b2db      	uxtb	r3, r3
 8017a66:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8017a68:	b25b      	sxtb	r3, r3
 8017a6a:	4313      	orrs	r3, r2
 8017a6c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8017a6e:	793b      	ldrb	r3, [r7, #4]
 8017a70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017a74:	b2db      	uxtb	r3, r3
 8017a76:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8017a78:	b25b      	sxtb	r3, r3
 8017a7a:	4313      	orrs	r3, r2
 8017a7c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8017a7e:	793b      	ldrb	r3, [r7, #4]
 8017a80:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8017a88:	b25b      	sxtb	r3, r3
 8017a8a:	4313      	orrs	r3, r2
 8017a8c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8017a8e:	793b      	ldrb	r3, [r7, #4]
 8017a90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8017a94:	b2db      	uxtb	r3, r3
 8017a96:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8017a98:	b25b      	sxtb	r3, r3
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8017a9e:	793b      	ldrb	r3, [r7, #4]
 8017aa0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8017aa8:	4313      	orrs	r3, r2
 8017aaa:	b25b      	sxtb	r3, r3
 8017aac:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8017aae:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8017ab0:	f107 030f 	add.w	r3, r7, #15
 8017ab4:	2201      	movs	r2, #1
 8017ab6:	4619      	mov	r1, r3
 8017ab8:	2089      	movs	r0, #137	; 0x89
 8017aba:	f000 fc5b 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017abe:	bf00      	nop
 8017ac0:	3710      	adds	r7, #16
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
	...

08017ac8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	4a1b      	ldr	r2, [pc, #108]	; (8017b40 <SUBGRF_CalibrateImage+0x78>)
 8017ad4:	4293      	cmp	r3, r2
 8017ad6:	d904      	bls.n	8017ae2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8017ad8:	23e1      	movs	r3, #225	; 0xe1
 8017ada:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8017adc:	23e9      	movs	r3, #233	; 0xe9
 8017ade:	737b      	strb	r3, [r7, #13]
 8017ae0:	e022      	b.n	8017b28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	4a17      	ldr	r2, [pc, #92]	; (8017b44 <SUBGRF_CalibrateImage+0x7c>)
 8017ae6:	4293      	cmp	r3, r2
 8017ae8:	d904      	bls.n	8017af4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8017aea:	23d7      	movs	r3, #215	; 0xd7
 8017aec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8017aee:	23db      	movs	r3, #219	; 0xdb
 8017af0:	737b      	strb	r3, [r7, #13]
 8017af2:	e019      	b.n	8017b28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	4a14      	ldr	r2, [pc, #80]	; (8017b48 <SUBGRF_CalibrateImage+0x80>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d904      	bls.n	8017b06 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8017afc:	23c1      	movs	r3, #193	; 0xc1
 8017afe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8017b00:	23c5      	movs	r3, #197	; 0xc5
 8017b02:	737b      	strb	r3, [r7, #13]
 8017b04:	e010      	b.n	8017b28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	4a10      	ldr	r2, [pc, #64]	; (8017b4c <SUBGRF_CalibrateImage+0x84>)
 8017b0a:	4293      	cmp	r3, r2
 8017b0c:	d904      	bls.n	8017b18 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8017b0e:	2375      	movs	r3, #117	; 0x75
 8017b10:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8017b12:	2381      	movs	r3, #129	; 0x81
 8017b14:	737b      	strb	r3, [r7, #13]
 8017b16:	e007      	b.n	8017b28 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	4a0d      	ldr	r2, [pc, #52]	; (8017b50 <SUBGRF_CalibrateImage+0x88>)
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	d903      	bls.n	8017b28 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8017b20:	236b      	movs	r3, #107	; 0x6b
 8017b22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8017b24:	236f      	movs	r3, #111	; 0x6f
 8017b26:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8017b28:	f107 030c 	add.w	r3, r7, #12
 8017b2c:	2202      	movs	r2, #2
 8017b2e:	4619      	mov	r1, r3
 8017b30:	2098      	movs	r0, #152	; 0x98
 8017b32:	f000 fc1f 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017b36:	bf00      	nop
 8017b38:	3710      	adds	r7, #16
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	35a4e900 	.word	0x35a4e900
 8017b44:	32a9f880 	.word	0x32a9f880
 8017b48:	2de54480 	.word	0x2de54480
 8017b4c:	1b6b0b00 	.word	0x1b6b0b00
 8017b50:	1954fc40 	.word	0x1954fc40

08017b54 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8017b54:	b590      	push	{r4, r7, lr}
 8017b56:	b085      	sub	sp, #20
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	4608      	mov	r0, r1
 8017b5e:	4611      	mov	r1, r2
 8017b60:	461a      	mov	r2, r3
 8017b62:	4623      	mov	r3, r4
 8017b64:	71fb      	strb	r3, [r7, #7]
 8017b66:	4603      	mov	r3, r0
 8017b68:	71bb      	strb	r3, [r7, #6]
 8017b6a:	460b      	mov	r3, r1
 8017b6c:	717b      	strb	r3, [r7, #5]
 8017b6e:	4613      	mov	r3, r2
 8017b70:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8017b72:	79fb      	ldrb	r3, [r7, #7]
 8017b74:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8017b76:	79bb      	ldrb	r3, [r7, #6]
 8017b78:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8017b7a:	797b      	ldrb	r3, [r7, #5]
 8017b7c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8017b7e:	793b      	ldrb	r3, [r7, #4]
 8017b80:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8017b82:	f107 030c 	add.w	r3, r7, #12
 8017b86:	2204      	movs	r2, #4
 8017b88:	4619      	mov	r1, r3
 8017b8a:	2095      	movs	r0, #149	; 0x95
 8017b8c:	f000 fbf2 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017b90:	bf00      	nop
 8017b92:	3714      	adds	r7, #20
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd90      	pop	{r4, r7, pc}

08017b98 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b085      	sub	sp, #20
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	4608      	mov	r0, r1
 8017ba2:	4611      	mov	r1, r2
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	4623      	mov	r3, r4
 8017ba8:	80fb      	strh	r3, [r7, #6]
 8017baa:	4603      	mov	r3, r0
 8017bac:	80bb      	strh	r3, [r7, #4]
 8017bae:	460b      	mov	r3, r1
 8017bb0:	807b      	strh	r3, [r7, #2]
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8017bb6:	88fb      	ldrh	r3, [r7, #6]
 8017bb8:	0a1b      	lsrs	r3, r3, #8
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8017bc0:	88fb      	ldrh	r3, [r7, #6]
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8017bc6:	88bb      	ldrh	r3, [r7, #4]
 8017bc8:	0a1b      	lsrs	r3, r3, #8
 8017bca:	b29b      	uxth	r3, r3
 8017bcc:	b2db      	uxtb	r3, r3
 8017bce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8017bd0:	88bb      	ldrh	r3, [r7, #4]
 8017bd2:	b2db      	uxtb	r3, r3
 8017bd4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8017bd6:	887b      	ldrh	r3, [r7, #2]
 8017bd8:	0a1b      	lsrs	r3, r3, #8
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	b2db      	uxtb	r3, r3
 8017bde:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8017be0:	887b      	ldrh	r3, [r7, #2]
 8017be2:	b2db      	uxtb	r3, r3
 8017be4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8017be6:	883b      	ldrh	r3, [r7, #0]
 8017be8:	0a1b      	lsrs	r3, r3, #8
 8017bea:	b29b      	uxth	r3, r3
 8017bec:	b2db      	uxtb	r3, r3
 8017bee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8017bf0:	883b      	ldrh	r3, [r7, #0]
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8017bf6:	f107 0308 	add.w	r3, r7, #8
 8017bfa:	2208      	movs	r2, #8
 8017bfc:	4619      	mov	r1, r3
 8017bfe:	2008      	movs	r0, #8
 8017c00:	f000 fbb8 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017c04:	bf00      	nop
 8017c06:	3714      	adds	r7, #20
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd90      	pop	{r4, r7, pc}

08017c0c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	4603      	mov	r3, r0
 8017c14:	6039      	str	r1, [r7, #0]
 8017c16:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8017c18:	79fb      	ldrb	r3, [r7, #7]
 8017c1a:	f003 0307 	and.w	r3, r3, #7
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	0c1b      	lsrs	r3, r3, #16
 8017c26:	b2db      	uxtb	r3, r3
 8017c28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	0a1b      	lsrs	r3, r3, #8
 8017c2e:	b2db      	uxtb	r3, r3
 8017c30:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8017c32:	683b      	ldr	r3, [r7, #0]
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8017c38:	f107 030c 	add.w	r3, r7, #12
 8017c3c:	2204      	movs	r2, #4
 8017c3e:	4619      	mov	r1, r3
 8017c40:	2097      	movs	r0, #151	; 0x97
 8017c42:	f000 fb97 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017c46:	bf00      	nop
 8017c48:	3710      	adds	r7, #16
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	bd80      	pop	{r7, pc}
	...

08017c50 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8017c50:	b5b0      	push	{r4, r5, r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8017c5c:	4b1b      	ldr	r3, [pc, #108]	; (8017ccc <SUBGRF_SetRfFrequency+0x7c>)
 8017c5e:	781b      	ldrb	r3, [r3, #0]
 8017c60:	f083 0301 	eor.w	r3, r3, #1
 8017c64:	b2db      	uxtb	r3, r3
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d005      	beq.n	8017c76 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7ff ff2c 	bl	8017ac8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8017c70:	4b16      	ldr	r3, [pc, #88]	; (8017ccc <SUBGRF_SetRfFrequency+0x7c>)
 8017c72:	2201      	movs	r2, #1
 8017c74:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	461a      	mov	r2, r3
 8017c7a:	f04f 0300 	mov.w	r3, #0
 8017c7e:	09d5      	lsrs	r5, r2, #7
 8017c80:	0654      	lsls	r4, r2, #25
 8017c82:	4a13      	ldr	r2, [pc, #76]	; (8017cd0 <SUBGRF_SetRfFrequency+0x80>)
 8017c84:	f04f 0300 	mov.w	r3, #0
 8017c88:	4620      	mov	r0, r4
 8017c8a:	4629      	mov	r1, r5
 8017c8c:	f7e8 ff66 	bl	8000b5c <__aeabi_uldivmod>
 8017c90:	4602      	mov	r2, r0
 8017c92:	460b      	mov	r3, r1
 8017c94:	4613      	mov	r3, r2
 8017c96:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	0e1b      	lsrs	r3, r3, #24
 8017c9c:	b2db      	uxtb	r3, r3
 8017c9e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	0c1b      	lsrs	r3, r3, #16
 8017ca4:	b2db      	uxtb	r3, r3
 8017ca6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	0a1b      	lsrs	r3, r3, #8
 8017cac:	b2db      	uxtb	r3, r3
 8017cae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	b2db      	uxtb	r3, r3
 8017cb4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8017cb6:	f107 0308 	add.w	r3, r7, #8
 8017cba:	2204      	movs	r2, #4
 8017cbc:	4619      	mov	r1, r3
 8017cbe:	2086      	movs	r0, #134	; 0x86
 8017cc0:	f000 fb58 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017cc4:	bf00      	nop
 8017cc6:	3710      	adds	r7, #16
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bdb0      	pop	{r4, r5, r7, pc}
 8017ccc:	20000ee4 	.word	0x20000ee4
 8017cd0:	01e84800 	.word	0x01e84800

08017cd4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	4603      	mov	r3, r0
 8017cdc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8017cde:	79fa      	ldrb	r2, [r7, #7]
 8017ce0:	4b09      	ldr	r3, [pc, #36]	; (8017d08 <SUBGRF_SetPacketType+0x34>)
 8017ce2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8017ce4:	79fb      	ldrb	r3, [r7, #7]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d104      	bne.n	8017cf4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8017cea:	2100      	movs	r1, #0
 8017cec:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8017cf0:	f000 fa90 	bl	8018214 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8017cf4:	1dfb      	adds	r3, r7, #7
 8017cf6:	2201      	movs	r2, #1
 8017cf8:	4619      	mov	r1, r3
 8017cfa:	208a      	movs	r0, #138	; 0x8a
 8017cfc:	f000 fb3a 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017d00:	bf00      	nop
 8017d02:	3708      	adds	r7, #8
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	20000edd 	.word	0x20000edd

08017d0c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8017d0c:	b480      	push	{r7}
 8017d0e:	af00      	add	r7, sp, #0
    return PacketType;
 8017d10:	4b02      	ldr	r3, [pc, #8]	; (8017d1c <SUBGRF_GetPacketType+0x10>)
 8017d12:	781b      	ldrb	r3, [r3, #0]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bc80      	pop	{r7}
 8017d1a:	4770      	bx	lr
 8017d1c:	20000edd 	.word	0x20000edd

08017d20 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b084      	sub	sp, #16
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	4603      	mov	r3, r0
 8017d28:	71fb      	strb	r3, [r7, #7]
 8017d2a:	460b      	mov	r3, r1
 8017d2c:	71bb      	strb	r3, [r7, #6]
 8017d2e:	4613      	mov	r3, r2
 8017d30:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8017d32:	79fb      	ldrb	r3, [r7, #7]
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d124      	bne.n	8017d82 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8017d38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017d3c:	2b0f      	cmp	r3, #15
 8017d3e:	d106      	bne.n	8017d4e <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8017d40:	2301      	movs	r3, #1
 8017d42:	2201      	movs	r2, #1
 8017d44:	2100      	movs	r1, #0
 8017d46:	2006      	movs	r0, #6
 8017d48:	f7ff ff04 	bl	8017b54 <SUBGRF_SetPaConfig>
 8017d4c:	e005      	b.n	8017d5a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8017d4e:	2301      	movs	r3, #1
 8017d50:	2201      	movs	r2, #1
 8017d52:	2100      	movs	r1, #0
 8017d54:	2004      	movs	r0, #4
 8017d56:	f7ff fefd 	bl	8017b54 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8017d5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017d5e:	2b0d      	cmp	r3, #13
 8017d60:	dd02      	ble.n	8017d68 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8017d62:	230e      	movs	r3, #14
 8017d64:	71bb      	strb	r3, [r7, #6]
 8017d66:	e006      	b.n	8017d76 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8017d68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017d6c:	f113 0f11 	cmn.w	r3, #17
 8017d70:	da01      	bge.n	8017d76 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8017d72:	23ef      	movs	r3, #239	; 0xef
 8017d74:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8017d76:	2118      	movs	r1, #24
 8017d78:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017d7c:	f000 fa4a 	bl	8018214 <SUBGRF_WriteRegister>
 8017d80:	e025      	b.n	8017dce <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8017d82:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8017d86:	f000 fa59 	bl	801823c <SUBGRF_ReadRegister>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	f043 031e 	orr.w	r3, r3, #30
 8017d90:	b2db      	uxtb	r3, r3
 8017d92:	4619      	mov	r1, r3
 8017d94:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8017d98:	f000 fa3c 	bl	8018214 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8017d9c:	2301      	movs	r3, #1
 8017d9e:	2200      	movs	r2, #0
 8017da0:	2107      	movs	r1, #7
 8017da2:	2004      	movs	r0, #4
 8017da4:	f7ff fed6 	bl	8017b54 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8017da8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dac:	2b16      	cmp	r3, #22
 8017dae:	dd02      	ble.n	8017db6 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8017db0:	2316      	movs	r3, #22
 8017db2:	71bb      	strb	r3, [r7, #6]
 8017db4:	e006      	b.n	8017dc4 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8017db6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dba:	f113 0f09 	cmn.w	r3, #9
 8017dbe:	da01      	bge.n	8017dc4 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8017dc0:	23f7      	movs	r3, #247	; 0xf7
 8017dc2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8017dc4:	2138      	movs	r1, #56	; 0x38
 8017dc6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8017dca:	f000 fa23 	bl	8018214 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8017dce:	79bb      	ldrb	r3, [r7, #6]
 8017dd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8017dd2:	797b      	ldrb	r3, [r7, #5]
 8017dd4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8017dd6:	f107 030c 	add.w	r3, r7, #12
 8017dda:	2202      	movs	r2, #2
 8017ddc:	4619      	mov	r1, r3
 8017dde:	208e      	movs	r0, #142	; 0x8e
 8017de0:	f000 fac8 	bl	8018374 <SUBGRF_WriteCommand>
}
 8017de4:	bf00      	nop
 8017de6:	3710      	adds	r7, #16
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bd80      	pop	{r7, pc}

08017dec <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8017dec:	b5b0      	push	{r4, r5, r7, lr}
 8017dee:	b086      	sub	sp, #24
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8017df4:	2300      	movs	r3, #0
 8017df6:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8017df8:	4a5e      	ldr	r2, [pc, #376]	; (8017f74 <SUBGRF_SetModulationParams+0x188>)
 8017dfa:	f107 0308 	add.w	r3, r7, #8
 8017dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e02:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	781a      	ldrb	r2, [r3, #0]
 8017e0a:	4b5b      	ldr	r3, [pc, #364]	; (8017f78 <SUBGRF_SetModulationParams+0x18c>)
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	d004      	beq.n	8017e1c <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	781b      	ldrb	r3, [r3, #0]
 8017e16:	4618      	mov	r0, r3
 8017e18:	f7ff ff5c 	bl	8017cd4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	781b      	ldrb	r3, [r3, #0]
 8017e20:	2b03      	cmp	r3, #3
 8017e22:	f200 80a2 	bhi.w	8017f6a <SUBGRF_SetModulationParams+0x17e>
 8017e26:	a201      	add	r2, pc, #4	; (adr r2, 8017e2c <SUBGRF_SetModulationParams+0x40>)
 8017e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e2c:	08017e3d 	.word	0x08017e3d
 8017e30:	08017ef9 	.word	0x08017ef9
 8017e34:	08017ebb 	.word	0x08017ebb
 8017e38:	08017f27 	.word	0x08017f27
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8017e3c:	2308      	movs	r3, #8
 8017e3e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	4a4d      	ldr	r2, [pc, #308]	; (8017f7c <SUBGRF_SetModulationParams+0x190>)
 8017e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e4a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	0c1b      	lsrs	r3, r3, #16
 8017e50:	b2db      	uxtb	r3, r3
 8017e52:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	0a1b      	lsrs	r3, r3, #8
 8017e58:	b2db      	uxtb	r3, r3
 8017e5a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8017e5c:	697b      	ldr	r3, [r7, #20]
 8017e5e:	b2db      	uxtb	r3, r3
 8017e60:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	7b1b      	ldrb	r3, [r3, #12]
 8017e66:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	7b5b      	ldrb	r3, [r3, #13]
 8017e6c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	689b      	ldr	r3, [r3, #8]
 8017e72:	461a      	mov	r2, r3
 8017e74:	f04f 0300 	mov.w	r3, #0
 8017e78:	09d5      	lsrs	r5, r2, #7
 8017e7a:	0654      	lsls	r4, r2, #25
 8017e7c:	4a40      	ldr	r2, [pc, #256]	; (8017f80 <SUBGRF_SetModulationParams+0x194>)
 8017e7e:	f04f 0300 	mov.w	r3, #0
 8017e82:	4620      	mov	r0, r4
 8017e84:	4629      	mov	r1, r5
 8017e86:	f7e8 fe69 	bl	8000b5c <__aeabi_uldivmod>
 8017e8a:	4602      	mov	r2, r0
 8017e8c:	460b      	mov	r3, r1
 8017e8e:	4613      	mov	r3, r2
 8017e90:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	0c1b      	lsrs	r3, r3, #16
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8017e9a:	697b      	ldr	r3, [r7, #20]
 8017e9c:	0a1b      	lsrs	r3, r3, #8
 8017e9e:	b2db      	uxtb	r3, r3
 8017ea0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	b2db      	uxtb	r3, r3
 8017ea6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8017ea8:	7cfb      	ldrb	r3, [r7, #19]
 8017eaa:	b29a      	uxth	r2, r3
 8017eac:	f107 0308 	add.w	r3, r7, #8
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	208b      	movs	r0, #139	; 0x8b
 8017eb4:	f000 fa5e 	bl	8018374 <SUBGRF_WriteCommand>
        break;
 8017eb8:	e058      	b.n	8017f6c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8017eba:	2304      	movs	r3, #4
 8017ebc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	691b      	ldr	r3, [r3, #16]
 8017ec2:	4a2e      	ldr	r2, [pc, #184]	; (8017f7c <SUBGRF_SetModulationParams+0x190>)
 8017ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ec8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8017eca:	697b      	ldr	r3, [r7, #20]
 8017ecc:	0c1b      	lsrs	r3, r3, #16
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	0a1b      	lsrs	r3, r3, #8
 8017ed6:	b2db      	uxtb	r3, r3
 8017ed8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	7d1b      	ldrb	r3, [r3, #20]
 8017ee4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8017ee6:	7cfb      	ldrb	r3, [r7, #19]
 8017ee8:	b29a      	uxth	r2, r3
 8017eea:	f107 0308 	add.w	r3, r7, #8
 8017eee:	4619      	mov	r1, r3
 8017ef0:	208b      	movs	r0, #139	; 0x8b
 8017ef2:	f000 fa3f 	bl	8018374 <SUBGRF_WriteCommand>
        break;
 8017ef6:	e039      	b.n	8017f6c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8017ef8:	2304      	movs	r3, #4
 8017efa:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	7e1b      	ldrb	r3, [r3, #24]
 8017f00:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	7e5b      	ldrb	r3, [r3, #25]
 8017f06:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	7e9b      	ldrb	r3, [r3, #26]
 8017f0c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	7edb      	ldrb	r3, [r3, #27]
 8017f12:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8017f14:	7cfb      	ldrb	r3, [r7, #19]
 8017f16:	b29a      	uxth	r2, r3
 8017f18:	f107 0308 	add.w	r3, r7, #8
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	208b      	movs	r0, #139	; 0x8b
 8017f20:	f000 fa28 	bl	8018374 <SUBGRF_WriteCommand>

        break;
 8017f24:	e022      	b.n	8017f6c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8017f26:	2305      	movs	r3, #5
 8017f28:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	685b      	ldr	r3, [r3, #4]
 8017f2e:	4a13      	ldr	r2, [pc, #76]	; (8017f7c <SUBGRF_SetModulationParams+0x190>)
 8017f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f34:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	0c1b      	lsrs	r3, r3, #16
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	0a1b      	lsrs	r3, r3, #8
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	7b1b      	ldrb	r3, [r3, #12]
 8017f50:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	7b5b      	ldrb	r3, [r3, #13]
 8017f56:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8017f58:	7cfb      	ldrb	r3, [r7, #19]
 8017f5a:	b29a      	uxth	r2, r3
 8017f5c:	f107 0308 	add.w	r3, r7, #8
 8017f60:	4619      	mov	r1, r3
 8017f62:	208b      	movs	r0, #139	; 0x8b
 8017f64:	f000 fa06 	bl	8018374 <SUBGRF_WriteCommand>
        break;
 8017f68:	e000      	b.n	8017f6c <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8017f6a:	bf00      	nop
    }
}
 8017f6c:	bf00      	nop
 8017f6e:	3718      	adds	r7, #24
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bdb0      	pop	{r4, r5, r7, pc}
 8017f74:	0801a7f8 	.word	0x0801a7f8
 8017f78:	20000edd 	.word	0x20000edd
 8017f7c:	3d090000 	.word	0x3d090000
 8017f80:	01e84800 	.word	0x01e84800

08017f84 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b086      	sub	sp, #24
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8017f90:	4a48      	ldr	r2, [pc, #288]	; (80180b4 <SUBGRF_SetPacketParams+0x130>)
 8017f92:	f107 030c 	add.w	r3, r7, #12
 8017f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8017f98:	c303      	stmia	r3!, {r0, r1}
 8017f9a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	781a      	ldrb	r2, [r3, #0]
 8017fa0:	4b45      	ldr	r3, [pc, #276]	; (80180b8 <SUBGRF_SetPacketParams+0x134>)
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d004      	beq.n	8017fb2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7ff fe91 	bl	8017cd4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	2b03      	cmp	r3, #3
 8017fb8:	d878      	bhi.n	80180ac <SUBGRF_SetPacketParams+0x128>
 8017fba:	a201      	add	r2, pc, #4	; (adr r2, 8017fc0 <SUBGRF_SetPacketParams+0x3c>)
 8017fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fc0:	08017fd1 	.word	0x08017fd1
 8017fc4:	08018061 	.word	0x08018061
 8017fc8:	08018055 	.word	0x08018055
 8017fcc:	08017fd1 	.word	0x08017fd1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	7a5b      	ldrb	r3, [r3, #9]
 8017fd4:	2bf1      	cmp	r3, #241	; 0xf1
 8017fd6:	d10a      	bne.n	8017fee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8017fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017fdc:	f7ff fb20 	bl	8017620 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8017fe0:	f248 0005 	movw	r0, #32773	; 0x8005
 8017fe4:	f7ff fb3c 	bl	8017660 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8017fe8:	2302      	movs	r3, #2
 8017fea:	75bb      	strb	r3, [r7, #22]
 8017fec:	e011      	b.n	8018012 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	7a5b      	ldrb	r3, [r3, #9]
 8017ff2:	2bf2      	cmp	r3, #242	; 0xf2
 8017ff4:	d10a      	bne.n	801800c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8017ff6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8017ffa:	f7ff fb11 	bl	8017620 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8017ffe:	f241 0021 	movw	r0, #4129	; 0x1021
 8018002:	f7ff fb2d 	bl	8017660 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018006:	2306      	movs	r3, #6
 8018008:	75bb      	strb	r3, [r7, #22]
 801800a:	e002      	b.n	8018012 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	7a5b      	ldrb	r3, [r3, #9]
 8018010:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018012:	2309      	movs	r3, #9
 8018014:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	885b      	ldrh	r3, [r3, #2]
 801801a:	0a1b      	lsrs	r3, r3, #8
 801801c:	b29b      	uxth	r3, r3
 801801e:	b2db      	uxtb	r3, r3
 8018020:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	885b      	ldrh	r3, [r3, #2]
 8018026:	b2db      	uxtb	r3, r3
 8018028:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	791b      	ldrb	r3, [r3, #4]
 801802e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	795b      	ldrb	r3, [r3, #5]
 8018034:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	799b      	ldrb	r3, [r3, #6]
 801803a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	79db      	ldrb	r3, [r3, #7]
 8018040:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	7a1b      	ldrb	r3, [r3, #8]
 8018046:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018048:	7dbb      	ldrb	r3, [r7, #22]
 801804a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	7a9b      	ldrb	r3, [r3, #10]
 8018050:	753b      	strb	r3, [r7, #20]
        break;
 8018052:	e022      	b.n	801809a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018054:	2301      	movs	r3, #1
 8018056:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	7b1b      	ldrb	r3, [r3, #12]
 801805c:	733b      	strb	r3, [r7, #12]
        break;
 801805e:	e01c      	b.n	801809a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018060:	2306      	movs	r3, #6
 8018062:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	89db      	ldrh	r3, [r3, #14]
 8018068:	0a1b      	lsrs	r3, r3, #8
 801806a:	b29b      	uxth	r3, r3
 801806c:	b2db      	uxtb	r3, r3
 801806e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	89db      	ldrh	r3, [r3, #14]
 8018074:	b2db      	uxtb	r3, r3
 8018076:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	7c1a      	ldrb	r2, [r3, #16]
 801807c:	4b0f      	ldr	r3, [pc, #60]	; (80180bc <SUBGRF_SetPacketParams+0x138>)
 801807e:	4611      	mov	r1, r2
 8018080:	7019      	strb	r1, [r3, #0]
 8018082:	4613      	mov	r3, r2
 8018084:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	7c5b      	ldrb	r3, [r3, #17]
 801808a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	7c9b      	ldrb	r3, [r3, #18]
 8018090:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	7cdb      	ldrb	r3, [r3, #19]
 8018096:	747b      	strb	r3, [r7, #17]
        break;
 8018098:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801809a:	7dfb      	ldrb	r3, [r7, #23]
 801809c:	b29a      	uxth	r2, r3
 801809e:	f107 030c 	add.w	r3, r7, #12
 80180a2:	4619      	mov	r1, r3
 80180a4:	208c      	movs	r0, #140	; 0x8c
 80180a6:	f000 f965 	bl	8018374 <SUBGRF_WriteCommand>
 80180aa:	e000      	b.n	80180ae <SUBGRF_SetPacketParams+0x12a>
        return;
 80180ac:	bf00      	nop
}
 80180ae:	3718      	adds	r7, #24
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	0801a800 	.word	0x0801a800
 80180b8:	20000edd 	.word	0x20000edd
 80180bc:	20000ede 	.word	0x20000ede

080180c0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b084      	sub	sp, #16
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	4603      	mov	r3, r0
 80180c8:	460a      	mov	r2, r1
 80180ca:	71fb      	strb	r3, [r7, #7]
 80180cc:	4613      	mov	r3, r2
 80180ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80180d0:	79fb      	ldrb	r3, [r7, #7]
 80180d2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80180d4:	79bb      	ldrb	r3, [r7, #6]
 80180d6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80180d8:	f107 030c 	add.w	r3, r7, #12
 80180dc:	2202      	movs	r2, #2
 80180de:	4619      	mov	r1, r3
 80180e0:	208f      	movs	r0, #143	; 0x8f
 80180e2:	f000 f947 	bl	8018374 <SUBGRF_WriteCommand>
}
 80180e6:	bf00      	nop
 80180e8:	3710      	adds	r7, #16
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}

080180ee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80180ee:	b580      	push	{r7, lr}
 80180f0:	b082      	sub	sp, #8
 80180f2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80180f4:	2300      	movs	r3, #0
 80180f6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80180f8:	1d3b      	adds	r3, r7, #4
 80180fa:	2201      	movs	r2, #1
 80180fc:	4619      	mov	r1, r3
 80180fe:	2015      	movs	r0, #21
 8018100:	f000 f95a 	bl	80183b8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018104:	793b      	ldrb	r3, [r7, #4]
 8018106:	425b      	negs	r3, r3
 8018108:	105b      	asrs	r3, r3, #1
 801810a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801810c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018110:	4618      	mov	r0, r3
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b084      	sub	sp, #16
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
 8018120:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018122:	f107 030c 	add.w	r3, r7, #12
 8018126:	2202      	movs	r2, #2
 8018128:	4619      	mov	r1, r3
 801812a:	2013      	movs	r0, #19
 801812c:	f000 f944 	bl	80183b8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018130:	f7ff fdec 	bl	8017d0c <SUBGRF_GetPacketType>
 8018134:	4603      	mov	r3, r0
 8018136:	2b01      	cmp	r3, #1
 8018138:	d10d      	bne.n	8018156 <SUBGRF_GetRxBufferStatus+0x3e>
 801813a:	4b0c      	ldr	r3, [pc, #48]	; (801816c <SUBGRF_GetRxBufferStatus+0x54>)
 801813c:	781b      	ldrb	r3, [r3, #0]
 801813e:	b2db      	uxtb	r3, r3
 8018140:	2b01      	cmp	r3, #1
 8018142:	d108      	bne.n	8018156 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018144:	f240 7002 	movw	r0, #1794	; 0x702
 8018148:	f000 f878 	bl	801823c <SUBGRF_ReadRegister>
 801814c:	4603      	mov	r3, r0
 801814e:	461a      	mov	r2, r3
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	701a      	strb	r2, [r3, #0]
 8018154:	e002      	b.n	801815c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018156:	7b3a      	ldrb	r2, [r7, #12]
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801815c:	7b7a      	ldrb	r2, [r7, #13]
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	701a      	strb	r2, [r3, #0]
}
 8018162:	bf00      	nop
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	20000ede 	.word	0x20000ede

08018170 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018178:	f107 030c 	add.w	r3, r7, #12
 801817c:	2203      	movs	r2, #3
 801817e:	4619      	mov	r1, r3
 8018180:	2014      	movs	r0, #20
 8018182:	f000 f919 	bl	80183b8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018186:	f7ff fdc1 	bl	8017d0c <SUBGRF_GetPacketType>
 801818a:	4603      	mov	r3, r0
 801818c:	461a      	mov	r2, r3
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	781b      	ldrb	r3, [r3, #0]
 8018196:	2b00      	cmp	r3, #0
 8018198:	d002      	beq.n	80181a0 <SUBGRF_GetPacketStatus+0x30>
 801819a:	2b01      	cmp	r3, #1
 801819c:	d013      	beq.n	80181c6 <SUBGRF_GetPacketStatus+0x56>
 801819e:	e02a      	b.n	80181f6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80181a0:	7b3a      	ldrb	r2, [r7, #12]
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80181a6:	7b7b      	ldrb	r3, [r7, #13]
 80181a8:	425b      	negs	r3, r3
 80181aa:	105b      	asrs	r3, r3, #1
 80181ac:	b25a      	sxtb	r2, r3
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80181b2:	7bbb      	ldrb	r3, [r7, #14]
 80181b4:	425b      	negs	r3, r3
 80181b6:	105b      	asrs	r3, r3, #1
 80181b8:	b25a      	sxtb	r2, r3
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2200      	movs	r2, #0
 80181c2:	609a      	str	r2, [r3, #8]
            break;
 80181c4:	e020      	b.n	8018208 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80181c6:	7b3b      	ldrb	r3, [r7, #12]
 80181c8:	425b      	negs	r3, r3
 80181ca:	105b      	asrs	r3, r3, #1
 80181cc:	b25a      	sxtb	r2, r3
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80181d2:	7b7b      	ldrb	r3, [r7, #13]
 80181d4:	b25b      	sxtb	r3, r3
 80181d6:	3302      	adds	r3, #2
 80181d8:	109b      	asrs	r3, r3, #2
 80181da:	b25a      	sxtb	r2, r3
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80181e0:	7bbb      	ldrb	r3, [r7, #14]
 80181e2:	425b      	negs	r3, r3
 80181e4:	105b      	asrs	r3, r3, #1
 80181e6:	b25a      	sxtb	r2, r3
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80181ec:	4b08      	ldr	r3, [pc, #32]	; (8018210 <SUBGRF_GetPacketStatus+0xa0>)
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	611a      	str	r2, [r3, #16]
            break;
 80181f4:	e008      	b.n	8018208 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80181f6:	2214      	movs	r2, #20
 80181f8:	2100      	movs	r1, #0
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	f000 fbf5 	bl	80189ea <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	220f      	movs	r2, #15
 8018204:	701a      	strb	r2, [r3, #0]
            break;
 8018206:	bf00      	nop
    }
}
 8018208:	bf00      	nop
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	20000ee0 	.word	0x20000ee0

08018214 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	4603      	mov	r3, r0
 801821c:	460a      	mov	r2, r1
 801821e:	80fb      	strh	r3, [r7, #6]
 8018220:	4613      	mov	r3, r2
 8018222:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018224:	1d7a      	adds	r2, r7, #5
 8018226:	88f9      	ldrh	r1, [r7, #6]
 8018228:	2301      	movs	r3, #1
 801822a:	4803      	ldr	r0, [pc, #12]	; (8018238 <SUBGRF_WriteRegister+0x24>)
 801822c:	f7ee fb82 	bl	8006934 <HAL_SUBGHZ_WriteRegisters>
}
 8018230:	bf00      	nop
 8018232:	3708      	adds	r7, #8
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	2000164c 	.word	0x2000164c

0801823c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b084      	sub	sp, #16
 8018240:	af00      	add	r7, sp, #0
 8018242:	4603      	mov	r3, r0
 8018244:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8018246:	f107 020f 	add.w	r2, r7, #15
 801824a:	88f9      	ldrh	r1, [r7, #6]
 801824c:	2301      	movs	r3, #1
 801824e:	4804      	ldr	r0, [pc, #16]	; (8018260 <SUBGRF_ReadRegister+0x24>)
 8018250:	f7ee fbcf 	bl	80069f2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018254:	7bfb      	ldrb	r3, [r7, #15]
}
 8018256:	4618      	mov	r0, r3
 8018258:	3710      	adds	r7, #16
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
 801825e:	bf00      	nop
 8018260:	2000164c 	.word	0x2000164c

08018264 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b086      	sub	sp, #24
 8018268:	af00      	add	r7, sp, #0
 801826a:	4603      	mov	r3, r0
 801826c:	6039      	str	r1, [r7, #0]
 801826e:	80fb      	strh	r3, [r7, #6]
 8018270:	4613      	mov	r3, r2
 8018272:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018274:	f3ef 8310 	mrs	r3, PRIMASK
 8018278:	60fb      	str	r3, [r7, #12]
  return(result);
 801827a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801827c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801827e:	b672      	cpsid	i
}
 8018280:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8018282:	88bb      	ldrh	r3, [r7, #4]
 8018284:	88f9      	ldrh	r1, [r7, #6]
 8018286:	683a      	ldr	r2, [r7, #0]
 8018288:	4806      	ldr	r0, [pc, #24]	; (80182a4 <SUBGRF_WriteRegisters+0x40>)
 801828a:	f7ee fb53 	bl	8006934 <HAL_SUBGHZ_WriteRegisters>
 801828e:	697b      	ldr	r3, [r7, #20]
 8018290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018292:	693b      	ldr	r3, [r7, #16]
 8018294:	f383 8810 	msr	PRIMASK, r3
}
 8018298:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801829a:	bf00      	nop
 801829c:	3718      	adds	r7, #24
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	2000164c 	.word	0x2000164c

080182a8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b086      	sub	sp, #24
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	4603      	mov	r3, r0
 80182b0:	6039      	str	r1, [r7, #0]
 80182b2:	80fb      	strh	r3, [r7, #6]
 80182b4:	4613      	mov	r3, r2
 80182b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182b8:	f3ef 8310 	mrs	r3, PRIMASK
 80182bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80182be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80182c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80182c2:	b672      	cpsid	i
}
 80182c4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80182c6:	88bb      	ldrh	r3, [r7, #4]
 80182c8:	88f9      	ldrh	r1, [r7, #6]
 80182ca:	683a      	ldr	r2, [r7, #0]
 80182cc:	4806      	ldr	r0, [pc, #24]	; (80182e8 <SUBGRF_ReadRegisters+0x40>)
 80182ce:	f7ee fb90 	bl	80069f2 <HAL_SUBGHZ_ReadRegisters>
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182d6:	693b      	ldr	r3, [r7, #16]
 80182d8:	f383 8810 	msr	PRIMASK, r3
}
 80182dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80182de:	bf00      	nop
 80182e0:	3718      	adds	r7, #24
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bd80      	pop	{r7, pc}
 80182e6:	bf00      	nop
 80182e8:	2000164c 	.word	0x2000164c

080182ec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b086      	sub	sp, #24
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	4603      	mov	r3, r0
 80182f4:	6039      	str	r1, [r7, #0]
 80182f6:	71fb      	strb	r3, [r7, #7]
 80182f8:	4613      	mov	r3, r2
 80182fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182fc:	f3ef 8310 	mrs	r3, PRIMASK
 8018300:	60fb      	str	r3, [r7, #12]
  return(result);
 8018302:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018304:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018306:	b672      	cpsid	i
}
 8018308:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801830a:	79bb      	ldrb	r3, [r7, #6]
 801830c:	b29b      	uxth	r3, r3
 801830e:	79f9      	ldrb	r1, [r7, #7]
 8018310:	683a      	ldr	r2, [r7, #0]
 8018312:	4806      	ldr	r0, [pc, #24]	; (801832c <SUBGRF_WriteBuffer+0x40>)
 8018314:	f7ee fc81 	bl	8006c1a <HAL_SUBGHZ_WriteBuffer>
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	f383 8810 	msr	PRIMASK, r3
}
 8018322:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018324:	bf00      	nop
 8018326:	3718      	adds	r7, #24
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}
 801832c:	2000164c 	.word	0x2000164c

08018330 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b086      	sub	sp, #24
 8018334:	af00      	add	r7, sp, #0
 8018336:	4603      	mov	r3, r0
 8018338:	6039      	str	r1, [r7, #0]
 801833a:	71fb      	strb	r3, [r7, #7]
 801833c:	4613      	mov	r3, r2
 801833e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018340:	f3ef 8310 	mrs	r3, PRIMASK
 8018344:	60fb      	str	r3, [r7, #12]
  return(result);
 8018346:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018348:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801834a:	b672      	cpsid	i
}
 801834c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801834e:	79bb      	ldrb	r3, [r7, #6]
 8018350:	b29b      	uxth	r3, r3
 8018352:	79f9      	ldrb	r1, [r7, #7]
 8018354:	683a      	ldr	r2, [r7, #0]
 8018356:	4806      	ldr	r0, [pc, #24]	; (8018370 <SUBGRF_ReadBuffer+0x40>)
 8018358:	f7ee fcb2 	bl	8006cc0 <HAL_SUBGHZ_ReadBuffer>
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018360:	693b      	ldr	r3, [r7, #16]
 8018362:	f383 8810 	msr	PRIMASK, r3
}
 8018366:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018368:	bf00      	nop
 801836a:	3718      	adds	r7, #24
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}
 8018370:	2000164c 	.word	0x2000164c

08018374 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b086      	sub	sp, #24
 8018378:	af00      	add	r7, sp, #0
 801837a:	4603      	mov	r3, r0
 801837c:	6039      	str	r1, [r7, #0]
 801837e:	71fb      	strb	r3, [r7, #7]
 8018380:	4613      	mov	r3, r2
 8018382:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018384:	f3ef 8310 	mrs	r3, PRIMASK
 8018388:	60fb      	str	r3, [r7, #12]
  return(result);
 801838a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801838c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801838e:	b672      	cpsid	i
}
 8018390:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8018392:	88bb      	ldrh	r3, [r7, #4]
 8018394:	79f9      	ldrb	r1, [r7, #7]
 8018396:	683a      	ldr	r2, [r7, #0]
 8018398:	4806      	ldr	r0, [pc, #24]	; (80183b4 <SUBGRF_WriteCommand+0x40>)
 801839a:	f7ee fb8b 	bl	8006ab4 <HAL_SUBGHZ_ExecSetCmd>
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183a2:	693b      	ldr	r3, [r7, #16]
 80183a4:	f383 8810 	msr	PRIMASK, r3
}
 80183a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80183aa:	bf00      	nop
 80183ac:	3718      	adds	r7, #24
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}
 80183b2:	bf00      	nop
 80183b4:	2000164c 	.word	0x2000164c

080183b8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b086      	sub	sp, #24
 80183bc:	af00      	add	r7, sp, #0
 80183be:	4603      	mov	r3, r0
 80183c0:	6039      	str	r1, [r7, #0]
 80183c2:	71fb      	strb	r3, [r7, #7]
 80183c4:	4613      	mov	r3, r2
 80183c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183c8:	f3ef 8310 	mrs	r3, PRIMASK
 80183cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80183ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80183d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80183d2:	b672      	cpsid	i
}
 80183d4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80183d6:	88bb      	ldrh	r3, [r7, #4]
 80183d8:	79f9      	ldrb	r1, [r7, #7]
 80183da:	683a      	ldr	r2, [r7, #0]
 80183dc:	4806      	ldr	r0, [pc, #24]	; (80183f8 <SUBGRF_ReadCommand+0x40>)
 80183de:	f7ee fbc8 	bl	8006b72 <HAL_SUBGHZ_ExecGetCmd>
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183e6:	693b      	ldr	r3, [r7, #16]
 80183e8:	f383 8810 	msr	PRIMASK, r3
}
 80183ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80183ee:	bf00      	nop
 80183f0:	3718      	adds	r7, #24
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
 80183f6:	bf00      	nop
 80183f8:	2000164c 	.word	0x2000164c

080183fc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b084      	sub	sp, #16
 8018400:	af00      	add	r7, sp, #0
 8018402:	4603      	mov	r3, r0
 8018404:	460a      	mov	r2, r1
 8018406:	71fb      	strb	r3, [r7, #7]
 8018408:	4613      	mov	r3, r2
 801840a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801840c:	2301      	movs	r3, #1
 801840e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8018410:	79bb      	ldrb	r3, [r7, #6]
 8018412:	2b01      	cmp	r3, #1
 8018414:	d10d      	bne.n	8018432 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8018416:	79fb      	ldrb	r3, [r7, #7]
 8018418:	2b01      	cmp	r3, #1
 801841a:	d104      	bne.n	8018426 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801841c:	2302      	movs	r3, #2
 801841e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8018420:	2004      	movs	r0, #4
 8018422:	f000 f8df 	bl	80185e4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8018426:	79fb      	ldrb	r3, [r7, #7]
 8018428:	2b02      	cmp	r3, #2
 801842a:	d107      	bne.n	801843c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801842c:	2303      	movs	r3, #3
 801842e:	73fb      	strb	r3, [r7, #15]
 8018430:	e004      	b.n	801843c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8018432:	79bb      	ldrb	r3, [r7, #6]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d101      	bne.n	801843c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8018438:	2301      	movs	r3, #1
 801843a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801843c:	7bfb      	ldrb	r3, [r7, #15]
 801843e:	4618      	mov	r0, r3
 8018440:	f7f1 fb61 	bl	8009b06 <RBI_ConfigRFSwitch>
}
 8018444:	bf00      	nop
 8018446:	3710      	adds	r7, #16
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}

0801844c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b084      	sub	sp, #16
 8018450:	af00      	add	r7, sp, #0
 8018452:	4603      	mov	r3, r0
 8018454:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8018456:	2301      	movs	r3, #1
 8018458:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801845a:	f7f1 fb62 	bl	8009b22 <RBI_GetTxConfig>
 801845e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	2b02      	cmp	r3, #2
 8018464:	d016      	beq.n	8018494 <SUBGRF_SetRfTxPower+0x48>
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	2b02      	cmp	r3, #2
 801846a:	dc16      	bgt.n	801849a <SUBGRF_SetRfTxPower+0x4e>
 801846c:	68bb      	ldr	r3, [r7, #8]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d003      	beq.n	801847a <SUBGRF_SetRfTxPower+0x2e>
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	2b01      	cmp	r3, #1
 8018476:	d00a      	beq.n	801848e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8018478:	e00f      	b.n	801849a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801847a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801847e:	2b0f      	cmp	r3, #15
 8018480:	dd02      	ble.n	8018488 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8018482:	2302      	movs	r3, #2
 8018484:	73fb      	strb	r3, [r7, #15]
            break;
 8018486:	e009      	b.n	801849c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8018488:	2301      	movs	r3, #1
 801848a:	73fb      	strb	r3, [r7, #15]
            break;
 801848c:	e006      	b.n	801849c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801848e:	2301      	movs	r3, #1
 8018490:	73fb      	strb	r3, [r7, #15]
            break;
 8018492:	e003      	b.n	801849c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8018494:	2302      	movs	r3, #2
 8018496:	73fb      	strb	r3, [r7, #15]
            break;
 8018498:	e000      	b.n	801849c <SUBGRF_SetRfTxPower+0x50>
            break;
 801849a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801849c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80184a0:	7bfb      	ldrb	r3, [r7, #15]
 80184a2:	2202      	movs	r2, #2
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7ff fc3b 	bl	8017d20 <SUBGRF_SetTxParams>

    return paSelect;
 80184aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80184ac:	4618      	mov	r0, r3
 80184ae:	3710      	adds	r7, #16
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}

080184b4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80184b4:	b480      	push	{r7}
 80184b6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80184b8:	2301      	movs	r3, #1
}
 80184ba:	4618      	mov	r0, r3
 80184bc:	46bd      	mov	sp, r7
 80184be:	bc80      	pop	{r7}
 80184c0:	4770      	bx	lr
	...

080184c4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b082      	sub	sp, #8
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80184cc:	4b03      	ldr	r3, [pc, #12]	; (80184dc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	2001      	movs	r0, #1
 80184d2:	4798      	blx	r3
}
 80184d4:	bf00      	nop
 80184d6:	3708      	adds	r7, #8
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	20000ee8 	.word	0x20000ee8

080184e0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b082      	sub	sp, #8
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80184e8:	4b03      	ldr	r3, [pc, #12]	; (80184f8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2002      	movs	r0, #2
 80184ee:	4798      	blx	r3
}
 80184f0:	bf00      	nop
 80184f2:	3708      	adds	r7, #8
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}
 80184f8:	20000ee8 	.word	0x20000ee8

080184fc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b082      	sub	sp, #8
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8018504:	4b03      	ldr	r3, [pc, #12]	; (8018514 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	2040      	movs	r0, #64	; 0x40
 801850a:	4798      	blx	r3
}
 801850c:	bf00      	nop
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	20000ee8 	.word	0x20000ee8

08018518 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	460b      	mov	r3, r1
 8018522:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8018524:	78fb      	ldrb	r3, [r7, #3]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d002      	beq.n	8018530 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801852a:	2b01      	cmp	r3, #1
 801852c:	d005      	beq.n	801853a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801852e:	e00a      	b.n	8018546 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8018530:	4b07      	ldr	r3, [pc, #28]	; (8018550 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2080      	movs	r0, #128	; 0x80
 8018536:	4798      	blx	r3
            break;
 8018538:	e005      	b.n	8018546 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801853a:	4b05      	ldr	r3, [pc, #20]	; (8018550 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018542:	4798      	blx	r3
            break;
 8018544:	bf00      	nop
    }
}
 8018546:	bf00      	nop
 8018548:	3708      	adds	r7, #8
 801854a:	46bd      	mov	sp, r7
 801854c:	bd80      	pop	{r7, pc}
 801854e:	bf00      	nop
 8018550:	20000ee8 	.word	0x20000ee8

08018554 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801855c:	4b04      	ldr	r3, [pc, #16]	; (8018570 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018564:	4798      	blx	r3
}
 8018566:	bf00      	nop
 8018568:	3708      	adds	r7, #8
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}
 801856e:	bf00      	nop
 8018570:	20000ee8 	.word	0x20000ee8

08018574 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b082      	sub	sp, #8
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801857c:	4b03      	ldr	r3, [pc, #12]	; (801858c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	2020      	movs	r0, #32
 8018582:	4798      	blx	r3
}
 8018584:	bf00      	nop
 8018586:	3708      	adds	r7, #8
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}
 801858c:	20000ee8 	.word	0x20000ee8

08018590 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8018598:	4b03      	ldr	r3, [pc, #12]	; (80185a8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	2004      	movs	r0, #4
 801859e:	4798      	blx	r3
}
 80185a0:	bf00      	nop
 80185a2:	3708      	adds	r7, #8
 80185a4:	46bd      	mov	sp, r7
 80185a6:	bd80      	pop	{r7, pc}
 80185a8:	20000ee8 	.word	0x20000ee8

080185ac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b082      	sub	sp, #8
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80185b4:	4b03      	ldr	r3, [pc, #12]	; (80185c4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	2008      	movs	r0, #8
 80185ba:	4798      	blx	r3
}
 80185bc:	bf00      	nop
 80185be:	3708      	adds	r7, #8
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	20000ee8 	.word	0x20000ee8

080185c8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80185d0:	4b03      	ldr	r3, [pc, #12]	; (80185e0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2010      	movs	r0, #16
 80185d6:	4798      	blx	r3
}
 80185d8:	bf00      	nop
 80185da:	3708      	adds	r7, #8
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}
 80185e0:	20000ee8 	.word	0x20000ee8

080185e4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b084      	sub	sp, #16
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	4603      	mov	r3, r0
 80185ec:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80185ee:	f7f1 faa6 	bl	8009b3e <RBI_IsDCDC>
 80185f2:	4603      	mov	r3, r0
 80185f4:	2b01      	cmp	r3, #1
 80185f6:	d112      	bne.n	801861e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80185f8:	f640 1023 	movw	r0, #2339	; 0x923
 80185fc:	f7ff fe1e 	bl	801823c <SUBGRF_ReadRegister>
 8018600:	4603      	mov	r3, r0
 8018602:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8018604:	7bfb      	ldrb	r3, [r7, #15]
 8018606:	f023 0306 	bic.w	r3, r3, #6
 801860a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801860c:	7bfa      	ldrb	r2, [r7, #15]
 801860e:	79fb      	ldrb	r3, [r7, #7]
 8018610:	4313      	orrs	r3, r2
 8018612:	b2db      	uxtb	r3, r3
 8018614:	4619      	mov	r1, r3
 8018616:	f640 1023 	movw	r0, #2339	; 0x923
 801861a:	f7ff fdfb 	bl	8018214 <SUBGRF_WriteRegister>
  }
}
 801861e:	bf00      	nop
 8018620:	3710      	adds	r7, #16
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}
	...

08018628 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8018628:	b480      	push	{r7}
 801862a:	b085      	sub	sp, #20
 801862c:	af00      	add	r7, sp, #0
 801862e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d101      	bne.n	801863a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8018636:	231f      	movs	r3, #31
 8018638:	e016      	b.n	8018668 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801863a:	2300      	movs	r3, #0
 801863c:	73fb      	strb	r3, [r7, #15]
 801863e:	e00f      	b.n	8018660 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8018640:	7bfb      	ldrb	r3, [r7, #15]
 8018642:	4a0c      	ldr	r2, [pc, #48]	; (8018674 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018648:	687a      	ldr	r2, [r7, #4]
 801864a:	429a      	cmp	r2, r3
 801864c:	d205      	bcs.n	801865a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801864e:	7bfb      	ldrb	r3, [r7, #15]
 8018650:	4a08      	ldr	r2, [pc, #32]	; (8018674 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8018652:	00db      	lsls	r3, r3, #3
 8018654:	4413      	add	r3, r2
 8018656:	791b      	ldrb	r3, [r3, #4]
 8018658:	e006      	b.n	8018668 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801865a:	7bfb      	ldrb	r3, [r7, #15]
 801865c:	3301      	adds	r3, #1
 801865e:	73fb      	strb	r3, [r7, #15]
 8018660:	7bfb      	ldrb	r3, [r7, #15]
 8018662:	2b15      	cmp	r3, #21
 8018664:	d9ec      	bls.n	8018640 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8018666:	e7fe      	b.n	8018666 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8018668:	4618      	mov	r0, r3
 801866a:	3714      	adds	r7, #20
 801866c:	46bd      	mov	sp, r7
 801866e:	bc80      	pop	{r7}
 8018670:	4770      	bx	lr
 8018672:	bf00      	nop
 8018674:	0801ad84 	.word	0x0801ad84

08018678 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b08a      	sub	sp, #40	; 0x28
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
 8018680:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8018682:	4b36      	ldr	r3, [pc, #216]	; (801875c <SUBGRF_GetCFO+0xe4>)
 8018684:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8018686:	f640 0007 	movw	r0, #2055	; 0x807
 801868a:	f7ff fdd7 	bl	801823c <SUBGRF_ReadRegister>
 801868e:	4603      	mov	r3, r0
 8018690:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8018692:	7ffb      	ldrb	r3, [r7, #31]
 8018694:	08db      	lsrs	r3, r3, #3
 8018696:	b2db      	uxtb	r3, r3
 8018698:	f003 0303 	and.w	r3, r3, #3
 801869c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80186a0:	4413      	add	r3, r2
 80186a2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80186a6:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80186a8:	7ffb      	ldrb	r3, [r7, #31]
 80186aa:	f003 0307 	and.w	r3, r3, #7
 80186ae:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80186b0:	7fba      	ldrb	r2, [r7, #30]
 80186b2:	7f7b      	ldrb	r3, [r7, #29]
 80186b4:	3b01      	subs	r3, #1
 80186b6:	fa02 f303 	lsl.w	r3, r2, r3
 80186ba:	461a      	mov	r2, r3
 80186bc:	4b28      	ldr	r3, [pc, #160]	; (8018760 <SUBGRF_GetCFO+0xe8>)
 80186be:	fbb3 f3f2 	udiv	r3, r3, r2
 80186c2:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80186c4:	69ba      	ldr	r2, [r7, #24]
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80186cc:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80186ce:	2301      	movs	r3, #1
 80186d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80186d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186d8:	697a      	ldr	r2, [r7, #20]
 80186da:	fb02 f303 	mul.w	r3, r2, r3
 80186de:	2b07      	cmp	r3, #7
 80186e0:	d802      	bhi.n	80186e8 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80186e2:	2302      	movs	r3, #2
 80186e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80186e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186ec:	697a      	ldr	r2, [r7, #20]
 80186ee:	fb02 f303 	mul.w	r3, r2, r3
 80186f2:	2b03      	cmp	r3, #3
 80186f4:	d802      	bhi.n	80186fc <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 80186f6:	2304      	movs	r3, #4
 80186f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80186fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018700:	69bb      	ldr	r3, [r7, #24]
 8018702:	fb02 f303 	mul.w	r3, r2, r3
 8018706:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8018708:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801870c:	f7ff fd96 	bl	801823c <SUBGRF_ReadRegister>
 8018710:	4603      	mov	r3, r0
 8018712:	021b      	lsls	r3, r3, #8
 8018714:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8018718:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801871a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801871e:	f7ff fd8d 	bl	801823c <SUBGRF_ReadRegister>
 8018722:	4603      	mov	r3, r0
 8018724:	461a      	mov	r2, r3
 8018726:	6a3b      	ldr	r3, [r7, #32]
 8018728:	4313      	orrs	r3, r2
 801872a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801872c:	6a3b      	ldr	r3, [r7, #32]
 801872e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018732:	2b00      	cmp	r3, #0
 8018734:	d005      	beq.n	8018742 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8018736:	6a3b      	ldr	r3, [r7, #32]
 8018738:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801873c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8018740:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	095b      	lsrs	r3, r3, #5
 8018746:	6a3a      	ldr	r2, [r7, #32]
 8018748:	fb02 f303 	mul.w	r3, r2, r3
 801874c:	11da      	asrs	r2, r3, #7
 801874e:	683b      	ldr	r3, [r7, #0]
 8018750:	601a      	str	r2, [r3, #0]
}
 8018752:	bf00      	nop
 8018754:	3728      	adds	r7, #40	; 0x28
 8018756:	46bd      	mov	sp, r7
 8018758:	bd80      	pop	{r7, pc}
 801875a:	bf00      	nop
 801875c:	0c0a0804 	.word	0x0c0a0804
 8018760:	01e84800 	.word	0x01e84800

08018764 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8018764:	b480      	push	{r7}
 8018766:	b087      	sub	sp, #28
 8018768:	af00      	add	r7, sp, #0
 801876a:	4603      	mov	r3, r0
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
 8018770:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8018772:	2300      	movs	r3, #0
 8018774:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8018776:	f04f 33ff 	mov.w	r3, #4294967295
 801877a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801877c:	697b      	ldr	r3, [r7, #20]
}
 801877e:	4618      	mov	r0, r3
 8018780:	371c      	adds	r7, #28
 8018782:	46bd      	mov	sp, r7
 8018784:	bc80      	pop	{r7}
 8018786:	4770      	bx	lr

08018788 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8018788:	b480      	push	{r7}
 801878a:	b087      	sub	sp, #28
 801878c:	af00      	add	r7, sp, #0
 801878e:	4603      	mov	r3, r0
 8018790:	60b9      	str	r1, [r7, #8]
 8018792:	607a      	str	r2, [r7, #4]
 8018794:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8018796:	2300      	movs	r3, #0
 8018798:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801879a:	f04f 33ff 	mov.w	r3, #4294967295
 801879e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80187a0:	697b      	ldr	r3, [r7, #20]
}
 80187a2:	4618      	mov	r0, r3
 80187a4:	371c      	adds	r7, #28
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bc80      	pop	{r7}
 80187aa:	4770      	bx	lr

080187ac <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80187ac:	b480      	push	{r7}
 80187ae:	b085      	sub	sp, #20
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	60f8      	str	r0, [r7, #12]
 80187b4:	60b9      	str	r1, [r7, #8]
 80187b6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80187b8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80187bc:	4618      	mov	r0, r3
 80187be:	3714      	adds	r7, #20
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bc80      	pop	{r7}
 80187c4:	4770      	bx	lr

080187c6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 80187c6:	b480      	push	{r7}
 80187c8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80187ca:	bf00      	nop
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bc80      	pop	{r7}
 80187d0:	4770      	bx	lr

080187d2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80187d2:	b480      	push	{r7}
 80187d4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80187d6:	2300      	movs	r3, #0
#endif
}
 80187d8:	4618      	mov	r0, r3
 80187da:	46bd      	mov	sp, r7
 80187dc:	bc80      	pop	{r7}
 80187de:	4770      	bx	lr

080187e0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80187e0:	b480      	push	{r7}
 80187e2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80187e4:	2300      	movs	r3, #0
#endif
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bc80      	pop	{r7}
 80187ec:	4770      	bx	lr

080187ee <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80187ee:	b480      	push	{r7}
 80187f0:	b083      	sub	sp, #12
 80187f2:	af00      	add	r7, sp, #0
 80187f4:	4603      	mov	r3, r0
 80187f6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80187f8:	bf00      	nop
 80187fa:	370c      	adds	r7, #12
 80187fc:	46bd      	mov	sp, r7
 80187fe:	bc80      	pop	{r7}
 8018800:	4770      	bx	lr

08018802 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8018802:	b480      	push	{r7}
 8018804:	b087      	sub	sp, #28
 8018806:	af00      	add	r7, sp, #0
 8018808:	60f8      	str	r0, [r7, #12]
 801880a:	460b      	mov	r3, r1
 801880c:	607a      	str	r2, [r7, #4]
 801880e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8018810:	f04f 33ff 	mov.w	r3, #4294967295
 8018814:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8018816:	697b      	ldr	r3, [r7, #20]
}
 8018818:	4618      	mov	r0, r3
 801881a:	371c      	adds	r7, #28
 801881c:	46bd      	mov	sp, r7
 801881e:	bc80      	pop	{r7}
 8018820:	4770      	bx	lr

08018822 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8018822:	b480      	push	{r7}
 8018824:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8018826:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801882a:	4618      	mov	r0, r3
 801882c:	46bd      	mov	sp, r7
 801882e:	bc80      	pop	{r7}
 8018830:	4770      	bx	lr

08018832 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8018832:	b480      	push	{r7}
 8018834:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8018836:	bf00      	nop
 8018838:	46bd      	mov	sp, r7
 801883a:	bc80      	pop	{r7}
 801883c:	4770      	bx	lr

0801883e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801883e:	b480      	push	{r7}
 8018840:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8018842:	bf00      	nop
 8018844:	46bd      	mov	sp, r7
 8018846:	bc80      	pop	{r7}
 8018848:	4770      	bx	lr

0801884a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801884a:	b480      	push	{r7}
 801884c:	b083      	sub	sp, #12
 801884e:	af00      	add	r7, sp, #0
 8018850:	4603      	mov	r3, r0
 8018852:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8018854:	bf00      	nop
 8018856:	370c      	adds	r7, #12
 8018858:	46bd      	mov	sp, r7
 801885a:	bc80      	pop	{r7}
 801885c:	4770      	bx	lr
	...

08018860 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018860:	b480      	push	{r7}
 8018862:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018864:	4b04      	ldr	r3, [pc, #16]	; (8018878 <UTIL_LPM_Init+0x18>)
 8018866:	2200      	movs	r2, #0
 8018868:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801886a:	4b04      	ldr	r3, [pc, #16]	; (801887c <UTIL_LPM_Init+0x1c>)
 801886c:	2200      	movs	r2, #0
 801886e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018870:	bf00      	nop
 8018872:	46bd      	mov	sp, r7
 8018874:	bc80      	pop	{r7}
 8018876:	4770      	bx	lr
 8018878:	20000eec 	.word	0x20000eec
 801887c:	20000ef0 	.word	0x20000ef0

08018880 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018880:	b480      	push	{r7}
 8018882:	b087      	sub	sp, #28
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	460b      	mov	r3, r1
 801888a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801888c:	f3ef 8310 	mrs	r3, PRIMASK
 8018890:	613b      	str	r3, [r7, #16]
  return(result);
 8018892:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018896:	b672      	cpsid	i
}
 8018898:	bf00      	nop
  
  switch( state )
 801889a:	78fb      	ldrb	r3, [r7, #3]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d008      	beq.n	80188b2 <UTIL_LPM_SetStopMode+0x32>
 80188a0:	2b01      	cmp	r3, #1
 80188a2:	d10e      	bne.n	80188c2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80188a4:	4b0d      	ldr	r3, [pc, #52]	; (80188dc <UTIL_LPM_SetStopMode+0x5c>)
 80188a6:	681a      	ldr	r2, [r3, #0]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	4313      	orrs	r3, r2
 80188ac:	4a0b      	ldr	r2, [pc, #44]	; (80188dc <UTIL_LPM_SetStopMode+0x5c>)
 80188ae:	6013      	str	r3, [r2, #0]
      break;
 80188b0:	e008      	b.n	80188c4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	43da      	mvns	r2, r3
 80188b6:	4b09      	ldr	r3, [pc, #36]	; (80188dc <UTIL_LPM_SetStopMode+0x5c>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	4013      	ands	r3, r2
 80188bc:	4a07      	ldr	r2, [pc, #28]	; (80188dc <UTIL_LPM_SetStopMode+0x5c>)
 80188be:	6013      	str	r3, [r2, #0]
      break;
 80188c0:	e000      	b.n	80188c4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80188c2:	bf00      	nop
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	f383 8810 	msr	PRIMASK, r3
}
 80188ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80188d0:	bf00      	nop
 80188d2:	371c      	adds	r7, #28
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bc80      	pop	{r7}
 80188d8:	4770      	bx	lr
 80188da:	bf00      	nop
 80188dc:	20000eec 	.word	0x20000eec

080188e0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80188e0:	b480      	push	{r7}
 80188e2:	b087      	sub	sp, #28
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	460b      	mov	r3, r1
 80188ea:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188ec:	f3ef 8310 	mrs	r3, PRIMASK
 80188f0:	613b      	str	r3, [r7, #16]
  return(result);
 80188f2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80188f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80188f6:	b672      	cpsid	i
}
 80188f8:	bf00      	nop
  
  switch(state)
 80188fa:	78fb      	ldrb	r3, [r7, #3]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d008      	beq.n	8018912 <UTIL_LPM_SetOffMode+0x32>
 8018900:	2b01      	cmp	r3, #1
 8018902:	d10e      	bne.n	8018922 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018904:	4b0d      	ldr	r3, [pc, #52]	; (801893c <UTIL_LPM_SetOffMode+0x5c>)
 8018906:	681a      	ldr	r2, [r3, #0]
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	4313      	orrs	r3, r2
 801890c:	4a0b      	ldr	r2, [pc, #44]	; (801893c <UTIL_LPM_SetOffMode+0x5c>)
 801890e:	6013      	str	r3, [r2, #0]
      break;
 8018910:	e008      	b.n	8018924 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	43da      	mvns	r2, r3
 8018916:	4b09      	ldr	r3, [pc, #36]	; (801893c <UTIL_LPM_SetOffMode+0x5c>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	4013      	ands	r3, r2
 801891c:	4a07      	ldr	r2, [pc, #28]	; (801893c <UTIL_LPM_SetOffMode+0x5c>)
 801891e:	6013      	str	r3, [r2, #0]
      break;
 8018920:	e000      	b.n	8018924 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018922:	bf00      	nop
 8018924:	697b      	ldr	r3, [r7, #20]
 8018926:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	f383 8810 	msr	PRIMASK, r3
}
 801892e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018930:	bf00      	nop
 8018932:	371c      	adds	r7, #28
 8018934:	46bd      	mov	sp, r7
 8018936:	bc80      	pop	{r7}
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop
 801893c:	20000ef0 	.word	0x20000ef0

08018940 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018946:	f3ef 8310 	mrs	r3, PRIMASK
 801894a:	60bb      	str	r3, [r7, #8]
  return(result);
 801894c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801894e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8018950:	b672      	cpsid	i
}
 8018952:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8018954:	4b12      	ldr	r3, [pc, #72]	; (80189a0 <UTIL_LPM_EnterLowPower+0x60>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d006      	beq.n	801896a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801895c:	4b11      	ldr	r3, [pc, #68]	; (80189a4 <UTIL_LPM_EnterLowPower+0x64>)
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8018962:	4b10      	ldr	r3, [pc, #64]	; (80189a4 <UTIL_LPM_EnterLowPower+0x64>)
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	4798      	blx	r3
 8018968:	e010      	b.n	801898c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801896a:	4b0f      	ldr	r3, [pc, #60]	; (80189a8 <UTIL_LPM_EnterLowPower+0x68>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d006      	beq.n	8018980 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8018972:	4b0c      	ldr	r3, [pc, #48]	; (80189a4 <UTIL_LPM_EnterLowPower+0x64>)
 8018974:	689b      	ldr	r3, [r3, #8]
 8018976:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8018978:	4b0a      	ldr	r3, [pc, #40]	; (80189a4 <UTIL_LPM_EnterLowPower+0x64>)
 801897a:	68db      	ldr	r3, [r3, #12]
 801897c:	4798      	blx	r3
 801897e:	e005      	b.n	801898c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8018980:	4b08      	ldr	r3, [pc, #32]	; (80189a4 <UTIL_LPM_EnterLowPower+0x64>)
 8018982:	691b      	ldr	r3, [r3, #16]
 8018984:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8018986:	4b07      	ldr	r3, [pc, #28]	; (80189a4 <UTIL_LPM_EnterLowPower+0x64>)
 8018988:	695b      	ldr	r3, [r3, #20]
 801898a:	4798      	blx	r3
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f383 8810 	msr	PRIMASK, r3
}
 8018996:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8018998:	bf00      	nop
 801899a:	3710      	adds	r7, #16
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}
 80189a0:	20000eec 	.word	0x20000eec
 80189a4:	0801a864 	.word	0x0801a864
 80189a8:	20000ef0 	.word	0x20000ef0

080189ac <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80189ac:	b480      	push	{r7}
 80189ae:	b087      	sub	sp, #28
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	60f8      	str	r0, [r7, #12]
 80189b4:	60b9      	str	r1, [r7, #8]
 80189b6:	4613      	mov	r3, r2
 80189b8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80189be:	68bb      	ldr	r3, [r7, #8]
 80189c0:	613b      	str	r3, [r7, #16]

  while( size-- )
 80189c2:	e007      	b.n	80189d4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80189c4:	693a      	ldr	r2, [r7, #16]
 80189c6:	1c53      	adds	r3, r2, #1
 80189c8:	613b      	str	r3, [r7, #16]
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	1c59      	adds	r1, r3, #1
 80189ce:	6179      	str	r1, [r7, #20]
 80189d0:	7812      	ldrb	r2, [r2, #0]
 80189d2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80189d4:	88fb      	ldrh	r3, [r7, #6]
 80189d6:	1e5a      	subs	r2, r3, #1
 80189d8:	80fa      	strh	r2, [r7, #6]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d1f2      	bne.n	80189c4 <UTIL_MEM_cpy_8+0x18>
    }
}
 80189de:	bf00      	nop
 80189e0:	bf00      	nop
 80189e2:	371c      	adds	r7, #28
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bc80      	pop	{r7}
 80189e8:	4770      	bx	lr

080189ea <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80189ea:	b480      	push	{r7}
 80189ec:	b085      	sub	sp, #20
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
 80189f2:	460b      	mov	r3, r1
 80189f4:	70fb      	strb	r3, [r7, #3]
 80189f6:	4613      	mov	r3, r2
 80189f8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80189fe:	e004      	b.n	8018a0a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	1c5a      	adds	r2, r3, #1
 8018a04:	60fa      	str	r2, [r7, #12]
 8018a06:	78fa      	ldrb	r2, [r7, #3]
 8018a08:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8018a0a:	883b      	ldrh	r3, [r7, #0]
 8018a0c:	1e5a      	subs	r2, r3, #1
 8018a0e:	803a      	strh	r2, [r7, #0]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d1f5      	bne.n	8018a00 <UTIL_MEM_set_8+0x16>
  }
}
 8018a14:	bf00      	nop
 8018a16:	bf00      	nop
 8018a18:	3714      	adds	r7, #20
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bc80      	pop	{r7}
 8018a1e:	4770      	bx	lr

08018a20 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8018a20:	b082      	sub	sp, #8
 8018a22:	b480      	push	{r7}
 8018a24:	b087      	sub	sp, #28
 8018a26:	af00      	add	r7, sp, #0
 8018a28:	60f8      	str	r0, [r7, #12]
 8018a2a:	1d38      	adds	r0, r7, #4
 8018a2c:	e880 0006 	stmia.w	r0, {r1, r2}
 8018a30:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8018a32:	2300      	movs	r3, #0
 8018a34:	613b      	str	r3, [r7, #16]
 8018a36:	2300      	movs	r3, #0
 8018a38:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8018a3a:	687a      	ldr	r2, [r7, #4]
 8018a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a3e:	4413      	add	r3, r2
 8018a40:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8018a42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018a46:	b29a      	uxth	r2, r3
 8018a48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8018a4c:	b29b      	uxth	r3, r3
 8018a4e:	4413      	add	r3, r2
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	b21b      	sxth	r3, r3
 8018a54:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8018a56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018a5e:	db0a      	blt.n	8018a76 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8018a60:	693b      	ldr	r3, [r7, #16]
 8018a62:	3301      	adds	r3, #1
 8018a64:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8018a66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8018a70:	b29b      	uxth	r3, r3
 8018a72:	b21b      	sxth	r3, r3
 8018a74:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	461a      	mov	r2, r3
 8018a7a:	f107 0310 	add.w	r3, r7, #16
 8018a7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a82:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8018a86:	68f8      	ldr	r0, [r7, #12]
 8018a88:	371c      	adds	r7, #28
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bc80      	pop	{r7}
 8018a8e:	b002      	add	sp, #8
 8018a90:	4770      	bx	lr

08018a92 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8018a92:	b082      	sub	sp, #8
 8018a94:	b480      	push	{r7}
 8018a96:	b087      	sub	sp, #28
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	1d38      	adds	r0, r7, #4
 8018a9e:	e880 0006 	stmia.w	r0, {r1, r2}
 8018aa2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	613b      	str	r3, [r7, #16]
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8018aac:	687a      	ldr	r2, [r7, #4]
 8018aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab0:	1ad3      	subs	r3, r2, r3
 8018ab2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8018ab4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8018ab8:	b29a      	uxth	r2, r3
 8018aba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	1ad3      	subs	r3, r2, r3
 8018ac2:	b29b      	uxth	r3, r3
 8018ac4:	b21b      	sxth	r3, r3
 8018ac6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8018ac8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	da0a      	bge.n	8018ae6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8018ad0:	693b      	ldr	r3, [r7, #16]
 8018ad2:	3b01      	subs	r3, #1
 8018ad4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8018ad6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8018ae0:	b29b      	uxth	r3, r3
 8018ae2:	b21b      	sxth	r3, r3
 8018ae4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	461a      	mov	r2, r3
 8018aea:	f107 0310 	add.w	r3, r7, #16
 8018aee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018af2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8018af6:	68f8      	ldr	r0, [r7, #12]
 8018af8:	371c      	adds	r7, #28
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bc80      	pop	{r7}
 8018afe:	b002      	add	sp, #8
 8018b00:	4770      	bx	lr
	...

08018b04 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b088      	sub	sp, #32
 8018b08:	af02      	add	r7, sp, #8
 8018b0a:	463b      	mov	r3, r7
 8018b0c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8018b10:	2300      	movs	r3, #0
 8018b12:	60bb      	str	r3, [r7, #8]
 8018b14:	2300      	movs	r3, #0
 8018b16:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8018b18:	4b10      	ldr	r3, [pc, #64]	; (8018b5c <SysTimeSet+0x58>)
 8018b1a:	691b      	ldr	r3, [r3, #16]
 8018b1c:	f107 0208 	add.w	r2, r7, #8
 8018b20:	3204      	adds	r2, #4
 8018b22:	4610      	mov	r0, r2
 8018b24:	4798      	blx	r3
 8018b26:	4603      	mov	r3, r0
 8018b28:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8018b2a:	f107 0010 	add.w	r0, r7, #16
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	9300      	str	r3, [sp, #0]
 8018b32:	68bb      	ldr	r3, [r7, #8]
 8018b34:	463a      	mov	r2, r7
 8018b36:	ca06      	ldmia	r2, {r1, r2}
 8018b38:	f7ff ffab 	bl	8018a92 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8018b3c:	4b07      	ldr	r3, [pc, #28]	; (8018b5c <SysTimeSet+0x58>)
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	693a      	ldr	r2, [r7, #16]
 8018b42:	4610      	mov	r0, r2
 8018b44:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8018b46:	4b05      	ldr	r3, [pc, #20]	; (8018b5c <SysTimeSet+0x58>)
 8018b48:	689b      	ldr	r3, [r3, #8]
 8018b4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8018b4e:	4610      	mov	r0, r2
 8018b50:	4798      	blx	r3
}
 8018b52:	bf00      	nop
 8018b54:	3718      	adds	r7, #24
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	0801a948 	.word	0x0801a948

08018b60 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b08a      	sub	sp, #40	; 0x28
 8018b64:	af02      	add	r7, sp, #8
 8018b66:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8018b68:	2300      	movs	r3, #0
 8018b6a:	61bb      	str	r3, [r7, #24]
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8018b70:	2300      	movs	r3, #0
 8018b72:	613b      	str	r3, [r7, #16]
 8018b74:	2300      	movs	r3, #0
 8018b76:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8018b78:	4b14      	ldr	r3, [pc, #80]	; (8018bcc <SysTimeGet+0x6c>)
 8018b7a:	691b      	ldr	r3, [r3, #16]
 8018b7c:	f107 0218 	add.w	r2, r7, #24
 8018b80:	3204      	adds	r2, #4
 8018b82:	4610      	mov	r0, r2
 8018b84:	4798      	blx	r3
 8018b86:	4603      	mov	r3, r0
 8018b88:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8018b8a:	4b10      	ldr	r3, [pc, #64]	; (8018bcc <SysTimeGet+0x6c>)
 8018b8c:	68db      	ldr	r3, [r3, #12]
 8018b8e:	4798      	blx	r3
 8018b90:	4603      	mov	r3, r0
 8018b92:	b21b      	sxth	r3, r3
 8018b94:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8018b96:	4b0d      	ldr	r3, [pc, #52]	; (8018bcc <SysTimeGet+0x6c>)
 8018b98:	685b      	ldr	r3, [r3, #4]
 8018b9a:	4798      	blx	r3
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8018ba0:	f107 0010 	add.w	r0, r7, #16
 8018ba4:	69fb      	ldr	r3, [r7, #28]
 8018ba6:	9300      	str	r3, [sp, #0]
 8018ba8:	69bb      	ldr	r3, [r7, #24]
 8018baa:	f107 0208 	add.w	r2, r7, #8
 8018bae:	ca06      	ldmia	r2, {r1, r2}
 8018bb0:	f7ff ff36 	bl	8018a20 <SysTimeAdd>

  return sysTime;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	461a      	mov	r2, r3
 8018bb8:	f107 0310 	add.w	r3, r7, #16
 8018bbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018bc0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8018bc4:	6878      	ldr	r0, [r7, #4]
 8018bc6:	3720      	adds	r7, #32
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	0801a948 	.word	0x0801a948

08018bd0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b084      	sub	sp, #16
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8018bd8:	2300      	movs	r3, #0
 8018bda:	60bb      	str	r3, [r7, #8]
 8018bdc:	2300      	movs	r3, #0
 8018bde:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8018be0:	4b0a      	ldr	r3, [pc, #40]	; (8018c0c <SysTimeGetMcuTime+0x3c>)
 8018be2:	691b      	ldr	r3, [r3, #16]
 8018be4:	f107 0208 	add.w	r2, r7, #8
 8018be8:	3204      	adds	r2, #4
 8018bea:	4610      	mov	r0, r2
 8018bec:	4798      	blx	r3
 8018bee:	4603      	mov	r3, r0
 8018bf0:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	461a      	mov	r2, r3
 8018bf6:	f107 0308 	add.w	r3, r7, #8
 8018bfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018bfe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8018c02:	6878      	ldr	r0, [r7, #4]
 8018c04:	3710      	adds	r7, #16
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}
 8018c0a:	bf00      	nop
 8018c0c:	0801a948 	.word	0x0801a948

08018c10 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b088      	sub	sp, #32
 8018c14:	af02      	add	r7, sp, #8
 8018c16:	463b      	mov	r3, r7
 8018c18:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8018c1c:	4b0f      	ldr	r3, [pc, #60]	; (8018c5c <SysTimeToMs+0x4c>)
 8018c1e:	68db      	ldr	r3, [r3, #12]
 8018c20:	4798      	blx	r3
 8018c22:	4603      	mov	r3, r0
 8018c24:	b21b      	sxth	r3, r3
 8018c26:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8018c28:	4b0c      	ldr	r3, [pc, #48]	; (8018c5c <SysTimeToMs+0x4c>)
 8018c2a:	685b      	ldr	r3, [r3, #4]
 8018c2c:	4798      	blx	r3
 8018c2e:	4603      	mov	r3, r0
 8018c30:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8018c32:	f107 0008 	add.w	r0, r7, #8
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	9300      	str	r3, [sp, #0]
 8018c3a:	693b      	ldr	r3, [r7, #16]
 8018c3c:	463a      	mov	r2, r7
 8018c3e:	ca06      	ldmia	r2, {r1, r2}
 8018c40:	f7ff ff27 	bl	8018a92 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018c4a:	fb02 f303 	mul.w	r3, r2, r3
 8018c4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8018c52:	4413      	add	r3, r2
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3718      	adds	r7, #24
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}
 8018c5c:	0801a948 	.word	0x0801a948

08018c60 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b08a      	sub	sp, #40	; 0x28
 8018c64:	af02      	add	r7, sp, #8
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	4a19      	ldr	r2, [pc, #100]	; (8018cd4 <SysTimeFromMs+0x74>)
 8018c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8018c72:	099b      	lsrs	r3, r3, #6
 8018c74:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8018c76:	69fb      	ldr	r3, [r7, #28]
 8018c78:	617b      	str	r3, [r7, #20]
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	b29a      	uxth	r2, r3
 8018c7e:	69fb      	ldr	r3, [r7, #28]
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	4619      	mov	r1, r3
 8018c84:	0149      	lsls	r1, r1, #5
 8018c86:	1ac9      	subs	r1, r1, r3
 8018c88:	0089      	lsls	r1, r1, #2
 8018c8a:	440b      	add	r3, r1
 8018c8c:	00db      	lsls	r3, r3, #3
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	1ad3      	subs	r3, r2, r3
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	b21b      	sxth	r3, r3
 8018c96:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8018c98:	f107 030c 	add.w	r3, r7, #12
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	601a      	str	r2, [r3, #0]
 8018ca0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8018ca2:	4b0d      	ldr	r3, [pc, #52]	; (8018cd8 <SysTimeFromMs+0x78>)
 8018ca4:	68db      	ldr	r3, [r3, #12]
 8018ca6:	4798      	blx	r3
 8018ca8:	4603      	mov	r3, r0
 8018caa:	b21b      	sxth	r3, r3
 8018cac:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8018cae:	4b0a      	ldr	r3, [pc, #40]	; (8018cd8 <SysTimeFromMs+0x78>)
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	4798      	blx	r3
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	9300      	str	r3, [sp, #0]
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	f107 0214 	add.w	r2, r7, #20
 8018cc4:	ca06      	ldmia	r2, {r1, r2}
 8018cc6:	f7ff feab 	bl	8018a20 <SysTimeAdd>
}
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	3720      	adds	r7, #32
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	bd80      	pop	{r7, pc}
 8018cd2:	bf00      	nop
 8018cd4:	10624dd3 	.word	0x10624dd3
 8018cd8:	0801a948 	.word	0x0801a948

08018cdc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8018cdc:	b480      	push	{r7}
 8018cde:	b085      	sub	sp, #20
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
  int i = 0;
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8018ce8:	e00e      	b.n	8018d08 <ee_skip_atoi+0x2c>
 8018cea:	68fa      	ldr	r2, [r7, #12]
 8018cec:	4613      	mov	r3, r2
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	4413      	add	r3, r2
 8018cf2:	005b      	lsls	r3, r3, #1
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	1c59      	adds	r1, r3, #1
 8018cfc:	687a      	ldr	r2, [r7, #4]
 8018cfe:	6011      	str	r1, [r2, #0]
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	4403      	add	r3, r0
 8018d04:	3b30      	subs	r3, #48	; 0x30
 8018d06:	60fb      	str	r3, [r7, #12]
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	2b2f      	cmp	r3, #47	; 0x2f
 8018d10:	d904      	bls.n	8018d1c <ee_skip_atoi+0x40>
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	2b39      	cmp	r3, #57	; 0x39
 8018d1a:	d9e6      	bls.n	8018cea <ee_skip_atoi+0xe>
  return i;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
}
 8018d1e:	4618      	mov	r0, r3
 8018d20:	3714      	adds	r7, #20
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bc80      	pop	{r7}
 8018d26:	4770      	bx	lr

08018d28 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8018d28:	b480      	push	{r7}
 8018d2a:	b099      	sub	sp, #100	; 0x64
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	607a      	str	r2, [r7, #4]
 8018d34:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8018d36:	4b72      	ldr	r3, [pc, #456]	; (8018f00 <ee_number+0x1d8>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8018d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d002      	beq.n	8018d4c <ee_number+0x24>
 8018d46:	4b6f      	ldr	r3, [pc, #444]	; (8018f04 <ee_number+0x1dc>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	2b01      	cmp	r3, #1
 8018d50:	dd02      	ble.n	8018d58 <ee_number+0x30>
 8018d52:	683b      	ldr	r3, [r7, #0]
 8018d54:	2b24      	cmp	r3, #36	; 0x24
 8018d56:	dd01      	ble.n	8018d5c <ee_number+0x34>
 8018d58:	2300      	movs	r3, #0
 8018d5a:	e0cc      	b.n	8018ef6 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8018d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018d5e:	f003 0301 	and.w	r3, r3, #1
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d001      	beq.n	8018d6a <ee_number+0x42>
 8018d66:	2330      	movs	r3, #48	; 0x30
 8018d68:	e000      	b.n	8018d6c <ee_number+0x44>
 8018d6a:	2320      	movs	r3, #32
 8018d6c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8018d70:	2300      	movs	r3, #0
 8018d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8018d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018d78:	f003 0302 	and.w	r3, r3, #2
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d00b      	beq.n	8018d98 <ee_number+0x70>
  {
    if (num < 0)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	da08      	bge.n	8018d98 <ee_number+0x70>
    {
      sign = '-';
 8018d86:	232d      	movs	r3, #45	; 0x2d
 8018d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	425b      	negs	r3, r3
 8018d90:	607b      	str	r3, [r7, #4]
      size--;
 8018d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018d94:	3b01      	subs	r3, #1
 8018d96:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8018d98:	2300      	movs	r3, #0
 8018d9a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d120      	bne.n	8018de4 <ee_number+0xbc>
    tmp[i++] = '0';
 8018da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018da4:	1c5a      	adds	r2, r3, #1
 8018da6:	657a      	str	r2, [r7, #84]	; 0x54
 8018da8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8018dac:	4413      	add	r3, r2
 8018dae:	2230      	movs	r2, #48	; 0x30
 8018db0:	f803 2c50 	strb.w	r2, [r3, #-80]
 8018db4:	e019      	b.n	8018dea <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	683a      	ldr	r2, [r7, #0]
 8018dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8018dbe:	fb02 f201 	mul.w	r2, r2, r1
 8018dc2:	1a9b      	subs	r3, r3, r2
 8018dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018dc6:	441a      	add	r2, r3
 8018dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018dca:	1c59      	adds	r1, r3, #1
 8018dcc:	6579      	str	r1, [r7, #84]	; 0x54
 8018dce:	7812      	ldrb	r2, [r2, #0]
 8018dd0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8018dd4:	440b      	add	r3, r1
 8018dd6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8018dda:	687a      	ldr	r2, [r7, #4]
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8018de2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d1e5      	bne.n	8018db6 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8018dea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018dee:	429a      	cmp	r2, r3
 8018df0:	dd01      	ble.n	8018df6 <ee_number+0xce>
 8018df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018df4:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8018df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8018df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018dfa:	1ad3      	subs	r3, r2, r3
 8018dfc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8018dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018e00:	f003 0301 	and.w	r3, r3, #1
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d112      	bne.n	8018e2e <ee_number+0x106>
 8018e08:	e00c      	b.n	8018e24 <ee_number+0xfc>
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	1c5a      	adds	r2, r3, #1
 8018e0e:	60fa      	str	r2, [r7, #12]
 8018e10:	2220      	movs	r2, #32
 8018e12:	701a      	strb	r2, [r3, #0]
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	3b01      	subs	r3, #1
 8018e18:	60bb      	str	r3, [r7, #8]
 8018e1a:	68bb      	ldr	r3, [r7, #8]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d101      	bne.n	8018e24 <ee_number+0xfc>
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	e068      	b.n	8018ef6 <ee_number+0x1ce>
 8018e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018e26:	1e5a      	subs	r2, r3, #1
 8018e28:	66ba      	str	r2, [r7, #104]	; 0x68
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	dced      	bgt.n	8018e0a <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8018e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d01b      	beq.n	8018e6e <ee_number+0x146>
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	1c5a      	adds	r2, r3, #1
 8018e3a:	60fa      	str	r2, [r7, #12]
 8018e3c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8018e40:	701a      	strb	r2, [r3, #0]
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	3b01      	subs	r3, #1
 8018e46:	60bb      	str	r3, [r7, #8]
 8018e48:	68bb      	ldr	r3, [r7, #8]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d10f      	bne.n	8018e6e <ee_number+0x146>
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	e051      	b.n	8018ef6 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	1c5a      	adds	r2, r3, #1
 8018e56:	60fa      	str	r2, [r7, #12]
 8018e58:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8018e5c:	701a      	strb	r2, [r3, #0]
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	3b01      	subs	r3, #1
 8018e62:	60bb      	str	r3, [r7, #8]
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d101      	bne.n	8018e6e <ee_number+0x146>
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	e043      	b.n	8018ef6 <ee_number+0x1ce>
 8018e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018e70:	1e5a      	subs	r2, r3, #1
 8018e72:	66ba      	str	r2, [r7, #104]	; 0x68
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	dcec      	bgt.n	8018e52 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8018e78:	e00c      	b.n	8018e94 <ee_number+0x16c>
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	1c5a      	adds	r2, r3, #1
 8018e7e:	60fa      	str	r2, [r7, #12]
 8018e80:	2230      	movs	r2, #48	; 0x30
 8018e82:	701a      	strb	r2, [r3, #0]
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	3b01      	subs	r3, #1
 8018e88:	60bb      	str	r3, [r7, #8]
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d101      	bne.n	8018e94 <ee_number+0x16c>
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	e030      	b.n	8018ef6 <ee_number+0x1ce>
 8018e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018e96:	1e5a      	subs	r2, r3, #1
 8018e98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	dbec      	blt.n	8018e7a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8018ea0:	e010      	b.n	8018ec4 <ee_number+0x19c>
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	1c5a      	adds	r2, r3, #1
 8018ea6:	60fa      	str	r2, [r7, #12]
 8018ea8:	f107 0110 	add.w	r1, r7, #16
 8018eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018eae:	440a      	add	r2, r1
 8018eb0:	7812      	ldrb	r2, [r2, #0]
 8018eb2:	701a      	strb	r2, [r3, #0]
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	3b01      	subs	r3, #1
 8018eb8:	60bb      	str	r3, [r7, #8]
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d101      	bne.n	8018ec4 <ee_number+0x19c>
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	e018      	b.n	8018ef6 <ee_number+0x1ce>
 8018ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ec6:	1e5a      	subs	r2, r3, #1
 8018ec8:	657a      	str	r2, [r7, #84]	; 0x54
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	dce9      	bgt.n	8018ea2 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8018ece:	e00c      	b.n	8018eea <ee_number+0x1c2>
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	1c5a      	adds	r2, r3, #1
 8018ed4:	60fa      	str	r2, [r7, #12]
 8018ed6:	2220      	movs	r2, #32
 8018ed8:	701a      	strb	r2, [r3, #0]
 8018eda:	68bb      	ldr	r3, [r7, #8]
 8018edc:	3b01      	subs	r3, #1
 8018ede:	60bb      	str	r3, [r7, #8]
 8018ee0:	68bb      	ldr	r3, [r7, #8]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d101      	bne.n	8018eea <ee_number+0x1c2>
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	e005      	b.n	8018ef6 <ee_number+0x1ce>
 8018eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018eec:	1e5a      	subs	r2, r3, #1
 8018eee:	66ba      	str	r2, [r7, #104]	; 0x68
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	dced      	bgt.n	8018ed0 <ee_number+0x1a8>

  return str;
 8018ef4:	68fb      	ldr	r3, [r7, #12]
}
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	3764      	adds	r7, #100	; 0x64
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bc80      	pop	{r7}
 8018efe:	4770      	bx	lr
 8018f00:	20000124 	.word	0x20000124
 8018f04:	20000128 	.word	0x20000128

08018f08 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b092      	sub	sp, #72	; 0x48
 8018f0c:	af04      	add	r7, sp, #16
 8018f0e:	60f8      	str	r0, [r7, #12]
 8018f10:	60b9      	str	r1, [r7, #8]
 8018f12:	607a      	str	r2, [r7, #4]
 8018f14:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	dc01      	bgt.n	8018f20 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	e142      	b.n	80191a6 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018f24:	e12a      	b.n	801917c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8018f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	1ad2      	subs	r2, r2, r3
 8018f2c:	68bb      	ldr	r3, [r7, #8]
 8018f2e:	3b01      	subs	r3, #1
 8018f30:	429a      	cmp	r2, r3
 8018f32:	f280 8131 	bge.w	8019198 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	781b      	ldrb	r3, [r3, #0]
 8018f3a:	2b25      	cmp	r3, #37	; 0x25
 8018f3c:	d006      	beq.n	8018f4c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f42:	1c59      	adds	r1, r3, #1
 8018f44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018f46:	7812      	ldrb	r2, [r2, #0]
 8018f48:	701a      	strb	r2, [r3, #0]
      continue;
 8018f4a:	e114      	b.n	8019176 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	3301      	adds	r3, #1
 8018f54:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	2b30      	cmp	r3, #48	; 0x30
 8018f5c:	d103      	bne.n	8018f66 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8018f5e:	6a3b      	ldr	r3, [r7, #32]
 8018f60:	f043 0301 	orr.w	r3, r3, #1
 8018f64:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8018f66:	f04f 33ff 	mov.w	r3, #4294967295
 8018f6a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	2b2f      	cmp	r3, #47	; 0x2f
 8018f72:	d908      	bls.n	8018f86 <tiny_vsnprintf_like+0x7e>
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	2b39      	cmp	r3, #57	; 0x39
 8018f7a:	d804      	bhi.n	8018f86 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8018f7c:	1d3b      	adds	r3, r7, #4
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7ff feac 	bl	8018cdc <ee_skip_atoi>
 8018f84:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8018f86:	f04f 33ff 	mov.w	r3, #4294967295
 8018f8a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8018f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f90:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8018f92:	230a      	movs	r3, #10
 8018f94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	781b      	ldrb	r3, [r3, #0]
 8018f9a:	3b58      	subs	r3, #88	; 0x58
 8018f9c:	2b20      	cmp	r3, #32
 8018f9e:	f200 8094 	bhi.w	80190ca <tiny_vsnprintf_like+0x1c2>
 8018fa2:	a201      	add	r2, pc, #4	; (adr r2, 8018fa8 <tiny_vsnprintf_like+0xa0>)
 8018fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fa8:	080190b3 	.word	0x080190b3
 8018fac:	080190cb 	.word	0x080190cb
 8018fb0:	080190cb 	.word	0x080190cb
 8018fb4:	080190cb 	.word	0x080190cb
 8018fb8:	080190cb 	.word	0x080190cb
 8018fbc:	080190cb 	.word	0x080190cb
 8018fc0:	080190cb 	.word	0x080190cb
 8018fc4:	080190cb 	.word	0x080190cb
 8018fc8:	080190cb 	.word	0x080190cb
 8018fcc:	080190cb 	.word	0x080190cb
 8018fd0:	080190cb 	.word	0x080190cb
 8018fd4:	08019037 	.word	0x08019037
 8018fd8:	080190c1 	.word	0x080190c1
 8018fdc:	080190cb 	.word	0x080190cb
 8018fe0:	080190cb 	.word	0x080190cb
 8018fe4:	080190cb 	.word	0x080190cb
 8018fe8:	080190cb 	.word	0x080190cb
 8018fec:	080190c1 	.word	0x080190c1
 8018ff0:	080190cb 	.word	0x080190cb
 8018ff4:	080190cb 	.word	0x080190cb
 8018ff8:	080190cb 	.word	0x080190cb
 8018ffc:	080190cb 	.word	0x080190cb
 8019000:	080190cb 	.word	0x080190cb
 8019004:	080190cb 	.word	0x080190cb
 8019008:	080190cb 	.word	0x080190cb
 801900c:	080190cb 	.word	0x080190cb
 8019010:	080190cb 	.word	0x080190cb
 8019014:	08019057 	.word	0x08019057
 8019018:	080190cb 	.word	0x080190cb
 801901c:	08019117 	.word	0x08019117
 8019020:	080190cb 	.word	0x080190cb
 8019024:	080190cb 	.word	0x080190cb
 8019028:	080190bb 	.word	0x080190bb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801902e:	1c5a      	adds	r2, r3, #1
 8019030:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019032:	2220      	movs	r2, #32
 8019034:	701a      	strb	r2, [r3, #0]
 8019036:	69fb      	ldr	r3, [r7, #28]
 8019038:	3b01      	subs	r3, #1
 801903a:	61fb      	str	r3, [r7, #28]
 801903c:	69fb      	ldr	r3, [r7, #28]
 801903e:	2b00      	cmp	r3, #0
 8019040:	dcf4      	bgt.n	801902c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	1d1a      	adds	r2, r3, #4
 8019046:	603a      	str	r2, [r7, #0]
 8019048:	6819      	ldr	r1, [r3, #0]
 801904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801904c:	1c5a      	adds	r2, r3, #1
 801904e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019050:	b2ca      	uxtb	r2, r1
 8019052:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019054:	e08f      	b.n	8019176 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019056:	683b      	ldr	r3, [r7, #0]
 8019058:	1d1a      	adds	r2, r3, #4
 801905a:	603a      	str	r2, [r7, #0]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019062:	2b00      	cmp	r3, #0
 8019064:	d101      	bne.n	801906a <tiny_vsnprintf_like+0x162>
 8019066:	4b52      	ldr	r3, [pc, #328]	; (80191b0 <tiny_vsnprintf_like+0x2a8>)
 8019068:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801906a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801906c:	f7e7 f884 	bl	8000178 <strlen>
 8019070:	4603      	mov	r3, r0
 8019072:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019074:	e004      	b.n	8019080 <tiny_vsnprintf_like+0x178>
 8019076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019078:	1c5a      	adds	r2, r3, #1
 801907a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801907c:	2220      	movs	r2, #32
 801907e:	701a      	strb	r2, [r3, #0]
 8019080:	69fb      	ldr	r3, [r7, #28]
 8019082:	1e5a      	subs	r2, r3, #1
 8019084:	61fa      	str	r2, [r7, #28]
 8019086:	693a      	ldr	r2, [r7, #16]
 8019088:	429a      	cmp	r2, r3
 801908a:	dbf4      	blt.n	8019076 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801908c:	2300      	movs	r3, #0
 801908e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019090:	e00a      	b.n	80190a8 <tiny_vsnprintf_like+0x1a0>
 8019092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019094:	1c53      	adds	r3, r2, #1
 8019096:	627b      	str	r3, [r7, #36]	; 0x24
 8019098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801909a:	1c59      	adds	r1, r3, #1
 801909c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801909e:	7812      	ldrb	r2, [r2, #0]
 80190a0:	701a      	strb	r2, [r3, #0]
 80190a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a4:	3301      	adds	r3, #1
 80190a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80190a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80190aa:	693b      	ldr	r3, [r7, #16]
 80190ac:	429a      	cmp	r2, r3
 80190ae:	dbf0      	blt.n	8019092 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 80190b0:	e061      	b.n	8019176 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 80190b2:	6a3b      	ldr	r3, [r7, #32]
 80190b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190b8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 80190ba:	2310      	movs	r3, #16
 80190bc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80190be:	e02d      	b.n	801911c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 80190c0:	6a3b      	ldr	r3, [r7, #32]
 80190c2:	f043 0302 	orr.w	r3, r3, #2
 80190c6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 80190c8:	e025      	b.n	8019116 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	2b25      	cmp	r3, #37	; 0x25
 80190d0:	d004      	beq.n	80190dc <tiny_vsnprintf_like+0x1d4>
 80190d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d4:	1c5a      	adds	r2, r3, #1
 80190d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80190d8:	2225      	movs	r2, #37	; 0x25
 80190da:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 80190dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	1ad2      	subs	r2, r2, r3
 80190e2:	68bb      	ldr	r3, [r7, #8]
 80190e4:	3b01      	subs	r3, #1
 80190e6:	429a      	cmp	r2, r3
 80190e8:	da17      	bge.n	801911a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d006      	beq.n	8019100 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 80190f2:	687a      	ldr	r2, [r7, #4]
 80190f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f6:	1c59      	adds	r1, r3, #1
 80190f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80190fa:	7812      	ldrb	r2, [r2, #0]
 80190fc:	701a      	strb	r2, [r3, #0]
 80190fe:	e002      	b.n	8019106 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	3b01      	subs	r3, #1
 8019104:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	1ad2      	subs	r2, r2, r3
 801910c:	68bb      	ldr	r3, [r7, #8]
 801910e:	3b01      	subs	r3, #1
 8019110:	429a      	cmp	r2, r3
 8019112:	db2f      	blt.n	8019174 <tiny_vsnprintf_like+0x26c>
 8019114:	e002      	b.n	801911c <tiny_vsnprintf_like+0x214>
        break;
 8019116:	bf00      	nop
 8019118:	e000      	b.n	801911c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801911a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801911c:	697b      	ldr	r3, [r7, #20]
 801911e:	2b6c      	cmp	r3, #108	; 0x6c
 8019120:	d105      	bne.n	801912e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	1d1a      	adds	r2, r3, #4
 8019126:	603a      	str	r2, [r7, #0]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	637b      	str	r3, [r7, #52]	; 0x34
 801912c:	e00f      	b.n	801914e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801912e:	6a3b      	ldr	r3, [r7, #32]
 8019130:	f003 0302 	and.w	r3, r3, #2
 8019134:	2b00      	cmp	r3, #0
 8019136:	d005      	beq.n	8019144 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	1d1a      	adds	r2, r3, #4
 801913c:	603a      	str	r2, [r7, #0]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	637b      	str	r3, [r7, #52]	; 0x34
 8019142:	e004      	b.n	801914e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	1d1a      	adds	r2, r3, #4
 8019148:	603a      	str	r2, [r7, #0]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801914e:	68bb      	ldr	r3, [r7, #8]
 8019150:	1e5a      	subs	r2, r3, #1
 8019152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	1acb      	subs	r3, r1, r3
 8019158:	1ad1      	subs	r1, r2, r3
 801915a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801915c:	6a3b      	ldr	r3, [r7, #32]
 801915e:	9302      	str	r3, [sp, #8]
 8019160:	69bb      	ldr	r3, [r7, #24]
 8019162:	9301      	str	r3, [sp, #4]
 8019164:	69fb      	ldr	r3, [r7, #28]
 8019166:	9300      	str	r3, [sp, #0]
 8019168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801916a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801916c:	f7ff fddc 	bl	8018d28 <ee_number>
 8019170:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019172:	e000      	b.n	8019176 <tiny_vsnprintf_like+0x26e>
        continue;
 8019174:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	3301      	adds	r3, #1
 801917a:	607b      	str	r3, [r7, #4]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	781b      	ldrb	r3, [r3, #0]
 8019180:	2b00      	cmp	r3, #0
 8019182:	f47f aed0 	bne.w	8018f26 <tiny_vsnprintf_like+0x1e>
 8019186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	1ad2      	subs	r2, r2, r3
 801918c:	68bb      	ldr	r3, [r7, #8]
 801918e:	3b01      	subs	r3, #1
 8019190:	429a      	cmp	r2, r3
 8019192:	f6bf aec8 	bge.w	8018f26 <tiny_vsnprintf_like+0x1e>
 8019196:	e000      	b.n	801919a <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019198:	bf00      	nop
  }

  *str = '\0';
 801919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801919c:	2200      	movs	r2, #0
 801919e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 80191a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	1ad3      	subs	r3, r2, r3
}
 80191a6:	4618      	mov	r0, r3
 80191a8:	3738      	adds	r7, #56	; 0x38
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	0801a85c 	.word	0x0801a85c

080191b4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b08c      	sub	sp, #48	; 0x30
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80191bc:	4b67      	ldr	r3, [pc, #412]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80191c2:	4b66      	ldr	r3, [pc, #408]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 80191c4:	681a      	ldr	r2, [r3, #0]
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	4013      	ands	r3, r2
 80191ca:	4a64      	ldr	r2, [pc, #400]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 80191cc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80191ce:	e083      	b.n	80192d8 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 80191d0:	2300      	movs	r3, #0
 80191d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80191d4:	e002      	b.n	80191dc <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80191d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d8:	3301      	adds	r3, #1
 80191da:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80191dc:	4a60      	ldr	r2, [pc, #384]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 80191de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80191e4:	4b5f      	ldr	r3, [pc, #380]	; (8019364 <UTIL_SEQ_Run+0x1b0>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	401a      	ands	r2, r3
 80191ea:	4b5c      	ldr	r3, [pc, #368]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	4013      	ands	r3, r2
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d0f0      	beq.n	80191d6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80191f4:	4a5a      	ldr	r2, [pc, #360]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 80191f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80191fc:	4b59      	ldr	r3, [pc, #356]	; (8019364 <UTIL_SEQ_Run+0x1b0>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	401a      	ands	r2, r3
 8019202:	4b56      	ldr	r3, [pc, #344]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	4013      	ands	r3, r2
 8019208:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801920a:	4a55      	ldr	r2, [pc, #340]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 801920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801920e:	00db      	lsls	r3, r3, #3
 8019210:	4413      	add	r3, r2
 8019212:	685a      	ldr	r2, [r3, #4]
 8019214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019216:	4013      	ands	r3, r2
 8019218:	2b00      	cmp	r3, #0
 801921a:	d106      	bne.n	801922a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801921c:	4a50      	ldr	r2, [pc, #320]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 801921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019220:	00db      	lsls	r3, r3, #3
 8019222:	4413      	add	r3, r2
 8019224:	f04f 32ff 	mov.w	r2, #4294967295
 8019228:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801922a:	4a4d      	ldr	r2, [pc, #308]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 801922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801922e:	00db      	lsls	r3, r3, #3
 8019230:	4413      	add	r3, r2
 8019232:	685a      	ldr	r2, [r3, #4]
 8019234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019236:	4013      	ands	r3, r2
 8019238:	4618      	mov	r0, r3
 801923a:	f000 f8f9 	bl	8019430 <SEQ_BitPosition>
 801923e:	4603      	mov	r3, r0
 8019240:	461a      	mov	r2, r3
 8019242:	4b49      	ldr	r3, [pc, #292]	; (8019368 <UTIL_SEQ_Run+0x1b4>)
 8019244:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019246:	4a46      	ldr	r2, [pc, #280]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 8019248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801924a:	00db      	lsls	r3, r3, #3
 801924c:	4413      	add	r3, r2
 801924e:	685a      	ldr	r2, [r3, #4]
 8019250:	4b45      	ldr	r3, [pc, #276]	; (8019368 <UTIL_SEQ_Run+0x1b4>)
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	2101      	movs	r1, #1
 8019256:	fa01 f303 	lsl.w	r3, r1, r3
 801925a:	43db      	mvns	r3, r3
 801925c:	401a      	ands	r2, r3
 801925e:	4940      	ldr	r1, [pc, #256]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 8019260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019262:	00db      	lsls	r3, r3, #3
 8019264:	440b      	add	r3, r1
 8019266:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019268:	f3ef 8310 	mrs	r3, PRIMASK
 801926c:	61bb      	str	r3, [r7, #24]
  return(result);
 801926e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8019272:	b672      	cpsid	i
}
 8019274:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019276:	4b3c      	ldr	r3, [pc, #240]	; (8019368 <UTIL_SEQ_Run+0x1b4>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2201      	movs	r2, #1
 801927c:	fa02 f303 	lsl.w	r3, r2, r3
 8019280:	43da      	mvns	r2, r3
 8019282:	4b3a      	ldr	r3, [pc, #232]	; (801936c <UTIL_SEQ_Run+0x1b8>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	4013      	ands	r3, r2
 8019288:	4a38      	ldr	r2, [pc, #224]	; (801936c <UTIL_SEQ_Run+0x1b8>)
 801928a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801928c:	2302      	movs	r3, #2
 801928e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019290:	e013      	b.n	80192ba <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019294:	3b01      	subs	r3, #1
 8019296:	4a32      	ldr	r2, [pc, #200]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 8019298:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801929c:	4b32      	ldr	r3, [pc, #200]	; (8019368 <UTIL_SEQ_Run+0x1b4>)
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	2201      	movs	r2, #1
 80192a2:	fa02 f303 	lsl.w	r3, r2, r3
 80192a6:	43da      	mvns	r2, r3
 80192a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192aa:	3b01      	subs	r3, #1
 80192ac:	400a      	ands	r2, r1
 80192ae:	492c      	ldr	r1, [pc, #176]	; (8019360 <UTIL_SEQ_Run+0x1ac>)
 80192b0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80192b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b6:	3b01      	subs	r3, #1
 80192b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d1e8      	bne.n	8019292 <UTIL_SEQ_Run+0xde>
 80192c0:	6a3b      	ldr	r3, [r7, #32]
 80192c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	f383 8810 	msr	PRIMASK, r3
}
 80192ca:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80192cc:	4b26      	ldr	r3, [pc, #152]	; (8019368 <UTIL_SEQ_Run+0x1b4>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	4a27      	ldr	r2, [pc, #156]	; (8019370 <UTIL_SEQ_Run+0x1bc>)
 80192d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80192d6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80192d8:	4b24      	ldr	r3, [pc, #144]	; (801936c <UTIL_SEQ_Run+0x1b8>)
 80192da:	681a      	ldr	r2, [r3, #0]
 80192dc:	4b21      	ldr	r3, [pc, #132]	; (8019364 <UTIL_SEQ_Run+0x1b0>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	401a      	ands	r2, r3
 80192e2:	4b1e      	ldr	r3, [pc, #120]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	4013      	ands	r3, r2
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d007      	beq.n	80192fc <UTIL_SEQ_Run+0x148>
 80192ec:	4b21      	ldr	r3, [pc, #132]	; (8019374 <UTIL_SEQ_Run+0x1c0>)
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	4b21      	ldr	r3, [pc, #132]	; (8019378 <UTIL_SEQ_Run+0x1c4>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	4013      	ands	r3, r2
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	f43f af6a 	beq.w	80191d0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80192fc:	4b1a      	ldr	r3, [pc, #104]	; (8019368 <UTIL_SEQ_Run+0x1b4>)
 80192fe:	f04f 32ff 	mov.w	r2, #4294967295
 8019302:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019304:	f000 f888 	bl	8019418 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019308:	f3ef 8310 	mrs	r3, PRIMASK
 801930c:	613b      	str	r3, [r7, #16]
  return(result);
 801930e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019312:	b672      	cpsid	i
}
 8019314:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8019316:	4b15      	ldr	r3, [pc, #84]	; (801936c <UTIL_SEQ_Run+0x1b8>)
 8019318:	681a      	ldr	r2, [r3, #0]
 801931a:	4b12      	ldr	r3, [pc, #72]	; (8019364 <UTIL_SEQ_Run+0x1b0>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	401a      	ands	r2, r3
 8019320:	4b0e      	ldr	r3, [pc, #56]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	4013      	ands	r3, r2
 8019326:	2b00      	cmp	r3, #0
 8019328:	d108      	bne.n	801933c <UTIL_SEQ_Run+0x188>
 801932a:	4b12      	ldr	r3, [pc, #72]	; (8019374 <UTIL_SEQ_Run+0x1c0>)
 801932c:	681a      	ldr	r2, [r3, #0]
 801932e:	4b12      	ldr	r3, [pc, #72]	; (8019378 <UTIL_SEQ_Run+0x1c4>)
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	4013      	ands	r3, r2
 8019334:	2b00      	cmp	r3, #0
 8019336:	d101      	bne.n	801933c <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8019338:	f7e8 f9c6 	bl	80016c8 <UTIL_SEQ_Idle>
 801933c:	69fb      	ldr	r3, [r7, #28]
 801933e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	f383 8810 	msr	PRIMASK, r3
}
 8019346:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8019348:	f000 f86c 	bl	8019424 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801934c:	4a03      	ldr	r2, [pc, #12]	; (801935c <UTIL_SEQ_Run+0x1a8>)
 801934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019350:	6013      	str	r3, [r2, #0]

  return;
 8019352:	bf00      	nop
}
 8019354:	3730      	adds	r7, #48	; 0x30
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	20000130 	.word	0x20000130
 8019360:	20000f84 	.word	0x20000f84
 8019364:	2000012c 	.word	0x2000012c
 8019368:	20000f00 	.word	0x20000f00
 801936c:	20000ef4 	.word	0x20000ef4
 8019370:	20000f04 	.word	0x20000f04
 8019374:	20000ef8 	.word	0x20000ef8
 8019378:	20000efc 	.word	0x20000efc

0801937c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b088      	sub	sp, #32
 8019380:	af00      	add	r7, sp, #0
 8019382:	60f8      	str	r0, [r7, #12]
 8019384:	60b9      	str	r1, [r7, #8]
 8019386:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019388:	f3ef 8310 	mrs	r3, PRIMASK
 801938c:	617b      	str	r3, [r7, #20]
  return(result);
 801938e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019392:	b672      	cpsid	i
}
 8019394:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019396:	68f8      	ldr	r0, [r7, #12]
 8019398:	f000 f84a 	bl	8019430 <SEQ_BitPosition>
 801939c:	4603      	mov	r3, r0
 801939e:	4619      	mov	r1, r3
 80193a0:	4a06      	ldr	r2, [pc, #24]	; (80193bc <UTIL_SEQ_RegTask+0x40>)
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80193a8:	69fb      	ldr	r3, [r7, #28]
 80193aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193ac:	69bb      	ldr	r3, [r7, #24]
 80193ae:	f383 8810 	msr	PRIMASK, r3
}
 80193b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80193b4:	bf00      	nop
}
 80193b6:	3720      	adds	r7, #32
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}
 80193bc:	20000f04 	.word	0x20000f04

080193c0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80193c0:	b480      	push	{r7}
 80193c2:	b087      	sub	sp, #28
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
 80193c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193ca:	f3ef 8310 	mrs	r3, PRIMASK
 80193ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80193d0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80193d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193d4:	b672      	cpsid	i
}
 80193d6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80193d8:	4b0d      	ldr	r3, [pc, #52]	; (8019410 <UTIL_SEQ_SetTask+0x50>)
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	4313      	orrs	r3, r2
 80193e0:	4a0b      	ldr	r2, [pc, #44]	; (8019410 <UTIL_SEQ_SetTask+0x50>)
 80193e2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80193e4:	4a0b      	ldr	r2, [pc, #44]	; (8019414 <UTIL_SEQ_SetTask+0x54>)
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	431a      	orrs	r2, r3
 80193f0:	4908      	ldr	r1, [pc, #32]	; (8019414 <UTIL_SEQ_SetTask+0x54>)
 80193f2:	683b      	ldr	r3, [r7, #0]
 80193f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80193f8:	697b      	ldr	r3, [r7, #20]
 80193fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193fc:	693b      	ldr	r3, [r7, #16]
 80193fe:	f383 8810 	msr	PRIMASK, r3
}
 8019402:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019404:	bf00      	nop
}
 8019406:	371c      	adds	r7, #28
 8019408:	46bd      	mov	sp, r7
 801940a:	bc80      	pop	{r7}
 801940c:	4770      	bx	lr
 801940e:	bf00      	nop
 8019410:	20000ef4 	.word	0x20000ef4
 8019414:	20000f84 	.word	0x20000f84

08019418 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019418:	b480      	push	{r7}
 801941a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801941c:	bf00      	nop
}
 801941e:	46bd      	mov	sp, r7
 8019420:	bc80      	pop	{r7}
 8019422:	4770      	bx	lr

08019424 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019424:	b480      	push	{r7}
 8019426:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019428:	bf00      	nop
}
 801942a:	46bd      	mov	sp, r7
 801942c:	bc80      	pop	{r7}
 801942e:	4770      	bx	lr

08019430 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019430:	b480      	push	{r7}
 8019432:	b085      	sub	sp, #20
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8019438:	2300      	movs	r3, #0
 801943a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	0c1b      	lsrs	r3, r3, #16
 8019440:	041b      	lsls	r3, r3, #16
 8019442:	2b00      	cmp	r3, #0
 8019444:	d104      	bne.n	8019450 <SEQ_BitPosition+0x20>
 8019446:	2310      	movs	r3, #16
 8019448:	73fb      	strb	r3, [r7, #15]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	041b      	lsls	r3, r3, #16
 801944e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019456:	2b00      	cmp	r3, #0
 8019458:	d105      	bne.n	8019466 <SEQ_BitPosition+0x36>
 801945a:	7bfb      	ldrb	r3, [r7, #15]
 801945c:	3308      	adds	r3, #8
 801945e:	73fb      	strb	r3, [r7, #15]
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	021b      	lsls	r3, r3, #8
 8019464:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801946c:	2b00      	cmp	r3, #0
 801946e:	d105      	bne.n	801947c <SEQ_BitPosition+0x4c>
 8019470:	7bfb      	ldrb	r3, [r7, #15]
 8019472:	3304      	adds	r3, #4
 8019474:	73fb      	strb	r3, [r7, #15]
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	011b      	lsls	r3, r3, #4
 801947a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	0f1b      	lsrs	r3, r3, #28
 8019480:	4a06      	ldr	r2, [pc, #24]	; (801949c <SEQ_BitPosition+0x6c>)
 8019482:	5cd2      	ldrb	r2, [r2, r3]
 8019484:	7bfb      	ldrb	r3, [r7, #15]
 8019486:	4413      	add	r3, r2
 8019488:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801948a:	7bfb      	ldrb	r3, [r7, #15]
 801948c:	f1c3 031f 	rsb	r3, r3, #31
 8019490:	b2db      	uxtb	r3, r3
}
 8019492:	4618      	mov	r0, r3
 8019494:	3714      	adds	r7, #20
 8019496:	46bd      	mov	sp, r7
 8019498:	bc80      	pop	{r7}
 801949a:	4770      	bx	lr
 801949c:	0801ae34 	.word	0x0801ae34

080194a0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80194a4:	4b04      	ldr	r3, [pc, #16]	; (80194b8 <UTIL_TIMER_Init+0x18>)
 80194a6:	2200      	movs	r2, #0
 80194a8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80194aa:	4b04      	ldr	r3, [pc, #16]	; (80194bc <UTIL_TIMER_Init+0x1c>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	4798      	blx	r3
 80194b0:	4603      	mov	r3, r0
}
 80194b2:	4618      	mov	r0, r3
 80194b4:	bd80      	pop	{r7, pc}
 80194b6:	bf00      	nop
 80194b8:	20000f94 	.word	0x20000f94
 80194bc:	0801a91c 	.word	0x0801a91c

080194c0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b084      	sub	sp, #16
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	60f8      	str	r0, [r7, #12]
 80194c8:	60b9      	str	r1, [r7, #8]
 80194ca:	603b      	str	r3, [r7, #0]
 80194cc:	4613      	mov	r3, r2
 80194ce:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d023      	beq.n	801951e <UTIL_TIMER_Create+0x5e>
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d020      	beq.n	801951e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	2200      	movs	r2, #0
 80194e0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80194e2:	4b11      	ldr	r3, [pc, #68]	; (8019528 <UTIL_TIMER_Create+0x68>)
 80194e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194e6:	68b8      	ldr	r0, [r7, #8]
 80194e8:	4798      	blx	r3
 80194ea:	4602      	mov	r2, r0
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	2200      	movs	r2, #0
 80194f4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	2200      	movs	r2, #0
 80194fa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	2200      	movs	r2, #0
 8019500:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	683a      	ldr	r2, [r7, #0]
 8019506:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	69ba      	ldr	r2, [r7, #24]
 801950c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	79fa      	ldrb	r2, [r7, #7]
 8019512:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	2200      	movs	r2, #0
 8019518:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801951a:	2300      	movs	r3, #0
 801951c:	e000      	b.n	8019520 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801951e:	2301      	movs	r3, #1
  }
}
 8019520:	4618      	mov	r0, r3
 8019522:	3710      	adds	r7, #16
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}
 8019528:	0801a91c 	.word	0x0801a91c

0801952c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b08a      	sub	sp, #40	; 0x28
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019534:	2300      	movs	r3, #0
 8019536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d056      	beq.n	80195ee <UTIL_TIMER_Start+0xc2>
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f000 f9a9 	bl	8019898 <TimerExists>
 8019546:	4603      	mov	r3, r0
 8019548:	f083 0301 	eor.w	r3, r3, #1
 801954c:	b2db      	uxtb	r3, r3
 801954e:	2b00      	cmp	r3, #0
 8019550:	d04d      	beq.n	80195ee <UTIL_TIMER_Start+0xc2>
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	7a5b      	ldrb	r3, [r3, #9]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d149      	bne.n	80195ee <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801955a:	f3ef 8310 	mrs	r3, PRIMASK
 801955e:	613b      	str	r3, [r7, #16]
  return(result);
 8019560:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019564:	b672      	cpsid	i
}
 8019566:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801956e:	4b24      	ldr	r3, [pc, #144]	; (8019600 <UTIL_TIMER_Start+0xd4>)
 8019570:	6a1b      	ldr	r3, [r3, #32]
 8019572:	4798      	blx	r3
 8019574:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8019576:	6a3a      	ldr	r2, [r7, #32]
 8019578:	69bb      	ldr	r3, [r7, #24]
 801957a:	429a      	cmp	r2, r3
 801957c:	d201      	bcs.n	8019582 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801957e:	69bb      	ldr	r3, [r7, #24]
 8019580:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	6a3a      	ldr	r2, [r7, #32]
 8019586:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	2200      	movs	r2, #0
 801958c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	2201      	movs	r2, #1
 8019592:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	2200      	movs	r2, #0
 8019598:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801959a:	4b1a      	ldr	r3, [pc, #104]	; (8019604 <UTIL_TIMER_Start+0xd8>)
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d106      	bne.n	80195b0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80195a2:	4b17      	ldr	r3, [pc, #92]	; (8019600 <UTIL_TIMER_Start+0xd4>)
 80195a4:	691b      	ldr	r3, [r3, #16]
 80195a6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80195a8:	6878      	ldr	r0, [r7, #4]
 80195aa:	f000 f9eb 	bl	8019984 <TimerInsertNewHeadTimer>
 80195ae:	e017      	b.n	80195e0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80195b0:	4b13      	ldr	r3, [pc, #76]	; (8019600 <UTIL_TIMER_Start+0xd4>)
 80195b2:	699b      	ldr	r3, [r3, #24]
 80195b4:	4798      	blx	r3
 80195b6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	681a      	ldr	r2, [r3, #0]
 80195bc:	697b      	ldr	r3, [r7, #20]
 80195be:	441a      	add	r2, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681a      	ldr	r2, [r3, #0]
 80195c8:	4b0e      	ldr	r3, [pc, #56]	; (8019604 <UTIL_TIMER_Start+0xd8>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d203      	bcs.n	80195da <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80195d2:	6878      	ldr	r0, [r7, #4]
 80195d4:	f000 f9d6 	bl	8019984 <TimerInsertNewHeadTimer>
 80195d8:	e002      	b.n	80195e0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 80195da:	6878      	ldr	r0, [r7, #4]
 80195dc:	f000 f9a2 	bl	8019924 <TimerInsertTimer>
 80195e0:	69fb      	ldr	r3, [r7, #28]
 80195e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	f383 8810 	msr	PRIMASK, r3
}
 80195ea:	bf00      	nop
  {
 80195ec:	e002      	b.n	80195f4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 80195ee:	2301      	movs	r3, #1
 80195f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80195f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3728      	adds	r7, #40	; 0x28
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	0801a91c 	.word	0x0801a91c
 8019604:	20000f94 	.word	0x20000f94

08019608 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b088      	sub	sp, #32
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8019610:	2300      	movs	r3, #0
 8019612:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d05b      	beq.n	80196d2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801961a:	f3ef 8310 	mrs	r3, PRIMASK
 801961e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019620:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8019622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019624:	b672      	cpsid	i
}
 8019626:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8019628:	4b2d      	ldr	r3, [pc, #180]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801962e:	4b2c      	ldr	r3, [pc, #176]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2201      	movs	r2, #1
 8019638:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801963a:	4b29      	ldr	r3, [pc, #164]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d041      	beq.n	80196c6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	2200      	movs	r2, #0
 8019646:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8019648:	4b25      	ldr	r3, [pc, #148]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	687a      	ldr	r2, [r7, #4]
 801964e:	429a      	cmp	r2, r3
 8019650:	d134      	bne.n	80196bc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8019652:	4b23      	ldr	r3, [pc, #140]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	2200      	movs	r2, #0
 8019658:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801965a:	4b21      	ldr	r3, [pc, #132]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	695b      	ldr	r3, [r3, #20]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d00a      	beq.n	801967a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8019664:	4b1e      	ldr	r3, [pc, #120]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	695b      	ldr	r3, [r3, #20]
 801966a:	4a1d      	ldr	r2, [pc, #116]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 801966c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801966e:	4b1c      	ldr	r3, [pc, #112]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	4618      	mov	r0, r3
 8019674:	f000 f92c 	bl	80198d0 <TimerSetTimeout>
 8019678:	e023      	b.n	80196c2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801967a:	4b1a      	ldr	r3, [pc, #104]	; (80196e4 <UTIL_TIMER_Stop+0xdc>)
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	4798      	blx	r3
            TimerListHead = NULL;
 8019680:	4b17      	ldr	r3, [pc, #92]	; (80196e0 <UTIL_TIMER_Stop+0xd8>)
 8019682:	2200      	movs	r2, #0
 8019684:	601a      	str	r2, [r3, #0]
 8019686:	e01c      	b.n	80196c2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8019688:	697a      	ldr	r2, [r7, #20]
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	429a      	cmp	r2, r3
 801968e:	d110      	bne.n	80196b2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8019690:	697b      	ldr	r3, [r7, #20]
 8019692:	695b      	ldr	r3, [r3, #20]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d006      	beq.n	80196a6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8019698:	697b      	ldr	r3, [r7, #20]
 801969a:	695b      	ldr	r3, [r3, #20]
 801969c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801969e:	69bb      	ldr	r3, [r7, #24]
 80196a0:	697a      	ldr	r2, [r7, #20]
 80196a2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80196a4:	e00d      	b.n	80196c2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80196a6:	2300      	movs	r3, #0
 80196a8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80196aa:	69bb      	ldr	r3, [r7, #24]
 80196ac:	697a      	ldr	r2, [r7, #20]
 80196ae:	615a      	str	r2, [r3, #20]
            break;
 80196b0:	e007      	b.n	80196c2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80196b2:	697b      	ldr	r3, [r7, #20]
 80196b4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80196b6:	697b      	ldr	r3, [r7, #20]
 80196b8:	695b      	ldr	r3, [r3, #20]
 80196ba:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d1e2      	bne.n	8019688 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80196c2:	2300      	movs	r3, #0
 80196c4:	77fb      	strb	r3, [r7, #31]
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196ca:	68bb      	ldr	r3, [r7, #8]
 80196cc:	f383 8810 	msr	PRIMASK, r3
}
 80196d0:	e001      	b.n	80196d6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80196d2:	2301      	movs	r3, #1
 80196d4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80196d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80196d8:	4618      	mov	r0, r3
 80196da:	3720      	adds	r7, #32
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	20000f94 	.word	0x20000f94
 80196e4:	0801a91c 	.word	0x0801a91c

080196e8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b084      	sub	sp, #16
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
 80196f0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80196f2:	2300      	movs	r3, #0
 80196f4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d102      	bne.n	8019702 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 80196fc:	2301      	movs	r3, #1
 80196fe:	73fb      	strb	r3, [r7, #15]
 8019700:	e014      	b.n	801972c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8019702:	4b0d      	ldr	r3, [pc, #52]	; (8019738 <UTIL_TIMER_SetPeriod+0x50>)
 8019704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019706:	6838      	ldr	r0, [r7, #0]
 8019708:	4798      	blx	r3
 801970a:	4602      	mov	r2, r0
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	f000 f8c1 	bl	8019898 <TimerExists>
 8019716:	4603      	mov	r3, r0
 8019718:	2b00      	cmp	r3, #0
 801971a:	d007      	beq.n	801972c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801971c:	6878      	ldr	r0, [r7, #4]
 801971e:	f7ff ff73 	bl	8019608 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8019722:	6878      	ldr	r0, [r7, #4]
 8019724:	f7ff ff02 	bl	801952c <UTIL_TIMER_Start>
 8019728:	4603      	mov	r3, r0
 801972a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801972c:	7bfb      	ldrb	r3, [r7, #15]
}
 801972e:	4618      	mov	r0, r3
 8019730:	3710      	adds	r7, #16
 8019732:	46bd      	mov	sp, r7
 8019734:	bd80      	pop	{r7, pc}
 8019736:	bf00      	nop
 8019738:	0801a91c 	.word	0x0801a91c

0801973c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801973c:	b590      	push	{r4, r7, lr}
 801973e:	b089      	sub	sp, #36	; 0x24
 8019740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019742:	f3ef 8310 	mrs	r3, PRIMASK
 8019746:	60bb      	str	r3, [r7, #8]
  return(result);
 8019748:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801974a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801974c:	b672      	cpsid	i
}
 801974e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8019750:	4b38      	ldr	r3, [pc, #224]	; (8019834 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8019752:	695b      	ldr	r3, [r3, #20]
 8019754:	4798      	blx	r3
 8019756:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8019758:	4b36      	ldr	r3, [pc, #216]	; (8019834 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801975a:	691b      	ldr	r3, [r3, #16]
 801975c:	4798      	blx	r3
 801975e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8019760:	693a      	ldr	r2, [r7, #16]
 8019762:	697b      	ldr	r3, [r7, #20]
 8019764:	1ad3      	subs	r3, r2, r3
 8019766:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8019768:	4b33      	ldr	r3, [pc, #204]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d037      	beq.n	80197e0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 8019770:	4b31      	ldr	r3, [pc, #196]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	68fa      	ldr	r2, [r7, #12]
 801977c:	429a      	cmp	r2, r3
 801977e:	d206      	bcs.n	801978e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 8019780:	69fb      	ldr	r3, [r7, #28]
 8019782:	681a      	ldr	r2, [r3, #0]
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	1ad2      	subs	r2, r2, r3
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	601a      	str	r2, [r3, #0]
 801978c:	e002      	b.n	8019794 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	2200      	movs	r2, #0
 8019792:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 8019794:	69fb      	ldr	r3, [r7, #28]
 8019796:	695b      	ldr	r3, [r3, #20]
 8019798:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d1ea      	bne.n	8019776 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80197a0:	e01e      	b.n	80197e0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 80197a2:	4b25      	ldr	r3, [pc, #148]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 80197a8:	4b23      	ldr	r3, [pc, #140]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	695b      	ldr	r3, [r3, #20]
 80197ae:	4a22      	ldr	r2, [pc, #136]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80197b0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 80197b2:	69fb      	ldr	r3, [r7, #28]
 80197b4:	2200      	movs	r2, #0
 80197b6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	2200      	movs	r2, #0
 80197bc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 80197be:	69fb      	ldr	r3, [r7, #28]
 80197c0:	68db      	ldr	r3, [r3, #12]
 80197c2:	69fa      	ldr	r2, [r7, #28]
 80197c4:	6912      	ldr	r2, [r2, #16]
 80197c6:	4610      	mov	r0, r2
 80197c8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80197ca:	69fb      	ldr	r3, [r7, #28]
 80197cc:	7adb      	ldrb	r3, [r3, #11]
 80197ce:	2b01      	cmp	r3, #1
 80197d0:	d106      	bne.n	80197e0 <UTIL_TIMER_IRQ_Handler+0xa4>
 80197d2:	69fb      	ldr	r3, [r7, #28]
 80197d4:	7a9b      	ldrb	r3, [r3, #10]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d102      	bne.n	80197e0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 80197da:	69f8      	ldr	r0, [r7, #28]
 80197dc:	f7ff fea6 	bl	801952c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80197e0:	4b15      	ldr	r3, [pc, #84]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d00d      	beq.n	8019804 <UTIL_TIMER_IRQ_Handler+0xc8>
 80197e8:	4b13      	ldr	r3, [pc, #76]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d0d7      	beq.n	80197a2 <UTIL_TIMER_IRQ_Handler+0x66>
 80197f2:	4b11      	ldr	r3, [pc, #68]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	681c      	ldr	r4, [r3, #0]
 80197f8:	4b0e      	ldr	r3, [pc, #56]	; (8019834 <UTIL_TIMER_IRQ_Handler+0xf8>)
 80197fa:	699b      	ldr	r3, [r3, #24]
 80197fc:	4798      	blx	r3
 80197fe:	4603      	mov	r3, r0
 8019800:	429c      	cmp	r4, r3
 8019802:	d3ce      	bcc.n	80197a2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8019804:	4b0c      	ldr	r3, [pc, #48]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	2b00      	cmp	r3, #0
 801980a:	d009      	beq.n	8019820 <UTIL_TIMER_IRQ_Handler+0xe4>
 801980c:	4b0a      	ldr	r3, [pc, #40]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	7a1b      	ldrb	r3, [r3, #8]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d104      	bne.n	8019820 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8019816:	4b08      	ldr	r3, [pc, #32]	; (8019838 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	4618      	mov	r0, r3
 801981c:	f000 f858 	bl	80198d0 <TimerSetTimeout>
 8019820:	69bb      	ldr	r3, [r7, #24]
 8019822:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	f383 8810 	msr	PRIMASK, r3
}
 801982a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801982c:	bf00      	nop
 801982e:	3724      	adds	r7, #36	; 0x24
 8019830:	46bd      	mov	sp, r7
 8019832:	bd90      	pop	{r4, r7, pc}
 8019834:	0801a91c 	.word	0x0801a91c
 8019838:	20000f94 	.word	0x20000f94

0801983c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8019842:	4b06      	ldr	r3, [pc, #24]	; (801985c <UTIL_TIMER_GetCurrentTime+0x20>)
 8019844:	69db      	ldr	r3, [r3, #28]
 8019846:	4798      	blx	r3
 8019848:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801984a:	4b04      	ldr	r3, [pc, #16]	; (801985c <UTIL_TIMER_GetCurrentTime+0x20>)
 801984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801984e:	6878      	ldr	r0, [r7, #4]
 8019850:	4798      	blx	r3
 8019852:	4603      	mov	r3, r0
}
 8019854:	4618      	mov	r0, r3
 8019856:	3708      	adds	r7, #8
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}
 801985c:	0801a91c 	.word	0x0801a91c

08019860 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b084      	sub	sp, #16
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8019868:	4b0a      	ldr	r3, [pc, #40]	; (8019894 <UTIL_TIMER_GetElapsedTime+0x34>)
 801986a:	69db      	ldr	r3, [r3, #28]
 801986c:	4798      	blx	r3
 801986e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8019870:	4b08      	ldr	r3, [pc, #32]	; (8019894 <UTIL_TIMER_GetElapsedTime+0x34>)
 8019872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019874:	6878      	ldr	r0, [r7, #4]
 8019876:	4798      	blx	r3
 8019878:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801987a:	4b06      	ldr	r3, [pc, #24]	; (8019894 <UTIL_TIMER_GetElapsedTime+0x34>)
 801987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801987e:	68f9      	ldr	r1, [r7, #12]
 8019880:	68ba      	ldr	r2, [r7, #8]
 8019882:	1a8a      	subs	r2, r1, r2
 8019884:	4610      	mov	r0, r2
 8019886:	4798      	blx	r3
 8019888:	4603      	mov	r3, r0
}
 801988a:	4618      	mov	r0, r3
 801988c:	3710      	adds	r7, #16
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
 8019892:	bf00      	nop
 8019894:	0801a91c 	.word	0x0801a91c

08019898 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8019898:	b480      	push	{r7}
 801989a:	b085      	sub	sp, #20
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80198a0:	4b0a      	ldr	r3, [pc, #40]	; (80198cc <TimerExists+0x34>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80198a6:	e008      	b.n	80198ba <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80198a8:	68fa      	ldr	r2, [r7, #12]
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	429a      	cmp	r2, r3
 80198ae:	d101      	bne.n	80198b4 <TimerExists+0x1c>
    {
      return true;
 80198b0:	2301      	movs	r3, #1
 80198b2:	e006      	b.n	80198c2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	695b      	ldr	r3, [r3, #20]
 80198b8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d1f3      	bne.n	80198a8 <TimerExists+0x10>
  }
  return false;
 80198c0:	2300      	movs	r3, #0
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	3714      	adds	r7, #20
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bc80      	pop	{r7}
 80198ca:	4770      	bx	lr
 80198cc:	20000f94 	.word	0x20000f94

080198d0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80198d0:	b590      	push	{r4, r7, lr}
 80198d2:	b085      	sub	sp, #20
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80198d8:	4b11      	ldr	r3, [pc, #68]	; (8019920 <TimerSetTimeout+0x50>)
 80198da:	6a1b      	ldr	r3, [r3, #32]
 80198dc:	4798      	blx	r3
 80198de:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	2201      	movs	r2, #1
 80198e4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681c      	ldr	r4, [r3, #0]
 80198ea:	4b0d      	ldr	r3, [pc, #52]	; (8019920 <TimerSetTimeout+0x50>)
 80198ec:	699b      	ldr	r3, [r3, #24]
 80198ee:	4798      	blx	r3
 80198f0:	4602      	mov	r2, r0
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	4413      	add	r3, r2
 80198f6:	429c      	cmp	r4, r3
 80198f8:	d207      	bcs.n	801990a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80198fa:	4b09      	ldr	r3, [pc, #36]	; (8019920 <TimerSetTimeout+0x50>)
 80198fc:	699b      	ldr	r3, [r3, #24]
 80198fe:	4798      	blx	r3
 8019900:	4602      	mov	r2, r0
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	441a      	add	r2, r3
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801990a:	4b05      	ldr	r3, [pc, #20]	; (8019920 <TimerSetTimeout+0x50>)
 801990c:	689b      	ldr	r3, [r3, #8]
 801990e:	687a      	ldr	r2, [r7, #4]
 8019910:	6812      	ldr	r2, [r2, #0]
 8019912:	4610      	mov	r0, r2
 8019914:	4798      	blx	r3
}
 8019916:	bf00      	nop
 8019918:	3714      	adds	r7, #20
 801991a:	46bd      	mov	sp, r7
 801991c:	bd90      	pop	{r4, r7, pc}
 801991e:	bf00      	nop
 8019920:	0801a91c 	.word	0x0801a91c

08019924 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8019924:	b480      	push	{r7}
 8019926:	b085      	sub	sp, #20
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801992c:	4b14      	ldr	r3, [pc, #80]	; (8019980 <TimerInsertTimer+0x5c>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8019932:	4b13      	ldr	r3, [pc, #76]	; (8019980 <TimerInsertTimer+0x5c>)
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	695b      	ldr	r3, [r3, #20]
 8019938:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801993a:	e012      	b.n	8019962 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	681a      	ldr	r2, [r3, #0]
 8019940:	68bb      	ldr	r3, [r7, #8]
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	429a      	cmp	r2, r3
 8019946:	d905      	bls.n	8019954 <TimerInsertTimer+0x30>
    {
        cur = next;
 8019948:	68bb      	ldr	r3, [r7, #8]
 801994a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801994c:	68bb      	ldr	r3, [r7, #8]
 801994e:	695b      	ldr	r3, [r3, #20]
 8019950:	60bb      	str	r3, [r7, #8]
 8019952:	e006      	b.n	8019962 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	68ba      	ldr	r2, [r7, #8]
 801995e:	615a      	str	r2, [r3, #20]
        return;
 8019960:	e009      	b.n	8019976 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	695b      	ldr	r3, [r3, #20]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1e8      	bne.n	801993c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	687a      	ldr	r2, [r7, #4]
 801996e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	2200      	movs	r2, #0
 8019974:	615a      	str	r2, [r3, #20]
}
 8019976:	3714      	adds	r7, #20
 8019978:	46bd      	mov	sp, r7
 801997a:	bc80      	pop	{r7}
 801997c:	4770      	bx	lr
 801997e:	bf00      	nop
 8019980:	20000f94 	.word	0x20000f94

08019984 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801998c:	4b0b      	ldr	r3, [pc, #44]	; (80199bc <TimerInsertNewHeadTimer+0x38>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d002      	beq.n	801999e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	2200      	movs	r2, #0
 801999c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	68fa      	ldr	r2, [r7, #12]
 80199a2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80199a4:	4a05      	ldr	r2, [pc, #20]	; (80199bc <TimerInsertNewHeadTimer+0x38>)
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80199aa:	4b04      	ldr	r3, [pc, #16]	; (80199bc <TimerInsertNewHeadTimer+0x38>)
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	4618      	mov	r0, r3
 80199b0:	f7ff ff8e 	bl	80198d0 <TimerSetTimeout>
}
 80199b4:	bf00      	nop
 80199b6:	3710      	adds	r7, #16
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}
 80199bc:	20000f94 	.word	0x20000f94

080199c0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80199c4:	2218      	movs	r2, #24
 80199c6:	2100      	movs	r1, #0
 80199c8:	4807      	ldr	r0, [pc, #28]	; (80199e8 <UTIL_ADV_TRACE_Init+0x28>)
 80199ca:	f7ff f80e 	bl	80189ea <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80199ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80199d2:	2100      	movs	r1, #0
 80199d4:	4805      	ldr	r0, [pc, #20]	; (80199ec <UTIL_ADV_TRACE_Init+0x2c>)
 80199d6:	f7ff f808 	bl	80189ea <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80199da:	4b05      	ldr	r3, [pc, #20]	; (80199f0 <UTIL_ADV_TRACE_Init+0x30>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	4805      	ldr	r0, [pc, #20]	; (80199f4 <UTIL_ADV_TRACE_Init+0x34>)
 80199e0:	4798      	blx	r3
 80199e2:	4603      	mov	r3, r0
}
 80199e4:	4618      	mov	r0, r3
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	20000f98 	.word	0x20000f98
 80199ec:	20000fb0 	.word	0x20000fb0
 80199f0:	0801a95c 	.word	0x0801a95c
 80199f4:	08019c65 	.word	0x08019c65

080199f8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 80199f8:	b480      	push	{r7}
 80199fa:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80199fc:	4b06      	ldr	r3, [pc, #24]	; (8019a18 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 80199fe:	8a5a      	ldrh	r2, [r3, #18]
 8019a00:	4b05      	ldr	r3, [pc, #20]	; (8019a18 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8019a02:	8a1b      	ldrh	r3, [r3, #16]
 8019a04:	429a      	cmp	r2, r3
 8019a06:	d101      	bne.n	8019a0c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 8019a08:	2301      	movs	r3, #1
 8019a0a:	e000      	b.n	8019a0e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 8019a0c:	2300      	movs	r3, #0
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	46bd      	mov	sp, r7
 8019a12:	bc80      	pop	{r7}
 8019a14:	4770      	bx	lr
 8019a16:	bf00      	nop
 8019a18:	20000f98 	.word	0x20000f98

08019a1c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 8019a1c:	b408      	push	{r3}
 8019a1e:	b580      	push	{r7, lr}
 8019a20:	b08d      	sub	sp, #52	; 0x34
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	60f8      	str	r0, [r7, #12]
 8019a26:	60b9      	str	r1, [r7, #8]
 8019a28:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8019a32:	4b38      	ldr	r3, [pc, #224]	; (8019b14 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8019a34:	7a1b      	ldrb	r3, [r3, #8]
 8019a36:	461a      	mov	r2, r3
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	4293      	cmp	r3, r2
 8019a3c:	d902      	bls.n	8019a44 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 8019a3e:	f06f 0304 	mvn.w	r3, #4
 8019a42:	e05f      	b.n	8019b04 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8019a44:	4b33      	ldr	r3, [pc, #204]	; (8019b14 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8019a46:	68da      	ldr	r2, [r3, #12]
 8019a48:	68bb      	ldr	r3, [r7, #8]
 8019a4a:	4013      	ands	r3, r2
 8019a4c:	68ba      	ldr	r2, [r7, #8]
 8019a4e:	429a      	cmp	r2, r3
 8019a50:	d002      	beq.n	8019a58 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8019a52:	f06f 0305 	mvn.w	r3, #5
 8019a56:	e055      	b.n	8019b04 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8019a58:	4b2e      	ldr	r3, [pc, #184]	; (8019b14 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d00a      	beq.n	8019a76 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d007      	beq.n	8019a76 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8019a66:	4b2b      	ldr	r3, [pc, #172]	; (8019b14 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	f107 0116 	add.w	r1, r7, #22
 8019a6e:	f107 0218 	add.w	r2, r7, #24
 8019a72:	4610      	mov	r0, r2
 8019a74:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8019a76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8019a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8019a84:	4824      	ldr	r0, [pc, #144]	; (8019b18 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8019a86:	f7ff fa3f 	bl	8018f08 <tiny_vsnprintf_like>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 8019a8e:	f000 f9f3 	bl	8019e78 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8019a92:	8afa      	ldrh	r2, [r7, #22]
 8019a94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8019a96:	4413      	add	r3, r2
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	f107 0214 	add.w	r2, r7, #20
 8019a9e:	4611      	mov	r1, r2
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	f000 f96b 	bl	8019d7c <TRACE_AllocateBufer>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019aac:	d026      	beq.n	8019afc <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8019aae:	2300      	movs	r3, #0
 8019ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8019ab2:	e00f      	b.n	8019ad4 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8019ab4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019ab6:	8aba      	ldrh	r2, [r7, #20]
 8019ab8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8019abc:	440b      	add	r3, r1
 8019abe:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8019ac2:	4b16      	ldr	r3, [pc, #88]	; (8019b1c <UTIL_ADV_TRACE_COND_FSend+0x100>)
 8019ac4:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8019ac6:	8abb      	ldrh	r3, [r7, #20]
 8019ac8:	3301      	adds	r3, #1
 8019aca:	b29b      	uxth	r3, r3
 8019acc:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8019ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8019ad4:	8afb      	ldrh	r3, [r7, #22]
 8019ad6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d3eb      	bcc.n	8019ab4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8019adc:	8abb      	ldrh	r3, [r7, #20]
 8019ade:	461a      	mov	r2, r3
 8019ae0:	4b0e      	ldr	r3, [pc, #56]	; (8019b1c <UTIL_ADV_TRACE_COND_FSend+0x100>)
 8019ae2:	18d0      	adds	r0, r2, r3
 8019ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8019aec:	f7ff fa0c 	bl	8018f08 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8019af0:	f000 f9e0 	bl	8019eb4 <TRACE_UnLock>

    return TRACE_Send();
 8019af4:	f000 f832 	bl	8019b5c <TRACE_Send>
 8019af8:	4603      	mov	r3, r0
 8019afa:	e003      	b.n	8019b04 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8019afc:	f000 f9da 	bl	8019eb4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8019b00:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8019b04:	4618      	mov	r0, r3
 8019b06:	3734      	adds	r7, #52	; 0x34
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019b0e:	b001      	add	sp, #4
 8019b10:	4770      	bx	lr
 8019b12:	bf00      	nop
 8019b14:	20000f98 	.word	0x20000f98
 8019b18:	200013b0 	.word	0x200013b0
 8019b1c:	20000fb0 	.word	0x20000fb0

08019b20 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 8019b20:	b480      	push	{r7}
 8019b22:	b083      	sub	sp, #12
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8019b28:	4a03      	ldr	r2, [pc, #12]	; (8019b38 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6053      	str	r3, [r2, #4]
}
 8019b2e:	bf00      	nop
 8019b30:	370c      	adds	r7, #12
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bc80      	pop	{r7}
 8019b36:	4770      	bx	lr
 8019b38:	20000f98 	.word	0x20000f98

08019b3c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8019b3c:	b480      	push	{r7}
 8019b3e:	b083      	sub	sp, #12
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	4603      	mov	r3, r0
 8019b44:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8019b46:	4a04      	ldr	r2, [pc, #16]	; (8019b58 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8019b48:	79fb      	ldrb	r3, [r7, #7]
 8019b4a:	7213      	strb	r3, [r2, #8]
}
 8019b4c:	bf00      	nop
 8019b4e:	370c      	adds	r7, #12
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bc80      	pop	{r7}
 8019b54:	4770      	bx	lr
 8019b56:	bf00      	nop
 8019b58:	20000f98 	.word	0x20000f98

08019b5c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b088      	sub	sp, #32
 8019b60:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8019b62:	2300      	movs	r3, #0
 8019b64:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8019b66:	2300      	movs	r3, #0
 8019b68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8019b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8019b70:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019b72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b74:	b672      	cpsid	i
}
 8019b76:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8019b78:	f000 f9ba 	bl	8019ef0 <TRACE_IsLocked>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d15d      	bne.n	8019c3e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8019b82:	f000 f979 	bl	8019e78 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8019b86:	4b34      	ldr	r3, [pc, #208]	; (8019c58 <TRACE_Send+0xfc>)
 8019b88:	8a1a      	ldrh	r2, [r3, #16]
 8019b8a:	4b33      	ldr	r3, [pc, #204]	; (8019c58 <TRACE_Send+0xfc>)
 8019b8c:	8a5b      	ldrh	r3, [r3, #18]
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	d04d      	beq.n	8019c2e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8019b92:	4b31      	ldr	r3, [pc, #196]	; (8019c58 <TRACE_Send+0xfc>)
 8019b94:	789b      	ldrb	r3, [r3, #2]
 8019b96:	2b01      	cmp	r3, #1
 8019b98:	d117      	bne.n	8019bca <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8019b9a:	4b2f      	ldr	r3, [pc, #188]	; (8019c58 <TRACE_Send+0xfc>)
 8019b9c:	881a      	ldrh	r2, [r3, #0]
 8019b9e:	4b2e      	ldr	r3, [pc, #184]	; (8019c58 <TRACE_Send+0xfc>)
 8019ba0:	8a1b      	ldrh	r3, [r3, #16]
 8019ba2:	1ad3      	subs	r3, r2, r3
 8019ba4:	b29a      	uxth	r2, r3
 8019ba6:	4b2c      	ldr	r3, [pc, #176]	; (8019c58 <TRACE_Send+0xfc>)
 8019ba8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8019baa:	4b2b      	ldr	r3, [pc, #172]	; (8019c58 <TRACE_Send+0xfc>)
 8019bac:	2202      	movs	r2, #2
 8019bae:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8019bb0:	4b29      	ldr	r3, [pc, #164]	; (8019c58 <TRACE_Send+0xfc>)
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8019bb6:	4b28      	ldr	r3, [pc, #160]	; (8019c58 <TRACE_Send+0xfc>)
 8019bb8:	8a9b      	ldrh	r3, [r3, #20]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d105      	bne.n	8019bca <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019bbe:	4b26      	ldr	r3, [pc, #152]	; (8019c58 <TRACE_Send+0xfc>)
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019bc4:	4b24      	ldr	r3, [pc, #144]	; (8019c58 <TRACE_Send+0xfc>)
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8019bca:	4b23      	ldr	r3, [pc, #140]	; (8019c58 <TRACE_Send+0xfc>)
 8019bcc:	789b      	ldrb	r3, [r3, #2]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d115      	bne.n	8019bfe <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8019bd2:	4b21      	ldr	r3, [pc, #132]	; (8019c58 <TRACE_Send+0xfc>)
 8019bd4:	8a5a      	ldrh	r2, [r3, #18]
 8019bd6:	4b20      	ldr	r3, [pc, #128]	; (8019c58 <TRACE_Send+0xfc>)
 8019bd8:	8a1b      	ldrh	r3, [r3, #16]
 8019bda:	429a      	cmp	r2, r3
 8019bdc:	d908      	bls.n	8019bf0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8019bde:	4b1e      	ldr	r3, [pc, #120]	; (8019c58 <TRACE_Send+0xfc>)
 8019be0:	8a5a      	ldrh	r2, [r3, #18]
 8019be2:	4b1d      	ldr	r3, [pc, #116]	; (8019c58 <TRACE_Send+0xfc>)
 8019be4:	8a1b      	ldrh	r3, [r3, #16]
 8019be6:	1ad3      	subs	r3, r2, r3
 8019be8:	b29a      	uxth	r2, r3
 8019bea:	4b1b      	ldr	r3, [pc, #108]	; (8019c58 <TRACE_Send+0xfc>)
 8019bec:	829a      	strh	r2, [r3, #20]
 8019bee:	e006      	b.n	8019bfe <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8019bf0:	4b19      	ldr	r3, [pc, #100]	; (8019c58 <TRACE_Send+0xfc>)
 8019bf2:	8a1b      	ldrh	r3, [r3, #16]
 8019bf4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8019bf8:	b29a      	uxth	r2, r3
 8019bfa:	4b17      	ldr	r3, [pc, #92]	; (8019c58 <TRACE_Send+0xfc>)
 8019bfc:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8019bfe:	4b16      	ldr	r3, [pc, #88]	; (8019c58 <TRACE_Send+0xfc>)
 8019c00:	8a1b      	ldrh	r3, [r3, #16]
 8019c02:	461a      	mov	r2, r3
 8019c04:	4b15      	ldr	r3, [pc, #84]	; (8019c5c <TRACE_Send+0x100>)
 8019c06:	4413      	add	r3, r2
 8019c08:	61bb      	str	r3, [r7, #24]
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	f383 8810 	msr	PRIMASK, r3
}
 8019c14:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8019c16:	f7e7 fe61 	bl	80018dc <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8019c1a:	4b11      	ldr	r3, [pc, #68]	; (8019c60 <TRACE_Send+0x104>)
 8019c1c:	68db      	ldr	r3, [r3, #12]
 8019c1e:	4a0e      	ldr	r2, [pc, #56]	; (8019c58 <TRACE_Send+0xfc>)
 8019c20:	8a92      	ldrh	r2, [r2, #20]
 8019c22:	4611      	mov	r1, r2
 8019c24:	69b8      	ldr	r0, [r7, #24]
 8019c26:	4798      	blx	r3
 8019c28:	4603      	mov	r3, r0
 8019c2a:	77fb      	strb	r3, [r7, #31]
 8019c2c:	e00d      	b.n	8019c4a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8019c2e:	f000 f941 	bl	8019eb4 <TRACE_UnLock>
 8019c32:	697b      	ldr	r3, [r7, #20]
 8019c34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c36:	68bb      	ldr	r3, [r7, #8]
 8019c38:	f383 8810 	msr	PRIMASK, r3
}
 8019c3c:	e005      	b.n	8019c4a <TRACE_Send+0xee>
 8019c3e:	697b      	ldr	r3, [r7, #20]
 8019c40:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	f383 8810 	msr	PRIMASK, r3
}
 8019c48:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8019c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019c4e:	4618      	mov	r0, r3
 8019c50:	3720      	adds	r7, #32
 8019c52:	46bd      	mov	sp, r7
 8019c54:	bd80      	pop	{r7, pc}
 8019c56:	bf00      	nop
 8019c58:	20000f98 	.word	0x20000f98
 8019c5c:	20000fb0 	.word	0x20000fb0
 8019c60:	0801a95c 	.word	0x0801a95c

08019c64 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b088      	sub	sp, #32
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c70:	f3ef 8310 	mrs	r3, PRIMASK
 8019c74:	617b      	str	r3, [r7, #20]
  return(result);
 8019c76:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c7a:	b672      	cpsid	i
}
 8019c7c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8019c7e:	4b3c      	ldr	r3, [pc, #240]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019c80:	789b      	ldrb	r3, [r3, #2]
 8019c82:	2b02      	cmp	r3, #2
 8019c84:	d106      	bne.n	8019c94 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019c86:	4b3a      	ldr	r3, [pc, #232]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019c88:	2200      	movs	r2, #0
 8019c8a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019c8c:	4b38      	ldr	r3, [pc, #224]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019c8e:	2200      	movs	r2, #0
 8019c90:	821a      	strh	r2, [r3, #16]
 8019c92:	e00a      	b.n	8019caa <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8019c94:	4b36      	ldr	r3, [pc, #216]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019c96:	8a1a      	ldrh	r2, [r3, #16]
 8019c98:	4b35      	ldr	r3, [pc, #212]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019c9a:	8a9b      	ldrh	r3, [r3, #20]
 8019c9c:	4413      	add	r3, r2
 8019c9e:	b29b      	uxth	r3, r3
 8019ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019ca4:	b29a      	uxth	r2, r3
 8019ca6:	4b32      	ldr	r3, [pc, #200]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019ca8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8019caa:	4b31      	ldr	r3, [pc, #196]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cac:	8a1a      	ldrh	r2, [r3, #16]
 8019cae:	4b30      	ldr	r3, [pc, #192]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cb0:	8a5b      	ldrh	r3, [r3, #18]
 8019cb2:	429a      	cmp	r2, r3
 8019cb4:	d04d      	beq.n	8019d52 <TRACE_TxCpltCallback+0xee>
 8019cb6:	4b2e      	ldr	r3, [pc, #184]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cb8:	8adb      	ldrh	r3, [r3, #22]
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	d149      	bne.n	8019d52 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8019cbe:	4b2c      	ldr	r3, [pc, #176]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cc0:	789b      	ldrb	r3, [r3, #2]
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d117      	bne.n	8019cf6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8019cc6:	4b2a      	ldr	r3, [pc, #168]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cc8:	881a      	ldrh	r2, [r3, #0]
 8019cca:	4b29      	ldr	r3, [pc, #164]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019ccc:	8a1b      	ldrh	r3, [r3, #16]
 8019cce:	1ad3      	subs	r3, r2, r3
 8019cd0:	b29a      	uxth	r2, r3
 8019cd2:	4b27      	ldr	r3, [pc, #156]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cd4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8019cd6:	4b26      	ldr	r3, [pc, #152]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cd8:	2202      	movs	r2, #2
 8019cda:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8019cdc:	4b24      	ldr	r3, [pc, #144]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cde:	2200      	movs	r2, #0
 8019ce0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8019ce2:	4b23      	ldr	r3, [pc, #140]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019ce4:	8a9b      	ldrh	r3, [r3, #20]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d105      	bne.n	8019cf6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019cea:	4b21      	ldr	r3, [pc, #132]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cec:	2200      	movs	r2, #0
 8019cee:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019cf0:	4b1f      	ldr	r3, [pc, #124]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cf2:	2200      	movs	r2, #0
 8019cf4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8019cf6:	4b1e      	ldr	r3, [pc, #120]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019cf8:	789b      	ldrb	r3, [r3, #2]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d115      	bne.n	8019d2a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8019cfe:	4b1c      	ldr	r3, [pc, #112]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d00:	8a5a      	ldrh	r2, [r3, #18]
 8019d02:	4b1b      	ldr	r3, [pc, #108]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d04:	8a1b      	ldrh	r3, [r3, #16]
 8019d06:	429a      	cmp	r2, r3
 8019d08:	d908      	bls.n	8019d1c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8019d0a:	4b19      	ldr	r3, [pc, #100]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d0c:	8a5a      	ldrh	r2, [r3, #18]
 8019d0e:	4b18      	ldr	r3, [pc, #96]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d10:	8a1b      	ldrh	r3, [r3, #16]
 8019d12:	1ad3      	subs	r3, r2, r3
 8019d14:	b29a      	uxth	r2, r3
 8019d16:	4b16      	ldr	r3, [pc, #88]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d18:	829a      	strh	r2, [r3, #20]
 8019d1a:	e006      	b.n	8019d2a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8019d1c:	4b14      	ldr	r3, [pc, #80]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d1e:	8a1b      	ldrh	r3, [r3, #16]
 8019d20:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8019d24:	b29a      	uxth	r2, r3
 8019d26:	4b12      	ldr	r3, [pc, #72]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d28:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8019d2a:	4b11      	ldr	r3, [pc, #68]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d2c:	8a1b      	ldrh	r3, [r3, #16]
 8019d2e:	461a      	mov	r2, r3
 8019d30:	4b10      	ldr	r3, [pc, #64]	; (8019d74 <TRACE_TxCpltCallback+0x110>)
 8019d32:	4413      	add	r3, r2
 8019d34:	61fb      	str	r3, [r7, #28]
 8019d36:	69bb      	ldr	r3, [r7, #24]
 8019d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	f383 8810 	msr	PRIMASK, r3
}
 8019d40:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8019d42:	4b0d      	ldr	r3, [pc, #52]	; (8019d78 <TRACE_TxCpltCallback+0x114>)
 8019d44:	68db      	ldr	r3, [r3, #12]
 8019d46:	4a0a      	ldr	r2, [pc, #40]	; (8019d70 <TRACE_TxCpltCallback+0x10c>)
 8019d48:	8a92      	ldrh	r2, [r2, #20]
 8019d4a:	4611      	mov	r1, r2
 8019d4c:	69f8      	ldr	r0, [r7, #28]
 8019d4e:	4798      	blx	r3
 8019d50:	e00a      	b.n	8019d68 <TRACE_TxCpltCallback+0x104>
 8019d52:	69bb      	ldr	r3, [r7, #24]
 8019d54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	f383 8810 	msr	PRIMASK, r3
}
 8019d5c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 8019d5e:	f7e7 fdc5 	bl	80018ec <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8019d62:	f000 f8a7 	bl	8019eb4 <TRACE_UnLock>
  }
}
 8019d66:	bf00      	nop
 8019d68:	bf00      	nop
 8019d6a:	3720      	adds	r7, #32
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	20000f98 	.word	0x20000f98
 8019d74:	20000fb0 	.word	0x20000fb0
 8019d78:	0801a95c 	.word	0x0801a95c

08019d7c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	b087      	sub	sp, #28
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	4603      	mov	r3, r0
 8019d84:	6039      	str	r1, [r7, #0]
 8019d86:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8019d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d8c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8019d92:	60fb      	str	r3, [r7, #12]
  return(result);
 8019d94:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019d96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d98:	b672      	cpsid	i
}
 8019d9a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8019d9c:	4b35      	ldr	r3, [pc, #212]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019d9e:	8a5a      	ldrh	r2, [r3, #18]
 8019da0:	4b34      	ldr	r3, [pc, #208]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019da2:	8a1b      	ldrh	r3, [r3, #16]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d11b      	bne.n	8019de0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8019da8:	4b32      	ldr	r3, [pc, #200]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019daa:	8a5b      	ldrh	r3, [r3, #18]
 8019dac:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8019db0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8019db2:	88fa      	ldrh	r2, [r7, #6]
 8019db4:	8afb      	ldrh	r3, [r7, #22]
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d33a      	bcc.n	8019e30 <TRACE_AllocateBufer+0xb4>
 8019dba:	4b2e      	ldr	r3, [pc, #184]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dbc:	8a1b      	ldrh	r3, [r3, #16]
 8019dbe:	88fa      	ldrh	r2, [r7, #6]
 8019dc0:	429a      	cmp	r2, r3
 8019dc2:	d235      	bcs.n	8019e30 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8019dc4:	4b2b      	ldr	r3, [pc, #172]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dc6:	2201      	movs	r2, #1
 8019dc8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8019dca:	4b2a      	ldr	r3, [pc, #168]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dcc:	8a5a      	ldrh	r2, [r3, #18]
 8019dce:	4b29      	ldr	r3, [pc, #164]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dd0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8019dd2:	4b28      	ldr	r3, [pc, #160]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dd4:	8a1b      	ldrh	r3, [r3, #16]
 8019dd6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8019dd8:	4b26      	ldr	r3, [pc, #152]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dda:	2200      	movs	r2, #0
 8019ddc:	825a      	strh	r2, [r3, #18]
 8019dde:	e027      	b.n	8019e30 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8019de0:	4b24      	ldr	r3, [pc, #144]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019de2:	8a5a      	ldrh	r2, [r3, #18]
 8019de4:	4b23      	ldr	r3, [pc, #140]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019de6:	8a1b      	ldrh	r3, [r3, #16]
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d91b      	bls.n	8019e24 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8019dec:	4b21      	ldr	r3, [pc, #132]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019dee:	8a5b      	ldrh	r3, [r3, #18]
 8019df0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8019df4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8019df6:	88fa      	ldrh	r2, [r7, #6]
 8019df8:	8afb      	ldrh	r3, [r7, #22]
 8019dfa:	429a      	cmp	r2, r3
 8019dfc:	d318      	bcc.n	8019e30 <TRACE_AllocateBufer+0xb4>
 8019dfe:	4b1d      	ldr	r3, [pc, #116]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e00:	8a1b      	ldrh	r3, [r3, #16]
 8019e02:	88fa      	ldrh	r2, [r7, #6]
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d213      	bcs.n	8019e30 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8019e08:	4b1a      	ldr	r3, [pc, #104]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e0a:	2201      	movs	r2, #1
 8019e0c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8019e0e:	4b19      	ldr	r3, [pc, #100]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e10:	8a5a      	ldrh	r2, [r3, #18]
 8019e12:	4b18      	ldr	r3, [pc, #96]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e14:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8019e16:	4b17      	ldr	r3, [pc, #92]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e18:	8a1b      	ldrh	r3, [r3, #16]
 8019e1a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8019e1c:	4b15      	ldr	r3, [pc, #84]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e1e:	2200      	movs	r2, #0
 8019e20:	825a      	strh	r2, [r3, #18]
 8019e22:	e005      	b.n	8019e30 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8019e24:	4b13      	ldr	r3, [pc, #76]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e26:	8a1a      	ldrh	r2, [r3, #16]
 8019e28:	4b12      	ldr	r3, [pc, #72]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e2a:	8a5b      	ldrh	r3, [r3, #18]
 8019e2c:	1ad3      	subs	r3, r2, r3
 8019e2e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8019e30:	8afa      	ldrh	r2, [r7, #22]
 8019e32:	88fb      	ldrh	r3, [r7, #6]
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d90f      	bls.n	8019e58 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8019e38:	4b0e      	ldr	r3, [pc, #56]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e3a:	8a5a      	ldrh	r2, [r3, #18]
 8019e3c:	683b      	ldr	r3, [r7, #0]
 8019e3e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8019e40:	4b0c      	ldr	r3, [pc, #48]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e42:	8a5a      	ldrh	r2, [r3, #18]
 8019e44:	88fb      	ldrh	r3, [r7, #6]
 8019e46:	4413      	add	r3, r2
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019e4e:	b29a      	uxth	r2, r3
 8019e50:	4b08      	ldr	r3, [pc, #32]	; (8019e74 <TRACE_AllocateBufer+0xf8>)
 8019e52:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8019e54:	2300      	movs	r3, #0
 8019e56:	82bb      	strh	r3, [r7, #20]
 8019e58:	693b      	ldr	r3, [r7, #16]
 8019e5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e5c:	68bb      	ldr	r3, [r7, #8]
 8019e5e:	f383 8810 	msr	PRIMASK, r3
}
 8019e62:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8019e64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8019e68:	4618      	mov	r0, r3
 8019e6a:	371c      	adds	r7, #28
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bc80      	pop	{r7}
 8019e70:	4770      	bx	lr
 8019e72:	bf00      	nop
 8019e74:	20000f98 	.word	0x20000f98

08019e78 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8019e78:	b480      	push	{r7}
 8019e7a:	b085      	sub	sp, #20
 8019e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8019e82:	607b      	str	r3, [r7, #4]
  return(result);
 8019e84:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019e86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e88:	b672      	cpsid	i
}
 8019e8a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8019e8c:	4b08      	ldr	r3, [pc, #32]	; (8019eb0 <TRACE_Lock+0x38>)
 8019e8e:	8adb      	ldrh	r3, [r3, #22]
 8019e90:	3301      	adds	r3, #1
 8019e92:	b29a      	uxth	r2, r3
 8019e94:	4b06      	ldr	r3, [pc, #24]	; (8019eb0 <TRACE_Lock+0x38>)
 8019e96:	82da      	strh	r2, [r3, #22]
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	f383 8810 	msr	PRIMASK, r3
}
 8019ea2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019ea4:	bf00      	nop
 8019ea6:	3714      	adds	r7, #20
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bc80      	pop	{r7}
 8019eac:	4770      	bx	lr
 8019eae:	bf00      	nop
 8019eb0:	20000f98 	.word	0x20000f98

08019eb4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8019eb4:	b480      	push	{r7}
 8019eb6:	b085      	sub	sp, #20
 8019eb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019eba:	f3ef 8310 	mrs	r3, PRIMASK
 8019ebe:	607b      	str	r3, [r7, #4]
  return(result);
 8019ec0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019ec2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ec4:	b672      	cpsid	i
}
 8019ec6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8019ec8:	4b08      	ldr	r3, [pc, #32]	; (8019eec <TRACE_UnLock+0x38>)
 8019eca:	8adb      	ldrh	r3, [r3, #22]
 8019ecc:	3b01      	subs	r3, #1
 8019ece:	b29a      	uxth	r2, r3
 8019ed0:	4b06      	ldr	r3, [pc, #24]	; (8019eec <TRACE_UnLock+0x38>)
 8019ed2:	82da      	strh	r2, [r3, #22]
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ed8:	68bb      	ldr	r3, [r7, #8]
 8019eda:	f383 8810 	msr	PRIMASK, r3
}
 8019ede:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019ee0:	bf00      	nop
 8019ee2:	3714      	adds	r7, #20
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bc80      	pop	{r7}
 8019ee8:	4770      	bx	lr
 8019eea:	bf00      	nop
 8019eec:	20000f98 	.word	0x20000f98

08019ef0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8019ef0:	b480      	push	{r7}
 8019ef2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8019ef4:	4b05      	ldr	r3, [pc, #20]	; (8019f0c <TRACE_IsLocked+0x1c>)
 8019ef6:	8adb      	ldrh	r3, [r3, #22]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	bf14      	ite	ne
 8019efc:	2301      	movne	r3, #1
 8019efe:	2300      	moveq	r3, #0
 8019f00:	b2db      	uxtb	r3, r3
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	46bd      	mov	sp, r7
 8019f06:	bc80      	pop	{r7}
 8019f08:	4770      	bx	lr
 8019f0a:	bf00      	nop
 8019f0c:	20000f98 	.word	0x20000f98

08019f10 <__libc_init_array>:
 8019f10:	b570      	push	{r4, r5, r6, lr}
 8019f12:	4d0d      	ldr	r5, [pc, #52]	; (8019f48 <__libc_init_array+0x38>)
 8019f14:	4c0d      	ldr	r4, [pc, #52]	; (8019f4c <__libc_init_array+0x3c>)
 8019f16:	1b64      	subs	r4, r4, r5
 8019f18:	10a4      	asrs	r4, r4, #2
 8019f1a:	2600      	movs	r6, #0
 8019f1c:	42a6      	cmp	r6, r4
 8019f1e:	d109      	bne.n	8019f34 <__libc_init_array+0x24>
 8019f20:	4d0b      	ldr	r5, [pc, #44]	; (8019f50 <__libc_init_array+0x40>)
 8019f22:	4c0c      	ldr	r4, [pc, #48]	; (8019f54 <__libc_init_array+0x44>)
 8019f24:	f000 f8a0 	bl	801a068 <_init>
 8019f28:	1b64      	subs	r4, r4, r5
 8019f2a:	10a4      	asrs	r4, r4, #2
 8019f2c:	2600      	movs	r6, #0
 8019f2e:	42a6      	cmp	r6, r4
 8019f30:	d105      	bne.n	8019f3e <__libc_init_array+0x2e>
 8019f32:	bd70      	pop	{r4, r5, r6, pc}
 8019f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f38:	4798      	blx	r3
 8019f3a:	3601      	adds	r6, #1
 8019f3c:	e7ee      	b.n	8019f1c <__libc_init_array+0xc>
 8019f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f42:	4798      	blx	r3
 8019f44:	3601      	adds	r6, #1
 8019f46:	e7f2      	b.n	8019f2e <__libc_init_array+0x1e>
 8019f48:	0801ae4c 	.word	0x0801ae4c
 8019f4c:	0801ae4c 	.word	0x0801ae4c
 8019f50:	0801ae4c 	.word	0x0801ae4c
 8019f54:	0801ae50 	.word	0x0801ae50

08019f58 <memset>:
 8019f58:	4402      	add	r2, r0
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	d100      	bne.n	8019f62 <memset+0xa>
 8019f60:	4770      	bx	lr
 8019f62:	f803 1b01 	strb.w	r1, [r3], #1
 8019f66:	e7f9      	b.n	8019f5c <memset+0x4>

08019f68 <floor>:
 8019f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f6c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8019f70:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8019f74:	2e13      	cmp	r6, #19
 8019f76:	4602      	mov	r2, r0
 8019f78:	460b      	mov	r3, r1
 8019f7a:	4607      	mov	r7, r0
 8019f7c:	460c      	mov	r4, r1
 8019f7e:	4605      	mov	r5, r0
 8019f80:	dc34      	bgt.n	8019fec <floor+0x84>
 8019f82:	2e00      	cmp	r6, #0
 8019f84:	da15      	bge.n	8019fb2 <floor+0x4a>
 8019f86:	a334      	add	r3, pc, #208	; (adr r3, 801a058 <floor+0xf0>)
 8019f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8c:	f7e6 f902 	bl	8000194 <__adddf3>
 8019f90:	2200      	movs	r2, #0
 8019f92:	2300      	movs	r3, #0
 8019f94:	f7e6 fb32 	bl	80005fc <__aeabi_dcmpgt>
 8019f98:	b140      	cbz	r0, 8019fac <floor+0x44>
 8019f9a:	2c00      	cmp	r4, #0
 8019f9c:	da59      	bge.n	801a052 <floor+0xea>
 8019f9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019fa2:	ea57 0503 	orrs.w	r5, r7, r3
 8019fa6:	d001      	beq.n	8019fac <floor+0x44>
 8019fa8:	4c2d      	ldr	r4, [pc, #180]	; (801a060 <floor+0xf8>)
 8019faa:	2500      	movs	r5, #0
 8019fac:	4623      	mov	r3, r4
 8019fae:	462f      	mov	r7, r5
 8019fb0:	e025      	b.n	8019ffe <floor+0x96>
 8019fb2:	4a2c      	ldr	r2, [pc, #176]	; (801a064 <floor+0xfc>)
 8019fb4:	fa42 f806 	asr.w	r8, r2, r6
 8019fb8:	ea01 0208 	and.w	r2, r1, r8
 8019fbc:	4302      	orrs	r2, r0
 8019fbe:	d01e      	beq.n	8019ffe <floor+0x96>
 8019fc0:	a325      	add	r3, pc, #148	; (adr r3, 801a058 <floor+0xf0>)
 8019fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc6:	f7e6 f8e5 	bl	8000194 <__adddf3>
 8019fca:	2200      	movs	r2, #0
 8019fcc:	2300      	movs	r3, #0
 8019fce:	f7e6 fb15 	bl	80005fc <__aeabi_dcmpgt>
 8019fd2:	2800      	cmp	r0, #0
 8019fd4:	d0ea      	beq.n	8019fac <floor+0x44>
 8019fd6:	2c00      	cmp	r4, #0
 8019fd8:	bfbe      	ittt	lt
 8019fda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019fde:	fa43 f606 	asrlt.w	r6, r3, r6
 8019fe2:	19a4      	addlt	r4, r4, r6
 8019fe4:	ea24 0408 	bic.w	r4, r4, r8
 8019fe8:	2500      	movs	r5, #0
 8019fea:	e7df      	b.n	8019fac <floor+0x44>
 8019fec:	2e33      	cmp	r6, #51	; 0x33
 8019fee:	dd0a      	ble.n	801a006 <floor+0x9e>
 8019ff0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019ff4:	d103      	bne.n	8019ffe <floor+0x96>
 8019ff6:	f7e6 f8cd 	bl	8000194 <__adddf3>
 8019ffa:	4607      	mov	r7, r0
 8019ffc:	460b      	mov	r3, r1
 8019ffe:	4638      	mov	r0, r7
 801a000:	4619      	mov	r1, r3
 801a002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a006:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801a00a:	f04f 32ff 	mov.w	r2, #4294967295
 801a00e:	fa22 f808 	lsr.w	r8, r2, r8
 801a012:	ea18 0f00 	tst.w	r8, r0
 801a016:	d0f2      	beq.n	8019ffe <floor+0x96>
 801a018:	a30f      	add	r3, pc, #60	; (adr r3, 801a058 <floor+0xf0>)
 801a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a01e:	f7e6 f8b9 	bl	8000194 <__adddf3>
 801a022:	2200      	movs	r2, #0
 801a024:	2300      	movs	r3, #0
 801a026:	f7e6 fae9 	bl	80005fc <__aeabi_dcmpgt>
 801a02a:	2800      	cmp	r0, #0
 801a02c:	d0be      	beq.n	8019fac <floor+0x44>
 801a02e:	2c00      	cmp	r4, #0
 801a030:	da02      	bge.n	801a038 <floor+0xd0>
 801a032:	2e14      	cmp	r6, #20
 801a034:	d103      	bne.n	801a03e <floor+0xd6>
 801a036:	3401      	adds	r4, #1
 801a038:	ea25 0508 	bic.w	r5, r5, r8
 801a03c:	e7b6      	b.n	8019fac <floor+0x44>
 801a03e:	2301      	movs	r3, #1
 801a040:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a044:	fa03 f606 	lsl.w	r6, r3, r6
 801a048:	4435      	add	r5, r6
 801a04a:	42bd      	cmp	r5, r7
 801a04c:	bf38      	it	cc
 801a04e:	18e4      	addcc	r4, r4, r3
 801a050:	e7f2      	b.n	801a038 <floor+0xd0>
 801a052:	2500      	movs	r5, #0
 801a054:	462c      	mov	r4, r5
 801a056:	e7a9      	b.n	8019fac <floor+0x44>
 801a058:	8800759c 	.word	0x8800759c
 801a05c:	7e37e43c 	.word	0x7e37e43c
 801a060:	bff00000 	.word	0xbff00000
 801a064:	000fffff 	.word	0x000fffff

0801a068 <_init>:
 801a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a06a:	bf00      	nop
 801a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a06e:	bc08      	pop	{r3}
 801a070:	469e      	mov	lr, r3
 801a072:	4770      	bx	lr

0801a074 <_fini>:
 801a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a076:	bf00      	nop
 801a078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a07a:	bc08      	pop	{r3}
 801a07c:	469e      	mov	lr, r3
 801a07e:	4770      	bx	lr
